
microROStest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000144ec  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001030  080146f0  080146f0  000246f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015720  08015720  00030258  2**0
                  CONTENTS
  4 .ARM          00000008  08015720  08015720  00025720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015728  08015728  00030258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015728  08015728  00025728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015730  08015730  00025730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  08015734  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010d10  20000258  0801598c  00030258  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20010f68  0801598c  00030f68  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00030286  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a8eb  00000000  00000000  000302fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e8d  00000000  00000000  0004abe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001468  00000000  00000000  0004ea78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fa9  00000000  00000000  0004fee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d731  00000000  00000000  00050e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b001  00000000  00000000  0007e5ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010fa48  00000000  00000000  000995bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006148  00000000  00000000  001a9004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001af14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000258 	.word	0x20000258
 800021c:	00000000 	.word	0x00000000
 8000220:	080146d4 	.word	0x080146d4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000025c 	.word	0x2000025c
 800023c:	080146d4 	.word	0x080146d4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800032e:	f000 b9bb 	b.w	80006a8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80006b8:	f005 fce8 	bl	800608c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80006bc:	4b5b      	ldr	r3, [pc, #364]	; (800082c <pvPortMallocMicroROS+0x180>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d101      	bne.n	80006c8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80006c4:	f000 f98a 	bl	80009dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006c8:	4b59      	ldr	r3, [pc, #356]	; (8000830 <pvPortMallocMicroROS+0x184>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4013      	ands	r3, r2
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	f040 8092 	bne.w	80007fa <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d01f      	beq.n	800071c <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 80006dc:	2208      	movs	r2, #8
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d016      	beq.n	800071c <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f023 0307 	bic.w	r3, r3, #7
 80006f4:	3308      	adds	r3, #8
 80006f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d00c      	beq.n	800071c <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000706:	b672      	cpsid	i
 8000708:	f383 8811 	msr	BASEPRI, r3
 800070c:	f3bf 8f6f 	isb	sy
 8000710:	f3bf 8f4f 	dsb	sy
 8000714:	b662      	cpsie	i
 8000716:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000718:	bf00      	nop
 800071a:	e7fe      	b.n	800071a <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d06b      	beq.n	80007fa <pvPortMallocMicroROS+0x14e>
 8000722:	4b44      	ldr	r3, [pc, #272]	; (8000834 <pvPortMallocMicroROS+0x188>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	429a      	cmp	r2, r3
 800072a:	d866      	bhi.n	80007fa <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800072c:	4b42      	ldr	r3, [pc, #264]	; (8000838 <pvPortMallocMicroROS+0x18c>)
 800072e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000730:	4b41      	ldr	r3, [pc, #260]	; (8000838 <pvPortMallocMicroROS+0x18c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000736:	e004      	b.n	8000742 <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	429a      	cmp	r2, r3
 800074a:	d903      	bls.n	8000754 <pvPortMallocMicroROS+0xa8>
 800074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1f1      	bne.n	8000738 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000754:	4b35      	ldr	r3, [pc, #212]	; (800082c <pvPortMallocMicroROS+0x180>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800075a:	429a      	cmp	r2, r3
 800075c:	d04d      	beq.n	80007fa <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800075e:	6a3b      	ldr	r3, [r7, #32]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2208      	movs	r2, #8
 8000764:	4413      	add	r3, r2
 8000766:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	6a3b      	ldr	r3, [r7, #32]
 800076e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000772:	685a      	ldr	r2, [r3, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	1ad2      	subs	r2, r2, r3
 8000778:	2308      	movs	r3, #8
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	429a      	cmp	r2, r3
 800077e:	d921      	bls.n	80007c4 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	2b00      	cmp	r3, #0
 8000790:	d00c      	beq.n	80007ac <pvPortMallocMicroROS+0x100>
	__asm volatile
 8000792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000796:	b672      	cpsid	i
 8000798:	f383 8811 	msr	BASEPRI, r3
 800079c:	f3bf 8f6f 	isb	sy
 80007a0:	f3bf 8f4f 	dsb	sy
 80007a4:	b662      	cpsie	i
 80007a6:	613b      	str	r3, [r7, #16]
}
 80007a8:	bf00      	nop
 80007aa:	e7fe      	b.n	80007aa <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80007ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ae:	685a      	ldr	r2, [r3, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	1ad2      	subs	r2, r2, r3
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80007b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80007be:	69b8      	ldr	r0, [r7, #24]
 80007c0:	f000 f96e 	bl	8000aa0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <pvPortMallocMicroROS+0x188>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	4a19      	ldr	r2, [pc, #100]	; (8000834 <pvPortMallocMicroROS+0x188>)
 80007d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <pvPortMallocMicroROS+0x188>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <pvPortMallocMicroROS+0x190>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d203      	bcs.n	80007e6 <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <pvPortMallocMicroROS+0x188>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a16      	ldr	r2, [pc, #88]	; (800083c <pvPortMallocMicroROS+0x190>)
 80007e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e8:	685a      	ldr	r2, [r3, #4]
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <pvPortMallocMicroROS+0x184>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	431a      	orrs	r2, r3
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007fa:	f005 fc55 	bl	80060a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	f003 0307 	and.w	r3, r3, #7
 8000804:	2b00      	cmp	r3, #0
 8000806:	d00c      	beq.n	8000822 <pvPortMallocMicroROS+0x176>
	__asm volatile
 8000808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800080c:	b672      	cpsid	i
 800080e:	f383 8811 	msr	BASEPRI, r3
 8000812:	f3bf 8f6f 	isb	sy
 8000816:	f3bf 8f4f 	dsb	sy
 800081a:	b662      	cpsie	i
 800081c:	60fb      	str	r3, [r7, #12]
}
 800081e:	bf00      	nop
 8000820:	e7fe      	b.n	8000820 <pvPortMallocMicroROS+0x174>
	return pvReturn;
 8000822:	69fb      	ldr	r3, [r7, #28]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20003e7c 	.word	0x20003e7c
 8000830:	20003e88 	.word	0x20003e88
 8000834:	20003e80 	.word	0x20003e80
 8000838:	20003e74 	.word	0x20003e74
 800083c:	20003e84 	.word	0x20003e84

08000840 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d04c      	beq.n	80008ec <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000852:	2308      	movs	r3, #8
 8000854:	425b      	negs	r3, r3
 8000856:	697a      	ldr	r2, [r7, #20]
 8000858:	4413      	add	r3, r2
 800085a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <vPortFreeMicroROS+0xb4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4013      	ands	r3, r2
 800086a:	2b00      	cmp	r3, #0
 800086c:	d10c      	bne.n	8000888 <vPortFreeMicroROS+0x48>
	__asm volatile
 800086e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000872:	b672      	cpsid	i
 8000874:	f383 8811 	msr	BASEPRI, r3
 8000878:	f3bf 8f6f 	isb	sy
 800087c:	f3bf 8f4f 	dsb	sy
 8000880:	b662      	cpsie	i
 8000882:	60fb      	str	r3, [r7, #12]
}
 8000884:	bf00      	nop
 8000886:	e7fe      	b.n	8000886 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d00c      	beq.n	80008aa <vPortFreeMicroROS+0x6a>
	__asm volatile
 8000890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000894:	b672      	cpsid	i
 8000896:	f383 8811 	msr	BASEPRI, r3
 800089a:	f3bf 8f6f 	isb	sy
 800089e:	f3bf 8f4f 	dsb	sy
 80008a2:	b662      	cpsie	i
 80008a4:	60bb      	str	r3, [r7, #8]
}
 80008a6:	bf00      	nop
 80008a8:	e7fe      	b.n	80008a8 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <vPortFreeMicroROS+0xb4>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4013      	ands	r3, r2
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d019      	beq.n	80008ec <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d115      	bne.n	80008ec <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	685a      	ldr	r2, [r3, #4]
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <vPortFreeMicroROS+0xb4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	43db      	mvns	r3, r3
 80008ca:	401a      	ands	r2, r3
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80008d0:	f005 fbdc 	bl	800608c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <vPortFreeMicroROS+0xb8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4413      	add	r3, r2
 80008de:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <vPortFreeMicroROS+0xb8>)
 80008e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80008e2:	6938      	ldr	r0, [r7, #16]
 80008e4:	f000 f8dc 	bl	8000aa0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008e8:	f005 fbde 	bl	80060a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008ec:	bf00      	nop
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20003e88 	.word	0x20003e88
 80008f8:	20003e80 	.word	0x20003e80

080008fc <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008fc:	b480      	push	{r7}
 80008fe:	b087      	sub	sp, #28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000908:	2308      	movs	r3, #8
 800090a:	425b      	negs	r3, r3
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	4413      	add	r3, r2
 8000910:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	685a      	ldr	r2, [r3, #4]
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <getBlockSize+0x38>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	43db      	mvns	r3, r3
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]

	return count;
 8000924:	68fb      	ldr	r3, [r7, #12]
}
 8000926:	4618      	mov	r0, r3
 8000928:	371c      	adds	r7, #28
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20003e88 	.word	0x20003e88

08000938 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000942:	f005 fba3 	bl	800608c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000946:	6838      	ldr	r0, [r7, #0]
 8000948:	f7ff feb0 	bl	80006ac <pvPortMallocMicroROS>
 800094c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d017      	beq.n	8000984 <pvPortReallocMicroROS+0x4c>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d014      	beq.n	8000984 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff ffce 	bl	80008fc <getBlockSize>
 8000960:	4603      	mov	r3, r0
 8000962:	2208      	movs	r2, #8
 8000964:	1a9b      	subs	r3, r3, r2
 8000966:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	429a      	cmp	r2, r3
 800096e:	d201      	bcs.n	8000974 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	68b8      	ldr	r0, [r7, #8]
 800097a:	f013 f862 	bl	8013a42 <memcpy>

		vPortFreeMicroROS(pv);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ff5e 	bl	8000840 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000984:	f005 fb90 	bl	80060a8 <xTaskResumeAll>

	return newmem;
 8000988:	68bb      	ldr	r3, [r7, #8]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b086      	sub	sp, #24
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800099c:	f005 fb76 	bl	800608c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80009aa:	6978      	ldr	r0, [r7, #20]
 80009ac:	f7ff fe7e 	bl	80006ac <pvPortMallocMicroROS>
 80009b0:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	613b      	str	r3, [r7, #16]

  	while(count--)
 80009b6:	e004      	b.n	80009c2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	613a      	str	r2, [r7, #16]
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	1e5a      	subs	r2, r3, #1
 80009c6:	617a      	str	r2, [r7, #20]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1f5      	bne.n	80009b8 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80009cc:	f005 fb6c 	bl	80060a8 <xTaskResumeAll>
  	return mem;
 80009d0:	68fb      	ldr	r3, [r7, #12]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009e2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80009e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009e8:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <prvHeapInit+0xac>)
 80009ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d00c      	beq.n	8000a10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3307      	adds	r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f023 0307 	bic.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a04:	68ba      	ldr	r2, [r7, #8]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	4a1f      	ldr	r2, [pc, #124]	; (8000a88 <prvHeapInit+0xac>)
 8000a0c:	4413      	add	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a14:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <prvHeapInit+0xb0>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <prvHeapInit+0xb0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	4413      	add	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a28:	2208      	movs	r2, #8
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	1a9b      	subs	r3, r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f023 0307 	bic.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <prvHeapInit+0xb4>)
 8000a3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <prvHeapInit+0xb4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2200      	movs	r2, #0
 8000a44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <prvHeapInit+0xb4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	1ad2      	subs	r2, r2, r3
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <prvHeapInit+0xb4>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <prvHeapInit+0xb8>)
 8000a6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	4a09      	ldr	r2, [pc, #36]	; (8000a98 <prvHeapInit+0xbc>)
 8000a72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <prvHeapInit+0xc0>)
 8000a76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a7a:	601a      	str	r2, [r3, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	20000274 	.word	0x20000274
 8000a8c:	20003e74 	.word	0x20003e74
 8000a90:	20003e7c 	.word	0x20003e7c
 8000a94:	20003e84 	.word	0x20003e84
 8000a98:	20003e80 	.word	0x20003e80
 8000a9c:	20003e88 	.word	0x20003e88

08000aa0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000aa8:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <prvInsertBlockIntoFreeList+0xac>)
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	e002      	b.n	8000ab4 <prvInsertBlockIntoFreeList+0x14>
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d8f7      	bhi.n	8000aae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	4413      	add	r3, r2
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d108      	bne.n	8000ae2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	685a      	ldr	r2, [r3, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	441a      	add	r2, r3
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	441a      	add	r2, r3
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d118      	bne.n	8000b28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <prvInsertBlockIntoFreeList+0xb0>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d00d      	beq.n	8000b1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	441a      	add	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	e008      	b.n	8000b30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <prvInsertBlockIntoFreeList+0xb0>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	e003      	b.n	8000b30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d002      	beq.n	8000b3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20003e74 	.word	0x20003e74
 8000b50:	20003e7c 	.word	0x20003e7c

08000b54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <MX_DMA_Init+0x48>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <MX_DMA_Init+0x48>)
 8000b60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <MX_DMA_Init+0x48>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2105      	movs	r1, #5
 8000b76:	200c      	movs	r0, #12
 8000b78:	f001 f8b8 	bl	8001cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b7c:	200c      	movs	r0, #12
 8000b7e:	f001 f8d1 	bl	8001d24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2105      	movs	r1, #5
 8000b86:	200e      	movs	r0, #14
 8000b88:	f001 f8b0 	bl	8001cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b8c:	200e      	movs	r0, #14
 8000b8e:	f001 f8c9 	bl	8001d24 <HAL_NVIC_EnableIRQ>

}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000bae:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bb4:	4904      	ldr	r1, [pc, #16]	; (8000bc8 <cubemx_transport_open+0x28>)
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f003 fc0a 	bl	80043d0 <HAL_UART_Receive_DMA>
    return true;
 8000bbc:	2301      	movs	r3, #1
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20003e8c 	.word	0x20003e8c

08000bcc <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000bda:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f003 fc3b 	bl	8004458 <HAL_UART_DMAStop>
    return true;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
 8000bf8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000c00:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000c06:	2b20      	cmp	r3, #32
 8000c08:	d11a      	bne.n	8000c40 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f003 fb60 	bl	80042d8 <HAL_UART_Transmit_DMA>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c1c:	e002      	b.n	8000c24 <cubemx_transport_write+0x38>
            osDelay(1);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f004 ff16 	bl	8005a50 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c24:	7cfb      	ldrb	r3, [r7, #19]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d103      	bne.n	8000c32 <cubemx_transport_write+0x46>
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000c2e:	2b20      	cmp	r3, #32
 8000c30:	d1f5      	bne.n	8000c1e <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8000c32:	7cfb      	ldrb	r3, [r7, #19]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d101      	bne.n	8000c3c <cubemx_transport_write+0x50>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	e002      	b.n	8000c42 <cubemx_transport_write+0x56>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e000      	b.n	8000c42 <cubemx_transport_write+0x56>
    }else{
        return 0;
 8000c40:	2300      	movs	r3, #0
    }
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000c60:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c66:	b672      	cpsid	i
}
 8000c68:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000c76:	4a1c      	ldr	r2, [pc, #112]	; (8000ce8 <cubemx_transport_read+0x9c>)
 8000c78:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c7a:	b662      	cpsie	i
}
 8000c7c:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3301      	adds	r3, #1
 8000c82:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f004 fee3 	bl	8005a50 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <cubemx_transport_read+0xa0>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <cubemx_transport_read+0x9c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d103      	bne.n	8000c9e <cubemx_transport_read+0x52>
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	dbe3      	blt.n	8000c66 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000ca2:	e011      	b.n	8000cc8 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <cubemx_transport_read+0xa0>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	440b      	add	r3, r1
 8000cae:	4910      	ldr	r1, [pc, #64]	; (8000cf0 <cubemx_transport_read+0xa4>)
 8000cb0:	5c8a      	ldrb	r2, [r1, r2]
 8000cb2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <cubemx_transport_read+0xa0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <cubemx_transport_read+0xa0>)
 8000cc0:	6013      	str	r3, [r2, #0]
        wrote++;
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <cubemx_transport_read+0xa0>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <cubemx_transport_read+0x9c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d003      	beq.n	8000cdc <cubemx_transport_read+0x90>
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d3e3      	bcc.n	8000ca4 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000cdc:	69bb      	ldr	r3, [r7, #24]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3720      	adds	r7, #32
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20004690 	.word	0x20004690
 8000cec:	2000468c 	.word	0x2000468c
 8000cf0:	20003e8c 	.word	0x20003e8c

08000cf4 <service_callback>:
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

// サービスのコールバック関数を定義
void service_callback(const void *request, void *response)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
	// リクエストとレスポンスを適切な型にキャスト
	custom_test_msgs__srv__AddThreeInts_Request *_req = (custom_test_msgs__srv__AddThreeInts_Request *)request;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	60fb      	str	r3, [r7, #12]
	custom_test_msgs__srv__AddThreeInts_Response *_res = (custom_test_msgs__srv__AddThreeInts_Response *)response;
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	60bb      	str	r3, [r7, #8]

	if(_req->a == 1){
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0c:	1e51      	subs	r1, r2, #1
 8000d0e:	430b      	orrs	r3, r1
 8000d10:	d105      	bne.n	8000d1e <service_callback+0x2a>

		if(_req->b == 1){
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d18:	1e51      	subs	r1, r2, #1
 8000d1a:	430b      	orrs	r3, r1
 8000d1c:	e00d      	b.n	8000d3a <service_callback+0x46>

		}else{

		}

	}else if(_req->a == -1){
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d28:	bf08      	it	eq
 8000d2a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8000d2e:	d104      	bne.n	8000d3a <service_callback+0x46>

		if(_req->b == 1){
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d36:	1e51      	subs	r1, r2, #1
 8000d38:	430b      	orrs	r3, r1

		}

	}
	// レスポンスに合計値をセット
	_res->sum = 0;
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <vApplicationGetIdleTaskMemory+0x30>)
 8000d6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d72:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	20007ee0 	.word	0x20007ee0
 8000d84:	20007f80 	.word	0x20007f80

08000d88 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d88:	b5b0      	push	{r4, r5, r7, lr}
 8000d8a:	b08e      	sub	sp, #56	; 0x38
 8000d8c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512, defaultTaskBuffer, &defaultTaskControlBlock);
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_FREERTOS_Init+0x58>)
 8000d90:	f107 041c 	add.w	r4, r7, #28
 8000d94:	461d      	mov	r5, r3
 8000d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f004 fe05 	bl	80059b8 <osThreadCreate>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4a0c      	ldr	r2, [pc, #48]	; (8000de4 <MX_FREERTOS_Init+0x5c>)
 8000db2:	6013      	str	r3, [r2, #0]

  /* definition and creation of micoroROSTask */
  osThreadStaticDef(micoroROSTask, StartMicroROSTask, osPriorityHigh, 0, 3000, micoroROSTaskBuffer, &micoroROSTaskControlBlock);
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <MX_FREERTOS_Init+0x60>)
 8000db6:	463c      	mov	r4, r7
 8000db8:	461d      	mov	r5, r3
 8000dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  micoroROSTaskHandle = osThreadCreate(osThread(micoroROSTask), NULL);
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f004 fdf4 	bl	80059b8 <osThreadCreate>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	4a06      	ldr	r2, [pc, #24]	; (8000dec <MX_FREERTOS_Init+0x64>)
 8000dd4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

}
 8000dd6:	bf00      	nop
 8000dd8:	3738      	adds	r7, #56	; 0x38
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8000dde:	bf00      	nop
 8000de0:	080146fc 	.word	0x080146fc
 8000de4:	200046b8 	.word	0x200046b8
 8000de8:	08014728 	.word	0x08014728
 8000dec:	20004f5c 	.word	0x20004f5c

08000df0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f004 fe29 	bl	8005a50 <osDelay>
 8000dfe:	e7fb      	b.n	8000df8 <StartDefaultTask+0x8>

08000e00 <StartMicroROSTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMicroROSTask */
void StartMicroROSTask(void const * argument)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b0e3      	sub	sp, #396	; 0x18c
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000e0a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8000e0e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartMicroROSTask */
	// micro-ROSの初期化
	 	printf("start microROS task\r\n");
 8000e10:	487d      	ldr	r0, [pc, #500]	; (8001008 <StartMicroROSTask+0x208>)
 8000e12:	f012 fad1 	bl	80133b8 <puts>
	 	rmw_uros_set_custom_transport(
 8000e16:	4b7d      	ldr	r3, [pc, #500]	; (800100c <StartMicroROSTask+0x20c>)
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	4b7d      	ldr	r3, [pc, #500]	; (8001010 <StartMicroROSTask+0x210>)
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	4b7d      	ldr	r3, [pc, #500]	; (8001014 <StartMicroROSTask+0x214>)
 8000e20:	4a7d      	ldr	r2, [pc, #500]	; (8001018 <StartMicroROSTask+0x218>)
 8000e22:	497e      	ldr	r1, [pc, #504]	; (800101c <StartMicroROSTask+0x21c>)
 8000e24:	2001      	movs	r0, #1
 8000e26:	f009 f939 	bl	800a09c <rmw_uros_set_custom_transport>
	 	    cubemx_transport_open,
	 	    cubemx_transport_close,
	 	    cubemx_transport_write,
	 	    cubemx_transport_read);

	 	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000e2a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f008 fdf6 	bl	8009a20 <rcutils_get_zero_initialized_allocator>
	 	freeRTOS_allocator.allocate = microros_allocate;
 8000e34:	4b7a      	ldr	r3, [pc, #488]	; (8001020 <StartMicroROSTask+0x220>)
 8000e36:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	 	freeRTOS_allocator.deallocate = microros_deallocate;
 8000e3a:	4b7a      	ldr	r3, [pc, #488]	; (8001024 <StartMicroROSTask+0x224>)
 8000e3c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	 	freeRTOS_allocator.reallocate = microros_reallocate;
 8000e40:	4b79      	ldr	r3, [pc, #484]	; (8001028 <StartMicroROSTask+0x228>)
 8000e42:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	 	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000e46:	4b79      	ldr	r3, [pc, #484]	; (800102c <StartMicroROSTask+0x22c>)
 8000e48:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	 	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000e4c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000e50:	4618      	mov	r0, r3
 8000e52:	f008 fdf3 	bl	8009a3c <rcutils_set_default_allocator>
 8000e56:	4603      	mov	r3, r0
 8000e58:	f083 0301 	eor.w	r3, r3, #1
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <StartMicroROSTask+0x6a>
	 		printf("Error on default allocators (line %d)\r\n", __LINE__);
 8000e62:	21e2      	movs	r1, #226	; 0xe2
 8000e64:	4872      	ldr	r0, [pc, #456]	; (8001030 <StartMicroROSTask+0x230>)
 8000e66:	f012 fa41 	bl	80132ec <iprintf>
	 	}

	     // ここからサービスサーバの実装
	 	setvbuf(stdout, NULL, _IONBF, BUFSIZ);
 8000e6a:	4b72      	ldr	r3, [pc, #456]	; (8001034 <StartMicroROSTask+0x234>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6898      	ldr	r0, [r3, #8]
 8000e70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e74:	2202      	movs	r2, #2
 8000e76:	2100      	movs	r1, #0
 8000e78:	f012 faa6 	bl	80133c8 <setvbuf>
	 	rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 8000e7c:	f007 fb0e 	bl	800849c <rcl_get_zero_initialized_init_options>
 8000e80:	4603      	mov	r3, r0
 8000e82:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	 	rcl_allocator_t allocator = rcl_get_default_allocator();
 8000e86:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f008 fdf4 	bl	8009a78 <rcutils_get_default_allocator>
	 	rclc_support_t support;
	 	rcl_node_t node = rcl_get_zero_initialized_node();
 8000e90:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000e94:	4618      	mov	r0, r3
 8000e96:	f007 fc09 	bl	80086ac <rcl_get_zero_initialized_node>
	 	rcl_service_t service = rcl_get_zero_initialized_service();
 8000e9a:	f007 fdb1 	bl	8008a00 <rcl_get_zero_initialized_service>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	 	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8000ea4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000ea8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000eac:	4618      	mov	r0, r3
 8000eae:	f008 fa13 	bl	80092d8 <rclc_executor_get_zero_initialized_executor>
	 	rcl_node_options_t node_ops = rcl_node_get_default_options();
 8000eb2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000eb6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f007 fd70 	bl	80089a0 <rcl_node_get_default_options>

	 	RCCHECK(rcl_init_options_init(&init_options, allocator));
 8000ec0:	f507 74a8 	add.w	r4, r7, #336	; 0x150
 8000ec4:	466a      	mov	r2, sp
 8000ec6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000eca:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ece:	e882 0003 	stmia.w	r2, {r0, r1}
 8000ed2:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8000ed6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ed8:	4620      	mov	r0, r4
 8000eda:	f007 fae1 	bl	80084a0 <rcl_init_options_init>
 8000ede:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
 8000ee2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d005      	beq.n	8000ef6 <StartMicroROSTask+0xf6>
 8000eea:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000eee:	21ef      	movs	r1, #239	; 0xef
 8000ef0:	4851      	ldr	r0, [pc, #324]	; (8001038 <StartMicroROSTask+0x238>)
 8000ef2:	f012 f9fb 	bl	80132ec <iprintf>
	     // ROS_DOMAIN_IDの設定。今回は0としてる。
	 	RCCHECK(rcl_init_options_set_domain_id(&init_options, 0));
 8000ef6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f007 fbcd 	bl	800869c <rcl_init_options_set_domain_id>
 8000f02:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 8000f06:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d005      	beq.n	8000f1a <StartMicroROSTask+0x11a>
 8000f0e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000f12:	21f1      	movs	r1, #241	; 0xf1
 8000f14:	4848      	ldr	r0, [pc, #288]	; (8001038 <StartMicroROSTask+0x238>)
 8000f16:	f012 f9e9 	bl	80132ec <iprintf>
	 	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8000f1a:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8000f1e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8000f22:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	f008 fcc3 	bl	80098b8 <rclc_support_init_with_options>
	     // ノードの作成
	 	RCCHECK(rclc_node_init_with_options(&node, "simple_server", "", &support, &node_ops));
 8000f32:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8000f36:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	4613      	mov	r3, r2
 8000f42:	4a3e      	ldr	r2, [pc, #248]	; (800103c <StartMicroROSTask+0x23c>)
 8000f44:	493e      	ldr	r1, [pc, #248]	; (8001040 <StartMicroROSTask+0x240>)
 8000f46:	f008 fced 	bl	8009924 <rclc_node_init_with_options>
 8000f4a:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8000f4e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d005      	beq.n	8000f62 <StartMicroROSTask+0x162>
 8000f56:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000f5a:	21f4      	movs	r1, #244	; 0xf4
 8000f5c:	4836      	ldr	r0, [pc, #216]	; (8001038 <StartMicroROSTask+0x238>)
 8000f5e:	f012 f9c5 	bl	80132ec <iprintf>
	     // サービスの作成
	 	RCCHECK(rclc_service_init_default(&service, &node, ROSIDL_GET_SRV_TYPE_SUPPORT(custom_test_msgs, srv, AddThreeInts), "add_three_ints"));
 8000f62:	f005 ff9f 	bl	8006ea4 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>
 8000f66:	4602      	mov	r2, r0
 8000f68:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8000f6c:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 8000f70:	4b34      	ldr	r3, [pc, #208]	; (8001044 <StartMicroROSTask+0x244>)
 8000f72:	f008 fd13 	bl	800999c <rclc_service_init_default>
 8000f76:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170
 8000f7a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d005      	beq.n	8000f8e <StartMicroROSTask+0x18e>
 8000f82:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8000f86:	21f6      	movs	r1, #246	; 0xf6
 8000f88:	482b      	ldr	r0, [pc, #172]	; (8001038 <StartMicroROSTask+0x238>)
 8000f8a:	f012 f9af 	bl	80132ec <iprintf>
	     // エグゼキューターの作成
	 	RCCHECK(rclc_executor_init(&executor, &support.context, 1, &allocator));
 8000f8e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8000f92:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8000f96:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f008 f9a8 	bl	80092f0 <rclc_executor_init>
 8000fa0:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
 8000fa4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d005      	beq.n	8000fb8 <StartMicroROSTask+0x1b8>
 8000fac:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8000fb0:	21f8      	movs	r1, #248	; 0xf8
 8000fb2:	4821      	ldr	r0, [pc, #132]	; (8001038 <StartMicroROSTask+0x238>)
 8000fb4:	f012 f99a 	bl	80132ec <iprintf>
	     // エグゼキューターにサービスを追加
	 	RCCHECK(rclc_executor_add_service(&executor, &service, &req, &res, &service_callback));
 8000fb8:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8000fbc:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8000fc0:	4b21      	ldr	r3, [pc, #132]	; (8001048 <StartMicroROSTask+0x248>)
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	4b21      	ldr	r3, [pc, #132]	; (800104c <StartMicroROSTask+0x24c>)
 8000fc6:	4a22      	ldr	r2, [pc, #136]	; (8001050 <StartMicroROSTask+0x250>)
 8000fc8:	f008 fa0e 	bl	80093e8 <rclc_executor_add_service>
 8000fcc:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168
 8000fd0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d005      	beq.n	8000fe4 <StartMicroROSTask+0x1e4>
 8000fd8:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8000fdc:	21fa      	movs	r1, #250	; 0xfa
 8000fde:	4816      	ldr	r0, [pc, #88]	; (8001038 <StartMicroROSTask+0x238>)
 8000fe0:	f012 f984 	bl	80132ec <iprintf>
  /* Infinite loop */
  for(;;)
  {
	  // エグゼキューターを実行してリクエストを処理
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8000fe4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000fe8:	a305      	add	r3, pc, #20	; (adr r3, 8001000 <StartMicroROSTask+0x200>)
 8000fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fee:	4608      	mov	r0, r1
 8000ff0:	f008 fc2a 	bl	8009848 <rclc_executor_spin_some>
		osDelay(10);
 8000ff4:	200a      	movs	r0, #10
 8000ff6:	f004 fd2b 	bl	8005a50 <osDelay>
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8000ffa:	e7f3      	b.n	8000fe4 <StartMicroROSTask+0x1e4>
 8000ffc:	f3af 8000 	nop.w
 8001000:	05f5e100 	.word	0x05f5e100
 8001004:	00000000 	.word	0x00000000
 8001008:	08014744 	.word	0x08014744
 800100c:	08000c4d 	.word	0x08000c4d
 8001010:	08000bed 	.word	0x08000bed
 8001014:	08000bcd 	.word	0x08000bcd
 8001018:	08000ba1 	.word	0x08000ba1
 800101c:	200083dc 	.word	0x200083dc
 8001020:	08001299 	.word	0x08001299
 8001024:	080012dd 	.word	0x080012dd
 8001028:	08001315 	.word	0x08001315
 800102c:	08001381 	.word	0x08001381
 8001030:	0801475c 	.word	0x0801475c
 8001034:	20000254 	.word	0x20000254
 8001038:	08014784 	.word	0x08014784
 800103c:	080147b0 	.word	0x080147b0
 8001040:	080147b4 	.word	0x080147b4
 8001044:	080147c4 	.word	0x080147c4
 8001048:	08000cf5 	.word	0x08000cf5
 800104c:	200046b0 	.word	0x200046b0
 8001050:	20004698 	.word	0x20004698

08001054 <MX_GPIO_Init>:
        * EXTI
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	4b32      	ldr	r3, [pc, #200]	; (8001134 <MX_GPIO_Init+0xe0>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a31      	ldr	r2, [pc, #196]	; (8001134 <MX_GPIO_Init+0xe0>)
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b2f      	ldr	r3, [pc, #188]	; (8001134 <MX_GPIO_Init+0xe0>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001082:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <MX_GPIO_Init+0xe0>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a2b      	ldr	r2, [pc, #172]	; (8001134 <MX_GPIO_Init+0xe0>)
 8001088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b29      	ldr	r3, [pc, #164]	; (8001134 <MX_GPIO_Init+0xe0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109a:	4b26      	ldr	r3, [pc, #152]	; (8001134 <MX_GPIO_Init+0xe0>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a25      	ldr	r2, [pc, #148]	; (8001134 <MX_GPIO_Init+0xe0>)
 80010a0:	f043 0308 	orr.w	r3, r3, #8
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b23      	ldr	r3, [pc, #140]	; (8001134 <MX_GPIO_Init+0xe0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010b2:	4b20      	ldr	r3, [pc, #128]	; (8001134 <MX_GPIO_Init+0xe0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a1f      	ldr	r2, [pc, #124]	; (8001134 <MX_GPIO_Init+0xe0>)
 80010b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <MX_GPIO_Init+0xe0>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <MX_GPIO_Init+0xe0>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a19      	ldr	r2, [pc, #100]	; (8001134 <MX_GPIO_Init+0xe0>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <MX_GPIO_Init+0xe0>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2180      	movs	r1, #128	; 0x80
 80010e6:	4814      	ldr	r0, [pc, #80]	; (8001138 <MX_GPIO_Init+0xe4>)
 80010e8:	f001 fbec 	bl	80028c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80010ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010fe:	230b      	movs	r3, #11
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	480c      	ldr	r0, [pc, #48]	; (800113c <MX_GPIO_Init+0xe8>)
 800110a:	f001 fa2f 	bl	800256c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <MX_GPIO_Init+0xe4>)
 8001126:	f001 fa21 	bl	800256c <HAL_GPIO_Init>

}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	; 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40020400 	.word	0x40020400
 800113c:	40021800 	.word	0x40021800

08001140 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 800114a:	1df9      	adds	r1, r7, #7
 800114c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001150:	2201      	movs	r2, #1
 8001152:	4804      	ldr	r0, [pc, #16]	; (8001164 <__io_putchar+0x24>)
 8001154:	f003 f83c 	bl	80041d0 <HAL_UART_Transmit>
    return ch;
 8001158:	79fb      	ldrb	r3, [r7, #7]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200083dc 	.word	0x200083dc

08001168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116c:	f000 fcd9 	bl	8001b22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001170:	f000 f810 	bl	8001194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001174:	f7ff ff6e 	bl	8001054 <MX_GPIO_Init>
  MX_DMA_Init();
 8001178:	f7ff fcec 	bl	8000b54 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800117c:	f000 fba8 	bl	80018d0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("startProgram\n");
 8001180:	4803      	ldr	r0, [pc, #12]	; (8001190 <main+0x28>)
 8001182:	f012 f919 	bl	80133b8 <puts>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001186:	f7ff fdff 	bl	8000d88 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800118a:	f004 fc0e 	bl	80059aa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800118e:	e7fe      	b.n	800118e <main+0x26>
 8001190:	080147d4 	.word	0x080147d4

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b094      	sub	sp, #80	; 0x50
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2234      	movs	r2, #52	; 0x34
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f012 fb2e 	bl	8013804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011b8:	f001 fb9e 	bl	80028f8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <SystemClock_Config+0xcc>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	4a27      	ldr	r2, [pc, #156]	; (8001260 <SystemClock_Config+0xcc>)
 80011c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c6:	6413      	str	r3, [r2, #64]	; 0x40
 80011c8:	4b25      	ldr	r3, [pc, #148]	; (8001260 <SystemClock_Config+0xcc>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d4:	4b23      	ldr	r3, [pc, #140]	; (8001264 <SystemClock_Config+0xd0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a22      	ldr	r2, [pc, #136]	; (8001264 <SystemClock_Config+0xd0>)
 80011da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4b20      	ldr	r3, [pc, #128]	; (8001264 <SystemClock_Config+0xd0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f0:	2301      	movs	r3, #1
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f4:	2310      	movs	r3, #16
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f8:	2302      	movs	r3, #2
 80011fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011fc:	2300      	movs	r3, #0
 80011fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001200:	2308      	movs	r3, #8
 8001202:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001204:	23b4      	movs	r3, #180	; 0xb4
 8001206:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001208:	2302      	movs	r3, #2
 800120a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800120c:	2302      	movs	r3, #2
 800120e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001210:	2302      	movs	r3, #2
 8001212:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	4618      	mov	r0, r3
 800121a:	f001 fb7d 	bl	8002918 <HAL_RCC_OscConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001224:	f000 f832 	bl	800128c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001228:	230f      	movs	r3, #15
 800122a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122c:	2302      	movs	r3, #2
 800122e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001234:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001238:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800123a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001240:	f107 0308 	add.w	r3, r7, #8
 8001244:	2105      	movs	r1, #5
 8001246:	4618      	mov	r0, r3
 8001248:	f001 fe14 	bl	8002e74 <HAL_RCC_ClockConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001252:	f000 f81b 	bl	800128c <Error_Handler>
  }
}
 8001256:	bf00      	nop
 8001258:	3750      	adds	r7, #80	; 0x50
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	40007000 	.word	0x40007000

08001268 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800127a:	f000 fc5f 	bl	8001b3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40002000 	.word	0x40002000

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001294:	e7fe      	b.n	8001294 <Error_Handler+0x8>
	...

08001298 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <microros_allocate+0x3c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4413      	add	r3, r2
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <microros_allocate+0x3c>)
 80012b0:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <microros_allocate+0x40>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4413      	add	r3, r2
 80012bc:	461a      	mov	r2, r3
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <microros_allocate+0x40>)
 80012c0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff f9f2 	bl	80006ac <pvPortMallocMicroROS>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20008380 	.word	0x20008380
 80012d8:	20008384 	.word	0x20008384

080012dc <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00c      	beq.n	8001306 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff fb05 	bl	80008fc <getBlockSize>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <microros_deallocate+0x34>)
 80012f6:	6812      	ldr	r2, [r2, #0]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <microros_deallocate+0x34>)
 80012fe:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff fa9d 	bl	8000840 <vPortFreeMicroROS>
  }
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20008384 	.word	0x20008384

08001314 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <microros_reallocate+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	4413      	add	r3, r2
 800132a:	461a      	mov	r2, r3
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <microros_reallocate+0x64>)
 800132e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <microros_reallocate+0x68>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	4413      	add	r3, r2
 800133a:	461a      	mov	r2, r3
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <microros_reallocate+0x68>)
 800133e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d104      	bne.n	8001350 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001346:	68b8      	ldr	r0, [r7, #8]
 8001348:	f7ff f9b0 	bl	80006ac <pvPortMallocMicroROS>
 800134c:	4603      	mov	r3, r0
 800134e:	e00e      	b.n	800136e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f7ff fad3 	bl	80008fc <getBlockSize>
 8001356:	4603      	mov	r3, r0
 8001358:	4a08      	ldr	r2, [pc, #32]	; (800137c <microros_reallocate+0x68>)
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	461a      	mov	r2, r3
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <microros_reallocate+0x68>)
 8001362:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f7ff fae6 	bl	8000938 <pvPortReallocMicroROS>
 800136c:	4603      	mov	r3, r0
  }
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20008380 	.word	0x20008380
 800137c:	20008384 	.word	0x20008384

08001380 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	fb02 f303 	mul.w	r3, r2, r3
 8001394:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <microros_zero_allocate+0x48>)
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	4413      	add	r3, r2
 800139a:	461a      	mov	r2, r3
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <microros_zero_allocate+0x48>)
 800139e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	fb02 f303 	mul.w	r3, r2, r3
 80013a8:	4a08      	ldr	r2, [pc, #32]	; (80013cc <microros_zero_allocate+0x4c>)
 80013aa:	6812      	ldr	r2, [r2, #0]
 80013ac:	4413      	add	r3, r2
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <microros_zero_allocate+0x4c>)
 80013b2:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f7ff faeb 	bl	8000992 <pvPortCallocMicroROS>
 80013bc:	4603      	mov	r3, r0
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20008380 	.word	0x20008380
 80013cc:	20008384 	.word	0x20008384

080013d0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80013d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80013e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013e6:	a320      	add	r3, pc, #128	; (adr r3, 8001468 <UTILS_NanosecondsToTimespec+0x98>)
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	f7fe ff90 	bl	8000310 <__aeabi_ldivmod>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80013fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013fe:	a31a      	add	r3, pc, #104	; (adr r3, 8001468 <UTILS_NanosecondsToTimespec+0x98>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	f7fe ff84 	bl	8000310 <__aeabi_ldivmod>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	da20      	bge.n	8001456 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	4a11      	ldr	r2, [pc, #68]	; (8001460 <UTILS_NanosecondsToTimespec+0x90>)
 800141a:	fb82 1203 	smull	r1, r2, r2, r3
 800141e:	1712      	asrs	r2, r2, #28
 8001420:	17db      	asrs	r3, r3, #31
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	3301      	adds	r3, #1
 8001426:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	6979      	ldr	r1, [r7, #20]
 8001430:	17c8      	asrs	r0, r1, #31
 8001432:	460c      	mov	r4, r1
 8001434:	4605      	mov	r5, r0
 8001436:	ebb2 0804 	subs.w	r8, r2, r4
 800143a:	eb63 0905 	sbc.w	r9, r3, r5
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	4906      	ldr	r1, [pc, #24]	; (8001464 <UTILS_NanosecondsToTimespec+0x94>)
 800144c:	fb01 f303 	mul.w	r3, r1, r3
 8001450:	441a      	add	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	609a      	str	r2, [r3, #8]
    }
}
 8001456:	bf00      	nop
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001460:	44b82fa1 	.word	0x44b82fa1
 8001464:	3b9aca00 	.word	0x3b9aca00
 8001468:	3b9aca00 	.word	0x3b9aca00
 800146c:	00000000 	.word	0x00000000

08001470 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001474:	b08e      	sub	sp, #56	; 0x38
 8001476:	af00      	add	r7, sp, #0
 8001478:	6278      	str	r0, [r7, #36]	; 0x24
 800147a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800147c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001480:	2300      	movs	r3, #0
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001496:	4618      	mov	r0, r3
 8001498:	f004 ffc2 	bl	8006420 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800149c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149e:	17da      	asrs	r2, r3, #31
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	61fa      	str	r2, [r7, #28]
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	69b9      	ldr	r1, [r7, #24]
 80014ae:	000b      	movs	r3, r1
 80014b0:	2200      	movs	r2, #0
 80014b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80014b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b8:	2200      	movs	r2, #0
 80014ba:	461c      	mov	r4, r3
 80014bc:	4615      	mov	r5, r2
 80014be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014c2:	1911      	adds	r1, r2, r4
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	416b      	adcs	r3, r5
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80014ce:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80014d2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	f04f 0400 	mov.w	r4, #0
 80014de:	f04f 0500 	mov.w	r5, #0
 80014e2:	015d      	lsls	r5, r3, #5
 80014e4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80014e8:	0154      	lsls	r4, r2, #5
 80014ea:	4622      	mov	r2, r4
 80014ec:	462b      	mov	r3, r5
 80014ee:	ebb2 0800 	subs.w	r8, r2, r0
 80014f2:	eb63 0901 	sbc.w	r9, r3, r1
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001502:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001506:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800150a:	4690      	mov	r8, r2
 800150c:	4699      	mov	r9, r3
 800150e:	eb18 0a00 	adds.w	sl, r8, r0
 8001512:	eb49 0b01 	adc.w	fp, r9, r1
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001522:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001526:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800152a:	ebb2 040a 	subs.w	r4, r2, sl
 800152e:	603c      	str	r4, [r7, #0]
 8001530:	eb63 030b 	sbc.w	r3, r3, fp
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	e9d7 4500 	ldrd	r4, r5, [r7]
 800153a:	4623      	mov	r3, r4
 800153c:	181b      	adds	r3, r3, r0
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	462b      	mov	r3, r5
 8001542:	eb41 0303 	adc.w	r3, r1, r3
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	6a3a      	ldr	r2, [r7, #32]
 800154a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800154e:	f7ff ff3f 	bl	80013d0 <UTILS_NanosecondsToTimespec>

    return 0;
 8001552:	2300      	movs	r3, #0
 8001554:	4618      	mov	r0, r3
 8001556:	3738      	adds	r7, #56	; 0x38
 8001558:	46bd      	mov	sp, r7
 800155a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <HAL_MspInit+0x4c>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	4a10      	ldr	r2, [pc, #64]	; (80015ac <HAL_MspInit+0x4c>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001570:	6413      	str	r3, [r2, #64]	; 0x40
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <HAL_MspInit+0x4c>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_MspInit+0x4c>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_MspInit+0x4c>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_MspInit+0x4c>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	210f      	movs	r1, #15
 800159a:	f06f 0001 	mvn.w	r0, #1
 800159e:	f000 fba5 	bl	8001cec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800

080015b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08e      	sub	sp, #56	; 0x38
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80015c0:	4b33      	ldr	r3, [pc, #204]	; (8001690 <HAL_InitTick+0xe0>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	4a32      	ldr	r2, [pc, #200]	; (8001690 <HAL_InitTick+0xe0>)
 80015c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ca:	6413      	str	r3, [r2, #64]	; 0x40
 80015cc:	4b30      	ldr	r3, [pc, #192]	; (8001690 <HAL_InitTick+0xe0>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015d8:	f107 0210 	add.w	r2, r7, #16
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 fe6c 	bl	80032c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d103      	bne.n	80015fa <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015f2:	f001 fe3d 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 80015f6:	6378      	str	r0, [r7, #52]	; 0x34
 80015f8:	e004      	b.n	8001604 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015fa:	f001 fe39 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 80015fe:	4603      	mov	r3, r0
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001606:	4a23      	ldr	r2, [pc, #140]	; (8001694 <HAL_InitTick+0xe4>)
 8001608:	fba2 2303 	umull	r2, r3, r2, r3
 800160c:	0c9b      	lsrs	r3, r3, #18
 800160e:	3b01      	subs	r3, #1
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001612:	4b21      	ldr	r3, [pc, #132]	; (8001698 <HAL_InitTick+0xe8>)
 8001614:	4a21      	ldr	r2, [pc, #132]	; (800169c <HAL_InitTick+0xec>)
 8001616:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001618:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <HAL_InitTick+0xe8>)
 800161a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800161e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001620:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <HAL_InitTick+0xe8>)
 8001622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001624:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <HAL_InitTick+0xe8>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162c:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <HAL_InitTick+0xe8>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_InitTick+0xe8>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001638:	4817      	ldr	r0, [pc, #92]	; (8001698 <HAL_InitTick+0xe8>)
 800163a:	f002 fa9b 	bl	8003b74 <HAL_TIM_Base_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001644:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001648:	2b00      	cmp	r3, #0
 800164a:	d11b      	bne.n	8001684 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 800164c:	4812      	ldr	r0, [pc, #72]	; (8001698 <HAL_InitTick+0xe8>)
 800164e:	f002 faf3 	bl	8003c38 <HAL_TIM_Base_Start_IT>
 8001652:	4603      	mov	r3, r0
 8001654:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001658:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800165c:	2b00      	cmp	r3, #0
 800165e:	d111      	bne.n	8001684 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001660:	202d      	movs	r0, #45	; 0x2d
 8001662:	f000 fb5f 	bl	8001d24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b0f      	cmp	r3, #15
 800166a:	d808      	bhi.n	800167e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 800166c:	2200      	movs	r2, #0
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	202d      	movs	r0, #45	; 0x2d
 8001672:	f000 fb3b 	bl	8001cec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <HAL_InitTick+0xf0>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	e002      	b.n	8001684 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001684:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001688:	4618      	mov	r0, r3
 800168a:	3738      	adds	r7, #56	; 0x38
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40023800 	.word	0x40023800
 8001694:	431bde83 	.word	0x431bde83
 8001698:	20008388 	.word	0x20008388
 800169c:	40002000 	.word	0x40002000
 80016a0:	20000008 	.word	0x20000008

080016a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <NMI_Handler+0x4>

080016aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <MemManage_Handler+0x4>

080016b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <DMA1_Stream1_IRQHandler+0x10>)
 80016d6:	f000 fcd3 	bl	8002080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20008464 	.word	0x20008464

080016e4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <DMA1_Stream3_IRQHandler+0x10>)
 80016ea:	f000 fcc9 	bl	8002080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200084c4 	.word	0x200084c4

080016f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <USART3_IRQHandler+0x10>)
 80016fe:	f002 ff3d 	bl	800457c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200083dc 	.word	0x200083dc

0800170c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001712:	f002 fb09 	bl	8003d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20008388 	.word	0x20008388

08001720 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return 1;
 8001724:	2301      	movs	r3, #1
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_kill>:

int _kill(int pid, int sig)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800173a:	f012 f94d 	bl	80139d8 <__errno>
 800173e:	4603      	mov	r3, r0
 8001740:	2216      	movs	r2, #22
 8001742:	601a      	str	r2, [r3, #0]
  return -1;
 8001744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_exit>:

void _exit (int status)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001758:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ffe7 	bl	8001730 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001762:	e7fe      	b.n	8001762 <_exit+0x12>

08001764 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	e00a      	b.n	800178c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001776:	f3af 8000 	nop.w
 800177a:	4601      	mov	r1, r0
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	60ba      	str	r2, [r7, #8]
 8001782:	b2ca      	uxtb	r2, r1
 8001784:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	429a      	cmp	r2, r3
 8001792:	dbf0      	blt.n	8001776 <_read+0x12>
  }

  return len;
 8001794:	687b      	ldr	r3, [r7, #4]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	e009      	b.n	80017c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	60ba      	str	r2, [r7, #8]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fcc1 	bl	8001140 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	dbf1      	blt.n	80017b0 <_write+0x12>
  }
  return len;
 80017cc:	687b      	ldr	r3, [r7, #4]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_close>:

int _close(int file)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <_isatty>:

int _isatty(int file)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001816:	2301      	movs	r3, #1
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <_sbrk+0x5c>)
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <_sbrk+0x60>)
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <_sbrk+0x64>)
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <_sbrk+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d207      	bcs.n	8001880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001870:	f012 f8b2 	bl	80139d8 <__errno>
 8001874:	4603      	mov	r3, r0
 8001876:	220c      	movs	r2, #12
 8001878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800187e:	e009      	b.n	8001894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <_sbrk+0x64>)
 8001890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20080000 	.word	0x20080000
 80018a0:	00000400 	.word	0x00000400
 80018a4:	200083d8 	.word	0x200083d8
 80018a8:	20010f68 	.word	0x20010f68

080018ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <SystemInit+0x20>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b6:	4a05      	ldr	r2, [pc, #20]	; (80018cc <SystemInit+0x20>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <MX_USART3_UART_Init+0x58>)
 80018d6:	4a15      	ldr	r2, [pc, #84]	; (800192c <MX_USART3_UART_Init+0x5c>)
 80018d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018da:	4b13      	ldr	r3, [pc, #76]	; (8001928 <MX_USART3_UART_Init+0x58>)
 80018dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <MX_USART3_UART_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <MX_USART3_UART_Init+0x58>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <MX_USART3_UART_Init+0x58>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <MX_USART3_UART_Init+0x58>)
 80018f6:	220c      	movs	r2, #12
 80018f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <MX_USART3_UART_Init+0x58>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <MX_USART3_UART_Init+0x58>)
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <MX_USART3_UART_Init+0x58>)
 8001908:	2200      	movs	r2, #0
 800190a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <MX_USART3_UART_Init+0x58>)
 800190e:	2200      	movs	r2, #0
 8001910:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <MX_USART3_UART_Init+0x58>)
 8001914:	f002 fc0e 	bl	8004134 <HAL_UART_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800191e:	f7ff fcb5 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200083dc 	.word	0x200083dc
 800192c:	40004800 	.word	0x40004800

08001930 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b0ae      	sub	sp, #184	; 0xb8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	2290      	movs	r2, #144	; 0x90
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f011 ff57 	bl	8013804 <memset>
  if(uartHandle->Instance==USART3)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a56      	ldr	r2, [pc, #344]	; (8001ab4 <HAL_UART_MspInit+0x184>)
 800195c:	4293      	cmp	r3, r2
 800195e:	f040 80a4 	bne.w	8001aaa <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001962:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001966:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001968:	2300      	movs	r3, #0
 800196a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4618      	mov	r0, r3
 8001972:	f001 fcd7 	bl	8003324 <HAL_RCCEx_PeriphCLKConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800197c:	f7ff fc86 	bl	800128c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001980:	4b4d      	ldr	r3, [pc, #308]	; (8001ab8 <HAL_UART_MspInit+0x188>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	4a4c      	ldr	r2, [pc, #304]	; (8001ab8 <HAL_UART_MspInit+0x188>)
 8001986:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198a:	6413      	str	r3, [r2, #64]	; 0x40
 800198c:	4b4a      	ldr	r3, [pc, #296]	; (8001ab8 <HAL_UART_MspInit+0x188>)
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001998:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <HAL_UART_MspInit+0x188>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	4a46      	ldr	r2, [pc, #280]	; (8001ab8 <HAL_UART_MspInit+0x188>)
 800199e:	f043 0308 	orr.w	r3, r3, #8
 80019a2:	6313      	str	r3, [r2, #48]	; 0x30
 80019a4:	4b44      	ldr	r3, [pc, #272]	; (8001ab8 <HAL_UART_MspInit+0x188>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c4:	2303      	movs	r3, #3
 80019c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019ca:	2307      	movs	r3, #7
 80019cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019d4:	4619      	mov	r1, r3
 80019d6:	4839      	ldr	r0, [pc, #228]	; (8001abc <HAL_UART_MspInit+0x18c>)
 80019d8:	f000 fdc8 	bl	800256c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80019dc:	4b38      	ldr	r3, [pc, #224]	; (8001ac0 <HAL_UART_MspInit+0x190>)
 80019de:	4a39      	ldr	r2, [pc, #228]	; (8001ac4 <HAL_UART_MspInit+0x194>)
 80019e0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80019e2:	4b37      	ldr	r3, [pc, #220]	; (8001ac0 <HAL_UART_MspInit+0x190>)
 80019e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019e8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ea:	4b35      	ldr	r3, [pc, #212]	; (8001ac0 <HAL_UART_MspInit+0x190>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f0:	4b33      	ldr	r3, [pc, #204]	; (8001ac0 <HAL_UART_MspInit+0x190>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019f6:	4b32      	ldr	r3, [pc, #200]	; (8001ac0 <HAL_UART_MspInit+0x190>)
 80019f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019fc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019fe:	4b30      	ldr	r3, [pc, #192]	; (8001ac0 <HAL_UART_MspInit+0x190>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a04:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <HAL_UART_MspInit+0x190>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001a0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <HAL_UART_MspInit+0x190>)
 8001a0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a10:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a12:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <HAL_UART_MspInit+0x190>)
 8001a14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a18:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a1a:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <HAL_UART_MspInit+0x190>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001a20:	4827      	ldr	r0, [pc, #156]	; (8001ac0 <HAL_UART_MspInit+0x190>)
 8001a22:	f000 f98d 	bl	8001d40 <HAL_DMA_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8001a2c:	f7ff fc2e 	bl	800128c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a23      	ldr	r2, [pc, #140]	; (8001ac0 <HAL_UART_MspInit+0x190>)
 8001a34:	675a      	str	r2, [r3, #116]	; 0x74
 8001a36:	4a22      	ldr	r2, [pc, #136]	; (8001ac0 <HAL_UART_MspInit+0x190>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001a3c:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <HAL_UART_MspInit+0x198>)
 8001a3e:	4a23      	ldr	r2, [pc, #140]	; (8001acc <HAL_UART_MspInit+0x19c>)
 8001a40:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <HAL_UART_MspInit+0x198>)
 8001a44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a48:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <HAL_UART_MspInit+0x198>)
 8001a4c:	2240      	movs	r2, #64	; 0x40
 8001a4e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a50:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <HAL_UART_MspInit+0x198>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a56:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <HAL_UART_MspInit+0x198>)
 8001a58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a5c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <HAL_UART_MspInit+0x198>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_UART_MspInit+0x198>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001a6a:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <HAL_UART_MspInit+0x198>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a70:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <HAL_UART_MspInit+0x198>)
 8001a72:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a76:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a78:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <HAL_UART_MspInit+0x198>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001a7e:	4812      	ldr	r0, [pc, #72]	; (8001ac8 <HAL_UART_MspInit+0x198>)
 8001a80:	f000 f95e 	bl	8001d40 <HAL_DMA_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8001a8a:	f7ff fbff 	bl	800128c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a0d      	ldr	r2, [pc, #52]	; (8001ac8 <HAL_UART_MspInit+0x198>)
 8001a92:	671a      	str	r2, [r3, #112]	; 0x70
 8001a94:	4a0c      	ldr	r2, [pc, #48]	; (8001ac8 <HAL_UART_MspInit+0x198>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2105      	movs	r1, #5
 8001a9e:	2027      	movs	r0, #39	; 0x27
 8001aa0:	f000 f924 	bl	8001cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001aa4:	2027      	movs	r0, #39	; 0x27
 8001aa6:	f000 f93d 	bl	8001d24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001aaa:	bf00      	nop
 8001aac:	37b8      	adds	r7, #184	; 0xb8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40004800 	.word	0x40004800
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020c00 	.word	0x40020c00
 8001ac0:	20008464 	.word	0x20008464
 8001ac4:	40026028 	.word	0x40026028
 8001ac8:	200084c4 	.word	0x200084c4
 8001acc:	40026058 	.word	0x40026058

08001ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ad4:	480d      	ldr	r0, [pc, #52]	; (8001b0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ad6:	490e      	ldr	r1, [pc, #56]	; (8001b10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ad8:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001adc:	e002      	b.n	8001ae4 <LoopCopyDataInit>

08001ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae2:	3304      	adds	r3, #4

08001ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae8:	d3f9      	bcc.n	8001ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aea:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aec:	4c0b      	ldr	r4, [pc, #44]	; (8001b1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af0:	e001      	b.n	8001af6 <LoopFillZerobss>

08001af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af4:	3204      	adds	r2, #4

08001af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af8:	d3fb      	bcc.n	8001af2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001afa:	f7ff fed7 	bl	80018ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001afe:	f011 ff71 	bl	80139e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b02:	f7ff fb31 	bl	8001168 <main>
  bx  lr    
 8001b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b08:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b10:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8001b14:	08015734 	.word	0x08015734
  ldr r2, =_sbss
 8001b18:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8001b1c:	20010f68 	.word	0x20010f68

08001b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b20:	e7fe      	b.n	8001b20 <ADC_IRQHandler>

08001b22 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b26:	2003      	movs	r0, #3
 8001b28:	f000 f8d5 	bl	8001cd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b2c:	200f      	movs	r0, #15
 8001b2e:	f7ff fd3f 	bl	80015b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b32:	f7ff fd15 	bl	8001560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_IncTick+0x20>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_IncTick+0x24>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <HAL_IncTick+0x24>)
 8001b4e:	6013      	str	r3, [r2, #0]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	2000000c 	.word	0x2000000c
 8001b60:	20008524 	.word	0x20008524

08001b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <HAL_GetTick+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20008524 	.word	0x20008524

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <__NVIC_SetPriorityGrouping+0x40>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001baa:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <__NVIC_SetPriorityGrouping+0x40>)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	60d3      	str	r3, [r2, #12]
}
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed00 	.word	0xe000ed00
 8001bc0:	05fa0000 	.word	0x05fa0000

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4907      	ldr	r1, [pc, #28]	; (8001c18 <__NVIC_EnableIRQ+0x38>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000e100 	.word	0xe000e100

08001c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db0a      	blt.n	8001c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	490c      	ldr	r1, [pc, #48]	; (8001c68 <__NVIC_SetPriority+0x4c>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	0112      	lsls	r2, r2, #4
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c44:	e00a      	b.n	8001c5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4908      	ldr	r1, [pc, #32]	; (8001c6c <__NVIC_SetPriority+0x50>)
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3b04      	subs	r3, #4
 8001c54:	0112      	lsls	r2, r2, #4
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	761a      	strb	r2, [r3, #24]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	; 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f1c3 0307 	rsb	r3, r3, #7
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	bf28      	it	cs
 8001c8e:	2304      	movcs	r3, #4
 8001c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3304      	adds	r3, #4
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d902      	bls.n	8001ca0 <NVIC_EncodePriority+0x30>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3b03      	subs	r3, #3
 8001c9e:	e000      	b.n	8001ca2 <NVIC_EncodePriority+0x32>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	4313      	orrs	r3, r2
         );
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff ff4c 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cfe:	f7ff ff61 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	68b9      	ldr	r1, [r7, #8]
 8001d08:	6978      	ldr	r0, [r7, #20]
 8001d0a:	f7ff ffb1 	bl	8001c70 <NVIC_EncodePriority>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ff80 	bl	8001c1c <__NVIC_SetPriority>
}
 8001d1c:	bf00      	nop
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff ff54 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d4c:	f7ff ff0a 	bl	8001b64 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e099      	b.n	8001e90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0201 	bic.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d7c:	e00f      	b.n	8001d9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d7e:	f7ff fef1 	bl	8001b64 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b05      	cmp	r3, #5
 8001d8a:	d908      	bls.n	8001d9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2203      	movs	r2, #3
 8001d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e078      	b.n	8001e90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1e8      	bne.n	8001d7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	4b38      	ldr	r3, [pc, #224]	; (8001e98 <HAL_DMA_Init+0x158>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d107      	bne.n	8001e08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	4313      	orrs	r3, r2
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f023 0307 	bic.w	r3, r3, #7
 8001e1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d117      	bne.n	8001e62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00e      	beq.n	8001e62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 fb15 	bl	8002474 <DMA_CheckFifoParam>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2240      	movs	r2, #64	; 0x40
 8001e54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e016      	b.n	8001e90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 facc 	bl	8002408 <DMA_CalcBaseAndBitshift>
 8001e70:	4603      	mov	r3, r0
 8001e72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e78:	223f      	movs	r2, #63	; 0x3f
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	e010803f 	.word	0xe010803f

08001e9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_DMA_Start_IT+0x26>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e048      	b.n	8001f54 <HAL_DMA_Start_IT+0xb8>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d137      	bne.n	8001f46 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 fa5e 	bl	80023ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef4:	223f      	movs	r2, #63	; 0x3f
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0216 	orr.w	r2, r2, #22
 8001f0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695a      	ldr	r2, [r3, #20]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f1a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d007      	beq.n	8001f34 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0208 	orr.w	r2, r2, #8
 8001f32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e005      	b.n	8001f52 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f6a:	f7ff fdfb 	bl	8001b64 <HAL_GetTick>
 8001f6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d008      	beq.n	8001f8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2280      	movs	r2, #128	; 0x80
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e052      	b.n	8002034 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0216 	bic.w	r2, r2, #22
 8001f9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d103      	bne.n	8001fbe <HAL_DMA_Abort+0x62>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d007      	beq.n	8001fce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0208 	bic.w	r2, r2, #8
 8001fcc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0201 	bic.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fde:	e013      	b.n	8002008 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fe0:	f7ff fdc0 	bl	8001b64 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b05      	cmp	r3, #5
 8001fec:	d90c      	bls.n	8002008 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e015      	b.n	8002034 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1e4      	bne.n	8001fe0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201a:	223f      	movs	r2, #63	; 0x3f
 800201c:	409a      	lsls	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d004      	beq.n	800205a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2280      	movs	r2, #128	; 0x80
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e00c      	b.n	8002074 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2205      	movs	r2, #5
 800205e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0201 	bic.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800208c:	4b8e      	ldr	r3, [pc, #568]	; (80022c8 <HAL_DMA_IRQHandler+0x248>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a8e      	ldr	r2, [pc, #568]	; (80022cc <HAL_DMA_IRQHandler+0x24c>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	0a9b      	lsrs	r3, r3, #10
 8002098:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	2208      	movs	r2, #8
 80020ac:	409a      	lsls	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d01a      	beq.n	80020ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d013      	beq.n	80020ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0204 	bic.w	r2, r2, #4
 80020d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	2208      	movs	r2, #8
 80020da:	409a      	lsls	r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e4:	f043 0201 	orr.w	r2, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f0:	2201      	movs	r2, #1
 80020f2:	409a      	lsls	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d012      	beq.n	8002122 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00b      	beq.n	8002122 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210e:	2201      	movs	r2, #1
 8002110:	409a      	lsls	r2, r3
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211a:	f043 0202 	orr.w	r2, r3, #2
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002126:	2204      	movs	r2, #4
 8002128:	409a      	lsls	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4013      	ands	r3, r2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d012      	beq.n	8002158 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00b      	beq.n	8002158 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002144:	2204      	movs	r2, #4
 8002146:	409a      	lsls	r2, r3
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002150:	f043 0204 	orr.w	r2, r3, #4
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215c:	2210      	movs	r2, #16
 800215e:	409a      	lsls	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d043      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d03c      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217a:	2210      	movs	r2, #16
 800217c:	409a      	lsls	r2, r3
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d018      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d108      	bne.n	80021b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d024      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	4798      	blx	r3
 80021ae:	e01f      	b.n	80021f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d01b      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	4798      	blx	r3
 80021c0:	e016      	b.n	80021f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d107      	bne.n	80021e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0208 	bic.w	r2, r2, #8
 80021de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	2220      	movs	r2, #32
 80021f6:	409a      	lsls	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 808f 	beq.w	8002320 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 8087 	beq.w	8002320 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002216:	2220      	movs	r2, #32
 8002218:	409a      	lsls	r2, r3
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b05      	cmp	r3, #5
 8002228:	d136      	bne.n	8002298 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0216 	bic.w	r2, r2, #22
 8002238:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695a      	ldr	r2, [r3, #20]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002248:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d103      	bne.n	800225a <HAL_DMA_IRQHandler+0x1da>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002256:	2b00      	cmp	r3, #0
 8002258:	d007      	beq.n	800226a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0208 	bic.w	r2, r2, #8
 8002268:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226e:	223f      	movs	r2, #63	; 0x3f
 8002270:	409a      	lsls	r2, r3
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800228a:	2b00      	cmp	r3, #0
 800228c:	d07e      	beq.n	800238c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	4798      	blx	r3
        }
        return;
 8002296:	e079      	b.n	800238c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d01d      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10d      	bne.n	80022d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d031      	beq.n	8002320 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	4798      	blx	r3
 80022c4:	e02c      	b.n	8002320 <HAL_DMA_IRQHandler+0x2a0>
 80022c6:	bf00      	nop
 80022c8:	20000004 	.word	0x20000004
 80022cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d023      	beq.n	8002320 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	4798      	blx	r3
 80022e0:	e01e      	b.n	8002320 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10f      	bne.n	8002310 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0210 	bic.w	r2, r2, #16
 80022fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002324:	2b00      	cmp	r3, #0
 8002326:	d032      	beq.n	800238e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d022      	beq.n	800237a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2205      	movs	r2, #5
 8002338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0201 	bic.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	3301      	adds	r3, #1
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	429a      	cmp	r2, r3
 8002356:	d307      	bcc.n	8002368 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f2      	bne.n	800234c <HAL_DMA_IRQHandler+0x2cc>
 8002366:	e000      	b.n	800236a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002368:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	4798      	blx	r3
 800238a:	e000      	b.n	800238e <HAL_DMA_IRQHandler+0x30e>
        return;
 800238c:	bf00      	nop
    }
  }
}
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b40      	cmp	r3, #64	; 0x40
 80023d8:	d108      	bne.n	80023ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023ea:	e007      	b.n	80023fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	60da      	str	r2, [r3, #12]
}
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	3b10      	subs	r3, #16
 8002418:	4a13      	ldr	r2, [pc, #76]	; (8002468 <DMA_CalcBaseAndBitshift+0x60>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	091b      	lsrs	r3, r3, #4
 8002420:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002422:	4a12      	ldr	r2, [pc, #72]	; (800246c <DMA_CalcBaseAndBitshift+0x64>)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4413      	add	r3, r2
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b03      	cmp	r3, #3
 8002434:	d908      	bls.n	8002448 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <DMA_CalcBaseAndBitshift+0x68>)
 800243e:	4013      	ands	r3, r2
 8002440:	1d1a      	adds	r2, r3, #4
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	659a      	str	r2, [r3, #88]	; 0x58
 8002446:	e006      	b.n	8002456 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <DMA_CalcBaseAndBitshift+0x68>)
 8002450:	4013      	ands	r3, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800245a:	4618      	mov	r0, r3
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	aaaaaaab 	.word	0xaaaaaaab
 800246c:	08014820 	.word	0x08014820
 8002470:	fffffc00 	.word	0xfffffc00

08002474 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002484:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d11f      	bne.n	80024ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d856      	bhi.n	8002542 <DMA_CheckFifoParam+0xce>
 8002494:	a201      	add	r2, pc, #4	; (adr r2, 800249c <DMA_CheckFifoParam+0x28>)
 8002496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249a:	bf00      	nop
 800249c:	080024ad 	.word	0x080024ad
 80024a0:	080024bf 	.word	0x080024bf
 80024a4:	080024ad 	.word	0x080024ad
 80024a8:	08002543 	.word	0x08002543
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d046      	beq.n	8002546 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024bc:	e043      	b.n	8002546 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024c6:	d140      	bne.n	800254a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024cc:	e03d      	b.n	800254a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d6:	d121      	bne.n	800251c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d837      	bhi.n	800254e <DMA_CheckFifoParam+0xda>
 80024de:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <DMA_CheckFifoParam+0x70>)
 80024e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e4:	080024f5 	.word	0x080024f5
 80024e8:	080024fb 	.word	0x080024fb
 80024ec:	080024f5 	.word	0x080024f5
 80024f0:	0800250d 	.word	0x0800250d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
      break;
 80024f8:	e030      	b.n	800255c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d025      	beq.n	8002552 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800250a:	e022      	b.n	8002552 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002510:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002514:	d11f      	bne.n	8002556 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800251a:	e01c      	b.n	8002556 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d903      	bls.n	800252a <DMA_CheckFifoParam+0xb6>
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d003      	beq.n	8002530 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002528:	e018      	b.n	800255c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
      break;
 800252e:	e015      	b.n	800255c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00e      	beq.n	800255a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
      break;
 8002540:	e00b      	b.n	800255a <DMA_CheckFifoParam+0xe6>
      break;
 8002542:	bf00      	nop
 8002544:	e00a      	b.n	800255c <DMA_CheckFifoParam+0xe8>
      break;
 8002546:	bf00      	nop
 8002548:	e008      	b.n	800255c <DMA_CheckFifoParam+0xe8>
      break;
 800254a:	bf00      	nop
 800254c:	e006      	b.n	800255c <DMA_CheckFifoParam+0xe8>
      break;
 800254e:	bf00      	nop
 8002550:	e004      	b.n	800255c <DMA_CheckFifoParam+0xe8>
      break;
 8002552:	bf00      	nop
 8002554:	e002      	b.n	800255c <DMA_CheckFifoParam+0xe8>
      break;   
 8002556:	bf00      	nop
 8002558:	e000      	b.n	800255c <DMA_CheckFifoParam+0xe8>
      break;
 800255a:	bf00      	nop
    }
  } 
  
  return status; 
 800255c:	7bfb      	ldrb	r3, [r7, #15]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop

0800256c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800256c:	b480      	push	{r7}
 800256e:	b089      	sub	sp, #36	; 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	e175      	b.n	8002878 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800258c:	2201      	movs	r2, #1
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	f040 8164 	bne.w	8002872 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d005      	beq.n	80025c2 <HAL_GPIO_Init+0x56>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d130      	bne.n	8002624 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	2203      	movs	r2, #3
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025f8:	2201      	movs	r2, #1
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 0201 	and.w	r2, r3, #1
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b03      	cmp	r3, #3
 800262e:	d017      	beq.n	8002660 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d123      	bne.n	80026b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	08da      	lsrs	r2, r3, #3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3208      	adds	r2, #8
 8002674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	220f      	movs	r2, #15
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	08da      	lsrs	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3208      	adds	r2, #8
 80026ae:	69b9      	ldr	r1, [r7, #24]
 80026b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2203      	movs	r2, #3
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0203 	and.w	r2, r3, #3
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80be 	beq.w	8002872 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f6:	4b66      	ldr	r3, [pc, #408]	; (8002890 <HAL_GPIO_Init+0x324>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	4a65      	ldr	r2, [pc, #404]	; (8002890 <HAL_GPIO_Init+0x324>)
 80026fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002700:	6453      	str	r3, [r2, #68]	; 0x44
 8002702:	4b63      	ldr	r3, [pc, #396]	; (8002890 <HAL_GPIO_Init+0x324>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800270e:	4a61      	ldr	r2, [pc, #388]	; (8002894 <HAL_GPIO_Init+0x328>)
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	089b      	lsrs	r3, r3, #2
 8002714:	3302      	adds	r3, #2
 8002716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	220f      	movs	r2, #15
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a58      	ldr	r2, [pc, #352]	; (8002898 <HAL_GPIO_Init+0x32c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d037      	beq.n	80027aa <HAL_GPIO_Init+0x23e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a57      	ldr	r2, [pc, #348]	; (800289c <HAL_GPIO_Init+0x330>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d031      	beq.n	80027a6 <HAL_GPIO_Init+0x23a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a56      	ldr	r2, [pc, #344]	; (80028a0 <HAL_GPIO_Init+0x334>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d02b      	beq.n	80027a2 <HAL_GPIO_Init+0x236>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a55      	ldr	r2, [pc, #340]	; (80028a4 <HAL_GPIO_Init+0x338>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d025      	beq.n	800279e <HAL_GPIO_Init+0x232>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a54      	ldr	r2, [pc, #336]	; (80028a8 <HAL_GPIO_Init+0x33c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d01f      	beq.n	800279a <HAL_GPIO_Init+0x22e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a53      	ldr	r2, [pc, #332]	; (80028ac <HAL_GPIO_Init+0x340>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d019      	beq.n	8002796 <HAL_GPIO_Init+0x22a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a52      	ldr	r2, [pc, #328]	; (80028b0 <HAL_GPIO_Init+0x344>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <HAL_GPIO_Init+0x226>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a51      	ldr	r2, [pc, #324]	; (80028b4 <HAL_GPIO_Init+0x348>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00d      	beq.n	800278e <HAL_GPIO_Init+0x222>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a50      	ldr	r2, [pc, #320]	; (80028b8 <HAL_GPIO_Init+0x34c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d007      	beq.n	800278a <HAL_GPIO_Init+0x21e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a4f      	ldr	r2, [pc, #316]	; (80028bc <HAL_GPIO_Init+0x350>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d101      	bne.n	8002786 <HAL_GPIO_Init+0x21a>
 8002782:	2309      	movs	r3, #9
 8002784:	e012      	b.n	80027ac <HAL_GPIO_Init+0x240>
 8002786:	230a      	movs	r3, #10
 8002788:	e010      	b.n	80027ac <HAL_GPIO_Init+0x240>
 800278a:	2308      	movs	r3, #8
 800278c:	e00e      	b.n	80027ac <HAL_GPIO_Init+0x240>
 800278e:	2307      	movs	r3, #7
 8002790:	e00c      	b.n	80027ac <HAL_GPIO_Init+0x240>
 8002792:	2306      	movs	r3, #6
 8002794:	e00a      	b.n	80027ac <HAL_GPIO_Init+0x240>
 8002796:	2305      	movs	r3, #5
 8002798:	e008      	b.n	80027ac <HAL_GPIO_Init+0x240>
 800279a:	2304      	movs	r3, #4
 800279c:	e006      	b.n	80027ac <HAL_GPIO_Init+0x240>
 800279e:	2303      	movs	r3, #3
 80027a0:	e004      	b.n	80027ac <HAL_GPIO_Init+0x240>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e002      	b.n	80027ac <HAL_GPIO_Init+0x240>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_GPIO_Init+0x240>
 80027aa:	2300      	movs	r3, #0
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	f002 0203 	and.w	r2, r2, #3
 80027b2:	0092      	lsls	r2, r2, #2
 80027b4:	4093      	lsls	r3, r2
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027bc:	4935      	ldr	r1, [pc, #212]	; (8002894 <HAL_GPIO_Init+0x328>)
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	089b      	lsrs	r3, r3, #2
 80027c2:	3302      	adds	r3, #2
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ca:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <HAL_GPIO_Init+0x354>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ee:	4a34      	ldr	r2, [pc, #208]	; (80028c0 <HAL_GPIO_Init+0x354>)
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027f4:	4b32      	ldr	r3, [pc, #200]	; (80028c0 <HAL_GPIO_Init+0x354>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002818:	4a29      	ldr	r2, [pc, #164]	; (80028c0 <HAL_GPIO_Init+0x354>)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800281e:	4b28      	ldr	r3, [pc, #160]	; (80028c0 <HAL_GPIO_Init+0x354>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002842:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <HAL_GPIO_Init+0x354>)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002848:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <HAL_GPIO_Init+0x354>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800286c:	4a14      	ldr	r2, [pc, #80]	; (80028c0 <HAL_GPIO_Init+0x354>)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3301      	adds	r3, #1
 8002876:	61fb      	str	r3, [r7, #28]
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	2b0f      	cmp	r3, #15
 800287c:	f67f ae86 	bls.w	800258c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002880:	bf00      	nop
 8002882:	bf00      	nop
 8002884:	3724      	adds	r7, #36	; 0x24
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800
 8002894:	40013800 	.word	0x40013800
 8002898:	40020000 	.word	0x40020000
 800289c:	40020400 	.word	0x40020400
 80028a0:	40020800 	.word	0x40020800
 80028a4:	40020c00 	.word	0x40020c00
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40021400 	.word	0x40021400
 80028b0:	40021800 	.word	0x40021800
 80028b4:	40021c00 	.word	0x40021c00
 80028b8:	40022000 	.word	0x40022000
 80028bc:	40022400 	.word	0x40022400
 80028c0:	40013c00 	.word	0x40013c00

080028c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	807b      	strh	r3, [r7, #2]
 80028d0:	4613      	mov	r3, r2
 80028d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028d4:	787b      	ldrb	r3, [r7, #1]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028da:	887a      	ldrh	r2, [r7, #2]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028e0:	e003      	b.n	80028ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028e2:	887b      	ldrh	r3, [r7, #2]
 80028e4:	041a      	lsls	r2, r3, #16
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	619a      	str	r2, [r3, #24]
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a04      	ldr	r2, [pc, #16]	; (8002914 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40007000 	.word	0x40007000

08002918 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002920:	2300      	movs	r3, #0
 8002922:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e29b      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 8087 	beq.w	8002a4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800293c:	4b96      	ldr	r3, [pc, #600]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	2b04      	cmp	r3, #4
 8002946:	d00c      	beq.n	8002962 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002948:	4b93      	ldr	r3, [pc, #588]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 030c 	and.w	r3, r3, #12
 8002950:	2b08      	cmp	r3, #8
 8002952:	d112      	bne.n	800297a <HAL_RCC_OscConfig+0x62>
 8002954:	4b90      	ldr	r3, [pc, #576]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002960:	d10b      	bne.n	800297a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002962:	4b8d      	ldr	r3, [pc, #564]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d06c      	beq.n	8002a48 <HAL_RCC_OscConfig+0x130>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d168      	bne.n	8002a48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e275      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002982:	d106      	bne.n	8002992 <HAL_RCC_OscConfig+0x7a>
 8002984:	4b84      	ldr	r3, [pc, #528]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a83      	ldr	r2, [pc, #524]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 800298a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	e02e      	b.n	80029f0 <HAL_RCC_OscConfig+0xd8>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x9c>
 800299a:	4b7f      	ldr	r3, [pc, #508]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a7e      	ldr	r2, [pc, #504]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 80029a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4b7c      	ldr	r3, [pc, #496]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a7b      	ldr	r2, [pc, #492]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 80029ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e01d      	b.n	80029f0 <HAL_RCC_OscConfig+0xd8>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0xc0>
 80029be:	4b76      	ldr	r3, [pc, #472]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a75      	ldr	r2, [pc, #468]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 80029c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	4b73      	ldr	r3, [pc, #460]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a72      	ldr	r2, [pc, #456]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	e00b      	b.n	80029f0 <HAL_RCC_OscConfig+0xd8>
 80029d8:	4b6f      	ldr	r3, [pc, #444]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a6e      	ldr	r2, [pc, #440]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 80029de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	4b6c      	ldr	r3, [pc, #432]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a6b      	ldr	r2, [pc, #428]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 80029ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d013      	beq.n	8002a20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7ff f8b4 	bl	8001b64 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a00:	f7ff f8b0 	bl	8001b64 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	; 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e229      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	4b61      	ldr	r3, [pc, #388]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0xe8>
 8002a1e:	e014      	b.n	8002a4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7ff f8a0 	bl	8001b64 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a28:	f7ff f89c 	bl	8001b64 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	; 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e215      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3a:	4b57      	ldr	r3, [pc, #348]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x110>
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d069      	beq.n	8002b2a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a56:	4b50      	ldr	r3, [pc, #320]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a62:	4b4d      	ldr	r3, [pc, #308]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d11c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x190>
 8002a6e:	4b4a      	ldr	r3, [pc, #296]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d116      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7a:	4b47      	ldr	r3, [pc, #284]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <HAL_RCC_OscConfig+0x17a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e1e9      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a92:	4b41      	ldr	r3, [pc, #260]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	493d      	ldr	r1, [pc, #244]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa6:	e040      	b.n	8002b2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d023      	beq.n	8002af8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab0:	4b39      	ldr	r3, [pc, #228]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a38      	ldr	r2, [pc, #224]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abc:	f7ff f852 	bl	8001b64 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac4:	f7ff f84e 	bl	8001b64 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e1c7      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad6:	4b30      	ldr	r3, [pc, #192]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae2:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4929      	ldr	r1, [pc, #164]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]
 8002af6:	e018      	b.n	8002b2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af8:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a26      	ldr	r2, [pc, #152]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002afe:	f023 0301 	bic.w	r3, r3, #1
 8002b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7ff f82e 	bl	8001b64 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0c:	f7ff f82a 	bl	8001b64 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e1a3      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d038      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d019      	beq.n	8002b72 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3e:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b42:	4a15      	ldr	r2, [pc, #84]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4a:	f7ff f80b 	bl	8001b64 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b52:	f7ff f807 	bl	8001b64 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e180      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b64:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCC_OscConfig+0x23a>
 8002b70:	e01a      	b.n	8002ba8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b76:	4a08      	ldr	r2, [pc, #32]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7e:	f7fe fff1 	bl	8001b64 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b86:	f7fe ffed 	bl	8001b64 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d903      	bls.n	8002b9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e166      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
 8002b98:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b9c:	4b92      	ldr	r3, [pc, #584]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1ee      	bne.n	8002b86 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80a4 	beq.w	8002cfe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bb6:	4b8c      	ldr	r3, [pc, #560]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10d      	bne.n	8002bde <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc2:	4b89      	ldr	r3, [pc, #548]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	4a88      	ldr	r2, [pc, #544]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bce:	4b86      	ldr	r3, [pc, #536]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bde:	4b83      	ldr	r3, [pc, #524]	; (8002dec <HAL_RCC_OscConfig+0x4d4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d118      	bne.n	8002c1c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002bea:	4b80      	ldr	r3, [pc, #512]	; (8002dec <HAL_RCC_OscConfig+0x4d4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a7f      	ldr	r2, [pc, #508]	; (8002dec <HAL_RCC_OscConfig+0x4d4>)
 8002bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bf6:	f7fe ffb5 	bl	8001b64 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfe:	f7fe ffb1 	bl	8001b64 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b64      	cmp	r3, #100	; 0x64
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e12a      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c10:	4b76      	ldr	r3, [pc, #472]	; (8002dec <HAL_RCC_OscConfig+0x4d4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d106      	bne.n	8002c32 <HAL_RCC_OscConfig+0x31a>
 8002c24:	4b70      	ldr	r3, [pc, #448]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c28:	4a6f      	ldr	r2, [pc, #444]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c30:	e02d      	b.n	8002c8e <HAL_RCC_OscConfig+0x376>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x33c>
 8002c3a:	4b6b      	ldr	r3, [pc, #428]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	4a6a      	ldr	r2, [pc, #424]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c40:	f023 0301 	bic.w	r3, r3, #1
 8002c44:	6713      	str	r3, [r2, #112]	; 0x70
 8002c46:	4b68      	ldr	r3, [pc, #416]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4a:	4a67      	ldr	r2, [pc, #412]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c4c:	f023 0304 	bic.w	r3, r3, #4
 8002c50:	6713      	str	r3, [r2, #112]	; 0x70
 8002c52:	e01c      	b.n	8002c8e <HAL_RCC_OscConfig+0x376>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2b05      	cmp	r3, #5
 8002c5a:	d10c      	bne.n	8002c76 <HAL_RCC_OscConfig+0x35e>
 8002c5c:	4b62      	ldr	r3, [pc, #392]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	4a61      	ldr	r2, [pc, #388]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c62:	f043 0304 	orr.w	r3, r3, #4
 8002c66:	6713      	str	r3, [r2, #112]	; 0x70
 8002c68:	4b5f      	ldr	r3, [pc, #380]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6c:	4a5e      	ldr	r2, [pc, #376]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	6713      	str	r3, [r2, #112]	; 0x70
 8002c74:	e00b      	b.n	8002c8e <HAL_RCC_OscConfig+0x376>
 8002c76:	4b5c      	ldr	r3, [pc, #368]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7a:	4a5b      	ldr	r2, [pc, #364]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c7c:	f023 0301 	bic.w	r3, r3, #1
 8002c80:	6713      	str	r3, [r2, #112]	; 0x70
 8002c82:	4b59      	ldr	r3, [pc, #356]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	4a58      	ldr	r2, [pc, #352]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c88:	f023 0304 	bic.w	r3, r3, #4
 8002c8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d015      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c96:	f7fe ff65 	bl	8001b64 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9c:	e00a      	b.n	8002cb4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9e:	f7fe ff61 	bl	8001b64 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e0d8      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb4:	4b4c      	ldr	r3, [pc, #304]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0ee      	beq.n	8002c9e <HAL_RCC_OscConfig+0x386>
 8002cc0:	e014      	b.n	8002cec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc2:	f7fe ff4f 	bl	8001b64 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc8:	e00a      	b.n	8002ce0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cca:	f7fe ff4b 	bl	8001b64 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e0c2      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce0:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1ee      	bne.n	8002cca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cec:	7dfb      	ldrb	r3, [r7, #23]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d105      	bne.n	8002cfe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf2:	4b3d      	ldr	r3, [pc, #244]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	4a3c      	ldr	r2, [pc, #240]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 80ae 	beq.w	8002e64 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d08:	4b37      	ldr	r3, [pc, #220]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 030c 	and.w	r3, r3, #12
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d06d      	beq.n	8002df0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d14b      	bne.n	8002db4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1c:	4b32      	ldr	r3, [pc, #200]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a31      	ldr	r2, [pc, #196]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7fe ff1c 	bl	8001b64 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d30:	f7fe ff18 	bl	8001b64 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e091      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d42:	4b29      	ldr	r3, [pc, #164]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69da      	ldr	r2, [r3, #28]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	019b      	lsls	r3, r3, #6
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d64:	085b      	lsrs	r3, r3, #1
 8002d66:	3b01      	subs	r3, #1
 8002d68:	041b      	lsls	r3, r3, #16
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	061b      	lsls	r3, r3, #24
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	071b      	lsls	r3, r3, #28
 8002d7a:	491b      	ldr	r1, [pc, #108]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d80:	4b19      	ldr	r3, [pc, #100]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a18      	ldr	r2, [pc, #96]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fe feea 	bl	8001b64 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d94:	f7fe fee6 	bl	8001b64 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e05f      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da6:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0x47c>
 8002db2:	e057      	b.n	8002e64 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a0b      	ldr	r2, [pc, #44]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fed0 	bl	8001b64 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fe fecc 	bl	8001b64 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e045      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dda:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x4b0>
 8002de6:	e03d      	b.n	8002e64 <HAL_RCC_OscConfig+0x54c>
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002df0:	4b1f      	ldr	r3, [pc, #124]	; (8002e70 <HAL_RCC_OscConfig+0x558>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d030      	beq.n	8002e60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d129      	bne.n	8002e60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d122      	bne.n	8002e60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e20:	4013      	ands	r3, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e26:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d119      	bne.n	8002e60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	085b      	lsrs	r3, r3, #1
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d10f      	bne.n	8002e60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d107      	bne.n	8002e60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800

08002e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0d0      	b.n	800302e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b6a      	ldr	r3, [pc, #424]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d910      	bls.n	8002ebc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b67      	ldr	r3, [pc, #412]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 020f 	bic.w	r2, r3, #15
 8002ea2:	4965      	ldr	r1, [pc, #404]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eaa:	4b63      	ldr	r3, [pc, #396]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0b8      	b.n	800302e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d020      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ed4:	4b59      	ldr	r3, [pc, #356]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4a58      	ldr	r2, [pc, #352]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002eda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ede:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eec:	4b53      	ldr	r3, [pc, #332]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4a52      	ldr	r2, [pc, #328]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002ef2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ef6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef8:	4b50      	ldr	r3, [pc, #320]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	494d      	ldr	r1, [pc, #308]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d040      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d107      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1e:	4b47      	ldr	r3, [pc, #284]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d115      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e07f      	b.n	800302e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d107      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f36:	4b41      	ldr	r3, [pc, #260]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d109      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e073      	b.n	800302e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f46:	4b3d      	ldr	r3, [pc, #244]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e06b      	b.n	800302e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f56:	4b39      	ldr	r3, [pc, #228]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f023 0203 	bic.w	r2, r3, #3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	4936      	ldr	r1, [pc, #216]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f68:	f7fe fdfc 	bl	8001b64 <HAL_GetTick>
 8002f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6e:	e00a      	b.n	8002f86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f70:	f7fe fdf8 	bl	8001b64 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e053      	b.n	800302e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f86:	4b2d      	ldr	r3, [pc, #180]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 020c 	and.w	r2, r3, #12
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d1eb      	bne.n	8002f70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f98:	4b27      	ldr	r3, [pc, #156]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 030f 	and.w	r3, r3, #15
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d210      	bcs.n	8002fc8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa6:	4b24      	ldr	r3, [pc, #144]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f023 020f 	bic.w	r2, r3, #15
 8002fae:	4922      	ldr	r1, [pc, #136]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb6:	4b20      	ldr	r3, [pc, #128]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e032      	b.n	800302e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd4:	4b19      	ldr	r3, [pc, #100]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	4916      	ldr	r1, [pc, #88]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d009      	beq.n	8003006 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ff2:	4b12      	ldr	r3, [pc, #72]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	490e      	ldr	r1, [pc, #56]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8003002:	4313      	orrs	r3, r2
 8003004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003006:	f000 f821 	bl	800304c <HAL_RCC_GetSysClockFreq>
 800300a:	4602      	mov	r2, r0
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	490a      	ldr	r1, [pc, #40]	; (8003040 <HAL_RCC_ClockConfig+0x1cc>)
 8003018:	5ccb      	ldrb	r3, [r1, r3]
 800301a:	fa22 f303 	lsr.w	r3, r2, r3
 800301e:	4a09      	ldr	r2, [pc, #36]	; (8003044 <HAL_RCC_ClockConfig+0x1d0>)
 8003020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003022:	4b09      	ldr	r3, [pc, #36]	; (8003048 <HAL_RCC_ClockConfig+0x1d4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe fac2 	bl	80015b0 <HAL_InitTick>

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40023c00 	.word	0x40023c00
 800303c:	40023800 	.word	0x40023800
 8003040:	08014808 	.word	0x08014808
 8003044:	20000004 	.word	0x20000004
 8003048:	20000008 	.word	0x20000008

0800304c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800304c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003050:	b094      	sub	sp, #80	; 0x50
 8003052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	647b      	str	r3, [r7, #68]	; 0x44
 8003058:	2300      	movs	r3, #0
 800305a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800305c:	2300      	movs	r3, #0
 800305e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003060:	2300      	movs	r3, #0
 8003062:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003064:	4b79      	ldr	r3, [pc, #484]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b08      	cmp	r3, #8
 800306e:	d00d      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x40>
 8003070:	2b08      	cmp	r3, #8
 8003072:	f200 80e1 	bhi.w	8003238 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0x34>
 800307a:	2b04      	cmp	r3, #4
 800307c:	d003      	beq.n	8003086 <HAL_RCC_GetSysClockFreq+0x3a>
 800307e:	e0db      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003080:	4b73      	ldr	r3, [pc, #460]	; (8003250 <HAL_RCC_GetSysClockFreq+0x204>)
 8003082:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003084:	e0db      	b.n	800323e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003086:	4b73      	ldr	r3, [pc, #460]	; (8003254 <HAL_RCC_GetSysClockFreq+0x208>)
 8003088:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800308a:	e0d8      	b.n	800323e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800308c:	4b6f      	ldr	r3, [pc, #444]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003094:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003096:	4b6d      	ldr	r3, [pc, #436]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d063      	beq.n	800316a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a2:	4b6a      	ldr	r3, [pc, #424]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	099b      	lsrs	r3, r3, #6
 80030a8:	2200      	movs	r2, #0
 80030aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80030ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b4:	633b      	str	r3, [r7, #48]	; 0x30
 80030b6:	2300      	movs	r3, #0
 80030b8:	637b      	str	r3, [r7, #52]	; 0x34
 80030ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030be:	4622      	mov	r2, r4
 80030c0:	462b      	mov	r3, r5
 80030c2:	f04f 0000 	mov.w	r0, #0
 80030c6:	f04f 0100 	mov.w	r1, #0
 80030ca:	0159      	lsls	r1, r3, #5
 80030cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d0:	0150      	lsls	r0, r2, #5
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4621      	mov	r1, r4
 80030d8:	1a51      	subs	r1, r2, r1
 80030da:	6139      	str	r1, [r7, #16]
 80030dc:	4629      	mov	r1, r5
 80030de:	eb63 0301 	sbc.w	r3, r3, r1
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030f0:	4659      	mov	r1, fp
 80030f2:	018b      	lsls	r3, r1, #6
 80030f4:	4651      	mov	r1, sl
 80030f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030fa:	4651      	mov	r1, sl
 80030fc:	018a      	lsls	r2, r1, #6
 80030fe:	4651      	mov	r1, sl
 8003100:	ebb2 0801 	subs.w	r8, r2, r1
 8003104:	4659      	mov	r1, fp
 8003106:	eb63 0901 	sbc.w	r9, r3, r1
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003116:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800311a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800311e:	4690      	mov	r8, r2
 8003120:	4699      	mov	r9, r3
 8003122:	4623      	mov	r3, r4
 8003124:	eb18 0303 	adds.w	r3, r8, r3
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	462b      	mov	r3, r5
 800312c:	eb49 0303 	adc.w	r3, r9, r3
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800313e:	4629      	mov	r1, r5
 8003140:	024b      	lsls	r3, r1, #9
 8003142:	4621      	mov	r1, r4
 8003144:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003148:	4621      	mov	r1, r4
 800314a:	024a      	lsls	r2, r1, #9
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003152:	2200      	movs	r2, #0
 8003154:	62bb      	str	r3, [r7, #40]	; 0x28
 8003156:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003158:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800315c:	f7fd f928 	bl	80003b0 <__aeabi_uldivmod>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4613      	mov	r3, r2
 8003166:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003168:	e058      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800316a:	4b38      	ldr	r3, [pc, #224]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	099b      	lsrs	r3, r3, #6
 8003170:	2200      	movs	r2, #0
 8003172:	4618      	mov	r0, r3
 8003174:	4611      	mov	r1, r2
 8003176:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800317a:	623b      	str	r3, [r7, #32]
 800317c:	2300      	movs	r3, #0
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
 8003180:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003184:	4642      	mov	r2, r8
 8003186:	464b      	mov	r3, r9
 8003188:	f04f 0000 	mov.w	r0, #0
 800318c:	f04f 0100 	mov.w	r1, #0
 8003190:	0159      	lsls	r1, r3, #5
 8003192:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003196:	0150      	lsls	r0, r2, #5
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4641      	mov	r1, r8
 800319e:	ebb2 0a01 	subs.w	sl, r2, r1
 80031a2:	4649      	mov	r1, r9
 80031a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031bc:	ebb2 040a 	subs.w	r4, r2, sl
 80031c0:	eb63 050b 	sbc.w	r5, r3, fp
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	00eb      	lsls	r3, r5, #3
 80031ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031d2:	00e2      	lsls	r2, r4, #3
 80031d4:	4614      	mov	r4, r2
 80031d6:	461d      	mov	r5, r3
 80031d8:	4643      	mov	r3, r8
 80031da:	18e3      	adds	r3, r4, r3
 80031dc:	603b      	str	r3, [r7, #0]
 80031de:	464b      	mov	r3, r9
 80031e0:	eb45 0303 	adc.w	r3, r5, r3
 80031e4:	607b      	str	r3, [r7, #4]
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031f2:	4629      	mov	r1, r5
 80031f4:	028b      	lsls	r3, r1, #10
 80031f6:	4621      	mov	r1, r4
 80031f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031fc:	4621      	mov	r1, r4
 80031fe:	028a      	lsls	r2, r1, #10
 8003200:	4610      	mov	r0, r2
 8003202:	4619      	mov	r1, r3
 8003204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003206:	2200      	movs	r2, #0
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	61fa      	str	r2, [r7, #28]
 800320c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003210:	f7fd f8ce 	bl	80003b0 <__aeabi_uldivmod>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4613      	mov	r3, r2
 800321a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	0c1b      	lsrs	r3, r3, #16
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	3301      	adds	r3, #1
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800322c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800322e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003230:	fbb2 f3f3 	udiv	r3, r2, r3
 8003234:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003236:	e002      	b.n	800323e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_RCC_GetSysClockFreq+0x204>)
 800323a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800323c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800323e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003240:	4618      	mov	r0, r3
 8003242:	3750      	adds	r7, #80	; 0x50
 8003244:	46bd      	mov	sp, r7
 8003246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800
 8003250:	00f42400 	.word	0x00f42400
 8003254:	007a1200 	.word	0x007a1200

08003258 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800325c:	4b03      	ldr	r3, [pc, #12]	; (800326c <HAL_RCC_GetHCLKFreq+0x14>)
 800325e:	681b      	ldr	r3, [r3, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000004 	.word	0x20000004

08003270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003274:	f7ff fff0 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b05      	ldr	r3, [pc, #20]	; (8003290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	0a9b      	lsrs	r3, r3, #10
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	4903      	ldr	r1, [pc, #12]	; (8003294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40023800 	.word	0x40023800
 8003294:	08014818 	.word	0x08014818

08003298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800329c:	f7ff ffdc 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 80032a0:	4602      	mov	r2, r0
 80032a2:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	0b5b      	lsrs	r3, r3, #13
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	4903      	ldr	r1, [pc, #12]	; (80032bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ae:	5ccb      	ldrb	r3, [r1, r3]
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40023800 	.word	0x40023800
 80032bc:	08014818 	.word	0x08014818

080032c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	220f      	movs	r2, #15
 80032ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032d0:	4b12      	ldr	r3, [pc, #72]	; (800331c <HAL_RCC_GetClockConfig+0x5c>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 0203 	and.w	r2, r3, #3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032dc:	4b0f      	ldr	r3, [pc, #60]	; (800331c <HAL_RCC_GetClockConfig+0x5c>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032e8:	4b0c      	ldr	r3, [pc, #48]	; (800331c <HAL_RCC_GetClockConfig+0x5c>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80032f4:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_RCC_GetClockConfig+0x5c>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	08db      	lsrs	r3, r3, #3
 80032fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003302:	4b07      	ldr	r3, [pc, #28]	; (8003320 <HAL_RCC_GetClockConfig+0x60>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 020f 	and.w	r2, r3, #15
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	601a      	str	r2, [r3, #0]
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40023800 	.word	0x40023800
 8003320:	40023c00 	.word	0x40023c00

08003324 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d012      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800334c:	4b69      	ldr	r3, [pc, #420]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	4a68      	ldr	r2, [pc, #416]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003352:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003356:	6093      	str	r3, [r2, #8]
 8003358:	4b66      	ldr	r3, [pc, #408]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003360:	4964      	ldr	r1, [pc, #400]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800336e:	2301      	movs	r3, #1
 8003370:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d017      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800337e:	4b5d      	ldr	r3, [pc, #372]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003384:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338c:	4959      	ldr	r1, [pc, #356]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800339c:	d101      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800339e:	2301      	movs	r3, #1
 80033a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80033aa:	2301      	movs	r3, #1
 80033ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d017      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033ba:	4b4e      	ldr	r3, [pc, #312]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	494a      	ldr	r1, [pc, #296]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033d8:	d101      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80033da:	2301      	movs	r3, #1
 80033dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80033e6:	2301      	movs	r3, #1
 80033e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80033f6:	2301      	movs	r3, #1
 80033f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0320 	and.w	r3, r3, #32
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 808b 	beq.w	800351e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003408:	4b3a      	ldr	r3, [pc, #232]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	4a39      	ldr	r2, [pc, #228]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003412:	6413      	str	r3, [r2, #64]	; 0x40
 8003414:	4b37      	ldr	r3, [pc, #220]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003420:	4b35      	ldr	r3, [pc, #212]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a34      	ldr	r2, [pc, #208]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800342c:	f7fe fb9a 	bl	8001b64 <HAL_GetTick>
 8003430:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003434:	f7fe fb96 	bl	8001b64 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e38f      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003446:	4b2c      	ldr	r3, [pc, #176]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003452:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d035      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	429a      	cmp	r2, r3
 800346e:	d02e      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003470:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003478:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800347a:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347e:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003484:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003486:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	4a1a      	ldr	r2, [pc, #104]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003490:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003492:	4a18      	ldr	r2, [pc, #96]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003498:	4b16      	ldr	r3, [pc, #88]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d114      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fe fb5e 	bl	8001b64 <HAL_GetTick>
 80034a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034aa:	e00a      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ac:	f7fe fb5a 	bl	8001b64 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e351      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c2:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0ee      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034da:	d111      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034e8:	4b04      	ldr	r3, [pc, #16]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034ea:	400b      	ands	r3, r1
 80034ec:	4901      	ldr	r1, [pc, #4]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	608b      	str	r3, [r1, #8]
 80034f2:	e00b      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40007000 	.word	0x40007000
 80034fc:	0ffffcff 	.word	0x0ffffcff
 8003500:	4bac      	ldr	r3, [pc, #688]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4aab      	ldr	r2, [pc, #684]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003506:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800350a:	6093      	str	r3, [r2, #8]
 800350c:	4ba9      	ldr	r3, [pc, #676]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800350e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003518:	49a6      	ldr	r1, [pc, #664]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800351a:	4313      	orrs	r3, r2
 800351c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b00      	cmp	r3, #0
 8003528:	d010      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800352a:	4ba2      	ldr	r3, [pc, #648]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800352c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003530:	4aa0      	ldr	r2, [pc, #640]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003536:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800353a:	4b9e      	ldr	r3, [pc, #632]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800353c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003544:	499b      	ldr	r1, [pc, #620]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003558:	4b96      	ldr	r3, [pc, #600]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800355a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003566:	4993      	ldr	r1, [pc, #588]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800357a:	4b8e      	ldr	r3, [pc, #568]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800357c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003580:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003588:	498a      	ldr	r1, [pc, #552]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00a      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800359c:	4b85      	ldr	r3, [pc, #532]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035aa:	4982      	ldr	r1, [pc, #520]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035be:	4b7d      	ldr	r3, [pc, #500]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035cc:	4979      	ldr	r1, [pc, #484]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035e0:	4b74      	ldr	r3, [pc, #464]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e6:	f023 0203 	bic.w	r2, r3, #3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	4971      	ldr	r1, [pc, #452]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003602:	4b6c      	ldr	r3, [pc, #432]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003608:	f023 020c 	bic.w	r2, r3, #12
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003610:	4968      	ldr	r1, [pc, #416]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003624:	4b63      	ldr	r3, [pc, #396]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003632:	4960      	ldr	r1, [pc, #384]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003646:	4b5b      	ldr	r3, [pc, #364]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003654:	4957      	ldr	r1, [pc, #348]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003668:	4b52      	ldr	r3, [pc, #328]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003676:	494f      	ldr	r1, [pc, #316]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800368a:	4b4a      	ldr	r3, [pc, #296]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800368c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003690:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003698:	4946      	ldr	r1, [pc, #280]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036ac:	4b41      	ldr	r3, [pc, #260]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ba:	493e      	ldr	r1, [pc, #248]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80036ce:	4b39      	ldr	r3, [pc, #228]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036dc:	4935      	ldr	r1, [pc, #212]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036f0:	4b30      	ldr	r3, [pc, #192]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036fe:	492d      	ldr	r1, [pc, #180]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d011      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003712:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003718:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003720:	4924      	ldr	r1, [pc, #144]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800372c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003730:	d101      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003732:	2301      	movs	r3, #1
 8003734:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003742:	2301      	movs	r3, #1
 8003744:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003752:	4b18      	ldr	r3, [pc, #96]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003758:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003760:	4914      	ldr	r1, [pc, #80]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00b      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003774:	4b0f      	ldr	r3, [pc, #60]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003784:	490b      	ldr	r1, [pc, #44]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00f      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003798:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a8:	4902      	ldr	r1, [pc, #8]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037b0:	e002      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80037b2:	bf00      	nop
 80037b4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00b      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037c4:	4b8a      	ldr	r3, [pc, #552]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d4:	4986      	ldr	r1, [pc, #536]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00b      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80037e8:	4b81      	ldr	r3, [pc, #516]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037f8:	497d      	ldr	r1, [pc, #500]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d006      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 80d6 	beq.w	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003814:	4b76      	ldr	r3, [pc, #472]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a75      	ldr	r2, [pc, #468]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800381a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800381e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003820:	f7fe f9a0 	bl	8001b64 <HAL_GetTick>
 8003824:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003828:	f7fe f99c 	bl	8001b64 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	; 0x64
 8003834:	d901      	bls.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e195      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800383a:	4b6d      	ldr	r3, [pc, #436]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d021      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003856:	2b00      	cmp	r3, #0
 8003858:	d11d      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800385a:	4b65      	ldr	r3, [pc, #404]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800385c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003860:	0c1b      	lsrs	r3, r3, #16
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003868:	4b61      	ldr	r3, [pc, #388]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800386a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800386e:	0e1b      	lsrs	r3, r3, #24
 8003870:	f003 030f 	and.w	r3, r3, #15
 8003874:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	019a      	lsls	r2, r3, #6
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	041b      	lsls	r3, r3, #16
 8003880:	431a      	orrs	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	061b      	lsls	r3, r3, #24
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	071b      	lsls	r3, r3, #28
 800388e:	4958      	ldr	r1, [pc, #352]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d004      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x588>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d02e      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038c0:	d129      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038c2:	4b4b      	ldr	r3, [pc, #300]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038c8:	0c1b      	lsrs	r3, r3, #16
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038d0:	4b47      	ldr	r3, [pc, #284]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038d6:	0f1b      	lsrs	r3, r3, #28
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	019a      	lsls	r2, r3, #6
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	041b      	lsls	r3, r3, #16
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	061b      	lsls	r3, r3, #24
 80038f0:	431a      	orrs	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	071b      	lsls	r3, r3, #28
 80038f6:	493e      	ldr	r1, [pc, #248]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80038fe:	4b3c      	ldr	r3, [pc, #240]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003904:	f023 021f 	bic.w	r2, r3, #31
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	3b01      	subs	r3, #1
 800390e:	4938      	ldr	r1, [pc, #224]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d01d      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003922:	4b33      	ldr	r3, [pc, #204]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003928:	0e1b      	lsrs	r3, r3, #24
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003930:	4b2f      	ldr	r3, [pc, #188]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003936:	0f1b      	lsrs	r3, r3, #28
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	019a      	lsls	r2, r3, #6
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	041b      	lsls	r3, r3, #16
 800394a:	431a      	orrs	r2, r3
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	061b      	lsls	r3, r3, #24
 8003950:	431a      	orrs	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	071b      	lsls	r3, r3, #28
 8003956:	4926      	ldr	r1, [pc, #152]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d011      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	019a      	lsls	r2, r3, #6
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	041b      	lsls	r3, r3, #16
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	061b      	lsls	r3, r3, #24
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	071b      	lsls	r3, r3, #28
 8003986:	491a      	ldr	r1, [pc, #104]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800398e:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a17      	ldr	r2, [pc, #92]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003994:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003998:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800399a:	f7fe f8e3 	bl	8001b64 <HAL_GetTick>
 800399e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039a0:	e008      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039a2:	f7fe f8df 	bl	8001b64 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b64      	cmp	r3, #100	; 0x64
 80039ae:	d901      	bls.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e0d8      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0f0      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	f040 80ce 	bne.w	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039c8:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a08      	ldr	r2, [pc, #32]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d4:	f7fe f8c6 	bl	8001b64 <HAL_GetTick>
 80039d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039da:	e00b      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039dc:	f7fe f8c2 	bl	8001b64 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	; 0x64
 80039e8:	d904      	bls.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e0bb      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80039ee:	bf00      	nop
 80039f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039f4:	4b5e      	ldr	r3, [pc, #376]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a00:	d0ec      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d02e      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d12a      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a2a:	4b51      	ldr	r3, [pc, #324]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a30:	0c1b      	lsrs	r3, r3, #16
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a38:	4b4d      	ldr	r3, [pc, #308]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3e:	0f1b      	lsrs	r3, r3, #28
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	019a      	lsls	r2, r3, #6
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	041b      	lsls	r3, r3, #16
 8003a50:	431a      	orrs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	061b      	lsls	r3, r3, #24
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	071b      	lsls	r3, r3, #28
 8003a5e:	4944      	ldr	r1, [pc, #272]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a66:	4b42      	ldr	r3, [pc, #264]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a6c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	3b01      	subs	r3, #1
 8003a76:	021b      	lsls	r3, r3, #8
 8003a78:	493d      	ldr	r1, [pc, #244]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d022      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a94:	d11d      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a96:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9c:	0e1b      	lsrs	r3, r3, #24
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003aa4:	4b32      	ldr	r3, [pc, #200]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	0f1b      	lsrs	r3, r3, #28
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	019a      	lsls	r2, r3, #6
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	041b      	lsls	r3, r3, #16
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	061b      	lsls	r3, r3, #24
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	071b      	lsls	r3, r3, #28
 8003aca:	4929      	ldr	r1, [pc, #164]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d028      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ade:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae4:	0e1b      	lsrs	r3, r3, #24
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003aec:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af2:	0c1b      	lsrs	r3, r3, #16
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	019a      	lsls	r2, r3, #6
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	041b      	lsls	r3, r3, #16
 8003b04:	431a      	orrs	r2, r3
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	061b      	lsls	r3, r3, #24
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	071b      	lsls	r3, r3, #28
 8003b12:	4917      	ldr	r1, [pc, #92]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b1a:	4b15      	ldr	r3, [pc, #84]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	4911      	ldr	r1, [pc, #68]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b30:	4b0f      	ldr	r3, [pc, #60]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a0e      	ldr	r2, [pc, #56]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b3c:	f7fe f812 	bl	8001b64 <HAL_GetTick>
 8003b40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b44:	f7fe f80e 	bl	8001b64 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b64      	cmp	r3, #100	; 0x64
 8003b50:	d901      	bls.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e007      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b56:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b62:	d1ef      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40023800 	.word	0x40023800

08003b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e049      	b.n	8003c1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f841 	bl	8003c22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	f000 fa00 	bl	8003fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d001      	beq.n	8003c50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e054      	b.n	8003cfa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a26      	ldr	r2, [pc, #152]	; (8003d08 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d022      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x80>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7a:	d01d      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x80>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a22      	ldr	r2, [pc, #136]	; (8003d0c <HAL_TIM_Base_Start_IT+0xd4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d018      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x80>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a21      	ldr	r2, [pc, #132]	; (8003d10 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d013      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x80>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a1f      	ldr	r2, [pc, #124]	; (8003d14 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00e      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x80>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a1e      	ldr	r2, [pc, #120]	; (8003d18 <HAL_TIM_Base_Start_IT+0xe0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d009      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x80>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a1c      	ldr	r2, [pc, #112]	; (8003d1c <HAL_TIM_Base_Start_IT+0xe4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d004      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x80>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a1b      	ldr	r2, [pc, #108]	; (8003d20 <HAL_TIM_Base_Start_IT+0xe8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d115      	bne.n	8003ce4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	4b19      	ldr	r3, [pc, #100]	; (8003d24 <HAL_TIM_Base_Start_IT+0xec>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b06      	cmp	r3, #6
 8003cc8:	d015      	beq.n	8003cf6 <HAL_TIM_Base_Start_IT+0xbe>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd0:	d011      	beq.n	8003cf6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0201 	orr.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce2:	e008      	b.n	8003cf6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	e000      	b.n	8003cf8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40010000 	.word	0x40010000
 8003d0c:	40000400 	.word	0x40000400
 8003d10:	40000800 	.word	0x40000800
 8003d14:	40000c00 	.word	0x40000c00
 8003d18:	40010400 	.word	0x40010400
 8003d1c:	40014000 	.word	0x40014000
 8003d20:	40001800 	.word	0x40001800
 8003d24:	00010007 	.word	0x00010007

08003d28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d122      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d11b      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0202 	mvn.w	r2, #2
 8003d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f905 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 8003d70:	e005      	b.n	8003d7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f8f7 	bl	8003f66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f908 	bl	8003f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d122      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d11b      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0204 	mvn.w	r2, #4
 8003da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2202      	movs	r2, #2
 8003dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f8db 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 8003dc4:	e005      	b.n	8003dd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f8cd 	bl	8003f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f8de 	bl	8003f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d122      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d11b      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f06f 0208 	mvn.w	r2, #8
 8003dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2204      	movs	r2, #4
 8003e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f8b1 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 8003e18:	e005      	b.n	8003e26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f8a3 	bl	8003f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f8b4 	bl	8003f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	2b10      	cmp	r3, #16
 8003e38:	d122      	bne.n	8003e80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b10      	cmp	r3, #16
 8003e46:	d11b      	bne.n	8003e80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 0210 	mvn.w	r2, #16
 8003e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2208      	movs	r2, #8
 8003e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f887 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 8003e6c:	e005      	b.n	8003e7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f879 	bl	8003f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f88a 	bl	8003f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d10e      	bne.n	8003eac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d107      	bne.n	8003eac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f06f 0201 	mvn.w	r2, #1
 8003ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fd f9de 	bl	8001268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb6:	2b80      	cmp	r3, #128	; 0x80
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec4:	2b80      	cmp	r3, #128	; 0x80
 8003ec6:	d107      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f91a 	bl	800410c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee6:	d10e      	bne.n	8003f06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef2:	2b80      	cmp	r3, #128	; 0x80
 8003ef4:	d107      	bne.n	8003f06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f90d 	bl	8004120 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f10:	2b40      	cmp	r3, #64	; 0x40
 8003f12:	d10e      	bne.n	8003f32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1e:	2b40      	cmp	r3, #64	; 0x40
 8003f20:	d107      	bne.n	8003f32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f838 	bl	8003fa2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d10e      	bne.n	8003f5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f003 0320 	and.w	r3, r3, #32
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	d107      	bne.n	8003f5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f06f 0220 	mvn.w	r2, #32
 8003f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f8cd 	bl	80040f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
	...

08003fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a40      	ldr	r2, [pc, #256]	; (80040cc <TIM_Base_SetConfig+0x114>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d013      	beq.n	8003ff8 <TIM_Base_SetConfig+0x40>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd6:	d00f      	beq.n	8003ff8 <TIM_Base_SetConfig+0x40>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a3d      	ldr	r2, [pc, #244]	; (80040d0 <TIM_Base_SetConfig+0x118>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00b      	beq.n	8003ff8 <TIM_Base_SetConfig+0x40>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a3c      	ldr	r2, [pc, #240]	; (80040d4 <TIM_Base_SetConfig+0x11c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d007      	beq.n	8003ff8 <TIM_Base_SetConfig+0x40>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a3b      	ldr	r2, [pc, #236]	; (80040d8 <TIM_Base_SetConfig+0x120>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d003      	beq.n	8003ff8 <TIM_Base_SetConfig+0x40>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a3a      	ldr	r2, [pc, #232]	; (80040dc <TIM_Base_SetConfig+0x124>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d108      	bne.n	800400a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a2f      	ldr	r2, [pc, #188]	; (80040cc <TIM_Base_SetConfig+0x114>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d02b      	beq.n	800406a <TIM_Base_SetConfig+0xb2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004018:	d027      	beq.n	800406a <TIM_Base_SetConfig+0xb2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a2c      	ldr	r2, [pc, #176]	; (80040d0 <TIM_Base_SetConfig+0x118>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d023      	beq.n	800406a <TIM_Base_SetConfig+0xb2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a2b      	ldr	r2, [pc, #172]	; (80040d4 <TIM_Base_SetConfig+0x11c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d01f      	beq.n	800406a <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a2a      	ldr	r2, [pc, #168]	; (80040d8 <TIM_Base_SetConfig+0x120>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d01b      	beq.n	800406a <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a29      	ldr	r2, [pc, #164]	; (80040dc <TIM_Base_SetConfig+0x124>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d017      	beq.n	800406a <TIM_Base_SetConfig+0xb2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a28      	ldr	r2, [pc, #160]	; (80040e0 <TIM_Base_SetConfig+0x128>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <TIM_Base_SetConfig+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a27      	ldr	r2, [pc, #156]	; (80040e4 <TIM_Base_SetConfig+0x12c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00f      	beq.n	800406a <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a26      	ldr	r2, [pc, #152]	; (80040e8 <TIM_Base_SetConfig+0x130>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d00b      	beq.n	800406a <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a25      	ldr	r2, [pc, #148]	; (80040ec <TIM_Base_SetConfig+0x134>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d007      	beq.n	800406a <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a24      	ldr	r2, [pc, #144]	; (80040f0 <TIM_Base_SetConfig+0x138>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d003      	beq.n	800406a <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a23      	ldr	r2, [pc, #140]	; (80040f4 <TIM_Base_SetConfig+0x13c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d108      	bne.n	800407c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4313      	orrs	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a0a      	ldr	r2, [pc, #40]	; (80040cc <TIM_Base_SetConfig+0x114>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d003      	beq.n	80040b0 <TIM_Base_SetConfig+0xf8>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a0c      	ldr	r2, [pc, #48]	; (80040dc <TIM_Base_SetConfig+0x124>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d103      	bne.n	80040b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	615a      	str	r2, [r3, #20]
}
 80040be:	bf00      	nop
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40010000 	.word	0x40010000
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40000800 	.word	0x40000800
 80040d8:	40000c00 	.word	0x40000c00
 80040dc:	40010400 	.word	0x40010400
 80040e0:	40014000 	.word	0x40014000
 80040e4:	40014400 	.word	0x40014400
 80040e8:	40014800 	.word	0x40014800
 80040ec:	40001800 	.word	0x40001800
 80040f0:	40001c00 	.word	0x40001c00
 80040f4:	40002000 	.word	0x40002000

080040f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e040      	b.n	80041c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7fd fbea 	bl	8001930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2224      	movs	r2, #36	; 0x24
 8004160:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fd32 	bl	8004bdc <UART_SetConfig>
 8004178:	4603      	mov	r3, r0
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e022      	b.n	80041c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 ff8a 	bl	80050a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800419e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0201 	orr.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f001 f811 	bl	80051e8 <UART_CheckIdleState>
 80041c6:	4603      	mov	r3, r0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08a      	sub	sp, #40	; 0x28
 80041d4:	af02      	add	r7, sp, #8
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	603b      	str	r3, [r7, #0]
 80041dc:	4613      	mov	r3, r2
 80041de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d171      	bne.n	80042cc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <HAL_UART_Transmit+0x24>
 80041ee:	88fb      	ldrh	r3, [r7, #6]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e06a      	b.n	80042ce <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2221      	movs	r2, #33	; 0x21
 8004204:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004206:	f7fd fcad 	bl	8001b64 <HAL_GetTick>
 800420a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	88fa      	ldrh	r2, [r7, #6]
 8004210:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	88fa      	ldrh	r2, [r7, #6]
 8004218:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004224:	d108      	bne.n	8004238 <HAL_UART_Transmit+0x68>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d104      	bne.n	8004238 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800422e:	2300      	movs	r3, #0
 8004230:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	61bb      	str	r3, [r7, #24]
 8004236:	e003      	b.n	8004240 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800423c:	2300      	movs	r3, #0
 800423e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004240:	e02c      	b.n	800429c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2200      	movs	r2, #0
 800424a:	2180      	movs	r1, #128	; 0x80
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f001 f818 	bl	8005282 <UART_WaitOnFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e038      	b.n	80042ce <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10b      	bne.n	800427a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004270:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	3302      	adds	r3, #2
 8004276:	61bb      	str	r3, [r7, #24]
 8004278:	e007      	b.n	800428a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	781a      	ldrb	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	3301      	adds	r3, #1
 8004288:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1cc      	bne.n	8004242 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2200      	movs	r2, #0
 80042b0:	2140      	movs	r1, #64	; 0x40
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 ffe5 	bl	8005282 <UART_WaitOnFlagUntilTimeout>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e005      	b.n	80042ce <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	e000      	b.n	80042ce <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80042cc:	2302      	movs	r3, #2
  }
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3720      	adds	r7, #32
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08a      	sub	sp, #40	; 0x28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	4613      	mov	r3, r2
 80042e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	d165      	bne.n	80043ba <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <HAL_UART_Transmit_DMA+0x22>
 80042f4:	88fb      	ldrh	r3, [r7, #6]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e05e      	b.n	80043bc <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	88fa      	ldrh	r2, [r7, #6]
 8004308:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	88fa      	ldrh	r2, [r7, #6]
 8004310:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2221      	movs	r2, #33	; 0x21
 8004320:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004326:	2b00      	cmp	r3, #0
 8004328:	d027      	beq.n	800437a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432e:	4a25      	ldr	r2, [pc, #148]	; (80043c4 <HAL_UART_Transmit_DMA+0xec>)
 8004330:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004336:	4a24      	ldr	r2, [pc, #144]	; (80043c8 <HAL_UART_Transmit_DMA+0xf0>)
 8004338:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433e:	4a23      	ldr	r2, [pc, #140]	; (80043cc <HAL_UART_Transmit_DMA+0xf4>)
 8004340:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004346:	2200      	movs	r2, #0
 8004348:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004352:	4619      	mov	r1, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3328      	adds	r3, #40	; 0x28
 800435a:	461a      	mov	r2, r3
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	f7fd fd9d 	bl	8001e9c <HAL_DMA_Start_IT>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2210      	movs	r2, #16
 800436c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2220      	movs	r2, #32
 8004374:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e020      	b.n	80043bc <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2240      	movs	r2, #64	; 0x40
 8004380:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3308      	adds	r3, #8
 8004388:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	613b      	str	r3, [r7, #16]
   return(result);
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3308      	adds	r3, #8
 80043a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a2:	623a      	str	r2, [r7, #32]
 80043a4:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	69f9      	ldr	r1, [r7, #28]
 80043a8:	6a3a      	ldr	r2, [r7, #32]
 80043aa:	e841 2300 	strex	r3, r2, [r1]
 80043ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1e5      	bne.n	8004382 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	e000      	b.n	80043bc <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80043ba:	2302      	movs	r3, #2
  }
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3728      	adds	r7, #40	; 0x28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	08005665 	.word	0x08005665
 80043c8:	080056fb 	.word	0x080056fb
 80043cc:	0800587d 	.word	0x0800587d

080043d0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08a      	sub	sp, #40	; 0x28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	4613      	mov	r3, r2
 80043dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043e4:	2b20      	cmp	r3, #32
 80043e6:	d132      	bne.n	800444e <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <HAL_UART_Receive_DMA+0x24>
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e02b      	b.n	8004450 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d018      	beq.n	800443e <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	e853 3f00 	ldrex	r3, [r3]
 8004418:	613b      	str	r3, [r7, #16]
   return(result);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	623b      	str	r3, [r7, #32]
 800442c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442e:	69f9      	ldr	r1, [r7, #28]
 8004430:	6a3a      	ldr	r2, [r7, #32]
 8004432:	e841 2300 	strex	r3, r2, [r1]
 8004436:	61bb      	str	r3, [r7, #24]
   return(result);
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1e6      	bne.n	800440c <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800443e:	88fb      	ldrh	r3, [r7, #6]
 8004440:	461a      	mov	r2, r3
 8004442:	68b9      	ldr	r1, [r7, #8]
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 ffe3 	bl	8005410 <UART_Start_Receive_DMA>
 800444a:	4603      	mov	r3, r0
 800444c:	e000      	b.n	8004450 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800444e:	2302      	movs	r3, #2
  }
}
 8004450:	4618      	mov	r0, r3
 8004452:	3728      	adds	r7, #40	; 0x28
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b090      	sub	sp, #64	; 0x40
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004464:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800446c:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	2b80      	cmp	r3, #128	; 0x80
 800447a:	d139      	bne.n	80044f0 <HAL_UART_DMAStop+0x98>
 800447c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800447e:	2b21      	cmp	r3, #33	; 0x21
 8004480:	d136      	bne.n	80044f0 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3308      	adds	r3, #8
 8004488:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	61fb      	str	r3, [r7, #28]
   return(result);
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004498:	637b      	str	r3, [r7, #52]	; 0x34
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3308      	adds	r3, #8
 80044a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044aa:	e841 2300 	strex	r3, r2, [r1]
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1e5      	bne.n	8004482 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d015      	beq.n	80044ea <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fd fd4a 	bl	8001f5c <HAL_DMA_Abort>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00d      	beq.n	80044ea <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fd ff5e 	bl	8002394 <HAL_DMA_GetError>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b20      	cmp	r3, #32
 80044dc:	d105      	bne.n	80044ea <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2210      	movs	r2, #16
 80044e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e044      	b.n	8004574 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f001 f830 	bl	8005550 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fa:	2b40      	cmp	r3, #64	; 0x40
 80044fc:	d139      	bne.n	8004572 <HAL_UART_DMAStop+0x11a>
 80044fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004500:	2b22      	cmp	r3, #34	; 0x22
 8004502:	d136      	bne.n	8004572 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3308      	adds	r3, #8
 800450a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	e853 3f00 	ldrex	r3, [r3]
 8004512:	60bb      	str	r3, [r7, #8]
   return(result);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800451a:	633b      	str	r3, [r7, #48]	; 0x30
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3308      	adds	r3, #8
 8004522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004524:	61ba      	str	r2, [r7, #24]
 8004526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	6979      	ldr	r1, [r7, #20]
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	e841 2300 	strex	r3, r2, [r1]
 8004530:	613b      	str	r3, [r7, #16]
   return(result);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e5      	bne.n	8004504 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453c:	2b00      	cmp	r3, #0
 800453e:	d015      	beq.n	800456c <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004544:	4618      	mov	r0, r3
 8004546:	f7fd fd09 	bl	8001f5c <HAL_DMA_Abort>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00d      	beq.n	800456c <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004554:	4618      	mov	r0, r3
 8004556:	f7fd ff1d 	bl	8002394 <HAL_DMA_GetError>
 800455a:	4603      	mov	r3, r0
 800455c:	2b20      	cmp	r3, #32
 800455e:	d105      	bne.n	800456c <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2210      	movs	r2, #16
 8004564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e003      	b.n	8004574 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f001 f815 	bl	800559c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3740      	adds	r7, #64	; 0x40
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b0ba      	sub	sp, #232	; 0xe8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80045a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80045aa:	4013      	ands	r3, r2
 80045ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80045b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d115      	bne.n	80045e4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80045b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00f      	beq.n	80045e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d009      	beq.n	80045e4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 82ac 	beq.w	8004b32 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	4798      	blx	r3
      }
      return;
 80045e2:	e2a6      	b.n	8004b32 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80045e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 8117 	beq.w	800481c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80045ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d106      	bne.n	8004608 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80045fe:	4b85      	ldr	r3, [pc, #532]	; (8004814 <HAL_UART_IRQHandler+0x298>)
 8004600:	4013      	ands	r3, r2
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 810a 	beq.w	800481c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d011      	beq.n	8004638 <HAL_UART_IRQHandler+0xbc>
 8004614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00b      	beq.n	8004638 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2201      	movs	r2, #1
 8004626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800462e:	f043 0201 	orr.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d011      	beq.n	8004668 <HAL_UART_IRQHandler+0xec>
 8004644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00b      	beq.n	8004668 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2202      	movs	r2, #2
 8004656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465e:	f043 0204 	orr.w	r2, r3, #4
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d011      	beq.n	8004698 <HAL_UART_IRQHandler+0x11c>
 8004674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00b      	beq.n	8004698 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2204      	movs	r2, #4
 8004686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800468e:	f043 0202 	orr.w	r2, r3, #2
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d017      	beq.n	80046d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046a8:	f003 0320 	and.w	r3, r3, #32
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d105      	bne.n	80046bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80046b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00b      	beq.n	80046d4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2208      	movs	r2, #8
 80046c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ca:	f043 0208 	orr.w	r2, r3, #8
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d012      	beq.n	8004706 <HAL_UART_IRQHandler+0x18a>
 80046e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00c      	beq.n	8004706 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046fc:	f043 0220 	orr.w	r2, r3, #32
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 8212 	beq.w	8004b36 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00d      	beq.n	800473a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800471e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004722:	f003 0320 	and.w	r3, r3, #32
 8004726:	2b00      	cmp	r3, #0
 8004728:	d007      	beq.n	800473a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004740:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474e:	2b40      	cmp	r3, #64	; 0x40
 8004750:	d005      	beq.n	800475e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004752:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004756:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800475a:	2b00      	cmp	r3, #0
 800475c:	d04f      	beq.n	80047fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 ff1c 	bl	800559c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476e:	2b40      	cmp	r3, #64	; 0x40
 8004770:	d141      	bne.n	80047f6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3308      	adds	r3, #8
 8004778:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004780:	e853 3f00 	ldrex	r3, [r3]
 8004784:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004788:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800478c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004790:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3308      	adds	r3, #8
 800479a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800479e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80047ae:	e841 2300 	strex	r3, r2, [r1]
 80047b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1d9      	bne.n	8004772 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d013      	beq.n	80047ee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ca:	4a13      	ldr	r2, [pc, #76]	; (8004818 <HAL_UART_IRQHandler+0x29c>)
 80047cc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fd fc32 	bl	800203c <HAL_DMA_Abort_IT>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d017      	beq.n	800480e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80047e8:	4610      	mov	r0, r2
 80047ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ec:	e00f      	b.n	800480e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f9d4 	bl	8004b9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f4:	e00b      	b.n	800480e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f9d0 	bl	8004b9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047fc:	e007      	b.n	800480e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f9cc 	bl	8004b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800480c:	e193      	b.n	8004b36 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800480e:	bf00      	nop
    return;
 8004810:	e191      	b.n	8004b36 <HAL_UART_IRQHandler+0x5ba>
 8004812:	bf00      	nop
 8004814:	04000120 	.word	0x04000120
 8004818:	080058fb 	.word	0x080058fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004820:	2b01      	cmp	r3, #1
 8004822:	f040 814c 	bne.w	8004abe <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800482a:	f003 0310 	and.w	r3, r3, #16
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8145 	beq.w	8004abe <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004838:	f003 0310 	and.w	r3, r3, #16
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 813e 	beq.w	8004abe <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2210      	movs	r2, #16
 8004848:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004854:	2b40      	cmp	r3, #64	; 0x40
 8004856:	f040 80b6 	bne.w	80049c6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004866:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 8165 	beq.w	8004b3a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004876:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800487a:	429a      	cmp	r2, r3
 800487c:	f080 815d 	bcs.w	8004b3a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004886:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004894:	f000 8086 	beq.w	80049a4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048a4:	e853 3f00 	ldrex	r3, [r3]
 80048a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80048ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80048da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1da      	bne.n	8004898 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3308      	adds	r3, #8
 80048e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048f4:	f023 0301 	bic.w	r3, r3, #1
 80048f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3308      	adds	r3, #8
 8004902:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004906:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800490a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800490e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004912:	e841 2300 	strex	r3, r2, [r1]
 8004916:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004918:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1e1      	bne.n	80048e2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3308      	adds	r3, #8
 8004924:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004928:	e853 3f00 	ldrex	r3, [r3]
 800492c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800492e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3308      	adds	r3, #8
 800493e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004942:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004944:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004946:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004948:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800494a:	e841 2300 	strex	r3, r2, [r1]
 800494e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1e3      	bne.n	800491e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2220      	movs	r2, #32
 800495a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800496c:	e853 3f00 	ldrex	r3, [r3]
 8004970:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004974:	f023 0310 	bic.w	r3, r3, #16
 8004978:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	461a      	mov	r2, r3
 8004982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004986:	65bb      	str	r3, [r7, #88]	; 0x58
 8004988:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800498c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800498e:	e841 2300 	strex	r3, r2, [r1]
 8004992:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1e4      	bne.n	8004964 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fd fadc 	bl	8001f5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	4619      	mov	r1, r3
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f8f6 	bl	8004bb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049c4:	e0b9      	b.n	8004b3a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 80ab 	beq.w	8004b3e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80049e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 80a6 	beq.w	8004b3e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a14:	647b      	str	r3, [r7, #68]	; 0x44
 8004a16:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a1c:	e841 2300 	strex	r3, r2, [r1]
 8004a20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e4      	bne.n	80049f2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	e853 3f00 	ldrex	r3, [r3]
 8004a36:	623b      	str	r3, [r7, #32]
   return(result);
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	f023 0301 	bic.w	r3, r3, #1
 8004a3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3308      	adds	r3, #8
 8004a48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a4c:	633a      	str	r2, [r7, #48]	; 0x30
 8004a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a54:	e841 2300 	strex	r3, r2, [r1]
 8004a58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1e3      	bne.n	8004a28 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	e853 3f00 	ldrex	r3, [r3]
 8004a80:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f023 0310 	bic.w	r3, r3, #16
 8004a88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	461a      	mov	r2, r3
 8004a92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	69b9      	ldr	r1, [r7, #24]
 8004a9c:	69fa      	ldr	r2, [r7, #28]
 8004a9e:	e841 2300 	strex	r3, r2, [r1]
 8004aa2:	617b      	str	r3, [r7, #20]
   return(result);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1e4      	bne.n	8004a74 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2202      	movs	r2, #2
 8004aae:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ab0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f87a 	bl	8004bb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004abc:	e03f      	b.n	8004b3e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00e      	beq.n	8004ae8 <HAL_UART_IRQHandler+0x56c>
 8004aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d008      	beq.n	8004ae8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ade:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f871 	bl	8004bc8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ae6:	e02d      	b.n	8004b44 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00e      	beq.n	8004b12 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d008      	beq.n	8004b12 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01c      	beq.n	8004b42 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	4798      	blx	r3
    }
    return;
 8004b10:	e017      	b.n	8004b42 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d012      	beq.n	8004b44 <HAL_UART_IRQHandler+0x5c8>
 8004b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00c      	beq.n	8004b44 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fefb 	bl	8005926 <UART_EndTransmit_IT>
    return;
 8004b30:	e008      	b.n	8004b44 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004b32:	bf00      	nop
 8004b34:	e006      	b.n	8004b44 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004b36:	bf00      	nop
 8004b38:	e004      	b.n	8004b44 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004b3a:	bf00      	nop
 8004b3c:	e002      	b.n	8004b44 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004b3e:	bf00      	nop
 8004b40:	e000      	b.n	8004b44 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004b42:	bf00      	nop
  }

}
 8004b44:	37e8      	adds	r7, #232	; 0xe8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop

08004b4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	4ba6      	ldr	r3, [pc, #664]	; (8004ea0 <UART_SetConfig+0x2c4>)
 8004c08:	4013      	ands	r3, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6812      	ldr	r2, [r2, #0]
 8004c0e:	6979      	ldr	r1, [r7, #20]
 8004c10:	430b      	orrs	r3, r1
 8004c12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a94      	ldr	r2, [pc, #592]	; (8004ea4 <UART_SetConfig+0x2c8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d120      	bne.n	8004c9a <UART_SetConfig+0xbe>
 8004c58:	4b93      	ldr	r3, [pc, #588]	; (8004ea8 <UART_SetConfig+0x2cc>)
 8004c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d816      	bhi.n	8004c94 <UART_SetConfig+0xb8>
 8004c66:	a201      	add	r2, pc, #4	; (adr r2, 8004c6c <UART_SetConfig+0x90>)
 8004c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6c:	08004c7d 	.word	0x08004c7d
 8004c70:	08004c89 	.word	0x08004c89
 8004c74:	08004c83 	.word	0x08004c83
 8004c78:	08004c8f 	.word	0x08004c8f
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	77fb      	strb	r3, [r7, #31]
 8004c80:	e150      	b.n	8004f24 <UART_SetConfig+0x348>
 8004c82:	2302      	movs	r3, #2
 8004c84:	77fb      	strb	r3, [r7, #31]
 8004c86:	e14d      	b.n	8004f24 <UART_SetConfig+0x348>
 8004c88:	2304      	movs	r3, #4
 8004c8a:	77fb      	strb	r3, [r7, #31]
 8004c8c:	e14a      	b.n	8004f24 <UART_SetConfig+0x348>
 8004c8e:	2308      	movs	r3, #8
 8004c90:	77fb      	strb	r3, [r7, #31]
 8004c92:	e147      	b.n	8004f24 <UART_SetConfig+0x348>
 8004c94:	2310      	movs	r3, #16
 8004c96:	77fb      	strb	r3, [r7, #31]
 8004c98:	e144      	b.n	8004f24 <UART_SetConfig+0x348>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a83      	ldr	r2, [pc, #524]	; (8004eac <UART_SetConfig+0x2d0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d132      	bne.n	8004d0a <UART_SetConfig+0x12e>
 8004ca4:	4b80      	ldr	r3, [pc, #512]	; (8004ea8 <UART_SetConfig+0x2cc>)
 8004ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004caa:	f003 030c 	and.w	r3, r3, #12
 8004cae:	2b0c      	cmp	r3, #12
 8004cb0:	d828      	bhi.n	8004d04 <UART_SetConfig+0x128>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <UART_SetConfig+0xdc>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004ced 	.word	0x08004ced
 8004cbc:	08004d05 	.word	0x08004d05
 8004cc0:	08004d05 	.word	0x08004d05
 8004cc4:	08004d05 	.word	0x08004d05
 8004cc8:	08004cf9 	.word	0x08004cf9
 8004ccc:	08004d05 	.word	0x08004d05
 8004cd0:	08004d05 	.word	0x08004d05
 8004cd4:	08004d05 	.word	0x08004d05
 8004cd8:	08004cf3 	.word	0x08004cf3
 8004cdc:	08004d05 	.word	0x08004d05
 8004ce0:	08004d05 	.word	0x08004d05
 8004ce4:	08004d05 	.word	0x08004d05
 8004ce8:	08004cff 	.word	0x08004cff
 8004cec:	2300      	movs	r3, #0
 8004cee:	77fb      	strb	r3, [r7, #31]
 8004cf0:	e118      	b.n	8004f24 <UART_SetConfig+0x348>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	77fb      	strb	r3, [r7, #31]
 8004cf6:	e115      	b.n	8004f24 <UART_SetConfig+0x348>
 8004cf8:	2304      	movs	r3, #4
 8004cfa:	77fb      	strb	r3, [r7, #31]
 8004cfc:	e112      	b.n	8004f24 <UART_SetConfig+0x348>
 8004cfe:	2308      	movs	r3, #8
 8004d00:	77fb      	strb	r3, [r7, #31]
 8004d02:	e10f      	b.n	8004f24 <UART_SetConfig+0x348>
 8004d04:	2310      	movs	r3, #16
 8004d06:	77fb      	strb	r3, [r7, #31]
 8004d08:	e10c      	b.n	8004f24 <UART_SetConfig+0x348>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a68      	ldr	r2, [pc, #416]	; (8004eb0 <UART_SetConfig+0x2d4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d120      	bne.n	8004d56 <UART_SetConfig+0x17a>
 8004d14:	4b64      	ldr	r3, [pc, #400]	; (8004ea8 <UART_SetConfig+0x2cc>)
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d1e:	2b30      	cmp	r3, #48	; 0x30
 8004d20:	d013      	beq.n	8004d4a <UART_SetConfig+0x16e>
 8004d22:	2b30      	cmp	r3, #48	; 0x30
 8004d24:	d814      	bhi.n	8004d50 <UART_SetConfig+0x174>
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	d009      	beq.n	8004d3e <UART_SetConfig+0x162>
 8004d2a:	2b20      	cmp	r3, #32
 8004d2c:	d810      	bhi.n	8004d50 <UART_SetConfig+0x174>
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <UART_SetConfig+0x15c>
 8004d32:	2b10      	cmp	r3, #16
 8004d34:	d006      	beq.n	8004d44 <UART_SetConfig+0x168>
 8004d36:	e00b      	b.n	8004d50 <UART_SetConfig+0x174>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	77fb      	strb	r3, [r7, #31]
 8004d3c:	e0f2      	b.n	8004f24 <UART_SetConfig+0x348>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	77fb      	strb	r3, [r7, #31]
 8004d42:	e0ef      	b.n	8004f24 <UART_SetConfig+0x348>
 8004d44:	2304      	movs	r3, #4
 8004d46:	77fb      	strb	r3, [r7, #31]
 8004d48:	e0ec      	b.n	8004f24 <UART_SetConfig+0x348>
 8004d4a:	2308      	movs	r3, #8
 8004d4c:	77fb      	strb	r3, [r7, #31]
 8004d4e:	e0e9      	b.n	8004f24 <UART_SetConfig+0x348>
 8004d50:	2310      	movs	r3, #16
 8004d52:	77fb      	strb	r3, [r7, #31]
 8004d54:	e0e6      	b.n	8004f24 <UART_SetConfig+0x348>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a56      	ldr	r2, [pc, #344]	; (8004eb4 <UART_SetConfig+0x2d8>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d120      	bne.n	8004da2 <UART_SetConfig+0x1c6>
 8004d60:	4b51      	ldr	r3, [pc, #324]	; (8004ea8 <UART_SetConfig+0x2cc>)
 8004d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d6a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d6c:	d013      	beq.n	8004d96 <UART_SetConfig+0x1ba>
 8004d6e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d70:	d814      	bhi.n	8004d9c <UART_SetConfig+0x1c0>
 8004d72:	2b80      	cmp	r3, #128	; 0x80
 8004d74:	d009      	beq.n	8004d8a <UART_SetConfig+0x1ae>
 8004d76:	2b80      	cmp	r3, #128	; 0x80
 8004d78:	d810      	bhi.n	8004d9c <UART_SetConfig+0x1c0>
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <UART_SetConfig+0x1a8>
 8004d7e:	2b40      	cmp	r3, #64	; 0x40
 8004d80:	d006      	beq.n	8004d90 <UART_SetConfig+0x1b4>
 8004d82:	e00b      	b.n	8004d9c <UART_SetConfig+0x1c0>
 8004d84:	2300      	movs	r3, #0
 8004d86:	77fb      	strb	r3, [r7, #31]
 8004d88:	e0cc      	b.n	8004f24 <UART_SetConfig+0x348>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	77fb      	strb	r3, [r7, #31]
 8004d8e:	e0c9      	b.n	8004f24 <UART_SetConfig+0x348>
 8004d90:	2304      	movs	r3, #4
 8004d92:	77fb      	strb	r3, [r7, #31]
 8004d94:	e0c6      	b.n	8004f24 <UART_SetConfig+0x348>
 8004d96:	2308      	movs	r3, #8
 8004d98:	77fb      	strb	r3, [r7, #31]
 8004d9a:	e0c3      	b.n	8004f24 <UART_SetConfig+0x348>
 8004d9c:	2310      	movs	r3, #16
 8004d9e:	77fb      	strb	r3, [r7, #31]
 8004da0:	e0c0      	b.n	8004f24 <UART_SetConfig+0x348>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a44      	ldr	r2, [pc, #272]	; (8004eb8 <UART_SetConfig+0x2dc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d125      	bne.n	8004df8 <UART_SetConfig+0x21c>
 8004dac:	4b3e      	ldr	r3, [pc, #248]	; (8004ea8 <UART_SetConfig+0x2cc>)
 8004dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dba:	d017      	beq.n	8004dec <UART_SetConfig+0x210>
 8004dbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dc0:	d817      	bhi.n	8004df2 <UART_SetConfig+0x216>
 8004dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc6:	d00b      	beq.n	8004de0 <UART_SetConfig+0x204>
 8004dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dcc:	d811      	bhi.n	8004df2 <UART_SetConfig+0x216>
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <UART_SetConfig+0x1fe>
 8004dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd6:	d006      	beq.n	8004de6 <UART_SetConfig+0x20a>
 8004dd8:	e00b      	b.n	8004df2 <UART_SetConfig+0x216>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	77fb      	strb	r3, [r7, #31]
 8004dde:	e0a1      	b.n	8004f24 <UART_SetConfig+0x348>
 8004de0:	2302      	movs	r3, #2
 8004de2:	77fb      	strb	r3, [r7, #31]
 8004de4:	e09e      	b.n	8004f24 <UART_SetConfig+0x348>
 8004de6:	2304      	movs	r3, #4
 8004de8:	77fb      	strb	r3, [r7, #31]
 8004dea:	e09b      	b.n	8004f24 <UART_SetConfig+0x348>
 8004dec:	2308      	movs	r3, #8
 8004dee:	77fb      	strb	r3, [r7, #31]
 8004df0:	e098      	b.n	8004f24 <UART_SetConfig+0x348>
 8004df2:	2310      	movs	r3, #16
 8004df4:	77fb      	strb	r3, [r7, #31]
 8004df6:	e095      	b.n	8004f24 <UART_SetConfig+0x348>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a2f      	ldr	r2, [pc, #188]	; (8004ebc <UART_SetConfig+0x2e0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d125      	bne.n	8004e4e <UART_SetConfig+0x272>
 8004e02:	4b29      	ldr	r3, [pc, #164]	; (8004ea8 <UART_SetConfig+0x2cc>)
 8004e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e10:	d017      	beq.n	8004e42 <UART_SetConfig+0x266>
 8004e12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e16:	d817      	bhi.n	8004e48 <UART_SetConfig+0x26c>
 8004e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e1c:	d00b      	beq.n	8004e36 <UART_SetConfig+0x25a>
 8004e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e22:	d811      	bhi.n	8004e48 <UART_SetConfig+0x26c>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <UART_SetConfig+0x254>
 8004e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e2c:	d006      	beq.n	8004e3c <UART_SetConfig+0x260>
 8004e2e:	e00b      	b.n	8004e48 <UART_SetConfig+0x26c>
 8004e30:	2301      	movs	r3, #1
 8004e32:	77fb      	strb	r3, [r7, #31]
 8004e34:	e076      	b.n	8004f24 <UART_SetConfig+0x348>
 8004e36:	2302      	movs	r3, #2
 8004e38:	77fb      	strb	r3, [r7, #31]
 8004e3a:	e073      	b.n	8004f24 <UART_SetConfig+0x348>
 8004e3c:	2304      	movs	r3, #4
 8004e3e:	77fb      	strb	r3, [r7, #31]
 8004e40:	e070      	b.n	8004f24 <UART_SetConfig+0x348>
 8004e42:	2308      	movs	r3, #8
 8004e44:	77fb      	strb	r3, [r7, #31]
 8004e46:	e06d      	b.n	8004f24 <UART_SetConfig+0x348>
 8004e48:	2310      	movs	r3, #16
 8004e4a:	77fb      	strb	r3, [r7, #31]
 8004e4c:	e06a      	b.n	8004f24 <UART_SetConfig+0x348>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a1b      	ldr	r2, [pc, #108]	; (8004ec0 <UART_SetConfig+0x2e4>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d138      	bne.n	8004eca <UART_SetConfig+0x2ee>
 8004e58:	4b13      	ldr	r3, [pc, #76]	; (8004ea8 <UART_SetConfig+0x2cc>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004e62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e66:	d017      	beq.n	8004e98 <UART_SetConfig+0x2bc>
 8004e68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e6c:	d82a      	bhi.n	8004ec4 <UART_SetConfig+0x2e8>
 8004e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e72:	d00b      	beq.n	8004e8c <UART_SetConfig+0x2b0>
 8004e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e78:	d824      	bhi.n	8004ec4 <UART_SetConfig+0x2e8>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <UART_SetConfig+0x2aa>
 8004e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e82:	d006      	beq.n	8004e92 <UART_SetConfig+0x2b6>
 8004e84:	e01e      	b.n	8004ec4 <UART_SetConfig+0x2e8>
 8004e86:	2300      	movs	r3, #0
 8004e88:	77fb      	strb	r3, [r7, #31]
 8004e8a:	e04b      	b.n	8004f24 <UART_SetConfig+0x348>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	77fb      	strb	r3, [r7, #31]
 8004e90:	e048      	b.n	8004f24 <UART_SetConfig+0x348>
 8004e92:	2304      	movs	r3, #4
 8004e94:	77fb      	strb	r3, [r7, #31]
 8004e96:	e045      	b.n	8004f24 <UART_SetConfig+0x348>
 8004e98:	2308      	movs	r3, #8
 8004e9a:	77fb      	strb	r3, [r7, #31]
 8004e9c:	e042      	b.n	8004f24 <UART_SetConfig+0x348>
 8004e9e:	bf00      	nop
 8004ea0:	efff69f3 	.word	0xefff69f3
 8004ea4:	40011000 	.word	0x40011000
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	40004400 	.word	0x40004400
 8004eb0:	40004800 	.word	0x40004800
 8004eb4:	40004c00 	.word	0x40004c00
 8004eb8:	40005000 	.word	0x40005000
 8004ebc:	40011400 	.word	0x40011400
 8004ec0:	40007800 	.word	0x40007800
 8004ec4:	2310      	movs	r3, #16
 8004ec6:	77fb      	strb	r3, [r7, #31]
 8004ec8:	e02c      	b.n	8004f24 <UART_SetConfig+0x348>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a72      	ldr	r2, [pc, #456]	; (8005098 <UART_SetConfig+0x4bc>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d125      	bne.n	8004f20 <UART_SetConfig+0x344>
 8004ed4:	4b71      	ldr	r3, [pc, #452]	; (800509c <UART_SetConfig+0x4c0>)
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ede:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ee2:	d017      	beq.n	8004f14 <UART_SetConfig+0x338>
 8004ee4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ee8:	d817      	bhi.n	8004f1a <UART_SetConfig+0x33e>
 8004eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eee:	d00b      	beq.n	8004f08 <UART_SetConfig+0x32c>
 8004ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ef4:	d811      	bhi.n	8004f1a <UART_SetConfig+0x33e>
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <UART_SetConfig+0x326>
 8004efa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004efe:	d006      	beq.n	8004f0e <UART_SetConfig+0x332>
 8004f00:	e00b      	b.n	8004f1a <UART_SetConfig+0x33e>
 8004f02:	2300      	movs	r3, #0
 8004f04:	77fb      	strb	r3, [r7, #31]
 8004f06:	e00d      	b.n	8004f24 <UART_SetConfig+0x348>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	77fb      	strb	r3, [r7, #31]
 8004f0c:	e00a      	b.n	8004f24 <UART_SetConfig+0x348>
 8004f0e:	2304      	movs	r3, #4
 8004f10:	77fb      	strb	r3, [r7, #31]
 8004f12:	e007      	b.n	8004f24 <UART_SetConfig+0x348>
 8004f14:	2308      	movs	r3, #8
 8004f16:	77fb      	strb	r3, [r7, #31]
 8004f18:	e004      	b.n	8004f24 <UART_SetConfig+0x348>
 8004f1a:	2310      	movs	r3, #16
 8004f1c:	77fb      	strb	r3, [r7, #31]
 8004f1e:	e001      	b.n	8004f24 <UART_SetConfig+0x348>
 8004f20:	2310      	movs	r3, #16
 8004f22:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f2c:	d15b      	bne.n	8004fe6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004f2e:	7ffb      	ldrb	r3, [r7, #31]
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d828      	bhi.n	8004f86 <UART_SetConfig+0x3aa>
 8004f34:	a201      	add	r2, pc, #4	; (adr r2, 8004f3c <UART_SetConfig+0x360>)
 8004f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3a:	bf00      	nop
 8004f3c:	08004f61 	.word	0x08004f61
 8004f40:	08004f69 	.word	0x08004f69
 8004f44:	08004f71 	.word	0x08004f71
 8004f48:	08004f87 	.word	0x08004f87
 8004f4c:	08004f77 	.word	0x08004f77
 8004f50:	08004f87 	.word	0x08004f87
 8004f54:	08004f87 	.word	0x08004f87
 8004f58:	08004f87 	.word	0x08004f87
 8004f5c:	08004f7f 	.word	0x08004f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f60:	f7fe f986 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 8004f64:	61b8      	str	r0, [r7, #24]
        break;
 8004f66:	e013      	b.n	8004f90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f68:	f7fe f996 	bl	8003298 <HAL_RCC_GetPCLK2Freq>
 8004f6c:	61b8      	str	r0, [r7, #24]
        break;
 8004f6e:	e00f      	b.n	8004f90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f70:	4b4b      	ldr	r3, [pc, #300]	; (80050a0 <UART_SetConfig+0x4c4>)
 8004f72:	61bb      	str	r3, [r7, #24]
        break;
 8004f74:	e00c      	b.n	8004f90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f76:	f7fe f869 	bl	800304c <HAL_RCC_GetSysClockFreq>
 8004f7a:	61b8      	str	r0, [r7, #24]
        break;
 8004f7c:	e008      	b.n	8004f90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f82:	61bb      	str	r3, [r7, #24]
        break;
 8004f84:	e004      	b.n	8004f90 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	77bb      	strb	r3, [r7, #30]
        break;
 8004f8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d074      	beq.n	8005080 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	005a      	lsls	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	085b      	lsrs	r3, r3, #1
 8004fa0:	441a      	add	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004faa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	2b0f      	cmp	r3, #15
 8004fb0:	d916      	bls.n	8004fe0 <UART_SetConfig+0x404>
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb8:	d212      	bcs.n	8004fe0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	f023 030f 	bic.w	r3, r3, #15
 8004fc2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	085b      	lsrs	r3, r3, #1
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	89fb      	ldrh	r3, [r7, #14]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	89fa      	ldrh	r2, [r7, #14]
 8004fdc:	60da      	str	r2, [r3, #12]
 8004fde:	e04f      	b.n	8005080 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	77bb      	strb	r3, [r7, #30]
 8004fe4:	e04c      	b.n	8005080 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fe6:	7ffb      	ldrb	r3, [r7, #31]
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d828      	bhi.n	800503e <UART_SetConfig+0x462>
 8004fec:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <UART_SetConfig+0x418>)
 8004fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff2:	bf00      	nop
 8004ff4:	08005019 	.word	0x08005019
 8004ff8:	08005021 	.word	0x08005021
 8004ffc:	08005029 	.word	0x08005029
 8005000:	0800503f 	.word	0x0800503f
 8005004:	0800502f 	.word	0x0800502f
 8005008:	0800503f 	.word	0x0800503f
 800500c:	0800503f 	.word	0x0800503f
 8005010:	0800503f 	.word	0x0800503f
 8005014:	08005037 	.word	0x08005037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005018:	f7fe f92a 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 800501c:	61b8      	str	r0, [r7, #24]
        break;
 800501e:	e013      	b.n	8005048 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005020:	f7fe f93a 	bl	8003298 <HAL_RCC_GetPCLK2Freq>
 8005024:	61b8      	str	r0, [r7, #24]
        break;
 8005026:	e00f      	b.n	8005048 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005028:	4b1d      	ldr	r3, [pc, #116]	; (80050a0 <UART_SetConfig+0x4c4>)
 800502a:	61bb      	str	r3, [r7, #24]
        break;
 800502c:	e00c      	b.n	8005048 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800502e:	f7fe f80d 	bl	800304c <HAL_RCC_GetSysClockFreq>
 8005032:	61b8      	str	r0, [r7, #24]
        break;
 8005034:	e008      	b.n	8005048 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800503a:	61bb      	str	r3, [r7, #24]
        break;
 800503c:	e004      	b.n	8005048 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	77bb      	strb	r3, [r7, #30]
        break;
 8005046:	bf00      	nop
    }

    if (pclk != 0U)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d018      	beq.n	8005080 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	085a      	lsrs	r2, r3, #1
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	441a      	add	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005060:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	2b0f      	cmp	r3, #15
 8005066:	d909      	bls.n	800507c <UART_SetConfig+0x4a0>
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800506e:	d205      	bcs.n	800507c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	b29a      	uxth	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	60da      	str	r2, [r3, #12]
 800507a:	e001      	b.n	8005080 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800508c:	7fbb      	ldrb	r3, [r7, #30]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3720      	adds	r7, #32
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40007c00 	.word	0x40007c00
 800509c:	40023800 	.word	0x40023800
 80050a0:	00f42400 	.word	0x00f42400

080050a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00a      	beq.n	80050ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00a      	beq.n	8005112 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	f003 0310 	and.w	r3, r3, #16
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00a      	beq.n	8005156 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	f003 0320 	and.w	r3, r3, #32
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005180:	2b00      	cmp	r3, #0
 8005182:	d01a      	beq.n	80051ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051a2:	d10a      	bne.n	80051ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	605a      	str	r2, [r3, #4]
  }
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af02      	add	r7, sp, #8
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051f8:	f7fc fcb4 	bl	8001b64 <HAL_GetTick>
 80051fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0308 	and.w	r3, r3, #8
 8005208:	2b08      	cmp	r3, #8
 800520a:	d10e      	bne.n	800522a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800520c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f831 	bl	8005282 <UART_WaitOnFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e027      	b.n	800527a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b04      	cmp	r3, #4
 8005236:	d10e      	bne.n	8005256 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005238:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f81b 	bl	8005282 <UART_WaitOnFlagUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e011      	b.n	800527a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2220      	movs	r2, #32
 800525a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2220      	movs	r2, #32
 8005260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b09c      	sub	sp, #112	; 0x70
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	603b      	str	r3, [r7, #0]
 800528e:	4613      	mov	r3, r2
 8005290:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005292:	e0a7      	b.n	80053e4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800529a:	f000 80a3 	beq.w	80053e4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800529e:	f7fc fc61 	bl	8001b64 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d302      	bcc.n	80052b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80052ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d13f      	bne.n	8005334 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052bc:	e853 3f00 	ldrex	r3, [r3]
 80052c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052c8:	667b      	str	r3, [r7, #100]	; 0x64
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	461a      	mov	r2, r3
 80052d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052da:	e841 2300 	strex	r3, r2, [r1]
 80052de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1e6      	bne.n	80052b4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3308      	adds	r3, #8
 80052ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f8:	f023 0301 	bic.w	r3, r3, #1
 80052fc:	663b      	str	r3, [r7, #96]	; 0x60
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3308      	adds	r3, #8
 8005304:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005306:	64ba      	str	r2, [r7, #72]	; 0x48
 8005308:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800530c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800530e:	e841 2300 	strex	r3, r2, [r1]
 8005312:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1e5      	bne.n	80052e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2220      	movs	r2, #32
 8005324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e068      	b.n	8005406 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d050      	beq.n	80053e4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800534c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005350:	d148      	bne.n	80053e4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800535a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005364:	e853 3f00 	ldrex	r3, [r3]
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005370:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537a:	637b      	str	r3, [r7, #52]	; 0x34
 800537c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005382:	e841 2300 	strex	r3, r2, [r1]
 8005386:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1e6      	bne.n	800535c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3308      	adds	r3, #8
 8005394:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	613b      	str	r3, [r7, #16]
   return(result);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f023 0301 	bic.w	r3, r3, #1
 80053a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3308      	adds	r3, #8
 80053ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053ae:	623a      	str	r2, [r7, #32]
 80053b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	69f9      	ldr	r1, [r7, #28]
 80053b4:	6a3a      	ldr	r2, [r7, #32]
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1e5      	bne.n	800538e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e010      	b.n	8005406 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69da      	ldr	r2, [r3, #28]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	4013      	ands	r3, r2
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	bf0c      	ite	eq
 80053f4:	2301      	moveq	r3, #1
 80053f6:	2300      	movne	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	461a      	mov	r2, r3
 80053fc:	79fb      	ldrb	r3, [r7, #7]
 80053fe:	429a      	cmp	r2, r3
 8005400:	f43f af48 	beq.w	8005294 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3770      	adds	r7, #112	; 0x70
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
	...

08005410 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b096      	sub	sp, #88	; 0x58
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	4613      	mov	r3, r2
 800541c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	88fa      	ldrh	r2, [r7, #6]
 8005428:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2222      	movs	r2, #34	; 0x22
 8005438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005440:	2b00      	cmp	r3, #0
 8005442:	d028      	beq.n	8005496 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005448:	4a3e      	ldr	r2, [pc, #248]	; (8005544 <UART_Start_Receive_DMA+0x134>)
 800544a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005450:	4a3d      	ldr	r2, [pc, #244]	; (8005548 <UART_Start_Receive_DMA+0x138>)
 8005452:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005458:	4a3c      	ldr	r2, [pc, #240]	; (800554c <UART_Start_Receive_DMA+0x13c>)
 800545a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005460:	2200      	movs	r2, #0
 8005462:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3324      	adds	r3, #36	; 0x24
 800546e:	4619      	mov	r1, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005474:	461a      	mov	r2, r3
 8005476:	88fb      	ldrh	r3, [r7, #6]
 8005478:	f7fc fd10 	bl	8001e9c <HAL_DMA_Start_IT>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d009      	beq.n	8005496 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2210      	movs	r2, #16
 8005486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2220      	movs	r2, #32
 800548e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e051      	b.n	800553a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d018      	beq.n	80054d0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a6:	e853 3f00 	ldrex	r3, [r3]
 80054aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b2:	657b      	str	r3, [r7, #84]	; 0x54
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	461a      	mov	r2, r3
 80054ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80054be:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054c4:	e841 2300 	strex	r3, r2, [r1]
 80054c8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1e6      	bne.n	800549e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3308      	adds	r3, #8
 80054d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054da:	e853 3f00 	ldrex	r3, [r3]
 80054de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	f043 0301 	orr.w	r3, r3, #1
 80054e6:	653b      	str	r3, [r7, #80]	; 0x50
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3308      	adds	r3, #8
 80054ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054f0:	637a      	str	r2, [r7, #52]	; 0x34
 80054f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054f8:	e841 2300 	strex	r3, r2, [r1]
 80054fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e5      	bne.n	80054d0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3308      	adds	r3, #8
 800550a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	e853 3f00 	ldrex	r3, [r3]
 8005512:	613b      	str	r3, [r7, #16]
   return(result);
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800551a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	3308      	adds	r3, #8
 8005522:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005524:	623a      	str	r2, [r7, #32]
 8005526:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	69f9      	ldr	r1, [r7, #28]
 800552a:	6a3a      	ldr	r2, [r7, #32]
 800552c:	e841 2300 	strex	r3, r2, [r1]
 8005530:	61bb      	str	r3, [r7, #24]
   return(result);
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e5      	bne.n	8005504 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3758      	adds	r7, #88	; 0x58
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	08005717 	.word	0x08005717
 8005548:	0800583f 	.word	0x0800583f
 800554c:	0800587d 	.word	0x0800587d

08005550 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005550:	b480      	push	{r7}
 8005552:	b089      	sub	sp, #36	; 0x24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	e853 3f00 	ldrex	r3, [r3]
 8005564:	60bb      	str	r3, [r7, #8]
   return(result);
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800556c:	61fb      	str	r3, [r7, #28]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	61bb      	str	r3, [r7, #24]
 8005578:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557a:	6979      	ldr	r1, [r7, #20]
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	e841 2300 	strex	r3, r2, [r1]
 8005582:	613b      	str	r3, [r7, #16]
   return(result);
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1e6      	bne.n	8005558 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2220      	movs	r2, #32
 800558e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8005590:	bf00      	nop
 8005592:	3724      	adds	r7, #36	; 0x24
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800559c:	b480      	push	{r7}
 800559e:	b095      	sub	sp, #84	; 0x54
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c2:	643b      	str	r3, [r7, #64]	; 0x40
 80055c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055ca:	e841 2300 	strex	r3, r2, [r1]
 80055ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1e6      	bne.n	80055a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3308      	adds	r3, #8
 80055dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	f023 0301 	bic.w	r3, r3, #1
 80055ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3308      	adds	r3, #8
 80055f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1e5      	bne.n	80055d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800560e:	2b01      	cmp	r3, #1
 8005610:	d118      	bne.n	8005644 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f023 0310 	bic.w	r3, r3, #16
 8005626:	647b      	str	r3, [r7, #68]	; 0x44
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	461a      	mov	r2, r3
 800562e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005630:	61bb      	str	r3, [r7, #24]
 8005632:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	6979      	ldr	r1, [r7, #20]
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	e841 2300 	strex	r3, r2, [r1]
 800563c:	613b      	str	r3, [r7, #16]
   return(result);
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e6      	bne.n	8005612 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2220      	movs	r2, #32
 8005648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005658:	bf00      	nop
 800565a:	3754      	adds	r7, #84	; 0x54
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b090      	sub	sp, #64	; 0x40
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005670:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800567a:	d037      	beq.n	80056ec <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800567c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800567e:	2200      	movs	r2, #0
 8005680:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3308      	adds	r3, #8
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	e853 3f00 	ldrex	r3, [r3]
 8005692:	623b      	str	r3, [r7, #32]
   return(result);
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800569a:	63bb      	str	r3, [r7, #56]	; 0x38
 800569c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3308      	adds	r3, #8
 80056a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056a4:	633a      	str	r2, [r7, #48]	; 0x30
 80056a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ac:	e841 2300 	strex	r3, r2, [r1]
 80056b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1e5      	bne.n	8005684 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056cc:	637b      	str	r3, [r7, #52]	; 0x34
 80056ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d6:	61fb      	str	r3, [r7, #28]
 80056d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056da:	69b9      	ldr	r1, [r7, #24]
 80056dc:	69fa      	ldr	r2, [r7, #28]
 80056de:	e841 2300 	strex	r3, r2, [r1]
 80056e2:	617b      	str	r3, [r7, #20]
   return(result);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1e6      	bne.n	80056b8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056ea:	e002      	b.n	80056f2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80056ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80056ee:	f7ff fa2d 	bl	8004b4c <HAL_UART_TxCpltCallback>
}
 80056f2:	bf00      	nop
 80056f4:	3740      	adds	r7, #64	; 0x40
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b084      	sub	sp, #16
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f7ff fa29 	bl	8004b60 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800570e:	bf00      	nop
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b09c      	sub	sp, #112	; 0x70
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800572c:	d071      	beq.n	8005812 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800572e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005730:	2200      	movs	r2, #0
 8005732:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800573e:	e853 3f00 	ldrex	r3, [r3]
 8005742:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005746:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800574a:	66bb      	str	r3, [r7, #104]	; 0x68
 800574c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	461a      	mov	r2, r3
 8005752:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005754:	65bb      	str	r3, [r7, #88]	; 0x58
 8005756:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005758:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800575a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800575c:	e841 2300 	strex	r3, r2, [r1]
 8005760:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1e6      	bne.n	8005736 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3308      	adds	r3, #8
 800576e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005772:	e853 3f00 	ldrex	r3, [r3]
 8005776:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577a:	f023 0301 	bic.w	r3, r3, #1
 800577e:	667b      	str	r3, [r7, #100]	; 0x64
 8005780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3308      	adds	r3, #8
 8005786:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005788:	647a      	str	r2, [r7, #68]	; 0x44
 800578a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800578e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005790:	e841 2300 	strex	r3, r2, [r1]
 8005794:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1e5      	bne.n	8005768 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800579c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3308      	adds	r3, #8
 80057a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	e853 3f00 	ldrex	r3, [r3]
 80057aa:	623b      	str	r3, [r7, #32]
   return(result);
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057b2:	663b      	str	r3, [r7, #96]	; 0x60
 80057b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3308      	adds	r3, #8
 80057ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057bc:	633a      	str	r2, [r7, #48]	; 0x30
 80057be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c4:	e841 2300 	strex	r3, r2, [r1]
 80057c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1e5      	bne.n	800579c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d2:	2220      	movs	r2, #32
 80057d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d118      	bne.n	8005812 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f023 0310 	bic.w	r3, r3, #16
 80057f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057fe:	61fb      	str	r3, [r7, #28]
 8005800:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005802:	69b9      	ldr	r1, [r7, #24]
 8005804:	69fa      	ldr	r2, [r7, #28]
 8005806:	e841 2300 	strex	r3, r2, [r1]
 800580a:	617b      	str	r3, [r7, #20]
   return(result);
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1e6      	bne.n	80057e0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005814:	2200      	movs	r2, #0
 8005816:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800581a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800581c:	2b01      	cmp	r3, #1
 800581e:	d107      	bne.n	8005830 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005822:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005826:	4619      	mov	r1, r3
 8005828:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800582a:	f7ff f9c1 	bl	8004bb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800582e:	e002      	b.n	8005836 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8005830:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005832:	f7ff f99f 	bl	8004b74 <HAL_UART_RxCpltCallback>
}
 8005836:	bf00      	nop
 8005838:	3770      	adds	r7, #112	; 0x70
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2201      	movs	r2, #1
 8005850:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005856:	2b01      	cmp	r3, #1
 8005858:	d109      	bne.n	800586e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005860:	085b      	lsrs	r3, r3, #1
 8005862:	b29b      	uxth	r3, r3
 8005864:	4619      	mov	r1, r3
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f7ff f9a2 	bl	8004bb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800586c:	e002      	b.n	8005874 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f7ff f98a 	bl	8004b88 <HAL_UART_RxHalfCpltCallback>
}
 8005874:	bf00      	nop
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005888:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800588e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005896:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a2:	2b80      	cmp	r3, #128	; 0x80
 80058a4:	d109      	bne.n	80058ba <UART_DMAError+0x3e>
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	2b21      	cmp	r3, #33	; 0x21
 80058aa:	d106      	bne.n	80058ba <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80058b4:	6978      	ldr	r0, [r7, #20]
 80058b6:	f7ff fe4b 	bl	8005550 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c4:	2b40      	cmp	r3, #64	; 0x40
 80058c6:	d109      	bne.n	80058dc <UART_DMAError+0x60>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b22      	cmp	r3, #34	; 0x22
 80058cc:	d106      	bne.n	80058dc <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80058d6:	6978      	ldr	r0, [r7, #20]
 80058d8:	f7ff fe60 	bl	800559c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e2:	f043 0210 	orr.w	r2, r3, #16
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058ec:	6978      	ldr	r0, [r7, #20]
 80058ee:	f7ff f955 	bl	8004b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058f2:	bf00      	nop
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f7ff f93f 	bl	8004b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800591e:	bf00      	nop
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b088      	sub	sp, #32
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	60bb      	str	r3, [r7, #8]
   return(result);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005942:	61fb      	str	r3, [r7, #28]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	461a      	mov	r2, r3
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	61bb      	str	r3, [r7, #24]
 800594e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6979      	ldr	r1, [r7, #20]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	e841 2300 	strex	r3, r2, [r1]
 8005958:	613b      	str	r3, [r7, #16]
   return(result);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e6      	bne.n	800592e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7ff f8ed 	bl	8004b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005972:	bf00      	nop
 8005974:	3720      	adds	r7, #32
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800597a:	b480      	push	{r7}
 800597c:	b085      	sub	sp, #20
 800597e:	af00      	add	r7, sp, #0
 8005980:	4603      	mov	r3, r0
 8005982:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005984:	2300      	movs	r3, #0
 8005986:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005988:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800598c:	2b84      	cmp	r3, #132	; 0x84
 800598e:	d005      	beq.n	800599c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005990:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	3303      	adds	r3, #3
 800599a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800599c:	68fb      	ldr	r3, [r7, #12]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80059ae:	f000 faff 	bl	8005fb0 <vTaskStartScheduler>
  
  return osOK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80059b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ba:	b089      	sub	sp, #36	; 0x24
 80059bc:	af04      	add	r7, sp, #16
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d020      	beq.n	8005a0c <osThreadCreate+0x54>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d01c      	beq.n	8005a0c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685c      	ldr	r4, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691e      	ldr	r6, [r3, #16]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7ff ffc8 	bl	800597a <makeFreeRtosPriority>
 80059ea:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059f4:	9202      	str	r2, [sp, #8]
 80059f6:	9301      	str	r3, [sp, #4]
 80059f8:	9100      	str	r1, [sp, #0]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	4632      	mov	r2, r6
 80059fe:	4629      	mov	r1, r5
 8005a00:	4620      	mov	r0, r4
 8005a02:	f000 f8ed 	bl	8005be0 <xTaskCreateStatic>
 8005a06:	4603      	mov	r3, r0
 8005a08:	60fb      	str	r3, [r7, #12]
 8005a0a:	e01c      	b.n	8005a46 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685c      	ldr	r4, [r3, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a18:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff ffaa 	bl	800597a <makeFreeRtosPriority>
 8005a26:	4602      	mov	r2, r0
 8005a28:	f107 030c 	add.w	r3, r7, #12
 8005a2c:	9301      	str	r3, [sp, #4]
 8005a2e:	9200      	str	r2, [sp, #0]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	4632      	mov	r2, r6
 8005a34:	4629      	mov	r1, r5
 8005a36:	4620      	mov	r0, r4
 8005a38:	f000 f935 	bl	8005ca6 <xTaskCreate>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d001      	beq.n	8005a46 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	e000      	b.n	8005a48 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005a46:	68fb      	ldr	r3, [r7, #12]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a50 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <osDelay+0x16>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	e000      	b.n	8005a68 <osDelay+0x18>
 8005a66:	2301      	movs	r3, #1
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fa6b 	bl	8005f44 <vTaskDelay>
  
  return osOK;
 8005a6e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f103 0208 	add.w	r2, r3, #8
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f103 0208 	add.w	r2, r3, #8
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f103 0208 	add.w	r2, r3, #8
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b085      	sub	sp, #20
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	601a      	str	r2, [r3, #0]
}
 8005b0e:	bf00      	nop
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b085      	sub	sp, #20
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b30:	d103      	bne.n	8005b3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	e00c      	b.n	8005b54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	e002      	b.n	8005b48 <vListInsert+0x2e>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d2f6      	bcs.n	8005b42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	601a      	str	r2, [r3, #0]
}
 8005b80:	bf00      	nop
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6892      	ldr	r2, [r2, #8]
 8005ba2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6852      	ldr	r2, [r2, #4]
 8005bac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d103      	bne.n	8005bc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	1e5a      	subs	r2, r3, #1
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b08e      	sub	sp, #56	; 0x38
 8005be4:	af04      	add	r7, sp, #16
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10c      	bne.n	8005c0e <xTaskCreateStatic+0x2e>
	__asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf8:	b672      	cpsid	i
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	b662      	cpsie	i
 8005c08:	623b      	str	r3, [r7, #32]
}
 8005c0a:	bf00      	nop
 8005c0c:	e7fe      	b.n	8005c0c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10c      	bne.n	8005c2e <xTaskCreateStatic+0x4e>
	__asm volatile
 8005c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c18:	b672      	cpsid	i
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	b662      	cpsie	i
 8005c28:	61fb      	str	r3, [r7, #28]
}
 8005c2a:	bf00      	nop
 8005c2c:	e7fe      	b.n	8005c2c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c2e:	23a0      	movs	r3, #160	; 0xa0
 8005c30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	2ba0      	cmp	r3, #160	; 0xa0
 8005c36:	d00c      	beq.n	8005c52 <xTaskCreateStatic+0x72>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3c:	b672      	cpsid	i
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	b662      	cpsie	i
 8005c4c:	61bb      	str	r3, [r7, #24]
}
 8005c4e:	bf00      	nop
 8005c50:	e7fe      	b.n	8005c50 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c52:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d01e      	beq.n	8005c98 <xTaskCreateStatic+0xb8>
 8005c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d01b      	beq.n	8005c98 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c68:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c72:	2300      	movs	r3, #0
 8005c74:	9303      	str	r3, [sp, #12]
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	9302      	str	r3, [sp, #8]
 8005c7a:	f107 0314 	add.w	r3, r7, #20
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	68b9      	ldr	r1, [r7, #8]
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 f850 	bl	8005d30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c92:	f000 f8ed 	bl	8005e70 <prvAddNewTaskToReadyList>
 8005c96:	e001      	b.n	8005c9c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c9c:	697b      	ldr	r3, [r7, #20]
	}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3728      	adds	r7, #40	; 0x28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b08c      	sub	sp, #48	; 0x30
 8005caa:	af04      	add	r7, sp, #16
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	603b      	str	r3, [r7, #0]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005cb6:	88fb      	ldrh	r3, [r7, #6]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 ff0e 	bl	8006adc <pvPortMalloc>
 8005cc0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00e      	beq.n	8005ce6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005cc8:	20a0      	movs	r0, #160	; 0xa0
 8005cca:	f000 ff07 	bl	8006adc <pvPortMalloc>
 8005cce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	631a      	str	r2, [r3, #48]	; 0x30
 8005cdc:	e005      	b.n	8005cea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005cde:	6978      	ldr	r0, [r7, #20]
 8005ce0:	f000 ffc6 	bl	8006c70 <vPortFree>
 8005ce4:	e001      	b.n	8005cea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d017      	beq.n	8005d20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005cf8:	88fa      	ldrh	r2, [r7, #6]
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	9303      	str	r3, [sp, #12]
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	9302      	str	r3, [sp, #8]
 8005d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d04:	9301      	str	r3, [sp, #4]
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68b9      	ldr	r1, [r7, #8]
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 f80e 	bl	8005d30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d14:	69f8      	ldr	r0, [r7, #28]
 8005d16:	f000 f8ab 	bl	8005e70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	61bb      	str	r3, [r7, #24]
 8005d1e:	e002      	b.n	8005d26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d26:	69bb      	ldr	r3, [r7, #24]
	}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3720      	adds	r7, #32
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
 8005d3c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005d48:	440b      	add	r3, r1
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	f023 0307 	bic.w	r3, r3, #7
 8005d56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	f003 0307 	and.w	r3, r3, #7
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00c      	beq.n	8005d7c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d66:	b672      	cpsid	i
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	b662      	cpsie	i
 8005d76:	617b      	str	r3, [r7, #20]
}
 8005d78:	bf00      	nop
 8005d7a:	e7fe      	b.n	8005d7a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d01f      	beq.n	8005dc2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d82:	2300      	movs	r3, #0
 8005d84:	61fb      	str	r3, [r7, #28]
 8005d86:	e012      	b.n	8005dae <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	7819      	ldrb	r1, [r3, #0]
 8005d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	4413      	add	r3, r2
 8005d96:	3334      	adds	r3, #52	; 0x34
 8005d98:	460a      	mov	r2, r1
 8005d9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	4413      	add	r3, r2
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d006      	beq.n	8005db6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	3301      	adds	r3, #1
 8005dac:	61fb      	str	r3, [r7, #28]
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	2b0f      	cmp	r3, #15
 8005db2:	d9e9      	bls.n	8005d88 <prvInitialiseNewTask+0x58>
 8005db4:	e000      	b.n	8005db8 <prvInitialiseNewTask+0x88>
			{
				break;
 8005db6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dc0:	e003      	b.n	8005dca <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dcc:	2b06      	cmp	r3, #6
 8005dce:	d901      	bls.n	8005dd4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005dd0:	2306      	movs	r3, #6
 8005dd2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dd8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dde:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de2:	2200      	movs	r2, #0
 8005de4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	3304      	adds	r3, #4
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff fe64 	bl	8005ab8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df2:	3318      	adds	r3, #24
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7ff fe5f 	bl	8005ab8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dfe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e02:	f1c3 0207 	rsb	r2, r3, #7
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e12:	2200      	movs	r2, #0
 8005e14:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e22:	334c      	adds	r3, #76	; 0x4c
 8005e24:	224c      	movs	r2, #76	; 0x4c
 8005e26:	2100      	movs	r1, #0
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f00d fceb 	bl	8013804 <memset>
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e30:	4a0c      	ldr	r2, [pc, #48]	; (8005e64 <prvInitialiseNewTask+0x134>)
 8005e32:	651a      	str	r2, [r3, #80]	; 0x50
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	4a0c      	ldr	r2, [pc, #48]	; (8005e68 <prvInitialiseNewTask+0x138>)
 8005e38:	655a      	str	r2, [r3, #84]	; 0x54
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	4a0b      	ldr	r2, [pc, #44]	; (8005e6c <prvInitialiseNewTask+0x13c>)
 8005e3e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	68f9      	ldr	r1, [r7, #12]
 8005e44:	69b8      	ldr	r0, [r7, #24]
 8005e46:	f000 fc55 	bl	80066f4 <pxPortInitialiseStack>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d002      	beq.n	8005e5c <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e5c:	bf00      	nop
 8005e5e:	3720      	adds	r7, #32
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	20010e24 	.word	0x20010e24
 8005e68:	20010e8c 	.word	0x20010e8c
 8005e6c:	20010ef4 	.word	0x20010ef4

08005e70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e78:	f000 fd48 	bl	800690c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e7c:	4b2a      	ldr	r3, [pc, #168]	; (8005f28 <prvAddNewTaskToReadyList+0xb8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3301      	adds	r3, #1
 8005e82:	4a29      	ldr	r2, [pc, #164]	; (8005f28 <prvAddNewTaskToReadyList+0xb8>)
 8005e84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e86:	4b29      	ldr	r3, [pc, #164]	; (8005f2c <prvAddNewTaskToReadyList+0xbc>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d109      	bne.n	8005ea2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e8e:	4a27      	ldr	r2, [pc, #156]	; (8005f2c <prvAddNewTaskToReadyList+0xbc>)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e94:	4b24      	ldr	r3, [pc, #144]	; (8005f28 <prvAddNewTaskToReadyList+0xb8>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d110      	bne.n	8005ebe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e9c:	f000 fb00 	bl	80064a0 <prvInitialiseTaskLists>
 8005ea0:	e00d      	b.n	8005ebe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ea2:	4b23      	ldr	r3, [pc, #140]	; (8005f30 <prvAddNewTaskToReadyList+0xc0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d109      	bne.n	8005ebe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005eaa:	4b20      	ldr	r3, [pc, #128]	; (8005f2c <prvAddNewTaskToReadyList+0xbc>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d802      	bhi.n	8005ebe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005eb8:	4a1c      	ldr	r2, [pc, #112]	; (8005f2c <prvAddNewTaskToReadyList+0xbc>)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ebe:	4b1d      	ldr	r3, [pc, #116]	; (8005f34 <prvAddNewTaskToReadyList+0xc4>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <prvAddNewTaskToReadyList+0xc4>)
 8005ec6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ecc:	2201      	movs	r2, #1
 8005ece:	409a      	lsls	r2, r3
 8005ed0:	4b19      	ldr	r3, [pc, #100]	; (8005f38 <prvAddNewTaskToReadyList+0xc8>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	4a18      	ldr	r2, [pc, #96]	; (8005f38 <prvAddNewTaskToReadyList+0xc8>)
 8005ed8:	6013      	str	r3, [r2, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ede:	4613      	mov	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4a15      	ldr	r2, [pc, #84]	; (8005f3c <prvAddNewTaskToReadyList+0xcc>)
 8005ee8:	441a      	add	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	3304      	adds	r3, #4
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	f7ff fdee 	bl	8005ad2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ef6:	f000 fd3d 	bl	8006974 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005efa:	4b0d      	ldr	r3, [pc, #52]	; (8005f30 <prvAddNewTaskToReadyList+0xc0>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00e      	beq.n	8005f20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f02:	4b0a      	ldr	r3, [pc, #40]	; (8005f2c <prvAddNewTaskToReadyList+0xbc>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d207      	bcs.n	8005f20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f10:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <prvAddNewTaskToReadyList+0xd0>)
 8005f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f20:	bf00      	nop
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	20008628 	.word	0x20008628
 8005f2c:	20008528 	.word	0x20008528
 8005f30:	20008634 	.word	0x20008634
 8005f34:	20008644 	.word	0x20008644
 8005f38:	20008630 	.word	0x20008630
 8005f3c:	2000852c 	.word	0x2000852c
 8005f40:	e000ed04 	.word	0xe000ed04

08005f44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d019      	beq.n	8005f8a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f56:	4b14      	ldr	r3, [pc, #80]	; (8005fa8 <vTaskDelay+0x64>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00c      	beq.n	8005f78 <vTaskDelay+0x34>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f62:	b672      	cpsid	i
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	b662      	cpsie	i
 8005f72:	60bb      	str	r3, [r7, #8]
}
 8005f74:	bf00      	nop
 8005f76:	e7fe      	b.n	8005f76 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005f78:	f000 f888 	bl	800608c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fb52 	bl	8006628 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f84:	f000 f890 	bl	80060a8 <xTaskResumeAll>
 8005f88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d107      	bne.n	8005fa0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005f90:	4b06      	ldr	r3, [pc, #24]	; (8005fac <vTaskDelay+0x68>)
 8005f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fa0:	bf00      	nop
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	20008650 	.word	0x20008650
 8005fac:	e000ed04 	.word	0xe000ed04

08005fb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b08a      	sub	sp, #40	; 0x28
 8005fb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005fbe:	463a      	mov	r2, r7
 8005fc0:	1d39      	adds	r1, r7, #4
 8005fc2:	f107 0308 	add.w	r3, r7, #8
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fa fec4 	bl	8000d54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	9202      	str	r2, [sp, #8]
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	460a      	mov	r2, r1
 8005fde:	4923      	ldr	r1, [pc, #140]	; (800606c <vTaskStartScheduler+0xbc>)
 8005fe0:	4823      	ldr	r0, [pc, #140]	; (8006070 <vTaskStartScheduler+0xc0>)
 8005fe2:	f7ff fdfd 	bl	8005be0 <xTaskCreateStatic>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	4a22      	ldr	r2, [pc, #136]	; (8006074 <vTaskStartScheduler+0xc4>)
 8005fea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005fec:	4b21      	ldr	r3, [pc, #132]	; (8006074 <vTaskStartScheduler+0xc4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	617b      	str	r3, [r7, #20]
 8005ff8:	e001      	b.n	8005ffe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d11d      	bne.n	8006040 <vTaskStartScheduler+0x90>
	__asm volatile
 8006004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006008:	b672      	cpsid	i
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	b662      	cpsie	i
 8006018:	613b      	str	r3, [r7, #16]
}
 800601a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800601c:	4b16      	ldr	r3, [pc, #88]	; (8006078 <vTaskStartScheduler+0xc8>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	334c      	adds	r3, #76	; 0x4c
 8006022:	4a16      	ldr	r2, [pc, #88]	; (800607c <vTaskStartScheduler+0xcc>)
 8006024:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006026:	4b16      	ldr	r3, [pc, #88]	; (8006080 <vTaskStartScheduler+0xd0>)
 8006028:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800602c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800602e:	4b15      	ldr	r3, [pc, #84]	; (8006084 <vTaskStartScheduler+0xd4>)
 8006030:	2201      	movs	r2, #1
 8006032:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006034:	4b14      	ldr	r3, [pc, #80]	; (8006088 <vTaskStartScheduler+0xd8>)
 8006036:	2200      	movs	r2, #0
 8006038:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800603a:	f000 fbe9 	bl	8006810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800603e:	e010      	b.n	8006062 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006046:	d10c      	bne.n	8006062 <vTaskStartScheduler+0xb2>
	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604c:	b672      	cpsid	i
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	b662      	cpsie	i
 800605c:	60fb      	str	r3, [r7, #12]
}
 800605e:	bf00      	nop
 8006060:	e7fe      	b.n	8006060 <vTaskStartScheduler+0xb0>
}
 8006062:	bf00      	nop
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	080147e4 	.word	0x080147e4
 8006070:	08006471 	.word	0x08006471
 8006074:	2000864c 	.word	0x2000864c
 8006078:	20008528 	.word	0x20008528
 800607c:	20000254 	.word	0x20000254
 8006080:	20008648 	.word	0x20008648
 8006084:	20008634 	.word	0x20008634
 8006088:	2000862c 	.word	0x2000862c

0800608c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006090:	4b04      	ldr	r3, [pc, #16]	; (80060a4 <vTaskSuspendAll+0x18>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3301      	adds	r3, #1
 8006096:	4a03      	ldr	r2, [pc, #12]	; (80060a4 <vTaskSuspendAll+0x18>)
 8006098:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800609a:	bf00      	nop
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	20008650 	.word	0x20008650

080060a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060b2:	2300      	movs	r3, #0
 80060b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060b6:	4b42      	ldr	r3, [pc, #264]	; (80061c0 <xTaskResumeAll+0x118>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10c      	bne.n	80060d8 <xTaskResumeAll+0x30>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c2:	b672      	cpsid	i
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	b662      	cpsie	i
 80060d2:	603b      	str	r3, [r7, #0]
}
 80060d4:	bf00      	nop
 80060d6:	e7fe      	b.n	80060d6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060d8:	f000 fc18 	bl	800690c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060dc:	4b38      	ldr	r3, [pc, #224]	; (80061c0 <xTaskResumeAll+0x118>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	4a37      	ldr	r2, [pc, #220]	; (80061c0 <xTaskResumeAll+0x118>)
 80060e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060e6:	4b36      	ldr	r3, [pc, #216]	; (80061c0 <xTaskResumeAll+0x118>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d161      	bne.n	80061b2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060ee:	4b35      	ldr	r3, [pc, #212]	; (80061c4 <xTaskResumeAll+0x11c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d05d      	beq.n	80061b2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060f6:	e02e      	b.n	8006156 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060f8:	4b33      	ldr	r3, [pc, #204]	; (80061c8 <xTaskResumeAll+0x120>)
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3318      	adds	r3, #24
 8006104:	4618      	mov	r0, r3
 8006106:	f7ff fd41 	bl	8005b8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3304      	adds	r3, #4
 800610e:	4618      	mov	r0, r3
 8006110:	f7ff fd3c 	bl	8005b8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006118:	2201      	movs	r2, #1
 800611a:	409a      	lsls	r2, r3
 800611c:	4b2b      	ldr	r3, [pc, #172]	; (80061cc <xTaskResumeAll+0x124>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4313      	orrs	r3, r2
 8006122:	4a2a      	ldr	r2, [pc, #168]	; (80061cc <xTaskResumeAll+0x124>)
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4a27      	ldr	r2, [pc, #156]	; (80061d0 <xTaskResumeAll+0x128>)
 8006134:	441a      	add	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	3304      	adds	r3, #4
 800613a:	4619      	mov	r1, r3
 800613c:	4610      	mov	r0, r2
 800613e:	f7ff fcc8 	bl	8005ad2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006146:	4b23      	ldr	r3, [pc, #140]	; (80061d4 <xTaskResumeAll+0x12c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614c:	429a      	cmp	r2, r3
 800614e:	d302      	bcc.n	8006156 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006150:	4b21      	ldr	r3, [pc, #132]	; (80061d8 <xTaskResumeAll+0x130>)
 8006152:	2201      	movs	r2, #1
 8006154:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006156:	4b1c      	ldr	r3, [pc, #112]	; (80061c8 <xTaskResumeAll+0x120>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1cc      	bne.n	80060f8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006164:	f000 fa40 	bl	80065e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006168:	4b1c      	ldr	r3, [pc, #112]	; (80061dc <xTaskResumeAll+0x134>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d010      	beq.n	8006196 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006174:	f000 f836 	bl	80061e4 <xTaskIncrementTick>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d002      	beq.n	8006184 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800617e:	4b16      	ldr	r3, [pc, #88]	; (80061d8 <xTaskResumeAll+0x130>)
 8006180:	2201      	movs	r2, #1
 8006182:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	3b01      	subs	r3, #1
 8006188:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1f1      	bne.n	8006174 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006190:	4b12      	ldr	r3, [pc, #72]	; (80061dc <xTaskResumeAll+0x134>)
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006196:	4b10      	ldr	r3, [pc, #64]	; (80061d8 <xTaskResumeAll+0x130>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d009      	beq.n	80061b2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800619e:	2301      	movs	r3, #1
 80061a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80061a2:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <xTaskResumeAll+0x138>)
 80061a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061b2:	f000 fbdf 	bl	8006974 <vPortExitCritical>

	return xAlreadyYielded;
 80061b6:	68bb      	ldr	r3, [r7, #8]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	20008650 	.word	0x20008650
 80061c4:	20008628 	.word	0x20008628
 80061c8:	200085e8 	.word	0x200085e8
 80061cc:	20008630 	.word	0x20008630
 80061d0:	2000852c 	.word	0x2000852c
 80061d4:	20008528 	.word	0x20008528
 80061d8:	2000863c 	.word	0x2000863c
 80061dc:	20008638 	.word	0x20008638
 80061e0:	e000ed04 	.word	0xe000ed04

080061e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80061ea:	2300      	movs	r3, #0
 80061ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061ee:	4b4f      	ldr	r3, [pc, #316]	; (800632c <xTaskIncrementTick+0x148>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f040 808a 	bne.w	800630c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061f8:	4b4d      	ldr	r3, [pc, #308]	; (8006330 <xTaskIncrementTick+0x14c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3301      	adds	r3, #1
 80061fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006200:	4a4b      	ldr	r2, [pc, #300]	; (8006330 <xTaskIncrementTick+0x14c>)
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d122      	bne.n	8006252 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800620c:	4b49      	ldr	r3, [pc, #292]	; (8006334 <xTaskIncrementTick+0x150>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00c      	beq.n	8006230 <xTaskIncrementTick+0x4c>
	__asm volatile
 8006216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621a:	b672      	cpsid	i
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	b662      	cpsie	i
 800622a:	603b      	str	r3, [r7, #0]
}
 800622c:	bf00      	nop
 800622e:	e7fe      	b.n	800622e <xTaskIncrementTick+0x4a>
 8006230:	4b40      	ldr	r3, [pc, #256]	; (8006334 <xTaskIncrementTick+0x150>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	60fb      	str	r3, [r7, #12]
 8006236:	4b40      	ldr	r3, [pc, #256]	; (8006338 <xTaskIncrementTick+0x154>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a3e      	ldr	r2, [pc, #248]	; (8006334 <xTaskIncrementTick+0x150>)
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	4a3e      	ldr	r2, [pc, #248]	; (8006338 <xTaskIncrementTick+0x154>)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6013      	str	r3, [r2, #0]
 8006244:	4b3d      	ldr	r3, [pc, #244]	; (800633c <xTaskIncrementTick+0x158>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3301      	adds	r3, #1
 800624a:	4a3c      	ldr	r2, [pc, #240]	; (800633c <xTaskIncrementTick+0x158>)
 800624c:	6013      	str	r3, [r2, #0]
 800624e:	f000 f9cb 	bl	80065e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006252:	4b3b      	ldr	r3, [pc, #236]	; (8006340 <xTaskIncrementTick+0x15c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	429a      	cmp	r2, r3
 800625a:	d348      	bcc.n	80062ee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800625c:	4b35      	ldr	r3, [pc, #212]	; (8006334 <xTaskIncrementTick+0x150>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d104      	bne.n	8006270 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006266:	4b36      	ldr	r3, [pc, #216]	; (8006340 <xTaskIncrementTick+0x15c>)
 8006268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800626c:	601a      	str	r2, [r3, #0]
					break;
 800626e:	e03e      	b.n	80062ee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006270:	4b30      	ldr	r3, [pc, #192]	; (8006334 <xTaskIncrementTick+0x150>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	429a      	cmp	r2, r3
 8006286:	d203      	bcs.n	8006290 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006288:	4a2d      	ldr	r2, [pc, #180]	; (8006340 <xTaskIncrementTick+0x15c>)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800628e:	e02e      	b.n	80062ee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	3304      	adds	r3, #4
 8006294:	4618      	mov	r0, r3
 8006296:	f7ff fc79 	bl	8005b8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d004      	beq.n	80062ac <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	3318      	adds	r3, #24
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7ff fc70 	bl	8005b8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b0:	2201      	movs	r2, #1
 80062b2:	409a      	lsls	r2, r3
 80062b4:	4b23      	ldr	r3, [pc, #140]	; (8006344 <xTaskIncrementTick+0x160>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	4a22      	ldr	r2, [pc, #136]	; (8006344 <xTaskIncrementTick+0x160>)
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c2:	4613      	mov	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4a1f      	ldr	r2, [pc, #124]	; (8006348 <xTaskIncrementTick+0x164>)
 80062cc:	441a      	add	r2, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	3304      	adds	r3, #4
 80062d2:	4619      	mov	r1, r3
 80062d4:	4610      	mov	r0, r2
 80062d6:	f7ff fbfc 	bl	8005ad2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062de:	4b1b      	ldr	r3, [pc, #108]	; (800634c <xTaskIncrementTick+0x168>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d3b9      	bcc.n	800625c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80062e8:	2301      	movs	r3, #1
 80062ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062ec:	e7b6      	b.n	800625c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062ee:	4b17      	ldr	r3, [pc, #92]	; (800634c <xTaskIncrementTick+0x168>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f4:	4914      	ldr	r1, [pc, #80]	; (8006348 <xTaskIncrementTick+0x164>)
 80062f6:	4613      	mov	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	440b      	add	r3, r1
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d907      	bls.n	8006316 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8006306:	2301      	movs	r3, #1
 8006308:	617b      	str	r3, [r7, #20]
 800630a:	e004      	b.n	8006316 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800630c:	4b10      	ldr	r3, [pc, #64]	; (8006350 <xTaskIncrementTick+0x16c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3301      	adds	r3, #1
 8006312:	4a0f      	ldr	r2, [pc, #60]	; (8006350 <xTaskIncrementTick+0x16c>)
 8006314:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006316:	4b0f      	ldr	r3, [pc, #60]	; (8006354 <xTaskIncrementTick+0x170>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800631e:	2301      	movs	r3, #1
 8006320:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006322:	697b      	ldr	r3, [r7, #20]
}
 8006324:	4618      	mov	r0, r3
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	20008650 	.word	0x20008650
 8006330:	2000862c 	.word	0x2000862c
 8006334:	200085e0 	.word	0x200085e0
 8006338:	200085e4 	.word	0x200085e4
 800633c:	20008640 	.word	0x20008640
 8006340:	20008648 	.word	0x20008648
 8006344:	20008630 	.word	0x20008630
 8006348:	2000852c 	.word	0x2000852c
 800634c:	20008528 	.word	0x20008528
 8006350:	20008638 	.word	0x20008638
 8006354:	2000863c 	.word	0x2000863c

08006358 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800635e:	4b2a      	ldr	r3, [pc, #168]	; (8006408 <vTaskSwitchContext+0xb0>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006366:	4b29      	ldr	r3, [pc, #164]	; (800640c <vTaskSwitchContext+0xb4>)
 8006368:	2201      	movs	r2, #1
 800636a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800636c:	e046      	b.n	80063fc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800636e:	4b27      	ldr	r3, [pc, #156]	; (800640c <vTaskSwitchContext+0xb4>)
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006374:	4b26      	ldr	r3, [pc, #152]	; (8006410 <vTaskSwitchContext+0xb8>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	fab3 f383 	clz	r3, r3
 8006380:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006382:	7afb      	ldrb	r3, [r7, #11]
 8006384:	f1c3 031f 	rsb	r3, r3, #31
 8006388:	617b      	str	r3, [r7, #20]
 800638a:	4922      	ldr	r1, [pc, #136]	; (8006414 <vTaskSwitchContext+0xbc>)
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	4613      	mov	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	440b      	add	r3, r1
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10c      	bne.n	80063b8 <vTaskSwitchContext+0x60>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	b672      	cpsid	i
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	b662      	cpsie	i
 80063b2:	607b      	str	r3, [r7, #4]
}
 80063b4:	bf00      	nop
 80063b6:	e7fe      	b.n	80063b6 <vTaskSwitchContext+0x5e>
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	4613      	mov	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4a14      	ldr	r2, [pc, #80]	; (8006414 <vTaskSwitchContext+0xbc>)
 80063c4:	4413      	add	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	605a      	str	r2, [r3, #4]
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	3308      	adds	r3, #8
 80063da:	429a      	cmp	r2, r3
 80063dc:	d104      	bne.n	80063e8 <vTaskSwitchContext+0x90>
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	605a      	str	r2, [r3, #4]
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	4a0a      	ldr	r2, [pc, #40]	; (8006418 <vTaskSwitchContext+0xc0>)
 80063f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063f2:	4b09      	ldr	r3, [pc, #36]	; (8006418 <vTaskSwitchContext+0xc0>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	334c      	adds	r3, #76	; 0x4c
 80063f8:	4a08      	ldr	r2, [pc, #32]	; (800641c <vTaskSwitchContext+0xc4>)
 80063fa:	6013      	str	r3, [r2, #0]
}
 80063fc:	bf00      	nop
 80063fe:	371c      	adds	r7, #28
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	20008650 	.word	0x20008650
 800640c:	2000863c 	.word	0x2000863c
 8006410:	20008630 	.word	0x20008630
 8006414:	2000852c 	.word	0x2000852c
 8006418:	20008528 	.word	0x20008528
 800641c:	20000254 	.word	0x20000254

08006420 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10c      	bne.n	8006448 <vTaskSetTimeOutState+0x28>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006432:	b672      	cpsid	i
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	b662      	cpsie	i
 8006442:	60fb      	str	r3, [r7, #12]
}
 8006444:	bf00      	nop
 8006446:	e7fe      	b.n	8006446 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 8006448:	f000 fa60 	bl	800690c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800644c:	4b06      	ldr	r3, [pc, #24]	; (8006468 <vTaskSetTimeOutState+0x48>)
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8006454:	4b05      	ldr	r3, [pc, #20]	; (800646c <vTaskSetTimeOutState+0x4c>)
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800645c:	f000 fa8a 	bl	8006974 <vPortExitCritical>
}
 8006460:	bf00      	nop
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	20008640 	.word	0x20008640
 800646c:	2000862c 	.word	0x2000862c

08006470 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006478:	f000 f852 	bl	8006520 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800647c:	4b06      	ldr	r3, [pc, #24]	; (8006498 <prvIdleTask+0x28>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d9f9      	bls.n	8006478 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006484:	4b05      	ldr	r3, [pc, #20]	; (800649c <prvIdleTask+0x2c>)
 8006486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800648a:	601a      	str	r2, [r3, #0]
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006494:	e7f0      	b.n	8006478 <prvIdleTask+0x8>
 8006496:	bf00      	nop
 8006498:	2000852c 	.word	0x2000852c
 800649c:	e000ed04 	.word	0xe000ed04

080064a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064a6:	2300      	movs	r3, #0
 80064a8:	607b      	str	r3, [r7, #4]
 80064aa:	e00c      	b.n	80064c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	4613      	mov	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4a12      	ldr	r2, [pc, #72]	; (8006500 <prvInitialiseTaskLists+0x60>)
 80064b8:	4413      	add	r3, r2
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff fadc 	bl	8005a78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	3301      	adds	r3, #1
 80064c4:	607b      	str	r3, [r7, #4]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b06      	cmp	r3, #6
 80064ca:	d9ef      	bls.n	80064ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064cc:	480d      	ldr	r0, [pc, #52]	; (8006504 <prvInitialiseTaskLists+0x64>)
 80064ce:	f7ff fad3 	bl	8005a78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064d2:	480d      	ldr	r0, [pc, #52]	; (8006508 <prvInitialiseTaskLists+0x68>)
 80064d4:	f7ff fad0 	bl	8005a78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064d8:	480c      	ldr	r0, [pc, #48]	; (800650c <prvInitialiseTaskLists+0x6c>)
 80064da:	f7ff facd 	bl	8005a78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064de:	480c      	ldr	r0, [pc, #48]	; (8006510 <prvInitialiseTaskLists+0x70>)
 80064e0:	f7ff faca 	bl	8005a78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064e4:	480b      	ldr	r0, [pc, #44]	; (8006514 <prvInitialiseTaskLists+0x74>)
 80064e6:	f7ff fac7 	bl	8005a78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064ea:	4b0b      	ldr	r3, [pc, #44]	; (8006518 <prvInitialiseTaskLists+0x78>)
 80064ec:	4a05      	ldr	r2, [pc, #20]	; (8006504 <prvInitialiseTaskLists+0x64>)
 80064ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064f0:	4b0a      	ldr	r3, [pc, #40]	; (800651c <prvInitialiseTaskLists+0x7c>)
 80064f2:	4a05      	ldr	r2, [pc, #20]	; (8006508 <prvInitialiseTaskLists+0x68>)
 80064f4:	601a      	str	r2, [r3, #0]
}
 80064f6:	bf00      	nop
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	2000852c 	.word	0x2000852c
 8006504:	200085b8 	.word	0x200085b8
 8006508:	200085cc 	.word	0x200085cc
 800650c:	200085e8 	.word	0x200085e8
 8006510:	200085fc 	.word	0x200085fc
 8006514:	20008614 	.word	0x20008614
 8006518:	200085e0 	.word	0x200085e0
 800651c:	200085e4 	.word	0x200085e4

08006520 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006526:	e019      	b.n	800655c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006528:	f000 f9f0 	bl	800690c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800652c:	4b10      	ldr	r3, [pc, #64]	; (8006570 <prvCheckTasksWaitingTermination+0x50>)
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3304      	adds	r3, #4
 8006538:	4618      	mov	r0, r3
 800653a:	f7ff fb27 	bl	8005b8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800653e:	4b0d      	ldr	r3, [pc, #52]	; (8006574 <prvCheckTasksWaitingTermination+0x54>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3b01      	subs	r3, #1
 8006544:	4a0b      	ldr	r2, [pc, #44]	; (8006574 <prvCheckTasksWaitingTermination+0x54>)
 8006546:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006548:	4b0b      	ldr	r3, [pc, #44]	; (8006578 <prvCheckTasksWaitingTermination+0x58>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3b01      	subs	r3, #1
 800654e:	4a0a      	ldr	r2, [pc, #40]	; (8006578 <prvCheckTasksWaitingTermination+0x58>)
 8006550:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006552:	f000 fa0f 	bl	8006974 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f810 	bl	800657c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800655c:	4b06      	ldr	r3, [pc, #24]	; (8006578 <prvCheckTasksWaitingTermination+0x58>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1e1      	bne.n	8006528 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	200085fc 	.word	0x200085fc
 8006574:	20008628 	.word	0x20008628
 8006578:	20008610 	.word	0x20008610

0800657c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	334c      	adds	r3, #76	; 0x4c
 8006588:	4618      	mov	r0, r3
 800658a:	f00d f989 	bl	80138a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006594:	2b00      	cmp	r3, #0
 8006596:	d108      	bne.n	80065aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	4618      	mov	r0, r3
 800659e:	f000 fb67 	bl	8006c70 <vPortFree>
				vPortFree( pxTCB );
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fb64 	bl	8006c70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065a8:	e01a      	b.n	80065e0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d103      	bne.n	80065bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fb5b 	bl	8006c70 <vPortFree>
	}
 80065ba:	e011      	b.n	80065e0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d00c      	beq.n	80065e0 <prvDeleteTCB+0x64>
	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ca:	b672      	cpsid	i
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	b662      	cpsie	i
 80065da:	60fb      	str	r3, [r7, #12]
}
 80065dc:	bf00      	nop
 80065de:	e7fe      	b.n	80065de <prvDeleteTCB+0x62>
	}
 80065e0:	bf00      	nop
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065ee:	4b0c      	ldr	r3, [pc, #48]	; (8006620 <prvResetNextTaskUnblockTime+0x38>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d104      	bne.n	8006602 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80065f8:	4b0a      	ldr	r3, [pc, #40]	; (8006624 <prvResetNextTaskUnblockTime+0x3c>)
 80065fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006600:	e008      	b.n	8006614 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006602:	4b07      	ldr	r3, [pc, #28]	; (8006620 <prvResetNextTaskUnblockTime+0x38>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	4a04      	ldr	r2, [pc, #16]	; (8006624 <prvResetNextTaskUnblockTime+0x3c>)
 8006612:	6013      	str	r3, [r2, #0]
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	200085e0 	.word	0x200085e0
 8006624:	20008648 	.word	0x20008648

08006628 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006632:	4b29      	ldr	r3, [pc, #164]	; (80066d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006638:	4b28      	ldr	r3, [pc, #160]	; (80066dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3304      	adds	r3, #4
 800663e:	4618      	mov	r0, r3
 8006640:	f7ff faa4 	bl	8005b8c <uxListRemove>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10b      	bne.n	8006662 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800664a:	4b24      	ldr	r3, [pc, #144]	; (80066dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006650:	2201      	movs	r2, #1
 8006652:	fa02 f303 	lsl.w	r3, r2, r3
 8006656:	43da      	mvns	r2, r3
 8006658:	4b21      	ldr	r3, [pc, #132]	; (80066e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4013      	ands	r3, r2
 800665e:	4a20      	ldr	r2, [pc, #128]	; (80066e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006660:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006668:	d10a      	bne.n	8006680 <prvAddCurrentTaskToDelayedList+0x58>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d007      	beq.n	8006680 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006670:	4b1a      	ldr	r3, [pc, #104]	; (80066dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3304      	adds	r3, #4
 8006676:	4619      	mov	r1, r3
 8006678:	481a      	ldr	r0, [pc, #104]	; (80066e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800667a:	f7ff fa2a 	bl	8005ad2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800667e:	e026      	b.n	80066ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4413      	add	r3, r2
 8006686:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006688:	4b14      	ldr	r3, [pc, #80]	; (80066dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	429a      	cmp	r2, r3
 8006696:	d209      	bcs.n	80066ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006698:	4b13      	ldr	r3, [pc, #76]	; (80066e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	4b0f      	ldr	r3, [pc, #60]	; (80066dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3304      	adds	r3, #4
 80066a2:	4619      	mov	r1, r3
 80066a4:	4610      	mov	r0, r2
 80066a6:	f7ff fa38 	bl	8005b1a <vListInsert>
}
 80066aa:	e010      	b.n	80066ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066ac:	4b0f      	ldr	r3, [pc, #60]	; (80066ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3304      	adds	r3, #4
 80066b6:	4619      	mov	r1, r3
 80066b8:	4610      	mov	r0, r2
 80066ba:	f7ff fa2e 	bl	8005b1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066be:	4b0c      	ldr	r3, [pc, #48]	; (80066f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d202      	bcs.n	80066ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80066c8:	4a09      	ldr	r2, [pc, #36]	; (80066f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	6013      	str	r3, [r2, #0]
}
 80066ce:	bf00      	nop
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	2000862c 	.word	0x2000862c
 80066dc:	20008528 	.word	0x20008528
 80066e0:	20008630 	.word	0x20008630
 80066e4:	20008614 	.word	0x20008614
 80066e8:	200085e4 	.word	0x200085e4
 80066ec:	200085e0 	.word	0x200085e0
 80066f0:	20008648 	.word	0x20008648

080066f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	3b04      	subs	r3, #4
 8006704:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800670c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3b04      	subs	r3, #4
 8006712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f023 0201 	bic.w	r2, r3, #1
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3b04      	subs	r3, #4
 8006722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006724:	4a0c      	ldr	r2, [pc, #48]	; (8006758 <pxPortInitialiseStack+0x64>)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3b14      	subs	r3, #20
 800672e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	3b04      	subs	r3, #4
 800673a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f06f 0202 	mvn.w	r2, #2
 8006742:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	3b20      	subs	r3, #32
 8006748:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800674a:	68fb      	ldr	r3, [r7, #12]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	0800675d 	.word	0x0800675d

0800675c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006762:	2300      	movs	r3, #0
 8006764:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006766:	4b14      	ldr	r3, [pc, #80]	; (80067b8 <prvTaskExitError+0x5c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800676e:	d00c      	beq.n	800678a <prvTaskExitError+0x2e>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	b672      	cpsid	i
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	b662      	cpsie	i
 8006784:	60fb      	str	r3, [r7, #12]
}
 8006786:	bf00      	nop
 8006788:	e7fe      	b.n	8006788 <prvTaskExitError+0x2c>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	b672      	cpsid	i
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	b662      	cpsie	i
 800679e:	60bb      	str	r3, [r7, #8]
}
 80067a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067a2:	bf00      	nop
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0fc      	beq.n	80067a4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067aa:	bf00      	nop
 80067ac:	bf00      	nop
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	20000010 	.word	0x20000010
 80067bc:	00000000 	.word	0x00000000

080067c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067c0:	4b07      	ldr	r3, [pc, #28]	; (80067e0 <pxCurrentTCBConst2>)
 80067c2:	6819      	ldr	r1, [r3, #0]
 80067c4:	6808      	ldr	r0, [r1, #0]
 80067c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ca:	f380 8809 	msr	PSP, r0
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f04f 0000 	mov.w	r0, #0
 80067d6:	f380 8811 	msr	BASEPRI, r0
 80067da:	4770      	bx	lr
 80067dc:	f3af 8000 	nop.w

080067e0 <pxCurrentTCBConst2>:
 80067e0:	20008528 	.word	0x20008528
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop

080067e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80067e8:	4808      	ldr	r0, [pc, #32]	; (800680c <prvPortStartFirstTask+0x24>)
 80067ea:	6800      	ldr	r0, [r0, #0]
 80067ec:	6800      	ldr	r0, [r0, #0]
 80067ee:	f380 8808 	msr	MSP, r0
 80067f2:	f04f 0000 	mov.w	r0, #0
 80067f6:	f380 8814 	msr	CONTROL, r0
 80067fa:	b662      	cpsie	i
 80067fc:	b661      	cpsie	f
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	df00      	svc	0
 8006808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800680a:	bf00      	nop
 800680c:	e000ed08 	.word	0xe000ed08

08006810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006816:	4b37      	ldr	r3, [pc, #220]	; (80068f4 <xPortStartScheduler+0xe4>)
 8006818:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	b2db      	uxtb	r3, r3
 8006820:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	22ff      	movs	r2, #255	; 0xff
 8006826:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	b2db      	uxtb	r3, r3
 800682e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	b2db      	uxtb	r3, r3
 8006834:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006838:	b2da      	uxtb	r2, r3
 800683a:	4b2f      	ldr	r3, [pc, #188]	; (80068f8 <xPortStartScheduler+0xe8>)
 800683c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800683e:	4b2f      	ldr	r3, [pc, #188]	; (80068fc <xPortStartScheduler+0xec>)
 8006840:	2207      	movs	r2, #7
 8006842:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006844:	e009      	b.n	800685a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006846:	4b2d      	ldr	r3, [pc, #180]	; (80068fc <xPortStartScheduler+0xec>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3b01      	subs	r3, #1
 800684c:	4a2b      	ldr	r2, [pc, #172]	; (80068fc <xPortStartScheduler+0xec>)
 800684e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006850:	78fb      	ldrb	r3, [r7, #3]
 8006852:	b2db      	uxtb	r3, r3
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	b2db      	uxtb	r3, r3
 8006858:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800685a:	78fb      	ldrb	r3, [r7, #3]
 800685c:	b2db      	uxtb	r3, r3
 800685e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006862:	2b80      	cmp	r3, #128	; 0x80
 8006864:	d0ef      	beq.n	8006846 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006866:	4b25      	ldr	r3, [pc, #148]	; (80068fc <xPortStartScheduler+0xec>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f1c3 0307 	rsb	r3, r3, #7
 800686e:	2b04      	cmp	r3, #4
 8006870:	d00c      	beq.n	800688c <xPortStartScheduler+0x7c>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006876:	b672      	cpsid	i
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	b662      	cpsie	i
 8006886:	60bb      	str	r3, [r7, #8]
}
 8006888:	bf00      	nop
 800688a:	e7fe      	b.n	800688a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800688c:	4b1b      	ldr	r3, [pc, #108]	; (80068fc <xPortStartScheduler+0xec>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	021b      	lsls	r3, r3, #8
 8006892:	4a1a      	ldr	r2, [pc, #104]	; (80068fc <xPortStartScheduler+0xec>)
 8006894:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006896:	4b19      	ldr	r3, [pc, #100]	; (80068fc <xPortStartScheduler+0xec>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800689e:	4a17      	ldr	r2, [pc, #92]	; (80068fc <xPortStartScheduler+0xec>)
 80068a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068aa:	4b15      	ldr	r3, [pc, #84]	; (8006900 <xPortStartScheduler+0xf0>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a14      	ldr	r2, [pc, #80]	; (8006900 <xPortStartScheduler+0xf0>)
 80068b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068b6:	4b12      	ldr	r3, [pc, #72]	; (8006900 <xPortStartScheduler+0xf0>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a11      	ldr	r2, [pc, #68]	; (8006900 <xPortStartScheduler+0xf0>)
 80068bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80068c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068c2:	f000 f8dd 	bl	8006a80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068c6:	4b0f      	ldr	r3, [pc, #60]	; (8006904 <xPortStartScheduler+0xf4>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80068cc:	f000 f8fc 	bl	8006ac8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068d0:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <xPortStartScheduler+0xf8>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a0c      	ldr	r2, [pc, #48]	; (8006908 <xPortStartScheduler+0xf8>)
 80068d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80068da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80068dc:	f7ff ff84 	bl	80067e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80068e0:	f7ff fd3a 	bl	8006358 <vTaskSwitchContext>
	prvTaskExitError();
 80068e4:	f7ff ff3a 	bl	800675c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	e000e400 	.word	0xe000e400
 80068f8:	20008654 	.word	0x20008654
 80068fc:	20008658 	.word	0x20008658
 8006900:	e000ed20 	.word	0xe000ed20
 8006904:	20000010 	.word	0x20000010
 8006908:	e000ef34 	.word	0xe000ef34

0800690c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	b672      	cpsid	i
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	b662      	cpsie	i
 8006926:	607b      	str	r3, [r7, #4]
}
 8006928:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800692a:	4b10      	ldr	r3, [pc, #64]	; (800696c <vPortEnterCritical+0x60>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3301      	adds	r3, #1
 8006930:	4a0e      	ldr	r2, [pc, #56]	; (800696c <vPortEnterCritical+0x60>)
 8006932:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006934:	4b0d      	ldr	r3, [pc, #52]	; (800696c <vPortEnterCritical+0x60>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d111      	bne.n	8006960 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800693c:	4b0c      	ldr	r3, [pc, #48]	; (8006970 <vPortEnterCritical+0x64>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00c      	beq.n	8006960 <vPortEnterCritical+0x54>
	__asm volatile
 8006946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694a:	b672      	cpsid	i
 800694c:	f383 8811 	msr	BASEPRI, r3
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	b662      	cpsie	i
 800695a:	603b      	str	r3, [r7, #0]
}
 800695c:	bf00      	nop
 800695e:	e7fe      	b.n	800695e <vPortEnterCritical+0x52>
	}
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	20000010 	.word	0x20000010
 8006970:	e000ed04 	.word	0xe000ed04

08006974 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800697a:	4b13      	ldr	r3, [pc, #76]	; (80069c8 <vPortExitCritical+0x54>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10c      	bne.n	800699c <vPortExitCritical+0x28>
	__asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006986:	b672      	cpsid	i
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	b662      	cpsie	i
 8006996:	607b      	str	r3, [r7, #4]
}
 8006998:	bf00      	nop
 800699a:	e7fe      	b.n	800699a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800699c:	4b0a      	ldr	r3, [pc, #40]	; (80069c8 <vPortExitCritical+0x54>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3b01      	subs	r3, #1
 80069a2:	4a09      	ldr	r2, [pc, #36]	; (80069c8 <vPortExitCritical+0x54>)
 80069a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069a6:	4b08      	ldr	r3, [pc, #32]	; (80069c8 <vPortExitCritical+0x54>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d105      	bne.n	80069ba <vPortExitCritical+0x46>
 80069ae:	2300      	movs	r3, #0
 80069b0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80069b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80069ba:	bf00      	nop
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	20000010 	.word	0x20000010
 80069cc:	00000000 	.word	0x00000000

080069d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069d0:	f3ef 8009 	mrs	r0, PSP
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	4b15      	ldr	r3, [pc, #84]	; (8006a30 <pxCurrentTCBConst>)
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	f01e 0f10 	tst.w	lr, #16
 80069e0:	bf08      	it	eq
 80069e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ea:	6010      	str	r0, [r2, #0]
 80069ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80069f4:	b672      	cpsid	i
 80069f6:	f380 8811 	msr	BASEPRI, r0
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	b662      	cpsie	i
 8006a04:	f7ff fca8 	bl	8006358 <vTaskSwitchContext>
 8006a08:	f04f 0000 	mov.w	r0, #0
 8006a0c:	f380 8811 	msr	BASEPRI, r0
 8006a10:	bc09      	pop	{r0, r3}
 8006a12:	6819      	ldr	r1, [r3, #0]
 8006a14:	6808      	ldr	r0, [r1, #0]
 8006a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1a:	f01e 0f10 	tst.w	lr, #16
 8006a1e:	bf08      	it	eq
 8006a20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a24:	f380 8809 	msr	PSP, r0
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop

08006a30 <pxCurrentTCBConst>:
 8006a30:	20008528 	.word	0x20008528
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a34:	bf00      	nop
 8006a36:	bf00      	nop

08006a38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a42:	b672      	cpsid	i
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	b662      	cpsie	i
 8006a52:	607b      	str	r3, [r7, #4]
}
 8006a54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a56:	f7ff fbc5 	bl	80061e4 <xTaskIncrementTick>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a60:	4b06      	ldr	r3, [pc, #24]	; (8006a7c <SysTick_Handler+0x44>)
 8006a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	f383 8811 	msr	BASEPRI, r3
}
 8006a72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a74:	bf00      	nop
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	e000ed04 	.word	0xe000ed04

08006a80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a80:	b480      	push	{r7}
 8006a82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a84:	4b0b      	ldr	r3, [pc, #44]	; (8006ab4 <vPortSetupTimerInterrupt+0x34>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a8a:	4b0b      	ldr	r3, [pc, #44]	; (8006ab8 <vPortSetupTimerInterrupt+0x38>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a90:	4b0a      	ldr	r3, [pc, #40]	; (8006abc <vPortSetupTimerInterrupt+0x3c>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a0a      	ldr	r2, [pc, #40]	; (8006ac0 <vPortSetupTimerInterrupt+0x40>)
 8006a96:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9a:	099b      	lsrs	r3, r3, #6
 8006a9c:	4a09      	ldr	r2, [pc, #36]	; (8006ac4 <vPortSetupTimerInterrupt+0x44>)
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006aa2:	4b04      	ldr	r3, [pc, #16]	; (8006ab4 <vPortSetupTimerInterrupt+0x34>)
 8006aa4:	2207      	movs	r2, #7
 8006aa6:	601a      	str	r2, [r3, #0]
}
 8006aa8:	bf00      	nop
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	e000e010 	.word	0xe000e010
 8006ab8:	e000e018 	.word	0xe000e018
 8006abc:	20000004 	.word	0x20000004
 8006ac0:	10624dd3 	.word	0x10624dd3
 8006ac4:	e000e014 	.word	0xe000e014

08006ac8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ac8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ad8 <vPortEnableVFP+0x10>
 8006acc:	6801      	ldr	r1, [r0, #0]
 8006ace:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006ad2:	6001      	str	r1, [r0, #0]
 8006ad4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ad6:	bf00      	nop
 8006ad8:	e000ed88 	.word	0xe000ed88

08006adc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08a      	sub	sp, #40	; 0x28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ae8:	f7ff fad0 	bl	800608c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006aec:	4b5b      	ldr	r3, [pc, #364]	; (8006c5c <pvPortMalloc+0x180>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006af4:	f000 f91a 	bl	8006d2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006af8:	4b59      	ldr	r3, [pc, #356]	; (8006c60 <pvPortMalloc+0x184>)
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4013      	ands	r3, r2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f040 8092 	bne.w	8006c2a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d01f      	beq.n	8006b4c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006b0c:	2208      	movs	r2, #8
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4413      	add	r3, r2
 8006b12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f003 0307 	and.w	r3, r3, #7
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d016      	beq.n	8006b4c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f023 0307 	bic.w	r3, r3, #7
 8006b24:	3308      	adds	r3, #8
 8006b26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f003 0307 	and.w	r3, r3, #7
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00c      	beq.n	8006b4c <pvPortMalloc+0x70>
	__asm volatile
 8006b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b36:	b672      	cpsid	i
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	b662      	cpsie	i
 8006b46:	617b      	str	r3, [r7, #20]
}
 8006b48:	bf00      	nop
 8006b4a:	e7fe      	b.n	8006b4a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d06b      	beq.n	8006c2a <pvPortMalloc+0x14e>
 8006b52:	4b44      	ldr	r3, [pc, #272]	; (8006c64 <pvPortMalloc+0x188>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d866      	bhi.n	8006c2a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b5c:	4b42      	ldr	r3, [pc, #264]	; (8006c68 <pvPortMalloc+0x18c>)
 8006b5e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b60:	4b41      	ldr	r3, [pc, #260]	; (8006c68 <pvPortMalloc+0x18c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b66:	e004      	b.n	8006b72 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d903      	bls.n	8006b84 <pvPortMalloc+0xa8>
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1f1      	bne.n	8006b68 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b84:	4b35      	ldr	r3, [pc, #212]	; (8006c5c <pvPortMalloc+0x180>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d04d      	beq.n	8006c2a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2208      	movs	r2, #8
 8006b94:	4413      	add	r3, r2
 8006b96:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	1ad2      	subs	r2, r2, r3
 8006ba8:	2308      	movs	r3, #8
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d921      	bls.n	8006bf4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	f003 0307 	and.w	r3, r3, #7
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00c      	beq.n	8006bdc <pvPortMalloc+0x100>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	b672      	cpsid	i
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	b662      	cpsie	i
 8006bd6:	613b      	str	r3, [r7, #16]
}
 8006bd8:	bf00      	nop
 8006bda:	e7fe      	b.n	8006bda <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	1ad2      	subs	r2, r2, r3
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006bee:	69b8      	ldr	r0, [r7, #24]
 8006bf0:	f000 f8fe 	bl	8006df0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006bf4:	4b1b      	ldr	r3, [pc, #108]	; (8006c64 <pvPortMalloc+0x188>)
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	4a19      	ldr	r2, [pc, #100]	; (8006c64 <pvPortMalloc+0x188>)
 8006c00:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c02:	4b18      	ldr	r3, [pc, #96]	; (8006c64 <pvPortMalloc+0x188>)
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	4b19      	ldr	r3, [pc, #100]	; (8006c6c <pvPortMalloc+0x190>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d203      	bcs.n	8006c16 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c0e:	4b15      	ldr	r3, [pc, #84]	; (8006c64 <pvPortMalloc+0x188>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a16      	ldr	r2, [pc, #88]	; (8006c6c <pvPortMalloc+0x190>)
 8006c14:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	4b11      	ldr	r3, [pc, #68]	; (8006c60 <pvPortMalloc+0x184>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	2200      	movs	r2, #0
 8006c28:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c2a:	f7ff fa3d 	bl	80060a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	f003 0307 	and.w	r3, r3, #7
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00c      	beq.n	8006c52 <pvPortMalloc+0x176>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3c:	b672      	cpsid	i
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	b662      	cpsie	i
 8006c4c:	60fb      	str	r3, [r7, #12]
}
 8006c4e:	bf00      	nop
 8006c50:	e7fe      	b.n	8006c50 <pvPortMalloc+0x174>
	return pvReturn;
 8006c52:	69fb      	ldr	r3, [r7, #28]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3728      	adds	r7, #40	; 0x28
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	2000c264 	.word	0x2000c264
 8006c60:	2000c270 	.word	0x2000c270
 8006c64:	2000c268 	.word	0x2000c268
 8006c68:	2000c25c 	.word	0x2000c25c
 8006c6c:	2000c26c 	.word	0x2000c26c

08006c70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d04c      	beq.n	8006d1c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c82:	2308      	movs	r3, #8
 8006c84:	425b      	negs	r3, r3
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	4413      	add	r3, r2
 8006c8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	4b23      	ldr	r3, [pc, #140]	; (8006d24 <vPortFree+0xb4>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4013      	ands	r3, r2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10c      	bne.n	8006cb8 <vPortFree+0x48>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca2:	b672      	cpsid	i
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	b662      	cpsie	i
 8006cb2:	60fb      	str	r3, [r7, #12]
}
 8006cb4:	bf00      	nop
 8006cb6:	e7fe      	b.n	8006cb6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00c      	beq.n	8006cda <vPortFree+0x6a>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc4:	b672      	cpsid	i
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	b662      	cpsie	i
 8006cd4:	60bb      	str	r3, [r7, #8]
}
 8006cd6:	bf00      	nop
 8006cd8:	e7fe      	b.n	8006cd8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	4b11      	ldr	r3, [pc, #68]	; (8006d24 <vPortFree+0xb4>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d019      	beq.n	8006d1c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d115      	bne.n	8006d1c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	4b0b      	ldr	r3, [pc, #44]	; (8006d24 <vPortFree+0xb4>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	43db      	mvns	r3, r3
 8006cfa:	401a      	ands	r2, r3
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d00:	f7ff f9c4 	bl	800608c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	685a      	ldr	r2, [r3, #4]
 8006d08:	4b07      	ldr	r3, [pc, #28]	; (8006d28 <vPortFree+0xb8>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	4a06      	ldr	r2, [pc, #24]	; (8006d28 <vPortFree+0xb8>)
 8006d10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d12:	6938      	ldr	r0, [r7, #16]
 8006d14:	f000 f86c 	bl	8006df0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006d18:	f7ff f9c6 	bl	80060a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d1c:	bf00      	nop
 8006d1e:	3718      	adds	r7, #24
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	2000c270 	.word	0x2000c270
 8006d28:	2000c268 	.word	0x2000c268

08006d2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d32:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d38:	4b27      	ldr	r3, [pc, #156]	; (8006dd8 <prvHeapInit+0xac>)
 8006d3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f003 0307 	and.w	r3, r3, #7
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00c      	beq.n	8006d60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	3307      	adds	r3, #7
 8006d4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 0307 	bic.w	r3, r3, #7
 8006d52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	4a1f      	ldr	r2, [pc, #124]	; (8006dd8 <prvHeapInit+0xac>)
 8006d5c:	4413      	add	r3, r2
 8006d5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d64:	4a1d      	ldr	r2, [pc, #116]	; (8006ddc <prvHeapInit+0xb0>)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d6a:	4b1c      	ldr	r3, [pc, #112]	; (8006ddc <prvHeapInit+0xb0>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	4413      	add	r3, r2
 8006d76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d78:	2208      	movs	r2, #8
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	1a9b      	subs	r3, r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f023 0307 	bic.w	r3, r3, #7
 8006d86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4a15      	ldr	r2, [pc, #84]	; (8006de0 <prvHeapInit+0xb4>)
 8006d8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d8e:	4b14      	ldr	r3, [pc, #80]	; (8006de0 <prvHeapInit+0xb4>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2200      	movs	r2, #0
 8006d94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d96:	4b12      	ldr	r3, [pc, #72]	; (8006de0 <prvHeapInit+0xb4>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	1ad2      	subs	r2, r2, r3
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006dac:	4b0c      	ldr	r3, [pc, #48]	; (8006de0 <prvHeapInit+0xb4>)
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	4a0a      	ldr	r2, [pc, #40]	; (8006de4 <prvHeapInit+0xb8>)
 8006dba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	4a09      	ldr	r2, [pc, #36]	; (8006de8 <prvHeapInit+0xbc>)
 8006dc2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006dc4:	4b09      	ldr	r3, [pc, #36]	; (8006dec <prvHeapInit+0xc0>)
 8006dc6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006dca:	601a      	str	r2, [r3, #0]
}
 8006dcc:	bf00      	nop
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	2000865c 	.word	0x2000865c
 8006ddc:	2000c25c 	.word	0x2000c25c
 8006de0:	2000c264 	.word	0x2000c264
 8006de4:	2000c26c 	.word	0x2000c26c
 8006de8:	2000c268 	.word	0x2000c268
 8006dec:	2000c270 	.word	0x2000c270

08006df0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006df8:	4b28      	ldr	r3, [pc, #160]	; (8006e9c <prvInsertBlockIntoFreeList+0xac>)
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	e002      	b.n	8006e04 <prvInsertBlockIntoFreeList+0x14>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d8f7      	bhi.n	8006dfe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	4413      	add	r3, r2
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d108      	bne.n	8006e32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	441a      	add	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	441a      	add	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d118      	bne.n	8006e78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	4b15      	ldr	r3, [pc, #84]	; (8006ea0 <prvInsertBlockIntoFreeList+0xb0>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d00d      	beq.n	8006e6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	441a      	add	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	e008      	b.n	8006e80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ea0 <prvInsertBlockIntoFreeList+0xb0>)
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	e003      	b.n	8006e80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d002      	beq.n	8006e8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e8e:	bf00      	nop
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	2000c25c 	.word	0x2000c25c
 8006ea0:	2000c264 	.word	0x2000c264

08006ea4 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 8006ea4:	4b04      	ldr	r3, [pc, #16]	; (8006eb8 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	b10a      	cbz	r2, 8006eae <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xa>
 8006eaa:	4803      	ldr	r0, [pc, #12]	; (8006eb8 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 8006eac:	4770      	bx	lr
 8006eae:	4a03      	ldr	r2, [pc, #12]	; (8006ebc <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x18>)
 8006eb0:	4801      	ldr	r0, [pc, #4]	; (8006eb8 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 8006eb2:	6812      	ldr	r2, [r2, #0]
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	4770      	bx	lr
 8006eb8:	2000001c 	.word	0x2000001c
 8006ebc:	200001f4 	.word	0x200001f4

08006ec0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 8006ec0:	4b04      	ldr	r3, [pc, #16]	; (8006ed4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 8006ec2:	4805      	ldr	r0, [pc, #20]	; (8006ed8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4905      	ldr	r1, [pc, #20]	; (8006edc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x1c>)
 8006ec8:	4a05      	ldr	r2, [pc, #20]	; (8006ee0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x20>)
 8006eca:	6003      	str	r3, [r0, #0]
 8006ecc:	600b      	str	r3, [r1, #0]
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	200001f4 	.word	0x200001f4
 8006ed8:	20000038 	.word	0x20000038
 8006edc:	20000044 	.word	0x20000044
 8006ee0:	2000001c 	.word	0x2000001c

08006ee4 <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_init_function>:
 8006ee4:	f004 bbfe 	b.w	800b6e4 <custom_test_msgs__srv__AddThreeInts_Request__init>

08006ee8 <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_fini_function>:
 8006ee8:	f004 bc00 	b.w	800b6ec <custom_test_msgs__srv__AddThreeInts_Request__fini>

08006eec <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_init_function>:
 8006eec:	f004 bc00 	b.w	800b6f0 <custom_test_msgs__srv__AddThreeInts_Response__init>

08006ef0 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_fini_function>:
 8006ef0:	f004 bc02 	b.w	800b6f8 <custom_test_msgs__srv__AddThreeInts_Response__fini>

08006ef4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 8006ef4:	4b04      	ldr	r3, [pc, #16]	; (8006f08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	b10a      	cbz	r2, 8006efe <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0xa>
 8006efa:	4803      	ldr	r0, [pc, #12]	; (8006f08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 8006efc:	4770      	bx	lr
 8006efe:	4a03      	ldr	r2, [pc, #12]	; (8006f0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 8006f00:	4801      	ldr	r0, [pc, #4]	; (8006f08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 8006f02:	6812      	ldr	r2, [r2, #0]
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	4770      	bx	lr
 8006f08:	20000104 	.word	0x20000104
 8006f0c:	200001f8 	.word	0x200001f8

08006f10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 8006f10:	4b04      	ldr	r3, [pc, #16]	; (8006f24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	b10a      	cbz	r2, 8006f1a <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0xa>
 8006f16:	4803      	ldr	r0, [pc, #12]	; (8006f24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 8006f18:	4770      	bx	lr
 8006f1a:	4a03      	ldr	r2, [pc, #12]	; (8006f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x18>)
 8006f1c:	4801      	ldr	r0, [pc, #4]	; (8006f24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 8006f1e:	6812      	ldr	r2, [r2, #0]
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	4770      	bx	lr
 8006f24:	2000014c 	.word	0x2000014c
 8006f28:	200001f8 	.word	0x200001f8

08006f2c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 8006f2c:	4b13      	ldr	r3, [pc, #76]	; (8006f7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	b132      	cbz	r2, 8006f40 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	689a      	ldr	r2, [r3, #8]
 8006f36:	b152      	cbz	r2, 8006f4e <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x22>
 8006f38:	68da      	ldr	r2, [r3, #12]
 8006f3a:	b182      	cbz	r2, 8006f5e <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x32>
 8006f3c:	480f      	ldr	r0, [pc, #60]	; (8006f7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8006f3e:	4770      	bx	lr
 8006f40:	4a0f      	ldr	r2, [pc, #60]	; (8006f80 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 8006f42:	6812      	ldr	r2, [r2, #0]
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	689a      	ldr	r2, [r3, #8]
 8006f4a:	2a00      	cmp	r2, #0
 8006f4c:	d1f4      	bne.n	8006f38 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xc>
 8006f4e:	4a0d      	ldr	r2, [pc, #52]	; (8006f84 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x58>)
 8006f50:	6811      	ldr	r1, [r2, #0]
 8006f52:	b179      	cbz	r1, 8006f74 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x48>
 8006f54:	6852      	ldr	r2, [r2, #4]
 8006f56:	609a      	str	r2, [r3, #8]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	2a00      	cmp	r2, #0
 8006f5c:	d1ee      	bne.n	8006f3c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x10>
 8006f5e:	4a0a      	ldr	r2, [pc, #40]	; (8006f88 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x5c>)
 8006f60:	6811      	ldr	r1, [r2, #0]
 8006f62:	b119      	cbz	r1, 8006f6c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x40>
 8006f64:	6852      	ldr	r2, [r2, #4]
 8006f66:	4805      	ldr	r0, [pc, #20]	; (8006f7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8006f68:	60da      	str	r2, [r3, #12]
 8006f6a:	4770      	bx	lr
 8006f6c:	4904      	ldr	r1, [pc, #16]	; (8006f80 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 8006f6e:	6809      	ldr	r1, [r1, #0]
 8006f70:	6011      	str	r1, [r2, #0]
 8006f72:	e7f7      	b.n	8006f64 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x38>
 8006f74:	4902      	ldr	r1, [pc, #8]	; (8006f80 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 8006f76:	6809      	ldr	r1, [r1, #0]
 8006f78:	6011      	str	r1, [r2, #0]
 8006f7a:	e7eb      	b.n	8006f54 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x28>
 8006f7c:	20000168 	.word	0x20000168
 8006f80:	200001f8 	.word	0x200001f8
 8006f84:	20000104 	.word	0x20000104
 8006f88:	2000014c 	.word	0x2000014c

08006f8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 8006f8c:	4800      	ldr	r0, [pc, #0]	; (8006f90 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x4>)
 8006f8e:	4770      	bx	lr
 8006f90:	20000190 	.word	0x20000190

08006f94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 8006f94:	4800      	ldr	r0, [pc, #0]	; (8006f98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x4>)
 8006f96:	4770      	bx	lr
 8006f98:	2000019c 	.word	0x2000019c

08006f9c <_AddThreeInts_Response__max_serialized_size>:
 8006f9c:	2108      	movs	r1, #8
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	b508      	push	{r3, lr}
 8006fa2:	f001 fa0b 	bl	80083bc <ucdr_alignment>
 8006fa6:	3008      	adds	r0, #8
 8006fa8:	bd08      	pop	{r3, pc}
 8006faa:	bf00      	nop

08006fac <_AddThreeInts_Response__cdr_deserialize>:
 8006fac:	b109      	cbz	r1, 8006fb2 <_AddThreeInts_Response__cdr_deserialize+0x6>
 8006fae:	f001 b8e7 	b.w	8008180 <ucdr_deserialize_int64_t>
 8006fb2:	4608      	mov	r0, r1
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop

08006fb8 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request>:
 8006fb8:	b1b8      	cbz	r0, 8006fea <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request+0x32>
 8006fba:	b538      	push	{r3, r4, r5, lr}
 8006fbc:	460d      	mov	r5, r1
 8006fbe:	2108      	movs	r1, #8
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f001 f9fb 	bl	80083bc <ucdr_alignment>
 8006fc6:	f105 0308 	add.w	r3, r5, #8
 8006fca:	2108      	movs	r1, #8
 8006fcc:	f1c5 0508 	rsb	r5, r5, #8
 8006fd0:	181c      	adds	r4, r3, r0
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f001 f9f2 	bl	80083bc <ucdr_alignment>
 8006fd8:	2108      	movs	r1, #8
 8006fda:	4408      	add	r0, r1
 8006fdc:	4404      	add	r4, r0
 8006fde:	4620      	mov	r0, r4
 8006fe0:	f001 f9ec 	bl	80083bc <ucdr_alignment>
 8006fe4:	4428      	add	r0, r5
 8006fe6:	4420      	add	r0, r4
 8006fe8:	bd38      	pop	{r3, r4, r5, pc}
 8006fea:	4770      	bx	lr

08006fec <_AddThreeInts_Response__get_serialized_size>:
 8006fec:	b130      	cbz	r0, 8006ffc <_AddThreeInts_Response__get_serialized_size+0x10>
 8006fee:	2108      	movs	r1, #8
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	b508      	push	{r3, lr}
 8006ff4:	f001 f9e2 	bl	80083bc <ucdr_alignment>
 8006ff8:	3008      	adds	r0, #8
 8006ffa:	bd08      	pop	{r3, pc}
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop

08007000 <_AddThreeInts_Request__cdr_deserialize>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	460c      	mov	r4, r1
 8007004:	b171      	cbz	r1, 8007024 <_AddThreeInts_Request__cdr_deserialize+0x24>
 8007006:	4605      	mov	r5, r0
 8007008:	f001 f8ba 	bl	8008180 <ucdr_deserialize_int64_t>
 800700c:	f104 0108 	add.w	r1, r4, #8
 8007010:	4628      	mov	r0, r5
 8007012:	f001 f8b5 	bl	8008180 <ucdr_deserialize_int64_t>
 8007016:	f104 0110 	add.w	r1, r4, #16
 800701a:	4628      	mov	r0, r5
 800701c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007020:	f001 b8ae 	b.w	8008180 <ucdr_deserialize_int64_t>
 8007024:	4608      	mov	r0, r1
 8007026:	bd38      	pop	{r3, r4, r5, pc}

08007028 <_AddThreeInts_Request__cdr_serialize>:
 8007028:	b198      	cbz	r0, 8007052 <_AddThreeInts_Request__cdr_serialize+0x2a>
 800702a:	b570      	push	{r4, r5, r6, lr}
 800702c:	460d      	mov	r5, r1
 800702e:	4604      	mov	r4, r0
 8007030:	e9d0 2300 	ldrd	r2, r3, [r0]
 8007034:	4608      	mov	r0, r1
 8007036:	f000 ffd3 	bl	8007fe0 <ucdr_serialize_int64_t>
 800703a:	4628      	mov	r0, r5
 800703c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007040:	f000 ffce 	bl	8007fe0 <ucdr_serialize_int64_t>
 8007044:	4628      	mov	r0, r5
 8007046:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800704a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800704e:	f000 bfc7 	b.w	8007fe0 <ucdr_serialize_int64_t>
 8007052:	4770      	bx	lr

08007054 <_AddThreeInts_Response__cdr_serialize>:
 8007054:	b120      	cbz	r0, 8007060 <_AddThreeInts_Response__cdr_serialize+0xc>
 8007056:	e9d0 2300 	ldrd	r2, r3, [r0]
 800705a:	4608      	mov	r0, r1
 800705c:	f000 bfc0 	b.w	8007fe0 <ucdr_serialize_int64_t>
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop

08007064 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response>:
 8007064:	b138      	cbz	r0, 8007076 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response+0x12>
 8007066:	b508      	push	{r3, lr}
 8007068:	460b      	mov	r3, r1
 800706a:	2108      	movs	r1, #8
 800706c:	4618      	mov	r0, r3
 800706e:	f001 f9a5 	bl	80083bc <ucdr_alignment>
 8007072:	3008      	adds	r0, #8
 8007074:	bd08      	pop	{r3, pc}
 8007076:	4770      	bx	lr

08007078 <_AddThreeInts_Request__get_serialized_size>:
 8007078:	b190      	cbz	r0, 80070a0 <_AddThreeInts_Request__get_serialized_size+0x28>
 800707a:	2108      	movs	r1, #8
 800707c:	2000      	movs	r0, #0
 800707e:	b510      	push	{r4, lr}
 8007080:	f001 f99c 	bl	80083bc <ucdr_alignment>
 8007084:	2108      	movs	r1, #8
 8007086:	1844      	adds	r4, r0, r1
 8007088:	4620      	mov	r0, r4
 800708a:	f001 f997 	bl	80083bc <ucdr_alignment>
 800708e:	2108      	movs	r1, #8
 8007090:	4408      	add	r0, r1
 8007092:	4404      	add	r4, r0
 8007094:	4620      	mov	r0, r4
 8007096:	f001 f991 	bl	80083bc <ucdr_alignment>
 800709a:	3008      	adds	r0, #8
 800709c:	4420      	add	r0, r4
 800709e:	bd10      	pop	{r4, pc}
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop

080070a4 <_AddThreeInts_Request__max_serialized_size>:
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	2108      	movs	r1, #8
 80070a8:	2000      	movs	r0, #0
 80070aa:	f001 f987 	bl	80083bc <ucdr_alignment>
 80070ae:	2108      	movs	r1, #8
 80070b0:	1845      	adds	r5, r0, r1
 80070b2:	4628      	mov	r0, r5
 80070b4:	f001 f982 	bl	80083bc <ucdr_alignment>
 80070b8:	2108      	movs	r1, #8
 80070ba:	1844      	adds	r4, r0, r1
 80070bc:	442c      	add	r4, r5
 80070be:	4620      	mov	r0, r4
 80070c0:	f001 f97c 	bl	80083bc <ucdr_alignment>
 80070c4:	3008      	adds	r0, #8
 80070c6:	4420      	add	r0, r4
 80070c8:	bd38      	pop	{r3, r4, r5, pc}
 80070ca:	bf00      	nop

080070cc <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 80070cc:	4800      	ldr	r0, [pc, #0]	; (80070d0 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x4>)
 80070ce:	4770      	bx	lr
 80070d0:	20000184 	.word	0x20000184

080070d4 <ucdr_serialize_bool>:
 80070d4:	b538      	push	{r3, r4, r5, lr}
 80070d6:	460d      	mov	r5, r1
 80070d8:	2101      	movs	r1, #1
 80070da:	4604      	mov	r4, r0
 80070dc:	f001 f922 	bl	8008324 <ucdr_check_final_buffer_behavior>
 80070e0:	b148      	cbz	r0, 80070f6 <ucdr_serialize_bool+0x22>
 80070e2:	68a3      	ldr	r3, [r4, #8]
 80070e4:	2101      	movs	r1, #1
 80070e6:	701d      	strb	r5, [r3, #0]
 80070e8:	68a2      	ldr	r2, [r4, #8]
 80070ea:	6923      	ldr	r3, [r4, #16]
 80070ec:	440a      	add	r2, r1
 80070ee:	7561      	strb	r1, [r4, #21]
 80070f0:	440b      	add	r3, r1
 80070f2:	60a2      	str	r2, [r4, #8]
 80070f4:	6123      	str	r3, [r4, #16]
 80070f6:	7da0      	ldrb	r0, [r4, #22]
 80070f8:	f080 0001 	eor.w	r0, r0, #1
 80070fc:	bd38      	pop	{r3, r4, r5, pc}
 80070fe:	bf00      	nop

08007100 <ucdr_deserialize_bool>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	460d      	mov	r5, r1
 8007104:	2101      	movs	r1, #1
 8007106:	4604      	mov	r4, r0
 8007108:	f001 f90c 	bl	8008324 <ucdr_check_final_buffer_behavior>
 800710c:	b160      	cbz	r0, 8007128 <ucdr_deserialize_bool+0x28>
 800710e:	68a2      	ldr	r2, [r4, #8]
 8007110:	2101      	movs	r1, #1
 8007112:	6923      	ldr	r3, [r4, #16]
 8007114:	f812 0b01 	ldrb.w	r0, [r2], #1
 8007118:	440b      	add	r3, r1
 800711a:	3800      	subs	r0, #0
 800711c:	bf18      	it	ne
 800711e:	2001      	movne	r0, #1
 8007120:	7028      	strb	r0, [r5, #0]
 8007122:	60a2      	str	r2, [r4, #8]
 8007124:	6123      	str	r3, [r4, #16]
 8007126:	7561      	strb	r1, [r4, #21]
 8007128:	7da0      	ldrb	r0, [r4, #22]
 800712a:	f080 0001 	eor.w	r0, r0, #1
 800712e:	bd38      	pop	{r3, r4, r5, pc}

08007130 <ucdr_serialize_uint8_t>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	460d      	mov	r5, r1
 8007134:	2101      	movs	r1, #1
 8007136:	4604      	mov	r4, r0
 8007138:	f001 f8f4 	bl	8008324 <ucdr_check_final_buffer_behavior>
 800713c:	b148      	cbz	r0, 8007152 <ucdr_serialize_uint8_t+0x22>
 800713e:	68a3      	ldr	r3, [r4, #8]
 8007140:	2101      	movs	r1, #1
 8007142:	701d      	strb	r5, [r3, #0]
 8007144:	68a2      	ldr	r2, [r4, #8]
 8007146:	6923      	ldr	r3, [r4, #16]
 8007148:	440a      	add	r2, r1
 800714a:	7561      	strb	r1, [r4, #21]
 800714c:	440b      	add	r3, r1
 800714e:	60a2      	str	r2, [r4, #8]
 8007150:	6123      	str	r3, [r4, #16]
 8007152:	7da0      	ldrb	r0, [r4, #22]
 8007154:	f080 0001 	eor.w	r0, r0, #1
 8007158:	bd38      	pop	{r3, r4, r5, pc}
 800715a:	bf00      	nop

0800715c <ucdr_deserialize_uint8_t>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	460d      	mov	r5, r1
 8007160:	2101      	movs	r1, #1
 8007162:	4604      	mov	r4, r0
 8007164:	f001 f8de 	bl	8008324 <ucdr_check_final_buffer_behavior>
 8007168:	b150      	cbz	r0, 8007180 <ucdr_deserialize_uint8_t+0x24>
 800716a:	68a3      	ldr	r3, [r4, #8]
 800716c:	2101      	movs	r1, #1
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	702b      	strb	r3, [r5, #0]
 8007172:	68a2      	ldr	r2, [r4, #8]
 8007174:	6923      	ldr	r3, [r4, #16]
 8007176:	440a      	add	r2, r1
 8007178:	7561      	strb	r1, [r4, #21]
 800717a:	440b      	add	r3, r1
 800717c:	60a2      	str	r2, [r4, #8]
 800717e:	6123      	str	r3, [r4, #16]
 8007180:	7da0      	ldrb	r0, [r4, #22]
 8007182:	f080 0001 	eor.w	r0, r0, #1
 8007186:	bd38      	pop	{r3, r4, r5, pc}

08007188 <ucdr_serialize_uint16_t>:
 8007188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800718c:	460b      	mov	r3, r1
 800718e:	b082      	sub	sp, #8
 8007190:	4604      	mov	r4, r0
 8007192:	2102      	movs	r1, #2
 8007194:	f8ad 3006 	strh.w	r3, [sp, #6]
 8007198:	f001 f918 	bl	80083cc <ucdr_buffer_alignment>
 800719c:	4601      	mov	r1, r0
 800719e:	4620      	mov	r0, r4
 80071a0:	7d67      	ldrb	r7, [r4, #21]
 80071a2:	f001 f95b 	bl	800845c <ucdr_advance_buffer>
 80071a6:	2102      	movs	r1, #2
 80071a8:	4620      	mov	r0, r4
 80071aa:	f001 f8af 	bl	800830c <ucdr_check_buffer_available_for>
 80071ae:	bb78      	cbnz	r0, 8007210 <ucdr_serialize_uint16_t+0x88>
 80071b0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80071b4:	42ab      	cmp	r3, r5
 80071b6:	d926      	bls.n	8007206 <ucdr_serialize_uint16_t+0x7e>
 80071b8:	1b5e      	subs	r6, r3, r5
 80071ba:	60a3      	str	r3, [r4, #8]
 80071bc:	6923      	ldr	r3, [r4, #16]
 80071be:	4620      	mov	r0, r4
 80071c0:	f1c6 0802 	rsb	r8, r6, #2
 80071c4:	4433      	add	r3, r6
 80071c6:	4641      	mov	r1, r8
 80071c8:	6123      	str	r3, [r4, #16]
 80071ca:	f001 f8ab 	bl	8008324 <ucdr_check_final_buffer_behavior>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	d03b      	beq.n	800724a <ucdr_serialize_uint16_t+0xc2>
 80071d2:	7d23      	ldrb	r3, [r4, #20]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d04a      	beq.n	800726e <ucdr_serialize_uint16_t+0xe6>
 80071d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80071dc:	702b      	strb	r3, [r5, #0]
 80071de:	2e00      	cmp	r6, #0
 80071e0:	d040      	beq.n	8007264 <ucdr_serialize_uint16_t+0xdc>
 80071e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80071e6:	706b      	strb	r3, [r5, #1]
 80071e8:	6923      	ldr	r3, [r4, #16]
 80071ea:	2102      	movs	r1, #2
 80071ec:	68a2      	ldr	r2, [r4, #8]
 80071ee:	3302      	adds	r3, #2
 80071f0:	7da0      	ldrb	r0, [r4, #22]
 80071f2:	4442      	add	r2, r8
 80071f4:	7561      	strb	r1, [r4, #21]
 80071f6:	1b9e      	subs	r6, r3, r6
 80071f8:	f080 0001 	eor.w	r0, r0, #1
 80071fc:	60a2      	str	r2, [r4, #8]
 80071fe:	6126      	str	r6, [r4, #16]
 8007200:	b002      	add	sp, #8
 8007202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007206:	2102      	movs	r1, #2
 8007208:	4620      	mov	r0, r4
 800720a:	f001 f88b 	bl	8008324 <ucdr_check_final_buffer_behavior>
 800720e:	b190      	cbz	r0, 8007236 <ucdr_serialize_uint16_t+0xae>
 8007210:	7d23      	ldrb	r3, [r4, #20]
 8007212:	2b01      	cmp	r3, #1
 8007214:	68a3      	ldr	r3, [r4, #8]
 8007216:	d014      	beq.n	8007242 <ucdr_serialize_uint16_t+0xba>
 8007218:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800721c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007220:	7019      	strb	r1, [r3, #0]
 8007222:	68a3      	ldr	r3, [r4, #8]
 8007224:	705a      	strb	r2, [r3, #1]
 8007226:	2102      	movs	r1, #2
 8007228:	68a2      	ldr	r2, [r4, #8]
 800722a:	6923      	ldr	r3, [r4, #16]
 800722c:	440a      	add	r2, r1
 800722e:	7561      	strb	r1, [r4, #21]
 8007230:	440b      	add	r3, r1
 8007232:	60a2      	str	r2, [r4, #8]
 8007234:	6123      	str	r3, [r4, #16]
 8007236:	7da0      	ldrb	r0, [r4, #22]
 8007238:	f080 0001 	eor.w	r0, r0, #1
 800723c:	b002      	add	sp, #8
 800723e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007242:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007246:	801a      	strh	r2, [r3, #0]
 8007248:	e7ed      	b.n	8007226 <ucdr_serialize_uint16_t+0x9e>
 800724a:	68a2      	ldr	r2, [r4, #8]
 800724c:	6923      	ldr	r3, [r4, #16]
 800724e:	7da0      	ldrb	r0, [r4, #22]
 8007250:	1b92      	subs	r2, r2, r6
 8007252:	1b9b      	subs	r3, r3, r6
 8007254:	7567      	strb	r7, [r4, #21]
 8007256:	f080 0001 	eor.w	r0, r0, #1
 800725a:	60a2      	str	r2, [r4, #8]
 800725c:	6123      	str	r3, [r4, #16]
 800725e:	b002      	add	sp, #8
 8007260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007264:	68a3      	ldr	r3, [r4, #8]
 8007266:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800726a:	701a      	strb	r2, [r3, #0]
 800726c:	e7bc      	b.n	80071e8 <ucdr_serialize_uint16_t+0x60>
 800726e:	4628      	mov	r0, r5
 8007270:	f10d 0506 	add.w	r5, sp, #6
 8007274:	4632      	mov	r2, r6
 8007276:	4629      	mov	r1, r5
 8007278:	f00c fbe3 	bl	8013a42 <memcpy>
 800727c:	4642      	mov	r2, r8
 800727e:	19a9      	adds	r1, r5, r6
 8007280:	68a0      	ldr	r0, [r4, #8]
 8007282:	f00c fbde 	bl	8013a42 <memcpy>
 8007286:	e7af      	b.n	80071e8 <ucdr_serialize_uint16_t+0x60>

08007288 <ucdr_serialize_endian_uint16_t>:
 8007288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800728c:	4604      	mov	r4, r0
 800728e:	b083      	sub	sp, #12
 8007290:	460d      	mov	r5, r1
 8007292:	2102      	movs	r1, #2
 8007294:	f8ad 2006 	strh.w	r2, [sp, #6]
 8007298:	f001 f898 	bl	80083cc <ucdr_buffer_alignment>
 800729c:	4601      	mov	r1, r0
 800729e:	4620      	mov	r0, r4
 80072a0:	f894 8015 	ldrb.w	r8, [r4, #21]
 80072a4:	f001 f8da 	bl	800845c <ucdr_advance_buffer>
 80072a8:	2102      	movs	r1, #2
 80072aa:	4620      	mov	r0, r4
 80072ac:	f001 f82e 	bl	800830c <ucdr_check_buffer_available_for>
 80072b0:	bb70      	cbnz	r0, 8007310 <ucdr_serialize_endian_uint16_t+0x88>
 80072b2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80072b6:	42be      	cmp	r6, r7
 80072b8:	d925      	bls.n	8007306 <ucdr_serialize_endian_uint16_t+0x7e>
 80072ba:	6923      	ldr	r3, [r4, #16]
 80072bc:	4620      	mov	r0, r4
 80072be:	60a6      	str	r6, [r4, #8]
 80072c0:	1bf6      	subs	r6, r6, r7
 80072c2:	4433      	add	r3, r6
 80072c4:	f1c6 0902 	rsb	r9, r6, #2
 80072c8:	6123      	str	r3, [r4, #16]
 80072ca:	4649      	mov	r1, r9
 80072cc:	f001 f82a 	bl	8008324 <ucdr_check_final_buffer_behavior>
 80072d0:	2800      	cmp	r0, #0
 80072d2:	d039      	beq.n	8007348 <ucdr_serialize_endian_uint16_t+0xc0>
 80072d4:	2d01      	cmp	r5, #1
 80072d6:	d04a      	beq.n	800736e <ucdr_serialize_endian_uint16_t+0xe6>
 80072d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80072dc:	703b      	strb	r3, [r7, #0]
 80072de:	2e00      	cmp	r6, #0
 80072e0:	d040      	beq.n	8007364 <ucdr_serialize_endian_uint16_t+0xdc>
 80072e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80072e6:	707b      	strb	r3, [r7, #1]
 80072e8:	6923      	ldr	r3, [r4, #16]
 80072ea:	2102      	movs	r1, #2
 80072ec:	68a2      	ldr	r2, [r4, #8]
 80072ee:	7da0      	ldrb	r0, [r4, #22]
 80072f0:	3302      	adds	r3, #2
 80072f2:	444a      	add	r2, r9
 80072f4:	7561      	strb	r1, [r4, #21]
 80072f6:	1b9b      	subs	r3, r3, r6
 80072f8:	f080 0001 	eor.w	r0, r0, #1
 80072fc:	60a2      	str	r2, [r4, #8]
 80072fe:	6123      	str	r3, [r4, #16]
 8007300:	b003      	add	sp, #12
 8007302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007306:	2102      	movs	r1, #2
 8007308:	4620      	mov	r0, r4
 800730a:	f001 f80b 	bl	8008324 <ucdr_check_final_buffer_behavior>
 800730e:	b188      	cbz	r0, 8007334 <ucdr_serialize_endian_uint16_t+0xac>
 8007310:	2d01      	cmp	r5, #1
 8007312:	68a3      	ldr	r3, [r4, #8]
 8007314:	d014      	beq.n	8007340 <ucdr_serialize_endian_uint16_t+0xb8>
 8007316:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800731a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800731e:	7019      	strb	r1, [r3, #0]
 8007320:	68a3      	ldr	r3, [r4, #8]
 8007322:	705a      	strb	r2, [r3, #1]
 8007324:	2102      	movs	r1, #2
 8007326:	68a2      	ldr	r2, [r4, #8]
 8007328:	6923      	ldr	r3, [r4, #16]
 800732a:	440a      	add	r2, r1
 800732c:	7561      	strb	r1, [r4, #21]
 800732e:	440b      	add	r3, r1
 8007330:	60a2      	str	r2, [r4, #8]
 8007332:	6123      	str	r3, [r4, #16]
 8007334:	7da0      	ldrb	r0, [r4, #22]
 8007336:	f080 0001 	eor.w	r0, r0, #1
 800733a:	b003      	add	sp, #12
 800733c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007340:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007344:	801a      	strh	r2, [r3, #0]
 8007346:	e7ed      	b.n	8007324 <ucdr_serialize_endian_uint16_t+0x9c>
 8007348:	68a2      	ldr	r2, [r4, #8]
 800734a:	6923      	ldr	r3, [r4, #16]
 800734c:	7da0      	ldrb	r0, [r4, #22]
 800734e:	1b92      	subs	r2, r2, r6
 8007350:	1b9b      	subs	r3, r3, r6
 8007352:	f884 8015 	strb.w	r8, [r4, #21]
 8007356:	f080 0001 	eor.w	r0, r0, #1
 800735a:	60a2      	str	r2, [r4, #8]
 800735c:	6123      	str	r3, [r4, #16]
 800735e:	b003      	add	sp, #12
 8007360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007364:	68a3      	ldr	r3, [r4, #8]
 8007366:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800736a:	701a      	strb	r2, [r3, #0]
 800736c:	e7bc      	b.n	80072e8 <ucdr_serialize_endian_uint16_t+0x60>
 800736e:	f10d 0506 	add.w	r5, sp, #6
 8007372:	4632      	mov	r2, r6
 8007374:	4638      	mov	r0, r7
 8007376:	4629      	mov	r1, r5
 8007378:	f00c fb63 	bl	8013a42 <memcpy>
 800737c:	464a      	mov	r2, r9
 800737e:	19a9      	adds	r1, r5, r6
 8007380:	68a0      	ldr	r0, [r4, #8]
 8007382:	f00c fb5e 	bl	8013a42 <memcpy>
 8007386:	e7af      	b.n	80072e8 <ucdr_serialize_endian_uint16_t+0x60>

08007388 <ucdr_deserialize_uint16_t>:
 8007388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800738c:	4604      	mov	r4, r0
 800738e:	460d      	mov	r5, r1
 8007390:	2102      	movs	r1, #2
 8007392:	f001 f81b 	bl	80083cc <ucdr_buffer_alignment>
 8007396:	4601      	mov	r1, r0
 8007398:	4620      	mov	r0, r4
 800739a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800739e:	f001 f85d 	bl	800845c <ucdr_advance_buffer>
 80073a2:	2102      	movs	r1, #2
 80073a4:	4620      	mov	r0, r4
 80073a6:	f000 ffb1 	bl	800830c <ucdr_check_buffer_available_for>
 80073aa:	bb60      	cbnz	r0, 8007406 <ucdr_deserialize_uint16_t+0x7e>
 80073ac:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80073b0:	42be      	cmp	r6, r7
 80073b2:	d923      	bls.n	80073fc <ucdr_deserialize_uint16_t+0x74>
 80073b4:	6923      	ldr	r3, [r4, #16]
 80073b6:	4620      	mov	r0, r4
 80073b8:	60a6      	str	r6, [r4, #8]
 80073ba:	1bf6      	subs	r6, r6, r7
 80073bc:	4433      	add	r3, r6
 80073be:	f1c6 0902 	rsb	r9, r6, #2
 80073c2:	6123      	str	r3, [r4, #16]
 80073c4:	4649      	mov	r1, r9
 80073c6:	f000 ffad 	bl	8008324 <ucdr_check_final_buffer_behavior>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	d034      	beq.n	8007438 <ucdr_deserialize_uint16_t+0xb0>
 80073ce:	7d23      	ldrb	r3, [r4, #20]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d042      	beq.n	800745a <ucdr_deserialize_uint16_t+0xd2>
 80073d4:	787b      	ldrb	r3, [r7, #1]
 80073d6:	702b      	strb	r3, [r5, #0]
 80073d8:	2e00      	cmp	r6, #0
 80073da:	d03a      	beq.n	8007452 <ucdr_deserialize_uint16_t+0xca>
 80073dc:	783b      	ldrb	r3, [r7, #0]
 80073de:	706b      	strb	r3, [r5, #1]
 80073e0:	6923      	ldr	r3, [r4, #16]
 80073e2:	2102      	movs	r1, #2
 80073e4:	68a2      	ldr	r2, [r4, #8]
 80073e6:	3302      	adds	r3, #2
 80073e8:	7da0      	ldrb	r0, [r4, #22]
 80073ea:	444a      	add	r2, r9
 80073ec:	7561      	strb	r1, [r4, #21]
 80073ee:	1b9b      	subs	r3, r3, r6
 80073f0:	f080 0001 	eor.w	r0, r0, #1
 80073f4:	60a2      	str	r2, [r4, #8]
 80073f6:	6123      	str	r3, [r4, #16]
 80073f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073fc:	2102      	movs	r1, #2
 80073fe:	4620      	mov	r0, r4
 8007400:	f000 ff90 	bl	8008324 <ucdr_check_final_buffer_behavior>
 8007404:	b180      	cbz	r0, 8007428 <ucdr_deserialize_uint16_t+0xa0>
 8007406:	7d23      	ldrb	r3, [r4, #20]
 8007408:	2b01      	cmp	r3, #1
 800740a:	68a3      	ldr	r3, [r4, #8]
 800740c:	d011      	beq.n	8007432 <ucdr_deserialize_uint16_t+0xaa>
 800740e:	785b      	ldrb	r3, [r3, #1]
 8007410:	702b      	strb	r3, [r5, #0]
 8007412:	68a3      	ldr	r3, [r4, #8]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	706b      	strb	r3, [r5, #1]
 8007418:	2102      	movs	r1, #2
 800741a:	68a2      	ldr	r2, [r4, #8]
 800741c:	6923      	ldr	r3, [r4, #16]
 800741e:	440a      	add	r2, r1
 8007420:	7561      	strb	r1, [r4, #21]
 8007422:	440b      	add	r3, r1
 8007424:	60a2      	str	r2, [r4, #8]
 8007426:	6123      	str	r3, [r4, #16]
 8007428:	7da0      	ldrb	r0, [r4, #22]
 800742a:	f080 0001 	eor.w	r0, r0, #1
 800742e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	802b      	strh	r3, [r5, #0]
 8007436:	e7ef      	b.n	8007418 <ucdr_deserialize_uint16_t+0x90>
 8007438:	68a2      	ldr	r2, [r4, #8]
 800743a:	6923      	ldr	r3, [r4, #16]
 800743c:	1b92      	subs	r2, r2, r6
 800743e:	7da0      	ldrb	r0, [r4, #22]
 8007440:	1b9b      	subs	r3, r3, r6
 8007442:	f884 8015 	strb.w	r8, [r4, #21]
 8007446:	f080 0001 	eor.w	r0, r0, #1
 800744a:	60a2      	str	r2, [r4, #8]
 800744c:	6123      	str	r3, [r4, #16]
 800744e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007452:	68a3      	ldr	r3, [r4, #8]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	706b      	strb	r3, [r5, #1]
 8007458:	e7c2      	b.n	80073e0 <ucdr_deserialize_uint16_t+0x58>
 800745a:	4639      	mov	r1, r7
 800745c:	4632      	mov	r2, r6
 800745e:	4628      	mov	r0, r5
 8007460:	f00c faef 	bl	8013a42 <memcpy>
 8007464:	464a      	mov	r2, r9
 8007466:	19a8      	adds	r0, r5, r6
 8007468:	68a1      	ldr	r1, [r4, #8]
 800746a:	f00c faea 	bl	8013a42 <memcpy>
 800746e:	e7b7      	b.n	80073e0 <ucdr_deserialize_uint16_t+0x58>

08007470 <ucdr_deserialize_endian_uint16_t>:
 8007470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007474:	4604      	mov	r4, r0
 8007476:	460e      	mov	r6, r1
 8007478:	2102      	movs	r1, #2
 800747a:	4615      	mov	r5, r2
 800747c:	f000 ffa6 	bl	80083cc <ucdr_buffer_alignment>
 8007480:	4601      	mov	r1, r0
 8007482:	4620      	mov	r0, r4
 8007484:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007488:	f000 ffe8 	bl	800845c <ucdr_advance_buffer>
 800748c:	2102      	movs	r1, #2
 800748e:	4620      	mov	r0, r4
 8007490:	f000 ff3c 	bl	800830c <ucdr_check_buffer_available_for>
 8007494:	bb70      	cbnz	r0, 80074f4 <ucdr_deserialize_endian_uint16_t+0x84>
 8007496:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800749a:	454f      	cmp	r7, r9
 800749c:	d925      	bls.n	80074ea <ucdr_deserialize_endian_uint16_t+0x7a>
 800749e:	6923      	ldr	r3, [r4, #16]
 80074a0:	4620      	mov	r0, r4
 80074a2:	60a7      	str	r7, [r4, #8]
 80074a4:	eba7 0709 	sub.w	r7, r7, r9
 80074a8:	443b      	add	r3, r7
 80074aa:	f1c7 0a02 	rsb	sl, r7, #2
 80074ae:	6123      	str	r3, [r4, #16]
 80074b0:	4651      	mov	r1, sl
 80074b2:	f000 ff37 	bl	8008324 <ucdr_check_final_buffer_behavior>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d034      	beq.n	8007524 <ucdr_deserialize_endian_uint16_t+0xb4>
 80074ba:	2e01      	cmp	r6, #1
 80074bc:	d043      	beq.n	8007546 <ucdr_deserialize_endian_uint16_t+0xd6>
 80074be:	f899 3001 	ldrb.w	r3, [r9, #1]
 80074c2:	702b      	strb	r3, [r5, #0]
 80074c4:	2f00      	cmp	r7, #0
 80074c6:	d03a      	beq.n	800753e <ucdr_deserialize_endian_uint16_t+0xce>
 80074c8:	f899 3000 	ldrb.w	r3, [r9]
 80074cc:	706b      	strb	r3, [r5, #1]
 80074ce:	6923      	ldr	r3, [r4, #16]
 80074d0:	2102      	movs	r1, #2
 80074d2:	68a2      	ldr	r2, [r4, #8]
 80074d4:	3302      	adds	r3, #2
 80074d6:	7da0      	ldrb	r0, [r4, #22]
 80074d8:	4452      	add	r2, sl
 80074da:	7561      	strb	r1, [r4, #21]
 80074dc:	1bdb      	subs	r3, r3, r7
 80074de:	f080 0001 	eor.w	r0, r0, #1
 80074e2:	60a2      	str	r2, [r4, #8]
 80074e4:	6123      	str	r3, [r4, #16]
 80074e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ea:	2102      	movs	r1, #2
 80074ec:	4620      	mov	r0, r4
 80074ee:	f000 ff19 	bl	8008324 <ucdr_check_final_buffer_behavior>
 80074f2:	b178      	cbz	r0, 8007514 <ucdr_deserialize_endian_uint16_t+0xa4>
 80074f4:	2e01      	cmp	r6, #1
 80074f6:	68a3      	ldr	r3, [r4, #8]
 80074f8:	d011      	beq.n	800751e <ucdr_deserialize_endian_uint16_t+0xae>
 80074fa:	785b      	ldrb	r3, [r3, #1]
 80074fc:	702b      	strb	r3, [r5, #0]
 80074fe:	68a3      	ldr	r3, [r4, #8]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	706b      	strb	r3, [r5, #1]
 8007504:	2102      	movs	r1, #2
 8007506:	68a2      	ldr	r2, [r4, #8]
 8007508:	6923      	ldr	r3, [r4, #16]
 800750a:	440a      	add	r2, r1
 800750c:	7561      	strb	r1, [r4, #21]
 800750e:	440b      	add	r3, r1
 8007510:	60a2      	str	r2, [r4, #8]
 8007512:	6123      	str	r3, [r4, #16]
 8007514:	7da0      	ldrb	r0, [r4, #22]
 8007516:	f080 0001 	eor.w	r0, r0, #1
 800751a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	802b      	strh	r3, [r5, #0]
 8007522:	e7ef      	b.n	8007504 <ucdr_deserialize_endian_uint16_t+0x94>
 8007524:	68a2      	ldr	r2, [r4, #8]
 8007526:	6923      	ldr	r3, [r4, #16]
 8007528:	1bd2      	subs	r2, r2, r7
 800752a:	7da0      	ldrb	r0, [r4, #22]
 800752c:	1bdb      	subs	r3, r3, r7
 800752e:	f884 8015 	strb.w	r8, [r4, #21]
 8007532:	f080 0001 	eor.w	r0, r0, #1
 8007536:	60a2      	str	r2, [r4, #8]
 8007538:	6123      	str	r3, [r4, #16]
 800753a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800753e:	68a3      	ldr	r3, [r4, #8]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	706b      	strb	r3, [r5, #1]
 8007544:	e7c3      	b.n	80074ce <ucdr_deserialize_endian_uint16_t+0x5e>
 8007546:	4649      	mov	r1, r9
 8007548:	463a      	mov	r2, r7
 800754a:	4628      	mov	r0, r5
 800754c:	f00c fa79 	bl	8013a42 <memcpy>
 8007550:	4652      	mov	r2, sl
 8007552:	19e8      	adds	r0, r5, r7
 8007554:	68a1      	ldr	r1, [r4, #8]
 8007556:	f00c fa74 	bl	8013a42 <memcpy>
 800755a:	e7b8      	b.n	80074ce <ucdr_deserialize_endian_uint16_t+0x5e>

0800755c <ucdr_serialize_uint32_t>:
 800755c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007560:	b082      	sub	sp, #8
 8007562:	4604      	mov	r4, r0
 8007564:	9101      	str	r1, [sp, #4]
 8007566:	2104      	movs	r1, #4
 8007568:	f000 ff30 	bl	80083cc <ucdr_buffer_alignment>
 800756c:	4601      	mov	r1, r0
 800756e:	4620      	mov	r0, r4
 8007570:	7d67      	ldrb	r7, [r4, #21]
 8007572:	f000 ff73 	bl	800845c <ucdr_advance_buffer>
 8007576:	2104      	movs	r1, #4
 8007578:	4620      	mov	r0, r4
 800757a:	f000 fec7 	bl	800830c <ucdr_check_buffer_available_for>
 800757e:	2800      	cmp	r0, #0
 8007580:	d139      	bne.n	80075f6 <ucdr_serialize_uint32_t+0x9a>
 8007582:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8007586:	42ab      	cmp	r3, r5
 8007588:	d930      	bls.n	80075ec <ucdr_serialize_uint32_t+0x90>
 800758a:	1b5e      	subs	r6, r3, r5
 800758c:	60a3      	str	r3, [r4, #8]
 800758e:	6923      	ldr	r3, [r4, #16]
 8007590:	4620      	mov	r0, r4
 8007592:	f1c6 0804 	rsb	r8, r6, #4
 8007596:	4433      	add	r3, r6
 8007598:	4641      	mov	r1, r8
 800759a:	6123      	str	r3, [r4, #16]
 800759c:	f000 fec2 	bl	8008324 <ucdr_check_final_buffer_behavior>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	d04c      	beq.n	800763e <ucdr_serialize_uint32_t+0xe2>
 80075a4:	7d23      	ldrb	r3, [r4, #20]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d063      	beq.n	8007672 <ucdr_serialize_uint32_t+0x116>
 80075aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80075ae:	702b      	strb	r3, [r5, #0]
 80075b0:	2e00      	cmp	r6, #0
 80075b2:	d051      	beq.n	8007658 <ucdr_serialize_uint32_t+0xfc>
 80075b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80075b8:	2e01      	cmp	r6, #1
 80075ba:	706b      	strb	r3, [r5, #1]
 80075bc:	d050      	beq.n	8007660 <ucdr_serialize_uint32_t+0x104>
 80075be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80075c2:	2e02      	cmp	r6, #2
 80075c4:	70ab      	strb	r3, [r5, #2]
 80075c6:	d04f      	beq.n	8007668 <ucdr_serialize_uint32_t+0x10c>
 80075c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80075cc:	70eb      	strb	r3, [r5, #3]
 80075ce:	6923      	ldr	r3, [r4, #16]
 80075d0:	2104      	movs	r1, #4
 80075d2:	68a2      	ldr	r2, [r4, #8]
 80075d4:	3304      	adds	r3, #4
 80075d6:	7da0      	ldrb	r0, [r4, #22]
 80075d8:	4442      	add	r2, r8
 80075da:	7561      	strb	r1, [r4, #21]
 80075dc:	1b9e      	subs	r6, r3, r6
 80075de:	f080 0001 	eor.w	r0, r0, #1
 80075e2:	60a2      	str	r2, [r4, #8]
 80075e4:	6126      	str	r6, [r4, #16]
 80075e6:	b002      	add	sp, #8
 80075e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ec:	2104      	movs	r1, #4
 80075ee:	4620      	mov	r0, r4
 80075f0:	f000 fe98 	bl	8008324 <ucdr_check_final_buffer_behavior>
 80075f4:	b1d0      	cbz	r0, 800762c <ucdr_serialize_uint32_t+0xd0>
 80075f6:	7d23      	ldrb	r3, [r4, #20]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	68a3      	ldr	r3, [r4, #8]
 80075fc:	d01c      	beq.n	8007638 <ucdr_serialize_uint32_t+0xdc>
 80075fe:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8007602:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007606:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800760a:	7018      	strb	r0, [r3, #0]
 800760c:	68a3      	ldr	r3, [r4, #8]
 800760e:	705a      	strb	r2, [r3, #1]
 8007610:	68a3      	ldr	r3, [r4, #8]
 8007612:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007616:	7099      	strb	r1, [r3, #2]
 8007618:	68a3      	ldr	r3, [r4, #8]
 800761a:	70da      	strb	r2, [r3, #3]
 800761c:	2104      	movs	r1, #4
 800761e:	68a2      	ldr	r2, [r4, #8]
 8007620:	6923      	ldr	r3, [r4, #16]
 8007622:	440a      	add	r2, r1
 8007624:	7561      	strb	r1, [r4, #21]
 8007626:	440b      	add	r3, r1
 8007628:	60a2      	str	r2, [r4, #8]
 800762a:	6123      	str	r3, [r4, #16]
 800762c:	7da0      	ldrb	r0, [r4, #22]
 800762e:	f080 0001 	eor.w	r0, r0, #1
 8007632:	b002      	add	sp, #8
 8007634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007638:	9a01      	ldr	r2, [sp, #4]
 800763a:	601a      	str	r2, [r3, #0]
 800763c:	e7ee      	b.n	800761c <ucdr_serialize_uint32_t+0xc0>
 800763e:	68a2      	ldr	r2, [r4, #8]
 8007640:	6923      	ldr	r3, [r4, #16]
 8007642:	7da0      	ldrb	r0, [r4, #22]
 8007644:	1b92      	subs	r2, r2, r6
 8007646:	1b9b      	subs	r3, r3, r6
 8007648:	7567      	strb	r7, [r4, #21]
 800764a:	f080 0001 	eor.w	r0, r0, #1
 800764e:	60a2      	str	r2, [r4, #8]
 8007650:	6123      	str	r3, [r4, #16]
 8007652:	b002      	add	sp, #8
 8007654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007658:	68a3      	ldr	r3, [r4, #8]
 800765a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800765e:	701a      	strb	r2, [r3, #0]
 8007660:	68a3      	ldr	r3, [r4, #8]
 8007662:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007666:	701a      	strb	r2, [r3, #0]
 8007668:	68a3      	ldr	r3, [r4, #8]
 800766a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800766e:	701a      	strb	r2, [r3, #0]
 8007670:	e7ad      	b.n	80075ce <ucdr_serialize_uint32_t+0x72>
 8007672:	4628      	mov	r0, r5
 8007674:	ad01      	add	r5, sp, #4
 8007676:	4632      	mov	r2, r6
 8007678:	4629      	mov	r1, r5
 800767a:	f00c f9e2 	bl	8013a42 <memcpy>
 800767e:	4642      	mov	r2, r8
 8007680:	19a9      	adds	r1, r5, r6
 8007682:	68a0      	ldr	r0, [r4, #8]
 8007684:	f00c f9dd 	bl	8013a42 <memcpy>
 8007688:	e7a1      	b.n	80075ce <ucdr_serialize_uint32_t+0x72>
 800768a:	bf00      	nop

0800768c <ucdr_serialize_endian_uint32_t>:
 800768c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007690:	4604      	mov	r4, r0
 8007692:	b083      	sub	sp, #12
 8007694:	460d      	mov	r5, r1
 8007696:	2104      	movs	r1, #4
 8007698:	9201      	str	r2, [sp, #4]
 800769a:	f000 fe97 	bl	80083cc <ucdr_buffer_alignment>
 800769e:	4601      	mov	r1, r0
 80076a0:	4620      	mov	r0, r4
 80076a2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80076a6:	f000 fed9 	bl	800845c <ucdr_advance_buffer>
 80076aa:	2104      	movs	r1, #4
 80076ac:	4620      	mov	r0, r4
 80076ae:	f000 fe2d 	bl	800830c <ucdr_check_buffer_available_for>
 80076b2:	2800      	cmp	r0, #0
 80076b4:	d138      	bne.n	8007728 <ucdr_serialize_endian_uint32_t+0x9c>
 80076b6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80076ba:	42b7      	cmp	r7, r6
 80076bc:	d92f      	bls.n	800771e <ucdr_serialize_endian_uint32_t+0x92>
 80076be:	6923      	ldr	r3, [r4, #16]
 80076c0:	4620      	mov	r0, r4
 80076c2:	60a7      	str	r7, [r4, #8]
 80076c4:	1bbf      	subs	r7, r7, r6
 80076c6:	443b      	add	r3, r7
 80076c8:	f1c7 0904 	rsb	r9, r7, #4
 80076cc:	6123      	str	r3, [r4, #16]
 80076ce:	4649      	mov	r1, r9
 80076d0:	f000 fe28 	bl	8008324 <ucdr_check_final_buffer_behavior>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d04a      	beq.n	800776e <ucdr_serialize_endian_uint32_t+0xe2>
 80076d8:	2d01      	cmp	r5, #1
 80076da:	d063      	beq.n	80077a4 <ucdr_serialize_endian_uint32_t+0x118>
 80076dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80076e0:	7033      	strb	r3, [r6, #0]
 80076e2:	2f00      	cmp	r7, #0
 80076e4:	d051      	beq.n	800778a <ucdr_serialize_endian_uint32_t+0xfe>
 80076e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80076ea:	2f01      	cmp	r7, #1
 80076ec:	7073      	strb	r3, [r6, #1]
 80076ee:	d050      	beq.n	8007792 <ucdr_serialize_endian_uint32_t+0x106>
 80076f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80076f4:	2f02      	cmp	r7, #2
 80076f6:	70b3      	strb	r3, [r6, #2]
 80076f8:	d04f      	beq.n	800779a <ucdr_serialize_endian_uint32_t+0x10e>
 80076fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80076fe:	70f3      	strb	r3, [r6, #3]
 8007700:	6923      	ldr	r3, [r4, #16]
 8007702:	2104      	movs	r1, #4
 8007704:	68a2      	ldr	r2, [r4, #8]
 8007706:	7da0      	ldrb	r0, [r4, #22]
 8007708:	3304      	adds	r3, #4
 800770a:	444a      	add	r2, r9
 800770c:	7561      	strb	r1, [r4, #21]
 800770e:	1bdb      	subs	r3, r3, r7
 8007710:	f080 0001 	eor.w	r0, r0, #1
 8007714:	60a2      	str	r2, [r4, #8]
 8007716:	6123      	str	r3, [r4, #16]
 8007718:	b003      	add	sp, #12
 800771a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800771e:	2104      	movs	r1, #4
 8007720:	4620      	mov	r0, r4
 8007722:	f000 fdff 	bl	8008324 <ucdr_check_final_buffer_behavior>
 8007726:	b1c8      	cbz	r0, 800775c <ucdr_serialize_endian_uint32_t+0xd0>
 8007728:	2d01      	cmp	r5, #1
 800772a:	68a3      	ldr	r3, [r4, #8]
 800772c:	d01c      	beq.n	8007768 <ucdr_serialize_endian_uint32_t+0xdc>
 800772e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8007732:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007736:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800773a:	7018      	strb	r0, [r3, #0]
 800773c:	68a3      	ldr	r3, [r4, #8]
 800773e:	705a      	strb	r2, [r3, #1]
 8007740:	68a3      	ldr	r3, [r4, #8]
 8007742:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007746:	7099      	strb	r1, [r3, #2]
 8007748:	68a3      	ldr	r3, [r4, #8]
 800774a:	70da      	strb	r2, [r3, #3]
 800774c:	2104      	movs	r1, #4
 800774e:	68a2      	ldr	r2, [r4, #8]
 8007750:	6923      	ldr	r3, [r4, #16]
 8007752:	440a      	add	r2, r1
 8007754:	7561      	strb	r1, [r4, #21]
 8007756:	440b      	add	r3, r1
 8007758:	60a2      	str	r2, [r4, #8]
 800775a:	6123      	str	r3, [r4, #16]
 800775c:	7da0      	ldrb	r0, [r4, #22]
 800775e:	f080 0001 	eor.w	r0, r0, #1
 8007762:	b003      	add	sp, #12
 8007764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007768:	9a01      	ldr	r2, [sp, #4]
 800776a:	601a      	str	r2, [r3, #0]
 800776c:	e7ee      	b.n	800774c <ucdr_serialize_endian_uint32_t+0xc0>
 800776e:	68a2      	ldr	r2, [r4, #8]
 8007770:	6923      	ldr	r3, [r4, #16]
 8007772:	7da0      	ldrb	r0, [r4, #22]
 8007774:	1bd2      	subs	r2, r2, r7
 8007776:	1bdb      	subs	r3, r3, r7
 8007778:	f884 8015 	strb.w	r8, [r4, #21]
 800777c:	f080 0001 	eor.w	r0, r0, #1
 8007780:	60a2      	str	r2, [r4, #8]
 8007782:	6123      	str	r3, [r4, #16]
 8007784:	b003      	add	sp, #12
 8007786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800778a:	68a3      	ldr	r3, [r4, #8]
 800778c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007790:	701a      	strb	r2, [r3, #0]
 8007792:	68a3      	ldr	r3, [r4, #8]
 8007794:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007798:	701a      	strb	r2, [r3, #0]
 800779a:	68a3      	ldr	r3, [r4, #8]
 800779c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80077a0:	701a      	strb	r2, [r3, #0]
 80077a2:	e7ad      	b.n	8007700 <ucdr_serialize_endian_uint32_t+0x74>
 80077a4:	ad01      	add	r5, sp, #4
 80077a6:	463a      	mov	r2, r7
 80077a8:	4630      	mov	r0, r6
 80077aa:	4629      	mov	r1, r5
 80077ac:	f00c f949 	bl	8013a42 <memcpy>
 80077b0:	464a      	mov	r2, r9
 80077b2:	19e9      	adds	r1, r5, r7
 80077b4:	68a0      	ldr	r0, [r4, #8]
 80077b6:	f00c f944 	bl	8013a42 <memcpy>
 80077ba:	e7a1      	b.n	8007700 <ucdr_serialize_endian_uint32_t+0x74>

080077bc <ucdr_deserialize_uint32_t>:
 80077bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077c0:	4604      	mov	r4, r0
 80077c2:	460d      	mov	r5, r1
 80077c4:	2104      	movs	r1, #4
 80077c6:	f000 fe01 	bl	80083cc <ucdr_buffer_alignment>
 80077ca:	4601      	mov	r1, r0
 80077cc:	4620      	mov	r0, r4
 80077ce:	f894 8015 	ldrb.w	r8, [r4, #21]
 80077d2:	f000 fe43 	bl	800845c <ucdr_advance_buffer>
 80077d6:	2104      	movs	r1, #4
 80077d8:	4620      	mov	r0, r4
 80077da:	f000 fd97 	bl	800830c <ucdr_check_buffer_available_for>
 80077de:	2800      	cmp	r0, #0
 80077e0:	d138      	bne.n	8007854 <ucdr_deserialize_uint32_t+0x98>
 80077e2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80077e6:	42b7      	cmp	r7, r6
 80077e8:	d92f      	bls.n	800784a <ucdr_deserialize_uint32_t+0x8e>
 80077ea:	6923      	ldr	r3, [r4, #16]
 80077ec:	4620      	mov	r0, r4
 80077ee:	60a7      	str	r7, [r4, #8]
 80077f0:	1bbf      	subs	r7, r7, r6
 80077f2:	443b      	add	r3, r7
 80077f4:	f1c7 0904 	rsb	r9, r7, #4
 80077f8:	6123      	str	r3, [r4, #16]
 80077fa:	4649      	mov	r1, r9
 80077fc:	f000 fd92 	bl	8008324 <ucdr_check_final_buffer_behavior>
 8007800:	2800      	cmp	r0, #0
 8007802:	d046      	beq.n	8007892 <ucdr_deserialize_uint32_t+0xd6>
 8007804:	7d23      	ldrb	r3, [r4, #20]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d05c      	beq.n	80078c4 <ucdr_deserialize_uint32_t+0x108>
 800780a:	78f3      	ldrb	r3, [r6, #3]
 800780c:	702b      	strb	r3, [r5, #0]
 800780e:	2f00      	cmp	r7, #0
 8007810:	d04c      	beq.n	80078ac <ucdr_deserialize_uint32_t+0xf0>
 8007812:	78b3      	ldrb	r3, [r6, #2]
 8007814:	2f01      	cmp	r7, #1
 8007816:	706b      	strb	r3, [r5, #1]
 8007818:	f105 0302 	add.w	r3, r5, #2
 800781c:	d04a      	beq.n	80078b4 <ucdr_deserialize_uint32_t+0xf8>
 800781e:	7873      	ldrb	r3, [r6, #1]
 8007820:	2f02      	cmp	r7, #2
 8007822:	70ab      	strb	r3, [r5, #2]
 8007824:	f105 0303 	add.w	r3, r5, #3
 8007828:	d048      	beq.n	80078bc <ucdr_deserialize_uint32_t+0x100>
 800782a:	7833      	ldrb	r3, [r6, #0]
 800782c:	70eb      	strb	r3, [r5, #3]
 800782e:	6923      	ldr	r3, [r4, #16]
 8007830:	2104      	movs	r1, #4
 8007832:	68a2      	ldr	r2, [r4, #8]
 8007834:	3304      	adds	r3, #4
 8007836:	7da0      	ldrb	r0, [r4, #22]
 8007838:	444a      	add	r2, r9
 800783a:	7561      	strb	r1, [r4, #21]
 800783c:	1bdb      	subs	r3, r3, r7
 800783e:	f080 0001 	eor.w	r0, r0, #1
 8007842:	60a2      	str	r2, [r4, #8]
 8007844:	6123      	str	r3, [r4, #16]
 8007846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800784a:	2104      	movs	r1, #4
 800784c:	4620      	mov	r0, r4
 800784e:	f000 fd69 	bl	8008324 <ucdr_check_final_buffer_behavior>
 8007852:	b1b0      	cbz	r0, 8007882 <ucdr_deserialize_uint32_t+0xc6>
 8007854:	7d23      	ldrb	r3, [r4, #20]
 8007856:	2b01      	cmp	r3, #1
 8007858:	68a3      	ldr	r3, [r4, #8]
 800785a:	d017      	beq.n	800788c <ucdr_deserialize_uint32_t+0xd0>
 800785c:	78db      	ldrb	r3, [r3, #3]
 800785e:	702b      	strb	r3, [r5, #0]
 8007860:	68a3      	ldr	r3, [r4, #8]
 8007862:	789b      	ldrb	r3, [r3, #2]
 8007864:	706b      	strb	r3, [r5, #1]
 8007866:	68a3      	ldr	r3, [r4, #8]
 8007868:	785b      	ldrb	r3, [r3, #1]
 800786a:	70ab      	strb	r3, [r5, #2]
 800786c:	68a3      	ldr	r3, [r4, #8]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	70eb      	strb	r3, [r5, #3]
 8007872:	2104      	movs	r1, #4
 8007874:	68a2      	ldr	r2, [r4, #8]
 8007876:	6923      	ldr	r3, [r4, #16]
 8007878:	440a      	add	r2, r1
 800787a:	7561      	strb	r1, [r4, #21]
 800787c:	440b      	add	r3, r1
 800787e:	60a2      	str	r2, [r4, #8]
 8007880:	6123      	str	r3, [r4, #16]
 8007882:	7da0      	ldrb	r0, [r4, #22]
 8007884:	f080 0001 	eor.w	r0, r0, #1
 8007888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	602b      	str	r3, [r5, #0]
 8007890:	e7ef      	b.n	8007872 <ucdr_deserialize_uint32_t+0xb6>
 8007892:	68a2      	ldr	r2, [r4, #8]
 8007894:	6923      	ldr	r3, [r4, #16]
 8007896:	1bd2      	subs	r2, r2, r7
 8007898:	7da0      	ldrb	r0, [r4, #22]
 800789a:	1bdb      	subs	r3, r3, r7
 800789c:	f884 8015 	strb.w	r8, [r4, #21]
 80078a0:	f080 0001 	eor.w	r0, r0, #1
 80078a4:	60a2      	str	r2, [r4, #8]
 80078a6:	6123      	str	r3, [r4, #16]
 80078a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078ac:	68a3      	ldr	r3, [r4, #8]
 80078ae:	789b      	ldrb	r3, [r3, #2]
 80078b0:	706b      	strb	r3, [r5, #1]
 80078b2:	1cab      	adds	r3, r5, #2
 80078b4:	68a2      	ldr	r2, [r4, #8]
 80078b6:	7852      	ldrb	r2, [r2, #1]
 80078b8:	f803 2b01 	strb.w	r2, [r3], #1
 80078bc:	68a2      	ldr	r2, [r4, #8]
 80078be:	7812      	ldrb	r2, [r2, #0]
 80078c0:	701a      	strb	r2, [r3, #0]
 80078c2:	e7b4      	b.n	800782e <ucdr_deserialize_uint32_t+0x72>
 80078c4:	4631      	mov	r1, r6
 80078c6:	463a      	mov	r2, r7
 80078c8:	4628      	mov	r0, r5
 80078ca:	f00c f8ba 	bl	8013a42 <memcpy>
 80078ce:	464a      	mov	r2, r9
 80078d0:	19e8      	adds	r0, r5, r7
 80078d2:	68a1      	ldr	r1, [r4, #8]
 80078d4:	f00c f8b5 	bl	8013a42 <memcpy>
 80078d8:	e7a9      	b.n	800782e <ucdr_deserialize_uint32_t+0x72>
 80078da:	bf00      	nop

080078dc <ucdr_deserialize_endian_uint32_t>:
 80078dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078e0:	4604      	mov	r4, r0
 80078e2:	460e      	mov	r6, r1
 80078e4:	2104      	movs	r1, #4
 80078e6:	4615      	mov	r5, r2
 80078e8:	f000 fd70 	bl	80083cc <ucdr_buffer_alignment>
 80078ec:	4601      	mov	r1, r0
 80078ee:	4620      	mov	r0, r4
 80078f0:	f894 8015 	ldrb.w	r8, [r4, #21]
 80078f4:	f000 fdb2 	bl	800845c <ucdr_advance_buffer>
 80078f8:	2104      	movs	r1, #4
 80078fa:	4620      	mov	r0, r4
 80078fc:	f000 fd06 	bl	800830c <ucdr_check_buffer_available_for>
 8007900:	2800      	cmp	r0, #0
 8007902:	d13c      	bne.n	800797e <ucdr_deserialize_endian_uint32_t+0xa2>
 8007904:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8007908:	42bb      	cmp	r3, r7
 800790a:	d933      	bls.n	8007974 <ucdr_deserialize_endian_uint32_t+0x98>
 800790c:	eba3 0907 	sub.w	r9, r3, r7
 8007910:	60a3      	str	r3, [r4, #8]
 8007912:	6923      	ldr	r3, [r4, #16]
 8007914:	4620      	mov	r0, r4
 8007916:	f1c9 0a04 	rsb	sl, r9, #4
 800791a:	444b      	add	r3, r9
 800791c:	4651      	mov	r1, sl
 800791e:	6123      	str	r3, [r4, #16]
 8007920:	f000 fd00 	bl	8008324 <ucdr_check_final_buffer_behavior>
 8007924:	2800      	cmp	r0, #0
 8007926:	d048      	beq.n	80079ba <ucdr_deserialize_endian_uint32_t+0xde>
 8007928:	2e01      	cmp	r6, #1
 800792a:	d061      	beq.n	80079f0 <ucdr_deserialize_endian_uint32_t+0x114>
 800792c:	78fb      	ldrb	r3, [r7, #3]
 800792e:	702b      	strb	r3, [r5, #0]
 8007930:	f1b9 0f00 	cmp.w	r9, #0
 8007934:	d050      	beq.n	80079d8 <ucdr_deserialize_endian_uint32_t+0xfc>
 8007936:	78bb      	ldrb	r3, [r7, #2]
 8007938:	f1b9 0f01 	cmp.w	r9, #1
 800793c:	706b      	strb	r3, [r5, #1]
 800793e:	f105 0302 	add.w	r3, r5, #2
 8007942:	d04d      	beq.n	80079e0 <ucdr_deserialize_endian_uint32_t+0x104>
 8007944:	787b      	ldrb	r3, [r7, #1]
 8007946:	f1b9 0f02 	cmp.w	r9, #2
 800794a:	70ab      	strb	r3, [r5, #2]
 800794c:	f105 0303 	add.w	r3, r5, #3
 8007950:	d04a      	beq.n	80079e8 <ucdr_deserialize_endian_uint32_t+0x10c>
 8007952:	783b      	ldrb	r3, [r7, #0]
 8007954:	70eb      	strb	r3, [r5, #3]
 8007956:	6923      	ldr	r3, [r4, #16]
 8007958:	2104      	movs	r1, #4
 800795a:	68a2      	ldr	r2, [r4, #8]
 800795c:	3304      	adds	r3, #4
 800795e:	7da0      	ldrb	r0, [r4, #22]
 8007960:	4452      	add	r2, sl
 8007962:	7561      	strb	r1, [r4, #21]
 8007964:	eba3 0309 	sub.w	r3, r3, r9
 8007968:	f080 0001 	eor.w	r0, r0, #1
 800796c:	60a2      	str	r2, [r4, #8]
 800796e:	6123      	str	r3, [r4, #16]
 8007970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007974:	2104      	movs	r1, #4
 8007976:	4620      	mov	r0, r4
 8007978:	f000 fcd4 	bl	8008324 <ucdr_check_final_buffer_behavior>
 800797c:	b1a8      	cbz	r0, 80079aa <ucdr_deserialize_endian_uint32_t+0xce>
 800797e:	2e01      	cmp	r6, #1
 8007980:	68a3      	ldr	r3, [r4, #8]
 8007982:	d017      	beq.n	80079b4 <ucdr_deserialize_endian_uint32_t+0xd8>
 8007984:	78db      	ldrb	r3, [r3, #3]
 8007986:	702b      	strb	r3, [r5, #0]
 8007988:	68a3      	ldr	r3, [r4, #8]
 800798a:	789b      	ldrb	r3, [r3, #2]
 800798c:	706b      	strb	r3, [r5, #1]
 800798e:	68a3      	ldr	r3, [r4, #8]
 8007990:	785b      	ldrb	r3, [r3, #1]
 8007992:	70ab      	strb	r3, [r5, #2]
 8007994:	68a3      	ldr	r3, [r4, #8]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	70eb      	strb	r3, [r5, #3]
 800799a:	2104      	movs	r1, #4
 800799c:	68a2      	ldr	r2, [r4, #8]
 800799e:	6923      	ldr	r3, [r4, #16]
 80079a0:	440a      	add	r2, r1
 80079a2:	7561      	strb	r1, [r4, #21]
 80079a4:	440b      	add	r3, r1
 80079a6:	60a2      	str	r2, [r4, #8]
 80079a8:	6123      	str	r3, [r4, #16]
 80079aa:	7da0      	ldrb	r0, [r4, #22]
 80079ac:	f080 0001 	eor.w	r0, r0, #1
 80079b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	602b      	str	r3, [r5, #0]
 80079b8:	e7ef      	b.n	800799a <ucdr_deserialize_endian_uint32_t+0xbe>
 80079ba:	68a2      	ldr	r2, [r4, #8]
 80079bc:	6923      	ldr	r3, [r4, #16]
 80079be:	eba2 0209 	sub.w	r2, r2, r9
 80079c2:	7da0      	ldrb	r0, [r4, #22]
 80079c4:	eba3 0309 	sub.w	r3, r3, r9
 80079c8:	f884 8015 	strb.w	r8, [r4, #21]
 80079cc:	f080 0001 	eor.w	r0, r0, #1
 80079d0:	60a2      	str	r2, [r4, #8]
 80079d2:	6123      	str	r3, [r4, #16]
 80079d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d8:	68a3      	ldr	r3, [r4, #8]
 80079da:	789b      	ldrb	r3, [r3, #2]
 80079dc:	706b      	strb	r3, [r5, #1]
 80079de:	1cab      	adds	r3, r5, #2
 80079e0:	68a2      	ldr	r2, [r4, #8]
 80079e2:	7852      	ldrb	r2, [r2, #1]
 80079e4:	f803 2b01 	strb.w	r2, [r3], #1
 80079e8:	68a2      	ldr	r2, [r4, #8]
 80079ea:	7812      	ldrb	r2, [r2, #0]
 80079ec:	701a      	strb	r2, [r3, #0]
 80079ee:	e7b2      	b.n	8007956 <ucdr_deserialize_endian_uint32_t+0x7a>
 80079f0:	4639      	mov	r1, r7
 80079f2:	464a      	mov	r2, r9
 80079f4:	4628      	mov	r0, r5
 80079f6:	f00c f824 	bl	8013a42 <memcpy>
 80079fa:	4652      	mov	r2, sl
 80079fc:	eb05 0009 	add.w	r0, r5, r9
 8007a00:	68a1      	ldr	r1, [r4, #8]
 8007a02:	f00c f81e 	bl	8013a42 <memcpy>
 8007a06:	e7a6      	b.n	8007956 <ucdr_deserialize_endian_uint32_t+0x7a>

08007a08 <ucdr_serialize_uint64_t>:
 8007a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a0c:	4604      	mov	r4, r0
 8007a0e:	b082      	sub	sp, #8
 8007a10:	2108      	movs	r1, #8
 8007a12:	e9cd 2300 	strd	r2, r3, [sp]
 8007a16:	f000 fcd9 	bl	80083cc <ucdr_buffer_alignment>
 8007a1a:	4601      	mov	r1, r0
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	7d67      	ldrb	r7, [r4, #21]
 8007a20:	f000 fd1c 	bl	800845c <ucdr_advance_buffer>
 8007a24:	2108      	movs	r1, #8
 8007a26:	4620      	mov	r0, r4
 8007a28:	f000 fc70 	bl	800830c <ucdr_check_buffer_available_for>
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	d14e      	bne.n	8007ace <ucdr_serialize_uint64_t+0xc6>
 8007a30:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8007a34:	42ab      	cmp	r3, r5
 8007a36:	d945      	bls.n	8007ac4 <ucdr_serialize_uint64_t+0xbc>
 8007a38:	1b5e      	subs	r6, r3, r5
 8007a3a:	60a3      	str	r3, [r4, #8]
 8007a3c:	6923      	ldr	r3, [r4, #16]
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f1c6 0808 	rsb	r8, r6, #8
 8007a44:	4433      	add	r3, r6
 8007a46:	4641      	mov	r1, r8
 8007a48:	6123      	str	r3, [r4, #16]
 8007a4a:	f000 fc6b 	bl	8008324 <ucdr_check_final_buffer_behavior>
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d074      	beq.n	8007b3c <ucdr_serialize_uint64_t+0x134>
 8007a52:	7d23      	ldrb	r3, [r4, #20]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	f000 809b 	beq.w	8007b90 <ucdr_serialize_uint64_t+0x188>
 8007a5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007a5e:	702b      	strb	r3, [r5, #0]
 8007a60:	2e00      	cmp	r6, #0
 8007a62:	d078      	beq.n	8007b56 <ucdr_serialize_uint64_t+0x14e>
 8007a64:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007a68:	2e01      	cmp	r6, #1
 8007a6a:	706b      	strb	r3, [r5, #1]
 8007a6c:	d077      	beq.n	8007b5e <ucdr_serialize_uint64_t+0x156>
 8007a6e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007a72:	2e02      	cmp	r6, #2
 8007a74:	70ab      	strb	r3, [r5, #2]
 8007a76:	d076      	beq.n	8007b66 <ucdr_serialize_uint64_t+0x15e>
 8007a78:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007a7c:	2e03      	cmp	r6, #3
 8007a7e:	70eb      	strb	r3, [r5, #3]
 8007a80:	d075      	beq.n	8007b6e <ucdr_serialize_uint64_t+0x166>
 8007a82:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007a86:	2e04      	cmp	r6, #4
 8007a88:	712b      	strb	r3, [r5, #4]
 8007a8a:	d074      	beq.n	8007b76 <ucdr_serialize_uint64_t+0x16e>
 8007a8c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8007a90:	2e05      	cmp	r6, #5
 8007a92:	716b      	strb	r3, [r5, #5]
 8007a94:	d073      	beq.n	8007b7e <ucdr_serialize_uint64_t+0x176>
 8007a96:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8007a9a:	2e06      	cmp	r6, #6
 8007a9c:	71ab      	strb	r3, [r5, #6]
 8007a9e:	d072      	beq.n	8007b86 <ucdr_serialize_uint64_t+0x17e>
 8007aa0:	f89d 3000 	ldrb.w	r3, [sp]
 8007aa4:	71eb      	strb	r3, [r5, #7]
 8007aa6:	6923      	ldr	r3, [r4, #16]
 8007aa8:	2108      	movs	r1, #8
 8007aaa:	68a2      	ldr	r2, [r4, #8]
 8007aac:	3308      	adds	r3, #8
 8007aae:	7da0      	ldrb	r0, [r4, #22]
 8007ab0:	4442      	add	r2, r8
 8007ab2:	7561      	strb	r1, [r4, #21]
 8007ab4:	1b9e      	subs	r6, r3, r6
 8007ab6:	f080 0001 	eor.w	r0, r0, #1
 8007aba:	60a2      	str	r2, [r4, #8]
 8007abc:	6126      	str	r6, [r4, #16]
 8007abe:	b002      	add	sp, #8
 8007ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ac4:	2108      	movs	r1, #8
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f000 fc2c 	bl	8008324 <ucdr_check_final_buffer_behavior>
 8007acc:	b350      	cbz	r0, 8007b24 <ucdr_serialize_uint64_t+0x11c>
 8007ace:	7d23      	ldrb	r3, [r4, #20]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d02d      	beq.n	8007b30 <ucdr_serialize_uint64_t+0x128>
 8007ad4:	68a3      	ldr	r3, [r4, #8]
 8007ad6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8007ada:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007ade:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8007ae2:	7018      	strb	r0, [r3, #0]
 8007ae4:	68a3      	ldr	r3, [r4, #8]
 8007ae6:	705a      	strb	r2, [r3, #1]
 8007ae8:	68a3      	ldr	r3, [r4, #8]
 8007aea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007aee:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8007af2:	7099      	strb	r1, [r3, #2]
 8007af4:	68a3      	ldr	r3, [r4, #8]
 8007af6:	70da      	strb	r2, [r3, #3]
 8007af8:	68a3      	ldr	r3, [r4, #8]
 8007afa:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8007afe:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8007b02:	7118      	strb	r0, [r3, #4]
 8007b04:	68a3      	ldr	r3, [r4, #8]
 8007b06:	715a      	strb	r2, [r3, #5]
 8007b08:	68a3      	ldr	r3, [r4, #8]
 8007b0a:	f89d 2000 	ldrb.w	r2, [sp]
 8007b0e:	7199      	strb	r1, [r3, #6]
 8007b10:	68a3      	ldr	r3, [r4, #8]
 8007b12:	71da      	strb	r2, [r3, #7]
 8007b14:	2108      	movs	r1, #8
 8007b16:	68a2      	ldr	r2, [r4, #8]
 8007b18:	6923      	ldr	r3, [r4, #16]
 8007b1a:	440a      	add	r2, r1
 8007b1c:	7561      	strb	r1, [r4, #21]
 8007b1e:	440b      	add	r3, r1
 8007b20:	60a2      	str	r2, [r4, #8]
 8007b22:	6123      	str	r3, [r4, #16]
 8007b24:	7da0      	ldrb	r0, [r4, #22]
 8007b26:	f080 0001 	eor.w	r0, r0, #1
 8007b2a:	b002      	add	sp, #8
 8007b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b30:	466b      	mov	r3, sp
 8007b32:	68a2      	ldr	r2, [r4, #8]
 8007b34:	cb03      	ldmia	r3!, {r0, r1}
 8007b36:	6010      	str	r0, [r2, #0]
 8007b38:	6051      	str	r1, [r2, #4]
 8007b3a:	e7eb      	b.n	8007b14 <ucdr_serialize_uint64_t+0x10c>
 8007b3c:	68a2      	ldr	r2, [r4, #8]
 8007b3e:	6923      	ldr	r3, [r4, #16]
 8007b40:	7da0      	ldrb	r0, [r4, #22]
 8007b42:	1b92      	subs	r2, r2, r6
 8007b44:	1b9b      	subs	r3, r3, r6
 8007b46:	7567      	strb	r7, [r4, #21]
 8007b48:	f080 0001 	eor.w	r0, r0, #1
 8007b4c:	60a2      	str	r2, [r4, #8]
 8007b4e:	6123      	str	r3, [r4, #16]
 8007b50:	b002      	add	sp, #8
 8007b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b56:	68a3      	ldr	r3, [r4, #8]
 8007b58:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007b5c:	701a      	strb	r2, [r3, #0]
 8007b5e:	68a3      	ldr	r3, [r4, #8]
 8007b60:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007b64:	701a      	strb	r2, [r3, #0]
 8007b66:	68a3      	ldr	r3, [r4, #8]
 8007b68:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007b6c:	701a      	strb	r2, [r3, #0]
 8007b6e:	68a3      	ldr	r3, [r4, #8]
 8007b70:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8007b74:	701a      	strb	r2, [r3, #0]
 8007b76:	68a3      	ldr	r3, [r4, #8]
 8007b78:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8007b7c:	701a      	strb	r2, [r3, #0]
 8007b7e:	68a3      	ldr	r3, [r4, #8]
 8007b80:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8007b84:	701a      	strb	r2, [r3, #0]
 8007b86:	68a3      	ldr	r3, [r4, #8]
 8007b88:	f89d 2000 	ldrb.w	r2, [sp]
 8007b8c:	701a      	strb	r2, [r3, #0]
 8007b8e:	e78a      	b.n	8007aa6 <ucdr_serialize_uint64_t+0x9e>
 8007b90:	4628      	mov	r0, r5
 8007b92:	466d      	mov	r5, sp
 8007b94:	4632      	mov	r2, r6
 8007b96:	4629      	mov	r1, r5
 8007b98:	f00b ff53 	bl	8013a42 <memcpy>
 8007b9c:	4642      	mov	r2, r8
 8007b9e:	19a9      	adds	r1, r5, r6
 8007ba0:	68a0      	ldr	r0, [r4, #8]
 8007ba2:	f00b ff4e 	bl	8013a42 <memcpy>
 8007ba6:	e77e      	b.n	8007aa6 <ucdr_serialize_uint64_t+0x9e>

08007ba8 <ucdr_serialize_int16_t>:
 8007ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bac:	460b      	mov	r3, r1
 8007bae:	b082      	sub	sp, #8
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	2102      	movs	r1, #2
 8007bb4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8007bb8:	f000 fc08 	bl	80083cc <ucdr_buffer_alignment>
 8007bbc:	4601      	mov	r1, r0
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	7d67      	ldrb	r7, [r4, #21]
 8007bc2:	f000 fc4b 	bl	800845c <ucdr_advance_buffer>
 8007bc6:	2102      	movs	r1, #2
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f000 fb9f 	bl	800830c <ucdr_check_buffer_available_for>
 8007bce:	bb78      	cbnz	r0, 8007c30 <ucdr_serialize_int16_t+0x88>
 8007bd0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8007bd4:	42ab      	cmp	r3, r5
 8007bd6:	d926      	bls.n	8007c26 <ucdr_serialize_int16_t+0x7e>
 8007bd8:	1b5e      	subs	r6, r3, r5
 8007bda:	60a3      	str	r3, [r4, #8]
 8007bdc:	6923      	ldr	r3, [r4, #16]
 8007bde:	4620      	mov	r0, r4
 8007be0:	f1c6 0802 	rsb	r8, r6, #2
 8007be4:	4433      	add	r3, r6
 8007be6:	4641      	mov	r1, r8
 8007be8:	6123      	str	r3, [r4, #16]
 8007bea:	f000 fb9b 	bl	8008324 <ucdr_check_final_buffer_behavior>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d03b      	beq.n	8007c6a <ucdr_serialize_int16_t+0xc2>
 8007bf2:	7d23      	ldrb	r3, [r4, #20]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d04a      	beq.n	8007c8e <ucdr_serialize_int16_t+0xe6>
 8007bf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007bfc:	702b      	strb	r3, [r5, #0]
 8007bfe:	2e00      	cmp	r6, #0
 8007c00:	d040      	beq.n	8007c84 <ucdr_serialize_int16_t+0xdc>
 8007c02:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007c06:	706b      	strb	r3, [r5, #1]
 8007c08:	6923      	ldr	r3, [r4, #16]
 8007c0a:	2102      	movs	r1, #2
 8007c0c:	68a2      	ldr	r2, [r4, #8]
 8007c0e:	3302      	adds	r3, #2
 8007c10:	7da0      	ldrb	r0, [r4, #22]
 8007c12:	4442      	add	r2, r8
 8007c14:	7561      	strb	r1, [r4, #21]
 8007c16:	1b9e      	subs	r6, r3, r6
 8007c18:	f080 0001 	eor.w	r0, r0, #1
 8007c1c:	60a2      	str	r2, [r4, #8]
 8007c1e:	6126      	str	r6, [r4, #16]
 8007c20:	b002      	add	sp, #8
 8007c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c26:	2102      	movs	r1, #2
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f000 fb7b 	bl	8008324 <ucdr_check_final_buffer_behavior>
 8007c2e:	b190      	cbz	r0, 8007c56 <ucdr_serialize_int16_t+0xae>
 8007c30:	7d23      	ldrb	r3, [r4, #20]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	68a3      	ldr	r3, [r4, #8]
 8007c36:	d014      	beq.n	8007c62 <ucdr_serialize_int16_t+0xba>
 8007c38:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8007c3c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007c40:	7019      	strb	r1, [r3, #0]
 8007c42:	68a3      	ldr	r3, [r4, #8]
 8007c44:	705a      	strb	r2, [r3, #1]
 8007c46:	2102      	movs	r1, #2
 8007c48:	68a2      	ldr	r2, [r4, #8]
 8007c4a:	6923      	ldr	r3, [r4, #16]
 8007c4c:	440a      	add	r2, r1
 8007c4e:	7561      	strb	r1, [r4, #21]
 8007c50:	440b      	add	r3, r1
 8007c52:	60a2      	str	r2, [r4, #8]
 8007c54:	6123      	str	r3, [r4, #16]
 8007c56:	7da0      	ldrb	r0, [r4, #22]
 8007c58:	f080 0001 	eor.w	r0, r0, #1
 8007c5c:	b002      	add	sp, #8
 8007c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c62:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007c66:	801a      	strh	r2, [r3, #0]
 8007c68:	e7ed      	b.n	8007c46 <ucdr_serialize_int16_t+0x9e>
 8007c6a:	68a2      	ldr	r2, [r4, #8]
 8007c6c:	6923      	ldr	r3, [r4, #16]
 8007c6e:	7da0      	ldrb	r0, [r4, #22]
 8007c70:	1b92      	subs	r2, r2, r6
 8007c72:	1b9b      	subs	r3, r3, r6
 8007c74:	7567      	strb	r7, [r4, #21]
 8007c76:	f080 0001 	eor.w	r0, r0, #1
 8007c7a:	60a2      	str	r2, [r4, #8]
 8007c7c:	6123      	str	r3, [r4, #16]
 8007c7e:	b002      	add	sp, #8
 8007c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c84:	68a3      	ldr	r3, [r4, #8]
 8007c86:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007c8a:	701a      	strb	r2, [r3, #0]
 8007c8c:	e7bc      	b.n	8007c08 <ucdr_serialize_int16_t+0x60>
 8007c8e:	4628      	mov	r0, r5
 8007c90:	f10d 0506 	add.w	r5, sp, #6
 8007c94:	4632      	mov	r2, r6
 8007c96:	4629      	mov	r1, r5
 8007c98:	f00b fed3 	bl	8013a42 <memcpy>
 8007c9c:	4642      	mov	r2, r8
 8007c9e:	19a9      	adds	r1, r5, r6
 8007ca0:	68a0      	ldr	r0, [r4, #8]
 8007ca2:	f00b fece 	bl	8013a42 <memcpy>
 8007ca6:	e7af      	b.n	8007c08 <ucdr_serialize_int16_t+0x60>

08007ca8 <ucdr_deserialize_int16_t>:
 8007ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cac:	4604      	mov	r4, r0
 8007cae:	460d      	mov	r5, r1
 8007cb0:	2102      	movs	r1, #2
 8007cb2:	f000 fb8b 	bl	80083cc <ucdr_buffer_alignment>
 8007cb6:	4601      	mov	r1, r0
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007cbe:	f000 fbcd 	bl	800845c <ucdr_advance_buffer>
 8007cc2:	2102      	movs	r1, #2
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	f000 fb21 	bl	800830c <ucdr_check_buffer_available_for>
 8007cca:	bb60      	cbnz	r0, 8007d26 <ucdr_deserialize_int16_t+0x7e>
 8007ccc:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8007cd0:	42be      	cmp	r6, r7
 8007cd2:	d923      	bls.n	8007d1c <ucdr_deserialize_int16_t+0x74>
 8007cd4:	6923      	ldr	r3, [r4, #16]
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	60a6      	str	r6, [r4, #8]
 8007cda:	1bf6      	subs	r6, r6, r7
 8007cdc:	4433      	add	r3, r6
 8007cde:	f1c6 0902 	rsb	r9, r6, #2
 8007ce2:	6123      	str	r3, [r4, #16]
 8007ce4:	4649      	mov	r1, r9
 8007ce6:	f000 fb1d 	bl	8008324 <ucdr_check_final_buffer_behavior>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d034      	beq.n	8007d58 <ucdr_deserialize_int16_t+0xb0>
 8007cee:	7d23      	ldrb	r3, [r4, #20]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d042      	beq.n	8007d7a <ucdr_deserialize_int16_t+0xd2>
 8007cf4:	787b      	ldrb	r3, [r7, #1]
 8007cf6:	702b      	strb	r3, [r5, #0]
 8007cf8:	2e00      	cmp	r6, #0
 8007cfa:	d03a      	beq.n	8007d72 <ucdr_deserialize_int16_t+0xca>
 8007cfc:	783b      	ldrb	r3, [r7, #0]
 8007cfe:	706b      	strb	r3, [r5, #1]
 8007d00:	6923      	ldr	r3, [r4, #16]
 8007d02:	2102      	movs	r1, #2
 8007d04:	68a2      	ldr	r2, [r4, #8]
 8007d06:	3302      	adds	r3, #2
 8007d08:	7da0      	ldrb	r0, [r4, #22]
 8007d0a:	444a      	add	r2, r9
 8007d0c:	7561      	strb	r1, [r4, #21]
 8007d0e:	1b9b      	subs	r3, r3, r6
 8007d10:	f080 0001 	eor.w	r0, r0, #1
 8007d14:	60a2      	str	r2, [r4, #8]
 8007d16:	6123      	str	r3, [r4, #16]
 8007d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d1c:	2102      	movs	r1, #2
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f000 fb00 	bl	8008324 <ucdr_check_final_buffer_behavior>
 8007d24:	b180      	cbz	r0, 8007d48 <ucdr_deserialize_int16_t+0xa0>
 8007d26:	7d23      	ldrb	r3, [r4, #20]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	68a3      	ldr	r3, [r4, #8]
 8007d2c:	d011      	beq.n	8007d52 <ucdr_deserialize_int16_t+0xaa>
 8007d2e:	785b      	ldrb	r3, [r3, #1]
 8007d30:	702b      	strb	r3, [r5, #0]
 8007d32:	68a3      	ldr	r3, [r4, #8]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	706b      	strb	r3, [r5, #1]
 8007d38:	2102      	movs	r1, #2
 8007d3a:	68a2      	ldr	r2, [r4, #8]
 8007d3c:	6923      	ldr	r3, [r4, #16]
 8007d3e:	440a      	add	r2, r1
 8007d40:	7561      	strb	r1, [r4, #21]
 8007d42:	440b      	add	r3, r1
 8007d44:	60a2      	str	r2, [r4, #8]
 8007d46:	6123      	str	r3, [r4, #16]
 8007d48:	7da0      	ldrb	r0, [r4, #22]
 8007d4a:	f080 0001 	eor.w	r0, r0, #1
 8007d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d52:	881b      	ldrh	r3, [r3, #0]
 8007d54:	802b      	strh	r3, [r5, #0]
 8007d56:	e7ef      	b.n	8007d38 <ucdr_deserialize_int16_t+0x90>
 8007d58:	68a2      	ldr	r2, [r4, #8]
 8007d5a:	6923      	ldr	r3, [r4, #16]
 8007d5c:	1b92      	subs	r2, r2, r6
 8007d5e:	7da0      	ldrb	r0, [r4, #22]
 8007d60:	1b9b      	subs	r3, r3, r6
 8007d62:	f884 8015 	strb.w	r8, [r4, #21]
 8007d66:	f080 0001 	eor.w	r0, r0, #1
 8007d6a:	60a2      	str	r2, [r4, #8]
 8007d6c:	6123      	str	r3, [r4, #16]
 8007d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d72:	68a3      	ldr	r3, [r4, #8]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	706b      	strb	r3, [r5, #1]
 8007d78:	e7c2      	b.n	8007d00 <ucdr_deserialize_int16_t+0x58>
 8007d7a:	4639      	mov	r1, r7
 8007d7c:	4632      	mov	r2, r6
 8007d7e:	4628      	mov	r0, r5
 8007d80:	f00b fe5f 	bl	8013a42 <memcpy>
 8007d84:	464a      	mov	r2, r9
 8007d86:	19a8      	adds	r0, r5, r6
 8007d88:	68a1      	ldr	r1, [r4, #8]
 8007d8a:	f00b fe5a 	bl	8013a42 <memcpy>
 8007d8e:	e7b7      	b.n	8007d00 <ucdr_deserialize_int16_t+0x58>

08007d90 <ucdr_serialize_int32_t>:
 8007d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d94:	b082      	sub	sp, #8
 8007d96:	4604      	mov	r4, r0
 8007d98:	9101      	str	r1, [sp, #4]
 8007d9a:	2104      	movs	r1, #4
 8007d9c:	f000 fb16 	bl	80083cc <ucdr_buffer_alignment>
 8007da0:	4601      	mov	r1, r0
 8007da2:	4620      	mov	r0, r4
 8007da4:	7d67      	ldrb	r7, [r4, #21]
 8007da6:	f000 fb59 	bl	800845c <ucdr_advance_buffer>
 8007daa:	2104      	movs	r1, #4
 8007dac:	4620      	mov	r0, r4
 8007dae:	f000 faad 	bl	800830c <ucdr_check_buffer_available_for>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d139      	bne.n	8007e2a <ucdr_serialize_int32_t+0x9a>
 8007db6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8007dba:	42ab      	cmp	r3, r5
 8007dbc:	d930      	bls.n	8007e20 <ucdr_serialize_int32_t+0x90>
 8007dbe:	1b5e      	subs	r6, r3, r5
 8007dc0:	60a3      	str	r3, [r4, #8]
 8007dc2:	6923      	ldr	r3, [r4, #16]
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f1c6 0804 	rsb	r8, r6, #4
 8007dca:	4433      	add	r3, r6
 8007dcc:	4641      	mov	r1, r8
 8007dce:	6123      	str	r3, [r4, #16]
 8007dd0:	f000 faa8 	bl	8008324 <ucdr_check_final_buffer_behavior>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	d04c      	beq.n	8007e72 <ucdr_serialize_int32_t+0xe2>
 8007dd8:	7d23      	ldrb	r3, [r4, #20]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d063      	beq.n	8007ea6 <ucdr_serialize_int32_t+0x116>
 8007dde:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007de2:	702b      	strb	r3, [r5, #0]
 8007de4:	2e00      	cmp	r6, #0
 8007de6:	d051      	beq.n	8007e8c <ucdr_serialize_int32_t+0xfc>
 8007de8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007dec:	2e01      	cmp	r6, #1
 8007dee:	706b      	strb	r3, [r5, #1]
 8007df0:	d050      	beq.n	8007e94 <ucdr_serialize_int32_t+0x104>
 8007df2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007df6:	2e02      	cmp	r6, #2
 8007df8:	70ab      	strb	r3, [r5, #2]
 8007dfa:	d04f      	beq.n	8007e9c <ucdr_serialize_int32_t+0x10c>
 8007dfc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007e00:	70eb      	strb	r3, [r5, #3]
 8007e02:	6923      	ldr	r3, [r4, #16]
 8007e04:	2104      	movs	r1, #4
 8007e06:	68a2      	ldr	r2, [r4, #8]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	7da0      	ldrb	r0, [r4, #22]
 8007e0c:	4442      	add	r2, r8
 8007e0e:	7561      	strb	r1, [r4, #21]
 8007e10:	1b9e      	subs	r6, r3, r6
 8007e12:	f080 0001 	eor.w	r0, r0, #1
 8007e16:	60a2      	str	r2, [r4, #8]
 8007e18:	6126      	str	r6, [r4, #16]
 8007e1a:	b002      	add	sp, #8
 8007e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e20:	2104      	movs	r1, #4
 8007e22:	4620      	mov	r0, r4
 8007e24:	f000 fa7e 	bl	8008324 <ucdr_check_final_buffer_behavior>
 8007e28:	b1d0      	cbz	r0, 8007e60 <ucdr_serialize_int32_t+0xd0>
 8007e2a:	7d23      	ldrb	r3, [r4, #20]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	68a3      	ldr	r3, [r4, #8]
 8007e30:	d01c      	beq.n	8007e6c <ucdr_serialize_int32_t+0xdc>
 8007e32:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8007e36:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007e3a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8007e3e:	7018      	strb	r0, [r3, #0]
 8007e40:	68a3      	ldr	r3, [r4, #8]
 8007e42:	705a      	strb	r2, [r3, #1]
 8007e44:	68a3      	ldr	r3, [r4, #8]
 8007e46:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007e4a:	7099      	strb	r1, [r3, #2]
 8007e4c:	68a3      	ldr	r3, [r4, #8]
 8007e4e:	70da      	strb	r2, [r3, #3]
 8007e50:	2104      	movs	r1, #4
 8007e52:	68a2      	ldr	r2, [r4, #8]
 8007e54:	6923      	ldr	r3, [r4, #16]
 8007e56:	440a      	add	r2, r1
 8007e58:	7561      	strb	r1, [r4, #21]
 8007e5a:	440b      	add	r3, r1
 8007e5c:	60a2      	str	r2, [r4, #8]
 8007e5e:	6123      	str	r3, [r4, #16]
 8007e60:	7da0      	ldrb	r0, [r4, #22]
 8007e62:	f080 0001 	eor.w	r0, r0, #1
 8007e66:	b002      	add	sp, #8
 8007e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e6c:	9a01      	ldr	r2, [sp, #4]
 8007e6e:	601a      	str	r2, [r3, #0]
 8007e70:	e7ee      	b.n	8007e50 <ucdr_serialize_int32_t+0xc0>
 8007e72:	68a2      	ldr	r2, [r4, #8]
 8007e74:	6923      	ldr	r3, [r4, #16]
 8007e76:	7da0      	ldrb	r0, [r4, #22]
 8007e78:	1b92      	subs	r2, r2, r6
 8007e7a:	1b9b      	subs	r3, r3, r6
 8007e7c:	7567      	strb	r7, [r4, #21]
 8007e7e:	f080 0001 	eor.w	r0, r0, #1
 8007e82:	60a2      	str	r2, [r4, #8]
 8007e84:	6123      	str	r3, [r4, #16]
 8007e86:	b002      	add	sp, #8
 8007e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e8c:	68a3      	ldr	r3, [r4, #8]
 8007e8e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007e92:	701a      	strb	r2, [r3, #0]
 8007e94:	68a3      	ldr	r3, [r4, #8]
 8007e96:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007e9a:	701a      	strb	r2, [r3, #0]
 8007e9c:	68a3      	ldr	r3, [r4, #8]
 8007e9e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007ea2:	701a      	strb	r2, [r3, #0]
 8007ea4:	e7ad      	b.n	8007e02 <ucdr_serialize_int32_t+0x72>
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	ad01      	add	r5, sp, #4
 8007eaa:	4632      	mov	r2, r6
 8007eac:	4629      	mov	r1, r5
 8007eae:	f00b fdc8 	bl	8013a42 <memcpy>
 8007eb2:	4642      	mov	r2, r8
 8007eb4:	19a9      	adds	r1, r5, r6
 8007eb6:	68a0      	ldr	r0, [r4, #8]
 8007eb8:	f00b fdc3 	bl	8013a42 <memcpy>
 8007ebc:	e7a1      	b.n	8007e02 <ucdr_serialize_int32_t+0x72>
 8007ebe:	bf00      	nop

08007ec0 <ucdr_deserialize_int32_t>:
 8007ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	460d      	mov	r5, r1
 8007ec8:	2104      	movs	r1, #4
 8007eca:	f000 fa7f 	bl	80083cc <ucdr_buffer_alignment>
 8007ece:	4601      	mov	r1, r0
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007ed6:	f000 fac1 	bl	800845c <ucdr_advance_buffer>
 8007eda:	2104      	movs	r1, #4
 8007edc:	4620      	mov	r0, r4
 8007ede:	f000 fa15 	bl	800830c <ucdr_check_buffer_available_for>
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	d138      	bne.n	8007f58 <ucdr_deserialize_int32_t+0x98>
 8007ee6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8007eea:	42b7      	cmp	r7, r6
 8007eec:	d92f      	bls.n	8007f4e <ucdr_deserialize_int32_t+0x8e>
 8007eee:	6923      	ldr	r3, [r4, #16]
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	60a7      	str	r7, [r4, #8]
 8007ef4:	1bbf      	subs	r7, r7, r6
 8007ef6:	443b      	add	r3, r7
 8007ef8:	f1c7 0904 	rsb	r9, r7, #4
 8007efc:	6123      	str	r3, [r4, #16]
 8007efe:	4649      	mov	r1, r9
 8007f00:	f000 fa10 	bl	8008324 <ucdr_check_final_buffer_behavior>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	d046      	beq.n	8007f96 <ucdr_deserialize_int32_t+0xd6>
 8007f08:	7d23      	ldrb	r3, [r4, #20]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d05c      	beq.n	8007fc8 <ucdr_deserialize_int32_t+0x108>
 8007f0e:	78f3      	ldrb	r3, [r6, #3]
 8007f10:	702b      	strb	r3, [r5, #0]
 8007f12:	2f00      	cmp	r7, #0
 8007f14:	d04c      	beq.n	8007fb0 <ucdr_deserialize_int32_t+0xf0>
 8007f16:	78b3      	ldrb	r3, [r6, #2]
 8007f18:	2f01      	cmp	r7, #1
 8007f1a:	706b      	strb	r3, [r5, #1]
 8007f1c:	f105 0302 	add.w	r3, r5, #2
 8007f20:	d04a      	beq.n	8007fb8 <ucdr_deserialize_int32_t+0xf8>
 8007f22:	7873      	ldrb	r3, [r6, #1]
 8007f24:	2f02      	cmp	r7, #2
 8007f26:	70ab      	strb	r3, [r5, #2]
 8007f28:	f105 0303 	add.w	r3, r5, #3
 8007f2c:	d048      	beq.n	8007fc0 <ucdr_deserialize_int32_t+0x100>
 8007f2e:	7833      	ldrb	r3, [r6, #0]
 8007f30:	70eb      	strb	r3, [r5, #3]
 8007f32:	6923      	ldr	r3, [r4, #16]
 8007f34:	2104      	movs	r1, #4
 8007f36:	68a2      	ldr	r2, [r4, #8]
 8007f38:	3304      	adds	r3, #4
 8007f3a:	7da0      	ldrb	r0, [r4, #22]
 8007f3c:	444a      	add	r2, r9
 8007f3e:	7561      	strb	r1, [r4, #21]
 8007f40:	1bdb      	subs	r3, r3, r7
 8007f42:	f080 0001 	eor.w	r0, r0, #1
 8007f46:	60a2      	str	r2, [r4, #8]
 8007f48:	6123      	str	r3, [r4, #16]
 8007f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f4e:	2104      	movs	r1, #4
 8007f50:	4620      	mov	r0, r4
 8007f52:	f000 f9e7 	bl	8008324 <ucdr_check_final_buffer_behavior>
 8007f56:	b1b0      	cbz	r0, 8007f86 <ucdr_deserialize_int32_t+0xc6>
 8007f58:	7d23      	ldrb	r3, [r4, #20]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	68a3      	ldr	r3, [r4, #8]
 8007f5e:	d017      	beq.n	8007f90 <ucdr_deserialize_int32_t+0xd0>
 8007f60:	78db      	ldrb	r3, [r3, #3]
 8007f62:	702b      	strb	r3, [r5, #0]
 8007f64:	68a3      	ldr	r3, [r4, #8]
 8007f66:	789b      	ldrb	r3, [r3, #2]
 8007f68:	706b      	strb	r3, [r5, #1]
 8007f6a:	68a3      	ldr	r3, [r4, #8]
 8007f6c:	785b      	ldrb	r3, [r3, #1]
 8007f6e:	70ab      	strb	r3, [r5, #2]
 8007f70:	68a3      	ldr	r3, [r4, #8]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	70eb      	strb	r3, [r5, #3]
 8007f76:	2104      	movs	r1, #4
 8007f78:	68a2      	ldr	r2, [r4, #8]
 8007f7a:	6923      	ldr	r3, [r4, #16]
 8007f7c:	440a      	add	r2, r1
 8007f7e:	7561      	strb	r1, [r4, #21]
 8007f80:	440b      	add	r3, r1
 8007f82:	60a2      	str	r2, [r4, #8]
 8007f84:	6123      	str	r3, [r4, #16]
 8007f86:	7da0      	ldrb	r0, [r4, #22]
 8007f88:	f080 0001 	eor.w	r0, r0, #1
 8007f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	602b      	str	r3, [r5, #0]
 8007f94:	e7ef      	b.n	8007f76 <ucdr_deserialize_int32_t+0xb6>
 8007f96:	68a2      	ldr	r2, [r4, #8]
 8007f98:	6923      	ldr	r3, [r4, #16]
 8007f9a:	1bd2      	subs	r2, r2, r7
 8007f9c:	7da0      	ldrb	r0, [r4, #22]
 8007f9e:	1bdb      	subs	r3, r3, r7
 8007fa0:	f884 8015 	strb.w	r8, [r4, #21]
 8007fa4:	f080 0001 	eor.w	r0, r0, #1
 8007fa8:	60a2      	str	r2, [r4, #8]
 8007faa:	6123      	str	r3, [r4, #16]
 8007fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fb0:	68a3      	ldr	r3, [r4, #8]
 8007fb2:	789b      	ldrb	r3, [r3, #2]
 8007fb4:	706b      	strb	r3, [r5, #1]
 8007fb6:	1cab      	adds	r3, r5, #2
 8007fb8:	68a2      	ldr	r2, [r4, #8]
 8007fba:	7852      	ldrb	r2, [r2, #1]
 8007fbc:	f803 2b01 	strb.w	r2, [r3], #1
 8007fc0:	68a2      	ldr	r2, [r4, #8]
 8007fc2:	7812      	ldrb	r2, [r2, #0]
 8007fc4:	701a      	strb	r2, [r3, #0]
 8007fc6:	e7b4      	b.n	8007f32 <ucdr_deserialize_int32_t+0x72>
 8007fc8:	4631      	mov	r1, r6
 8007fca:	463a      	mov	r2, r7
 8007fcc:	4628      	mov	r0, r5
 8007fce:	f00b fd38 	bl	8013a42 <memcpy>
 8007fd2:	464a      	mov	r2, r9
 8007fd4:	19e8      	adds	r0, r5, r7
 8007fd6:	68a1      	ldr	r1, [r4, #8]
 8007fd8:	f00b fd33 	bl	8013a42 <memcpy>
 8007fdc:	e7a9      	b.n	8007f32 <ucdr_deserialize_int32_t+0x72>
 8007fde:	bf00      	nop

08007fe0 <ucdr_serialize_int64_t>:
 8007fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe4:	4604      	mov	r4, r0
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	2108      	movs	r1, #8
 8007fea:	e9cd 2300 	strd	r2, r3, [sp]
 8007fee:	f000 f9ed 	bl	80083cc <ucdr_buffer_alignment>
 8007ff2:	4601      	mov	r1, r0
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	7d67      	ldrb	r7, [r4, #21]
 8007ff8:	f000 fa30 	bl	800845c <ucdr_advance_buffer>
 8007ffc:	2108      	movs	r1, #8
 8007ffe:	4620      	mov	r0, r4
 8008000:	f000 f984 	bl	800830c <ucdr_check_buffer_available_for>
 8008004:	2800      	cmp	r0, #0
 8008006:	d14e      	bne.n	80080a6 <ucdr_serialize_int64_t+0xc6>
 8008008:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800800c:	42ab      	cmp	r3, r5
 800800e:	d945      	bls.n	800809c <ucdr_serialize_int64_t+0xbc>
 8008010:	1b5e      	subs	r6, r3, r5
 8008012:	60a3      	str	r3, [r4, #8]
 8008014:	6923      	ldr	r3, [r4, #16]
 8008016:	4620      	mov	r0, r4
 8008018:	f1c6 0808 	rsb	r8, r6, #8
 800801c:	4433      	add	r3, r6
 800801e:	4641      	mov	r1, r8
 8008020:	6123      	str	r3, [r4, #16]
 8008022:	f000 f97f 	bl	8008324 <ucdr_check_final_buffer_behavior>
 8008026:	2800      	cmp	r0, #0
 8008028:	d074      	beq.n	8008114 <ucdr_serialize_int64_t+0x134>
 800802a:	7d23      	ldrb	r3, [r4, #20]
 800802c:	2b01      	cmp	r3, #1
 800802e:	f000 809b 	beq.w	8008168 <ucdr_serialize_int64_t+0x188>
 8008032:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008036:	702b      	strb	r3, [r5, #0]
 8008038:	2e00      	cmp	r6, #0
 800803a:	d078      	beq.n	800812e <ucdr_serialize_int64_t+0x14e>
 800803c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008040:	2e01      	cmp	r6, #1
 8008042:	706b      	strb	r3, [r5, #1]
 8008044:	d077      	beq.n	8008136 <ucdr_serialize_int64_t+0x156>
 8008046:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800804a:	2e02      	cmp	r6, #2
 800804c:	70ab      	strb	r3, [r5, #2]
 800804e:	d076      	beq.n	800813e <ucdr_serialize_int64_t+0x15e>
 8008050:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008054:	2e03      	cmp	r6, #3
 8008056:	70eb      	strb	r3, [r5, #3]
 8008058:	d075      	beq.n	8008146 <ucdr_serialize_int64_t+0x166>
 800805a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800805e:	2e04      	cmp	r6, #4
 8008060:	712b      	strb	r3, [r5, #4]
 8008062:	d074      	beq.n	800814e <ucdr_serialize_int64_t+0x16e>
 8008064:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8008068:	2e05      	cmp	r6, #5
 800806a:	716b      	strb	r3, [r5, #5]
 800806c:	d073      	beq.n	8008156 <ucdr_serialize_int64_t+0x176>
 800806e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8008072:	2e06      	cmp	r6, #6
 8008074:	71ab      	strb	r3, [r5, #6]
 8008076:	d072      	beq.n	800815e <ucdr_serialize_int64_t+0x17e>
 8008078:	f89d 3000 	ldrb.w	r3, [sp]
 800807c:	71eb      	strb	r3, [r5, #7]
 800807e:	6923      	ldr	r3, [r4, #16]
 8008080:	2108      	movs	r1, #8
 8008082:	68a2      	ldr	r2, [r4, #8]
 8008084:	3308      	adds	r3, #8
 8008086:	7da0      	ldrb	r0, [r4, #22]
 8008088:	4442      	add	r2, r8
 800808a:	7561      	strb	r1, [r4, #21]
 800808c:	1b9e      	subs	r6, r3, r6
 800808e:	f080 0001 	eor.w	r0, r0, #1
 8008092:	60a2      	str	r2, [r4, #8]
 8008094:	6126      	str	r6, [r4, #16]
 8008096:	b002      	add	sp, #8
 8008098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800809c:	2108      	movs	r1, #8
 800809e:	4620      	mov	r0, r4
 80080a0:	f000 f940 	bl	8008324 <ucdr_check_final_buffer_behavior>
 80080a4:	b350      	cbz	r0, 80080fc <ucdr_serialize_int64_t+0x11c>
 80080a6:	7d23      	ldrb	r3, [r4, #20]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d02d      	beq.n	8008108 <ucdr_serialize_int64_t+0x128>
 80080ac:	68a3      	ldr	r3, [r4, #8]
 80080ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80080b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80080b6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80080ba:	7018      	strb	r0, [r3, #0]
 80080bc:	68a3      	ldr	r3, [r4, #8]
 80080be:	705a      	strb	r2, [r3, #1]
 80080c0:	68a3      	ldr	r3, [r4, #8]
 80080c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80080c6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80080ca:	7099      	strb	r1, [r3, #2]
 80080cc:	68a3      	ldr	r3, [r4, #8]
 80080ce:	70da      	strb	r2, [r3, #3]
 80080d0:	68a3      	ldr	r3, [r4, #8]
 80080d2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80080d6:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80080da:	7118      	strb	r0, [r3, #4]
 80080dc:	68a3      	ldr	r3, [r4, #8]
 80080de:	715a      	strb	r2, [r3, #5]
 80080e0:	68a3      	ldr	r3, [r4, #8]
 80080e2:	f89d 2000 	ldrb.w	r2, [sp]
 80080e6:	7199      	strb	r1, [r3, #6]
 80080e8:	68a3      	ldr	r3, [r4, #8]
 80080ea:	71da      	strb	r2, [r3, #7]
 80080ec:	2108      	movs	r1, #8
 80080ee:	68a2      	ldr	r2, [r4, #8]
 80080f0:	6923      	ldr	r3, [r4, #16]
 80080f2:	440a      	add	r2, r1
 80080f4:	7561      	strb	r1, [r4, #21]
 80080f6:	440b      	add	r3, r1
 80080f8:	60a2      	str	r2, [r4, #8]
 80080fa:	6123      	str	r3, [r4, #16]
 80080fc:	7da0      	ldrb	r0, [r4, #22]
 80080fe:	f080 0001 	eor.w	r0, r0, #1
 8008102:	b002      	add	sp, #8
 8008104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008108:	466b      	mov	r3, sp
 800810a:	68a2      	ldr	r2, [r4, #8]
 800810c:	cb03      	ldmia	r3!, {r0, r1}
 800810e:	6010      	str	r0, [r2, #0]
 8008110:	6051      	str	r1, [r2, #4]
 8008112:	e7eb      	b.n	80080ec <ucdr_serialize_int64_t+0x10c>
 8008114:	68a2      	ldr	r2, [r4, #8]
 8008116:	6923      	ldr	r3, [r4, #16]
 8008118:	7da0      	ldrb	r0, [r4, #22]
 800811a:	1b92      	subs	r2, r2, r6
 800811c:	1b9b      	subs	r3, r3, r6
 800811e:	7567      	strb	r7, [r4, #21]
 8008120:	f080 0001 	eor.w	r0, r0, #1
 8008124:	60a2      	str	r2, [r4, #8]
 8008126:	6123      	str	r3, [r4, #16]
 8008128:	b002      	add	sp, #8
 800812a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800812e:	68a3      	ldr	r3, [r4, #8]
 8008130:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008134:	701a      	strb	r2, [r3, #0]
 8008136:	68a3      	ldr	r3, [r4, #8]
 8008138:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800813c:	701a      	strb	r2, [r3, #0]
 800813e:	68a3      	ldr	r3, [r4, #8]
 8008140:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008144:	701a      	strb	r2, [r3, #0]
 8008146:	68a3      	ldr	r3, [r4, #8]
 8008148:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800814c:	701a      	strb	r2, [r3, #0]
 800814e:	68a3      	ldr	r3, [r4, #8]
 8008150:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008154:	701a      	strb	r2, [r3, #0]
 8008156:	68a3      	ldr	r3, [r4, #8]
 8008158:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800815c:	701a      	strb	r2, [r3, #0]
 800815e:	68a3      	ldr	r3, [r4, #8]
 8008160:	f89d 2000 	ldrb.w	r2, [sp]
 8008164:	701a      	strb	r2, [r3, #0]
 8008166:	e78a      	b.n	800807e <ucdr_serialize_int64_t+0x9e>
 8008168:	4628      	mov	r0, r5
 800816a:	466d      	mov	r5, sp
 800816c:	4632      	mov	r2, r6
 800816e:	4629      	mov	r1, r5
 8008170:	f00b fc67 	bl	8013a42 <memcpy>
 8008174:	4642      	mov	r2, r8
 8008176:	19a9      	adds	r1, r5, r6
 8008178:	68a0      	ldr	r0, [r4, #8]
 800817a:	f00b fc62 	bl	8013a42 <memcpy>
 800817e:	e77e      	b.n	800807e <ucdr_serialize_int64_t+0x9e>

08008180 <ucdr_deserialize_int64_t>:
 8008180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008184:	4604      	mov	r4, r0
 8008186:	460d      	mov	r5, r1
 8008188:	2108      	movs	r1, #8
 800818a:	f000 f91f 	bl	80083cc <ucdr_buffer_alignment>
 800818e:	4601      	mov	r1, r0
 8008190:	4620      	mov	r0, r4
 8008192:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008196:	f000 f961 	bl	800845c <ucdr_advance_buffer>
 800819a:	2108      	movs	r1, #8
 800819c:	4620      	mov	r0, r4
 800819e:	f000 f8b5 	bl	800830c <ucdr_check_buffer_available_for>
 80081a2:	2800      	cmp	r0, #0
 80081a4:	d151      	bne.n	800824a <ucdr_deserialize_int64_t+0xca>
 80081a6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80081aa:	42be      	cmp	r6, r7
 80081ac:	d948      	bls.n	8008240 <ucdr_deserialize_int64_t+0xc0>
 80081ae:	6923      	ldr	r3, [r4, #16]
 80081b0:	4620      	mov	r0, r4
 80081b2:	60a6      	str	r6, [r4, #8]
 80081b4:	1bf6      	subs	r6, r6, r7
 80081b6:	4433      	add	r3, r6
 80081b8:	f1c6 0908 	rsb	r9, r6, #8
 80081bc:	6123      	str	r3, [r4, #16]
 80081be:	4649      	mov	r1, r9
 80081c0:	f000 f8b0 	bl	8008324 <ucdr_check_final_buffer_behavior>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	d06d      	beq.n	80082a4 <ucdr_deserialize_int64_t+0x124>
 80081c8:	7d23      	ldrb	r3, [r4, #20]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	f000 8093 	beq.w	80082f6 <ucdr_deserialize_int64_t+0x176>
 80081d0:	79fb      	ldrb	r3, [r7, #7]
 80081d2:	702b      	strb	r3, [r5, #0]
 80081d4:	2e00      	cmp	r6, #0
 80081d6:	d072      	beq.n	80082be <ucdr_deserialize_int64_t+0x13e>
 80081d8:	79bb      	ldrb	r3, [r7, #6]
 80081da:	2e01      	cmp	r6, #1
 80081dc:	706b      	strb	r3, [r5, #1]
 80081de:	f105 0302 	add.w	r3, r5, #2
 80081e2:	d070      	beq.n	80082c6 <ucdr_deserialize_int64_t+0x146>
 80081e4:	797b      	ldrb	r3, [r7, #5]
 80081e6:	2e02      	cmp	r6, #2
 80081e8:	70ab      	strb	r3, [r5, #2]
 80081ea:	f105 0303 	add.w	r3, r5, #3
 80081ee:	d06e      	beq.n	80082ce <ucdr_deserialize_int64_t+0x14e>
 80081f0:	793b      	ldrb	r3, [r7, #4]
 80081f2:	2e03      	cmp	r6, #3
 80081f4:	70eb      	strb	r3, [r5, #3]
 80081f6:	f105 0304 	add.w	r3, r5, #4
 80081fa:	d06c      	beq.n	80082d6 <ucdr_deserialize_int64_t+0x156>
 80081fc:	78fb      	ldrb	r3, [r7, #3]
 80081fe:	2e04      	cmp	r6, #4
 8008200:	712b      	strb	r3, [r5, #4]
 8008202:	f105 0305 	add.w	r3, r5, #5
 8008206:	d06a      	beq.n	80082de <ucdr_deserialize_int64_t+0x15e>
 8008208:	78bb      	ldrb	r3, [r7, #2]
 800820a:	2e05      	cmp	r6, #5
 800820c:	716b      	strb	r3, [r5, #5]
 800820e:	f105 0306 	add.w	r3, r5, #6
 8008212:	d068      	beq.n	80082e6 <ucdr_deserialize_int64_t+0x166>
 8008214:	787b      	ldrb	r3, [r7, #1]
 8008216:	2e06      	cmp	r6, #6
 8008218:	71ab      	strb	r3, [r5, #6]
 800821a:	f105 0307 	add.w	r3, r5, #7
 800821e:	d066      	beq.n	80082ee <ucdr_deserialize_int64_t+0x16e>
 8008220:	783b      	ldrb	r3, [r7, #0]
 8008222:	71eb      	strb	r3, [r5, #7]
 8008224:	6923      	ldr	r3, [r4, #16]
 8008226:	2108      	movs	r1, #8
 8008228:	68a2      	ldr	r2, [r4, #8]
 800822a:	3308      	adds	r3, #8
 800822c:	7da0      	ldrb	r0, [r4, #22]
 800822e:	444a      	add	r2, r9
 8008230:	7561      	strb	r1, [r4, #21]
 8008232:	1b9e      	subs	r6, r3, r6
 8008234:	f080 0001 	eor.w	r0, r0, #1
 8008238:	60a2      	str	r2, [r4, #8]
 800823a:	6126      	str	r6, [r4, #16]
 800823c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008240:	2108      	movs	r1, #8
 8008242:	4620      	mov	r0, r4
 8008244:	f000 f86e 	bl	8008324 <ucdr_check_final_buffer_behavior>
 8008248:	b310      	cbz	r0, 8008290 <ucdr_deserialize_int64_t+0x110>
 800824a:	7d23      	ldrb	r3, [r4, #20]
 800824c:	2b01      	cmp	r3, #1
 800824e:	68a3      	ldr	r3, [r4, #8]
 8008250:	d023      	beq.n	800829a <ucdr_deserialize_int64_t+0x11a>
 8008252:	79db      	ldrb	r3, [r3, #7]
 8008254:	702b      	strb	r3, [r5, #0]
 8008256:	68a3      	ldr	r3, [r4, #8]
 8008258:	799b      	ldrb	r3, [r3, #6]
 800825a:	706b      	strb	r3, [r5, #1]
 800825c:	68a3      	ldr	r3, [r4, #8]
 800825e:	795b      	ldrb	r3, [r3, #5]
 8008260:	70ab      	strb	r3, [r5, #2]
 8008262:	68a3      	ldr	r3, [r4, #8]
 8008264:	791b      	ldrb	r3, [r3, #4]
 8008266:	70eb      	strb	r3, [r5, #3]
 8008268:	68a3      	ldr	r3, [r4, #8]
 800826a:	78db      	ldrb	r3, [r3, #3]
 800826c:	712b      	strb	r3, [r5, #4]
 800826e:	68a3      	ldr	r3, [r4, #8]
 8008270:	789b      	ldrb	r3, [r3, #2]
 8008272:	716b      	strb	r3, [r5, #5]
 8008274:	68a3      	ldr	r3, [r4, #8]
 8008276:	785b      	ldrb	r3, [r3, #1]
 8008278:	71ab      	strb	r3, [r5, #6]
 800827a:	68a3      	ldr	r3, [r4, #8]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	71eb      	strb	r3, [r5, #7]
 8008280:	2108      	movs	r1, #8
 8008282:	68a2      	ldr	r2, [r4, #8]
 8008284:	6923      	ldr	r3, [r4, #16]
 8008286:	440a      	add	r2, r1
 8008288:	7561      	strb	r1, [r4, #21]
 800828a:	440b      	add	r3, r1
 800828c:	60a2      	str	r2, [r4, #8]
 800828e:	6123      	str	r3, [r4, #16]
 8008290:	7da0      	ldrb	r0, [r4, #22]
 8008292:	f080 0001 	eor.w	r0, r0, #1
 8008296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	602a      	str	r2, [r5, #0]
 80082a0:	606b      	str	r3, [r5, #4]
 80082a2:	e7ed      	b.n	8008280 <ucdr_deserialize_int64_t+0x100>
 80082a4:	68a2      	ldr	r2, [r4, #8]
 80082a6:	6923      	ldr	r3, [r4, #16]
 80082a8:	1b92      	subs	r2, r2, r6
 80082aa:	7da0      	ldrb	r0, [r4, #22]
 80082ac:	1b9b      	subs	r3, r3, r6
 80082ae:	f884 8015 	strb.w	r8, [r4, #21]
 80082b2:	f080 0001 	eor.w	r0, r0, #1
 80082b6:	60a2      	str	r2, [r4, #8]
 80082b8:	6123      	str	r3, [r4, #16]
 80082ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082be:	68a3      	ldr	r3, [r4, #8]
 80082c0:	799b      	ldrb	r3, [r3, #6]
 80082c2:	706b      	strb	r3, [r5, #1]
 80082c4:	1cab      	adds	r3, r5, #2
 80082c6:	68a2      	ldr	r2, [r4, #8]
 80082c8:	7952      	ldrb	r2, [r2, #5]
 80082ca:	f803 2b01 	strb.w	r2, [r3], #1
 80082ce:	68a2      	ldr	r2, [r4, #8]
 80082d0:	7912      	ldrb	r2, [r2, #4]
 80082d2:	f803 2b01 	strb.w	r2, [r3], #1
 80082d6:	68a2      	ldr	r2, [r4, #8]
 80082d8:	78d2      	ldrb	r2, [r2, #3]
 80082da:	f803 2b01 	strb.w	r2, [r3], #1
 80082de:	68a2      	ldr	r2, [r4, #8]
 80082e0:	7892      	ldrb	r2, [r2, #2]
 80082e2:	f803 2b01 	strb.w	r2, [r3], #1
 80082e6:	68a2      	ldr	r2, [r4, #8]
 80082e8:	7852      	ldrb	r2, [r2, #1]
 80082ea:	f803 2b01 	strb.w	r2, [r3], #1
 80082ee:	68a2      	ldr	r2, [r4, #8]
 80082f0:	7812      	ldrb	r2, [r2, #0]
 80082f2:	701a      	strb	r2, [r3, #0]
 80082f4:	e796      	b.n	8008224 <ucdr_deserialize_int64_t+0xa4>
 80082f6:	4639      	mov	r1, r7
 80082f8:	4632      	mov	r2, r6
 80082fa:	4628      	mov	r0, r5
 80082fc:	f00b fba1 	bl	8013a42 <memcpy>
 8008300:	464a      	mov	r2, r9
 8008302:	19a8      	adds	r0, r5, r6
 8008304:	68a1      	ldr	r1, [r4, #8]
 8008306:	f00b fb9c 	bl	8013a42 <memcpy>
 800830a:	e78b      	b.n	8008224 <ucdr_deserialize_int64_t+0xa4>

0800830c <ucdr_check_buffer_available_for>:
 800830c:	7d83      	ldrb	r3, [r0, #22]
 800830e:	b93b      	cbnz	r3, 8008320 <ucdr_check_buffer_available_for+0x14>
 8008310:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8008314:	4419      	add	r1, r3
 8008316:	4288      	cmp	r0, r1
 8008318:	bf34      	ite	cc
 800831a:	2000      	movcc	r0, #0
 800831c:	2001      	movcs	r0, #1
 800831e:	4770      	bx	lr
 8008320:	2000      	movs	r0, #0
 8008322:	4770      	bx	lr

08008324 <ucdr_check_final_buffer_behavior>:
 8008324:	7d83      	ldrb	r3, [r0, #22]
 8008326:	b943      	cbnz	r3, 800833a <ucdr_check_final_buffer_behavior+0x16>
 8008328:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800832c:	b510      	push	{r4, lr}
 800832e:	4291      	cmp	r1, r2
 8008330:	4604      	mov	r4, r0
 8008332:	d205      	bcs.n	8008340 <ucdr_check_final_buffer_behavior+0x1c>
 8008334:	2301      	movs	r3, #1
 8008336:	4618      	mov	r0, r3
 8008338:	bd10      	pop	{r4, pc}
 800833a:	2300      	movs	r3, #0
 800833c:	4618      	mov	r0, r3
 800833e:	4770      	bx	lr
 8008340:	6982      	ldr	r2, [r0, #24]
 8008342:	b13a      	cbz	r2, 8008354 <ucdr_check_final_buffer_behavior+0x30>
 8008344:	69c1      	ldr	r1, [r0, #28]
 8008346:	4790      	blx	r2
 8008348:	f080 0301 	eor.w	r3, r0, #1
 800834c:	75a0      	strb	r0, [r4, #22]
 800834e:	b2db      	uxtb	r3, r3
 8008350:	4618      	mov	r0, r3
 8008352:	bd10      	pop	{r4, pc}
 8008354:	2001      	movs	r0, #1
 8008356:	75a0      	strb	r0, [r4, #22]
 8008358:	e7fa      	b.n	8008350 <ucdr_check_final_buffer_behavior+0x2c>
 800835a:	bf00      	nop

0800835c <ucdr_set_on_full_buffer_callback>:
 800835c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop

08008364 <ucdr_init_buffer_origin_offset_endian>:
 8008364:	b410      	push	{r4}
 8008366:	9c01      	ldr	r4, [sp, #4]
 8008368:	440a      	add	r2, r1
 800836a:	6001      	str	r1, [r0, #0]
 800836c:	6042      	str	r2, [r0, #4]
 800836e:	190a      	adds	r2, r1, r4
 8008370:	441c      	add	r4, r3
 8008372:	6082      	str	r2, [r0, #8]
 8008374:	2200      	movs	r2, #0
 8008376:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800837a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800837e:	7542      	strb	r2, [r0, #21]
 8008380:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008384:	7582      	strb	r2, [r0, #22]
 8008386:	7503      	strb	r3, [r0, #20]
 8008388:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop

08008390 <ucdr_init_buffer_origin_offset>:
 8008390:	b510      	push	{r4, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	9c04      	ldr	r4, [sp, #16]
 8008396:	9400      	str	r4, [sp, #0]
 8008398:	2401      	movs	r4, #1
 800839a:	9401      	str	r4, [sp, #4]
 800839c:	f7ff ffe2 	bl	8008364 <ucdr_init_buffer_origin_offset_endian>
 80083a0:	b002      	add	sp, #8
 80083a2:	bd10      	pop	{r4, pc}

080083a4 <ucdr_init_buffer_origin>:
 80083a4:	b510      	push	{r4, lr}
 80083a6:	2400      	movs	r4, #0
 80083a8:	b082      	sub	sp, #8
 80083aa:	9400      	str	r4, [sp, #0]
 80083ac:	f7ff fff0 	bl	8008390 <ucdr_init_buffer_origin_offset>
 80083b0:	b002      	add	sp, #8
 80083b2:	bd10      	pop	{r4, pc}

080083b4 <ucdr_init_buffer>:
 80083b4:	2300      	movs	r3, #0
 80083b6:	f7ff bff5 	b.w	80083a4 <ucdr_init_buffer_origin>
 80083ba:	bf00      	nop

080083bc <ucdr_alignment>:
 80083bc:	fbb0 f2f1 	udiv	r2, r0, r1
 80083c0:	fb02 0011 	mls	r0, r2, r1, r0
 80083c4:	1e4b      	subs	r3, r1, #1
 80083c6:	1a08      	subs	r0, r1, r0
 80083c8:	4018      	ands	r0, r3
 80083ca:	4770      	bx	lr

080083cc <ucdr_buffer_alignment>:
 80083cc:	7d43      	ldrb	r3, [r0, #21]
 80083ce:	428b      	cmp	r3, r1
 80083d0:	d209      	bcs.n	80083e6 <ucdr_buffer_alignment+0x1a>
 80083d2:	6903      	ldr	r3, [r0, #16]
 80083d4:	1e4a      	subs	r2, r1, #1
 80083d6:	fbb3 f0f1 	udiv	r0, r3, r1
 80083da:	fb01 3010 	mls	r0, r1, r0, r3
 80083de:	1a09      	subs	r1, r1, r0
 80083e0:	ea01 0002 	and.w	r0, r1, r2
 80083e4:	4770      	bx	lr
 80083e6:	2000      	movs	r0, #0
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop

080083ec <ucdr_align_to>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	4604      	mov	r4, r0
 80083f0:	460d      	mov	r5, r1
 80083f2:	f7ff ffeb 	bl	80083cc <ucdr_buffer_alignment>
 80083f6:	68a3      	ldr	r3, [r4, #8]
 80083f8:	7565      	strb	r5, [r4, #21]
 80083fa:	181a      	adds	r2, r3, r0
 80083fc:	6923      	ldr	r3, [r4, #16]
 80083fe:	4418      	add	r0, r3
 8008400:	6863      	ldr	r3, [r4, #4]
 8008402:	4293      	cmp	r3, r2
 8008404:	6120      	str	r0, [r4, #16]
 8008406:	bf28      	it	cs
 8008408:	4613      	movcs	r3, r2
 800840a:	60a3      	str	r3, [r4, #8]
 800840c:	bd38      	pop	{r3, r4, r5, pc}
 800840e:	bf00      	nop

08008410 <ucdr_buffer_length>:
 8008410:	6882      	ldr	r2, [r0, #8]
 8008412:	6800      	ldr	r0, [r0, #0]
 8008414:	1a10      	subs	r0, r2, r0
 8008416:	4770      	bx	lr

08008418 <ucdr_buffer_remaining>:
 8008418:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800841c:	1a10      	subs	r0, r2, r0
 800841e:	4770      	bx	lr

08008420 <ucdr_check_final_buffer_behavior_array>:
 8008420:	b538      	push	{r3, r4, r5, lr}
 8008422:	7d83      	ldrb	r3, [r0, #22]
 8008424:	b9a3      	cbnz	r3, 8008450 <ucdr_check_final_buffer_behavior_array+0x30>
 8008426:	4604      	mov	r4, r0
 8008428:	460d      	mov	r5, r1
 800842a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800842e:	429a      	cmp	r2, r3
 8008430:	d300      	bcc.n	8008434 <ucdr_check_final_buffer_behavior_array+0x14>
 8008432:	b931      	cbnz	r1, 8008442 <ucdr_check_final_buffer_behavior_array+0x22>
 8008434:	4620      	mov	r0, r4
 8008436:	f7ff ffef 	bl	8008418 <ucdr_buffer_remaining>
 800843a:	42a8      	cmp	r0, r5
 800843c:	bf28      	it	cs
 800843e:	4628      	movcs	r0, r5
 8008440:	bd38      	pop	{r3, r4, r5, pc}
 8008442:	6983      	ldr	r3, [r0, #24]
 8008444:	b133      	cbz	r3, 8008454 <ucdr_check_final_buffer_behavior_array+0x34>
 8008446:	69c1      	ldr	r1, [r0, #28]
 8008448:	4798      	blx	r3
 800844a:	75a0      	strb	r0, [r4, #22]
 800844c:	2800      	cmp	r0, #0
 800844e:	d0f1      	beq.n	8008434 <ucdr_check_final_buffer_behavior_array+0x14>
 8008450:	2000      	movs	r0, #0
 8008452:	bd38      	pop	{r3, r4, r5, pc}
 8008454:	2301      	movs	r3, #1
 8008456:	7583      	strb	r3, [r0, #22]
 8008458:	e7fa      	b.n	8008450 <ucdr_check_final_buffer_behavior_array+0x30>
 800845a:	bf00      	nop

0800845c <ucdr_advance_buffer>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	4604      	mov	r4, r0
 8008460:	460d      	mov	r5, r1
 8008462:	f7ff ff53 	bl	800830c <ucdr_check_buffer_available_for>
 8008466:	b178      	cbz	r0, 8008488 <ucdr_advance_buffer+0x2c>
 8008468:	6923      	ldr	r3, [r4, #16]
 800846a:	68a2      	ldr	r2, [r4, #8]
 800846c:	442b      	add	r3, r5
 800846e:	442a      	add	r2, r5
 8008470:	6123      	str	r3, [r4, #16]
 8008472:	2301      	movs	r3, #1
 8008474:	60a2      	str	r2, [r4, #8]
 8008476:	7563      	strb	r3, [r4, #21]
 8008478:	bd38      	pop	{r3, r4, r5, pc}
 800847a:	68a2      	ldr	r2, [r4, #8]
 800847c:	1a2d      	subs	r5, r5, r0
 800847e:	6923      	ldr	r3, [r4, #16]
 8008480:	4402      	add	r2, r0
 8008482:	4418      	add	r0, r3
 8008484:	60a2      	str	r2, [r4, #8]
 8008486:	6120      	str	r0, [r4, #16]
 8008488:	4629      	mov	r1, r5
 800848a:	2201      	movs	r2, #1
 800848c:	4620      	mov	r0, r4
 800848e:	f7ff ffc7 	bl	8008420 <ucdr_check_final_buffer_behavior_array>
 8008492:	2800      	cmp	r0, #0
 8008494:	d1f1      	bne.n	800847a <ucdr_advance_buffer+0x1e>
 8008496:	2301      	movs	r3, #1
 8008498:	7563      	strb	r3, [r4, #21]
 800849a:	bd38      	pop	{r3, r4, r5, pc}

0800849c <rcl_get_zero_initialized_init_options>:
 800849c:	2000      	movs	r0, #0
 800849e:	4770      	bx	lr

080084a0 <rcl_init_options_init>:
 80084a0:	b084      	sub	sp, #16
 80084a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084a4:	b097      	sub	sp, #92	; 0x5c
 80084a6:	ae1d      	add	r6, sp, #116	; 0x74
 80084a8:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 80084ac:	2800      	cmp	r0, #0
 80084ae:	d058      	beq.n	8008562 <rcl_init_options_init+0xc2>
 80084b0:	6803      	ldr	r3, [r0, #0]
 80084b2:	4605      	mov	r5, r0
 80084b4:	b133      	cbz	r3, 80084c4 <rcl_init_options_init+0x24>
 80084b6:	2464      	movs	r4, #100	; 0x64
 80084b8:	4620      	mov	r0, r4
 80084ba:	b017      	add	sp, #92	; 0x5c
 80084bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80084c0:	b004      	add	sp, #16
 80084c2:	4770      	bx	lr
 80084c4:	4630      	mov	r0, r6
 80084c6:	f001 fae5 	bl	8009a94 <rcutils_allocator_is_valid>
 80084ca:	2800      	cmp	r0, #0
 80084cc:	d049      	beq.n	8008562 <rcl_init_options_init+0xc2>
 80084ce:	46b4      	mov	ip, r6
 80084d0:	ac11      	add	r4, sp, #68	; 0x44
 80084d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80084d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084d8:	f8dc 3000 	ldr.w	r3, [ip]
 80084dc:	2050      	movs	r0, #80	; 0x50
 80084de:	9921      	ldr	r1, [sp, #132]	; 0x84
 80084e0:	6023      	str	r3, [r4, #0]
 80084e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80084e4:	4798      	blx	r3
 80084e6:	4604      	mov	r4, r0
 80084e8:	6028      	str	r0, [r5, #0]
 80084ea:	2800      	cmp	r0, #0
 80084ec:	d03b      	beq.n	8008566 <rcl_init_options_init+0xc6>
 80084ee:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80084f2:	4686      	mov	lr, r0
 80084f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80084f8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80084fc:	f8dc 3000 	ldr.w	r3, [ip]
 8008500:	a802      	add	r0, sp, #8
 8008502:	f8ce 3000 	str.w	r3, [lr]
 8008506:	f001 fce3 	bl	8009ed0 <rmw_get_zero_initialized_init_options>
 800850a:	f10d 0e08 	add.w	lr, sp, #8
 800850e:	f104 0c18 	add.w	ip, r4, #24
 8008512:	682f      	ldr	r7, [r5, #0]
 8008514:	ac20      	add	r4, sp, #128	; 0x80
 8008516:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800851a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800851e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008522:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008526:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800852a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800852e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8008532:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008536:	e894 0003 	ldmia.w	r4, {r0, r1}
 800853a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800853e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8008542:	f107 0018 	add.w	r0, r7, #24
 8008546:	f001 fdbf 	bl	800a0c8 <rmw_init_options_init>
 800854a:	4604      	mov	r4, r0
 800854c:	2800      	cmp	r0, #0
 800854e:	d0b3      	beq.n	80084b8 <rcl_init_options_init+0x18>
 8008550:	9921      	ldr	r1, [sp, #132]	; 0x84
 8008552:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008554:	6828      	ldr	r0, [r5, #0]
 8008556:	4798      	blx	r3
 8008558:	4620      	mov	r0, r4
 800855a:	f006 f9b3 	bl	800e8c4 <rcl_convert_rmw_ret_to_rcl_ret>
 800855e:	4604      	mov	r4, r0
 8008560:	e7aa      	b.n	80084b8 <rcl_init_options_init+0x18>
 8008562:	240b      	movs	r4, #11
 8008564:	e7a8      	b.n	80084b8 <rcl_init_options_init+0x18>
 8008566:	240a      	movs	r4, #10
 8008568:	e7a6      	b.n	80084b8 <rcl_init_options_init+0x18>
 800856a:	bf00      	nop

0800856c <rcl_init_options_fini>:
 800856c:	b530      	push	{r4, r5, lr}
 800856e:	b087      	sub	sp, #28
 8008570:	b1f0      	cbz	r0, 80085b0 <rcl_init_options_fini+0x44>
 8008572:	6803      	ldr	r3, [r0, #0]
 8008574:	4604      	mov	r4, r0
 8008576:	b1db      	cbz	r3, 80085b0 <rcl_init_options_fini+0x44>
 8008578:	469c      	mov	ip, r3
 800857a:	f10d 0e04 	add.w	lr, sp, #4
 800857e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008582:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008586:	f8dc 3000 	ldr.w	r3, [ip]
 800858a:	a801      	add	r0, sp, #4
 800858c:	f8ce 3000 	str.w	r3, [lr]
 8008590:	f001 fa80 	bl	8009a94 <rcutils_allocator_is_valid>
 8008594:	b160      	cbz	r0, 80085b0 <rcl_init_options_fini+0x44>
 8008596:	6820      	ldr	r0, [r4, #0]
 8008598:	3018      	adds	r0, #24
 800859a:	f001 fe4f 	bl	800a23c <rmw_init_options_fini>
 800859e:	4605      	mov	r5, r0
 80085a0:	b950      	cbnz	r0, 80085b8 <rcl_init_options_fini+0x4c>
 80085a2:	6820      	ldr	r0, [r4, #0]
 80085a4:	9b02      	ldr	r3, [sp, #8]
 80085a6:	9905      	ldr	r1, [sp, #20]
 80085a8:	4798      	blx	r3
 80085aa:	4628      	mov	r0, r5
 80085ac:	b007      	add	sp, #28
 80085ae:	bd30      	pop	{r4, r5, pc}
 80085b0:	250b      	movs	r5, #11
 80085b2:	4628      	mov	r0, r5
 80085b4:	b007      	add	sp, #28
 80085b6:	bd30      	pop	{r4, r5, pc}
 80085b8:	f006 f984 	bl	800e8c4 <rcl_convert_rmw_ret_to_rcl_ret>
 80085bc:	4605      	mov	r5, r0
 80085be:	e7f8      	b.n	80085b2 <rcl_init_options_fini+0x46>

080085c0 <rcl_init_options_copy>:
 80085c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c4:	b094      	sub	sp, #80	; 0x50
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d05b      	beq.n	8008682 <rcl_init_options_copy+0xc2>
 80085ca:	4604      	mov	r4, r0
 80085cc:	6800      	ldr	r0, [r0, #0]
 80085ce:	2800      	cmp	r0, #0
 80085d0:	d057      	beq.n	8008682 <rcl_init_options_copy+0xc2>
 80085d2:	460e      	mov	r6, r1
 80085d4:	f001 fa5e 	bl	8009a94 <rcutils_allocator_is_valid>
 80085d8:	2e00      	cmp	r6, #0
 80085da:	d052      	beq.n	8008682 <rcl_init_options_copy+0xc2>
 80085dc:	f080 0001 	eor.w	r0, r0, #1
 80085e0:	b2c0      	uxtb	r0, r0
 80085e2:	2800      	cmp	r0, #0
 80085e4:	d14d      	bne.n	8008682 <rcl_init_options_copy+0xc2>
 80085e6:	6833      	ldr	r3, [r6, #0]
 80085e8:	b123      	cbz	r3, 80085f4 <rcl_init_options_copy+0x34>
 80085ea:	2464      	movs	r4, #100	; 0x64
 80085ec:	4620      	mov	r0, r4
 80085ee:	b014      	add	sp, #80	; 0x50
 80085f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085f4:	6827      	ldr	r7, [r4, #0]
 80085f6:	ad0f      	add	r5, sp, #60	; 0x3c
 80085f8:	46bc      	mov	ip, r7
 80085fa:	f8d7 8000 	ldr.w	r8, [r7]
 80085fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008602:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008604:	f8dc 3000 	ldr.w	r3, [ip]
 8008608:	2050      	movs	r0, #80	; 0x50
 800860a:	4619      	mov	r1, r3
 800860c:	602b      	str	r3, [r5, #0]
 800860e:	47c0      	blx	r8
 8008610:	4605      	mov	r5, r0
 8008612:	6030      	str	r0, [r6, #0]
 8008614:	b3d0      	cbz	r0, 800868c <rcl_init_options_copy+0xcc>
 8008616:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 800861a:	4686      	mov	lr, r0
 800861c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008620:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008624:	f8dc 3000 	ldr.w	r3, [ip]
 8008628:	4668      	mov	r0, sp
 800862a:	f8ce 3000 	str.w	r3, [lr]
 800862e:	f001 fc4f 	bl	8009ed0 <rmw_get_zero_initialized_init_options>
 8008632:	46ee      	mov	lr, sp
 8008634:	f105 0c18 	add.w	ip, r5, #24
 8008638:	6824      	ldr	r4, [r4, #0]
 800863a:	6835      	ldr	r5, [r6, #0]
 800863c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008640:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008644:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008648:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800864c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008650:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008654:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8008658:	e88c 0003 	stmia.w	ip, {r0, r1}
 800865c:	f104 0018 	add.w	r0, r4, #24
 8008660:	f105 0118 	add.w	r1, r5, #24
 8008664:	f001 fd98 	bl	800a198 <rmw_init_options_copy>
 8008668:	4604      	mov	r4, r0
 800866a:	2800      	cmp	r0, #0
 800866c:	d0be      	beq.n	80085ec <rcl_init_options_copy+0x2c>
 800866e:	f001 fa37 	bl	8009ae0 <rcutils_get_error_string>
 8008672:	f001 fa4d 	bl	8009b10 <rcutils_reset_error>
 8008676:	4630      	mov	r0, r6
 8008678:	f7ff ff78 	bl	800856c <rcl_init_options_fini>
 800867c:	b140      	cbz	r0, 8008690 <rcl_init_options_copy+0xd0>
 800867e:	4604      	mov	r4, r0
 8008680:	e7b4      	b.n	80085ec <rcl_init_options_copy+0x2c>
 8008682:	240b      	movs	r4, #11
 8008684:	4620      	mov	r0, r4
 8008686:	b014      	add	sp, #80	; 0x50
 8008688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800868c:	240a      	movs	r4, #10
 800868e:	e7ad      	b.n	80085ec <rcl_init_options_copy+0x2c>
 8008690:	4620      	mov	r0, r4
 8008692:	b014      	add	sp, #80	; 0x50
 8008694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008698:	f006 b914 	b.w	800e8c4 <rcl_convert_rmw_ret_to_rcl_ret>

0800869c <rcl_init_options_set_domain_id>:
 800869c:	b120      	cbz	r0, 80086a8 <rcl_init_options_set_domain_id+0xc>
 800869e:	6803      	ldr	r3, [r0, #0]
 80086a0:	b113      	cbz	r3, 80086a8 <rcl_init_options_set_domain_id+0xc>
 80086a2:	2000      	movs	r0, #0
 80086a4:	6259      	str	r1, [r3, #36]	; 0x24
 80086a6:	4770      	bx	lr
 80086a8:	200b      	movs	r0, #11
 80086aa:	4770      	bx	lr

080086ac <rcl_get_zero_initialized_node>:
 80086ac:	4a03      	ldr	r2, [pc, #12]	; (80086bc <rcl_get_zero_initialized_node+0x10>)
 80086ae:	4603      	mov	r3, r0
 80086b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80086b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80086b8:	4618      	mov	r0, r3
 80086ba:	4770      	bx	lr
 80086bc:	08014c20 	.word	0x08014c20

080086c0 <rcl_node_init>:
 80086c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c4:	b0a9      	sub	sp, #164	; 0xa4
 80086c6:	4604      	mov	r4, r0
 80086c8:	460e      	mov	r6, r1
 80086ca:	4615      	mov	r5, r2
 80086cc:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 80086d0:	a823      	add	r0, sp, #140	; 0x8c
 80086d2:	461f      	mov	r7, r3
 80086d4:	f006 fa06 	bl	800eae4 <rcl_guard_condition_get_default_options>
 80086d8:	f1b8 0f00 	cmp.w	r8, #0
 80086dc:	f000 80f3 	beq.w	80088c6 <rcl_node_init+0x206>
 80086e0:	4640      	mov	r0, r8
 80086e2:	f001 f9d7 	bl	8009a94 <rcutils_allocator_is_valid>
 80086e6:	2d00      	cmp	r5, #0
 80086e8:	bf18      	it	ne
 80086ea:	2c00      	cmpne	r4, #0
 80086ec:	f080 0001 	eor.w	r0, r0, #1
 80086f0:	bf0c      	ite	eq
 80086f2:	f04f 0c01 	moveq.w	ip, #1
 80086f6:	f04f 0c00 	movne.w	ip, #0
 80086fa:	2e00      	cmp	r6, #0
 80086fc:	bf08      	it	eq
 80086fe:	f04c 0c01 	orreq.w	ip, ip, #1
 8008702:	ea4c 0c00 	orr.w	ip, ip, r0
 8008706:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 800870a:	f040 80dc 	bne.w	80088c6 <rcl_node_init+0x206>
 800870e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8008712:	f1ba 0f00 	cmp.w	sl, #0
 8008716:	f040 80fc 	bne.w	8008912 <rcl_node_init+0x252>
 800871a:	2f00      	cmp	r7, #0
 800871c:	f000 80d3 	beq.w	80088c6 <rcl_node_init+0x206>
 8008720:	4638      	mov	r0, r7
 8008722:	f006 f8ed 	bl	800e900 <rcl_context_is_valid>
 8008726:	4683      	mov	fp, r0
 8008728:	2800      	cmp	r0, #0
 800872a:	f000 80d2 	beq.w	80088d2 <rcl_node_init+0x212>
 800872e:	4652      	mov	r2, sl
 8008730:	4630      	mov	r0, r6
 8008732:	a922      	add	r1, sp, #136	; 0x88
 8008734:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 8008738:	f001 fc50 	bl	8009fdc <rmw_validate_node_name>
 800873c:	4682      	mov	sl, r0
 800873e:	2800      	cmp	r0, #0
 8008740:	f040 80c3 	bne.w	80088ca <rcl_node_init+0x20a>
 8008744:	9822      	ldr	r0, [sp, #136]	; 0x88
 8008746:	2800      	cmp	r0, #0
 8008748:	f040 80f1 	bne.w	800892e <rcl_node_init+0x26e>
 800874c:	4628      	mov	r0, r5
 800874e:	f7f7 fd81 	bl	8000254 <strlen>
 8008752:	2800      	cmp	r0, #0
 8008754:	f040 80c0 	bne.w	80088d8 <rcl_node_init+0x218>
 8008758:	4d79      	ldr	r5, [pc, #484]	; (8008940 <rcl_node_init+0x280>)
 800875a:	a922      	add	r1, sp, #136	; 0x88
 800875c:	2200      	movs	r2, #0
 800875e:	4628      	mov	r0, r5
 8008760:	f001 fc1e 	bl	8009fa0 <rmw_validate_namespace>
 8008764:	4682      	mov	sl, r0
 8008766:	2800      	cmp	r0, #0
 8008768:	f040 80af 	bne.w	80088ca <rcl_node_init+0x20a>
 800876c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800876e:	2800      	cmp	r0, #0
 8008770:	f040 80d5 	bne.w	800891e <rcl_node_init+0x25e>
 8008774:	f8d8 3000 	ldr.w	r3, [r8]
 8008778:	2078      	movs	r0, #120	; 0x78
 800877a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800877e:	4798      	blx	r3
 8008780:	4682      	mov	sl, r0
 8008782:	6060      	str	r0, [r4, #4]
 8008784:	2800      	cmp	r0, #0
 8008786:	f000 80cf 	beq.w	8008928 <rcl_node_init+0x268>
 800878a:	2200      	movs	r2, #0
 800878c:	2300      	movs	r3, #0
 800878e:	a808      	add	r0, sp, #32
 8008790:	e9ca 231a 	strd	r2, r3, [sl, #104]	; 0x68
 8008794:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 8008798:	f000 f902 	bl	80089a0 <rcl_node_get_default_options>
 800879c:	a908      	add	r1, sp, #32
 800879e:	4650      	mov	r0, sl
 80087a0:	2268      	movs	r2, #104	; 0x68
 80087a2:	f00b f94e 	bl	8013a42 <memcpy>
 80087a6:	6861      	ldr	r1, [r4, #4]
 80087a8:	4640      	mov	r0, r8
 80087aa:	6027      	str	r7, [r4, #0]
 80087ac:	f000 f906 	bl	80089bc <rcl_node_options_copy>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d158      	bne.n	8008866 <rcl_node_init+0x1a6>
 80087b4:	4628      	mov	r0, r5
 80087b6:	f7f7 fd4d 	bl	8000254 <strlen>
 80087ba:	4428      	add	r0, r5
 80087bc:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80087c0:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80087c4:	2b2f      	cmp	r3, #47	; 0x2f
 80087c6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	bf0c      	ite	eq
 80087ce:	4b5d      	ldreq	r3, [pc, #372]	; (8008944 <rcl_node_init+0x284>)
 80087d0:	4b5d      	ldrne	r3, [pc, #372]	; (8008948 <rcl_node_init+0x288>)
 80087d2:	9302      	str	r3, [sp, #8]
 80087d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087d8:	9301      	str	r3, [sp, #4]
 80087da:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80087de:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80087e2:	f001 f9b1 	bl	8009b48 <rcutils_format_string_limit>
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	f8ca 0074 	str.w	r0, [sl, #116]	; 0x74
 80087ec:	4631      	mov	r1, r6
 80087ee:	6818      	ldr	r0, [r3, #0]
 80087f0:	462a      	mov	r2, r5
 80087f2:	6866      	ldr	r6, [r4, #4]
 80087f4:	3028      	adds	r0, #40	; 0x28
 80087f6:	f001 ff4d 	bl	800a694 <rmw_create_node>
 80087fa:	6863      	ldr	r3, [r4, #4]
 80087fc:	66b0      	str	r0, [r6, #104]	; 0x68
 80087fe:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8008800:	2800      	cmp	r0, #0
 8008802:	d032      	beq.n	800886a <rcl_node_init+0x1aa>
 8008804:	f001 ffd6 	bl	800a7b4 <rmw_node_get_graph_guard_condition>
 8008808:	4682      	mov	sl, r0
 800880a:	b360      	cbz	r0, 8008866 <rcl_node_init+0x1a6>
 800880c:	f8d8 3000 	ldr.w	r3, [r8]
 8008810:	2008      	movs	r0, #8
 8008812:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8008816:	6866      	ldr	r6, [r4, #4]
 8008818:	4798      	blx	r3
 800881a:	6863      	ldr	r3, [r4, #4]
 800881c:	66f0      	str	r0, [r6, #108]	; 0x6c
 800881e:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 8008822:	f1bb 0f00 	cmp.w	fp, #0
 8008826:	d020      	beq.n	800886a <rcl_node_init+0x1aa>
 8008828:	a806      	add	r0, sp, #24
 800882a:	ae23      	add	r6, sp, #140	; 0x8c
 800882c:	f006 f8ce 	bl	800e9cc <rcl_get_zero_initialized_guard_condition>
 8008830:	a806      	add	r0, sp, #24
 8008832:	6863      	ldr	r3, [r4, #4]
 8008834:	46c4      	mov	ip, r8
 8008836:	c803      	ldmia	r0, {r0, r1}
 8008838:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 800883c:	e88b 0003 	stmia.w	fp, {r0, r1}
 8008840:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008844:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008846:	f8dc 3000 	ldr.w	r3, [ip]
 800884a:	6033      	str	r3, [r6, #0]
 800884c:	ab28      	add	r3, sp, #160	; 0xa0
 800884e:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8008852:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8008856:	4651      	mov	r1, sl
 8008858:	463a      	mov	r2, r7
 800885a:	4670      	mov	r0, lr
 800885c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800885e:	f006 f8bf 	bl	800e9e0 <rcl_guard_condition_init_from_rmw>
 8008862:	4682      	mov	sl, r0
 8008864:	b328      	cbz	r0, 80088b2 <rcl_node_init+0x1f2>
 8008866:	6863      	ldr	r3, [r4, #4]
 8008868:	b1f3      	cbz	r3, 80088a8 <rcl_node_init+0x1e8>
 800886a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800886c:	b128      	cbz	r0, 800887a <rcl_node_init+0x1ba>
 800886e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008872:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8008876:	4798      	blx	r3
 8008878:	6863      	ldr	r3, [r4, #4]
 800887a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800887c:	b110      	cbz	r0, 8008884 <rcl_node_init+0x1c4>
 800887e:	f001 ff1b 	bl	800a6b8 <rmw_destroy_node>
 8008882:	6863      	ldr	r3, [r4, #4]
 8008884:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008886:	b148      	cbz	r0, 800889c <rcl_node_init+0x1dc>
 8008888:	f006 f906 	bl	800ea98 <rcl_guard_condition_fini>
 800888c:	6863      	ldr	r3, [r4, #4]
 800888e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8008892:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008894:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008898:	4798      	blx	r3
 800889a:	6863      	ldr	r3, [r4, #4]
 800889c:	4618      	mov	r0, r3
 800889e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80088a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80088a6:	4798      	blx	r3
 80088a8:	2300      	movs	r3, #0
 80088aa:	f04f 0a01 	mov.w	sl, #1
 80088ae:	e9c4 3300 	strd	r3, r3, [r4]
 80088b2:	f1b9 0f00 	cmp.w	r9, #0
 80088b6:	d008      	beq.n	80088ca <rcl_node_init+0x20a>
 80088b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80088bc:	4628      	mov	r0, r5
 80088be:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80088c2:	4798      	blx	r3
 80088c4:	e001      	b.n	80088ca <rcl_node_init+0x20a>
 80088c6:	f04f 0a0b 	mov.w	sl, #11
 80088ca:	4650      	mov	r0, sl
 80088cc:	b029      	add	sp, #164	; 0xa4
 80088ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d2:	f04f 0a65 	mov.w	sl, #101	; 0x65
 80088d6:	e7f8      	b.n	80088ca <rcl_node_init+0x20a>
 80088d8:	782b      	ldrb	r3, [r5, #0]
 80088da:	2b2f      	cmp	r3, #47	; 0x2f
 80088dc:	f43f af3d 	beq.w	800875a <rcl_node_init+0x9a>
 80088e0:	9503      	str	r5, [sp, #12]
 80088e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	4b18      	ldr	r3, [pc, #96]	; (800894c <rcl_node_init+0x28c>)
 80088ea:	9302      	str	r3, [sp, #8]
 80088ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80088f6:	f001 f927 	bl	8009b48 <rcutils_format_string_limit>
 80088fa:	4605      	mov	r5, r0
 80088fc:	b1e0      	cbz	r0, 8008938 <rcl_node_init+0x278>
 80088fe:	2200      	movs	r2, #0
 8008900:	a922      	add	r1, sp, #136	; 0x88
 8008902:	9222      	str	r2, [sp, #136]	; 0x88
 8008904:	f001 fb4c 	bl	8009fa0 <rmw_validate_namespace>
 8008908:	4682      	mov	sl, r0
 800890a:	2800      	cmp	r0, #0
 800890c:	d1d4      	bne.n	80088b8 <rcl_node_init+0x1f8>
 800890e:	46d9      	mov	r9, fp
 8008910:	e72c      	b.n	800876c <rcl_node_init+0xac>
 8008912:	f04f 0a64 	mov.w	sl, #100	; 0x64
 8008916:	4650      	mov	r0, sl
 8008918:	b029      	add	sp, #164	; 0xa4
 800891a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800891e:	f04f 0aca 	mov.w	sl, #202	; 0xca
 8008922:	f001 fb4f 	bl	8009fc4 <rmw_namespace_validation_result_string>
 8008926:	e7c4      	b.n	80088b2 <rcl_node_init+0x1f2>
 8008928:	f04f 0a0a 	mov.w	sl, #10
 800892c:	e7c1      	b.n	80088b2 <rcl_node_init+0x1f2>
 800892e:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 8008932:	f001 fba7 	bl	800a084 <rmw_node_name_validation_result_string>
 8008936:	e7c8      	b.n	80088ca <rcl_node_init+0x20a>
 8008938:	f04f 0a0a 	mov.w	sl, #10
 800893c:	e7c5      	b.n	80088ca <rcl_node_init+0x20a>
 800893e:	bf00      	nop
 8008940:	08014c08 	.word	0x08014c08
 8008944:	08014c10 	.word	0x08014c10
 8008948:	08014c18 	.word	0x08014c18
 800894c:	08014c0c 	.word	0x08014c0c

08008950 <rcl_node_is_valid>:
 8008950:	b130      	cbz	r0, 8008960 <rcl_node_is_valid+0x10>
 8008952:	6843      	ldr	r3, [r0, #4]
 8008954:	b123      	cbz	r3, 8008960 <rcl_node_is_valid+0x10>
 8008956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008958:	b113      	cbz	r3, 8008960 <rcl_node_is_valid+0x10>
 800895a:	6800      	ldr	r0, [r0, #0]
 800895c:	f005 bfd0 	b.w	800e900 <rcl_context_is_valid>
 8008960:	2000      	movs	r0, #0
 8008962:	4770      	bx	lr

08008964 <rcl_node_get_name>:
 8008964:	b120      	cbz	r0, 8008970 <rcl_node_get_name+0xc>
 8008966:	6840      	ldr	r0, [r0, #4]
 8008968:	b110      	cbz	r0, 8008970 <rcl_node_get_name+0xc>
 800896a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800896c:	b100      	cbz	r0, 8008970 <rcl_node_get_name+0xc>
 800896e:	6880      	ldr	r0, [r0, #8]
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop

08008974 <rcl_node_get_namespace>:
 8008974:	b120      	cbz	r0, 8008980 <rcl_node_get_namespace+0xc>
 8008976:	6840      	ldr	r0, [r0, #4]
 8008978:	b110      	cbz	r0, 8008980 <rcl_node_get_namespace+0xc>
 800897a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800897c:	b100      	cbz	r0, 8008980 <rcl_node_get_namespace+0xc>
 800897e:	68c0      	ldr	r0, [r0, #12]
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop

08008984 <rcl_node_get_options>:
 8008984:	b128      	cbz	r0, 8008992 <rcl_node_get_options+0xe>
 8008986:	6840      	ldr	r0, [r0, #4]
 8008988:	b118      	cbz	r0, 8008992 <rcl_node_get_options+0xe>
 800898a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800898c:	2b00      	cmp	r3, #0
 800898e:	bf08      	it	eq
 8008990:	2000      	moveq	r0, #0
 8008992:	4770      	bx	lr

08008994 <rcl_node_get_rmw_handle>:
 8008994:	b110      	cbz	r0, 800899c <rcl_node_get_rmw_handle+0x8>
 8008996:	6840      	ldr	r0, [r0, #4]
 8008998:	b100      	cbz	r0, 800899c <rcl_node_get_rmw_handle+0x8>
 800899a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop

080089a0 <rcl_node_get_default_options>:
 80089a0:	b510      	push	{r4, lr}
 80089a2:	4604      	mov	r4, r0
 80089a4:	2268      	movs	r2, #104	; 0x68
 80089a6:	2100      	movs	r1, #0
 80089a8:	f00a ff2c 	bl	8013804 <memset>
 80089ac:	4620      	mov	r0, r4
 80089ae:	f001 f863 	bl	8009a78 <rcutils_get_default_allocator>
 80089b2:	2301      	movs	r3, #1
 80089b4:	4620      	mov	r0, r4
 80089b6:	7523      	strb	r3, [r4, #20]
 80089b8:	bd10      	pop	{r4, pc}
 80089ba:	bf00      	nop

080089bc <rcl_node_options_copy>:
 80089bc:	2800      	cmp	r0, #0
 80089be:	bf18      	it	ne
 80089c0:	4288      	cmpne	r0, r1
 80089c2:	d01b      	beq.n	80089fc <rcl_node_options_copy+0x40>
 80089c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c6:	fab1 f681 	clz	r6, r1
 80089ca:	460c      	mov	r4, r1
 80089cc:	0976      	lsrs	r6, r6, #5
 80089ce:	b199      	cbz	r1, 80089f8 <rcl_node_options_copy+0x3c>
 80089d0:	4605      	mov	r5, r0
 80089d2:	8a87      	ldrh	r7, [r0, #20]
 80089d4:	4684      	mov	ip, r0
 80089d6:	468e      	mov	lr, r1
 80089d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80089de:	682b      	ldr	r3, [r5, #0]
 80089e0:	2250      	movs	r2, #80	; 0x50
 80089e2:	f10c 0118 	add.w	r1, ip, #24
 80089e6:	f104 0018 	add.w	r0, r4, #24
 80089ea:	f8ce 3000 	str.w	r3, [lr]
 80089ee:	82a7      	strh	r7, [r4, #20]
 80089f0:	f00b f827 	bl	8013a42 <memcpy>
 80089f4:	4630      	mov	r0, r6
 80089f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089f8:	200b      	movs	r0, #11
 80089fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089fc:	200b      	movs	r0, #11
 80089fe:	4770      	bx	lr

08008a00 <rcl_get_zero_initialized_service>:
 8008a00:	4b01      	ldr	r3, [pc, #4]	; (8008a08 <rcl_get_zero_initialized_service+0x8>)
 8008a02:	6818      	ldr	r0, [r3, #0]
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	08014c28 	.word	0x08014c28

08008a0c <rcl_service_init>:
 8008a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a10:	b088      	sub	sp, #32
 8008a12:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8008a14:	b1ff      	cbz	r7, 8008a56 <rcl_service_init+0x4a>
 8008a16:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8008a1a:	4605      	mov	r5, r0
 8008a1c:	460e      	mov	r6, r1
 8008a1e:	4691      	mov	r9, r2
 8008a20:	4650      	mov	r0, sl
 8008a22:	4698      	mov	r8, r3
 8008a24:	f001 f836 	bl	8009a94 <rcutils_allocator_is_valid>
 8008a28:	f080 0401 	eor.w	r4, r0, #1
 8008a2c:	b2e4      	uxtb	r4, r4
 8008a2e:	b994      	cbnz	r4, 8008a56 <rcl_service_init+0x4a>
 8008a30:	b18d      	cbz	r5, 8008a56 <rcl_service_init+0x4a>
 8008a32:	4630      	mov	r0, r6
 8008a34:	f7ff ff8c 	bl	8008950 <rcl_node_is_valid>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	d05d      	beq.n	8008af8 <rcl_service_init+0xec>
 8008a3c:	f1b8 0f00 	cmp.w	r8, #0
 8008a40:	d009      	beq.n	8008a56 <rcl_service_init+0x4a>
 8008a42:	f1b9 0f00 	cmp.w	r9, #0
 8008a46:	d006      	beq.n	8008a56 <rcl_service_init+0x4a>
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	b14b      	cbz	r3, 8008a60 <rcl_service_init+0x54>
 8008a4c:	2464      	movs	r4, #100	; 0x64
 8008a4e:	4620      	mov	r0, r4
 8008a50:	b008      	add	sp, #32
 8008a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a56:	240b      	movs	r4, #11
 8008a58:	4620      	mov	r0, r4
 8008a5a:	b008      	add	sp, #32
 8008a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a60:	aa07      	add	r2, sp, #28
 8008a62:	9304      	str	r3, [sp, #16]
 8008a64:	9307      	str	r3, [sp, #28]
 8008a66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008a6a:	9205      	str	r2, [sp, #20]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	9203      	str	r2, [sp, #12]
 8008a70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008a74:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008a78:	4641      	mov	r1, r8
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8008a80:	f006 f97a 	bl	800ed78 <rcl_node_resolve_name>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	d146      	bne.n	8008b16 <rcl_service_init+0x10a>
 8008a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a8a:	f44f 7088 	mov.w	r0, #272	; 0x110
 8008a8e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008a90:	4798      	blx	r3
 8008a92:	6028      	str	r0, [r5, #0]
 8008a94:	2800      	cmp	r0, #0
 8008a96:	d046      	beq.n	8008b26 <rcl_service_init+0x11a>
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f7ff ff7b 	bl	8008994 <rcl_node_get_rmw_handle>
 8008a9e:	463b      	mov	r3, r7
 8008aa0:	4649      	mov	r1, r9
 8008aa2:	9a07      	ldr	r2, [sp, #28]
 8008aa4:	682c      	ldr	r4, [r5, #0]
 8008aa6:	f002 f82f 	bl	800ab08 <rmw_create_service>
 8008aaa:	682b      	ldr	r3, [r5, #0]
 8008aac:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 8008ab0:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8008ab4:	b338      	cbz	r0, 8008b06 <rcl_service_init+0xfa>
 8008ab6:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8008aba:	f002 f957 	bl	800ad6c <rmw_service_request_subscription_get_actual_qos>
 8008abe:	bb00      	cbnz	r0, 8008b02 <rcl_service_init+0xf6>
 8008ac0:	682b      	ldr	r3, [r5, #0]
 8008ac2:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8008ac6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8008aca:	f002 f93b 	bl	800ad44 <rmw_service_response_publisher_get_actual_qos>
 8008ace:	4604      	mov	r4, r0
 8008ad0:	b9b8      	cbnz	r0, 8008b02 <rcl_service_init+0xf6>
 8008ad2:	6828      	ldr	r0, [r5, #0]
 8008ad4:	2268      	movs	r2, #104	; 0x68
 8008ad6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8008ada:	4639      	mov	r1, r7
 8008adc:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8008ae0:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 8008ae4:	f00a ffad 	bl	8013a42 <memcpy>
 8008ae8:	9807      	ldr	r0, [sp, #28]
 8008aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008aec:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008aee:	4798      	blx	r3
 8008af0:	4620      	mov	r0, r4
 8008af2:	b008      	add	sp, #32
 8008af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af8:	24c8      	movs	r4, #200	; 0xc8
 8008afa:	4620      	mov	r0, r4
 8008afc:	b008      	add	sp, #32
 8008afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b02:	682b      	ldr	r3, [r5, #0]
 8008b04:	b16b      	cbz	r3, 8008b22 <rcl_service_init+0x116>
 8008b06:	4618      	mov	r0, r3
 8008b08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b0a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008b0c:	2401      	movs	r4, #1
 8008b0e:	4790      	blx	r2
 8008b10:	2300      	movs	r3, #0
 8008b12:	602b      	str	r3, [r5, #0]
 8008b14:	e7e8      	b.n	8008ae8 <rcl_service_init+0xdc>
 8008b16:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d905      	bls.n	8008b2a <rcl_service_init+0x11e>
 8008b1e:	280a      	cmp	r0, #10
 8008b20:	d001      	beq.n	8008b26 <rcl_service_init+0x11a>
 8008b22:	2401      	movs	r4, #1
 8008b24:	e7e0      	b.n	8008ae8 <rcl_service_init+0xdc>
 8008b26:	240a      	movs	r4, #10
 8008b28:	e7de      	b.n	8008ae8 <rcl_service_init+0xdc>
 8008b2a:	2468      	movs	r4, #104	; 0x68
 8008b2c:	e7dc      	b.n	8008ae8 <rcl_service_init+0xdc>
 8008b2e:	bf00      	nop

08008b30 <rcl_service_get_default_options>:
 8008b30:	b530      	push	{r4, r5, lr}
 8008b32:	4d0f      	ldr	r5, [pc, #60]	; (8008b70 <rcl_service_get_default_options+0x40>)
 8008b34:	b087      	sub	sp, #28
 8008b36:	4604      	mov	r4, r0
 8008b38:	2250      	movs	r2, #80	; 0x50
 8008b3a:	490e      	ldr	r1, [pc, #56]	; (8008b74 <rcl_service_get_default_options+0x44>)
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	f00a ff80 	bl	8013a42 <memcpy>
 8008b42:	4668      	mov	r0, sp
 8008b44:	f000 ff98 	bl	8009a78 <rcutils_get_default_allocator>
 8008b48:	46ec      	mov	ip, sp
 8008b4a:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8008b4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008b52:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008b56:	f8dc 3000 	ldr.w	r3, [ip]
 8008b5a:	2268      	movs	r2, #104	; 0x68
 8008b5c:	4629      	mov	r1, r5
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f8ce 3000 	str.w	r3, [lr]
 8008b64:	f00a ff6d 	bl	8013a42 <memcpy>
 8008b68:	4620      	mov	r0, r4
 8008b6a:	b007      	add	sp, #28
 8008b6c:	bd30      	pop	{r4, r5, pc}
 8008b6e:	bf00      	nop
 8008b70:	2000c278 	.word	0x2000c278
 8008b74:	08014c30 	.word	0x08014c30

08008b78 <rcl_service_get_rmw_handle>:
 8008b78:	b118      	cbz	r0, 8008b82 <rcl_service_get_rmw_handle+0xa>
 8008b7a:	6800      	ldr	r0, [r0, #0]
 8008b7c:	b108      	cbz	r0, 8008b82 <rcl_service_get_rmw_handle+0xa>
 8008b7e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8008b82:	4770      	bx	lr

08008b84 <rcl_take_request>:
 8008b84:	b570      	push	{r4, r5, r6, lr}
 8008b86:	468e      	mov	lr, r1
 8008b88:	b08c      	sub	sp, #48	; 0x30
 8008b8a:	460c      	mov	r4, r1
 8008b8c:	4616      	mov	r6, r2
 8008b8e:	f10d 0c18 	add.w	ip, sp, #24
 8008b92:	4605      	mov	r5, r0
 8008b94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008b98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008b9c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8008ba0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008ba4:	b30d      	cbz	r5, 8008bea <rcl_take_request+0x66>
 8008ba6:	682b      	ldr	r3, [r5, #0]
 8008ba8:	b1fb      	cbz	r3, 8008bea <rcl_take_request+0x66>
 8008baa:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8008bae:	b1e0      	cbz	r0, 8008bea <rcl_take_request+0x66>
 8008bb0:	b336      	cbz	r6, 8008c00 <rcl_take_request+0x7c>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	4632      	mov	r2, r6
 8008bb6:	a902      	add	r1, sp, #8
 8008bb8:	f88d 3007 	strb.w	r3, [sp, #7]
 8008bbc:	f10d 0307 	add.w	r3, sp, #7
 8008bc0:	f001 fea0 	bl	800a904 <rmw_take_request>
 8008bc4:	4605      	mov	r5, r0
 8008bc6:	b198      	cbz	r0, 8008bf0 <rcl_take_request+0x6c>
 8008bc8:	280a      	cmp	r0, #10
 8008bca:	bf18      	it	ne
 8008bcc:	2501      	movne	r5, #1
 8008bce:	f10d 0e18 	add.w	lr, sp, #24
 8008bd2:	46a4      	mov	ip, r4
 8008bd4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008bd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008bdc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8008be0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008be4:	4628      	mov	r0, r5
 8008be6:	b00c      	add	sp, #48	; 0x30
 8008be8:	bd70      	pop	{r4, r5, r6, pc}
 8008bea:	f44f 7516 	mov.w	r5, #600	; 0x258
 8008bee:	e7ee      	b.n	8008bce <rcl_take_request+0x4a>
 8008bf0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008bf4:	f240 2359 	movw	r3, #601	; 0x259
 8008bf8:	2a00      	cmp	r2, #0
 8008bfa:	bf08      	it	eq
 8008bfc:	461d      	moveq	r5, r3
 8008bfe:	e7e6      	b.n	8008bce <rcl_take_request+0x4a>
 8008c00:	250b      	movs	r5, #11
 8008c02:	e7e4      	b.n	8008bce <rcl_take_request+0x4a>

08008c04 <rcl_send_response>:
 8008c04:	b170      	cbz	r0, 8008c24 <rcl_send_response+0x20>
 8008c06:	6800      	ldr	r0, [r0, #0]
 8008c08:	b160      	cbz	r0, 8008c24 <rcl_send_response+0x20>
 8008c0a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8008c0e:	b148      	cbz	r0, 8008c24 <rcl_send_response+0x20>
 8008c10:	b169      	cbz	r1, 8008c2e <rcl_send_response+0x2a>
 8008c12:	b510      	push	{r4, lr}
 8008c14:	b14a      	cbz	r2, 8008c2a <rcl_send_response+0x26>
 8008c16:	f001 fed3 	bl	800a9c0 <rmw_send_response>
 8008c1a:	b110      	cbz	r0, 8008c22 <rcl_send_response+0x1e>
 8008c1c:	2802      	cmp	r0, #2
 8008c1e:	bf18      	it	ne
 8008c20:	2001      	movne	r0, #1
 8008c22:	bd10      	pop	{r4, pc}
 8008c24:	f44f 7016 	mov.w	r0, #600	; 0x258
 8008c28:	4770      	bx	lr
 8008c2a:	200b      	movs	r0, #11
 8008c2c:	bd10      	pop	{r4, pc}
 8008c2e:	200b      	movs	r0, #11
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop

08008c34 <rcl_service_is_valid>:
 8008c34:	b130      	cbz	r0, 8008c44 <rcl_service_is_valid+0x10>
 8008c36:	6800      	ldr	r0, [r0, #0]
 8008c38:	b120      	cbz	r0, 8008c44 <rcl_service_is_valid+0x10>
 8008c3a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8008c3e:	3800      	subs	r0, #0
 8008c40:	bf18      	it	ne
 8008c42:	2001      	movne	r0, #1
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop

08008c48 <_rclc_check_for_new_data>:
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	d046      	beq.n	8008cda <_rclc_check_for_new_data+0x92>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	b530      	push	{r4, r5, lr}
 8008c50:	7802      	ldrb	r2, [r0, #0]
 8008c52:	b085      	sub	sp, #20
 8008c54:	2a0a      	cmp	r2, #10
 8008c56:	d842      	bhi.n	8008cde <_rclc_check_for_new_data+0x96>
 8008c58:	e8df f002 	tbb	[pc, r2]
 8008c5c:	14181212 	.word	0x14181212
 8008c60:	06060614 	.word	0x06060614
 8008c64:	2e1a      	.short	0x2e1a
 8008c66:	16          	.byte	0x16
 8008c67:	00          	.byte	0x00
 8008c68:	6a0a      	ldr	r2, [r1, #32]
 8008c6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008c72:	1a12      	subs	r2, r2, r0
 8008c74:	bf18      	it	ne
 8008c76:	2201      	movne	r2, #1
 8008c78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008c7c:	b005      	add	sp, #20
 8008c7e:	bd30      	pop	{r4, r5, pc}
 8008c80:	680a      	ldr	r2, [r1, #0]
 8008c82:	e7f2      	b.n	8008c6a <_rclc_check_for_new_data+0x22>
 8008c84:	698a      	ldr	r2, [r1, #24]
 8008c86:	e7f0      	b.n	8008c6a <_rclc_check_for_new_data+0x22>
 8008c88:	688a      	ldr	r2, [r1, #8]
 8008c8a:	e7ee      	b.n	8008c6a <_rclc_check_for_new_data+0x22>
 8008c8c:	690a      	ldr	r2, [r1, #16]
 8008c8e:	e7ec      	b.n	8008c6a <_rclc_check_for_new_data+0x22>
 8008c90:	685c      	ldr	r4, [r3, #4]
 8008c92:	4608      	mov	r0, r1
 8008c94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ca0:	f104 0110 	add.w	r1, r4, #16
 8008ca4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008ca8:	9500      	str	r5, [sp, #0]
 8008caa:	f104 0341 	add.w	r3, r4, #65	; 0x41
 8008cae:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8008cb2:	f007 fc31 	bl	8010518 <rcl_action_client_wait_set_get_entities_ready>
 8008cb6:	e7e1      	b.n	8008c7c <_rclc_check_for_new_data+0x34>
 8008cb8:	685c      	ldr	r4, [r3, #4]
 8008cba:	4608      	mov	r0, r1
 8008cbc:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8008cc0:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8008cc4:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8008cc8:	e9cd 2100 	strd	r2, r1, [sp]
 8008ccc:	f104 0220 	add.w	r2, r4, #32
 8008cd0:	f104 0110 	add.w	r1, r4, #16
 8008cd4:	f007 fe38 	bl	8010948 <rcl_action_server_wait_set_get_entities_ready>
 8008cd8:	e7d0      	b.n	8008c7c <_rclc_check_for_new_data+0x34>
 8008cda:	200b      	movs	r0, #11
 8008cdc:	4770      	bx	lr
 8008cde:	2001      	movs	r0, #1
 8008ce0:	e7cc      	b.n	8008c7c <_rclc_check_for_new_data+0x34>
 8008ce2:	bf00      	nop

08008ce4 <_rclc_take_new_data>:
 8008ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ce6:	b09b      	sub	sp, #108	; 0x6c
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	f000 8088 	beq.w	8008dfe <_rclc_take_new_data+0x11a>
 8008cee:	7803      	ldrb	r3, [r0, #0]
 8008cf0:	4604      	mov	r4, r0
 8008cf2:	2b0a      	cmp	r3, #10
 8008cf4:	f200 8167 	bhi.w	8008fc6 <_rclc_take_new_data+0x2e2>
 8008cf8:	e8df f003 	tbb	[pc, r3]
 8008cfc:	44152d2d 	.word	0x44152d2d
 8008d00:	19191944 	.word	0x19191944
 8008d04:	065a      	.short	0x065a
 8008d06:	15          	.byte	0x15
 8008d07:	00          	.byte	0x00
 8008d08:	6840      	ldr	r0, [r0, #4]
 8008d0a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f040 80b2 	bne.w	8008e78 <_rclc_take_new_data+0x194>
 8008d14:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f040 80e4 	bne.w	8008ee6 <_rclc_take_new_data+0x202>
 8008d1e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d16f      	bne.n	8008e06 <_rclc_take_new_data+0x122>
 8008d26:	2500      	movs	r5, #0
 8008d28:	4628      	mov	r0, r5
 8008d2a:	b01b      	add	sp, #108	; 0x6c
 8008d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d2e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008d30:	6a0b      	ldr	r3, [r1, #32]
 8008d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d0f5      	beq.n	8008d26 <_rclc_take_new_data+0x42>
 8008d3a:	6882      	ldr	r2, [r0, #8]
 8008d3c:	f100 0110 	add.w	r1, r0, #16
 8008d40:	6840      	ldr	r0, [r0, #4]
 8008d42:	f7ff ff1f 	bl	8008b84 <rcl_take_request>
 8008d46:	4605      	mov	r5, r0
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d0ec      	beq.n	8008d26 <_rclc_take_new_data+0x42>
 8008d4c:	f240 2359 	movw	r3, #601	; 0x259
 8008d50:	4298      	cmp	r0, r3
 8008d52:	d013      	beq.n	8008d7c <_rclc_take_new_data+0x98>
 8008d54:	e029      	b.n	8008daa <_rclc_take_new_data+0xc6>
 8008d56:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008d58:	680b      	ldr	r3, [r1, #0]
 8008d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d0e1      	beq.n	8008d26 <_rclc_take_new_data+0x42>
 8008d62:	2300      	movs	r3, #0
 8008d64:	aa0a      	add	r2, sp, #40	; 0x28
 8008d66:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8008d6a:	f006 f9d9 	bl	800f120 <rcl_take>
 8008d6e:	4605      	mov	r5, r0
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d0d9      	beq.n	8008d28 <_rclc_take_new_data+0x44>
 8008d74:	f240 1391 	movw	r3, #401	; 0x191
 8008d78:	4298      	cmp	r0, r3
 8008d7a:	d116      	bne.n	8008daa <_rclc_take_new_data+0xc6>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8008d82:	e7d1      	b.n	8008d28 <_rclc_take_new_data+0x44>
 8008d84:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008d86:	698b      	ldr	r3, [r1, #24]
 8008d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d0ca      	beq.n	8008d26 <_rclc_take_new_data+0x42>
 8008d90:	6882      	ldr	r2, [r0, #8]
 8008d92:	f100 0110 	add.w	r1, r0, #16
 8008d96:	6840      	ldr	r0, [r0, #4]
 8008d98:	f005 fd42 	bl	800e820 <rcl_take_response>
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	d0c1      	beq.n	8008d26 <_rclc_take_new_data+0x42>
 8008da2:	f240 13f5 	movw	r3, #501	; 0x1f5
 8008da6:	4298      	cmp	r0, r3
 8008da8:	d0be      	beq.n	8008d28 <_rclc_take_new_data+0x44>
 8008daa:	f000 feb1 	bl	8009b10 <rcutils_reset_error>
 8008dae:	e7bb      	b.n	8008d28 <_rclc_take_new_data+0x44>
 8008db0:	6840      	ldr	r0, [r0, #4]
 8008db2:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d17d      	bne.n	8008eb6 <_rclc_take_new_data+0x1d2>
 8008dba:	69c3      	ldr	r3, [r0, #28]
 8008dbc:	b11b      	cbz	r3, 8008dc6 <_rclc_take_new_data+0xe2>
 8008dbe:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d144      	bne.n	8008e50 <_rclc_take_new_data+0x16c>
 8008dc6:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f040 80ac 	bne.w	8008f28 <_rclc_take_new_data+0x244>
 8008dd0:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d0a6      	beq.n	8008d26 <_rclc_take_new_data+0x42>
 8008dd8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8008dda:	a90a      	add	r1, sp, #40	; 0x28
 8008ddc:	3010      	adds	r0, #16
 8008dde:	f007 fa73 	bl	80102c8 <rcl_action_take_result_response>
 8008de2:	4605      	mov	r5, r0
 8008de4:	2800      	cmp	r0, #0
 8008de6:	d1e0      	bne.n	8008daa <_rclc_take_new_data+0xc6>
 8008de8:	6860      	ldr	r0, [r4, #4]
 8008dea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008dee:	f007 fedb 	bl	8010ba8 <rclc_action_find_handle_by_result_request_sequence_number>
 8008df2:	2800      	cmp	r0, #0
 8008df4:	d098      	beq.n	8008d28 <_rclc_take_new_data+0x44>
 8008df6:	2301      	movs	r3, #1
 8008df8:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 8008dfc:	e794      	b.n	8008d28 <_rclc_take_new_data+0x44>
 8008dfe:	250b      	movs	r5, #11
 8008e00:	4628      	mov	r0, r5
 8008e02:	b01b      	add	sp, #108	; 0x6c
 8008e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e06:	ae04      	add	r6, sp, #16
 8008e08:	3010      	adds	r0, #16
 8008e0a:	aa0a      	add	r2, sp, #40	; 0x28
 8008e0c:	4631      	mov	r1, r6
 8008e0e:	f007 fccf 	bl	80107b0 <rcl_action_take_cancel_request>
 8008e12:	4605      	mov	r5, r0
 8008e14:	2800      	cmp	r0, #0
 8008e16:	d1c8      	bne.n	8008daa <_rclc_take_new_data+0xc6>
 8008e18:	a90a      	add	r1, sp, #40	; 0x28
 8008e1a:	6860      	ldr	r0, [r4, #4]
 8008e1c:	f007 fe84 	bl	8010b28 <rclc_action_find_goal_handle_by_uuid>
 8008e20:	4607      	mov	r7, r0
 8008e22:	2800      	cmp	r0, #0
 8008e24:	f000 80bb 	beq.w	8008f9e <_rclc_take_new_data+0x2ba>
 8008e28:	2101      	movs	r1, #1
 8008e2a:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8008e2e:	f007 fe05 	bl	8010a3c <rcl_action_transition_goal_state>
 8008e32:	2803      	cmp	r0, #3
 8008e34:	4684      	mov	ip, r0
 8008e36:	f040 80a7 	bne.w	8008f88 <_rclc_take_new_data+0x2a4>
 8008e3a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8008e3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008e40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e42:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008e46:	e884 0003 	stmia.w	r4, {r0, r1}
 8008e4a:	f887 c008 	strb.w	ip, [r7, #8]
 8008e4e:	e76b      	b.n	8008d28 <_rclc_take_new_data+0x44>
 8008e50:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8008e52:	3010      	adds	r0, #16
 8008e54:	f007 fab8 	bl	80103c8 <rcl_action_take_feedback>
 8008e58:	4605      	mov	r5, r0
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	d1a5      	bne.n	8008daa <_rclc_take_new_data+0xc6>
 8008e5e:	6860      	ldr	r0, [r4, #4]
 8008e60:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8008e62:	f007 fe61 	bl	8010b28 <rclc_action_find_goal_handle_by_uuid>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	f000 80a3 	beq.w	8008fb4 <_rclc_take_new_data+0x2d0>
 8008e6e:	2201      	movs	r2, #1
 8008e70:	6860      	ldr	r0, [r4, #4]
 8008e72:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8008e76:	e7a6      	b.n	8008dc6 <_rclc_take_new_data+0xe2>
 8008e78:	f007 fe30 	bl	8010adc <rclc_action_take_goal_handle>
 8008e7c:	4606      	mov	r6, r0
 8008e7e:	6860      	ldr	r0, [r4, #4]
 8008e80:	2e00      	cmp	r6, #0
 8008e82:	f43f af47 	beq.w	8008d14 <_rclc_take_new_data+0x30>
 8008e86:	6070      	str	r0, [r6, #4]
 8008e88:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8008e8c:	69f2      	ldr	r2, [r6, #28]
 8008e8e:	3010      	adds	r0, #16
 8008e90:	f007 fbd8 	bl	8010644 <rcl_action_take_goal_request>
 8008e94:	4605      	mov	r5, r0
 8008e96:	2800      	cmp	r0, #0
 8008e98:	f040 808e 	bne.w	8008fb8 <_rclc_take_new_data+0x2d4>
 8008e9c:	69f7      	ldr	r7, [r6, #28]
 8008e9e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008ea0:	7235      	strb	r5, [r6, #8]
 8008ea2:	f8c6 0009 	str.w	r0, [r6, #9]
 8008ea6:	f8c6 100d 	str.w	r1, [r6, #13]
 8008eaa:	6860      	ldr	r0, [r4, #4]
 8008eac:	f8c6 2011 	str.w	r2, [r6, #17]
 8008eb0:	f8c6 3015 	str.w	r3, [r6, #21]
 8008eb4:	e72e      	b.n	8008d14 <_rclc_take_new_data+0x30>
 8008eb6:	aa04      	add	r2, sp, #16
 8008eb8:	a90a      	add	r1, sp, #40	; 0x28
 8008eba:	3010      	adds	r0, #16
 8008ebc:	f007 f98c 	bl	80101d8 <rcl_action_take_goal_response>
 8008ec0:	4605      	mov	r5, r0
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	f47f af71 	bne.w	8008daa <_rclc_take_new_data+0xc6>
 8008ec8:	6860      	ldr	r0, [r4, #4]
 8008eca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008ece:	f007 fe59 	bl	8010b84 <rclc_action_find_handle_by_goal_request_sequence_number>
 8008ed2:	b130      	cbz	r0, 8008ee2 <_rclc_take_new_data+0x1fe>
 8008ed4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8008ede:	f880 2020 	strb.w	r2, [r0, #32]
 8008ee2:	6860      	ldr	r0, [r4, #4]
 8008ee4:	e769      	b.n	8008dba <_rclc_take_new_data+0xd6>
 8008ee6:	3010      	adds	r0, #16
 8008ee8:	aa04      	add	r2, sp, #16
 8008eea:	a90a      	add	r1, sp, #40	; 0x28
 8008eec:	f007 fc20 	bl	8010730 <rcl_action_take_result_request>
 8008ef0:	4605      	mov	r5, r0
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	f47f af59 	bne.w	8008daa <_rclc_take_new_data+0xc6>
 8008ef8:	a904      	add	r1, sp, #16
 8008efa:	6860      	ldr	r0, [r4, #4]
 8008efc:	f007 fe14 	bl	8010b28 <rclc_action_find_goal_handle_by_uuid>
 8008f00:	4607      	mov	r7, r0
 8008f02:	b160      	cbz	r0, 8008f1e <_rclc_take_new_data+0x23a>
 8008f04:	ad0a      	add	r5, sp, #40	; 0x28
 8008f06:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8008f0a:	f04f 0c02 	mov.w	ip, #2
 8008f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008f10:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008f12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008f16:	e886 0003 	stmia.w	r6, {r0, r1}
 8008f1a:	f887 c008 	strb.w	ip, [r7, #8]
 8008f1e:	6860      	ldr	r0, [r4, #4]
 8008f20:	2300      	movs	r3, #0
 8008f22:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 8008f26:	e6fa      	b.n	8008d1e <_rclc_take_new_data+0x3a>
 8008f28:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8008f2c:	a90a      	add	r1, sp, #40	; 0x28
 8008f2e:	3010      	adds	r0, #16
 8008f30:	f007 fa0a 	bl	8010348 <rcl_action_take_cancel_response>
 8008f34:	4605      	mov	r5, r0
 8008f36:	2800      	cmp	r0, #0
 8008f38:	f47f af37 	bne.w	8008daa <_rclc_take_new_data+0xc6>
 8008f3c:	6860      	ldr	r0, [r4, #4]
 8008f3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008f42:	f007 fe43 	bl	8010bcc <rclc_action_find_handle_by_cancel_request_sequence_number>
 8008f46:	4606      	mov	r6, r0
 8008f48:	6860      	ldr	r0, [r4, #4]
 8008f4a:	2e00      	cmp	r6, #0
 8008f4c:	f43f af40 	beq.w	8008dd0 <_rclc_take_new_data+0xec>
 8008f50:	2701      	movs	r7, #1
 8008f52:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008f54:	84b7      	strh	r7, [r6, #36]	; 0x24
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f43f af3a 	beq.w	8008dd0 <_rclc_take_new_data+0xec>
 8008f5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008f5e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8008f62:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8008f66:	f007 fddf 	bl	8010b28 <rclc_action_find_goal_handle_by_uuid>
 8008f6a:	b138      	cbz	r0, 8008f7c <_rclc_take_new_data+0x298>
 8008f6c:	6860      	ldr	r0, [r4, #4]
 8008f6e:	3501      	adds	r5, #1
 8008f70:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 8008f74:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008f76:	42ab      	cmp	r3, r5
 8008f78:	d8f0      	bhi.n	8008f5c <_rclc_take_new_data+0x278>
 8008f7a:	e729      	b.n	8008dd0 <_rclc_take_new_data+0xec>
 8008f7c:	6860      	ldr	r0, [r4, #4]
 8008f7e:	3501      	adds	r5, #1
 8008f80:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008f82:	42ab      	cmp	r3, r5
 8008f84:	d8ea      	bhi.n	8008f5c <_rclc_take_new_data+0x278>
 8008f86:	e723      	b.n	8008dd0 <_rclc_take_new_data+0xec>
 8008f88:	ab06      	add	r3, sp, #24
 8008f8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f8c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8008f90:	2103      	movs	r1, #3
 8008f92:	6860      	ldr	r0, [r4, #4]
 8008f94:	e896 000c 	ldmia.w	r6, {r2, r3}
 8008f98:	f007 fe8e 	bl	8010cb8 <rclc_action_server_goal_cancel_reject>
 8008f9c:	e6c4      	b.n	8008d28 <_rclc_take_new_data+0x44>
 8008f9e:	ab06      	add	r3, sp, #24
 8008fa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008fa2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8008fa6:	2102      	movs	r1, #2
 8008fa8:	6860      	ldr	r0, [r4, #4]
 8008faa:	e896 000c 	ldmia.w	r6, {r2, r3}
 8008fae:	f007 fe83 	bl	8010cb8 <rclc_action_server_goal_cancel_reject>
 8008fb2:	e6b9      	b.n	8008d28 <_rclc_take_new_data+0x44>
 8008fb4:	6860      	ldr	r0, [r4, #4]
 8008fb6:	e706      	b.n	8008dc6 <_rclc_take_new_data+0xe2>
 8008fb8:	4631      	mov	r1, r6
 8008fba:	6860      	ldr	r0, [r4, #4]
 8008fbc:	f007 fd9e 	bl	8010afc <rclc_action_remove_used_goal_handle>
 8008fc0:	f000 fda6 	bl	8009b10 <rcutils_reset_error>
 8008fc4:	e6b0      	b.n	8008d28 <_rclc_take_new_data+0x44>
 8008fc6:	2501      	movs	r5, #1
 8008fc8:	e6ae      	b.n	8008d28 <_rclc_take_new_data+0x44>
 8008fca:	bf00      	nop

08008fcc <_rclc_execute.part.0>:
 8008fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fce:	7803      	ldrb	r3, [r0, #0]
 8008fd0:	b085      	sub	sp, #20
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	2b0a      	cmp	r3, #10
 8008fd6:	f200 8139 	bhi.w	800924c <_rclc_execute.part.0+0x280>
 8008fda:	e8df f003 	tbb	[pc, r3]
 8008fde:	4268      	.short	0x4268
 8008fe0:	06a75b4d 	.word	0x06a75b4d
 8008fe4:	721d0606 	.word	0x721d0606
 8008fe8:	62          	.byte	0x62
 8008fe9:	00          	.byte	0x00
 8008fea:	2b06      	cmp	r3, #6
 8008fec:	f000 8126 	beq.w	800923c <_rclc_execute.part.0+0x270>
 8008ff0:	2b07      	cmp	r3, #7
 8008ff2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008ff4:	f040 811c 	bne.w	8009230 <_rclc_execute.part.0+0x264>
 8008ff8:	f104 0510 	add.w	r5, r4, #16
 8008ffc:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 8009000:	6880      	ldr	r0, [r0, #8]
 8009002:	4798      	blx	r3
 8009004:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009006:	4629      	mov	r1, r5
 8009008:	6860      	ldr	r0, [r4, #4]
 800900a:	f7ff fdfb 	bl	8008c04 <rcl_send_response>
 800900e:	4604      	mov	r4, r0
 8009010:	b378      	cbz	r0, 8009072 <_rclc_execute.part.0+0xa6>
 8009012:	f000 fd7d 	bl	8009b10 <rcutils_reset_error>
 8009016:	e02c      	b.n	8009072 <_rclc_execute.part.0+0xa6>
 8009018:	6840      	ldr	r0, [r0, #4]
 800901a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800901e:	2b00      	cmp	r3, #0
 8009020:	f000 808e 	beq.w	8009140 <_rclc_execute.part.0+0x174>
 8009024:	2600      	movs	r6, #0
 8009026:	2701      	movs	r7, #1
 8009028:	e004      	b.n	8009034 <_rclc_execute.part.0+0x68>
 800902a:	f007 fd31 	bl	8010a90 <rclc_action_send_result_request>
 800902e:	b998      	cbnz	r0, 8009058 <_rclc_execute.part.0+0x8c>
 8009030:	722f      	strb	r7, [r5, #8]
 8009032:	6860      	ldr	r0, [r4, #4]
 8009034:	f007 fddc 	bl	8010bf0 <rclc_action_find_first_handle_with_goal_response>
 8009038:	4605      	mov	r5, r0
 800903a:	2800      	cmp	r0, #0
 800903c:	d07f      	beq.n	800913e <_rclc_execute.part.0+0x172>
 800903e:	6863      	ldr	r3, [r4, #4]
 8009040:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 8009048:	f885 6020 	strb.w	r6, [r5, #32]
 800904c:	4798      	blx	r3
 800904e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8009052:	4628      	mov	r0, r5
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1e8      	bne.n	800902a <_rclc_execute.part.0+0x5e>
 8009058:	6860      	ldr	r0, [r4, #4]
 800905a:	4629      	mov	r1, r5
 800905c:	f007 fd4e 	bl	8010afc <rclc_action_remove_used_goal_handle>
 8009060:	e7e7      	b.n	8009032 <_rclc_execute.part.0+0x66>
 8009062:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8009066:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800906a:	b100      	cbz	r0, 800906e <_rclc_execute.part.0+0xa2>
 800906c:	68a0      	ldr	r0, [r4, #8]
 800906e:	2400      	movs	r4, #0
 8009070:	4798      	blx	r3
 8009072:	4620      	mov	r0, r4
 8009074:	b005      	add	sp, #20
 8009076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009078:	6840      	ldr	r0, [r0, #4]
 800907a:	f006 f965 	bl	800f348 <rcl_timer_call>
 800907e:	f240 3321 	movw	r3, #801	; 0x321
 8009082:	4604      	mov	r4, r0
 8009084:	4298      	cmp	r0, r3
 8009086:	d001      	beq.n	800908c <_rclc_execute.part.0+0xc0>
 8009088:	2800      	cmp	r0, #0
 800908a:	d1c2      	bne.n	8009012 <_rclc_execute.part.0+0x46>
 800908c:	2400      	movs	r4, #0
 800908e:	4620      	mov	r0, r4
 8009090:	b005      	add	sp, #20
 8009092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009094:	2400      	movs	r4, #0
 8009096:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009098:	6880      	ldr	r0, [r0, #8]
 800909a:	4798      	blx	r3
 800909c:	4620      	mov	r0, r4
 800909e:	b005      	add	sp, #20
 80090a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090a2:	2400      	movs	r4, #0
 80090a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80090a6:	4798      	blx	r3
 80090a8:	4620      	mov	r0, r4
 80090aa:	b005      	add	sp, #20
 80090ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090ae:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80090b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80090b4:	b100      	cbz	r0, 80090b8 <_rclc_execute.part.0+0xec>
 80090b6:	68a0      	ldr	r0, [r4, #8]
 80090b8:	2400      	movs	r4, #0
 80090ba:	4798      	blx	r3
 80090bc:	4620      	mov	r0, r4
 80090be:	b005      	add	sp, #20
 80090c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090c2:	6840      	ldr	r0, [r0, #4]
 80090c4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80090c8:	bb3b      	cbnz	r3, 800911a <_rclc_execute.part.0+0x14e>
 80090ca:	f890 3020 	ldrb.w	r3, [r0, #32]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d07d      	beq.n	80091ce <_rclc_execute.part.0+0x202>
 80090d2:	f640 0634 	movw	r6, #2100	; 0x834
 80090d6:	2701      	movs	r7, #1
 80090d8:	e007      	b.n	80090ea <_rclc_execute.part.0+0x11e>
 80090da:	4628      	mov	r0, r5
 80090dc:	f007 fda0 	bl	8010c20 <rclc_action_server_response_goal_request>
 80090e0:	4629      	mov	r1, r5
 80090e2:	6860      	ldr	r0, [r4, #4]
 80090e4:	f007 fd0a 	bl	8010afc <rclc_action_remove_used_goal_handle>
 80090e8:	6860      	ldr	r0, [r4, #4]
 80090ea:	2100      	movs	r1, #0
 80090ec:	f007 fd32 	bl	8010b54 <rclc_action_find_first_handle_by_status>
 80090f0:	4605      	mov	r5, r0
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d068      	beq.n	80091c8 <_rclc_execute.part.0+0x1fc>
 80090f6:	6863      	ldr	r3, [r4, #4]
 80090f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80090fa:	699b      	ldr	r3, [r3, #24]
 80090fc:	4798      	blx	r3
 80090fe:	42b0      	cmp	r0, r6
 8009100:	f04f 0100 	mov.w	r1, #0
 8009104:	d1e9      	bne.n	80090da <_rclc_execute.part.0+0x10e>
 8009106:	2101      	movs	r1, #1
 8009108:	4628      	mov	r0, r5
 800910a:	f007 fd89 	bl	8010c20 <rclc_action_server_response_goal_request>
 800910e:	722f      	strb	r7, [r5, #8]
 8009110:	e7ea      	b.n	80090e8 <_rclc_execute.part.0+0x11c>
 8009112:	6848      	ldr	r0, [r1, #4]
 8009114:	f007 fcf2 	bl	8010afc <rclc_action_remove_used_goal_handle>
 8009118:	6860      	ldr	r0, [r4, #4]
 800911a:	f007 fd27 	bl	8010b6c <rclc_action_find_first_terminated_handle>
 800911e:	4601      	mov	r1, r0
 8009120:	2800      	cmp	r0, #0
 8009122:	d1f6      	bne.n	8009112 <_rclc_execute.part.0+0x146>
 8009124:	6860      	ldr	r0, [r4, #4]
 8009126:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800912a:	e7ce      	b.n	80090ca <_rclc_execute.part.0+0xfe>
 800912c:	2400      	movs	r4, #0
 800912e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009130:	f100 0110 	add.w	r1, r0, #16
 8009134:	6880      	ldr	r0, [r0, #8]
 8009136:	4798      	blx	r3
 8009138:	4620      	mov	r0, r4
 800913a:	b005      	add	sp, #20
 800913c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800913e:	6860      	ldr	r0, [r4, #4]
 8009140:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009144:	b18b      	cbz	r3, 800916a <_rclc_execute.part.0+0x19e>
 8009146:	68c5      	ldr	r5, [r0, #12]
 8009148:	b32d      	cbz	r5, 8009196 <_rclc_execute.part.0+0x1ca>
 800914a:	2600      	movs	r6, #0
 800914c:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8009150:	b143      	cbz	r3, 8009164 <_rclc_execute.part.0+0x198>
 8009152:	69c3      	ldr	r3, [r0, #28]
 8009154:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 8009158:	b123      	cbz	r3, 8009164 <_rclc_execute.part.0+0x198>
 800915a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800915c:	4628      	mov	r0, r5
 800915e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009160:	4798      	blx	r3
 8009162:	6860      	ldr	r0, [r4, #4]
 8009164:	682d      	ldr	r5, [r5, #0]
 8009166:	2d00      	cmp	r5, #0
 8009168:	d1f0      	bne.n	800914c <_rclc_execute.part.0+0x180>
 800916a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800916e:	b193      	cbz	r3, 8009196 <_rclc_execute.part.0+0x1ca>
 8009170:	68c5      	ldr	r5, [r0, #12]
 8009172:	b185      	cbz	r5, 8009196 <_rclc_execute.part.0+0x1ca>
 8009174:	2600      	movs	r6, #0
 8009176:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800917a:	b14b      	cbz	r3, 8009190 <_rclc_execute.part.0+0x1c4>
 800917c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800917e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 8009182:	b12b      	cbz	r3, 8009190 <_rclc_execute.part.0+0x1c4>
 8009184:	4628      	mov	r0, r5
 8009186:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800918a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800918c:	4798      	blx	r3
 800918e:	6860      	ldr	r0, [r4, #4]
 8009190:	682d      	ldr	r5, [r5, #0]
 8009192:	2d00      	cmp	r5, #0
 8009194:	d1ef      	bne.n	8009176 <_rclc_execute.part.0+0x1aa>
 8009196:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800919a:	2b00      	cmp	r3, #0
 800919c:	f43f af76 	beq.w	800908c <_rclc_execute.part.0+0xc0>
 80091a0:	2700      	movs	r7, #0
 80091a2:	e00b      	b.n	80091bc <_rclc_execute.part.0+0x1f0>
 80091a4:	6863      	ldr	r3, [r4, #4]
 80091a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80091a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80091aa:	6a1e      	ldr	r6, [r3, #32]
 80091ac:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 80091b0:	47b0      	blx	r6
 80091b2:	6860      	ldr	r0, [r4, #4]
 80091b4:	4629      	mov	r1, r5
 80091b6:	f007 fca1 	bl	8010afc <rclc_action_remove_used_goal_handle>
 80091ba:	6860      	ldr	r0, [r4, #4]
 80091bc:	f007 fd24 	bl	8010c08 <rclc_action_find_first_handle_with_result_response>
 80091c0:	4605      	mov	r5, r0
 80091c2:	2800      	cmp	r0, #0
 80091c4:	d1ee      	bne.n	80091a4 <_rclc_execute.part.0+0x1d8>
 80091c6:	e761      	b.n	800908c <_rclc_execute.part.0+0xc0>
 80091c8:	6860      	ldr	r0, [r4, #4]
 80091ca:	f880 5020 	strb.w	r5, [r0, #32]
 80091ce:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f43f af5a 	beq.w	800908c <_rclc_execute.part.0+0xc0>
 80091d8:	68c5      	ldr	r5, [r0, #12]
 80091da:	b1b5      	cbz	r5, 800920a <_rclc_execute.part.0+0x23e>
 80091dc:	2602      	movs	r6, #2
 80091de:	e001      	b.n	80091e4 <_rclc_execute.part.0+0x218>
 80091e0:	682d      	ldr	r5, [r5, #0]
 80091e2:	b195      	cbz	r5, 800920a <_rclc_execute.part.0+0x23e>
 80091e4:	f995 3008 	ldrsb.w	r3, [r5, #8]
 80091e8:	2b03      	cmp	r3, #3
 80091ea:	d1f9      	bne.n	80091e0 <_rclc_execute.part.0+0x214>
 80091ec:	69c3      	ldr	r3, [r0, #28]
 80091ee:	4628      	mov	r0, r5
 80091f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80091f2:	4798      	blx	r3
 80091f4:	4603      	mov	r3, r0
 80091f6:	f105 0260 	add.w	r2, r5, #96	; 0x60
 80091fa:	4628      	mov	r0, r5
 80091fc:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8009200:	b143      	cbz	r3, 8009214 <_rclc_execute.part.0+0x248>
 8009202:	f007 fd2d 	bl	8010c60 <rclc_action_server_goal_cancel_accept>
 8009206:	6860      	ldr	r0, [r4, #4]
 8009208:	e7ea      	b.n	80091e0 <_rclc_execute.part.0+0x214>
 800920a:	2300      	movs	r3, #0
 800920c:	461c      	mov	r4, r3
 800920e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8009212:	e72e      	b.n	8009072 <_rclc_execute.part.0+0xa6>
 8009214:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8009216:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800921a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800921e:	2101      	movs	r1, #1
 8009220:	6860      	ldr	r0, [r4, #4]
 8009222:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009226:	f007 fd47 	bl	8010cb8 <rclc_action_server_goal_cancel_reject>
 800922a:	722e      	strb	r6, [r5, #8]
 800922c:	6860      	ldr	r0, [r4, #4]
 800922e:	e7d7      	b.n	80091e0 <_rclc_execute.part.0+0x214>
 8009230:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009232:	f104 0510 	add.w	r5, r4, #16
 8009236:	6880      	ldr	r0, [r0, #8]
 8009238:	4798      	blx	r3
 800923a:	e6e3      	b.n	8009004 <_rclc_execute.part.0+0x38>
 800923c:	f100 0510 	add.w	r5, r0, #16
 8009240:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009242:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009244:	4629      	mov	r1, r5
 8009246:	6880      	ldr	r0, [r0, #8]
 8009248:	4798      	blx	r3
 800924a:	e6db      	b.n	8009004 <_rclc_execute.part.0+0x38>
 800924c:	2401      	movs	r4, #1
 800924e:	e710      	b.n	8009072 <_rclc_execute.part.0+0xa6>

08009250 <rclc_executor_trigger_any>:
 8009250:	2800      	cmp	r0, #0
 8009252:	d03d      	beq.n	80092d0 <rclc_executor_trigger_any+0x80>
 8009254:	2900      	cmp	r1, #0
 8009256:	d03c      	beq.n	80092d2 <rclc_executor_trigger_any+0x82>
 8009258:	4603      	mov	r3, r0
 800925a:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800925e:	2200      	movs	r2, #0
 8009260:	2800      	cmp	r0, #0
 8009262:	d035      	beq.n	80092d0 <rclc_executor_trigger_any+0x80>
 8009264:	b430      	push	{r4, r5}
 8009266:	f893 c000 	ldrb.w	ip, [r3]
 800926a:	f1bc 0f08 	cmp.w	ip, #8
 800926e:	d11d      	bne.n	80092ac <rclc_executor_trigger_any+0x5c>
 8009270:	685c      	ldr	r4, [r3, #4]
 8009272:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8009274:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8009278:	d105      	bne.n	8009286 <rclc_executor_trigger_any+0x36>
 800927a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800927e:	b910      	cbnz	r0, 8009286 <rclc_executor_trigger_any+0x36>
 8009280:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 8009284:	b128      	cbz	r0, 8009292 <rclc_executor_trigger_any+0x42>
 8009286:	bc30      	pop	{r4, r5}
 8009288:	4770      	bx	lr
 800928a:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800928e:	2800      	cmp	r0, #0
 8009290:	d1f9      	bne.n	8009286 <rclc_executor_trigger_any+0x36>
 8009292:	3201      	adds	r2, #1
 8009294:	3340      	adds	r3, #64	; 0x40
 8009296:	4291      	cmp	r1, r2
 8009298:	d017      	beq.n	80092ca <rclc_executor_trigger_any+0x7a>
 800929a:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800929e:	2800      	cmp	r0, #0
 80092a0:	d0f1      	beq.n	8009286 <rclc_executor_trigger_any+0x36>
 80092a2:	f893 c000 	ldrb.w	ip, [r3]
 80092a6:	f1bc 0f08 	cmp.w	ip, #8
 80092aa:	d0e1      	beq.n	8009270 <rclc_executor_trigger_any+0x20>
 80092ac:	f1bc 0f09 	cmp.w	ip, #9
 80092b0:	d1eb      	bne.n	800928a <rclc_executor_trigger_any+0x3a>
 80092b2:	685c      	ldr	r4, [r3, #4]
 80092b4:	6a25      	ldr	r5, [r4, #32]
 80092b6:	2d00      	cmp	r5, #0
 80092b8:	d1e5      	bne.n	8009286 <rclc_executor_trigger_any+0x36>
 80092ba:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80092be:	2800      	cmp	r0, #0
 80092c0:	d1e1      	bne.n	8009286 <rclc_executor_trigger_any+0x36>
 80092c2:	3201      	adds	r2, #1
 80092c4:	3340      	adds	r3, #64	; 0x40
 80092c6:	4291      	cmp	r1, r2
 80092c8:	d1e7      	bne.n	800929a <rclc_executor_trigger_any+0x4a>
 80092ca:	2000      	movs	r0, #0
 80092cc:	bc30      	pop	{r4, r5}
 80092ce:	4770      	bx	lr
 80092d0:	4770      	bx	lr
 80092d2:	4608      	mov	r0, r1
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop

080092d8 <rclc_executor_get_zero_initialized_executor>:
 80092d8:	b510      	push	{r4, lr}
 80092da:	4604      	mov	r4, r0
 80092dc:	2288      	movs	r2, #136	; 0x88
 80092de:	4902      	ldr	r1, [pc, #8]	; (80092e8 <rclc_executor_get_zero_initialized_executor+0x10>)
 80092e0:	f00a fbaf 	bl	8013a42 <memcpy>
 80092e4:	4620      	mov	r0, r4
 80092e6:	bd10      	pop	{r4, pc}
 80092e8:	08014c80 	.word	0x08014c80
 80092ec:	00000000 	.word	0x00000000

080092f0 <rclc_executor_init>:
 80092f0:	2900      	cmp	r1, #0
 80092f2:	d06a      	beq.n	80093ca <rclc_executor_init+0xda>
 80092f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f8:	4605      	mov	r5, r0
 80092fa:	b0b0      	sub	sp, #192	; 0xc0
 80092fc:	2800      	cmp	r0, #0
 80092fe:	d05c      	beq.n	80093ba <rclc_executor_init+0xca>
 8009300:	4616      	mov	r6, r2
 8009302:	4618      	mov	r0, r3
 8009304:	4688      	mov	r8, r1
 8009306:	461f      	mov	r7, r3
 8009308:	f000 fbc4 	bl	8009a94 <rcutils_allocator_is_valid>
 800930c:	2e00      	cmp	r6, #0
 800930e:	d054      	beq.n	80093ba <rclc_executor_init+0xca>
 8009310:	f080 0401 	eor.w	r4, r0, #1
 8009314:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8009318:	d14f      	bne.n	80093ba <rclc_executor_init+0xca>
 800931a:	2288      	movs	r2, #136	; 0x88
 800931c:	4930      	ldr	r1, [pc, #192]	; (80093e0 <rclc_executor_init+0xf0>)
 800931e:	a80e      	add	r0, sp, #56	; 0x38
 8009320:	f00a fb8f 	bl	8013a42 <memcpy>
 8009324:	a90e      	add	r1, sp, #56	; 0x38
 8009326:	2288      	movs	r2, #136	; 0x88
 8009328:	4628      	mov	r0, r5
 800932a:	f00a fb8a 	bl	8013a42 <memcpy>
 800932e:	4668      	mov	r0, sp
 8009330:	f8c5 8000 	str.w	r8, [r5]
 8009334:	60ae      	str	r6, [r5, #8]
 8009336:	f006 f97d 	bl	800f634 <rcl_get_zero_initialized_wait_set>
 800933a:	46ec      	mov	ip, sp
 800933c:	f105 0e14 	add.w	lr, r5, #20
 8009340:	f8d7 8000 	ldr.w	r8, [r7]
 8009344:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009348:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800934c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009350:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009354:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009358:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80093d8 <rclc_executor_init+0xe8>
 800935c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009360:	f8dc 3000 	ldr.w	r3, [ip]
 8009364:	01b0      	lsls	r0, r6, #6
 8009366:	6939      	ldr	r1, [r7, #16]
 8009368:	f8ce 3000 	str.w	r3, [lr]
 800936c:	612f      	str	r7, [r5, #16]
 800936e:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 8009372:	47c0      	blx	r8
 8009374:	6068      	str	r0, [r5, #4]
 8009376:	b908      	cbnz	r0, 800937c <rclc_executor_init+0x8c>
 8009378:	e029      	b.n	80093ce <rclc_executor_init+0xde>
 800937a:	6868      	ldr	r0, [r5, #4]
 800937c:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8009380:	3401      	adds	r4, #1
 8009382:	4631      	mov	r1, r6
 8009384:	f000 fa80 	bl	8009888 <rclc_executor_handle_init>
 8009388:	42a6      	cmp	r6, r4
 800938a:	d8f6      	bhi.n	800937a <rclc_executor_init+0x8a>
 800938c:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8009390:	f000 fa70 	bl	8009874 <rclc_executor_handle_counters_zero_init>
 8009394:	4a13      	ldr	r2, [pc, #76]	; (80093e4 <rclc_executor_init+0xf4>)
 8009396:	2300      	movs	r3, #0
 8009398:	6868      	ldr	r0, [r5, #4]
 800939a:	e9c5 231e 	strd	r2, r3, [r5, #120]	; 0x78
 800939e:	b168      	cbz	r0, 80093bc <rclc_executor_init+0xcc>
 80093a0:	68ab      	ldr	r3, [r5, #8]
 80093a2:	b173      	cbz	r3, 80093c2 <rclc_executor_init+0xd2>
 80093a4:	692a      	ldr	r2, [r5, #16]
 80093a6:	fab2 f382 	clz	r3, r2
 80093aa:	095b      	lsrs	r3, r3, #5
 80093ac:	b14a      	cbz	r2, 80093c2 <rclc_executor_init+0xd2>
 80093ae:	4618      	mov	r0, r3
 80093b0:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
 80093b4:	b030      	add	sp, #192	; 0xc0
 80093b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093ba:	200b      	movs	r0, #11
 80093bc:	b030      	add	sp, #192	; 0xc0
 80093be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093c2:	2000      	movs	r0, #0
 80093c4:	b030      	add	sp, #192	; 0xc0
 80093c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093ca:	200b      	movs	r0, #11
 80093cc:	4770      	bx	lr
 80093ce:	200a      	movs	r0, #10
 80093d0:	e7f4      	b.n	80093bc <rclc_executor_init+0xcc>
 80093d2:	bf00      	nop
 80093d4:	f3af 8000 	nop.w
 80093d8:	3b9aca00 	.word	0x3b9aca00
 80093dc:	00000000 	.word	0x00000000
 80093e0:	08014c80 	.word	0x08014c80
 80093e4:	08009251 	.word	0x08009251

080093e8 <rclc_executor_add_service>:
 80093e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ea:	9d06      	ldr	r5, [sp, #24]
 80093ec:	4604      	mov	r4, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	bf18      	it	ne
 80093f2:	2d00      	cmpne	r5, #0
 80093f4:	bf0c      	ite	eq
 80093f6:	2001      	moveq	r0, #1
 80093f8:	2000      	movne	r0, #0
 80093fa:	2a00      	cmp	r2, #0
 80093fc:	bf08      	it	eq
 80093fe:	f040 0001 	orreq.w	r0, r0, #1
 8009402:	2900      	cmp	r1, #0
 8009404:	bf08      	it	eq
 8009406:	f040 0001 	orreq.w	r0, r0, #1
 800940a:	bb40      	cbnz	r0, 800945e <rclc_executor_add_service+0x76>
 800940c:	fab4 f684 	clz	r6, r4
 8009410:	0976      	lsrs	r6, r6, #5
 8009412:	b324      	cbz	r4, 800945e <rclc_executor_add_service+0x76>
 8009414:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 8009418:	42b8      	cmp	r0, r7
 800941a:	d301      	bcc.n	8009420 <rclc_executor_add_service+0x38>
 800941c:	2001      	movs	r0, #1
 800941e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009420:	6867      	ldr	r7, [r4, #4]
 8009422:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 8009426:	f100 0c01 	add.w	ip, r0, #1
 800942a:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 800942e:	6283      	str	r3, [r0, #40]	; 0x28
 8009430:	2305      	movs	r3, #5
 8009432:	6305      	str	r5, [r0, #48]	; 0x30
 8009434:	f104 0514 	add.w	r5, r4, #20
 8009438:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800943c:	f827 300e 	strh.w	r3, [r7, lr]
 8009440:	2301      	movs	r3, #1
 8009442:	62c6      	str	r6, [r0, #44]	; 0x2c
 8009444:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8009448:	4628      	mov	r0, r5
 800944a:	f8c4 c00c 	str.w	ip, [r4, #12]
 800944e:	f006 f905 	bl	800f65c <rcl_wait_set_is_valid>
 8009452:	b930      	cbnz	r0, 8009462 <rclc_executor_add_service+0x7a>
 8009454:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009456:	2000      	movs	r0, #0
 8009458:	3301      	adds	r3, #1
 800945a:	6563      	str	r3, [r4, #84]	; 0x54
 800945c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800945e:	200b      	movs	r0, #11
 8009460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009462:	4628      	mov	r0, r5
 8009464:	f006 f900 	bl	800f668 <rcl_wait_set_fini>
 8009468:	2800      	cmp	r0, #0
 800946a:	d0f3      	beq.n	8009454 <rclc_executor_add_service+0x6c>
 800946c:	e7d7      	b.n	800941e <rclc_executor_add_service+0x36>
 800946e:	bf00      	nop

08009470 <rclc_executor_prepare>:
 8009470:	2800      	cmp	r0, #0
 8009472:	d044      	beq.n	80094fe <rclc_executor_prepare+0x8e>
 8009474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009476:	f100 0514 	add.w	r5, r0, #20
 800947a:	b09b      	sub	sp, #108	; 0x6c
 800947c:	4604      	mov	r4, r0
 800947e:	4628      	mov	r0, r5
 8009480:	f006 f8ec 	bl	800f65c <rcl_wait_set_is_valid>
 8009484:	b110      	cbz	r0, 800948c <rclc_executor_prepare+0x1c>
 8009486:	2000      	movs	r0, #0
 8009488:	b01b      	add	sp, #108	; 0x6c
 800948a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800948c:	4628      	mov	r0, r5
 800948e:	f006 f8eb 	bl	800f668 <rcl_wait_set_fini>
 8009492:	2800      	cmp	r0, #0
 8009494:	d130      	bne.n	80094f8 <rclc_executor_prepare+0x88>
 8009496:	a80c      	add	r0, sp, #48	; 0x30
 8009498:	ae04      	add	r6, sp, #16
 800949a:	f006 f8cb 	bl	800f634 <rcl_get_zero_initialized_wait_set>
 800949e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80094a2:	46ae      	mov	lr, r5
 80094a4:	6927      	ldr	r7, [r4, #16]
 80094a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80094aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80094ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80094b2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80094b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80094ba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80094be:	f8dc 3000 	ldr.w	r3, [ip]
 80094c2:	f8ce 3000 	str.w	r3, [lr]
 80094c6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80094c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	4628      	mov	r0, r5
 80094ce:	6822      	ldr	r2, [r4, #0]
 80094d0:	6033      	str	r3, [r6, #0]
 80094d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094d4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80094d6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80094da:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 80094de:	e9cd 2100 	strd	r2, r1, [sp]
 80094e2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80094e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80094e6:	f006 fbbf 	bl	800fc68 <rcl_wait_set_init>
 80094ea:	2800      	cmp	r0, #0
 80094ec:	d0cc      	beq.n	8009488 <rclc_executor_prepare+0x18>
 80094ee:	900b      	str	r0, [sp, #44]	; 0x2c
 80094f0:	f000 fb0e 	bl	8009b10 <rcutils_reset_error>
 80094f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80094f6:	e7c7      	b.n	8009488 <rclc_executor_prepare+0x18>
 80094f8:	f000 fb0a 	bl	8009b10 <rcutils_reset_error>
 80094fc:	e7cb      	b.n	8009496 <rclc_executor_prepare+0x26>
 80094fe:	200b      	movs	r0, #11
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop

08009504 <rclc_executor_spin_some.part.0>:
 8009504:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009508:	4605      	mov	r5, r0
 800950a:	4691      	mov	r9, r2
 800950c:	4698      	mov	r8, r3
 800950e:	f7ff ffaf 	bl	8009470 <rclc_executor_prepare>
 8009512:	f105 0614 	add.w	r6, r5, #20
 8009516:	4630      	mov	r0, r6
 8009518:	f006 f972 	bl	800f800 <rcl_wait_set_clear>
 800951c:	4607      	mov	r7, r0
 800951e:	2800      	cmp	r0, #0
 8009520:	f040 80a8 	bne.w	8009674 <rclc_executor_spin_some.part.0+0x170>
 8009524:	68ab      	ldr	r3, [r5, #8]
 8009526:	b30b      	cbz	r3, 800956c <rclc_executor_spin_some.part.0+0x68>
 8009528:	4604      	mov	r4, r0
 800952a:	6869      	ldr	r1, [r5, #4]
 800952c:	01a2      	lsls	r2, r4, #6
 800952e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8009532:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 8009536:	b1cb      	cbz	r3, 800956c <rclc_executor_spin_some.part.0+0x68>
 8009538:	5c8b      	ldrb	r3, [r1, r2]
 800953a:	2b0a      	cmp	r3, #10
 800953c:	f200 80de 	bhi.w	80096fc <rclc_executor_spin_some.part.0+0x1f8>
 8009540:	e8df f003 	tbb	[pc, r3]
 8009544:	8da99d9d 	.word	0x8da99d9d
 8009548:	0606068d 	.word	0x0606068d
 800954c:	c1ce      	.short	0xc1ce
 800954e:	b5          	.byte	0xb5
 800954f:	00          	.byte	0x00
 8009550:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8009554:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009558:	4630      	mov	r0, r6
 800955a:	f006 fca1 	bl	800fea0 <rcl_wait_set_add_service>
 800955e:	2800      	cmp	r0, #0
 8009560:	f040 8087 	bne.w	8009672 <rclc_executor_spin_some.part.0+0x16e>
 8009564:	3401      	adds	r4, #1
 8009566:	68ab      	ldr	r3, [r5, #8]
 8009568:	429c      	cmp	r4, r3
 800956a:	d3de      	bcc.n	800952a <rclc_executor_spin_some.part.0+0x26>
 800956c:	4643      	mov	r3, r8
 800956e:	464a      	mov	r2, r9
 8009570:	4630      	mov	r0, r6
 8009572:	f006 fcc1 	bl	800fef8 <rcl_wait>
 8009576:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 800957a:	2b00      	cmp	r3, #0
 800957c:	f000 80c6 	beq.w	800970c <rclc_executor_spin_some.part.0+0x208>
 8009580:	2b01      	cmp	r3, #1
 8009582:	f040 80bb 	bne.w	80096fc <rclc_executor_spin_some.part.0+0x1f8>
 8009586:	68ab      	ldr	r3, [r5, #8]
 8009588:	2b00      	cmp	r3, #0
 800958a:	f000 8159 	beq.w	8009840 <rclc_executor_spin_some.part.0+0x33c>
 800958e:	2400      	movs	r4, #0
 8009590:	f240 1991 	movw	r9, #401	; 0x191
 8009594:	46a0      	mov	r8, r4
 8009596:	e00a      	b.n	80095ae <rclc_executor_spin_some.part.0+0xaa>
 8009598:	f7ff fb56 	bl	8008c48 <_rclc_check_for_new_data>
 800959c:	4604      	mov	r4, r0
 800959e:	b110      	cbz	r0, 80095a6 <rclc_executor_spin_some.part.0+0xa2>
 80095a0:	4548      	cmp	r0, r9
 80095a2:	f040 80b1 	bne.w	8009708 <rclc_executor_spin_some.part.0+0x204>
 80095a6:	68ab      	ldr	r3, [r5, #8]
 80095a8:	4598      	cmp	r8, r3
 80095aa:	f080 8126 	bcs.w	80097fa <rclc_executor_spin_some.part.0+0x2f6>
 80095ae:	686a      	ldr	r2, [r5, #4]
 80095b0:	4631      	mov	r1, r6
 80095b2:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 80095b6:	f108 0801 	add.w	r8, r8, #1
 80095ba:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 80095be:	f1bc 0f00 	cmp.w	ip, #0
 80095c2:	d1e9      	bne.n	8009598 <rclc_executor_spin_some.part.0+0x94>
 80095c4:	4619      	mov	r1, r3
 80095c6:	4610      	mov	r0, r2
 80095c8:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 80095cc:	4798      	blx	r3
 80095ce:	2800      	cmp	r0, #0
 80095d0:	f000 809a 	beq.w	8009708 <rclc_executor_spin_some.part.0+0x204>
 80095d4:	68ab      	ldr	r3, [r5, #8]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f000 8096 	beq.w	8009708 <rclc_executor_spin_some.part.0+0x204>
 80095dc:	f04f 0800 	mov.w	r8, #0
 80095e0:	f240 1991 	movw	r9, #401	; 0x191
 80095e4:	e009      	b.n	80095fa <rclc_executor_spin_some.part.0+0xf6>
 80095e6:	f7ff fb7d 	bl	8008ce4 <_rclc_take_new_data>
 80095ea:	4604      	mov	r4, r0
 80095ec:	b110      	cbz	r0, 80095f4 <rclc_executor_spin_some.part.0+0xf0>
 80095ee:	4548      	cmp	r0, r9
 80095f0:	f040 808a 	bne.w	8009708 <rclc_executor_spin_some.part.0+0x204>
 80095f4:	68ab      	ldr	r3, [r5, #8]
 80095f6:	4598      	cmp	r8, r3
 80095f8:	d209      	bcs.n	800960e <rclc_executor_spin_some.part.0+0x10a>
 80095fa:	6868      	ldr	r0, [r5, #4]
 80095fc:	4631      	mov	r1, r6
 80095fe:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8009602:	f108 0801 	add.w	r8, r8, #1
 8009606:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800960a:	2a00      	cmp	r2, #0
 800960c:	d1eb      	bne.n	80095e6 <rclc_executor_spin_some.part.0+0xe2>
 800960e:	2b00      	cmp	r3, #0
 8009610:	d07a      	beq.n	8009708 <rclc_executor_spin_some.part.0+0x204>
 8009612:	2600      	movs	r6, #0
 8009614:	e00e      	b.n	8009634 <rclc_executor_spin_some.part.0+0x130>
 8009616:	f812 200c 	ldrb.w	r2, [r2, ip]
 800961a:	2a08      	cmp	r2, #8
 800961c:	f000 80fc 	beq.w	8009818 <rclc_executor_spin_some.part.0+0x314>
 8009620:	2a09      	cmp	r2, #9
 8009622:	f000 80ee 	beq.w	8009802 <rclc_executor_spin_some.part.0+0x2fe>
 8009626:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800962a:	b98a      	cbnz	r2, 8009650 <rclc_executor_spin_some.part.0+0x14c>
 800962c:	3601      	adds	r6, #1
 800962e:	429e      	cmp	r6, r3
 8009630:	d267      	bcs.n	8009702 <rclc_executor_spin_some.part.0+0x1fe>
 8009632:	2400      	movs	r4, #0
 8009634:	686a      	ldr	r2, [r5, #4]
 8009636:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800963a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800963e:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 8009642:	2900      	cmp	r1, #0
 8009644:	d060      	beq.n	8009708 <rclc_executor_spin_some.part.0+0x204>
 8009646:	7841      	ldrb	r1, [r0, #1]
 8009648:	2900      	cmp	r1, #0
 800964a:	d0e4      	beq.n	8009616 <rclc_executor_spin_some.part.0+0x112>
 800964c:	2901      	cmp	r1, #1
 800964e:	d1ed      	bne.n	800962c <rclc_executor_spin_some.part.0+0x128>
 8009650:	f7ff fcbc 	bl	8008fcc <_rclc_execute.part.0>
 8009654:	2800      	cmp	r0, #0
 8009656:	f040 80b5 	bne.w	80097c4 <rclc_executor_spin_some.part.0+0x2c0>
 800965a:	68ab      	ldr	r3, [r5, #8]
 800965c:	e7e6      	b.n	800962c <rclc_executor_spin_some.part.0+0x128>
 800965e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8009662:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009666:	4630      	mov	r0, r6
 8009668:	f006 fbee 	bl	800fe48 <rcl_wait_set_add_client>
 800966c:	2800      	cmp	r0, #0
 800966e:	f43f af79 	beq.w	8009564 <rclc_executor_spin_some.part.0+0x60>
 8009672:	4607      	mov	r7, r0
 8009674:	f000 fa4c 	bl	8009b10 <rcutils_reset_error>
 8009678:	4638      	mov	r0, r7
 800967a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800967e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8009682:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009686:	4630      	mov	r0, r6
 8009688:	f006 f88e 	bl	800f7a8 <rcl_wait_set_add_subscription>
 800968c:	2800      	cmp	r0, #0
 800968e:	f43f af69 	beq.w	8009564 <rclc_executor_spin_some.part.0+0x60>
 8009692:	4607      	mov	r7, r0
 8009694:	e7ee      	b.n	8009674 <rclc_executor_spin_some.part.0+0x170>
 8009696:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800969a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800969e:	4630      	mov	r0, r6
 80096a0:	f006 fba2 	bl	800fde8 <rcl_wait_set_add_timer>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	f43f af5d 	beq.w	8009564 <rclc_executor_spin_some.part.0+0x60>
 80096aa:	4607      	mov	r7, r0
 80096ac:	e7e2      	b.n	8009674 <rclc_executor_spin_some.part.0+0x170>
 80096ae:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 80096b2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80096b6:	4630      	mov	r0, r6
 80096b8:	f006 fb6a 	bl	800fd90 <rcl_wait_set_add_guard_condition>
 80096bc:	2800      	cmp	r0, #0
 80096be:	f43f af51 	beq.w	8009564 <rclc_executor_spin_some.part.0+0x60>
 80096c2:	4607      	mov	r7, r0
 80096c4:	e7d6      	b.n	8009674 <rclc_executor_spin_some.part.0+0x170>
 80096c6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80096ca:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 80096ce:	4630      	mov	r0, r6
 80096d0:	3110      	adds	r1, #16
 80096d2:	f007 f8e5 	bl	80108a0 <rcl_action_wait_set_add_action_server>
 80096d6:	2800      	cmp	r0, #0
 80096d8:	f43f af44 	beq.w	8009564 <rclc_executor_spin_some.part.0+0x60>
 80096dc:	4607      	mov	r7, r0
 80096de:	e7c9      	b.n	8009674 <rclc_executor_spin_some.part.0+0x170>
 80096e0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80096e4:	2300      	movs	r3, #0
 80096e6:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 80096ea:	4630      	mov	r0, r6
 80096ec:	3110      	adds	r1, #16
 80096ee:	f006 feaf 	bl	8010450 <rcl_action_wait_set_add_action_client>
 80096f2:	2800      	cmp	r0, #0
 80096f4:	f43f af36 	beq.w	8009564 <rclc_executor_spin_some.part.0+0x60>
 80096f8:	4607      	mov	r7, r0
 80096fa:	e7bb      	b.n	8009674 <rclc_executor_spin_some.part.0+0x170>
 80096fc:	2701      	movs	r7, #1
 80096fe:	f000 fa07 	bl	8009b10 <rcutils_reset_error>
 8009702:	4638      	mov	r0, r7
 8009704:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009708:	4627      	mov	r7, r4
 800970a:	e7fa      	b.n	8009702 <rclc_executor_spin_some.part.0+0x1fe>
 800970c:	68ab      	ldr	r3, [r5, #8]
 800970e:	2b00      	cmp	r3, #0
 8009710:	f000 8093 	beq.w	800983a <rclc_executor_spin_some.part.0+0x336>
 8009714:	2400      	movs	r4, #0
 8009716:	f240 1991 	movw	r9, #401	; 0x191
 800971a:	46a0      	mov	r8, r4
 800971c:	e008      	b.n	8009730 <rclc_executor_spin_some.part.0+0x22c>
 800971e:	f7ff fa93 	bl	8008c48 <_rclc_check_for_new_data>
 8009722:	4604      	mov	r4, r0
 8009724:	b108      	cbz	r0, 800972a <rclc_executor_spin_some.part.0+0x226>
 8009726:	4548      	cmp	r0, r9
 8009728:	d1ee      	bne.n	8009708 <rclc_executor_spin_some.part.0+0x204>
 800972a:	68ab      	ldr	r3, [r5, #8]
 800972c:	4598      	cmp	r8, r3
 800972e:	d266      	bcs.n	80097fe <rclc_executor_spin_some.part.0+0x2fa>
 8009730:	686a      	ldr	r2, [r5, #4]
 8009732:	4631      	mov	r1, r6
 8009734:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8009738:	f108 0801 	add.w	r8, r8, #1
 800973c:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8009740:	f1bc 0f00 	cmp.w	ip, #0
 8009744:	d1eb      	bne.n	800971e <rclc_executor_spin_some.part.0+0x21a>
 8009746:	4619      	mov	r1, r3
 8009748:	4610      	mov	r0, r2
 800974a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 800974e:	4798      	blx	r3
 8009750:	2800      	cmp	r0, #0
 8009752:	d0d9      	beq.n	8009708 <rclc_executor_spin_some.part.0+0x204>
 8009754:	68ab      	ldr	r3, [r5, #8]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d0d6      	beq.n	8009708 <rclc_executor_spin_some.part.0+0x204>
 800975a:	f04f 0a00 	mov.w	sl, #0
 800975e:	f240 1891 	movw	r8, #401	; 0x191
 8009762:	f240 2959 	movw	r9, #601	; 0x259
 8009766:	e00e      	b.n	8009786 <rclc_executor_spin_some.part.0+0x282>
 8009768:	f813 300b 	ldrb.w	r3, [r3, fp]
 800976c:	2b08      	cmp	r3, #8
 800976e:	d034      	beq.n	80097da <rclc_executor_spin_some.part.0+0x2d6>
 8009770:	2b09      	cmp	r3, #9
 8009772:	d029      	beq.n	80097c8 <rclc_executor_spin_some.part.0+0x2c4>
 8009774:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8009778:	bb03      	cbnz	r3, 80097bc <rclc_executor_spin_some.part.0+0x2b8>
 800977a:	f10a 0a01 	add.w	sl, sl, #1
 800977e:	68ab      	ldr	r3, [r5, #8]
 8009780:	459a      	cmp	sl, r3
 8009782:	d2be      	bcs.n	8009702 <rclc_executor_spin_some.part.0+0x1fe>
 8009784:	2400      	movs	r4, #0
 8009786:	6868      	ldr	r0, [r5, #4]
 8009788:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800978c:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8009790:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8009794:	2b00      	cmp	r3, #0
 8009796:	d0b7      	beq.n	8009708 <rclc_executor_spin_some.part.0+0x204>
 8009798:	4631      	mov	r1, r6
 800979a:	f7ff faa3 	bl	8008ce4 <_rclc_take_new_data>
 800979e:	2800      	cmp	r0, #0
 80097a0:	bf18      	it	ne
 80097a2:	4540      	cmpne	r0, r8
 80097a4:	d001      	beq.n	80097aa <rclc_executor_spin_some.part.0+0x2a6>
 80097a6:	4548      	cmp	r0, r9
 80097a8:	d10c      	bne.n	80097c4 <rclc_executor_spin_some.part.0+0x2c0>
 80097aa:	686b      	ldr	r3, [r5, #4]
 80097ac:	eb13 000b 	adds.w	r0, r3, fp
 80097b0:	d021      	beq.n	80097f6 <rclc_executor_spin_some.part.0+0x2f2>
 80097b2:	7842      	ldrb	r2, [r0, #1]
 80097b4:	2a00      	cmp	r2, #0
 80097b6:	d0d7      	beq.n	8009768 <rclc_executor_spin_some.part.0+0x264>
 80097b8:	2a01      	cmp	r2, #1
 80097ba:	d1de      	bne.n	800977a <rclc_executor_spin_some.part.0+0x276>
 80097bc:	f7ff fc06 	bl	8008fcc <_rclc_execute.part.0>
 80097c0:	2800      	cmp	r0, #0
 80097c2:	d0da      	beq.n	800977a <rclc_executor_spin_some.part.0+0x276>
 80097c4:	4607      	mov	r7, r0
 80097c6:	e79c      	b.n	8009702 <rclc_executor_spin_some.part.0+0x1fe>
 80097c8:	6843      	ldr	r3, [r0, #4]
 80097ca:	6a1a      	ldr	r2, [r3, #32]
 80097cc:	2a00      	cmp	r2, #0
 80097ce:	d1f5      	bne.n	80097bc <rclc_executor_spin_some.part.0+0x2b8>
 80097d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d0d0      	beq.n	800977a <rclc_executor_spin_some.part.0+0x276>
 80097d8:	e7f0      	b.n	80097bc <rclc_executor_spin_some.part.0+0x2b8>
 80097da:	6843      	ldr	r3, [r0, #4]
 80097dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80097de:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80097e2:	d1eb      	bne.n	80097bc <rclc_executor_spin_some.part.0+0x2b8>
 80097e4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80097e8:	2a00      	cmp	r2, #0
 80097ea:	d1e7      	bne.n	80097bc <rclc_executor_spin_some.part.0+0x2b8>
 80097ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d0c2      	beq.n	800977a <rclc_executor_spin_some.part.0+0x276>
 80097f4:	e7e2      	b.n	80097bc <rclc_executor_spin_some.part.0+0x2b8>
 80097f6:	270b      	movs	r7, #11
 80097f8:	e783      	b.n	8009702 <rclc_executor_spin_some.part.0+0x1fe>
 80097fa:	686a      	ldr	r2, [r5, #4]
 80097fc:	e6e2      	b.n	80095c4 <rclc_executor_spin_some.part.0+0xc0>
 80097fe:	686a      	ldr	r2, [r5, #4]
 8009800:	e7a1      	b.n	8009746 <rclc_executor_spin_some.part.0+0x242>
 8009802:	6842      	ldr	r2, [r0, #4]
 8009804:	6a11      	ldr	r1, [r2, #32]
 8009806:	2900      	cmp	r1, #0
 8009808:	f47f af22 	bne.w	8009650 <rclc_executor_spin_some.part.0+0x14c>
 800980c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8009810:	2a00      	cmp	r2, #0
 8009812:	f43f af0b 	beq.w	800962c <rclc_executor_spin_some.part.0+0x128>
 8009816:	e71b      	b.n	8009650 <rclc_executor_spin_some.part.0+0x14c>
 8009818:	6842      	ldr	r2, [r0, #4]
 800981a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800981c:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 8009820:	f47f af16 	bne.w	8009650 <rclc_executor_spin_some.part.0+0x14c>
 8009824:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 8009828:	2900      	cmp	r1, #0
 800982a:	f47f af11 	bne.w	8009650 <rclc_executor_spin_some.part.0+0x14c>
 800982e:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8009832:	2a00      	cmp	r2, #0
 8009834:	f43f aefa 	beq.w	800962c <rclc_executor_spin_some.part.0+0x128>
 8009838:	e70a      	b.n	8009650 <rclc_executor_spin_some.part.0+0x14c>
 800983a:	686a      	ldr	r2, [r5, #4]
 800983c:	461c      	mov	r4, r3
 800983e:	e782      	b.n	8009746 <rclc_executor_spin_some.part.0+0x242>
 8009840:	686a      	ldr	r2, [r5, #4]
 8009842:	461c      	mov	r4, r3
 8009844:	e6be      	b.n	80095c4 <rclc_executor_spin_some.part.0+0xc0>
 8009846:	bf00      	nop

08009848 <rclc_executor_spin_some>:
 8009848:	b190      	cbz	r0, 8009870 <rclc_executor_spin_some+0x28>
 800984a:	b570      	push	{r4, r5, r6, lr}
 800984c:	4604      	mov	r4, r0
 800984e:	6800      	ldr	r0, [r0, #0]
 8009850:	4616      	mov	r6, r2
 8009852:	461d      	mov	r5, r3
 8009854:	f005 f854 	bl	800e900 <rcl_context_is_valid>
 8009858:	b130      	cbz	r0, 8009868 <rclc_executor_spin_some+0x20>
 800985a:	4632      	mov	r2, r6
 800985c:	462b      	mov	r3, r5
 800985e:	4620      	mov	r0, r4
 8009860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009864:	f7ff be4e 	b.w	8009504 <rclc_executor_spin_some.part.0>
 8009868:	f000 f952 	bl	8009b10 <rcutils_reset_error>
 800986c:	2001      	movs	r0, #1
 800986e:	bd70      	pop	{r4, r5, r6, pc}
 8009870:	200b      	movs	r0, #11
 8009872:	4770      	bx	lr

08009874 <rclc_executor_handle_counters_zero_init>:
 8009874:	b130      	cbz	r0, 8009884 <rclc_executor_handle_counters_zero_init+0x10>
 8009876:	2220      	movs	r2, #32
 8009878:	2100      	movs	r1, #0
 800987a:	b508      	push	{r3, lr}
 800987c:	f009 ffc2 	bl	8013804 <memset>
 8009880:	2000      	movs	r0, #0
 8009882:	bd08      	pop	{r3, pc}
 8009884:	200b      	movs	r0, #11
 8009886:	4770      	bx	lr

08009888 <rclc_executor_handle_init>:
 8009888:	4603      	mov	r3, r0
 800988a:	b178      	cbz	r0, 80098ac <rclc_executor_handle_init+0x24>
 800988c:	2200      	movs	r2, #0
 800988e:	f04f 0c0b 	mov.w	ip, #11
 8009892:	6341      	str	r1, [r0, #52]	; 0x34
 8009894:	4610      	mov	r0, r2
 8009896:	f8a3 c000 	strh.w	ip, [r3]
 800989a:	631a      	str	r2, [r3, #48]	; 0x30
 800989c:	871a      	strh	r2, [r3, #56]	; 0x38
 800989e:	ed9f 7b04 	vldr	d7, [pc, #16]	; 80098b0 <rclc_executor_handle_init+0x28>
 80098a2:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80098a6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 80098aa:	4770      	bx	lr
 80098ac:	200b      	movs	r0, #11
 80098ae:	4770      	bx	lr
	...

080098b8 <rclc_support_init_with_options>:
 80098b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098bc:	b083      	sub	sp, #12
 80098be:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	bf18      	it	ne
 80098c4:	2f00      	cmpne	r7, #0
 80098c6:	d027      	beq.n	8009918 <rclc_support_init_with_options+0x60>
 80098c8:	4604      	mov	r4, r0
 80098ca:	b328      	cbz	r0, 8009918 <rclc_support_init_with_options+0x60>
 80098cc:	46e9      	mov	r9, sp
 80098ce:	461d      	mov	r5, r3
 80098d0:	460e      	mov	r6, r1
 80098d2:	4690      	mov	r8, r2
 80098d4:	4648      	mov	r0, r9
 80098d6:	f005 f809 	bl	800e8ec <rcl_get_zero_initialized_context>
 80098da:	462a      	mov	r2, r5
 80098dc:	4623      	mov	r3, r4
 80098de:	e899 0003 	ldmia.w	r9, {r0, r1}
 80098e2:	e884 0003 	stmia.w	r4, {r0, r1}
 80098e6:	4641      	mov	r1, r8
 80098e8:	4630      	mov	r0, r6
 80098ea:	f005 f91d 	bl	800eb28 <rcl_init>
 80098ee:	4605      	mov	r5, r0
 80098f0:	b960      	cbnz	r0, 800990c <rclc_support_init_with_options+0x54>
 80098f2:	463a      	mov	r2, r7
 80098f4:	f104 010c 	add.w	r1, r4, #12
 80098f8:	2003      	movs	r0, #3
 80098fa:	60a7      	str	r7, [r4, #8]
 80098fc:	f005 fc90 	bl	800f220 <rcl_clock_init>
 8009900:	4605      	mov	r5, r0
 8009902:	b918      	cbnz	r0, 800990c <rclc_support_init_with_options+0x54>
 8009904:	4628      	mov	r0, r5
 8009906:	b003      	add	sp, #12
 8009908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800990c:	f000 f900 	bl	8009b10 <rcutils_reset_error>
 8009910:	4628      	mov	r0, r5
 8009912:	b003      	add	sp, #12
 8009914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009918:	250b      	movs	r5, #11
 800991a:	4628      	mov	r0, r5
 800991c:	b003      	add	sp, #12
 800991e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009922:	bf00      	nop

08009924 <rclc_node_init_with_options>:
 8009924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009928:	b087      	sub	sp, #28
 800992a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800992c:	2e00      	cmp	r6, #0
 800992e:	bf18      	it	ne
 8009930:	2b00      	cmpne	r3, #0
 8009932:	bf0c      	ite	eq
 8009934:	f04f 0c01 	moveq.w	ip, #1
 8009938:	f04f 0c00 	movne.w	ip, #0
 800993c:	2a00      	cmp	r2, #0
 800993e:	bf08      	it	eq
 8009940:	f04c 0c01 	orreq.w	ip, ip, #1
 8009944:	2900      	cmp	r1, #0
 8009946:	bf08      	it	eq
 8009948:	f04c 0c01 	orreq.w	ip, ip, #1
 800994c:	f1bc 0f00 	cmp.w	ip, #0
 8009950:	d118      	bne.n	8009984 <rclc_node_init_with_options+0x60>
 8009952:	4604      	mov	r4, r0
 8009954:	b1b0      	cbz	r0, 8009984 <rclc_node_init_with_options+0x60>
 8009956:	f10d 0910 	add.w	r9, sp, #16
 800995a:	460d      	mov	r5, r1
 800995c:	4698      	mov	r8, r3
 800995e:	4617      	mov	r7, r2
 8009960:	4648      	mov	r0, r9
 8009962:	f7fe fea3 	bl	80086ac <rcl_get_zero_initialized_node>
 8009966:	9600      	str	r6, [sp, #0]
 8009968:	4643      	mov	r3, r8
 800996a:	463a      	mov	r2, r7
 800996c:	e899 0003 	ldmia.w	r9, {r0, r1}
 8009970:	e884 0003 	stmia.w	r4, {r0, r1}
 8009974:	4629      	mov	r1, r5
 8009976:	4620      	mov	r0, r4
 8009978:	f7fe fea2 	bl	80086c0 <rcl_node_init>
 800997c:	b930      	cbnz	r0, 800998c <rclc_node_init_with_options+0x68>
 800997e:	b007      	add	sp, #28
 8009980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009984:	200b      	movs	r0, #11
 8009986:	b007      	add	sp, #28
 8009988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800998c:	9003      	str	r0, [sp, #12]
 800998e:	f000 f8bf 	bl	8009b10 <rcutils_reset_error>
 8009992:	9803      	ldr	r0, [sp, #12]
 8009994:	b007      	add	sp, #28
 8009996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800999a:	bf00      	nop

0800999c <rclc_service_init_default>:
 800999c:	2b00      	cmp	r3, #0
 800999e:	bf18      	it	ne
 80099a0:	2a00      	cmpne	r2, #0
 80099a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099a6:	4616      	mov	r6, r2
 80099a8:	bf0c      	ite	eq
 80099aa:	2201      	moveq	r2, #1
 80099ac:	2200      	movne	r2, #0
 80099ae:	b09e      	sub	sp, #120	; 0x78
 80099b0:	2900      	cmp	r1, #0
 80099b2:	bf08      	it	eq
 80099b4:	f042 0201 	orreq.w	r2, r2, #1
 80099b8:	bb1a      	cbnz	r2, 8009a02 <rclc_service_init_default+0x66>
 80099ba:	4604      	mov	r4, r0
 80099bc:	b308      	cbz	r0, 8009a02 <rclc_service_init_default+0x66>
 80099be:	f10d 0810 	add.w	r8, sp, #16
 80099c2:	461f      	mov	r7, r3
 80099c4:	460d      	mov	r5, r1
 80099c6:	f7ff f81b 	bl	8008a00 <rcl_get_zero_initialized_service>
 80099ca:	6020      	str	r0, [r4, #0]
 80099cc:	4640      	mov	r0, r8
 80099ce:	f7ff f8af 	bl	8008b30 <rcl_service_get_default_options>
 80099d2:	2250      	movs	r2, #80	; 0x50
 80099d4:	490d      	ldr	r1, [pc, #52]	; (8009a0c <rclc_service_init_default+0x70>)
 80099d6:	4640      	mov	r0, r8
 80099d8:	f00a f833 	bl	8013a42 <memcpy>
 80099dc:	463b      	mov	r3, r7
 80099de:	4632      	mov	r2, r6
 80099e0:	4629      	mov	r1, r5
 80099e2:	4620      	mov	r0, r4
 80099e4:	f8cd 8000 	str.w	r8, [sp]
 80099e8:	f7ff f810 	bl	8008a0c <rcl_service_init>
 80099ec:	b910      	cbnz	r0, 80099f4 <rclc_service_init_default+0x58>
 80099ee:	b01e      	add	sp, #120	; 0x78
 80099f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f4:	9003      	str	r0, [sp, #12]
 80099f6:	f000 f88b 	bl	8009b10 <rcutils_reset_error>
 80099fa:	9803      	ldr	r0, [sp, #12]
 80099fc:	b01e      	add	sp, #120	; 0x78
 80099fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a02:	200b      	movs	r0, #11
 8009a04:	b01e      	add	sp, #120	; 0x78
 8009a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a0a:	bf00      	nop
 8009a0c:	08014d08 	.word	0x08014d08

08009a10 <__default_zero_allocate>:
 8009a10:	f009 b968 	b.w	8012ce4 <calloc>

08009a14 <__default_reallocate>:
 8009a14:	f009 baf4 	b.w	8013000 <realloc>

08009a18 <__default_deallocate>:
 8009a18:	f009 b9d2 	b.w	8012dc0 <free>

08009a1c <__default_allocate>:
 8009a1c:	f009 b9c8 	b.w	8012db0 <malloc>

08009a20 <rcutils_get_zero_initialized_allocator>:
 8009a20:	b510      	push	{r4, lr}
 8009a22:	4c05      	ldr	r4, [pc, #20]	; (8009a38 <rcutils_get_zero_initialized_allocator+0x18>)
 8009a24:	4686      	mov	lr, r0
 8009a26:	4684      	mov	ip, r0
 8009a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009a2e:	6823      	ldr	r3, [r4, #0]
 8009a30:	4670      	mov	r0, lr
 8009a32:	f8cc 3000 	str.w	r3, [ip]
 8009a36:	bd10      	pop	{r4, pc}
 8009a38:	08014d58 	.word	0x08014d58

08009a3c <rcutils_set_default_allocator>:
 8009a3c:	b1a8      	cbz	r0, 8009a6a <rcutils_set_default_allocator+0x2e>
 8009a3e:	6802      	ldr	r2, [r0, #0]
 8009a40:	b1a2      	cbz	r2, 8009a6c <rcutils_set_default_allocator+0x30>
 8009a42:	6841      	ldr	r1, [r0, #4]
 8009a44:	b1a1      	cbz	r1, 8009a70 <rcutils_set_default_allocator+0x34>
 8009a46:	b410      	push	{r4}
 8009a48:	68c4      	ldr	r4, [r0, #12]
 8009a4a:	b164      	cbz	r4, 8009a66 <rcutils_set_default_allocator+0x2a>
 8009a4c:	6880      	ldr	r0, [r0, #8]
 8009a4e:	b138      	cbz	r0, 8009a60 <rcutils_set_default_allocator+0x24>
 8009a50:	4b08      	ldr	r3, [pc, #32]	; (8009a74 <rcutils_set_default_allocator+0x38>)
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	2200      	movs	r2, #0
 8009a56:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8009a5a:	2001      	movs	r0, #1
 8009a5c:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8009a60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a64:	4770      	bx	lr
 8009a66:	4620      	mov	r0, r4
 8009a68:	e7fa      	b.n	8009a60 <rcutils_set_default_allocator+0x24>
 8009a6a:	4770      	bx	lr
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	4770      	bx	lr
 8009a70:	4608      	mov	r0, r1
 8009a72:	4770      	bx	lr
 8009a74:	200001e0 	.word	0x200001e0

08009a78 <rcutils_get_default_allocator>:
 8009a78:	b510      	push	{r4, lr}
 8009a7a:	4c05      	ldr	r4, [pc, #20]	; (8009a90 <rcutils_get_default_allocator+0x18>)
 8009a7c:	4686      	mov	lr, r0
 8009a7e:	4684      	mov	ip, r0
 8009a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	4670      	mov	r0, lr
 8009a8a:	f8cc 3000 	str.w	r3, [ip]
 8009a8e:	bd10      	pop	{r4, pc}
 8009a90:	200001e0 	.word	0x200001e0

08009a94 <rcutils_allocator_is_valid>:
 8009a94:	b158      	cbz	r0, 8009aae <rcutils_allocator_is_valid+0x1a>
 8009a96:	6803      	ldr	r3, [r0, #0]
 8009a98:	b143      	cbz	r3, 8009aac <rcutils_allocator_is_valid+0x18>
 8009a9a:	6843      	ldr	r3, [r0, #4]
 8009a9c:	b133      	cbz	r3, 8009aac <rcutils_allocator_is_valid+0x18>
 8009a9e:	68c3      	ldr	r3, [r0, #12]
 8009aa0:	b123      	cbz	r3, 8009aac <rcutils_allocator_is_valid+0x18>
 8009aa2:	6880      	ldr	r0, [r0, #8]
 8009aa4:	3800      	subs	r0, #0
 8009aa6:	bf18      	it	ne
 8009aa8:	2001      	movne	r0, #1
 8009aaa:	4770      	bx	lr
 8009aac:	4618      	mov	r0, r3
 8009aae:	4770      	bx	lr

08009ab0 <rcutils_get_env>:
 8009ab0:	b168      	cbz	r0, 8009ace <rcutils_get_env+0x1e>
 8009ab2:	b510      	push	{r4, lr}
 8009ab4:	460c      	mov	r4, r1
 8009ab6:	b129      	cbz	r1, 8009ac4 <rcutils_get_env+0x14>
 8009ab8:	f009 f932 	bl	8012d20 <getenv>
 8009abc:	b120      	cbz	r0, 8009ac8 <rcutils_get_env+0x18>
 8009abe:	6020      	str	r0, [r4, #0]
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	bd10      	pop	{r4, pc}
 8009ac4:	4803      	ldr	r0, [pc, #12]	; (8009ad4 <rcutils_get_env+0x24>)
 8009ac6:	bd10      	pop	{r4, pc}
 8009ac8:	4b03      	ldr	r3, [pc, #12]	; (8009ad8 <rcutils_get_env+0x28>)
 8009aca:	6023      	str	r3, [r4, #0]
 8009acc:	bd10      	pop	{r4, pc}
 8009ace:	4803      	ldr	r0, [pc, #12]	; (8009adc <rcutils_get_env+0x2c>)
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	08014d88 	.word	0x08014d88
 8009ad8:	08014eac 	.word	0x08014eac
 8009adc:	08014d6c 	.word	0x08014d6c

08009ae0 <rcutils_get_error_string>:
 8009ae0:	4b06      	ldr	r3, [pc, #24]	; (8009afc <rcutils_get_error_string+0x1c>)
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	b13b      	cbz	r3, 8009af6 <rcutils_get_error_string+0x16>
 8009ae6:	4b06      	ldr	r3, [pc, #24]	; (8009b00 <rcutils_get_error_string+0x20>)
 8009ae8:	781a      	ldrb	r2, [r3, #0]
 8009aea:	b90a      	cbnz	r2, 8009af0 <rcutils_get_error_string+0x10>
 8009aec:	2201      	movs	r2, #1
 8009aee:	701a      	strb	r2, [r3, #0]
 8009af0:	4b04      	ldr	r3, [pc, #16]	; (8009b04 <rcutils_get_error_string+0x24>)
 8009af2:	7818      	ldrb	r0, [r3, #0]
 8009af4:	4770      	bx	lr
 8009af6:	4b04      	ldr	r3, [pc, #16]	; (8009b08 <rcutils_get_error_string+0x28>)
 8009af8:	7818      	ldrb	r0, [r3, #0]
 8009afa:	4770      	bx	lr
 8009afc:	2000c2e0 	.word	0x2000c2e0
 8009b00:	2000c2f9 	.word	0x2000c2f9
 8009b04:	2000c2f8 	.word	0x2000c2f8
 8009b08:	080149c8 	.word	0x080149c8
 8009b0c:	00000000 	.word	0x00000000

08009b10 <rcutils_reset_error>:
 8009b10:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8009b30 <rcutils_reset_error+0x20>
 8009b14:	2300      	movs	r3, #0
 8009b16:	4a08      	ldr	r2, [pc, #32]	; (8009b38 <rcutils_reset_error+0x28>)
 8009b18:	4808      	ldr	r0, [pc, #32]	; (8009b3c <rcutils_reset_error+0x2c>)
 8009b1a:	8013      	strh	r3, [r2, #0]
 8009b1c:	4908      	ldr	r1, [pc, #32]	; (8009b40 <rcutils_reset_error+0x30>)
 8009b1e:	7003      	strb	r3, [r0, #0]
 8009b20:	700b      	strb	r3, [r1, #0]
 8009b22:	ed82 7b02 	vstr	d7, [r2, #8]
 8009b26:	4a07      	ldr	r2, [pc, #28]	; (8009b44 <rcutils_reset_error+0x34>)
 8009b28:	7013      	strb	r3, [r2, #0]
 8009b2a:	4770      	bx	lr
 8009b2c:	f3af 8000 	nop.w
	...
 8009b38:	2000c2e8 	.word	0x2000c2e8
 8009b3c:	2000c2f9 	.word	0x2000c2f9
 8009b40:	2000c2f8 	.word	0x2000c2f8
 8009b44:	2000c2e0 	.word	0x2000c2e0

08009b48 <rcutils_format_string_limit>:
 8009b48:	b40f      	push	{r0, r1, r2, r3}
 8009b4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b4c:	b083      	sub	sp, #12
 8009b4e:	ac08      	add	r4, sp, #32
 8009b50:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009b52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009b56:	b326      	cbz	r6, 8009ba2 <rcutils_format_string_limit+0x5a>
 8009b58:	a808      	add	r0, sp, #32
 8009b5a:	f7ff ff9b 	bl	8009a94 <rcutils_allocator_is_valid>
 8009b5e:	b300      	cbz	r0, 8009ba2 <rcutils_format_string_limit+0x5a>
 8009b60:	2100      	movs	r1, #0
 8009b62:	ab0f      	add	r3, sp, #60	; 0x3c
 8009b64:	4632      	mov	r2, r6
 8009b66:	4608      	mov	r0, r1
 8009b68:	e9cd 3300 	strd	r3, r3, [sp]
 8009b6c:	f000 f906 	bl	8009d7c <rcutils_vsnprintf>
 8009b70:	1c43      	adds	r3, r0, #1
 8009b72:	4605      	mov	r5, r0
 8009b74:	d015      	beq.n	8009ba2 <rcutils_format_string_limit+0x5a>
 8009b76:	1c47      	adds	r7, r0, #1
 8009b78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b7a:	429f      	cmp	r7, r3
 8009b7c:	d901      	bls.n	8009b82 <rcutils_format_string_limit+0x3a>
 8009b7e:	1e5d      	subs	r5, r3, #1
 8009b80:	461f      	mov	r7, r3
 8009b82:	9b08      	ldr	r3, [sp, #32]
 8009b84:	4638      	mov	r0, r7
 8009b86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b88:	4798      	blx	r3
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	b148      	cbz	r0, 8009ba2 <rcutils_format_string_limit+0x5a>
 8009b8e:	4632      	mov	r2, r6
 8009b90:	4639      	mov	r1, r7
 8009b92:	9b01      	ldr	r3, [sp, #4]
 8009b94:	f000 f8f2 	bl	8009d7c <rcutils_vsnprintf>
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	db09      	blt.n	8009bb0 <rcutils_format_string_limit+0x68>
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	5563      	strb	r3, [r4, r5]
 8009ba0:	e000      	b.n	8009ba4 <rcutils_format_string_limit+0x5c>
 8009ba2:	2400      	movs	r4, #0
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	b003      	add	sp, #12
 8009ba8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009bac:	b004      	add	sp, #16
 8009bae:	4770      	bx	lr
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009bb6:	2400      	movs	r4, #0
 8009bb8:	4798      	blx	r3
 8009bba:	e7f3      	b.n	8009ba4 <rcutils_format_string_limit+0x5c>

08009bbc <rcutils_repl_str>:
 8009bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc0:	ed2d 8b02 	vpush	{d8}
 8009bc4:	b087      	sub	sp, #28
 8009bc6:	2600      	movs	r6, #0
 8009bc8:	4680      	mov	r8, r0
 8009bca:	468a      	mov	sl, r1
 8009bcc:	9000      	str	r0, [sp, #0]
 8009bce:	4608      	mov	r0, r1
 8009bd0:	ee08 2a10 	vmov	s16, r2
 8009bd4:	4699      	mov	r9, r3
 8009bd6:	2510      	movs	r5, #16
 8009bd8:	f7f6 fb3c 	bl	8000254 <strlen>
 8009bdc:	4637      	mov	r7, r6
 8009bde:	46b3      	mov	fp, r6
 8009be0:	9001      	str	r0, [sp, #4]
 8009be2:	e01e      	b.n	8009c22 <rcutils_repl_str+0x66>
 8009be4:	f10b 0b01 	add.w	fp, fp, #1
 8009be8:	9b01      	ldr	r3, [sp, #4]
 8009bea:	455e      	cmp	r6, fp
 8009bec:	eb04 0803 	add.w	r8, r4, r3
 8009bf0:	d211      	bcs.n	8009c16 <rcutils_repl_str+0x5a>
 8009bf2:	442e      	add	r6, r5
 8009bf4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8009bf8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8009bfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c00:	00b1      	lsls	r1, r6, #2
 8009c02:	4798      	blx	r3
 8009c04:	2800      	cmp	r0, #0
 8009c06:	f000 8088 	beq.w	8009d1a <rcutils_repl_str+0x15e>
 8009c0a:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8009c0e:	4607      	mov	r7, r0
 8009c10:	bf28      	it	cs
 8009c12:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8009c16:	9a00      	ldr	r2, [sp, #0]
 8009c18:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8009c1c:	1aa4      	subs	r4, r4, r2
 8009c1e:	f843 4c04 	str.w	r4, [r3, #-4]
 8009c22:	4651      	mov	r1, sl
 8009c24:	4640      	mov	r0, r8
 8009c26:	f009 fe14 	bl	8013852 <strstr>
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	4638      	mov	r0, r7
 8009c2e:	2c00      	cmp	r4, #0
 8009c30:	d1d8      	bne.n	8009be4 <rcutils_repl_str+0x28>
 8009c32:	4640      	mov	r0, r8
 8009c34:	f7f6 fb0e 	bl	8000254 <strlen>
 8009c38:	9b00      	ldr	r3, [sp, #0]
 8009c3a:	eba8 0803 	sub.w	r8, r8, r3
 8009c3e:	eb08 0400 	add.w	r4, r8, r0
 8009c42:	9402      	str	r4, [sp, #8]
 8009c44:	f1bb 0f00 	cmp.w	fp, #0
 8009c48:	d045      	beq.n	8009cd6 <rcutils_repl_str+0x11a>
 8009c4a:	ee18 0a10 	vmov	r0, s16
 8009c4e:	f7f6 fb01 	bl	8000254 <strlen>
 8009c52:	9a01      	ldr	r2, [sp, #4]
 8009c54:	4606      	mov	r6, r0
 8009c56:	f8d9 3000 	ldr.w	r3, [r9]
 8009c5a:	1a82      	subs	r2, r0, r2
 8009c5c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8009c60:	fb0b 4202 	mla	r2, fp, r2, r4
 8009c64:	1c50      	adds	r0, r2, #1
 8009c66:	9205      	str	r2, [sp, #20]
 8009c68:	4798      	blx	r3
 8009c6a:	4682      	mov	sl, r0
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d054      	beq.n	8009d1a <rcutils_repl_str+0x15e>
 8009c70:	683a      	ldr	r2, [r7, #0]
 8009c72:	463d      	mov	r5, r7
 8009c74:	9900      	ldr	r1, [sp, #0]
 8009c76:	2401      	movs	r4, #1
 8009c78:	f009 fee3 	bl	8013a42 <memcpy>
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8009c82:	eb0a 0803 	add.w	r8, sl, r3
 8009c86:	ee18 7a10 	vmov	r7, s16
 8009c8a:	f8dd a000 	ldr.w	sl, [sp]
 8009c8e:	f8cd 9000 	str.w	r9, [sp]
 8009c92:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009c96:	4632      	mov	r2, r6
 8009c98:	4639      	mov	r1, r7
 8009c9a:	4640      	mov	r0, r8
 8009c9c:	44b0      	add	r8, r6
 8009c9e:	f009 fed0 	bl	8013a42 <memcpy>
 8009ca2:	f855 2b04 	ldr.w	r2, [r5], #4
 8009ca6:	45a3      	cmp	fp, r4
 8009ca8:	444a      	add	r2, r9
 8009caa:	eb0a 0102 	add.w	r1, sl, r2
 8009cae:	d02a      	beq.n	8009d06 <rcutils_repl_str+0x14a>
 8009cb0:	6828      	ldr	r0, [r5, #0]
 8009cb2:	1a82      	subs	r2, r0, r2
 8009cb4:	4640      	mov	r0, r8
 8009cb6:	4490      	add	r8, r2
 8009cb8:	f009 fec3 	bl	8013a42 <memcpy>
 8009cbc:	1c62      	adds	r2, r4, #1
 8009cbe:	45a3      	cmp	fp, r4
 8009cc0:	4614      	mov	r4, r2
 8009cc2:	d8e8      	bhi.n	8009c96 <rcutils_repl_str+0xda>
 8009cc4:	f8dd 9000 	ldr.w	r9, [sp]
 8009cc8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8009ccc:	2300      	movs	r3, #0
 8009cce:	9a05      	ldr	r2, [sp, #20]
 8009cd0:	f80a 3002 	strb.w	r3, [sl, r2]
 8009cd4:	e00b      	b.n	8009cee <rcutils_repl_str+0x132>
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f8d9 3000 	ldr.w	r3, [r9]
 8009cdc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8009ce0:	3001      	adds	r0, #1
 8009ce2:	4798      	blx	r3
 8009ce4:	4682      	mov	sl, r0
 8009ce6:	b110      	cbz	r0, 8009cee <rcutils_repl_str+0x132>
 8009ce8:	9900      	ldr	r1, [sp, #0]
 8009cea:	f009 fea2 	bl	8013a32 <strcpy>
 8009cee:	4638      	mov	r0, r7
 8009cf0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009cf4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8009cf8:	4798      	blx	r3
 8009cfa:	4650      	mov	r0, sl
 8009cfc:	b007      	add	sp, #28
 8009cfe:	ecbd 8b02 	vpop	{d8}
 8009d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d06:	9b02      	ldr	r3, [sp, #8]
 8009d08:	4640      	mov	r0, r8
 8009d0a:	f8dd 9000 	ldr.w	r9, [sp]
 8009d0e:	1a9a      	subs	r2, r3, r2
 8009d10:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8009d14:	f009 fe95 	bl	8013a42 <memcpy>
 8009d18:	e7d8      	b.n	8009ccc <rcutils_repl_str+0x110>
 8009d1a:	f04f 0a00 	mov.w	sl, #0
 8009d1e:	e7e6      	b.n	8009cee <rcutils_repl_str+0x132>

08009d20 <rcutils_snprintf>:
 8009d20:	b40c      	push	{r2, r3}
 8009d22:	b530      	push	{r4, r5, lr}
 8009d24:	b083      	sub	sp, #12
 8009d26:	ab06      	add	r3, sp, #24
 8009d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d2c:	9301      	str	r3, [sp, #4]
 8009d2e:	b1e2      	cbz	r2, 8009d6a <rcutils_snprintf+0x4a>
 8009d30:	fab0 f480 	clz	r4, r0
 8009d34:	fab1 f581 	clz	r5, r1
 8009d38:	ea50 0c01 	orrs.w	ip, r0, r1
 8009d3c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8009d40:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8009d44:	d008      	beq.n	8009d58 <rcutils_snprintf+0x38>
 8009d46:	b984      	cbnz	r4, 8009d6a <rcutils_snprintf+0x4a>
 8009d48:	b97d      	cbnz	r5, 8009d6a <rcutils_snprintf+0x4a>
 8009d4a:	f009 fc8d 	bl	8013668 <vsniprintf>
 8009d4e:	b003      	add	sp, #12
 8009d50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d54:	b002      	add	sp, #8
 8009d56:	4770      	bx	lr
 8009d58:	4661      	mov	r1, ip
 8009d5a:	4660      	mov	r0, ip
 8009d5c:	f009 fc84 	bl	8013668 <vsniprintf>
 8009d60:	b003      	add	sp, #12
 8009d62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d66:	b002      	add	sp, #8
 8009d68:	4770      	bx	lr
 8009d6a:	f009 fe35 	bl	80139d8 <__errno>
 8009d6e:	2216      	movs	r2, #22
 8009d70:	4603      	mov	r3, r0
 8009d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d76:	601a      	str	r2, [r3, #0]
 8009d78:	e7e9      	b.n	8009d4e <rcutils_snprintf+0x2e>
 8009d7a:	bf00      	nop

08009d7c <rcutils_vsnprintf>:
 8009d7c:	b570      	push	{r4, r5, r6, lr}
 8009d7e:	b1b2      	cbz	r2, 8009dae <rcutils_vsnprintf+0x32>
 8009d80:	fab0 f480 	clz	r4, r0
 8009d84:	fab1 f581 	clz	r5, r1
 8009d88:	ea50 0c01 	orrs.w	ip, r0, r1
 8009d8c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8009d90:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8009d94:	d005      	beq.n	8009da2 <rcutils_vsnprintf+0x26>
 8009d96:	b954      	cbnz	r4, 8009dae <rcutils_vsnprintf+0x32>
 8009d98:	b94d      	cbnz	r5, 8009dae <rcutils_vsnprintf+0x32>
 8009d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d9e:	f009 bc63 	b.w	8013668 <vsniprintf>
 8009da2:	4661      	mov	r1, ip
 8009da4:	4660      	mov	r0, ip
 8009da6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009daa:	f009 bc5d 	b.w	8013668 <vsniprintf>
 8009dae:	f009 fe13 	bl	80139d8 <__errno>
 8009db2:	2316      	movs	r3, #22
 8009db4:	6003      	str	r3, [r0, #0]
 8009db6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dba:	bd70      	pop	{r4, r5, r6, pc}

08009dbc <rcutils_strdup>:
 8009dbc:	b084      	sub	sp, #16
 8009dbe:	b570      	push	{r4, r5, r6, lr}
 8009dc0:	b082      	sub	sp, #8
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	ac07      	add	r4, sp, #28
 8009dc6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8009dca:	b1b0      	cbz	r0, 8009dfa <rcutils_strdup+0x3e>
 8009dcc:	f7f6 fa42 	bl	8000254 <strlen>
 8009dd0:	1c42      	adds	r2, r0, #1
 8009dd2:	9b07      	ldr	r3, [sp, #28]
 8009dd4:	4606      	mov	r6, r0
 8009dd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dd8:	4610      	mov	r0, r2
 8009dda:	9201      	str	r2, [sp, #4]
 8009ddc:	4798      	blx	r3
 8009dde:	4604      	mov	r4, r0
 8009de0:	b128      	cbz	r0, 8009dee <rcutils_strdup+0x32>
 8009de2:	9a01      	ldr	r2, [sp, #4]
 8009de4:	4629      	mov	r1, r5
 8009de6:	f009 fe2c 	bl	8013a42 <memcpy>
 8009dea:	2300      	movs	r3, #0
 8009dec:	55a3      	strb	r3, [r4, r6]
 8009dee:	4620      	mov	r0, r4
 8009df0:	b002      	add	sp, #8
 8009df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009df6:	b004      	add	sp, #16
 8009df8:	4770      	bx	lr
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	e7f7      	b.n	8009dee <rcutils_strdup+0x32>
 8009dfe:	bf00      	nop

08009e00 <rcutils_strndup>:
 8009e00:	b082      	sub	sp, #8
 8009e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e04:	ac06      	add	r4, sp, #24
 8009e06:	4605      	mov	r5, r0
 8009e08:	e884 000c 	stmia.w	r4, {r2, r3}
 8009e0c:	b188      	cbz	r0, 8009e32 <rcutils_strndup+0x32>
 8009e0e:	1c4f      	adds	r7, r1, #1
 8009e10:	460e      	mov	r6, r1
 8009e12:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009e14:	4638      	mov	r0, r7
 8009e16:	4790      	blx	r2
 8009e18:	4604      	mov	r4, r0
 8009e1a:	b128      	cbz	r0, 8009e28 <rcutils_strndup+0x28>
 8009e1c:	463a      	mov	r2, r7
 8009e1e:	4629      	mov	r1, r5
 8009e20:	f009 fe0f 	bl	8013a42 <memcpy>
 8009e24:	2300      	movs	r3, #0
 8009e26:	55a3      	strb	r3, [r4, r6]
 8009e28:	4620      	mov	r0, r4
 8009e2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e2e:	b002      	add	sp, #8
 8009e30:	4770      	bx	lr
 8009e32:	4604      	mov	r4, r0
 8009e34:	e7f8      	b.n	8009e28 <rcutils_strndup+0x28>
 8009e36:	bf00      	nop

08009e38 <rcutils_system_time_now>:
 8009e38:	b300      	cbz	r0, 8009e7c <rcutils_system_time_now+0x44>
 8009e3a:	b570      	push	{r4, r5, r6, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	4604      	mov	r4, r0
 8009e40:	2001      	movs	r0, #1
 8009e42:	4669      	mov	r1, sp
 8009e44:	f7f7 fb14 	bl	8001470 <clock_gettime>
 8009e48:	e9dd 3100 	ldrd	r3, r1, [sp]
 8009e4c:	2900      	cmp	r1, #0
 8009e4e:	db12      	blt.n	8009e76 <rcutils_system_time_now+0x3e>
 8009e50:	ea53 0201 	orrs.w	r2, r3, r1
 8009e54:	9d02      	ldr	r5, [sp, #8]
 8009e56:	d101      	bne.n	8009e5c <rcutils_system_time_now+0x24>
 8009e58:	2d00      	cmp	r5, #0
 8009e5a:	db0c      	blt.n	8009e76 <rcutils_system_time_now+0x3e>
 8009e5c:	4e08      	ldr	r6, [pc, #32]	; (8009e80 <rcutils_system_time_now+0x48>)
 8009e5e:	2000      	movs	r0, #0
 8009e60:	fba3 3206 	umull	r3, r2, r3, r6
 8009e64:	195b      	adds	r3, r3, r5
 8009e66:	fb06 2201 	mla	r2, r6, r1, r2
 8009e6a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8009e6e:	e9c4 3200 	strd	r3, r2, [r4]
 8009e72:	b004      	add	sp, #16
 8009e74:	bd70      	pop	{r4, r5, r6, pc}
 8009e76:	2002      	movs	r0, #2
 8009e78:	b004      	add	sp, #16
 8009e7a:	bd70      	pop	{r4, r5, r6, pc}
 8009e7c:	200b      	movs	r0, #11
 8009e7e:	4770      	bx	lr
 8009e80:	3b9aca00 	.word	0x3b9aca00

08009e84 <rcutils_steady_time_now>:
 8009e84:	b300      	cbz	r0, 8009ec8 <rcutils_steady_time_now+0x44>
 8009e86:	b570      	push	{r4, r5, r6, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	4669      	mov	r1, sp
 8009e90:	f7f7 faee 	bl	8001470 <clock_gettime>
 8009e94:	e9dd 3100 	ldrd	r3, r1, [sp]
 8009e98:	2900      	cmp	r1, #0
 8009e9a:	db12      	blt.n	8009ec2 <rcutils_steady_time_now+0x3e>
 8009e9c:	ea53 0201 	orrs.w	r2, r3, r1
 8009ea0:	9d02      	ldr	r5, [sp, #8]
 8009ea2:	d101      	bne.n	8009ea8 <rcutils_steady_time_now+0x24>
 8009ea4:	2d00      	cmp	r5, #0
 8009ea6:	db0c      	blt.n	8009ec2 <rcutils_steady_time_now+0x3e>
 8009ea8:	4e08      	ldr	r6, [pc, #32]	; (8009ecc <rcutils_steady_time_now+0x48>)
 8009eaa:	2000      	movs	r0, #0
 8009eac:	fba3 3206 	umull	r3, r2, r3, r6
 8009eb0:	195b      	adds	r3, r3, r5
 8009eb2:	fb06 2201 	mla	r2, r6, r1, r2
 8009eb6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8009eba:	e9c4 3200 	strd	r3, r2, [r4]
 8009ebe:	b004      	add	sp, #16
 8009ec0:	bd70      	pop	{r4, r5, r6, pc}
 8009ec2:	2002      	movs	r0, #2
 8009ec4:	b004      	add	sp, #16
 8009ec6:	bd70      	pop	{r4, r5, r6, pc}
 8009ec8:	200b      	movs	r0, #11
 8009eca:	4770      	bx	lr
 8009ecc:	3b9aca00 	.word	0x3b9aca00

08009ed0 <rmw_get_zero_initialized_init_options>:
 8009ed0:	b510      	push	{r4, lr}
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	2238      	movs	r2, #56	; 0x38
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	f009 fc94 	bl	8013804 <memset>
 8009edc:	f104 0010 	add.w	r0, r4, #16
 8009ee0:	f000 f806 	bl	8009ef0 <rmw_get_default_security_options>
 8009ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ee8:	4620      	mov	r0, r4
 8009eea:	60e3      	str	r3, [r4, #12]
 8009eec:	bd10      	pop	{r4, pc}
 8009eee:	bf00      	nop

08009ef0 <rmw_get_default_security_options>:
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	7002      	strb	r2, [r0, #0]
 8009ef4:	6042      	str	r2, [r0, #4]
 8009ef6:	4770      	bx	lr

08009ef8 <rmw_validate_namespace_with_size>:
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	d043      	beq.n	8009f84 <rmw_validate_namespace_with_size+0x8c>
 8009efc:	b570      	push	{r4, r5, r6, lr}
 8009efe:	4614      	mov	r4, r2
 8009f00:	b0c2      	sub	sp, #264	; 0x108
 8009f02:	b32a      	cbz	r2, 8009f50 <rmw_validate_namespace_with_size+0x58>
 8009f04:	2901      	cmp	r1, #1
 8009f06:	460d      	mov	r5, r1
 8009f08:	461e      	mov	r6, r3
 8009f0a:	d102      	bne.n	8009f12 <rmw_validate_namespace_with_size+0x1a>
 8009f0c:	7803      	ldrb	r3, [r0, #0]
 8009f0e:	2b2f      	cmp	r3, #47	; 0x2f
 8009f10:	d012      	beq.n	8009f38 <rmw_validate_namespace_with_size+0x40>
 8009f12:	aa01      	add	r2, sp, #4
 8009f14:	4669      	mov	r1, sp
 8009f16:	f007 f977 	bl	8011208 <rmw_validate_full_topic_name>
 8009f1a:	b980      	cbnz	r0, 8009f3e <rmw_validate_namespace_with_size+0x46>
 8009f1c:	9a00      	ldr	r2, [sp, #0]
 8009f1e:	b14a      	cbz	r2, 8009f34 <rmw_validate_namespace_with_size+0x3c>
 8009f20:	2a07      	cmp	r2, #7
 8009f22:	d007      	beq.n	8009f34 <rmw_validate_namespace_with_size+0x3c>
 8009f24:	1e53      	subs	r3, r2, #1
 8009f26:	2b05      	cmp	r3, #5
 8009f28:	d82e      	bhi.n	8009f88 <rmw_validate_namespace_with_size+0x90>
 8009f2a:	e8df f003 	tbb	[pc, r3]
 8009f2e:	1f1c      	.short	0x1f1c
 8009f30:	14282522 	.word	0x14282522
 8009f34:	2df5      	cmp	r5, #245	; 0xf5
 8009f36:	d804      	bhi.n	8009f42 <rmw_validate_namespace_with_size+0x4a>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	6023      	str	r3, [r4, #0]
 8009f3e:	b042      	add	sp, #264	; 0x108
 8009f40:	bd70      	pop	{r4, r5, r6, pc}
 8009f42:	2307      	movs	r3, #7
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	2e00      	cmp	r6, #0
 8009f48:	d0f9      	beq.n	8009f3e <rmw_validate_namespace_with_size+0x46>
 8009f4a:	23f4      	movs	r3, #244	; 0xf4
 8009f4c:	6033      	str	r3, [r6, #0]
 8009f4e:	e7f6      	b.n	8009f3e <rmw_validate_namespace_with_size+0x46>
 8009f50:	200b      	movs	r0, #11
 8009f52:	b042      	add	sp, #264	; 0x108
 8009f54:	bd70      	pop	{r4, r5, r6, pc}
 8009f56:	2306      	movs	r3, #6
 8009f58:	6023      	str	r3, [r4, #0]
 8009f5a:	2e00      	cmp	r6, #0
 8009f5c:	d0ef      	beq.n	8009f3e <rmw_validate_namespace_with_size+0x46>
 8009f5e:	9b01      	ldr	r3, [sp, #4]
 8009f60:	6033      	str	r3, [r6, #0]
 8009f62:	b042      	add	sp, #264	; 0x108
 8009f64:	bd70      	pop	{r4, r5, r6, pc}
 8009f66:	2301      	movs	r3, #1
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	e7f6      	b.n	8009f5a <rmw_validate_namespace_with_size+0x62>
 8009f6c:	2302      	movs	r3, #2
 8009f6e:	6023      	str	r3, [r4, #0]
 8009f70:	e7f3      	b.n	8009f5a <rmw_validate_namespace_with_size+0x62>
 8009f72:	2303      	movs	r3, #3
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	e7f0      	b.n	8009f5a <rmw_validate_namespace_with_size+0x62>
 8009f78:	2304      	movs	r3, #4
 8009f7a:	6023      	str	r3, [r4, #0]
 8009f7c:	e7ed      	b.n	8009f5a <rmw_validate_namespace_with_size+0x62>
 8009f7e:	2305      	movs	r3, #5
 8009f80:	6023      	str	r3, [r4, #0]
 8009f82:	e7ea      	b.n	8009f5a <rmw_validate_namespace_with_size+0x62>
 8009f84:	200b      	movs	r0, #11
 8009f86:	4770      	bx	lr
 8009f88:	4613      	mov	r3, r2
 8009f8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009f8e:	4a03      	ldr	r2, [pc, #12]	; (8009f9c <rmw_validate_namespace_with_size+0xa4>)
 8009f90:	a802      	add	r0, sp, #8
 8009f92:	f7ff fec5 	bl	8009d20 <rcutils_snprintf>
 8009f96:	2001      	movs	r0, #1
 8009f98:	e7d1      	b.n	8009f3e <rmw_validate_namespace_with_size+0x46>
 8009f9a:	bf00      	nop
 8009f9c:	08014da4 	.word	0x08014da4

08009fa0 <rmw_validate_namespace>:
 8009fa0:	b168      	cbz	r0, 8009fbe <rmw_validate_namespace+0x1e>
 8009fa2:	b570      	push	{r4, r5, r6, lr}
 8009fa4:	460d      	mov	r5, r1
 8009fa6:	4616      	mov	r6, r2
 8009fa8:	4604      	mov	r4, r0
 8009faa:	f7f6 f953 	bl	8000254 <strlen>
 8009fae:	4633      	mov	r3, r6
 8009fb0:	4601      	mov	r1, r0
 8009fb2:	462a      	mov	r2, r5
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009fba:	f7ff bf9d 	b.w	8009ef8 <rmw_validate_namespace_with_size>
 8009fbe:	200b      	movs	r0, #11
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop

08009fc4 <rmw_namespace_validation_result_string>:
 8009fc4:	2807      	cmp	r0, #7
 8009fc6:	d803      	bhi.n	8009fd0 <rmw_namespace_validation_result_string+0xc>
 8009fc8:	4b02      	ldr	r3, [pc, #8]	; (8009fd4 <rmw_namespace_validation_result_string+0x10>)
 8009fca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009fce:	4770      	bx	lr
 8009fd0:	4801      	ldr	r0, [pc, #4]	; (8009fd8 <rmw_namespace_validation_result_string+0x14>)
 8009fd2:	4770      	bx	lr
 8009fd4:	08014f9c 	.word	0x08014f9c
 8009fd8:	08014df4 	.word	0x08014df4

08009fdc <rmw_validate_node_name>:
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	d042      	beq.n	800a066 <rmw_validate_node_name+0x8a>
 8009fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe4:	460d      	mov	r5, r1
 8009fe6:	2900      	cmp	r1, #0
 8009fe8:	d03f      	beq.n	800a06a <rmw_validate_node_name+0x8e>
 8009fea:	4604      	mov	r4, r0
 8009fec:	4616      	mov	r6, r2
 8009fee:	f7f6 f931 	bl	8000254 <strlen>
 8009ff2:	b310      	cbz	r0, 800a03a <rmw_validate_node_name+0x5e>
 8009ff4:	1e63      	subs	r3, r4, #1
 8009ff6:	f1c4 0101 	rsb	r1, r4, #1
 8009ffa:	eb03 0800 	add.w	r8, r3, r0
 8009ffe:	18cf      	adds	r7, r1, r3
 800a000:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800a004:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 800a008:	f02e 0c20 	bic.w	ip, lr, #32
 800a00c:	2a09      	cmp	r2, #9
 800a00e:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 800a012:	d905      	bls.n	800a020 <rmw_validate_node_name+0x44>
 800a014:	f1bc 0f19 	cmp.w	ip, #25
 800a018:	d902      	bls.n	800a020 <rmw_validate_node_name+0x44>
 800a01a:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800a01e:	d114      	bne.n	800a04a <rmw_validate_node_name+0x6e>
 800a020:	4598      	cmp	r8, r3
 800a022:	d1ec      	bne.n	8009ffe <rmw_validate_node_name+0x22>
 800a024:	7822      	ldrb	r2, [r4, #0]
 800a026:	4b16      	ldr	r3, [pc, #88]	; (800a080 <rmw_validate_node_name+0xa4>)
 800a028:	5cd3      	ldrb	r3, [r2, r3]
 800a02a:	f013 0304 	ands.w	r3, r3, #4
 800a02e:	d113      	bne.n	800a058 <rmw_validate_node_name+0x7c>
 800a030:	28ff      	cmp	r0, #255	; 0xff
 800a032:	d81c      	bhi.n	800a06e <rmw_validate_node_name+0x92>
 800a034:	4618      	mov	r0, r3
 800a036:	602b      	str	r3, [r5, #0]
 800a038:	e00c      	b.n	800a054 <rmw_validate_node_name+0x78>
 800a03a:	2301      	movs	r3, #1
 800a03c:	602b      	str	r3, [r5, #0]
 800a03e:	b17e      	cbz	r6, 800a060 <rmw_validate_node_name+0x84>
 800a040:	2300      	movs	r3, #0
 800a042:	4618      	mov	r0, r3
 800a044:	6033      	str	r3, [r6, #0]
 800a046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a04a:	2302      	movs	r3, #2
 800a04c:	602b      	str	r3, [r5, #0]
 800a04e:	b13e      	cbz	r6, 800a060 <rmw_validate_node_name+0x84>
 800a050:	2000      	movs	r0, #0
 800a052:	6037      	str	r7, [r6, #0]
 800a054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a058:	2303      	movs	r3, #3
 800a05a:	602b      	str	r3, [r5, #0]
 800a05c:	2e00      	cmp	r6, #0
 800a05e:	d1ef      	bne.n	800a040 <rmw_validate_node_name+0x64>
 800a060:	2000      	movs	r0, #0
 800a062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a066:	200b      	movs	r0, #11
 800a068:	4770      	bx	lr
 800a06a:	200b      	movs	r0, #11
 800a06c:	e7f2      	b.n	800a054 <rmw_validate_node_name+0x78>
 800a06e:	2204      	movs	r2, #4
 800a070:	602a      	str	r2, [r5, #0]
 800a072:	2e00      	cmp	r6, #0
 800a074:	d0f4      	beq.n	800a060 <rmw_validate_node_name+0x84>
 800a076:	22fe      	movs	r2, #254	; 0xfe
 800a078:	4618      	mov	r0, r3
 800a07a:	6032      	str	r2, [r6, #0]
 800a07c:	e7ea      	b.n	800a054 <rmw_validate_node_name+0x78>
 800a07e:	bf00      	nop
 800a080:	080155b0 	.word	0x080155b0

0800a084 <rmw_node_name_validation_result_string>:
 800a084:	2804      	cmp	r0, #4
 800a086:	d803      	bhi.n	800a090 <rmw_node_name_validation_result_string+0xc>
 800a088:	4b02      	ldr	r3, [pc, #8]	; (800a094 <rmw_node_name_validation_result_string+0x10>)
 800a08a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800a08e:	4770      	bx	lr
 800a090:	4801      	ldr	r0, [pc, #4]	; (800a098 <rmw_node_name_validation_result_string+0x14>)
 800a092:	4770      	bx	lr
 800a094:	080150a8 	.word	0x080150a8
 800a098:	08014fbc 	.word	0x08014fbc

0800a09c <rmw_uros_set_custom_transport>:
 800a09c:	b470      	push	{r4, r5, r6}
 800a09e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a0a2:	b162      	cbz	r2, 800a0be <rmw_uros_set_custom_transport+0x22>
 800a0a4:	b15b      	cbz	r3, 800a0be <rmw_uros_set_custom_transport+0x22>
 800a0a6:	b155      	cbz	r5, 800a0be <rmw_uros_set_custom_transport+0x22>
 800a0a8:	b14e      	cbz	r6, 800a0be <rmw_uros_set_custom_transport+0x22>
 800a0aa:	4c06      	ldr	r4, [pc, #24]	; (800a0c4 <rmw_uros_set_custom_transport+0x28>)
 800a0ac:	7020      	strb	r0, [r4, #0]
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	6166      	str	r6, [r4, #20]
 800a0b2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a0b6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a0ba:	bc70      	pop	{r4, r5, r6}
 800a0bc:	4770      	bx	lr
 800a0be:	200b      	movs	r0, #11
 800a0c0:	bc70      	pop	{r4, r5, r6}
 800a0c2:	4770      	bx	lr
 800a0c4:	2000c2fc 	.word	0x2000c2fc

0800a0c8 <rmw_init_options_init>:
 800a0c8:	b084      	sub	sp, #16
 800a0ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0cc:	b083      	sub	sp, #12
 800a0ce:	ad09      	add	r5, sp, #36	; 0x24
 800a0d0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800a0d4:	b130      	cbz	r0, 800a0e4 <rmw_init_options_init+0x1c>
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	4628      	mov	r0, r5
 800a0da:	f7ff fcdb 	bl	8009a94 <rcutils_allocator_is_valid>
 800a0de:	b108      	cbz	r0, 800a0e4 <rmw_init_options_init+0x1c>
 800a0e0:	68a6      	ldr	r6, [r4, #8]
 800a0e2:	b12e      	cbz	r6, 800a0f0 <rmw_init_options_init+0x28>
 800a0e4:	200b      	movs	r0, #11
 800a0e6:	b003      	add	sp, #12
 800a0e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a0ec:	b004      	add	sp, #16
 800a0ee:	4770      	bx	lr
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	f104 0c20 	add.w	ip, r4, #32
 800a0f8:	f8df e098 	ldr.w	lr, [pc, #152]	; 800a194 <rmw_init_options_init+0xcc>
 800a0fc:	466f      	mov	r7, sp
 800a0fe:	e9c4 2300 	strd	r2, r3, [r4]
 800a102:	4b20      	ldr	r3, [pc, #128]	; (800a184 <rmw_init_options_init+0xbc>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	60a3      	str	r3, [r4, #8]
 800a108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a10a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a10e:	682b      	ldr	r3, [r5, #0]
 800a110:	4638      	mov	r0, r7
 800a112:	f8cc 3000 	str.w	r3, [ip]
 800a116:	f8c4 e01c 	str.w	lr, [r4, #28]
 800a11a:	60e6      	str	r6, [r4, #12]
 800a11c:	f7ff fee8 	bl	8009ef0 <rmw_get_default_security_options>
 800a120:	f104 0310 	add.w	r3, r4, #16
 800a124:	2203      	movs	r2, #3
 800a126:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a12a:	e883 0003 	stmia.w	r3, {r0, r1}
 800a12e:	4816      	ldr	r0, [pc, #88]	; (800a188 <rmw_init_options_init+0xc0>)
 800a130:	4916      	ldr	r1, [pc, #88]	; (800a18c <rmw_init_options_init+0xc4>)
 800a132:	7626      	strb	r6, [r4, #24]
 800a134:	f000 ffa8 	bl	800b088 <rmw_uxrce_init_init_options_impl_memory>
 800a138:	4813      	ldr	r0, [pc, #76]	; (800a188 <rmw_init_options_init+0xc0>)
 800a13a:	f007 f9c9 	bl	80114d0 <get_memory>
 800a13e:	b1f0      	cbz	r0, 800a17e <rmw_init_options_init+0xb6>
 800a140:	4a13      	ldr	r2, [pc, #76]	; (800a190 <rmw_init_options_init+0xc8>)
 800a142:	6883      	ldr	r3, [r0, #8]
 800a144:	6851      	ldr	r1, [r2, #4]
 800a146:	6363      	str	r3, [r4, #52]	; 0x34
 800a148:	7810      	ldrb	r0, [r2, #0]
 800a14a:	6159      	str	r1, [r3, #20]
 800a14c:	68d1      	ldr	r1, [r2, #12]
 800a14e:	7418      	strb	r0, [r3, #16]
 800a150:	61d9      	str	r1, [r3, #28]
 800a152:	6911      	ldr	r1, [r2, #16]
 800a154:	6219      	str	r1, [r3, #32]
 800a156:	6951      	ldr	r1, [r2, #20]
 800a158:	6892      	ldr	r2, [r2, #8]
 800a15a:	6259      	str	r1, [r3, #36]	; 0x24
 800a15c:	619a      	str	r2, [r3, #24]
 800a15e:	f003 fc59 	bl	800da14 <uxr_nanos>
 800a162:	f008 fee1 	bl	8012f28 <srand>
 800a166:	f008 ff0d 	bl	8012f84 <rand>
 800a16a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a16c:	6298      	str	r0, [r3, #40]	; 0x28
 800a16e:	2800      	cmp	r0, #0
 800a170:	d0f9      	beq.n	800a166 <rmw_init_options_init+0x9e>
 800a172:	2000      	movs	r0, #0
 800a174:	b003      	add	sp, #12
 800a176:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a17a:	b004      	add	sp, #16
 800a17c:	4770      	bx	lr
 800a17e:	2001      	movs	r0, #1
 800a180:	e7b1      	b.n	800a0e6 <rmw_init_options_init+0x1e>
 800a182:	bf00      	nop
 800a184:	08015508 	.word	0x08015508
 800a188:	20010d54 	.word	0x20010d54
 800a18c:	2000c5f0 	.word	0x2000c5f0
 800a190:	2000c2fc 	.word	0x2000c2fc
 800a194:	08014c08 	.word	0x08014c08

0800a198 <rmw_init_options_copy>:
 800a198:	2800      	cmp	r0, #0
 800a19a:	d047      	beq.n	800a22c <rmw_init_options_copy+0x94>
 800a19c:	b570      	push	{r4, r5, r6, lr}
 800a19e:	460d      	mov	r5, r1
 800a1a0:	b149      	cbz	r1, 800a1b6 <rmw_init_options_copy+0x1e>
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	6880      	ldr	r0, [r0, #8]
 800a1a6:	b120      	cbz	r0, 800a1b2 <rmw_init_options_copy+0x1a>
 800a1a8:	4b22      	ldr	r3, [pc, #136]	; (800a234 <rmw_init_options_copy+0x9c>)
 800a1aa:	6819      	ldr	r1, [r3, #0]
 800a1ac:	f7f6 f848 	bl	8000240 <strcmp>
 800a1b0:	bba8      	cbnz	r0, 800a21e <rmw_init_options_copy+0x86>
 800a1b2:	68ab      	ldr	r3, [r5, #8]
 800a1b4:	b11b      	cbz	r3, 800a1be <rmw_init_options_copy+0x26>
 800a1b6:	f04f 0c0b 	mov.w	ip, #11
 800a1ba:	4660      	mov	r0, ip
 800a1bc:	bd70      	pop	{r4, r5, r6, pc}
 800a1be:	4623      	mov	r3, r4
 800a1c0:	462a      	mov	r2, r5
 800a1c2:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a1c6:	f8d3 e000 	ldr.w	lr, [r3]
 800a1ca:	3310      	adds	r3, #16
 800a1cc:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 800a1d0:	3210      	adds	r2, #16
 800a1d2:	f853 0c08 	ldr.w	r0, [r3, #-8]
 800a1d6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800a1da:	42b3      	cmp	r3, r6
 800a1dc:	f842 ec10 	str.w	lr, [r2, #-16]
 800a1e0:	f842 cc0c 	str.w	ip, [r2, #-12]
 800a1e4:	f842 0c08 	str.w	r0, [r2, #-8]
 800a1e8:	f842 1c04 	str.w	r1, [r2, #-4]
 800a1ec:	d1eb      	bne.n	800a1c6 <rmw_init_options_copy+0x2e>
 800a1ee:	6819      	ldr	r1, [r3, #0]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	4811      	ldr	r0, [pc, #68]	; (800a238 <rmw_init_options_copy+0xa0>)
 800a1f4:	6011      	str	r1, [r2, #0]
 800a1f6:	6053      	str	r3, [r2, #4]
 800a1f8:	f007 f96a 	bl	80114d0 <get_memory>
 800a1fc:	b198      	cbz	r0, 800a226 <rmw_init_options_copy+0x8e>
 800a1fe:	6883      	ldr	r3, [r0, #8]
 800a200:	f04f 0c00 	mov.w	ip, #0
 800a204:	636b      	str	r3, [r5, #52]	; 0x34
 800a206:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800a208:	f103 0410 	add.w	r4, r3, #16
 800a20c:	3510      	adds	r5, #16
 800a20e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a212:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a216:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a21a:	4660      	mov	r0, ip
 800a21c:	bd70      	pop	{r4, r5, r6, pc}
 800a21e:	f04f 0c0c 	mov.w	ip, #12
 800a222:	4660      	mov	r0, ip
 800a224:	bd70      	pop	{r4, r5, r6, pc}
 800a226:	f04f 0c01 	mov.w	ip, #1
 800a22a:	e7c6      	b.n	800a1ba <rmw_init_options_copy+0x22>
 800a22c:	f04f 0c0b 	mov.w	ip, #11
 800a230:	4660      	mov	r0, ip
 800a232:	4770      	bx	lr
 800a234:	08015508 	.word	0x08015508
 800a238:	20010d54 	.word	0x20010d54

0800a23c <rmw_init_options_fini>:
 800a23c:	b510      	push	{r4, lr}
 800a23e:	b08e      	sub	sp, #56	; 0x38
 800a240:	b388      	cbz	r0, 800a2a6 <rmw_init_options_fini+0x6a>
 800a242:	4604      	mov	r4, r0
 800a244:	3020      	adds	r0, #32
 800a246:	f7ff fc25 	bl	8009a94 <rcutils_allocator_is_valid>
 800a24a:	b360      	cbz	r0, 800a2a6 <rmw_init_options_fini+0x6a>
 800a24c:	68a0      	ldr	r0, [r4, #8]
 800a24e:	b120      	cbz	r0, 800a25a <rmw_init_options_fini+0x1e>
 800a250:	4b1a      	ldr	r3, [pc, #104]	; (800a2bc <rmw_init_options_fini+0x80>)
 800a252:	6819      	ldr	r1, [r3, #0]
 800a254:	f7f5 fff4 	bl	8000240 <strcmp>
 800a258:	bb68      	cbnz	r0, 800a2b6 <rmw_init_options_fini+0x7a>
 800a25a:	4b19      	ldr	r3, [pc, #100]	; (800a2c0 <rmw_init_options_fini+0x84>)
 800a25c:	6819      	ldr	r1, [r3, #0]
 800a25e:	b331      	cbz	r1, 800a2ae <rmw_init_options_fini+0x72>
 800a260:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a262:	e001      	b.n	800a268 <rmw_init_options_fini+0x2c>
 800a264:	6849      	ldr	r1, [r1, #4]
 800a266:	b311      	cbz	r1, 800a2ae <rmw_init_options_fini+0x72>
 800a268:	688b      	ldr	r3, [r1, #8]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d1fa      	bne.n	800a264 <rmw_init_options_fini+0x28>
 800a26e:	4814      	ldr	r0, [pc, #80]	; (800a2c0 <rmw_init_options_fini+0x84>)
 800a270:	f007 f93e 	bl	80114f0 <put_memory>
 800a274:	4668      	mov	r0, sp
 800a276:	f7ff fe2b 	bl	8009ed0 <rmw_get_zero_initialized_init_options>
 800a27a:	46ee      	mov	lr, sp
 800a27c:	46a4      	mov	ip, r4
 800a27e:	2400      	movs	r4, #0
 800a280:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a284:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a288:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a28c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a290:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a294:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a298:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800a29c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	b00e      	add	sp, #56	; 0x38
 800a2a4:	bd10      	pop	{r4, pc}
 800a2a6:	240b      	movs	r4, #11
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	b00e      	add	sp, #56	; 0x38
 800a2ac:	bd10      	pop	{r4, pc}
 800a2ae:	2401      	movs	r4, #1
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	b00e      	add	sp, #56	; 0x38
 800a2b4:	bd10      	pop	{r4, pc}
 800a2b6:	240c      	movs	r4, #12
 800a2b8:	e7f2      	b.n	800a2a0 <rmw_init_options_fini+0x64>
 800a2ba:	bf00      	nop
 800a2bc:	08015508 	.word	0x08015508
 800a2c0:	20010d54 	.word	0x20010d54

0800a2c4 <rmw_init>:
 800a2c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2c8:	b083      	sub	sp, #12
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	f000 80d3 	beq.w	800a476 <rmw_init+0x1b2>
 800a2d0:	460e      	mov	r6, r1
 800a2d2:	2900      	cmp	r1, #0
 800a2d4:	f000 80cf 	beq.w	800a476 <rmw_init+0x1b2>
 800a2d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a2da:	4605      	mov	r5, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f000 80ca 	beq.w	800a476 <rmw_init+0x1b2>
 800a2e2:	4b78      	ldr	r3, [pc, #480]	; (800a4c4 <rmw_init+0x200>)
 800a2e4:	6880      	ldr	r0, [r0, #8]
 800a2e6:	681f      	ldr	r7, [r3, #0]
 800a2e8:	b128      	cbz	r0, 800a2f6 <rmw_init+0x32>
 800a2ea:	4639      	mov	r1, r7
 800a2ec:	f7f5 ffa8 	bl	8000240 <strcmp>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	f040 80ca 	bne.w	800a48a <rmw_init+0x1c6>
 800a2f6:	4c74      	ldr	r4, [pc, #464]	; (800a4c8 <rmw_init+0x204>)
 800a2f8:	f04f 0800 	mov.w	r8, #0
 800a2fc:	4973      	ldr	r1, [pc, #460]	; (800a4cc <rmw_init+0x208>)
 800a2fe:	4874      	ldr	r0, [pc, #464]	; (800a4d0 <rmw_init+0x20c>)
 800a300:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a304:	60b7      	str	r7, [r6, #8]
 800a306:	e9c6 2300 	strd	r2, r3, [r6]
 800a30a:	68eb      	ldr	r3, [r5, #12]
 800a30c:	2201      	movs	r2, #1
 800a30e:	64b3      	str	r3, [r6, #72]	; 0x48
 800a310:	f000 fe5a 	bl	800afc8 <rmw_uxrce_init_session_memory>
 800a314:	4620      	mov	r0, r4
 800a316:	2204      	movs	r2, #4
 800a318:	496e      	ldr	r1, [pc, #440]	; (800a4d4 <rmw_init+0x210>)
 800a31a:	f000 fe95 	bl	800b048 <rmw_uxrce_init_static_input_buffer_memory>
 800a31e:	486c      	ldr	r0, [pc, #432]	; (800a4d0 <rmw_init+0x20c>)
 800a320:	f884 800d 	strb.w	r8, [r4, #13]
 800a324:	f007 f8d4 	bl	80114d0 <get_memory>
 800a328:	2800      	cmp	r0, #0
 800a32a:	f000 80a9 	beq.w	800a480 <rmw_init+0x1bc>
 800a32e:	6884      	ldr	r4, [r0, #8]
 800a330:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800a332:	f104 0910 	add.w	r9, r4, #16
 800a336:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800a338:	f890 c010 	ldrb.w	ip, [r0, #16]
 800a33c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800a340:	9101      	str	r1, [sp, #4]
 800a342:	4661      	mov	r1, ip
 800a344:	6a00      	ldr	r0, [r0, #32]
 800a346:	9000      	str	r0, [sp, #0]
 800a348:	4648      	mov	r0, r9
 800a34a:	f001 fb0b 	bl	800b964 <uxr_set_custom_transport_callbacks>
 800a34e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a352:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800a356:	4960      	ldr	r1, [pc, #384]	; (800a4d8 <rmw_init+0x214>)
 800a358:	4860      	ldr	r0, [pc, #384]	; (800a4dc <rmw_init+0x218>)
 800a35a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 800a35e:	f504 725e 	add.w	r2, r4, #888	; 0x378
 800a362:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 800a366:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 800a36a:	2201      	movs	r2, #1
 800a36c:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 800a370:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 800a374:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 800a378:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 800a37c:	64f4      	str	r4, [r6, #76]	; 0x4c
 800a37e:	f000 fe03 	bl	800af88 <rmw_uxrce_init_node_memory>
 800a382:	2205      	movs	r2, #5
 800a384:	4956      	ldr	r1, [pc, #344]	; (800a4e0 <rmw_init+0x21c>)
 800a386:	4857      	ldr	r0, [pc, #348]	; (800a4e4 <rmw_init+0x220>)
 800a388:	f000 fdde 	bl	800af48 <rmw_uxrce_init_subscription_memory>
 800a38c:	220a      	movs	r2, #10
 800a38e:	4956      	ldr	r1, [pc, #344]	; (800a4e8 <rmw_init+0x224>)
 800a390:	4856      	ldr	r0, [pc, #344]	; (800a4ec <rmw_init+0x228>)
 800a392:	f000 fdb9 	bl	800af08 <rmw_uxrce_init_publisher_memory>
 800a396:	2201      	movs	r2, #1
 800a398:	4955      	ldr	r1, [pc, #340]	; (800a4f0 <rmw_init+0x22c>)
 800a39a:	4856      	ldr	r0, [pc, #344]	; (800a4f4 <rmw_init+0x230>)
 800a39c:	f000 fd74 	bl	800ae88 <rmw_uxrce_init_service_memory>
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	4955      	ldr	r1, [pc, #340]	; (800a4f8 <rmw_init+0x234>)
 800a3a4:	4855      	ldr	r0, [pc, #340]	; (800a4fc <rmw_init+0x238>)
 800a3a6:	f000 fd8f 	bl	800aec8 <rmw_uxrce_init_client_memory>
 800a3aa:	220f      	movs	r2, #15
 800a3ac:	4954      	ldr	r1, [pc, #336]	; (800a500 <rmw_init+0x23c>)
 800a3ae:	4855      	ldr	r0, [pc, #340]	; (800a504 <rmw_init+0x240>)
 800a3b0:	f000 fe2a 	bl	800b008 <rmw_uxrce_init_topic_memory>
 800a3b4:	2203      	movs	r2, #3
 800a3b6:	4954      	ldr	r1, [pc, #336]	; (800a508 <rmw_init+0x244>)
 800a3b8:	4854      	ldr	r0, [pc, #336]	; (800a50c <rmw_init+0x248>)
 800a3ba:	f000 fe65 	bl	800b088 <rmw_uxrce_init_init_options_impl_memory>
 800a3be:	2204      	movs	r2, #4
 800a3c0:	4953      	ldr	r1, [pc, #332]	; (800a510 <rmw_init+0x24c>)
 800a3c2:	4854      	ldr	r0, [pc, #336]	; (800a514 <rmw_init+0x250>)
 800a3c4:	f000 fe80 	bl	800b0c8 <rmw_uxrce_init_wait_set_memory>
 800a3c8:	4953      	ldr	r1, [pc, #332]	; (800a518 <rmw_init+0x254>)
 800a3ca:	4854      	ldr	r0, [pc, #336]	; (800a51c <rmw_init+0x258>)
 800a3cc:	2204      	movs	r2, #4
 800a3ce:	f000 fe9b 	bl	800b108 <rmw_uxrce_init_guard_condition_memory>
 800a3d2:	4642      	mov	r2, r8
 800a3d4:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800a3d6:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800a3d8:	f000 fd3e 	bl	800ae58 <rmw_uxrce_transport_init>
 800a3dc:	4607      	mov	r7, r0
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	d158      	bne.n	800a494 <rmw_init+0x1d0>
 800a3e2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a3e4:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 800a3e8:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800a3ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	f001 fcea 	bl	800bdc8 <uxr_init_session>
 800a3f4:	4622      	mov	r2, r4
 800a3f6:	494a      	ldr	r1, [pc, #296]	; (800a520 <rmw_init+0x25c>)
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	f001 fd09 	bl	800be10 <uxr_set_topic_callback>
 800a3fe:	463a      	mov	r2, r7
 800a400:	4948      	ldr	r1, [pc, #288]	; (800a524 <rmw_init+0x260>)
 800a402:	4628      	mov	r0, r5
 800a404:	f001 fd00 	bl	800be08 <uxr_set_status_callback>
 800a408:	463a      	mov	r2, r7
 800a40a:	4947      	ldr	r1, [pc, #284]	; (800a528 <rmw_init+0x264>)
 800a40c:	4628      	mov	r0, r5
 800a40e:	f001 fd03 	bl	800be18 <uxr_set_request_callback>
 800a412:	463a      	mov	r2, r7
 800a414:	4945      	ldr	r1, [pc, #276]	; (800a52c <rmw_init+0x268>)
 800a416:	4628      	mov	r0, r5
 800a418:	f001 fd02 	bl	800be20 <uxr_set_reply_callback>
 800a41c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800a420:	2304      	movs	r3, #4
 800a422:	f504 7165 	add.w	r1, r4, #916	; 0x394
 800a426:	0092      	lsls	r2, r2, #2
 800a428:	4628      	mov	r0, r5
 800a42a:	f001 fd39 	bl	800bea0 <uxr_create_input_reliable_stream>
 800a42e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800a432:	2304      	movs	r3, #4
 800a434:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 800a438:	0092      	lsls	r2, r2, #2
 800a43a:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 800a43e:	4628      	mov	r0, r5
 800a440:	f001 fd04 	bl	800be4c <uxr_create_output_reliable_stream>
 800a444:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 800a448:	4628      	mov	r0, r5
 800a44a:	f001 fd23 	bl	800be94 <uxr_create_input_best_effort_stream>
 800a44e:	f241 3194 	movw	r1, #5012	; 0x1394
 800a452:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 800a456:	4628      	mov	r0, r5
 800a458:	4421      	add	r1, r4
 800a45a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800a45e:	f001 fce3 	bl	800be28 <uxr_create_output_best_effort_stream>
 800a462:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 800a466:	4628      	mov	r0, r5
 800a468:	f002 fa6c 	bl	800c944 <uxr_create_session>
 800a46c:	b1f8      	cbz	r0, 800a4ae <rmw_init+0x1ea>
 800a46e:	4638      	mov	r0, r7
 800a470:	b003      	add	sp, #12
 800a472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a476:	270b      	movs	r7, #11
 800a478:	4638      	mov	r0, r7
 800a47a:	b003      	add	sp, #12
 800a47c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a480:	2701      	movs	r7, #1
 800a482:	4638      	mov	r0, r7
 800a484:	b003      	add	sp, #12
 800a486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a48a:	270c      	movs	r7, #12
 800a48c:	4638      	mov	r0, r7
 800a48e:	b003      	add	sp, #12
 800a490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a494:	4648      	mov	r0, r9
 800a496:	f001 faa3 	bl	800b9e0 <uxr_close_custom_transport>
 800a49a:	4621      	mov	r1, r4
 800a49c:	480c      	ldr	r0, [pc, #48]	; (800a4d0 <rmw_init+0x20c>)
 800a49e:	f007 f827 	bl	80114f0 <put_memory>
 800a4a2:	4638      	mov	r0, r7
 800a4a4:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 800a4a8:	b003      	add	sp, #12
 800a4aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4ae:	4648      	mov	r0, r9
 800a4b0:	f001 fa96 	bl	800b9e0 <uxr_close_custom_transport>
 800a4b4:	4621      	mov	r1, r4
 800a4b6:	4806      	ldr	r0, [pc, #24]	; (800a4d0 <rmw_init+0x20c>)
 800a4b8:	f007 f81a 	bl	80114f0 <put_memory>
 800a4bc:	64f7      	str	r7, [r6, #76]	; 0x4c
 800a4be:	2701      	movs	r7, #1
 800a4c0:	e7d5      	b.n	800a46e <rmw_init+0x1aa>
 800a4c2:	bf00      	nop
 800a4c4:	08015508 	.word	0x08015508
 800a4c8:	20010da4 	.word	0x20010da4
 800a4cc:	2000d050 	.word	0x2000d050
 800a4d0:	20010d94 	.word	0x20010d94
 800a4d4:	2000e5f8 	.word	0x2000e5f8
 800a4d8:	2000c674 	.word	0x2000c674
 800a4dc:	20010d64 	.word	0x20010d64
 800a4e0:	200106f8 	.word	0x200106f8
 800a4e4:	20010db4 	.word	0x20010db4
 800a4e8:	2000c718 	.word	0x2000c718
 800a4ec:	20010d74 	.word	0x20010d74
 800a4f0:	2000cf88 	.word	0x2000cf88
 800a4f4:	20010d84 	.word	0x20010d84
 800a4f8:	2000c4a8 	.word	0x2000c4a8
 800a4fc:	2000c494 	.word	0x2000c494
 800a500:	20010b30 	.word	0x20010b30
 800a504:	20010dc4 	.word	0x20010dc4
 800a508:	2000c5f0 	.word	0x2000c5f0
 800a50c:	20010d54 	.word	0x20010d54
 800a510:	20010cd4 	.word	0x20010cd4
 800a514:	20010dd4 	.word	0x20010dd4
 800a518:	2000c570 	.word	0x2000c570
 800a51c:	20010d44 	.word	0x20010d44
 800a520:	08011309 	.word	0x08011309
 800a524:	08011301 	.word	0x08011301
 800a528:	080113a1 	.word	0x080113a1
 800a52c:	0801143d 	.word	0x0801143d

0800a530 <rmw_context_fini>:
 800a530:	4b17      	ldr	r3, [pc, #92]	; (800a590 <rmw_context_fini+0x60>)
 800a532:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800a534:	b570      	push	{r4, r5, r6, lr}
 800a536:	681c      	ldr	r4, [r3, #0]
 800a538:	4605      	mov	r5, r0
 800a53a:	b334      	cbz	r4, 800a58a <rmw_context_fini+0x5a>
 800a53c:	2600      	movs	r6, #0
 800a53e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800a542:	6902      	ldr	r2, [r0, #16]
 800a544:	428a      	cmp	r2, r1
 800a546:	d018      	beq.n	800a57a <rmw_context_fini+0x4a>
 800a548:	2c00      	cmp	r4, #0
 800a54a:	d1f8      	bne.n	800a53e <rmw_context_fini+0xe>
 800a54c:	b189      	cbz	r1, 800a572 <rmw_context_fini+0x42>
 800a54e:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 800a552:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 800a556:	789b      	ldrb	r3, [r3, #2]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	bf14      	ite	ne
 800a55c:	210a      	movne	r1, #10
 800a55e:	2100      	moveq	r1, #0
 800a560:	f002 f9c8 	bl	800c8f4 <uxr_delete_session_retries>
 800a564:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800a566:	f000 fdef 	bl	800b148 <rmw_uxrce_fini_session_memory>
 800a56a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800a56c:	3010      	adds	r0, #16
 800a56e:	f001 fa37 	bl	800b9e0 <uxr_close_custom_transport>
 800a572:	2300      	movs	r3, #0
 800a574:	4630      	mov	r0, r6
 800a576:	64eb      	str	r3, [r5, #76]	; 0x4c
 800a578:	bd70      	pop	{r4, r5, r6, pc}
 800a57a:	3018      	adds	r0, #24
 800a57c:	f000 f89c 	bl	800a6b8 <rmw_destroy_node>
 800a580:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800a582:	4606      	mov	r6, r0
 800a584:	2c00      	cmp	r4, #0
 800a586:	d1da      	bne.n	800a53e <rmw_context_fini+0xe>
 800a588:	e7e0      	b.n	800a54c <rmw_context_fini+0x1c>
 800a58a:	4626      	mov	r6, r4
 800a58c:	e7de      	b.n	800a54c <rmw_context_fini+0x1c>
 800a58e:	bf00      	nop
 800a590:	20010d64 	.word	0x20010d64

0800a594 <create_node>:
 800a594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a598:	b083      	sub	sp, #12
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d064      	beq.n	800a668 <create_node+0xd4>
 800a59e:	4606      	mov	r6, r0
 800a5a0:	4838      	ldr	r0, [pc, #224]	; (800a684 <create_node+0xf0>)
 800a5a2:	460f      	mov	r7, r1
 800a5a4:	4690      	mov	r8, r2
 800a5a6:	461d      	mov	r5, r3
 800a5a8:	f006 ff92 	bl	80114d0 <get_memory>
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	d05b      	beq.n	800a668 <create_node+0xd4>
 800a5b0:	6884      	ldr	r4, [r0, #8]
 800a5b2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800a5b4:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800a5b8:	f104 0518 	add.w	r5, r4, #24
 800a5bc:	6123      	str	r3, [r4, #16]
 800a5be:	f006 ffef 	bl	80115a0 <rmw_get_implementation_identifier>
 800a5c2:	f8c4 9020 	str.w	r9, [r4, #32]
 800a5c6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	f7f5 fe42 	bl	8000254 <strlen>
 800a5d0:	1c42      	adds	r2, r0, #1
 800a5d2:	2a3c      	cmp	r2, #60	; 0x3c
 800a5d4:	d840      	bhi.n	800a658 <create_node+0xc4>
 800a5d6:	4648      	mov	r0, r9
 800a5d8:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800a5dc:	4631      	mov	r1, r6
 800a5de:	f009 fa30 	bl	8013a42 <memcpy>
 800a5e2:	4638      	mov	r0, r7
 800a5e4:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800a5e8:	f7f5 fe34 	bl	8000254 <strlen>
 800a5ec:	1c42      	adds	r2, r0, #1
 800a5ee:	2a3c      	cmp	r2, #60	; 0x3c
 800a5f0:	d832      	bhi.n	800a658 <create_node+0xc4>
 800a5f2:	4639      	mov	r1, r7
 800a5f4:	4648      	mov	r0, r9
 800a5f6:	f009 fa24 	bl	8013a42 <memcpy>
 800a5fa:	6923      	ldr	r3, [r4, #16]
 800a5fc:	2101      	movs	r1, #1
 800a5fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a602:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 800a606:	1842      	adds	r2, r0, r1
 800a608:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 800a60c:	f001 f9ec 	bl	800b9e8 <uxr_object_id>
 800a610:	6160      	str	r0, [r4, #20]
 800a612:	783b      	ldrb	r3, [r7, #0]
 800a614:	2b2f      	cmp	r3, #47	; 0x2f
 800a616:	d12c      	bne.n	800a672 <create_node+0xde>
 800a618:	787b      	ldrb	r3, [r7, #1]
 800a61a:	bb53      	cbnz	r3, 800a672 <create_node+0xde>
 800a61c:	4633      	mov	r3, r6
 800a61e:	4a1a      	ldr	r2, [pc, #104]	; (800a688 <create_node+0xf4>)
 800a620:	213c      	movs	r1, #60	; 0x3c
 800a622:	481a      	ldr	r0, [pc, #104]	; (800a68c <create_node+0xf8>)
 800a624:	f008 ff7e 	bl	8013524 <sniprintf>
 800a628:	6920      	ldr	r0, [r4, #16]
 800a62a:	2106      	movs	r1, #6
 800a62c:	fa1f f388 	uxth.w	r3, r8
 800a630:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800a634:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a638:	9101      	str	r1, [sp, #4]
 800a63a:	4914      	ldr	r1, [pc, #80]	; (800a68c <create_node+0xf8>)
 800a63c:	9100      	str	r1, [sp, #0]
 800a63e:	6811      	ldr	r1, [r2, #0]
 800a640:	6962      	ldr	r2, [r4, #20]
 800a642:	f001 f8a7 	bl	800b794 <uxr_buffer_create_participant_bin>
 800a646:	4602      	mov	r2, r0
 800a648:	6920      	ldr	r0, [r4, #16]
 800a64a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800a64e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800a652:	f000 fefb 	bl	800b44c <run_xrce_session>
 800a656:	b918      	cbnz	r0, 800a660 <create_node+0xcc>
 800a658:	4628      	mov	r0, r5
 800a65a:	2500      	movs	r5, #0
 800a65c:	f000 fd7a 	bl	800b154 <rmw_uxrce_fini_node_memory>
 800a660:	4628      	mov	r0, r5
 800a662:	b003      	add	sp, #12
 800a664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a668:	2500      	movs	r5, #0
 800a66a:	4628      	mov	r0, r5
 800a66c:	b003      	add	sp, #12
 800a66e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a672:	463b      	mov	r3, r7
 800a674:	4a06      	ldr	r2, [pc, #24]	; (800a690 <create_node+0xfc>)
 800a676:	213c      	movs	r1, #60	; 0x3c
 800a678:	9600      	str	r6, [sp, #0]
 800a67a:	4804      	ldr	r0, [pc, #16]	; (800a68c <create_node+0xf8>)
 800a67c:	f008 ff52 	bl	8013524 <sniprintf>
 800a680:	e7d2      	b.n	800a628 <create_node+0x94>
 800a682:	bf00      	nop
 800a684:	20010d64 	.word	0x20010d64
 800a688:	080150cc 	.word	0x080150cc
 800a68c:	2000c318 	.word	0x2000c318
 800a690:	08014c18 	.word	0x08014c18

0800a694 <rmw_create_node>:
 800a694:	468c      	mov	ip, r1
 800a696:	4611      	mov	r1, r2
 800a698:	f1bc 0f00 	cmp.w	ip, #0
 800a69c:	d00a      	beq.n	800a6b4 <rmw_create_node+0x20>
 800a69e:	f89c 3000 	ldrb.w	r3, [ip]
 800a6a2:	b13b      	cbz	r3, 800a6b4 <rmw_create_node+0x20>
 800a6a4:	b132      	cbz	r2, 800a6b4 <rmw_create_node+0x20>
 800a6a6:	7813      	ldrb	r3, [r2, #0]
 800a6a8:	b123      	cbz	r3, 800a6b4 <rmw_create_node+0x20>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800a6ae:	4660      	mov	r0, ip
 800a6b0:	f7ff bf70 	b.w	800a594 <create_node>
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	4770      	bx	lr

0800a6b8 <rmw_destroy_node>:
 800a6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ba:	b328      	cbz	r0, 800a708 <rmw_destroy_node+0x50>
 800a6bc:	4607      	mov	r7, r0
 800a6be:	6800      	ldr	r0, [r0, #0]
 800a6c0:	b120      	cbz	r0, 800a6cc <rmw_destroy_node+0x14>
 800a6c2:	4b37      	ldr	r3, [pc, #220]	; (800a7a0 <rmw_destroy_node+0xe8>)
 800a6c4:	6819      	ldr	r1, [r3, #0]
 800a6c6:	f7f5 fdbb 	bl	8000240 <strcmp>
 800a6ca:	b9e8      	cbnz	r0, 800a708 <rmw_destroy_node+0x50>
 800a6cc:	687d      	ldr	r5, [r7, #4]
 800a6ce:	b1dd      	cbz	r5, 800a708 <rmw_destroy_node+0x50>
 800a6d0:	4b34      	ldr	r3, [pc, #208]	; (800a7a4 <rmw_destroy_node+0xec>)
 800a6d2:	681c      	ldr	r4, [r3, #0]
 800a6d4:	2c00      	cmp	r4, #0
 800a6d6:	d060      	beq.n	800a79a <rmw_destroy_node+0xe2>
 800a6d8:	2600      	movs	r6, #0
 800a6da:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800a6de:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800a6e2:	429d      	cmp	r5, r3
 800a6e4:	d013      	beq.n	800a70e <rmw_destroy_node+0x56>
 800a6e6:	2c00      	cmp	r4, #0
 800a6e8:	d1f7      	bne.n	800a6da <rmw_destroy_node+0x22>
 800a6ea:	4b2f      	ldr	r3, [pc, #188]	; (800a7a8 <rmw_destroy_node+0xf0>)
 800a6ec:	681c      	ldr	r4, [r3, #0]
 800a6ee:	b1c4      	cbz	r4, 800a722 <rmw_destroy_node+0x6a>
 800a6f0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800a6f4:	6a0b      	ldr	r3, [r1, #32]
 800a6f6:	429d      	cmp	r5, r3
 800a6f8:	d1f9      	bne.n	800a6ee <rmw_destroy_node+0x36>
 800a6fa:	317c      	adds	r1, #124	; 0x7c
 800a6fc:	4638      	mov	r0, r7
 800a6fe:	f000 fb49 	bl	800ad94 <rmw_destroy_subscription>
 800a702:	2801      	cmp	r0, #1
 800a704:	4606      	mov	r6, r0
 800a706:	d1f2      	bne.n	800a6ee <rmw_destroy_node+0x36>
 800a708:	2601      	movs	r6, #1
 800a70a:	4630      	mov	r0, r6
 800a70c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a70e:	3184      	adds	r1, #132	; 0x84
 800a710:	4638      	mov	r0, r7
 800a712:	f000 f855 	bl	800a7c0 <rmw_destroy_publisher>
 800a716:	2801      	cmp	r0, #1
 800a718:	4606      	mov	r6, r0
 800a71a:	d0f5      	beq.n	800a708 <rmw_destroy_node+0x50>
 800a71c:	2c00      	cmp	r4, #0
 800a71e:	d1dc      	bne.n	800a6da <rmw_destroy_node+0x22>
 800a720:	e7e3      	b.n	800a6ea <rmw_destroy_node+0x32>
 800a722:	4b22      	ldr	r3, [pc, #136]	; (800a7ac <rmw_destroy_node+0xf4>)
 800a724:	681c      	ldr	r4, [r3, #0]
 800a726:	b16c      	cbz	r4, 800a744 <rmw_destroy_node+0x8c>
 800a728:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800a72c:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800a72e:	429d      	cmp	r5, r3
 800a730:	d1f9      	bne.n	800a726 <rmw_destroy_node+0x6e>
 800a732:	317c      	adds	r1, #124	; 0x7c
 800a734:	4638      	mov	r0, r7
 800a736:	f000 fac1 	bl	800acbc <rmw_destroy_service>
 800a73a:	2801      	cmp	r0, #1
 800a73c:	4606      	mov	r6, r0
 800a73e:	d0e3      	beq.n	800a708 <rmw_destroy_node+0x50>
 800a740:	2c00      	cmp	r4, #0
 800a742:	d1f1      	bne.n	800a728 <rmw_destroy_node+0x70>
 800a744:	4b1a      	ldr	r3, [pc, #104]	; (800a7b0 <rmw_destroy_node+0xf8>)
 800a746:	681c      	ldr	r4, [r3, #0]
 800a748:	b16c      	cbz	r4, 800a766 <rmw_destroy_node+0xae>
 800a74a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800a74e:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800a750:	429d      	cmp	r5, r3
 800a752:	d1f9      	bne.n	800a748 <rmw_destroy_node+0x90>
 800a754:	317c      	adds	r1, #124	; 0x7c
 800a756:	4638      	mov	r0, r7
 800a758:	f006 fede 	bl	8011518 <rmw_destroy_client>
 800a75c:	2801      	cmp	r0, #1
 800a75e:	4606      	mov	r6, r0
 800a760:	d0d2      	beq.n	800a708 <rmw_destroy_node+0x50>
 800a762:	2c00      	cmp	r4, #0
 800a764:	d1f1      	bne.n	800a74a <rmw_destroy_node+0x92>
 800a766:	6928      	ldr	r0, [r5, #16]
 800a768:	696a      	ldr	r2, [r5, #20]
 800a76a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800a76e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a772:	6819      	ldr	r1, [r3, #0]
 800a774:	f000 ffc2 	bl	800b6fc <uxr_buffer_delete_entity>
 800a778:	4602      	mov	r2, r0
 800a77a:	6928      	ldr	r0, [r5, #16]
 800a77c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800a780:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800a784:	f000 fe62 	bl	800b44c <run_xrce_session>
 800a788:	4603      	mov	r3, r0
 800a78a:	4638      	mov	r0, r7
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	bf08      	it	eq
 800a790:	2602      	moveq	r6, #2
 800a792:	f000 fcdf 	bl	800b154 <rmw_uxrce_fini_node_memory>
 800a796:	4630      	mov	r0, r6
 800a798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a79a:	4626      	mov	r6, r4
 800a79c:	e7a5      	b.n	800a6ea <rmw_destroy_node+0x32>
 800a79e:	bf00      	nop
 800a7a0:	08015508 	.word	0x08015508
 800a7a4:	20010d74 	.word	0x20010d74
 800a7a8:	20010db4 	.word	0x20010db4
 800a7ac:	20010d84 	.word	0x20010d84
 800a7b0:	2000c494 	.word	0x2000c494

0800a7b4 <rmw_node_get_graph_guard_condition>:
 800a7b4:	6843      	ldr	r3, [r0, #4]
 800a7b6:	6918      	ldr	r0, [r3, #16]
 800a7b8:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop

0800a7c0 <rmw_destroy_publisher>:
 800a7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7c4:	b128      	cbz	r0, 800a7d2 <rmw_destroy_publisher+0x12>
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	6800      	ldr	r0, [r0, #0]
 800a7ca:	460d      	mov	r5, r1
 800a7cc:	f000 ff0a 	bl	800b5e4 <is_uxrce_rmw_identifier_valid>
 800a7d0:	b918      	cbnz	r0, 800a7da <rmw_destroy_publisher+0x1a>
 800a7d2:	2401      	movs	r4, #1
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7da:	6863      	ldr	r3, [r4, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d0f8      	beq.n	800a7d2 <rmw_destroy_publisher+0x12>
 800a7e0:	fab5 f485 	clz	r4, r5
 800a7e4:	0964      	lsrs	r4, r4, #5
 800a7e6:	2d00      	cmp	r5, #0
 800a7e8:	d0f3      	beq.n	800a7d2 <rmw_destroy_publisher+0x12>
 800a7ea:	6828      	ldr	r0, [r5, #0]
 800a7ec:	f000 fefa 	bl	800b5e4 <is_uxrce_rmw_identifier_valid>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d0ee      	beq.n	800a7d2 <rmw_destroy_publisher+0x12>
 800a7f4:	686e      	ldr	r6, [r5, #4]
 800a7f6:	2e00      	cmp	r6, #0
 800a7f8:	d0eb      	beq.n	800a7d2 <rmw_destroy_publisher+0x12>
 800a7fa:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800a7fc:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 800a800:	f006 fefe 	bl	8011600 <destroy_topic>
 800a804:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800a808:	6972      	ldr	r2, [r6, #20]
 800a80a:	6918      	ldr	r0, [r3, #16]
 800a80c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800a810:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a814:	6819      	ldr	r1, [r3, #0]
 800a816:	f000 ff71 	bl	800b6fc <uxr_buffer_delete_entity>
 800a81a:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800a81e:	4680      	mov	r8, r0
 800a820:	6932      	ldr	r2, [r6, #16]
 800a822:	6918      	ldr	r0, [r3, #16]
 800a824:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800a828:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a82c:	6819      	ldr	r1, [r3, #0]
 800a82e:	f000 ff65 	bl	800b6fc <uxr_buffer_delete_entity>
 800a832:	4606      	mov	r6, r0
 800a834:	6938      	ldr	r0, [r7, #16]
 800a836:	4642      	mov	r2, r8
 800a838:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800a83c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800a840:	f000 fe04 	bl	800b44c <run_xrce_session>
 800a844:	693f      	ldr	r7, [r7, #16]
 800a846:	4632      	mov	r2, r6
 800a848:	4606      	mov	r6, r0
 800a84a:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800a84e:	4638      	mov	r0, r7
 800a850:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800a854:	f000 fdfa 	bl	800b44c <run_xrce_session>
 800a858:	b126      	cbz	r6, 800a864 <rmw_destroy_publisher+0xa4>
 800a85a:	b118      	cbz	r0, 800a864 <rmw_destroy_publisher+0xa4>
 800a85c:	4628      	mov	r0, r5
 800a85e:	f000 fc91 	bl	800b184 <rmw_uxrce_fini_publisher_memory>
 800a862:	e7b7      	b.n	800a7d4 <rmw_destroy_publisher+0x14>
 800a864:	2402      	movs	r4, #2
 800a866:	e7f9      	b.n	800a85c <rmw_destroy_publisher+0x9c>

0800a868 <rmw_send_request>:
 800a868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a86c:	4604      	mov	r4, r0
 800a86e:	6800      	ldr	r0, [r0, #0]
 800a870:	b08b      	sub	sp, #44	; 0x2c
 800a872:	460e      	mov	r6, r1
 800a874:	4615      	mov	r5, r2
 800a876:	b128      	cbz	r0, 800a884 <rmw_send_request+0x1c>
 800a878:	4b21      	ldr	r3, [pc, #132]	; (800a900 <rmw_send_request+0x98>)
 800a87a:	6819      	ldr	r1, [r3, #0]
 800a87c:	f7f5 fce0 	bl	8000240 <strcmp>
 800a880:	2800      	cmp	r0, #0
 800a882:	d139      	bne.n	800a8f8 <rmw_send_request+0x90>
 800a884:	6864      	ldr	r4, [r4, #4]
 800a886:	2700      	movs	r7, #0
 800a888:	6963      	ldr	r3, [r4, #20]
 800a88a:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	4798      	blx	r3
 800a892:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800a896:	4630      	mov	r0, r6
 800a898:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a89c:	4798      	blx	r3
 800a89e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a8a2:	9000      	str	r0, [sp, #0]
 800a8a4:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800a8a8:	6922      	ldr	r2, [r4, #16]
 800a8aa:	ab02      	add	r3, sp, #8
 800a8ac:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800a8ae:	f003 f8c7 	bl	800da40 <uxr_prepare_output_stream>
 800a8b2:	e9c5 0700 	strd	r0, r7, [r5]
 800a8b6:	b198      	cbz	r0, 800a8e0 <rmw_send_request+0x78>
 800a8b8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a8bc:	a902      	add	r1, sp, #8
 800a8be:	4630      	mov	r0, r6
 800a8c0:	4798      	blx	r3
 800a8c2:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 800a8c6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d00c      	beq.n	800a8e8 <rmw_send_request+0x80>
 800a8ce:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800a8d0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a8d4:	f001 fec4 	bl	800c660 <uxr_run_session_until_confirm_delivery>
 800a8d8:	4638      	mov	r0, r7
 800a8da:	b00b      	add	sp, #44	; 0x2c
 800a8dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8e0:	2001      	movs	r0, #1
 800a8e2:	b00b      	add	sp, #44	; 0x2c
 800a8e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8e8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a8ec:	f001 fafe 	bl	800beec <uxr_flash_output_streams>
 800a8f0:	4638      	mov	r0, r7
 800a8f2:	b00b      	add	sp, #44	; 0x2c
 800a8f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8f8:	200c      	movs	r0, #12
 800a8fa:	b00b      	add	sp, #44	; 0x2c
 800a8fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a900:	08015508 	.word	0x08015508

0800a904 <rmw_take_request>:
 800a904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a908:	4605      	mov	r5, r0
 800a90a:	6800      	ldr	r0, [r0, #0]
 800a90c:	b089      	sub	sp, #36	; 0x24
 800a90e:	460c      	mov	r4, r1
 800a910:	4690      	mov	r8, r2
 800a912:	461e      	mov	r6, r3
 800a914:	b128      	cbz	r0, 800a922 <rmw_take_request+0x1e>
 800a916:	4b28      	ldr	r3, [pc, #160]	; (800a9b8 <rmw_take_request+0xb4>)
 800a918:	6819      	ldr	r1, [r3, #0]
 800a91a:	f7f5 fc91 	bl	8000240 <strcmp>
 800a91e:	2800      	cmp	r0, #0
 800a920:	d146      	bne.n	800a9b0 <rmw_take_request+0xac>
 800a922:	b10e      	cbz	r6, 800a928 <rmw_take_request+0x24>
 800a924:	2300      	movs	r3, #0
 800a926:	7033      	strb	r3, [r6, #0]
 800a928:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800a92c:	f000 fd10 	bl	800b350 <rmw_uxrce_clean_expired_static_input_buffer>
 800a930:	4648      	mov	r0, r9
 800a932:	f000 fce5 	bl	800b300 <rmw_uxrce_find_static_input_buffer_by_owner>
 800a936:	4607      	mov	r7, r0
 800a938:	b3b0      	cbz	r0, 800a9a8 <rmw_take_request+0xa4>
 800a93a:	6885      	ldr	r5, [r0, #8]
 800a93c:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 800a940:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 800a944:	e9c4 3208 	strd	r3, r2, [r4, #32]
 800a948:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 800a94c:	7423      	strb	r3, [r4, #16]
 800a94e:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 800a952:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 800a956:	f8a4 2011 	strh.w	r2, [r4, #17]
 800a95a:	74e3      	strb	r3, [r4, #19]
 800a95c:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 800a960:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 800a964:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 800a968:	6161      	str	r1, [r4, #20]
 800a96a:	61a2      	str	r2, [r4, #24]
 800a96c:	61e3      	str	r3, [r4, #28]
 800a96e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	4798      	blx	r3
 800a976:	6844      	ldr	r4, [r0, #4]
 800a978:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 800a97c:	f105 0110 	add.w	r1, r5, #16
 800a980:	4668      	mov	r0, sp
 800a982:	f7fd fd17 	bl	80083b4 <ucdr_init_buffer>
 800a986:	4641      	mov	r1, r8
 800a988:	68e3      	ldr	r3, [r4, #12]
 800a98a:	4668      	mov	r0, sp
 800a98c:	4798      	blx	r3
 800a98e:	4639      	mov	r1, r7
 800a990:	4604      	mov	r4, r0
 800a992:	480a      	ldr	r0, [pc, #40]	; (800a9bc <rmw_take_request+0xb8>)
 800a994:	f006 fdac 	bl	80114f0 <put_memory>
 800a998:	b106      	cbz	r6, 800a99c <rmw_take_request+0x98>
 800a99a:	7034      	strb	r4, [r6, #0]
 800a99c:	f084 0001 	eor.w	r0, r4, #1
 800a9a0:	b2c0      	uxtb	r0, r0
 800a9a2:	b009      	add	sp, #36	; 0x24
 800a9a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9a8:	2001      	movs	r0, #1
 800a9aa:	b009      	add	sp, #36	; 0x24
 800a9ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9b0:	200c      	movs	r0, #12
 800a9b2:	b009      	add	sp, #36	; 0x24
 800a9b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9b8:	08015508 	.word	0x08015508
 800a9bc:	20010da4 	.word	0x20010da4

0800a9c0 <rmw_send_response>:
 800a9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9c2:	4605      	mov	r5, r0
 800a9c4:	6800      	ldr	r0, [r0, #0]
 800a9c6:	b091      	sub	sp, #68	; 0x44
 800a9c8:	460c      	mov	r4, r1
 800a9ca:	4616      	mov	r6, r2
 800a9cc:	b128      	cbz	r0, 800a9da <rmw_send_response+0x1a>
 800a9ce:	4b29      	ldr	r3, [pc, #164]	; (800aa74 <rmw_send_response+0xb4>)
 800a9d0:	6819      	ldr	r1, [r3, #0]
 800a9d2:	f7f5 fc35 	bl	8000240 <strcmp>
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	d141      	bne.n	800aa5e <rmw_send_response+0x9e>
 800a9da:	686d      	ldr	r5, [r5, #4]
 800a9dc:	68a1      	ldr	r1, [r4, #8]
 800a9de:	6860      	ldr	r0, [r4, #4]
 800a9e0:	6faf      	ldr	r7, [r5, #120]	; 0x78
 800a9e2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800a9e6:	9307      	str	r3, [sp, #28]
 800a9e8:	4623      	mov	r3, r4
 800a9ea:	9206      	str	r2, [sp, #24]
 800a9ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9f0:	789b      	ldrb	r3, [r3, #2]
 800a9f2:	f88d 2017 	strb.w	r2, [sp, #23]
 800a9f6:	f88d 3016 	strb.w	r3, [sp, #22]
 800a9fa:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 800a9fe:	68e2      	ldr	r2, [r4, #12]
 800aa00:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aa04:	ab02      	add	r3, sp, #8
 800aa06:	696c      	ldr	r4, [r5, #20]
 800aa08:	c307      	stmia	r3!, {r0, r1, r2}
 800aa0a:	68e3      	ldr	r3, [r4, #12]
 800aa0c:	4798      	blx	r3
 800aa0e:	6844      	ldr	r4, [r0, #4]
 800aa10:	4630      	mov	r0, r6
 800aa12:	6923      	ldr	r3, [r4, #16]
 800aa14:	4798      	blx	r3
 800aa16:	f100 0318 	add.w	r3, r0, #24
 800aa1a:	6938      	ldr	r0, [r7, #16]
 800aa1c:	9300      	str	r3, [sp, #0]
 800aa1e:	ab08      	add	r3, sp, #32
 800aa20:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800aa24:	692a      	ldr	r2, [r5, #16]
 800aa26:	6f29      	ldr	r1, [r5, #112]	; 0x70
 800aa28:	f003 f80a 	bl	800da40 <uxr_prepare_output_stream>
 800aa2c:	b910      	cbnz	r0, 800aa34 <rmw_send_response+0x74>
 800aa2e:	2001      	movs	r0, #1
 800aa30:	b011      	add	sp, #68	; 0x44
 800aa32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa34:	a902      	add	r1, sp, #8
 800aa36:	a808      	add	r0, sp, #32
 800aa38:	f003 fe62 	bl	800e700 <uxr_serialize_SampleIdentity>
 800aa3c:	68a3      	ldr	r3, [r4, #8]
 800aa3e:	a908      	add	r1, sp, #32
 800aa40:	4630      	mov	r0, r6
 800aa42:	4798      	blx	r3
 800aa44:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 800aa48:	6938      	ldr	r0, [r7, #16]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d00a      	beq.n	800aa64 <rmw_send_response+0xa4>
 800aa4e:	6f69      	ldr	r1, [r5, #116]	; 0x74
 800aa50:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800aa54:	f001 fe04 	bl	800c660 <uxr_run_session_until_confirm_delivery>
 800aa58:	2000      	movs	r0, #0
 800aa5a:	b011      	add	sp, #68	; 0x44
 800aa5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa5e:	200c      	movs	r0, #12
 800aa60:	b011      	add	sp, #68	; 0x44
 800aa62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa64:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800aa68:	f001 fa40 	bl	800beec <uxr_flash_output_streams>
 800aa6c:	2000      	movs	r0, #0
 800aa6e:	b011      	add	sp, #68	; 0x44
 800aa70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa72:	bf00      	nop
 800aa74:	08015508 	.word	0x08015508

0800aa78 <rmw_take_response>:
 800aa78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa7c:	4604      	mov	r4, r0
 800aa7e:	6800      	ldr	r0, [r0, #0]
 800aa80:	b088      	sub	sp, #32
 800aa82:	460f      	mov	r7, r1
 800aa84:	4690      	mov	r8, r2
 800aa86:	461d      	mov	r5, r3
 800aa88:	b120      	cbz	r0, 800aa94 <rmw_take_response+0x1c>
 800aa8a:	4b1d      	ldr	r3, [pc, #116]	; (800ab00 <rmw_take_response+0x88>)
 800aa8c:	6819      	ldr	r1, [r3, #0]
 800aa8e:	f7f5 fbd7 	bl	8000240 <strcmp>
 800aa92:	bb68      	cbnz	r0, 800aaf0 <rmw_take_response+0x78>
 800aa94:	b10d      	cbz	r5, 800aa9a <rmw_take_response+0x22>
 800aa96:	2300      	movs	r3, #0
 800aa98:	702b      	strb	r3, [r5, #0]
 800aa9a:	6864      	ldr	r4, [r4, #4]
 800aa9c:	f000 fc58 	bl	800b350 <rmw_uxrce_clean_expired_static_input_buffer>
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	f000 fc2d 	bl	800b300 <rmw_uxrce_find_static_input_buffer_by_owner>
 800aaa6:	4606      	mov	r6, r0
 800aaa8:	b330      	cbz	r0, 800aaf8 <rmw_take_response+0x80>
 800aaaa:	6963      	ldr	r3, [r4, #20]
 800aaac:	6884      	ldr	r4, [r0, #8]
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 800aab4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 800aab8:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800aabc:	4798      	blx	r3
 800aabe:	6847      	ldr	r7, [r0, #4]
 800aac0:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 800aac4:	f104 0110 	add.w	r1, r4, #16
 800aac8:	4668      	mov	r0, sp
 800aaca:	f7fd fc73 	bl	80083b4 <ucdr_init_buffer>
 800aace:	4641      	mov	r1, r8
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	4668      	mov	r0, sp
 800aad4:	4798      	blx	r3
 800aad6:	4631      	mov	r1, r6
 800aad8:	4604      	mov	r4, r0
 800aada:	480a      	ldr	r0, [pc, #40]	; (800ab04 <rmw_take_response+0x8c>)
 800aadc:	f006 fd08 	bl	80114f0 <put_memory>
 800aae0:	b105      	cbz	r5, 800aae4 <rmw_take_response+0x6c>
 800aae2:	702c      	strb	r4, [r5, #0]
 800aae4:	f084 0001 	eor.w	r0, r4, #1
 800aae8:	b2c0      	uxtb	r0, r0
 800aaea:	b008      	add	sp, #32
 800aaec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaf0:	200c      	movs	r0, #12
 800aaf2:	b008      	add	sp, #32
 800aaf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaf8:	2001      	movs	r0, #1
 800aafa:	b008      	add	sp, #32
 800aafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab00:	08015508 	.word	0x08015508
 800ab04:	20010da4 	.word	0x20010da4

0800ab08 <rmw_create_service>:
 800ab08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab0c:	b091      	sub	sp, #68	; 0x44
 800ab0e:	2900      	cmp	r1, #0
 800ab10:	f000 80bb 	beq.w	800ac8a <rmw_create_service+0x182>
 800ab14:	4606      	mov	r6, r0
 800ab16:	2800      	cmp	r0, #0
 800ab18:	f000 80b7 	beq.w	800ac8a <rmw_create_service+0x182>
 800ab1c:	4614      	mov	r4, r2
 800ab1e:	6800      	ldr	r0, [r0, #0]
 800ab20:	4689      	mov	r9, r1
 800ab22:	461d      	mov	r5, r3
 800ab24:	f000 fd5e 	bl	800b5e4 <is_uxrce_rmw_identifier_valid>
 800ab28:	2c00      	cmp	r4, #0
 800ab2a:	f000 80ae 	beq.w	800ac8a <rmw_create_service+0x182>
 800ab2e:	f080 0001 	eor.w	r0, r0, #1
 800ab32:	b2c0      	uxtb	r0, r0
 800ab34:	2800      	cmp	r0, #0
 800ab36:	f040 80a8 	bne.w	800ac8a <rmw_create_service+0x182>
 800ab3a:	7823      	ldrb	r3, [r4, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 80a4 	beq.w	800ac8a <rmw_create_service+0x182>
 800ab42:	2d00      	cmp	r5, #0
 800ab44:	f000 80a1 	beq.w	800ac8a <rmw_create_service+0x182>
 800ab48:	4856      	ldr	r0, [pc, #344]	; (800aca4 <rmw_create_service+0x19c>)
 800ab4a:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800ab4e:	f006 fcbf 	bl	80114d0 <get_memory>
 800ab52:	4606      	mov	r6, r0
 800ab54:	2800      	cmp	r0, #0
 800ab56:	f000 8099 	beq.w	800ac8c <rmw_create_service+0x184>
 800ab5a:	6887      	ldr	r7, [r0, #8]
 800ab5c:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 800ab60:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 800ab64:	f006 fd1c 	bl	80115a0 <rmw_get_implementation_identifier>
 800ab68:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ab6a:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800ab6e:	4620      	mov	r0, r4
 800ab70:	f7f5 fb70 	bl	8000254 <strlen>
 800ab74:	1c42      	adds	r2, r0, #1
 800ab76:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 800ab7a:	2a3c      	cmp	r2, #60	; 0x3c
 800ab7c:	f200 808a 	bhi.w	800ac94 <rmw_create_service+0x18c>
 800ab80:	4621      	mov	r1, r4
 800ab82:	4650      	mov	r0, sl
 800ab84:	f008 ff5d 	bl	8013a42 <memcpy>
 800ab88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ab8c:	4629      	mov	r1, r5
 800ab8e:	2250      	movs	r2, #80	; 0x50
 800ab90:	f107 0020 	add.w	r0, r7, #32
 800ab94:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 800ab98:	677b      	str	r3, [r7, #116]	; 0x74
 800ab9a:	f008 ff52 	bl	8013a42 <memcpy>
 800ab9e:	4648      	mov	r0, r9
 800aba0:	4941      	ldr	r1, [pc, #260]	; (800aca8 <rmw_create_service+0x1a0>)
 800aba2:	f000 fd37 	bl	800b614 <get_service_typesupport_handle>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	d074      	beq.n	800ac94 <rmw_create_service+0x18c>
 800abaa:	6843      	ldr	r3, [r0, #4]
 800abac:	617b      	str	r3, [r7, #20]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d070      	beq.n	800ac94 <rmw_create_service+0x18c>
 800abb2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800abb6:	2108      	movs	r1, #8
 800abb8:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 800acb0 <rmw_create_service+0x1a8>
 800abbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abc0:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 800acb4 <rmw_create_service+0x1ac>
 800abc4:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 800abc8:	1c42      	adds	r2, r0, #1
 800abca:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 800abce:	f000 ff0b 	bl	800b9e8 <uxr_object_id>
 800abd2:	2364      	movs	r3, #100	; 0x64
 800abd4:	6138      	str	r0, [r7, #16]
 800abd6:	4652      	mov	r2, sl
 800abd8:	4649      	mov	r1, r9
 800abda:	6978      	ldr	r0, [r7, #20]
 800abdc:	f000 fc9c 	bl	800b518 <generate_service_types>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	d057      	beq.n	800ac94 <rmw_create_service+0x18c>
 800abe4:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 800acb8 <rmw_create_service+0x1b0>
 800abe8:	233c      	movs	r3, #60	; 0x3c
 800abea:	4a30      	ldr	r2, [pc, #192]	; (800acac <rmw_create_service+0x1a4>)
 800abec:	4620      	mov	r0, r4
 800abee:	4659      	mov	r1, fp
 800abf0:	f000 fc60 	bl	800b4b4 <generate_service_topics>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d04d      	beq.n	800ac94 <rmw_create_service+0x18c>
 800abf8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800abfc:	a80c      	add	r0, sp, #48	; 0x30
 800abfe:	4629      	mov	r1, r5
 800ac00:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800ac04:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ac08:	f000 fc3c 	bl	800b484 <convert_qos_profile>
 800ac0c:	4a27      	ldr	r2, [pc, #156]	; (800acac <rmw_create_service+0x1a4>)
 800ac0e:	a80c      	add	r0, sp, #48	; 0x30
 800ac10:	9400      	str	r4, [sp, #0]
 800ac12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac14:	e9cd b203 	strd	fp, r2, [sp, #12]
 800ac18:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 800ac1c:	c803      	ldmia	r0, {r0, r1}
 800ac1e:	9a08      	ldr	r2, [sp, #32]
 800ac20:	9005      	str	r0, [sp, #20]
 800ac22:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800ac26:	2306      	movs	r3, #6
 800ac28:	f8ad 1018 	strh.w	r1, [sp, #24]
 800ac2c:	9307      	str	r3, [sp, #28]
 800ac2e:	6811      	ldr	r1, [r2, #0]
 800ac30:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ac34:	693a      	ldr	r2, [r7, #16]
 800ac36:	f000 fddf 	bl	800b7f8 <uxr_buffer_create_replier_bin>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800ac40:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ac44:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ac48:	f000 fc00 	bl	800b44c <run_xrce_session>
 800ac4c:	b310      	cbz	r0, 800ac94 <rmw_create_service+0x18c>
 800ac4e:	7a2b      	ldrb	r3, [r5, #8]
 800ac50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac54:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	920e      	str	r2, [sp, #56]	; 0x38
 800ac5c:	f04f 0200 	mov.w	r2, #0
 800ac60:	920f      	str	r2, [sp, #60]	; 0x3c
 800ac62:	bf0c      	ite	eq
 800ac64:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 800ac68:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 800ac6c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ac70:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac72:	ab0e      	add	r3, sp, #56	; 0x38
 800ac74:	673a      	str	r2, [r7, #112]	; 0x70
 800ac76:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 800ac7a:	9300      	str	r3, [sp, #0]
 800ac7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac7e:	6811      	ldr	r1, [r2, #0]
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	f000 fee1 	bl	800ba48 <uxr_buffer_request_data>
 800ac86:	8338      	strh	r0, [r7, #24]
 800ac88:	e000      	b.n	800ac8c <rmw_create_service+0x184>
 800ac8a:	2600      	movs	r6, #0
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	b011      	add	sp, #68	; 0x44
 800ac90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac94:	4630      	mov	r0, r6
 800ac96:	2600      	movs	r6, #0
 800ac98:	f000 faa0 	bl	800b1dc <rmw_uxrce_fini_service_memory>
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	b011      	add	sp, #68	; 0x44
 800aca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca4:	20010d84 	.word	0x20010d84
 800aca8:	08014934 	.word	0x08014934
 800acac:	2000c3f4 	.word	0x2000c3f4
 800acb0:	2000c430 	.word	0x2000c430
 800acb4:	2000c390 	.word	0x2000c390
 800acb8:	2000c354 	.word	0x2000c354

0800acbc <rmw_destroy_service>:
 800acbc:	b570      	push	{r4, r5, r6, lr}
 800acbe:	b128      	cbz	r0, 800accc <rmw_destroy_service+0x10>
 800acc0:	4604      	mov	r4, r0
 800acc2:	6800      	ldr	r0, [r0, #0]
 800acc4:	460d      	mov	r5, r1
 800acc6:	f000 fc8d 	bl	800b5e4 <is_uxrce_rmw_identifier_valid>
 800acca:	b910      	cbnz	r0, 800acd2 <rmw_destroy_service+0x16>
 800accc:	2401      	movs	r4, #1
 800acce:	4620      	mov	r0, r4
 800acd0:	bd70      	pop	{r4, r5, r6, pc}
 800acd2:	6863      	ldr	r3, [r4, #4]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d0f9      	beq.n	800accc <rmw_destroy_service+0x10>
 800acd8:	2d00      	cmp	r5, #0
 800acda:	d0f7      	beq.n	800accc <rmw_destroy_service+0x10>
 800acdc:	6828      	ldr	r0, [r5, #0]
 800acde:	f000 fc81 	bl	800b5e4 <is_uxrce_rmw_identifier_valid>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	d0f2      	beq.n	800accc <rmw_destroy_service+0x10>
 800ace6:	686e      	ldr	r6, [r5, #4]
 800ace8:	2e00      	cmp	r6, #0
 800acea:	d0ef      	beq.n	800accc <rmw_destroy_service+0x10>
 800acec:	6864      	ldr	r4, [r4, #4]
 800acee:	6932      	ldr	r2, [r6, #16]
 800acf0:	6920      	ldr	r0, [r4, #16]
 800acf2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800acf6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800acfa:	6819      	ldr	r1, [r3, #0]
 800acfc:	f000 fede 	bl	800babc <uxr_buffer_cancel_data>
 800ad00:	4602      	mov	r2, r0
 800ad02:	6920      	ldr	r0, [r4, #16]
 800ad04:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800ad08:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800ad0c:	f000 fb9e 	bl	800b44c <run_xrce_session>
 800ad10:	6920      	ldr	r0, [r4, #16]
 800ad12:	6932      	ldr	r2, [r6, #16]
 800ad14:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800ad18:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ad1c:	6819      	ldr	r1, [r3, #0]
 800ad1e:	f000 fced 	bl	800b6fc <uxr_buffer_delete_entity>
 800ad22:	4602      	mov	r2, r0
 800ad24:	6920      	ldr	r0, [r4, #16]
 800ad26:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800ad2a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800ad2e:	f000 fb8d 	bl	800b44c <run_xrce_session>
 800ad32:	4603      	mov	r3, r0
 800ad34:	4628      	mov	r0, r5
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	bf14      	ite	ne
 800ad3a:	2400      	movne	r4, #0
 800ad3c:	2402      	moveq	r4, #2
 800ad3e:	f000 fa4d 	bl	800b1dc <rmw_uxrce_fini_service_memory>
 800ad42:	e7c4      	b.n	800acce <rmw_destroy_service+0x12>

0800ad44 <rmw_service_response_publisher_get_actual_qos>:
 800ad44:	b181      	cbz	r1, 800ad68 <rmw_service_response_publisher_get_actual_qos+0x24>
 800ad46:	4603      	mov	r3, r0
 800ad48:	b510      	push	{r4, lr}
 800ad4a:	fab0 f480 	clz	r4, r0
 800ad4e:	0964      	lsrs	r4, r4, #5
 800ad50:	b140      	cbz	r0, 800ad64 <rmw_service_response_publisher_get_actual_qos+0x20>
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	4608      	mov	r0, r1
 800ad56:	2250      	movs	r2, #80	; 0x50
 800ad58:	f103 0120 	add.w	r1, r3, #32
 800ad5c:	f008 fe71 	bl	8013a42 <memcpy>
 800ad60:	4620      	mov	r0, r4
 800ad62:	bd10      	pop	{r4, pc}
 800ad64:	200b      	movs	r0, #11
 800ad66:	bd10      	pop	{r4, pc}
 800ad68:	200b      	movs	r0, #11
 800ad6a:	4770      	bx	lr

0800ad6c <rmw_service_request_subscription_get_actual_qos>:
 800ad6c:	b178      	cbz	r0, 800ad8e <rmw_service_request_subscription_get_actual_qos+0x22>
 800ad6e:	b510      	push	{r4, lr}
 800ad70:	fab1 f481 	clz	r4, r1
 800ad74:	0964      	lsrs	r4, r4, #5
 800ad76:	b141      	cbz	r1, 800ad8a <rmw_service_request_subscription_get_actual_qos+0x1e>
 800ad78:	6843      	ldr	r3, [r0, #4]
 800ad7a:	2250      	movs	r2, #80	; 0x50
 800ad7c:	4608      	mov	r0, r1
 800ad7e:	f103 0120 	add.w	r1, r3, #32
 800ad82:	f008 fe5e 	bl	8013a42 <memcpy>
 800ad86:	4620      	mov	r0, r4
 800ad88:	bd10      	pop	{r4, pc}
 800ad8a:	200b      	movs	r0, #11
 800ad8c:	bd10      	pop	{r4, pc}
 800ad8e:	200b      	movs	r0, #11
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop

0800ad94 <rmw_destroy_subscription>:
 800ad94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad98:	b128      	cbz	r0, 800ada6 <rmw_destroy_subscription+0x12>
 800ad9a:	4604      	mov	r4, r0
 800ad9c:	6800      	ldr	r0, [r0, #0]
 800ad9e:	460d      	mov	r5, r1
 800ada0:	f000 fc20 	bl	800b5e4 <is_uxrce_rmw_identifier_valid>
 800ada4:	b918      	cbnz	r0, 800adae <rmw_destroy_subscription+0x1a>
 800ada6:	2401      	movs	r4, #1
 800ada8:	4620      	mov	r0, r4
 800adaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adae:	6863      	ldr	r3, [r4, #4]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d0f8      	beq.n	800ada6 <rmw_destroy_subscription+0x12>
 800adb4:	fab5 f485 	clz	r4, r5
 800adb8:	0964      	lsrs	r4, r4, #5
 800adba:	2d00      	cmp	r5, #0
 800adbc:	d0f3      	beq.n	800ada6 <rmw_destroy_subscription+0x12>
 800adbe:	6828      	ldr	r0, [r5, #0]
 800adc0:	f000 fc10 	bl	800b5e4 <is_uxrce_rmw_identifier_valid>
 800adc4:	2800      	cmp	r0, #0
 800adc6:	d0ee      	beq.n	800ada6 <rmw_destroy_subscription+0x12>
 800adc8:	686e      	ldr	r6, [r5, #4]
 800adca:	2e00      	cmp	r6, #0
 800adcc:	d0eb      	beq.n	800ada6 <rmw_destroy_subscription+0x12>
 800adce:	6a37      	ldr	r7, [r6, #32]
 800add0:	6972      	ldr	r2, [r6, #20]
 800add2:	6938      	ldr	r0, [r7, #16]
 800add4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800add8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800addc:	6819      	ldr	r1, [r3, #0]
 800adde:	f000 fe6d 	bl	800babc <uxr_buffer_cancel_data>
 800ade2:	4602      	mov	r2, r0
 800ade4:	6938      	ldr	r0, [r7, #16]
 800ade6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800adea:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800adee:	f000 fb2d 	bl	800b44c <run_xrce_session>
 800adf2:	69f0      	ldr	r0, [r6, #28]
 800adf4:	f006 fc04 	bl	8011600 <destroy_topic>
 800adf8:	6a33      	ldr	r3, [r6, #32]
 800adfa:	6972      	ldr	r2, [r6, #20]
 800adfc:	6918      	ldr	r0, [r3, #16]
 800adfe:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800ae02:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ae06:	6819      	ldr	r1, [r3, #0]
 800ae08:	f000 fc78 	bl	800b6fc <uxr_buffer_delete_entity>
 800ae0c:	6a33      	ldr	r3, [r6, #32]
 800ae0e:	4680      	mov	r8, r0
 800ae10:	6932      	ldr	r2, [r6, #16]
 800ae12:	6918      	ldr	r0, [r3, #16]
 800ae14:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800ae18:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ae1c:	6819      	ldr	r1, [r3, #0]
 800ae1e:	f000 fc6d 	bl	800b6fc <uxr_buffer_delete_entity>
 800ae22:	4606      	mov	r6, r0
 800ae24:	6938      	ldr	r0, [r7, #16]
 800ae26:	4642      	mov	r2, r8
 800ae28:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800ae2c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800ae30:	f000 fb0c 	bl	800b44c <run_xrce_session>
 800ae34:	693f      	ldr	r7, [r7, #16]
 800ae36:	4632      	mov	r2, r6
 800ae38:	4606      	mov	r6, r0
 800ae3a:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800ae3e:	4638      	mov	r0, r7
 800ae40:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800ae44:	f000 fb02 	bl	800b44c <run_xrce_session>
 800ae48:	b126      	cbz	r6, 800ae54 <rmw_destroy_subscription+0xc0>
 800ae4a:	b118      	cbz	r0, 800ae54 <rmw_destroy_subscription+0xc0>
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	f000 f9af 	bl	800b1b0 <rmw_uxrce_fini_subscription_memory>
 800ae52:	e7a9      	b.n	800ada8 <rmw_destroy_subscription+0x14>
 800ae54:	2402      	movs	r4, #2
 800ae56:	e7f9      	b.n	800ae4c <rmw_destroy_subscription+0xb8>

0800ae58 <rmw_uxrce_transport_init>:
 800ae58:	b508      	push	{r3, lr}
 800ae5a:	b108      	cbz	r0, 800ae60 <rmw_uxrce_transport_init+0x8>
 800ae5c:	f100 0210 	add.w	r2, r0, #16
 800ae60:	b139      	cbz	r1, 800ae72 <rmw_uxrce_transport_init+0x1a>
 800ae62:	6949      	ldr	r1, [r1, #20]
 800ae64:	4610      	mov	r0, r2
 800ae66:	f000 fd87 	bl	800b978 <uxr_init_custom_transport>
 800ae6a:	f080 0001 	eor.w	r0, r0, #1
 800ae6e:	b2c0      	uxtb	r0, r0
 800ae70:	bd08      	pop	{r3, pc}
 800ae72:	4b04      	ldr	r3, [pc, #16]	; (800ae84 <rmw_uxrce_transport_init+0x2c>)
 800ae74:	4610      	mov	r0, r2
 800ae76:	6859      	ldr	r1, [r3, #4]
 800ae78:	f000 fd7e 	bl	800b978 <uxr_init_custom_transport>
 800ae7c:	f080 0001 	eor.w	r0, r0, #1
 800ae80:	b2c0      	uxtb	r0, r0
 800ae82:	bd08      	pop	{r3, pc}
 800ae84:	2000c2fc 	.word	0x2000c2fc

0800ae88 <rmw_uxrce_init_service_memory>:
 800ae88:	b1e2      	cbz	r2, 800aec4 <rmw_uxrce_init_service_memory+0x3c>
 800ae8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae8e:	7b05      	ldrb	r5, [r0, #12]
 800ae90:	4606      	mov	r6, r0
 800ae92:	b9ad      	cbnz	r5, 800aec0 <rmw_uxrce_init_service_memory+0x38>
 800ae94:	23c8      	movs	r3, #200	; 0xc8
 800ae96:	4617      	mov	r7, r2
 800ae98:	460c      	mov	r4, r1
 800ae9a:	46a8      	mov	r8, r5
 800ae9c:	6083      	str	r3, [r0, #8]
 800ae9e:	f240 1301 	movw	r3, #257	; 0x101
 800aea2:	e9c0 5500 	strd	r5, r5, [r0]
 800aea6:	8183      	strh	r3, [r0, #12]
 800aea8:	3501      	adds	r5, #1
 800aeaa:	4621      	mov	r1, r4
 800aeac:	4630      	mov	r0, r6
 800aeae:	f006 fb1f 	bl	80114f0 <put_memory>
 800aeb2:	42af      	cmp	r7, r5
 800aeb4:	60a4      	str	r4, [r4, #8]
 800aeb6:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800aeba:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800aebe:	d1f3      	bne.n	800aea8 <rmw_uxrce_init_service_memory+0x20>
 800aec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aec4:	4770      	bx	lr
 800aec6:	bf00      	nop

0800aec8 <rmw_uxrce_init_client_memory>:
 800aec8:	b1e2      	cbz	r2, 800af04 <rmw_uxrce_init_client_memory+0x3c>
 800aeca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aece:	7b05      	ldrb	r5, [r0, #12]
 800aed0:	4606      	mov	r6, r0
 800aed2:	b9ad      	cbnz	r5, 800af00 <rmw_uxrce_init_client_memory+0x38>
 800aed4:	23c8      	movs	r3, #200	; 0xc8
 800aed6:	4617      	mov	r7, r2
 800aed8:	460c      	mov	r4, r1
 800aeda:	46a8      	mov	r8, r5
 800aedc:	6083      	str	r3, [r0, #8]
 800aede:	f240 1301 	movw	r3, #257	; 0x101
 800aee2:	e9c0 5500 	strd	r5, r5, [r0]
 800aee6:	8183      	strh	r3, [r0, #12]
 800aee8:	3501      	adds	r5, #1
 800aeea:	4621      	mov	r1, r4
 800aeec:	4630      	mov	r0, r6
 800aeee:	f006 faff 	bl	80114f0 <put_memory>
 800aef2:	42af      	cmp	r7, r5
 800aef4:	60a4      	str	r4, [r4, #8]
 800aef6:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800aefa:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800aefe:	d1f3      	bne.n	800aee8 <rmw_uxrce_init_client_memory+0x20>
 800af00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af04:	4770      	bx	lr
 800af06:	bf00      	nop

0800af08 <rmw_uxrce_init_publisher_memory>:
 800af08:	b1e2      	cbz	r2, 800af44 <rmw_uxrce_init_publisher_memory+0x3c>
 800af0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af0e:	7b05      	ldrb	r5, [r0, #12]
 800af10:	4606      	mov	r6, r0
 800af12:	b9ad      	cbnz	r5, 800af40 <rmw_uxrce_init_publisher_memory+0x38>
 800af14:	23d8      	movs	r3, #216	; 0xd8
 800af16:	4617      	mov	r7, r2
 800af18:	460c      	mov	r4, r1
 800af1a:	46a8      	mov	r8, r5
 800af1c:	6083      	str	r3, [r0, #8]
 800af1e:	f240 1301 	movw	r3, #257	; 0x101
 800af22:	e9c0 5500 	strd	r5, r5, [r0]
 800af26:	8183      	strh	r3, [r0, #12]
 800af28:	3501      	adds	r5, #1
 800af2a:	4621      	mov	r1, r4
 800af2c:	4630      	mov	r0, r6
 800af2e:	f006 fadf 	bl	80114f0 <put_memory>
 800af32:	42af      	cmp	r7, r5
 800af34:	60a4      	str	r4, [r4, #8]
 800af36:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800af3a:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800af3e:	d1f3      	bne.n	800af28 <rmw_uxrce_init_publisher_memory+0x20>
 800af40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop

0800af48 <rmw_uxrce_init_subscription_memory>:
 800af48:	b1e2      	cbz	r2, 800af84 <rmw_uxrce_init_subscription_memory+0x3c>
 800af4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af4e:	7b05      	ldrb	r5, [r0, #12]
 800af50:	4606      	mov	r6, r0
 800af52:	b9ad      	cbnz	r5, 800af80 <rmw_uxrce_init_subscription_memory+0x38>
 800af54:	23d8      	movs	r3, #216	; 0xd8
 800af56:	4617      	mov	r7, r2
 800af58:	460c      	mov	r4, r1
 800af5a:	46a8      	mov	r8, r5
 800af5c:	6083      	str	r3, [r0, #8]
 800af5e:	f240 1301 	movw	r3, #257	; 0x101
 800af62:	e9c0 5500 	strd	r5, r5, [r0]
 800af66:	8183      	strh	r3, [r0, #12]
 800af68:	3501      	adds	r5, #1
 800af6a:	4621      	mov	r1, r4
 800af6c:	4630      	mov	r0, r6
 800af6e:	f006 fabf 	bl	80114f0 <put_memory>
 800af72:	42af      	cmp	r7, r5
 800af74:	60a4      	str	r4, [r4, #8]
 800af76:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800af7a:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800af7e:	d1f3      	bne.n	800af68 <rmw_uxrce_init_subscription_memory+0x20>
 800af80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop

0800af88 <rmw_uxrce_init_node_memory>:
 800af88:	b1e2      	cbz	r2, 800afc4 <rmw_uxrce_init_node_memory+0x3c>
 800af8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af8e:	7b05      	ldrb	r5, [r0, #12]
 800af90:	4606      	mov	r6, r0
 800af92:	b9ad      	cbnz	r5, 800afc0 <rmw_uxrce_init_node_memory+0x38>
 800af94:	23a4      	movs	r3, #164	; 0xa4
 800af96:	4617      	mov	r7, r2
 800af98:	460c      	mov	r4, r1
 800af9a:	46a8      	mov	r8, r5
 800af9c:	6083      	str	r3, [r0, #8]
 800af9e:	f240 1301 	movw	r3, #257	; 0x101
 800afa2:	e9c0 5500 	strd	r5, r5, [r0]
 800afa6:	8183      	strh	r3, [r0, #12]
 800afa8:	3501      	adds	r5, #1
 800afaa:	4621      	mov	r1, r4
 800afac:	4630      	mov	r0, r6
 800afae:	f006 fa9f 	bl	80114f0 <put_memory>
 800afb2:	42af      	cmp	r7, r5
 800afb4:	60a4      	str	r4, [r4, #8]
 800afb6:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800afba:	f804 8c98 	strb.w	r8, [r4, #-152]
 800afbe:	d1f3      	bne.n	800afa8 <rmw_uxrce_init_node_memory+0x20>
 800afc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop

0800afc8 <rmw_uxrce_init_session_memory>:
 800afc8:	b1ea      	cbz	r2, 800b006 <rmw_uxrce_init_session_memory+0x3e>
 800afca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afce:	7b05      	ldrb	r5, [r0, #12]
 800afd0:	4606      	mov	r6, r0
 800afd2:	b9b5      	cbnz	r5, 800b002 <rmw_uxrce_init_session_memory+0x3a>
 800afd4:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800afd8:	f240 1301 	movw	r3, #257	; 0x101
 800afdc:	4617      	mov	r7, r2
 800afde:	460c      	mov	r4, r1
 800afe0:	46a9      	mov	r9, r5
 800afe2:	f8c0 8008 	str.w	r8, [r0, #8]
 800afe6:	8183      	strh	r3, [r0, #12]
 800afe8:	e9c0 5500 	strd	r5, r5, [r0]
 800afec:	3501      	adds	r5, #1
 800afee:	4621      	mov	r1, r4
 800aff0:	4630      	mov	r0, r6
 800aff2:	f006 fa7d 	bl	80114f0 <put_memory>
 800aff6:	42af      	cmp	r7, r5
 800aff8:	60a4      	str	r4, [r4, #8]
 800affa:	f884 900c 	strb.w	r9, [r4, #12]
 800affe:	4444      	add	r4, r8
 800b000:	d1f4      	bne.n	800afec <rmw_uxrce_init_session_memory+0x24>
 800b002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b006:	4770      	bx	lr

0800b008 <rmw_uxrce_init_topic_memory>:
 800b008:	b1e2      	cbz	r2, 800b044 <rmw_uxrce_init_topic_memory+0x3c>
 800b00a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b00e:	7b05      	ldrb	r5, [r0, #12]
 800b010:	4606      	mov	r6, r0
 800b012:	b9ad      	cbnz	r5, 800b040 <rmw_uxrce_init_topic_memory+0x38>
 800b014:	231c      	movs	r3, #28
 800b016:	4617      	mov	r7, r2
 800b018:	460c      	mov	r4, r1
 800b01a:	46a8      	mov	r8, r5
 800b01c:	6083      	str	r3, [r0, #8]
 800b01e:	f240 1301 	movw	r3, #257	; 0x101
 800b022:	e9c0 5500 	strd	r5, r5, [r0]
 800b026:	8183      	strh	r3, [r0, #12]
 800b028:	3501      	adds	r5, #1
 800b02a:	4621      	mov	r1, r4
 800b02c:	4630      	mov	r0, r6
 800b02e:	f006 fa5f 	bl	80114f0 <put_memory>
 800b032:	42af      	cmp	r7, r5
 800b034:	60a4      	str	r4, [r4, #8]
 800b036:	f104 041c 	add.w	r4, r4, #28
 800b03a:	f804 8c10 	strb.w	r8, [r4, #-16]
 800b03e:	d1f3      	bne.n	800b028 <rmw_uxrce_init_topic_memory+0x20>
 800b040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b044:	4770      	bx	lr
 800b046:	bf00      	nop

0800b048 <rmw_uxrce_init_static_input_buffer_memory>:
 800b048:	b1ea      	cbz	r2, 800b086 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800b04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b04e:	7b05      	ldrb	r5, [r0, #12]
 800b050:	4606      	mov	r6, r0
 800b052:	b9b5      	cbnz	r5, 800b082 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800b054:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800b058:	4617      	mov	r7, r2
 800b05a:	460c      	mov	r4, r1
 800b05c:	46a8      	mov	r8, r5
 800b05e:	6083      	str	r3, [r0, #8]
 800b060:	f240 1301 	movw	r3, #257	; 0x101
 800b064:	e9c0 5500 	strd	r5, r5, [r0]
 800b068:	8183      	strh	r3, [r0, #12]
 800b06a:	3501      	adds	r5, #1
 800b06c:	4621      	mov	r1, r4
 800b06e:	4630      	mov	r0, r6
 800b070:	f006 fa3e 	bl	80114f0 <put_memory>
 800b074:	42af      	cmp	r7, r5
 800b076:	60a4      	str	r4, [r4, #8]
 800b078:	f884 800c 	strb.w	r8, [r4, #12]
 800b07c:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800b080:	d1f3      	bne.n	800b06a <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800b082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b086:	4770      	bx	lr

0800b088 <rmw_uxrce_init_init_options_impl_memory>:
 800b088:	b1e2      	cbz	r2, 800b0c4 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800b08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b08e:	7b05      	ldrb	r5, [r0, #12]
 800b090:	4606      	mov	r6, r0
 800b092:	b9ad      	cbnz	r5, 800b0c0 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800b094:	232c      	movs	r3, #44	; 0x2c
 800b096:	4617      	mov	r7, r2
 800b098:	460c      	mov	r4, r1
 800b09a:	46a8      	mov	r8, r5
 800b09c:	6083      	str	r3, [r0, #8]
 800b09e:	f240 1301 	movw	r3, #257	; 0x101
 800b0a2:	e9c0 5500 	strd	r5, r5, [r0]
 800b0a6:	8183      	strh	r3, [r0, #12]
 800b0a8:	3501      	adds	r5, #1
 800b0aa:	4621      	mov	r1, r4
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	f006 fa1f 	bl	80114f0 <put_memory>
 800b0b2:	42af      	cmp	r7, r5
 800b0b4:	60a4      	str	r4, [r4, #8]
 800b0b6:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800b0ba:	f804 8c20 	strb.w	r8, [r4, #-32]
 800b0be:	d1f3      	bne.n	800b0a8 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800b0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop

0800b0c8 <rmw_uxrce_init_wait_set_memory>:
 800b0c8:	b1e2      	cbz	r2, 800b104 <rmw_uxrce_init_wait_set_memory+0x3c>
 800b0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ce:	7b05      	ldrb	r5, [r0, #12]
 800b0d0:	4606      	mov	r6, r0
 800b0d2:	b9ad      	cbnz	r5, 800b100 <rmw_uxrce_init_wait_set_memory+0x38>
 800b0d4:	231c      	movs	r3, #28
 800b0d6:	4617      	mov	r7, r2
 800b0d8:	460c      	mov	r4, r1
 800b0da:	46a8      	mov	r8, r5
 800b0dc:	6083      	str	r3, [r0, #8]
 800b0de:	f240 1301 	movw	r3, #257	; 0x101
 800b0e2:	e9c0 5500 	strd	r5, r5, [r0]
 800b0e6:	8183      	strh	r3, [r0, #12]
 800b0e8:	3501      	adds	r5, #1
 800b0ea:	4621      	mov	r1, r4
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	f006 f9ff 	bl	80114f0 <put_memory>
 800b0f2:	42af      	cmp	r7, r5
 800b0f4:	60a4      	str	r4, [r4, #8]
 800b0f6:	f104 041c 	add.w	r4, r4, #28
 800b0fa:	f804 8c10 	strb.w	r8, [r4, #-16]
 800b0fe:	d1f3      	bne.n	800b0e8 <rmw_uxrce_init_wait_set_memory+0x20>
 800b100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop

0800b108 <rmw_uxrce_init_guard_condition_memory>:
 800b108:	b1e2      	cbz	r2, 800b144 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800b10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b10e:	7b05      	ldrb	r5, [r0, #12]
 800b110:	4606      	mov	r6, r0
 800b112:	b9ad      	cbnz	r5, 800b140 <rmw_uxrce_init_guard_condition_memory+0x38>
 800b114:	2320      	movs	r3, #32
 800b116:	4617      	mov	r7, r2
 800b118:	460c      	mov	r4, r1
 800b11a:	46a8      	mov	r8, r5
 800b11c:	6083      	str	r3, [r0, #8]
 800b11e:	f240 1301 	movw	r3, #257	; 0x101
 800b122:	e9c0 5500 	strd	r5, r5, [r0]
 800b126:	8183      	strh	r3, [r0, #12]
 800b128:	3501      	adds	r5, #1
 800b12a:	4621      	mov	r1, r4
 800b12c:	4630      	mov	r0, r6
 800b12e:	f006 f9df 	bl	80114f0 <put_memory>
 800b132:	42af      	cmp	r7, r5
 800b134:	60a4      	str	r4, [r4, #8]
 800b136:	f104 0420 	add.w	r4, r4, #32
 800b13a:	f804 8c14 	strb.w	r8, [r4, #-20]
 800b13e:	d1f3      	bne.n	800b128 <rmw_uxrce_init_guard_condition_memory+0x20>
 800b140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop

0800b148 <rmw_uxrce_fini_session_memory>:
 800b148:	4601      	mov	r1, r0
 800b14a:	4801      	ldr	r0, [pc, #4]	; (800b150 <rmw_uxrce_fini_session_memory+0x8>)
 800b14c:	f006 b9d0 	b.w	80114f0 <put_memory>
 800b150:	20010d94 	.word	0x20010d94

0800b154 <rmw_uxrce_fini_node_memory>:
 800b154:	b538      	push	{r3, r4, r5, lr}
 800b156:	4604      	mov	r4, r0
 800b158:	6800      	ldr	r0, [r0, #0]
 800b15a:	b128      	cbz	r0, 800b168 <rmw_uxrce_fini_node_memory+0x14>
 800b15c:	4b07      	ldr	r3, [pc, #28]	; (800b17c <rmw_uxrce_fini_node_memory+0x28>)
 800b15e:	6819      	ldr	r1, [r3, #0]
 800b160:	f7f5 f86e 	bl	8000240 <strcmp>
 800b164:	b940      	cbnz	r0, 800b178 <rmw_uxrce_fini_node_memory+0x24>
 800b166:	6020      	str	r0, [r4, #0]
 800b168:	6861      	ldr	r1, [r4, #4]
 800b16a:	b129      	cbz	r1, 800b178 <rmw_uxrce_fini_node_memory+0x24>
 800b16c:	2500      	movs	r5, #0
 800b16e:	4804      	ldr	r0, [pc, #16]	; (800b180 <rmw_uxrce_fini_node_memory+0x2c>)
 800b170:	610d      	str	r5, [r1, #16]
 800b172:	f006 f9bd 	bl	80114f0 <put_memory>
 800b176:	6065      	str	r5, [r4, #4]
 800b178:	bd38      	pop	{r3, r4, r5, pc}
 800b17a:	bf00      	nop
 800b17c:	08015508 	.word	0x08015508
 800b180:	20010d64 	.word	0x20010d64

0800b184 <rmw_uxrce_fini_publisher_memory>:
 800b184:	b510      	push	{r4, lr}
 800b186:	4604      	mov	r4, r0
 800b188:	6800      	ldr	r0, [r0, #0]
 800b18a:	b128      	cbz	r0, 800b198 <rmw_uxrce_fini_publisher_memory+0x14>
 800b18c:	4b06      	ldr	r3, [pc, #24]	; (800b1a8 <rmw_uxrce_fini_publisher_memory+0x24>)
 800b18e:	6819      	ldr	r1, [r3, #0]
 800b190:	f7f5 f856 	bl	8000240 <strcmp>
 800b194:	b938      	cbnz	r0, 800b1a6 <rmw_uxrce_fini_publisher_memory+0x22>
 800b196:	6020      	str	r0, [r4, #0]
 800b198:	6861      	ldr	r1, [r4, #4]
 800b19a:	b121      	cbz	r1, 800b1a6 <rmw_uxrce_fini_publisher_memory+0x22>
 800b19c:	4803      	ldr	r0, [pc, #12]	; (800b1ac <rmw_uxrce_fini_publisher_memory+0x28>)
 800b19e:	f006 f9a7 	bl	80114f0 <put_memory>
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	6063      	str	r3, [r4, #4]
 800b1a6:	bd10      	pop	{r4, pc}
 800b1a8:	08015508 	.word	0x08015508
 800b1ac:	20010d74 	.word	0x20010d74

0800b1b0 <rmw_uxrce_fini_subscription_memory>:
 800b1b0:	b510      	push	{r4, lr}
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	6800      	ldr	r0, [r0, #0]
 800b1b6:	b128      	cbz	r0, 800b1c4 <rmw_uxrce_fini_subscription_memory+0x14>
 800b1b8:	4b06      	ldr	r3, [pc, #24]	; (800b1d4 <rmw_uxrce_fini_subscription_memory+0x24>)
 800b1ba:	6819      	ldr	r1, [r3, #0]
 800b1bc:	f7f5 f840 	bl	8000240 <strcmp>
 800b1c0:	b938      	cbnz	r0, 800b1d2 <rmw_uxrce_fini_subscription_memory+0x22>
 800b1c2:	6020      	str	r0, [r4, #0]
 800b1c4:	6861      	ldr	r1, [r4, #4]
 800b1c6:	b121      	cbz	r1, 800b1d2 <rmw_uxrce_fini_subscription_memory+0x22>
 800b1c8:	4803      	ldr	r0, [pc, #12]	; (800b1d8 <rmw_uxrce_fini_subscription_memory+0x28>)
 800b1ca:	f006 f991 	bl	80114f0 <put_memory>
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	6063      	str	r3, [r4, #4]
 800b1d2:	bd10      	pop	{r4, pc}
 800b1d4:	08015508 	.word	0x08015508
 800b1d8:	20010db4 	.word	0x20010db4

0800b1dc <rmw_uxrce_fini_service_memory>:
 800b1dc:	b510      	push	{r4, lr}
 800b1de:	4604      	mov	r4, r0
 800b1e0:	6800      	ldr	r0, [r0, #0]
 800b1e2:	b128      	cbz	r0, 800b1f0 <rmw_uxrce_fini_service_memory+0x14>
 800b1e4:	4b06      	ldr	r3, [pc, #24]	; (800b200 <rmw_uxrce_fini_service_memory+0x24>)
 800b1e6:	6819      	ldr	r1, [r3, #0]
 800b1e8:	f7f5 f82a 	bl	8000240 <strcmp>
 800b1ec:	b938      	cbnz	r0, 800b1fe <rmw_uxrce_fini_service_memory+0x22>
 800b1ee:	6020      	str	r0, [r4, #0]
 800b1f0:	6861      	ldr	r1, [r4, #4]
 800b1f2:	b121      	cbz	r1, 800b1fe <rmw_uxrce_fini_service_memory+0x22>
 800b1f4:	4803      	ldr	r0, [pc, #12]	; (800b204 <rmw_uxrce_fini_service_memory+0x28>)
 800b1f6:	f006 f97b 	bl	80114f0 <put_memory>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	6063      	str	r3, [r4, #4]
 800b1fe:	bd10      	pop	{r4, pc}
 800b200:	08015508 	.word	0x08015508
 800b204:	20010d84 	.word	0x20010d84

0800b208 <rmw_uxrce_fini_client_memory>:
 800b208:	b510      	push	{r4, lr}
 800b20a:	4604      	mov	r4, r0
 800b20c:	6800      	ldr	r0, [r0, #0]
 800b20e:	b128      	cbz	r0, 800b21c <rmw_uxrce_fini_client_memory+0x14>
 800b210:	4b06      	ldr	r3, [pc, #24]	; (800b22c <rmw_uxrce_fini_client_memory+0x24>)
 800b212:	6819      	ldr	r1, [r3, #0]
 800b214:	f7f5 f814 	bl	8000240 <strcmp>
 800b218:	b938      	cbnz	r0, 800b22a <rmw_uxrce_fini_client_memory+0x22>
 800b21a:	6020      	str	r0, [r4, #0]
 800b21c:	6861      	ldr	r1, [r4, #4]
 800b21e:	b121      	cbz	r1, 800b22a <rmw_uxrce_fini_client_memory+0x22>
 800b220:	4803      	ldr	r0, [pc, #12]	; (800b230 <rmw_uxrce_fini_client_memory+0x28>)
 800b222:	f006 f965 	bl	80114f0 <put_memory>
 800b226:	2300      	movs	r3, #0
 800b228:	6063      	str	r3, [r4, #4]
 800b22a:	bd10      	pop	{r4, pc}
 800b22c:	08015508 	.word	0x08015508
 800b230:	2000c494 	.word	0x2000c494

0800b234 <rmw_uxrce_fini_topic_memory>:
 800b234:	b510      	push	{r4, lr}
 800b236:	4604      	mov	r4, r0
 800b238:	4803      	ldr	r0, [pc, #12]	; (800b248 <rmw_uxrce_fini_topic_memory+0x14>)
 800b23a:	4621      	mov	r1, r4
 800b23c:	f006 f958 	bl	80114f0 <put_memory>
 800b240:	2300      	movs	r3, #0
 800b242:	61a3      	str	r3, [r4, #24]
 800b244:	bd10      	pop	{r4, pc}
 800b246:	bf00      	nop
 800b248:	20010dc4 	.word	0x20010dc4

0800b24c <rmw_uxrce_get_static_input_buffer_for_entity>:
 800b24c:	b082      	sub	sp, #8
 800b24e:	492b      	ldr	r1, [pc, #172]	; (800b2fc <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800b250:	b530      	push	{r4, r5, lr}
 800b252:	680d      	ldr	r5, [r1, #0]
 800b254:	ac03      	add	r4, sp, #12
 800b256:	e884 000c 	stmia.w	r4, {r2, r3}
 800b25a:	461c      	mov	r4, r3
 800b25c:	2d00      	cmp	r5, #0
 800b25e:	d04b      	beq.n	800b2f8 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800b260:	462b      	mov	r3, r5
 800b262:	2100      	movs	r1, #0
 800b264:	689a      	ldr	r2, [r3, #8]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800b26c:	4290      	cmp	r0, r2
 800b26e:	bf08      	it	eq
 800b270:	3101      	addeq	r1, #1
 800b272:	2b00      	cmp	r3, #0
 800b274:	d1f6      	bne.n	800b264 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800b276:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800b27a:	2b02      	cmp	r3, #2
 800b27c:	d029      	beq.n	800b2d2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b27e:	d820      	bhi.n	800b2c2 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800b280:	428c      	cmp	r4, r1
 800b282:	d828      	bhi.n	800b2d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800b284:	fab4 f284 	clz	r2, r4
 800b288:	0952      	lsrs	r2, r2, #5
 800b28a:	b324      	cbz	r4, 800b2d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800b28c:	b1dd      	cbz	r5, 800b2c6 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800b28e:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b292:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800b296:	e001      	b.n	800b29c <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800b298:	686d      	ldr	r5, [r5, #4]
 800b29a:	b1ad      	cbz	r5, 800b2c8 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800b29c:	68ab      	ldr	r3, [r5, #8]
 800b29e:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 800b2a2:	4288      	cmp	r0, r1
 800b2a4:	d1f8      	bne.n	800b298 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800b2a6:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 800b2aa:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800b2ae:	4561      	cmp	r1, ip
 800b2b0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800b2b4:	eb73 0e04 	sbcs.w	lr, r3, r4
 800b2b8:	daee      	bge.n	800b298 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800b2ba:	468c      	mov	ip, r1
 800b2bc:	461c      	mov	r4, r3
 800b2be:	462a      	mov	r2, r5
 800b2c0:	e7ea      	b.n	800b298 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800b2c2:	2b03      	cmp	r3, #3
 800b2c4:	d0dc      	beq.n	800b280 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	4610      	mov	r0, r2
 800b2ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2ce:	b002      	add	sp, #8
 800b2d0:	4770      	bx	lr
 800b2d2:	428c      	cmp	r4, r1
 800b2d4:	d905      	bls.n	800b2e2 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800b2d6:	4809      	ldr	r0, [pc, #36]	; (800b2fc <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800b2d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2dc:	b002      	add	sp, #8
 800b2de:	f006 b8f7 	b.w	80114d0 <get_memory>
 800b2e2:	fab4 f284 	clz	r2, r4
 800b2e6:	0952      	lsrs	r2, r2, #5
 800b2e8:	2c00      	cmp	r4, #0
 800b2ea:	d1ed      	bne.n	800b2c8 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800b2ec:	4803      	ldr	r0, [pc, #12]	; (800b2fc <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800b2ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2f2:	b002      	add	sp, #8
 800b2f4:	f006 b8ec 	b.w	80114d0 <get_memory>
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	e7bc      	b.n	800b276 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800b2fc:	20010da4 	.word	0x20010da4

0800b300 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800b300:	4b12      	ldr	r3, [pc, #72]	; (800b34c <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	b530      	push	{r4, r5, lr}
 800b306:	b1f3      	cbz	r3, 800b346 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800b308:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800b30c:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800b310:	2400      	movs	r4, #0
 800b312:	e001      	b.n	800b318 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	b1a3      	cbz	r3, 800b342 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800b318:	689a      	ldr	r2, [r3, #8]
 800b31a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800b31e:	4288      	cmp	r0, r1
 800b320:	d1f8      	bne.n	800b314 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800b322:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 800b326:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 800b32a:	4571      	cmp	r1, lr
 800b32c:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800b330:	eb72 050c 	sbcs.w	r5, r2, ip
 800b334:	daee      	bge.n	800b314 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800b336:	461c      	mov	r4, r3
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	468e      	mov	lr, r1
 800b33c:	4694      	mov	ip, r2
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d1ea      	bne.n	800b318 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b342:	4620      	mov	r0, r4
 800b344:	bd30      	pop	{r4, r5, pc}
 800b346:	461c      	mov	r4, r3
 800b348:	4620      	mov	r0, r4
 800b34a:	bd30      	pop	{r4, r5, pc}
 800b34c:	20010da4 	.word	0x20010da4

0800b350 <rmw_uxrce_clean_expired_static_input_buffer>:
 800b350:	4b3d      	ldr	r3, [pc, #244]	; (800b448 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b352:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b356:	681f      	ldr	r7, [r3, #0]
 800b358:	ed2d 8b06 	vpush	{d8-d10}
 800b35c:	b08d      	sub	sp, #52	; 0x34
 800b35e:	f006 fb47 	bl	80119f0 <rmw_uros_epoch_nanos>
 800b362:	2f00      	cmp	r7, #0
 800b364:	d05d      	beq.n	800b422 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b366:	46b8      	mov	r8, r7
 800b368:	4681      	mov	r9, r0
 800b36a:	468a      	mov	sl, r1
 800b36c:	ac04      	add	r4, sp, #16
 800b36e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b372:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800b376:	2b04      	cmp	r3, #4
 800b378:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 800b430 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800b37c:	ed9f ab2e 	vldr	d10, [pc, #184]	; 800b438 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800b380:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 800b440 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800b384:	d03f      	beq.n	800b406 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800b386:	2b05      	cmp	r3, #5
 800b388:	d044      	beq.n	800b414 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800b38a:	2b03      	cmp	r3, #3
 800b38c:	d03b      	beq.n	800b406 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800b38e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b392:	ed8d ab06 	vstr	d10, [sp, #24]
 800b396:	ab08      	add	r3, sp, #32
 800b398:	ed8d 8b08 	vstr	d8, [sp, #32]
 800b39c:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800b3a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b3a2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b3a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b3aa:	f005 fe9d 	bl	80110e8 <rmw_time_equal>
 800b3ae:	b118      	cbz	r0, 800b3b8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800b3b0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800b3b4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b3b8:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 800b3bc:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800b3c0:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800b3c4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800b3c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b3cc:	f005 fee2 	bl	8011194 <rmw_time_total_nsec>
 800b3d0:	1830      	adds	r0, r6, r0
 800b3d2:	eb47 0101 	adc.w	r1, r7, r1
 800b3d6:	4548      	cmp	r0, r9
 800b3d8:	eb71 030a 	sbcs.w	r3, r1, sl
 800b3dc:	db05      	blt.n	800b3ea <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800b3de:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800b3e2:	4591      	cmp	r9, r2
 800b3e4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800b3e8:	da03      	bge.n	800b3f2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800b3ea:	4641      	mov	r1, r8
 800b3ec:	4816      	ldr	r0, [pc, #88]	; (800b448 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b3ee:	f006 f87f 	bl	80114f0 <put_memory>
 800b3f2:	f1bb 0f00 	cmp.w	fp, #0
 800b3f6:	d014      	beq.n	800b422 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b3f8:	46d8      	mov	r8, fp
 800b3fa:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b3fe:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800b402:	2b04      	cmp	r3, #4
 800b404:	d1bf      	bne.n	800b386 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800b406:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800b40a:	3340      	adds	r3, #64	; 0x40
 800b40c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b40e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b412:	e7c0      	b.n	800b396 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b414:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800b418:	3348      	adds	r3, #72	; 0x48
 800b41a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b41c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b420:	e7b9      	b.n	800b396 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b422:	b00d      	add	sp, #52	; 0x34
 800b424:	ecbd 8b06 	vpop	{d8-d10}
 800b428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b42c:	f3af 8000 	nop.w
	...
 800b438:	00000001 	.word	0x00000001
 800b43c:	00000000 	.word	0x00000000
 800b440:	0000001e 	.word	0x0000001e
 800b444:	00000000 	.word	0x00000000
 800b448:	20010da4 	.word	0x20010da4

0800b44c <run_xrce_session>:
 800b44c:	b510      	push	{r4, lr}
 800b44e:	788c      	ldrb	r4, [r1, #2]
 800b450:	b086      	sub	sp, #24
 800b452:	2c01      	cmp	r4, #1
 800b454:	f8ad 200e 	strh.w	r2, [sp, #14]
 800b458:	d00c      	beq.n	800b474 <run_xrce_session+0x28>
 800b45a:	2401      	movs	r4, #1
 800b45c:	4619      	mov	r1, r3
 800b45e:	f10d 020e 	add.w	r2, sp, #14
 800b462:	f10d 0317 	add.w	r3, sp, #23
 800b466:	9400      	str	r4, [sp, #0]
 800b468:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b46c:	f001 f91c 	bl	800c6a8 <uxr_run_session_until_all_status>
 800b470:	b006      	add	sp, #24
 800b472:	bd10      	pop	{r4, pc}
 800b474:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b478:	f000 fd38 	bl	800beec <uxr_flash_output_streams>
 800b47c:	4620      	mov	r0, r4
 800b47e:	b006      	add	sp, #24
 800b480:	bd10      	pop	{r4, pc}
 800b482:	bf00      	nop

0800b484 <convert_qos_profile>:
 800b484:	7a4a      	ldrb	r2, [r1, #9]
 800b486:	f891 c008 	ldrb.w	ip, [r1, #8]
 800b48a:	2a02      	cmp	r2, #2
 800b48c:	bf18      	it	ne
 800b48e:	2200      	movne	r2, #0
 800b490:	7002      	strb	r2, [r0, #0]
 800b492:	f1ac 0202 	sub.w	r2, ip, #2
 800b496:	fab2 f282 	clz	r2, r2
 800b49a:	0952      	lsrs	r2, r2, #5
 800b49c:	7042      	strb	r2, [r0, #1]
 800b49e:	780a      	ldrb	r2, [r1, #0]
 800b4a0:	8889      	ldrh	r1, [r1, #4]
 800b4a2:	f1a2 0202 	sub.w	r2, r2, #2
 800b4a6:	8081      	strh	r1, [r0, #4]
 800b4a8:	fab2 f282 	clz	r2, r2
 800b4ac:	0952      	lsrs	r2, r2, #5
 800b4ae:	7082      	strb	r2, [r0, #2]
 800b4b0:	4770      	bx	lr
 800b4b2:	bf00      	nop

0800b4b4 <generate_service_topics>:
 800b4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4b6:	461d      	mov	r5, r3
 800b4b8:	b083      	sub	sp, #12
 800b4ba:	4606      	mov	r6, r0
 800b4bc:	4c11      	ldr	r4, [pc, #68]	; (800b504 <generate_service_topics+0x50>)
 800b4be:	4608      	mov	r0, r1
 800b4c0:	4b11      	ldr	r3, [pc, #68]	; (800b508 <generate_service_topics+0x54>)
 800b4c2:	4617      	mov	r7, r2
 800b4c4:	4629      	mov	r1, r5
 800b4c6:	4a11      	ldr	r2, [pc, #68]	; (800b50c <generate_service_topics+0x58>)
 800b4c8:	9401      	str	r4, [sp, #4]
 800b4ca:	9600      	str	r6, [sp, #0]
 800b4cc:	f008 f82a 	bl	8013524 <sniprintf>
 800b4d0:	4a0f      	ldr	r2, [pc, #60]	; (800b510 <generate_service_topics+0x5c>)
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	4b0f      	ldr	r3, [pc, #60]	; (800b514 <generate_service_topics+0x60>)
 800b4d6:	9201      	str	r2, [sp, #4]
 800b4d8:	4638      	mov	r0, r7
 800b4da:	4a0c      	ldr	r2, [pc, #48]	; (800b50c <generate_service_topics+0x58>)
 800b4dc:	4629      	mov	r1, r5
 800b4de:	9600      	str	r6, [sp, #0]
 800b4e0:	f008 f820 	bl	8013524 <sniprintf>
 800b4e4:	2c00      	cmp	r4, #0
 800b4e6:	bfa8      	it	ge
 800b4e8:	42a5      	cmpge	r5, r4
 800b4ea:	bfcc      	ite	gt
 800b4ec:	2401      	movgt	r4, #1
 800b4ee:	2400      	movle	r4, #0
 800b4f0:	dd05      	ble.n	800b4fe <generate_service_topics+0x4a>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	bfa8      	it	ge
 800b4f6:	4285      	cmpge	r5, r0
 800b4f8:	bfcc      	ite	gt
 800b4fa:	2401      	movgt	r4, #1
 800b4fc:	2400      	movle	r4, #0
 800b4fe:	4620      	mov	r0, r4
 800b500:	b003      	add	sp, #12
 800b502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b504:	080150e8 	.word	0x080150e8
 800b508:	080150e4 	.word	0x080150e4
 800b50c:	080150c8 	.word	0x080150c8
 800b510:	080150dc 	.word	0x080150dc
 800b514:	080150d8 	.word	0x080150d8

0800b518 <generate_service_types>:
 800b518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b51c:	4606      	mov	r6, r0
 800b51e:	b087      	sub	sp, #28
 800b520:	461c      	mov	r4, r3
 800b522:	6883      	ldr	r3, [r0, #8]
 800b524:	460d      	mov	r5, r1
 800b526:	4617      	mov	r7, r2
 800b528:	4798      	blx	r3
 800b52a:	68f3      	ldr	r3, [r6, #12]
 800b52c:	4606      	mov	r6, r0
 800b52e:	4798      	blx	r3
 800b530:	2300      	movs	r3, #0
 800b532:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800b536:	6872      	ldr	r2, [r6, #4]
 800b538:	702b      	strb	r3, [r5, #0]
 800b53a:	6813      	ldr	r3, [r2, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d03f      	beq.n	800b5c0 <generate_service_types+0xa8>
 800b540:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b5d4 <generate_service_types+0xbc>
 800b544:	4649      	mov	r1, r9
 800b546:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800b5dc <generate_service_types+0xc4>
 800b54a:	4628      	mov	r0, r5
 800b54c:	f8df a090 	ldr.w	sl, [pc, #144]	; 800b5e0 <generate_service_types+0xc8>
 800b550:	f8cd 8014 	str.w	r8, [sp, #20]
 800b554:	6852      	ldr	r2, [r2, #4]
 800b556:	9100      	str	r1, [sp, #0]
 800b558:	4621      	mov	r1, r4
 800b55a:	f8cd 8008 	str.w	r8, [sp, #8]
 800b55e:	f8cd a004 	str.w	sl, [sp, #4]
 800b562:	e9cd 9203 	strd	r9, r2, [sp, #12]
 800b566:	4a1a      	ldr	r2, [pc, #104]	; (800b5d0 <generate_service_types+0xb8>)
 800b568:	f007 ffdc 	bl	8013524 <sniprintf>
 800b56c:	2300      	movs	r3, #0
 800b56e:	42a0      	cmp	r0, r4
 800b570:	ea6f 0600 	mvn.w	r6, r0
 800b574:	703b      	strb	r3, [r7, #0]
 800b576:	f8db 3000 	ldr.w	r3, [fp]
 800b57a:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 800b57e:	bfac      	ite	ge
 800b580:	2500      	movge	r5, #0
 800b582:	2501      	movlt	r5, #1
 800b584:	b30b      	cbz	r3, 800b5ca <generate_service_types+0xb2>
 800b586:	4a13      	ldr	r2, [pc, #76]	; (800b5d4 <generate_service_types+0xbc>)
 800b588:	f8cd 8014 	str.w	r8, [sp, #20]
 800b58c:	402e      	ands	r6, r5
 800b58e:	f8db 1004 	ldr.w	r1, [fp, #4]
 800b592:	4638      	mov	r0, r7
 800b594:	9104      	str	r1, [sp, #16]
 800b596:	4621      	mov	r1, r4
 800b598:	e9cd 2a00 	strd	r2, sl, [sp]
 800b59c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b5a0:	4a0b      	ldr	r2, [pc, #44]	; (800b5d0 <generate_service_types+0xb8>)
 800b5a2:	f007 ffbf 	bl	8013524 <sniprintf>
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	bfb4      	ite	lt
 800b5aa:	2600      	movlt	r6, #0
 800b5ac:	f006 0601 	andge.w	r6, r6, #1
 800b5b0:	42a0      	cmp	r0, r4
 800b5b2:	bfac      	ite	ge
 800b5b4:	2000      	movge	r0, #0
 800b5b6:	f006 0001 	andlt.w	r0, r6, #1
 800b5ba:	b007      	add	sp, #28
 800b5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c0:	4b05      	ldr	r3, [pc, #20]	; (800b5d8 <generate_service_types+0xc0>)
 800b5c2:	f8df 9010 	ldr.w	r9, [pc, #16]	; 800b5d4 <generate_service_types+0xbc>
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	e7bd      	b.n	800b546 <generate_service_types+0x2e>
 800b5ca:	4b03      	ldr	r3, [pc, #12]	; (800b5d8 <generate_service_types+0xc0>)
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	e7db      	b.n	800b588 <generate_service_types+0x70>
 800b5d0:	080150c0 	.word	0x080150c0
 800b5d4:	080150bc 	.word	0x080150bc
 800b5d8:	08014eac 	.word	0x08014eac
 800b5dc:	080150d0 	.word	0x080150d0
 800b5e0:	080150d4 	.word	0x080150d4

0800b5e4 <is_uxrce_rmw_identifier_valid>:
 800b5e4:	b510      	push	{r4, lr}
 800b5e6:	4604      	mov	r4, r0
 800b5e8:	b140      	cbz	r0, 800b5fc <is_uxrce_rmw_identifier_valid+0x18>
 800b5ea:	f005 ffd9 	bl	80115a0 <rmw_get_implementation_identifier>
 800b5ee:	4601      	mov	r1, r0
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f7f4 fe25 	bl	8000240 <strcmp>
 800b5f6:	fab0 f080 	clz	r0, r0
 800b5fa:	0940      	lsrs	r0, r0, #5
 800b5fc:	bd10      	pop	{r4, pc}
 800b5fe:	bf00      	nop

0800b600 <get_message_typesupport_handle_function>:
 800b600:	b510      	push	{r4, lr}
 800b602:	4604      	mov	r4, r0
 800b604:	6800      	ldr	r0, [r0, #0]
 800b606:	f7f4 fe1b 	bl	8000240 <strcmp>
 800b60a:	2800      	cmp	r0, #0
 800b60c:	bf0c      	ite	eq
 800b60e:	4620      	moveq	r0, r4
 800b610:	2000      	movne	r0, #0
 800b612:	bd10      	pop	{r4, pc}

0800b614 <get_service_typesupport_handle>:
 800b614:	6883      	ldr	r3, [r0, #8]
 800b616:	4718      	bx	r3

0800b618 <get_service_typesupport_handle_function>:
 800b618:	b510      	push	{r4, lr}
 800b61a:	4604      	mov	r4, r0
 800b61c:	6800      	ldr	r0, [r0, #0]
 800b61e:	f7f4 fe0f 	bl	8000240 <strcmp>
 800b622:	2800      	cmp	r0, #0
 800b624:	bf0c      	ite	eq
 800b626:	4620      	moveq	r0, r4
 800b628:	2000      	movne	r0, #0
 800b62a:	bd10      	pop	{r4, pc}

0800b62c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800b62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b630:	6805      	ldr	r5, [r0, #0]
 800b632:	4604      	mov	r4, r0
 800b634:	460e      	mov	r6, r1
 800b636:	4628      	mov	r0, r5
 800b638:	f7f4 fe02 	bl	8000240 <strcmp>
 800b63c:	b1c8      	cbz	r0, 800b672 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800b63e:	4b11      	ldr	r3, [pc, #68]	; (800b684 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	429d      	cmp	r5, r3
 800b644:	d112      	bne.n	800b66c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800b646:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800b64a:	f8d8 4000 	ldr.w	r4, [r8]
 800b64e:	b16c      	cbz	r4, 800b66c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800b650:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b654:	2700      	movs	r7, #0
 800b656:	3d04      	subs	r5, #4
 800b658:	4631      	mov	r1, r6
 800b65a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800b65e:	f7f4 fdef 	bl	8000240 <strcmp>
 800b662:	00bb      	lsls	r3, r7, #2
 800b664:	b140      	cbz	r0, 800b678 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800b666:	3701      	adds	r7, #1
 800b668:	42bc      	cmp	r4, r7
 800b66a:	d1f5      	bne.n	800b658 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800b66c:	2000      	movs	r0, #0
 800b66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b672:	4620      	mov	r0, r4
 800b674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b678:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b67c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b680:	58d3      	ldr	r3, [r2, r3]
 800b682:	4718      	bx	r3
 800b684:	200001f4 	.word	0x200001f4

0800b688 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800b688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b68c:	6805      	ldr	r5, [r0, #0]
 800b68e:	4604      	mov	r4, r0
 800b690:	460e      	mov	r6, r1
 800b692:	4628      	mov	r0, r5
 800b694:	f7f4 fdd4 	bl	8000240 <strcmp>
 800b698:	b1c8      	cbz	r0, 800b6ce <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800b69a:	4b11      	ldr	r3, [pc, #68]	; (800b6e0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	429d      	cmp	r5, r3
 800b6a0:	d112      	bne.n	800b6c8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800b6a2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800b6a6:	f8d8 4000 	ldr.w	r4, [r8]
 800b6aa:	b16c      	cbz	r4, 800b6c8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800b6ac:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b6b0:	2700      	movs	r7, #0
 800b6b2:	3d04      	subs	r5, #4
 800b6b4:	4631      	mov	r1, r6
 800b6b6:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800b6ba:	f7f4 fdc1 	bl	8000240 <strcmp>
 800b6be:	00bb      	lsls	r3, r7, #2
 800b6c0:	b140      	cbz	r0, 800b6d4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800b6c2:	3701      	adds	r7, #1
 800b6c4:	42bc      	cmp	r4, r7
 800b6c6:	d1f5      	bne.n	800b6b4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800b6c8:	2000      	movs	r0, #0
 800b6ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6d4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b6d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6dc:	58d3      	ldr	r3, [r2, r3]
 800b6de:	4718      	bx	r3
 800b6e0:	200001f4 	.word	0x200001f4

0800b6e4 <custom_test_msgs__srv__AddThreeInts_Request__init>:
 800b6e4:	3800      	subs	r0, #0
 800b6e6:	bf18      	it	ne
 800b6e8:	2001      	movne	r0, #1
 800b6ea:	4770      	bx	lr

0800b6ec <custom_test_msgs__srv__AddThreeInts_Request__fini>:
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop

0800b6f0 <custom_test_msgs__srv__AddThreeInts_Response__init>:
 800b6f0:	3800      	subs	r0, #0
 800b6f2:	bf18      	it	ne
 800b6f4:	2001      	movne	r0, #1
 800b6f6:	4770      	bx	lr

0800b6f8 <custom_test_msgs__srv__AddThreeInts_Response__fini>:
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop

0800b6fc <uxr_buffer_delete_entity>:
 800b6fc:	b510      	push	{r4, lr}
 800b6fe:	2300      	movs	r3, #0
 800b700:	b08e      	sub	sp, #56	; 0x38
 800b702:	4604      	mov	r4, r0
 800b704:	9103      	str	r1, [sp, #12]
 800b706:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b70a:	2303      	movs	r3, #3
 800b70c:	2204      	movs	r2, #4
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	ab06      	add	r3, sp, #24
 800b712:	f001 f9f5 	bl	800cb00 <uxr_prepare_stream_to_write_submessage>
 800b716:	b918      	cbnz	r0, 800b720 <uxr_buffer_delete_entity+0x24>
 800b718:	4604      	mov	r4, r0
 800b71a:	4620      	mov	r0, r4
 800b71c:	b00e      	add	sp, #56	; 0x38
 800b71e:	bd10      	pop	{r4, pc}
 800b720:	9902      	ldr	r1, [sp, #8]
 800b722:	aa05      	add	r2, sp, #20
 800b724:	4620      	mov	r0, r4
 800b726:	f001 fb27 	bl	800cd78 <uxr_init_base_object_request>
 800b72a:	4604      	mov	r4, r0
 800b72c:	a905      	add	r1, sp, #20
 800b72e:	a806      	add	r0, sp, #24
 800b730:	f002 fe96 	bl	800e460 <uxr_serialize_DELETE_Payload>
 800b734:	4620      	mov	r0, r4
 800b736:	b00e      	add	sp, #56	; 0x38
 800b738:	bd10      	pop	{r4, pc}
 800b73a:	bf00      	nop

0800b73c <uxr_common_create_entity>:
 800b73c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800b740:	b510      	push	{r4, lr}
 800b742:	f1bc 0f01 	cmp.w	ip, #1
 800b746:	b08c      	sub	sp, #48	; 0x30
 800b748:	4604      	mov	r4, r0
 800b74a:	9202      	str	r2, [sp, #8]
 800b74c:	bf0c      	ite	eq
 800b74e:	f003 0201 	andeq.w	r2, r3, #1
 800b752:	2200      	movne	r2, #0
 800b754:	330e      	adds	r3, #14
 800b756:	9103      	str	r1, [sp, #12]
 800b758:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800b75c:	441a      	add	r2, r3
 800b75e:	ab04      	add	r3, sp, #16
 800b760:	9101      	str	r1, [sp, #4]
 800b762:	2101      	movs	r1, #1
 800b764:	b292      	uxth	r2, r2
 800b766:	9100      	str	r1, [sp, #0]
 800b768:	9903      	ldr	r1, [sp, #12]
 800b76a:	f001 f9c9 	bl	800cb00 <uxr_prepare_stream_to_write_submessage>
 800b76e:	b918      	cbnz	r0, 800b778 <uxr_common_create_entity+0x3c>
 800b770:	4604      	mov	r4, r0
 800b772:	4620      	mov	r0, r4
 800b774:	b00c      	add	sp, #48	; 0x30
 800b776:	bd10      	pop	{r4, pc}
 800b778:	9902      	ldr	r1, [sp, #8]
 800b77a:	4620      	mov	r0, r4
 800b77c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b77e:	f001 fafb 	bl	800cd78 <uxr_init_base_object_request>
 800b782:	4604      	mov	r4, r0
 800b784:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b786:	a804      	add	r0, sp, #16
 800b788:	f002 fdc4 	bl	800e314 <uxr_serialize_CREATE_Payload>
 800b78c:	4620      	mov	r0, r4
 800b78e:	b00c      	add	sp, #48	; 0x30
 800b790:	bd10      	pop	{r4, pc}
 800b792:	bf00      	nop

0800b794 <uxr_buffer_create_participant_bin>:
 800b794:	b570      	push	{r4, r5, r6, lr}
 800b796:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800b79a:	4605      	mov	r5, r0
 800b79c:	ac11      	add	r4, sp, #68	; 0x44
 800b79e:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800b7a2:	2303      	movs	r3, #3
 800b7a4:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800b7a8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b7ac:	7223      	strb	r3, [r4, #8]
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	f88d 3014 	strb.w	r3, [sp, #20]
 800b7b6:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 800b7b8:	7122      	strb	r2, [r4, #4]
 800b7ba:	b1cb      	cbz	r3, 800b7f0 <uxr_buffer_create_participant_bin+0x5c>
 800b7bc:	f88d 201c 	strb.w	r2, [sp, #28]
 800b7c0:	9308      	str	r3, [sp, #32]
 800b7c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7c6:	a915      	add	r1, sp, #84	; 0x54
 800b7c8:	a809      	add	r0, sp, #36	; 0x24
 800b7ca:	f7fc fdf3 	bl	80083b4 <ucdr_init_buffer>
 800b7ce:	a905      	add	r1, sp, #20
 800b7d0:	a809      	add	r0, sp, #36	; 0x24
 800b7d2:	f002 fb97 	bl	800df04 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800b7d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7d8:	9600      	str	r6, [sp, #0]
 800b7da:	4628      	mov	r0, r5
 800b7dc:	9401      	str	r4, [sp, #4]
 800b7de:	60e3      	str	r3, [r4, #12]
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b7e6:	f7ff ffa9 	bl	800b73c <uxr_common_create_entity>
 800b7ea:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800b7ee:	bd70      	pop	{r4, r5, r6, pc}
 800b7f0:	f88d 301c 	strb.w	r3, [sp, #28]
 800b7f4:	e7e5      	b.n	800b7c2 <uxr_buffer_create_participant_bin+0x2e>
 800b7f6:	bf00      	nop

0800b7f8 <uxr_buffer_create_replier_bin>:
 800b7f8:	b570      	push	{r4, r5, r6, lr}
 800b7fa:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800b7fe:	4605      	mov	r5, r0
 800b800:	4618      	mov	r0, r3
 800b802:	9105      	str	r1, [sp, #20]
 800b804:	a999      	add	r1, sp, #612	; 0x264
 800b806:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 800b80a:	ac15      	add	r4, sp, #84	; 0x54
 800b80c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b810:	2308      	movs	r3, #8
 800b812:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 800b816:	f000 f909 	bl	800ba2c <uxr_object_id_to_raw>
 800b81a:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 800b81c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b820:	a919      	add	r1, sp, #100	; 0x64
 800b822:	a80d      	add	r0, sp, #52	; 0x34
 800b824:	9306      	str	r3, [sp, #24]
 800b826:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 800b828:	9307      	str	r3, [sp, #28]
 800b82a:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 800b82c:	9308      	str	r3, [sp, #32]
 800b82e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b830:	930c      	str	r3, [sp, #48]	; 0x30
 800b832:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b834:	930a      	str	r3, [sp, #40]	; 0x28
 800b836:	2301      	movs	r3, #1
 800b838:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800b83c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b840:	2303      	movs	r3, #3
 800b842:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 800b846:	f7fc fdb5 	bl	80083b4 <ucdr_init_buffer>
 800b84a:	a906      	add	r1, sp, #24
 800b84c:	a80d      	add	r0, sp, #52	; 0x34
 800b84e:	f002 fb7b 	bl	800df48 <uxr_serialize_OBJK_Replier_Binary>
 800b852:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b854:	4628      	mov	r0, r5
 800b856:	9600      	str	r6, [sp, #0]
 800b858:	9318      	str	r3, [sp, #96]	; 0x60
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	9401      	str	r4, [sp, #4]
 800b85e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b862:	f7ff ff6b 	bl	800b73c <uxr_common_create_entity>
 800b866:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 800b86a:	bd70      	pop	{r4, r5, r6, pc}

0800b86c <get_custom_error>:
 800b86c:	4b01      	ldr	r3, [pc, #4]	; (800b874 <get_custom_error+0x8>)
 800b86e:	7818      	ldrb	r0, [r3, #0]
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	20010de4 	.word	0x20010de4

0800b878 <recv_custom_msg>:
 800b878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b87c:	4693      	mov	fp, r2
 800b87e:	b089      	sub	sp, #36	; 0x24
 800b880:	2200      	movs	r2, #0
 800b882:	4604      	mov	r4, r0
 800b884:	468a      	mov	sl, r1
 800b886:	9305      	str	r3, [sp, #20]
 800b888:	f88d 201e 	strb.w	r2, [sp, #30]
 800b88c:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 800b890:	b322      	cbz	r2, 800b8dc <recv_custom_msg+0x64>
 800b892:	f200 2902 	addw	r9, r0, #514	; 0x202
 800b896:	f10d 081f 	add.w	r8, sp, #31
 800b89a:	af05      	add	r7, sp, #20
 800b89c:	f10d 061e 	add.w	r6, sp, #30
 800b8a0:	f44f 7500 	mov.w	r5, #512	; 0x200
 800b8a4:	e002      	b.n	800b8ac <recv_custom_msg+0x34>
 800b8a6:	9b05      	ldr	r3, [sp, #20]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	dd0f      	ble.n	800b8cc <recv_custom_msg+0x54>
 800b8ac:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 800b8b0:	4623      	mov	r3, r4
 800b8b2:	4622      	mov	r2, r4
 800b8b4:	4648      	mov	r0, r9
 800b8b6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800b8ba:	e9cd 5600 	strd	r5, r6, [sp]
 800b8be:	f001 fc71 	bl	800d1a4 <uxr_read_framed_msg>
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	d0ef      	beq.n	800b8a6 <recv_custom_msg+0x2e>
 800b8c6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800b8ca:	b1b3      	cbz	r3, 800b8fa <recv_custom_msg+0x82>
 800b8cc:	4b0f      	ldr	r3, [pc, #60]	; (800b90c <recv_custom_msg+0x94>)
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800b8d4:	701a      	strb	r2, [r3, #0]
 800b8d6:	b009      	add	sp, #36	; 0x24
 800b8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8dc:	f10d 021f 	add.w	r2, sp, #31
 800b8e0:	4601      	mov	r1, r0
 800b8e2:	9200      	str	r2, [sp, #0]
 800b8e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8e8:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 800b8ec:	47a8      	blx	r5
 800b8ee:	2800      	cmp	r0, #0
 800b8f0:	d0ec      	beq.n	800b8cc <recv_custom_msg+0x54>
 800b8f2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d1e8      	bne.n	800b8cc <recv_custom_msg+0x54>
 800b8fa:	f8cb 0000 	str.w	r0, [fp]
 800b8fe:	2001      	movs	r0, #1
 800b900:	f8ca 4000 	str.w	r4, [sl]
 800b904:	b009      	add	sp, #36	; 0x24
 800b906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b90a:	bf00      	nop
 800b90c:	20010de4 	.word	0x20010de4

0800b910 <send_custom_msg>:
 800b910:	b530      	push	{r4, r5, lr}
 800b912:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 800b916:	b087      	sub	sp, #28
 800b918:	4614      	mov	r4, r2
 800b91a:	b995      	cbnz	r5, 800b942 <send_custom_msg+0x32>
 800b91c:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 800b920:	f10d 0317 	add.w	r3, sp, #23
 800b924:	47a8      	blx	r5
 800b926:	1e03      	subs	r3, r0, #0
 800b928:	bf18      	it	ne
 800b92a:	2301      	movne	r3, #1
 800b92c:	42a0      	cmp	r0, r4
 800b92e:	bf18      	it	ne
 800b930:	2300      	movne	r3, #0
 800b932:	b91b      	cbnz	r3, 800b93c <send_custom_msg+0x2c>
 800b934:	4a0a      	ldr	r2, [pc, #40]	; (800b960 <send_custom_msg+0x50>)
 800b936:	f89d 1017 	ldrb.w	r1, [sp, #23]
 800b93a:	7011      	strb	r1, [r2, #0]
 800b93c:	4618      	mov	r0, r3
 800b93e:	b007      	add	sp, #28
 800b940:	bd30      	pop	{r4, r5, pc}
 800b942:	460b      	mov	r3, r1
 800b944:	2200      	movs	r2, #0
 800b946:	f10d 0117 	add.w	r1, sp, #23
 800b94a:	9400      	str	r4, [sp, #0]
 800b94c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b950:	4602      	mov	r2, r0
 800b952:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 800b956:	f200 2002 	addw	r0, r0, #514	; 0x202
 800b95a:	f001 fa45 	bl	800cde8 <uxr_write_framed_msg>
 800b95e:	e7e2      	b.n	800b926 <send_custom_msg+0x16>
 800b960:	20010de4 	.word	0x20010de4

0800b964 <uxr_set_custom_transport_callbacks>:
 800b964:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 800b968:	9901      	ldr	r1, [sp, #4]
 800b96a:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 800b96e:	9b00      	ldr	r3, [sp, #0]
 800b970:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop

0800b978 <uxr_init_custom_transport>:
 800b978:	b538      	push	{r3, r4, r5, lr}
 800b97a:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 800b97e:	b303      	cbz	r3, 800b9c2 <uxr_init_custom_transport+0x4a>
 800b980:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800b984:	4604      	mov	r4, r0
 800b986:	b1e2      	cbz	r2, 800b9c2 <uxr_init_custom_transport+0x4a>
 800b988:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800b98c:	b1ca      	cbz	r2, 800b9c2 <uxr_init_custom_transport+0x4a>
 800b98e:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 800b992:	b1b2      	cbz	r2, 800b9c2 <uxr_init_custom_transport+0x4a>
 800b994:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 800b998:	4798      	blx	r3
 800b99a:	4605      	mov	r5, r0
 800b99c:	b188      	cbz	r0, 800b9c2 <uxr_init_custom_transport+0x4a>
 800b99e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800b9a2:	b98b      	cbnz	r3, 800b9c8 <uxr_init_custom_transport+0x50>
 800b9a4:	4b0b      	ldr	r3, [pc, #44]	; (800b9d4 <uxr_init_custom_transport+0x5c>)
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	490b      	ldr	r1, [pc, #44]	; (800b9d8 <uxr_init_custom_transport+0x60>)
 800b9aa:	4a0c      	ldr	r2, [pc, #48]	; (800b9dc <uxr_init_custom_transport+0x64>)
 800b9ac:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 800b9b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9b4:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 800b9b8:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 800b9bc:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 800b9c0:	bd38      	pop	{r3, r4, r5, pc}
 800b9c2:	2500      	movs	r5, #0
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	bd38      	pop	{r3, r4, r5, pc}
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	f204 2002 	addw	r0, r4, #514	; 0x202
 800b9ce:	f001 fa05 	bl	800cddc <uxr_init_framing_io>
 800b9d2:	e7e7      	b.n	800b9a4 <uxr_init_custom_transport+0x2c>
 800b9d4:	0800b879 	.word	0x0800b879
 800b9d8:	0800b911 	.word	0x0800b911
 800b9dc:	0800b86d 	.word	0x0800b86d

0800b9e0 <uxr_close_custom_transport>:
 800b9e0:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800b9e4:	4718      	bx	r3
 800b9e6:	bf00      	nop

0800b9e8 <uxr_object_id>:
 800b9e8:	b082      	sub	sp, #8
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	f88d 1006 	strb.w	r1, [sp, #6]
 800b9f0:	f360 030f 	bfi	r3, r0, #0, #16
 800b9f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b9f8:	f362 431f 	bfi	r3, r2, #16, #16
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	b002      	add	sp, #8
 800ba00:	4770      	bx	lr
 800ba02:	bf00      	nop

0800ba04 <uxr_object_id_from_raw>:
 800ba04:	7843      	ldrb	r3, [r0, #1]
 800ba06:	b082      	sub	sp, #8
 800ba08:	7801      	ldrb	r1, [r0, #0]
 800ba0a:	2000      	movs	r0, #0
 800ba0c:	091a      	lsrs	r2, r3, #4
 800ba0e:	f003 030f 	and.w	r3, r3, #15
 800ba12:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800ba16:	f88d 3006 	strb.w	r3, [sp, #6]
 800ba1a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ba1e:	f362 000f 	bfi	r0, r2, #0, #16
 800ba22:	f363 401f 	bfi	r0, r3, #16, #16
 800ba26:	b002      	add	sp, #8
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop

0800ba2c <uxr_object_id_to_raw>:
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800ba32:	b082      	sub	sp, #8
 800ba34:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800ba38:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800ba3c:	f881 c000 	strb.w	ip, [r1]
 800ba40:	7048      	strb	r0, [r1, #1]
 800ba42:	b002      	add	sp, #8
 800ba44:	4770      	bx	lr
 800ba46:	bf00      	nop

0800ba48 <uxr_buffer_request_data>:
 800ba48:	b530      	push	{r4, r5, lr}
 800ba4a:	b095      	sub	sp, #84	; 0x54
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800ba50:	9303      	str	r3, [sp, #12]
 800ba52:	2d00      	cmp	r5, #0
 800ba54:	f88d 301c 	strb.w	r3, [sp, #28]
 800ba58:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800ba5c:	f04f 0200 	mov.w	r2, #0
 800ba60:	bf14      	ite	ne
 800ba62:	2101      	movne	r1, #1
 800ba64:	4611      	moveq	r1, r2
 800ba66:	f88d 201d 	strb.w	r2, [sp, #29]
 800ba6a:	f88d 201e 	strb.w	r2, [sp, #30]
 800ba6e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800ba72:	d021      	beq.n	800bab8 <uxr_buffer_request_data+0x70>
 800ba74:	686b      	ldr	r3, [r5, #4]
 800ba76:	2210      	movs	r2, #16
 800ba78:	6829      	ldr	r1, [r5, #0]
 800ba7a:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 800ba7e:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 800ba82:	2308      	movs	r3, #8
 800ba84:	2100      	movs	r1, #0
 800ba86:	4620      	mov	r0, r4
 800ba88:	e9cd 3100 	strd	r3, r1, [sp]
 800ba8c:	ab0c      	add	r3, sp, #48	; 0x30
 800ba8e:	9905      	ldr	r1, [sp, #20]
 800ba90:	f001 f836 	bl	800cb00 <uxr_prepare_stream_to_write_submessage>
 800ba94:	b918      	cbnz	r0, 800ba9e <uxr_buffer_request_data+0x56>
 800ba96:	4604      	mov	r4, r0
 800ba98:	4620      	mov	r0, r4
 800ba9a:	b015      	add	sp, #84	; 0x54
 800ba9c:	bd30      	pop	{r4, r5, pc}
 800ba9e:	9904      	ldr	r1, [sp, #16]
 800baa0:	aa06      	add	r2, sp, #24
 800baa2:	4620      	mov	r0, r4
 800baa4:	f001 f968 	bl	800cd78 <uxr_init_base_object_request>
 800baa8:	4604      	mov	r4, r0
 800baaa:	a906      	add	r1, sp, #24
 800baac:	a80c      	add	r0, sp, #48	; 0x30
 800baae:	f002 fd81 	bl	800e5b4 <uxr_serialize_READ_DATA_Payload>
 800bab2:	4620      	mov	r0, r4
 800bab4:	b015      	add	sp, #84	; 0x54
 800bab6:	bd30      	pop	{r4, r5, pc}
 800bab8:	2208      	movs	r2, #8
 800baba:	e7e2      	b.n	800ba82 <uxr_buffer_request_data+0x3a>

0800babc <uxr_buffer_cancel_data>:
 800babc:	b510      	push	{r4, lr}
 800babe:	2300      	movs	r3, #0
 800bac0:	b094      	sub	sp, #80	; 0x50
 800bac2:	4604      	mov	r4, r0
 800bac4:	9205      	str	r2, [sp, #20]
 800bac6:	9301      	str	r3, [sp, #4]
 800bac8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800bacc:	f88d 301e 	strb.w	r3, [sp, #30]
 800bad0:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 800bad4:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 800bad8:	2308      	movs	r3, #8
 800bada:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800bade:	2201      	movs	r2, #1
 800bae0:	9300      	str	r3, [sp, #0]
 800bae2:	ab0c      	add	r3, sp, #48	; 0x30
 800bae4:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 800bae8:	2210      	movs	r2, #16
 800baea:	f001 f809 	bl	800cb00 <uxr_prepare_stream_to_write_submessage>
 800baee:	b918      	cbnz	r0, 800baf8 <uxr_buffer_cancel_data+0x3c>
 800baf0:	4604      	mov	r4, r0
 800baf2:	4620      	mov	r0, r4
 800baf4:	b014      	add	sp, #80	; 0x50
 800baf6:	bd10      	pop	{r4, pc}
 800baf8:	9905      	ldr	r1, [sp, #20]
 800bafa:	aa06      	add	r2, sp, #24
 800bafc:	4620      	mov	r0, r4
 800bafe:	f001 f93b 	bl	800cd78 <uxr_init_base_object_request>
 800bb02:	4604      	mov	r4, r0
 800bb04:	a906      	add	r1, sp, #24
 800bb06:	a80c      	add	r0, sp, #48	; 0x30
 800bb08:	f002 fd54 	bl	800e5b4 <uxr_serialize_READ_DATA_Payload>
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	b014      	add	sp, #80	; 0x50
 800bb10:	bd10      	pop	{r4, pc}
 800bb12:	bf00      	nop

0800bb14 <read_submessage_format>:
 800bb14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb18:	b095      	sub	sp, #84	; 0x54
 800bb1a:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 800bb1e:	b113      	cbz	r3, 800bb26 <read_submessage_format+0x12>
 800bb20:	b015      	add	sp, #84	; 0x54
 800bb22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb26:	4606      	mov	r6, r0
 800bb28:	981c      	ldr	r0, [sp, #112]	; 0x70
 800bb2a:	460c      	mov	r4, r1
 800bb2c:	4615      	mov	r5, r2
 800bb2e:	9004      	str	r0, [sp, #16]
 800bb30:	4699      	mov	r9, r3
 800bb32:	981d      	ldr	r0, [sp, #116]	; 0x74
 800bb34:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 800bb38:	9005      	str	r0, [sp, #20]
 800bb3a:	a80c      	add	r0, sp, #48	; 0x30
 800bb3c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800bb40:	1a52      	subs	r2, r2, r1
 800bb42:	f7fc fc37 	bl	80083b4 <ucdr_init_buffer>
 800bb46:	a80c      	add	r0, sp, #48	; 0x30
 800bb48:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800bb4c:	f7fc fc06 	bl	800835c <ucdr_set_on_full_buffer_callback>
 800bb50:	69e2      	ldr	r2, [r4, #28]
 800bb52:	b19a      	cbz	r2, 800bb7c <read_submessage_format+0x68>
 800bb54:	f1b8 0f07 	cmp.w	r8, #7
 800bb58:	f882 9014 	strb.w	r9, [r2, #20]
 800bb5c:	d040      	beq.n	800bbe0 <read_submessage_format+0xcc>
 800bb5e:	f1b8 0f08 	cmp.w	r8, #8
 800bb62:	d02e      	beq.n	800bbc2 <read_submessage_format+0xae>
 800bb64:	f1b8 0f06 	cmp.w	r8, #6
 800bb68:	d011      	beq.n	800bb8e <read_submessage_format+0x7a>
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	7513      	strb	r3, [r2, #20]
 800bb6e:	4629      	mov	r1, r5
 800bb70:	4620      	mov	r0, r4
 800bb72:	f7fc fc73 	bl	800845c <ucdr_advance_buffer>
 800bb76:	b015      	add	sp, #84	; 0x54
 800bb78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb7c:	f1b8 0f07 	cmp.w	r8, #7
 800bb80:	d02e      	beq.n	800bbe0 <read_submessage_format+0xcc>
 800bb82:	f1b8 0f08 	cmp.w	r8, #8
 800bb86:	d01c      	beq.n	800bbc2 <read_submessage_format+0xae>
 800bb88:	f1b8 0f06 	cmp.w	r8, #6
 800bb8c:	d1ef      	bne.n	800bb6e <read_submessage_format+0x5a>
 800bb8e:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 800bb92:	f1b8 0f00 	cmp.w	r8, #0
 800bb96:	d011      	beq.n	800bbbc <read_submessage_format+0xa8>
 800bb98:	ab0c      	add	r3, sp, #48	; 0x30
 800bb9a:	9501      	str	r5, [sp, #4]
 800bb9c:	463a      	mov	r2, r7
 800bb9e:	4630      	mov	r0, r6
 800bba0:	9300      	str	r3, [sp, #0]
 800bba2:	2306      	movs	r3, #6
 800bba4:	f88d 3016 	strb.w	r3, [sp, #22]
 800bba8:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 800bbac:	9302      	str	r3, [sp, #8]
 800bbae:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800bbb2:	47c0      	blx	r8
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	69e2      	ldr	r2, [r4, #28]
 800bbb8:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 800bbbc:	2a00      	cmp	r2, #0
 800bbbe:	d1d4      	bne.n	800bb6a <read_submessage_format+0x56>
 800bbc0:	e7d5      	b.n	800bb6e <read_submessage_format+0x5a>
 800bbc2:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d0f8      	beq.n	800bbbc <read_submessage_format+0xa8>
 800bbca:	a80c      	add	r0, sp, #48	; 0x30
 800bbcc:	a906      	add	r1, sp, #24
 800bbce:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800bbd2:	f002 fdbb 	bl	800e74c <uxr_deserialize_SampleIdentity>
 800bbd6:	b9a0      	cbnz	r0, 800bc02 <read_submessage_format+0xee>
 800bbd8:	69e2      	ldr	r2, [r4, #28]
 800bbda:	2a00      	cmp	r2, #0
 800bbdc:	d1c5      	bne.n	800bb6a <read_submessage_format+0x56>
 800bbde:	e7c6      	b.n	800bb6e <read_submessage_format+0x5a>
 800bbe0:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 800bbe4:	b13b      	cbz	r3, 800bbf6 <read_submessage_format+0xe2>
 800bbe6:	a906      	add	r1, sp, #24
 800bbe8:	a80c      	add	r0, sp, #48	; 0x30
 800bbea:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800bbee:	f002 fa81 	bl	800e0f4 <uxr_deserialize_BaseObjectRequest>
 800bbf2:	bb60      	cbnz	r0, 800bc4e <read_submessage_format+0x13a>
 800bbf4:	69e2      	ldr	r2, [r4, #28]
 800bbf6:	68a3      	ldr	r3, [r4, #8]
 800bbf8:	442b      	add	r3, r5
 800bbfa:	60a3      	str	r3, [r4, #8]
 800bbfc:	2a00      	cmp	r2, #0
 800bbfe:	d1b4      	bne.n	800bb6a <read_submessage_format+0x56>
 800bc00:	e7b5      	b.n	800bb6e <read_submessage_format+0x5a>
 800bc02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc04:	a80c      	add	r0, sp, #48	; 0x30
 800bc06:	eba8 0803 	sub.w	r8, r8, r3
 800bc0a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800bc0e:	44a8      	add	r8, r5
 800bc10:	1a52      	subs	r2, r2, r1
 800bc12:	f7fc fbcf 	bl	80083b4 <ucdr_init_buffer>
 800bc16:	a80c      	add	r0, sp, #48	; 0x30
 800bc18:	fa1f f888 	uxth.w	r8, r8
 800bc1c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800bc20:	f7fc fb9c 	bl	800835c <ucdr_set_on_full_buffer_callback>
 800bc24:	ab0c      	add	r3, sp, #48	; 0x30
 800bc26:	2108      	movs	r1, #8
 800bc28:	f8cd 8004 	str.w	r8, [sp, #4]
 800bc2c:	9300      	str	r3, [sp, #0]
 800bc2e:	463a      	mov	r2, r7
 800bc30:	f88d 1016 	strb.w	r1, [sp, #22]
 800bc34:	ab06      	add	r3, sp, #24
 800bc36:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	9102      	str	r1, [sp, #8]
 800bc3e:	9905      	ldr	r1, [sp, #20]
 800bc40:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 800bc44:	47b8      	blx	r7
 800bc46:	2301      	movs	r3, #1
 800bc48:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 800bc4c:	e7c4      	b.n	800bbd8 <read_submessage_format+0xc4>
 800bc4e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800bc52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc54:	a80c      	add	r0, sp, #48	; 0x30
 800bc56:	1a52      	subs	r2, r2, r1
 800bc58:	eba8 0803 	sub.w	r8, r8, r3
 800bc5c:	f7fc fbaa 	bl	80083b4 <ucdr_init_buffer>
 800bc60:	a80c      	add	r0, sp, #48	; 0x30
 800bc62:	44a8      	add	r8, r5
 800bc64:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800bc68:	f7fc fb78 	bl	800835c <ucdr_set_on_full_buffer_callback>
 800bc6c:	ab0c      	add	r3, sp, #48	; 0x30
 800bc6e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800bc72:	fa1f f888 	uxth.w	r8, r8
 800bc76:	9300      	str	r3, [sp, #0]
 800bc78:	463a      	mov	r2, r7
 800bc7a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800bc7e:	4630      	mov	r0, r6
 800bc80:	f8cd 8004 	str.w	r8, [sp, #4]
 800bc84:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800bc88:	2107      	movs	r1, #7
 800bc8a:	f88d 1016 	strb.w	r1, [sp, #22]
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 800bc94:	9102      	str	r1, [sp, #8]
 800bc96:	9905      	ldr	r1, [sp, #20]
 800bc98:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 800bc9c:	47b8      	blx	r7
 800bc9e:	2301      	movs	r3, #1
 800bca0:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 800bca4:	e7a6      	b.n	800bbf4 <read_submessage_format+0xe0>
 800bca6:	bf00      	nop

0800bca8 <on_get_fragmentation_info>:
 800bca8:	b500      	push	{lr}
 800bcaa:	b08b      	sub	sp, #44	; 0x2c
 800bcac:	4601      	mov	r1, r0
 800bcae:	2204      	movs	r2, #4
 800bcb0:	a802      	add	r0, sp, #8
 800bcb2:	f7fc fb7f 	bl	80083b4 <ucdr_init_buffer>
 800bcb6:	f10d 0305 	add.w	r3, sp, #5
 800bcba:	f10d 0206 	add.w	r2, sp, #6
 800bcbe:	a901      	add	r1, sp, #4
 800bcc0:	a802      	add	r0, sp, #8
 800bcc2:	f001 fe5f 	bl	800d984 <uxr_read_submessage_header>
 800bcc6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bcca:	2b0d      	cmp	r3, #13
 800bccc:	d003      	beq.n	800bcd6 <on_get_fragmentation_info+0x2e>
 800bcce:	2000      	movs	r0, #0
 800bcd0:	b00b      	add	sp, #44	; 0x2c
 800bcd2:	f85d fb04 	ldr.w	pc, [sp], #4
 800bcd6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bcda:	f013 0f02 	tst.w	r3, #2
 800bcde:	bf14      	ite	ne
 800bce0:	2002      	movne	r0, #2
 800bce2:	2001      	moveq	r0, #1
 800bce4:	b00b      	add	sp, #44	; 0x2c
 800bce6:	f85d fb04 	ldr.w	pc, [sp], #4
 800bcea:	bf00      	nop

0800bcec <read_submessage_get_info>:
 800bcec:	b570      	push	{r4, r5, r6, lr}
 800bcee:	2500      	movs	r5, #0
 800bcf0:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800bcf4:	460e      	mov	r6, r1
 800bcf6:	4604      	mov	r4, r0
 800bcf8:	f44f 7224 	mov.w	r2, #656	; 0x290
 800bcfc:	4629      	mov	r1, r5
 800bcfe:	a810      	add	r0, sp, #64	; 0x40
 800bd00:	9503      	str	r5, [sp, #12]
 800bd02:	9504      	str	r5, [sp, #16]
 800bd04:	f007 fd7e 	bl	8013804 <memset>
 800bd08:	a903      	add	r1, sp, #12
 800bd0a:	4630      	mov	r0, r6
 800bd0c:	f002 fb92 	bl	800e434 <uxr_deserialize_GET_INFO_Payload>
 800bd10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800bd14:	4620      	mov	r0, r4
 800bd16:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800bd1a:	f001 f825 	bl	800cd68 <uxr_session_header_offset>
 800bd1e:	462b      	mov	r3, r5
 800bd20:	220c      	movs	r2, #12
 800bd22:	a905      	add	r1, sp, #20
 800bd24:	9000      	str	r0, [sp, #0]
 800bd26:	a808      	add	r0, sp, #32
 800bd28:	f7fc fb32 	bl	8008390 <ucdr_init_buffer_origin_offset>
 800bd2c:	a910      	add	r1, sp, #64	; 0x40
 800bd2e:	a808      	add	r0, sp, #32
 800bd30:	f002 fbf4 	bl	800e51c <uxr_serialize_INFO_Payload>
 800bd34:	9b08      	ldr	r3, [sp, #32]
 800bd36:	462a      	mov	r2, r5
 800bd38:	4629      	mov	r1, r5
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	f000 ffc0 	bl	800ccc0 <uxr_stamp_session_header>
 800bd40:	a808      	add	r0, sp, #32
 800bd42:	f7fc fb65 	bl	8008410 <ucdr_buffer_length>
 800bd46:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bd48:	4602      	mov	r2, r0
 800bd4a:	a905      	add	r1, sp, #20
 800bd4c:	e9d3 0400 	ldrd	r0, r4, [r3]
 800bd50:	47a0      	blx	r4
 800bd52:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800bd56:	bd70      	pop	{r4, r5, r6, pc}

0800bd58 <write_submessage_acknack.isra.0>:
 800bd58:	b570      	push	{r4, r5, r6, lr}
 800bd5a:	b092      	sub	sp, #72	; 0x48
 800bd5c:	4605      	mov	r5, r0
 800bd5e:	460e      	mov	r6, r1
 800bd60:	4614      	mov	r4, r2
 800bd62:	f001 f801 	bl	800cd68 <uxr_session_header_offset>
 800bd66:	a905      	add	r1, sp, #20
 800bd68:	9000      	str	r0, [sp, #0]
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	a80a      	add	r0, sp, #40	; 0x28
 800bd6e:	2211      	movs	r2, #17
 800bd70:	f7fc fb0e 	bl	8008390 <ucdr_init_buffer_origin_offset>
 800bd74:	2218      	movs	r2, #24
 800bd76:	2300      	movs	r3, #0
 800bd78:	210a      	movs	r1, #10
 800bd7a:	fb02 5404 	mla	r4, r2, r4, r5
 800bd7e:	a80a      	add	r0, sp, #40	; 0x28
 800bd80:	2205      	movs	r2, #5
 800bd82:	3450      	adds	r4, #80	; 0x50
 800bd84:	f001 fde4 	bl	800d950 <uxr_buffer_submessage_header>
 800bd88:	a903      	add	r1, sp, #12
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f006 f97a 	bl	8012084 <uxr_compute_acknack>
 800bd90:	ba40      	rev16	r0, r0
 800bd92:	a903      	add	r1, sp, #12
 800bd94:	f88d 6010 	strb.w	r6, [sp, #16]
 800bd98:	f8ad 000e 	strh.w	r0, [sp, #14]
 800bd9c:	a80a      	add	r0, sp, #40	; 0x28
 800bd9e:	f002 fc2f 	bl	800e600 <uxr_serialize_ACKNACK_Payload>
 800bda2:	2200      	movs	r2, #0
 800bda4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bda6:	4628      	mov	r0, r5
 800bda8:	4611      	mov	r1, r2
 800bdaa:	f000 ff89 	bl	800ccc0 <uxr_stamp_session_header>
 800bdae:	a80a      	add	r0, sp, #40	; 0x28
 800bdb0:	f7fc fb2e 	bl	8008410 <ucdr_buffer_length>
 800bdb4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	a905      	add	r1, sp, #20
 800bdba:	e9d3 0400 	ldrd	r0, r4, [r3]
 800bdbe:	47a0      	blx	r4
 800bdc0:	b012      	add	sp, #72	; 0x48
 800bdc2:	bd70      	pop	{r4, r5, r6, pc}
 800bdc4:	0000      	movs	r0, r0
	...

0800bdc8 <uxr_init_session>:
 800bdc8:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800be00 <uxr_init_session+0x38>
 800bdcc:	2300      	movs	r3, #0
 800bdce:	b510      	push	{r4, lr}
 800bdd0:	4604      	mov	r4, r0
 800bdd2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800bdd6:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800bdda:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800bdde:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800bde2:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800bde6:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800bdea:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800bdee:	2181      	movs	r1, #129	; 0x81
 800bdf0:	f000 feca 	bl	800cb88 <uxr_init_session_info>
 800bdf4:	f104 0008 	add.w	r0, r4, #8
 800bdf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdfc:	f001 bcc4 	b.w	800d788 <uxr_init_stream_storage>
	...

0800be08 <uxr_set_status_callback>:
 800be08:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800be0c:	4770      	bx	lr
 800be0e:	bf00      	nop

0800be10 <uxr_set_topic_callback>:
 800be10:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800be14:	4770      	bx	lr
 800be16:	bf00      	nop

0800be18 <uxr_set_request_callback>:
 800be18:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop

0800be20 <uxr_set_reply_callback>:
 800be20:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop

0800be28 <uxr_create_output_best_effort_stream>:
 800be28:	b510      	push	{r4, lr}
 800be2a:	4604      	mov	r4, r0
 800be2c:	b084      	sub	sp, #16
 800be2e:	e9cd 2100 	strd	r2, r1, [sp]
 800be32:	f000 ff99 	bl	800cd68 <uxr_session_header_offset>
 800be36:	4603      	mov	r3, r0
 800be38:	f104 0008 	add.w	r0, r4, #8
 800be3c:	e9dd 2100 	ldrd	r2, r1, [sp]
 800be40:	b004      	add	sp, #16
 800be42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be46:	f001 bce5 	b.w	800d814 <uxr_add_output_best_effort_buffer>
 800be4a:	bf00      	nop

0800be4c <uxr_create_output_reliable_stream>:
 800be4c:	b530      	push	{r4, r5, lr}
 800be4e:	b089      	sub	sp, #36	; 0x24
 800be50:	4604      	mov	r4, r0
 800be52:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800be56:	9303      	str	r3, [sp, #12]
 800be58:	f000 ff86 	bl	800cd68 <uxr_session_header_offset>
 800be5c:	4605      	mov	r5, r0
 800be5e:	9905      	ldr	r1, [sp, #20]
 800be60:	f104 0008 	add.w	r0, r4, #8
 800be64:	9500      	str	r5, [sp, #0]
 800be66:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800be6a:	f001 fce7 	bl	800d83c <uxr_add_output_reliable_buffer>
 800be6e:	2200      	movs	r2, #0
 800be70:	fa5f fc80 	uxtb.w	ip, r0
 800be74:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800be78:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800be7c:	0e03      	lsrs	r3, r0, #24
 800be7e:	f36c 0207 	bfi	r2, ip, #0, #8
 800be82:	f364 220f 	bfi	r2, r4, #8, #8
 800be86:	f361 4217 	bfi	r2, r1, #16, #8
 800be8a:	f363 621f 	bfi	r2, r3, #24, #8
 800be8e:	4610      	mov	r0, r2
 800be90:	b009      	add	sp, #36	; 0x24
 800be92:	bd30      	pop	{r4, r5, pc}

0800be94 <uxr_create_input_best_effort_stream>:
 800be94:	b082      	sub	sp, #8
 800be96:	3008      	adds	r0, #8
 800be98:	b002      	add	sp, #8
 800be9a:	f001 bce9 	b.w	800d870 <uxr_add_input_best_effort_buffer>
 800be9e:	bf00      	nop

0800bea0 <uxr_create_input_reliable_stream>:
 800bea0:	b510      	push	{r4, lr}
 800bea2:	4c0c      	ldr	r4, [pc, #48]	; (800bed4 <uxr_create_input_reliable_stream+0x34>)
 800bea4:	b084      	sub	sp, #16
 800bea6:	3008      	adds	r0, #8
 800bea8:	9400      	str	r4, [sp, #0]
 800beaa:	f001 fcf7 	bl	800d89c <uxr_add_input_reliable_buffer>
 800beae:	2200      	movs	r2, #0
 800beb0:	fa5f fe80 	uxtb.w	lr, r0
 800beb4:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 800beb8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800bebc:	0e03      	lsrs	r3, r0, #24
 800bebe:	f36e 0207 	bfi	r2, lr, #0, #8
 800bec2:	f36c 220f 	bfi	r2, ip, #8, #8
 800bec6:	f361 4217 	bfi	r2, r1, #16, #8
 800beca:	f363 621f 	bfi	r2, r3, #24, #8
 800bece:	4610      	mov	r0, r2
 800bed0:	b004      	add	sp, #16
 800bed2:	bd10      	pop	{r4, pc}
 800bed4:	0800bca9 	.word	0x0800bca9

0800bed8 <uxr_epoch_nanos>:
 800bed8:	b510      	push	{r4, lr}
 800beda:	4604      	mov	r4, r0
 800bedc:	f001 fd9a 	bl	800da14 <uxr_nanos>
 800bee0:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800bee4:	1ac0      	subs	r0, r0, r3
 800bee6:	eb61 0102 	sbc.w	r1, r1, r2
 800beea:	bd10      	pop	{r4, pc}

0800beec <uxr_flash_output_streams>:
 800beec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bef0:	7e03      	ldrb	r3, [r0, #24]
 800bef2:	b084      	sub	sp, #16
 800bef4:	4604      	mov	r4, r0
 800bef6:	b1fb      	cbz	r3, 800bf38 <uxr_flash_output_streams+0x4c>
 800bef8:	f04f 0900 	mov.w	r9, #0
 800befc:	f10d 0802 	add.w	r8, sp, #2
 800bf00:	af03      	add	r7, sp, #12
 800bf02:	ae02      	add	r6, sp, #8
 800bf04:	4648      	mov	r0, r9
 800bf06:	2201      	movs	r2, #1
 800bf08:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800bf0c:	4611      	mov	r1, r2
 800bf0e:	3508      	adds	r5, #8
 800bf10:	f001 fbe0 	bl	800d6d4 <uxr_stream_id>
 800bf14:	4684      	mov	ip, r0
 800bf16:	4643      	mov	r3, r8
 800bf18:	463a      	mov	r2, r7
 800bf1a:	4631      	mov	r1, r6
 800bf1c:	4628      	mov	r0, r5
 800bf1e:	f8cd c004 	str.w	ip, [sp, #4]
 800bf22:	f006 f939 	bl	8012198 <uxr_prepare_best_effort_buffer_to_send>
 800bf26:	2800      	cmp	r0, #0
 800bf28:	d13d      	bne.n	800bfa6 <uxr_flash_output_streams+0xba>
 800bf2a:	f109 0901 	add.w	r9, r9, #1
 800bf2e:	7e23      	ldrb	r3, [r4, #24]
 800bf30:	fa5f f089 	uxtb.w	r0, r9
 800bf34:	4283      	cmp	r3, r0
 800bf36:	d8e6      	bhi.n	800bf06 <uxr_flash_output_streams+0x1a>
 800bf38:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800bf3c:	b383      	cbz	r3, 800bfa0 <uxr_flash_output_streams+0xb4>
 800bf3e:	f04f 0900 	mov.w	r9, #0
 800bf42:	f10d 0802 	add.w	r8, sp, #2
 800bf46:	af03      	add	r7, sp, #12
 800bf48:	ae02      	add	r6, sp, #8
 800bf4a:	4648      	mov	r0, r9
 800bf4c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800bf50:	2201      	movs	r2, #1
 800bf52:	2102      	movs	r1, #2
 800bf54:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800bf58:	f001 fbbc 	bl	800d6d4 <uxr_stream_id>
 800bf5c:	9001      	str	r0, [sp, #4]
 800bf5e:	3520      	adds	r5, #32
 800bf60:	e00c      	b.n	800bf7c <uxr_flash_output_streams+0x90>
 800bf62:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800bf66:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800bf6a:	9b02      	ldr	r3, [sp, #8]
 800bf6c:	f000 fea8 	bl	800ccc0 <uxr_stamp_session_header>
 800bf70:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bf72:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800bf76:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800bf7a:	47d0      	blx	sl
 800bf7c:	4643      	mov	r3, r8
 800bf7e:	463a      	mov	r2, r7
 800bf80:	4631      	mov	r1, r6
 800bf82:	4628      	mov	r0, r5
 800bf84:	f006 fb2c 	bl	80125e0 <uxr_prepare_next_reliable_buffer_to_send>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d1e8      	bne.n	800bf62 <uxr_flash_output_streams+0x76>
 800bf90:	f109 0901 	add.w	r9, r9, #1
 800bf94:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800bf98:	fa5f f089 	uxtb.w	r0, r9
 800bf9c:	4283      	cmp	r3, r0
 800bf9e:	d8d5      	bhi.n	800bf4c <uxr_flash_output_streams+0x60>
 800bfa0:	b004      	add	sp, #16
 800bfa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfa6:	9b02      	ldr	r3, [sp, #8]
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800bfae:	f109 0901 	add.w	r9, r9, #1
 800bfb2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800bfb6:	f000 fe83 	bl	800ccc0 <uxr_stamp_session_header>
 800bfba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bfbc:	9a03      	ldr	r2, [sp, #12]
 800bfbe:	685d      	ldr	r5, [r3, #4]
 800bfc0:	6818      	ldr	r0, [r3, #0]
 800bfc2:	9902      	ldr	r1, [sp, #8]
 800bfc4:	47a8      	blx	r5
 800bfc6:	7e23      	ldrb	r3, [r4, #24]
 800bfc8:	fa5f f089 	uxtb.w	r0, r9
 800bfcc:	4283      	cmp	r3, r0
 800bfce:	d89a      	bhi.n	800bf06 <uxr_flash_output_streams+0x1a>
 800bfd0:	e7b2      	b.n	800bf38 <uxr_flash_output_streams+0x4c>
 800bfd2:	bf00      	nop

0800bfd4 <read_submessage_info>:
 800bfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd8:	460d      	mov	r5, r1
 800bfda:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800bfde:	4606      	mov	r6, r0
 800bfe0:	4669      	mov	r1, sp
 800bfe2:	4628      	mov	r0, r5
 800bfe4:	f002 f938 	bl	800e258 <uxr_deserialize_BaseObjectReply>
 800bfe8:	4604      	mov	r4, r0
 800bfea:	a902      	add	r1, sp, #8
 800bfec:	4628      	mov	r0, r5
 800bfee:	f89d 7005 	ldrb.w	r7, [sp, #5]
 800bff2:	f7fb f885 	bl	8007100 <ucdr_deserialize_bool>
 800bff6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800bffa:	4004      	ands	r4, r0
 800bffc:	b2e4      	uxtb	r4, r4
 800bffe:	b95b      	cbnz	r3, 800c018 <read_submessage_info+0x44>
 800c000:	a987      	add	r1, sp, #540	; 0x21c
 800c002:	4628      	mov	r0, r5
 800c004:	f7fb f87c 	bl	8007100 <ucdr_deserialize_bool>
 800c008:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800c00c:	4680      	mov	r8, r0
 800c00e:	b94b      	cbnz	r3, 800c024 <read_submessage_info+0x50>
 800c010:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800c014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c018:	a903      	add	r1, sp, #12
 800c01a:	4628      	mov	r0, r5
 800c01c:	f001 ffc8 	bl	800dfb0 <uxr_deserialize_ObjectVariant>
 800c020:	4004      	ands	r4, r0
 800c022:	e7ed      	b.n	800c000 <read_submessage_info+0x2c>
 800c024:	a988      	add	r1, sp, #544	; 0x220
 800c026:	4628      	mov	r0, r5
 800c028:	f7fb f898 	bl	800715c <ucdr_deserialize_uint8_t>
 800c02c:	ea14 0f08 	tst.w	r4, r8
 800c030:	d0ee      	beq.n	800c010 <read_submessage_info+0x3c>
 800c032:	2800      	cmp	r0, #0
 800c034:	d0ec      	beq.n	800c010 <read_submessage_info+0x3c>
 800c036:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800c03a:	2b0d      	cmp	r3, #13
 800c03c:	d1e8      	bne.n	800c010 <read_submessage_info+0x3c>
 800c03e:	a98a      	add	r1, sp, #552	; 0x228
 800c040:	4628      	mov	r0, r5
 800c042:	f7fb fe31 	bl	8007ca8 <ucdr_deserialize_int16_t>
 800c046:	b138      	cbz	r0, 800c058 <read_submessage_info+0x84>
 800c048:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	dd06      	ble.n	800c05e <read_submessage_info+0x8a>
 800c050:	2f00      	cmp	r7, #0
 800c052:	bf14      	ite	ne
 800c054:	2001      	movne	r0, #1
 800c056:	2002      	moveq	r0, #2
 800c058:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 800c05c:	e7d8      	b.n	800c010 <read_submessage_info+0x3c>
 800c05e:	2000      	movs	r0, #0
 800c060:	e7fa      	b.n	800c058 <read_submessage_info+0x84>
 800c062:	bf00      	nop

0800c064 <read_submessage_list>:
 800c064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c068:	4604      	mov	r4, r0
 800c06a:	b097      	sub	sp, #92	; 0x5c
 800c06c:	460d      	mov	r5, r1
 800c06e:	4ec1      	ldr	r6, [pc, #772]	; (800c374 <read_submessage_list+0x310>)
 800c070:	9209      	str	r2, [sp, #36]	; 0x24
 800c072:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800c076:	aa0c      	add	r2, sp, #48	; 0x30
 800c078:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800c07c:	4628      	mov	r0, r5
 800c07e:	f001 fc81 	bl	800d984 <uxr_read_submessage_header>
 800c082:	2800      	cmp	r0, #0
 800c084:	f000 8142 	beq.w	800c30c <read_submessage_list+0x2a8>
 800c088:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800c08c:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800c090:	3b02      	subs	r3, #2
 800c092:	2b0d      	cmp	r3, #13
 800c094:	d8ed      	bhi.n	800c072 <read_submessage_list+0xe>
 800c096:	a101      	add	r1, pc, #4	; (adr r1, 800c09c <read_submessage_list+0x38>)
 800c098:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c09c:	0800c303 	.word	0x0800c303
 800c0a0:	0800c073 	.word	0x0800c073
 800c0a4:	0800c2f3 	.word	0x0800c2f3
 800c0a8:	0800c291 	.word	0x0800c291
 800c0ac:	0800c287 	.word	0x0800c287
 800c0b0:	0800c073 	.word	0x0800c073
 800c0b4:	0800c073 	.word	0x0800c073
 800c0b8:	0800c1dd 	.word	0x0800c1dd
 800c0bc:	0800c16f 	.word	0x0800c16f
 800c0c0:	0800c12f 	.word	0x0800c12f
 800c0c4:	0800c073 	.word	0x0800c073
 800c0c8:	0800c073 	.word	0x0800c073
 800c0cc:	0800c073 	.word	0x0800c073
 800c0d0:	0800c0d5 	.word	0x0800c0d5
 800c0d4:	a910      	add	r1, sp, #64	; 0x40
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	f002 fae6 	bl	800e6a8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800c0dc:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 800c0e0:	f1b8 0f00 	cmp.w	r8, #0
 800c0e4:	f000 811a 	beq.w	800c31c <read_submessage_list+0x2b8>
 800c0e8:	f001 fc94 	bl	800da14 <uxr_nanos>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800c0f4:	2100      	movs	r1, #0
 800c0f6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c0f8:	9006      	str	r0, [sp, #24]
 800c0fa:	468c      	mov	ip, r1
 800c0fc:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c0fe:	fbc7 0c06 	smlal	r0, ip, r7, r6
 800c102:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800c104:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 800c108:	468c      	mov	ip, r1
 800c10a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c10c:	fbc7 0c06 	smlal	r0, ip, r7, r6
 800c110:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 800c114:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 800c118:	fbc7 0106 	smlal	r0, r1, r7, r6
 800c11c:	e9cd 0100 	strd	r0, r1, [sp]
 800c120:	4620      	mov	r0, r4
 800c122:	47c0      	blx	r8
 800c124:	f04f 0301 	mov.w	r3, #1
 800c128:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800c12c:	e7a1      	b.n	800c072 <read_submessage_list+0xe>
 800c12e:	a910      	add	r1, sp, #64	; 0x40
 800c130:	4628      	mov	r0, r5
 800c132:	f002 faa5 	bl	800e680 <uxr_deserialize_HEARTBEAT_Payload>
 800c136:	2100      	movs	r1, #0
 800c138:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800c13c:	f001 faf8 	bl	800d730 <uxr_stream_id_from_raw>
 800c140:	f3c0 2807 	ubfx	r8, r0, #8, #8
 800c144:	900f      	str	r0, [sp, #60]	; 0x3c
 800c146:	f104 0008 	add.w	r0, r4, #8
 800c14a:	4641      	mov	r1, r8
 800c14c:	f001 fbde 	bl	800d90c <uxr_get_input_reliable_stream>
 800c150:	2800      	cmp	r0, #0
 800c152:	d08e      	beq.n	800c072 <read_submessage_list+0xe>
 800c154:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800c158:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800c15c:	f005 ff86 	bl	801206c <uxr_process_heartbeat>
 800c160:	4642      	mov	r2, r8
 800c162:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800c166:	4620      	mov	r0, r4
 800c168:	f7ff fdf6 	bl	800bd58 <write_submessage_acknack.isra.0>
 800c16c:	e781      	b.n	800c072 <read_submessage_list+0xe>
 800c16e:	a910      	add	r1, sp, #64	; 0x40
 800c170:	4628      	mov	r0, r5
 800c172:	f002 fa5d 	bl	800e630 <uxr_deserialize_ACKNACK_Payload>
 800c176:	2100      	movs	r1, #0
 800c178:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800c17c:	f001 fad8 	bl	800d730 <uxr_stream_id_from_raw>
 800c180:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800c184:	900d      	str	r0, [sp, #52]	; 0x34
 800c186:	f104 0008 	add.w	r0, r4, #8
 800c18a:	f001 fba9 	bl	800d8e0 <uxr_get_output_reliable_stream>
 800c18e:	4680      	mov	r8, r0
 800c190:	2800      	cmp	r0, #0
 800c192:	f43f af6e 	beq.w	800c072 <read_submessage_list+0xe>
 800c196:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800c19a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800c19e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800c1a2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800c1a6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800c1aa:	b289      	uxth	r1, r1
 800c1ac:	f006 fac0 	bl	8012730 <uxr_process_acknack>
 800c1b0:	4640      	mov	r0, r8
 800c1b2:	f006 fa81 	bl	80126b8 <uxr_begin_output_nack_buffer_it>
 800c1b6:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800c1ba:	e005      	b.n	800c1c8 <read_submessage_list+0x164>
 800c1bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c1be:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 800c1c2:	e9d3 0900 	ldrd	r0, r9, [r3]
 800c1c6:	47c8      	blx	r9
 800c1c8:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800c1cc:	aa0f      	add	r2, sp, #60	; 0x3c
 800c1ce:	4651      	mov	r1, sl
 800c1d0:	4640      	mov	r0, r8
 800c1d2:	f006 fa73 	bl	80126bc <uxr_next_reliable_nack_buffer_to_send>
 800c1d6:	2800      	cmp	r0, #0
 800c1d8:	d1f0      	bne.n	800c1bc <read_submessage_list+0x158>
 800c1da:	e74a      	b.n	800c072 <read_submessage_list+0xe>
 800c1dc:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800c1e0:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800c1e4:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 800c1e8:	4628      	mov	r0, r5
 800c1ea:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800c1ee:	4651      	mov	r1, sl
 800c1f0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800c1f4:	f1a8 0804 	sub.w	r8, r8, #4
 800c1f8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800c1fc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800c200:	fa1f f888 	uxth.w	r8, r8
 800c204:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800c208:	f009 090e 	and.w	r9, r9, #14
 800c20c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800c210:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800c214:	f001 ff6e 	bl	800e0f4 <uxr_deserialize_BaseObjectRequest>
 800c218:	4650      	mov	r0, sl
 800c21a:	a90f      	add	r1, sp, #60	; 0x3c
 800c21c:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800c220:	f000 fdca 	bl	800cdb8 <uxr_parse_base_object_request>
 800c224:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c226:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800c22a:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800c22e:	9110      	str	r1, [sp, #64]	; 0x40
 800c230:	f1bb 0f00 	cmp.w	fp, #0
 800c234:	d006      	beq.n	800c244 <read_submessage_list+0x1e0>
 800c236:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c23a:	4652      	mov	r2, sl
 800c23c:	4620      	mov	r0, r4
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	2300      	movs	r3, #0
 800c242:	47d8      	blx	fp
 800c244:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800c246:	b182      	cbz	r2, 800c26a <read_submessage_list+0x206>
 800c248:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800c24a:	f04f 0c00 	mov.w	ip, #0
 800c24e:	3902      	subs	r1, #2
 800c250:	e003      	b.n	800c25a <read_submessage_list+0x1f6>
 800c252:	f10c 0c01 	add.w	ip, ip, #1
 800c256:	4594      	cmp	ip, r2
 800c258:	d007      	beq.n	800c26a <read_submessage_list+0x206>
 800c25a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 800c25e:	4553      	cmp	r3, sl
 800c260:	d1f7      	bne.n	800c252 <read_submessage_list+0x1ee>
 800c262:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c264:	2200      	movs	r2, #0
 800c266:	f803 200c 	strb.w	r2, [r3, ip]
 800c26a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800c26e:	464b      	mov	r3, r9
 800c270:	4642      	mov	r2, r8
 800c272:	4620      	mov	r0, r4
 800c274:	9102      	str	r1, [sp, #8]
 800c276:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c278:	9101      	str	r1, [sp, #4]
 800c27a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c27c:	9100      	str	r1, [sp, #0]
 800c27e:	4629      	mov	r1, r5
 800c280:	f7ff fc48 	bl	800bb14 <read_submessage_format>
 800c284:	e6f5      	b.n	800c072 <read_submessage_list+0xe>
 800c286:	4629      	mov	r1, r5
 800c288:	4620      	mov	r0, r4
 800c28a:	f7ff fea3 	bl	800bfd4 <read_submessage_info>
 800c28e:	e6f0      	b.n	800c072 <read_submessage_list+0xe>
 800c290:	2a00      	cmp	r2, #0
 800c292:	d03e      	beq.n	800c312 <read_submessage_list+0x2ae>
 800c294:	a910      	add	r1, sp, #64	; 0x40
 800c296:	4628      	mov	r0, r5
 800c298:	f002 f922 	bl	800e4e0 <uxr_deserialize_STATUS_Payload>
 800c29c:	a90e      	add	r1, sp, #56	; 0x38
 800c29e:	aa0d      	add	r2, sp, #52	; 0x34
 800c2a0:	a810      	add	r0, sp, #64	; 0x40
 800c2a2:	f000 fd89 	bl	800cdb8 <uxr_parse_base_object_request>
 800c2a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c2a8:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800c2ac:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800c2b0:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 800c2b4:	910f      	str	r1, [sp, #60]	; 0x3c
 800c2b6:	f1ba 0f00 	cmp.w	sl, #0
 800c2ba:	d006      	beq.n	800c2ca <read_submessage_list+0x266>
 800c2bc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c2c0:	4642      	mov	r2, r8
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	9300      	str	r3, [sp, #0]
 800c2c6:	464b      	mov	r3, r9
 800c2c8:	47d0      	blx	sl
 800c2ca:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800c2cc:	2a00      	cmp	r2, #0
 800c2ce:	f43f aed0 	beq.w	800c072 <read_submessage_list+0xe>
 800c2d2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c2d4:	2100      	movs	r1, #0
 800c2d6:	3802      	subs	r0, #2
 800c2d8:	e003      	b.n	800c2e2 <read_submessage_list+0x27e>
 800c2da:	3101      	adds	r1, #1
 800c2dc:	4291      	cmp	r1, r2
 800c2de:	f43f aec8 	beq.w	800c072 <read_submessage_list+0xe>
 800c2e2:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800c2e6:	4543      	cmp	r3, r8
 800c2e8:	d1f7      	bne.n	800c2da <read_submessage_list+0x276>
 800c2ea:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c2ec:	f803 9001 	strb.w	r9, [r3, r1]
 800c2f0:	e6bf      	b.n	800c072 <read_submessage_list+0xe>
 800c2f2:	2a00      	cmp	r2, #0
 800c2f4:	f47f aebd 	bne.w	800c072 <read_submessage_list+0xe>
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	f000 fca0 	bl	800cc40 <uxr_read_create_session_status>
 800c300:	e6b7      	b.n	800c072 <read_submessage_list+0xe>
 800c302:	4629      	mov	r1, r5
 800c304:	4620      	mov	r0, r4
 800c306:	f7ff fcf1 	bl	800bcec <read_submessage_get_info>
 800c30a:	e6b2      	b.n	800c072 <read_submessage_list+0xe>
 800c30c:	b017      	add	sp, #92	; 0x5c
 800c30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c312:	4629      	mov	r1, r5
 800c314:	4620      	mov	r0, r4
 800c316:	f000 fca1 	bl	800cc5c <uxr_read_delete_session_status>
 800c31a:	e6aa      	b.n	800c072 <read_submessage_list+0xe>
 800c31c:	f001 fb7a 	bl	800da14 <uxr_nanos>
 800c320:	4642      	mov	r2, r8
 800c322:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c324:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c326:	fbc7 3206 	smlal	r3, r2, r7, r6
 800c32a:	1818      	adds	r0, r3, r0
 800c32c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800c32e:	eb42 0101 	adc.w	r1, r2, r1
 800c332:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c334:	4642      	mov	r2, r8
 800c336:	fbc7 3206 	smlal	r3, r2, r7, r6
 800c33a:	469c      	mov	ip, r3
 800c33c:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 800c340:	fbc3 7806 	smlal	r7, r8, r3, r6
 800c344:	4643      	mov	r3, r8
 800c346:	eb1c 0c07 	adds.w	ip, ip, r7
 800c34a:	eb42 0203 	adc.w	r2, r2, r3
 800c34e:	ebb0 030c 	subs.w	r3, r0, ip
 800c352:	eb61 0202 	sbc.w	r2, r1, r2
 800c356:	2a00      	cmp	r2, #0
 800c358:	db08      	blt.n	800c36c <read_submessage_list+0x308>
 800c35a:	085b      	lsrs	r3, r3, #1
 800c35c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800c360:	1052      	asrs	r2, r2, #1
 800c362:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800c366:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 800c36a:	e6db      	b.n	800c124 <read_submessage_list+0xc0>
 800c36c:	3301      	adds	r3, #1
 800c36e:	f142 0200 	adc.w	r2, r2, #0
 800c372:	e7f2      	b.n	800c35a <read_submessage_list+0x2f6>
 800c374:	3b9aca00 	.word	0x3b9aca00

0800c378 <listen_message_reliably>:
 800c378:	1e0b      	subs	r3, r1, #0
 800c37a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c37e:	bfb8      	it	lt
 800c380:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800c384:	b09d      	sub	sp, #116	; 0x74
 800c386:	4680      	mov	r8, r0
 800c388:	9305      	str	r3, [sp, #20]
 800c38a:	f001 fb27 	bl	800d9dc <uxr_millis>
 800c38e:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800c392:	4681      	mov	r9, r0
 800c394:	2a00      	cmp	r2, #0
 800c396:	f000 809a 	beq.w	800c4ce <listen_message_reliably+0x156>
 800c39a:	2600      	movs	r6, #0
 800c39c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c3a0:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800c3a4:	460f      	mov	r7, r1
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	9303      	str	r3, [sp, #12]
 800c3aa:	e00e      	b.n	800c3ca <listen_message_reliably+0x52>
 800c3ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3ae:	3601      	adds	r6, #1
 800c3b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3b2:	455a      	cmp	r2, fp
 800c3b4:	9903      	ldr	r1, [sp, #12]
 800c3b6:	b2f0      	uxtb	r0, r6
 800c3b8:	eb73 0101 	sbcs.w	r1, r3, r1
 800c3bc:	da01      	bge.n	800c3c2 <listen_message_reliably+0x4a>
 800c3be:	4693      	mov	fp, r2
 800c3c0:	9303      	str	r3, [sp, #12]
 800c3c2:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800c3c6:	4283      	cmp	r3, r0
 800c3c8:	d95f      	bls.n	800c48a <listen_message_reliably+0x112>
 800c3ca:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800c3ce:	2102      	movs	r1, #2
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	00e4      	lsls	r4, r4, #3
 800c3d4:	f001 f97e 	bl	800d6d4 <uxr_stream_id>
 800c3d8:	4601      	mov	r1, r0
 800c3da:	f104 0520 	add.w	r5, r4, #32
 800c3de:	463b      	mov	r3, r7
 800c3e0:	464a      	mov	r2, r9
 800c3e2:	9109      	str	r1, [sp, #36]	; 0x24
 800c3e4:	4445      	add	r5, r8
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	f006 f93a 	bl	8012660 <uxr_update_output_stream_heartbeat_timestamp>
 800c3ec:	eb08 0304 	add.w	r3, r8, r4
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	d0db      	beq.n	800c3ac <listen_message_reliably+0x34>
 800c3f4:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800c3f8:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800c3fc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800c400:	4640      	mov	r0, r8
 800c402:	3501      	adds	r5, #1
 800c404:	4444      	add	r4, r8
 800c406:	9304      	str	r3, [sp, #16]
 800c408:	f000 fcae 	bl	800cd68 <uxr_session_header_offset>
 800c40c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800c410:	2300      	movs	r3, #0
 800c412:	2211      	movs	r2, #17
 800c414:	a90c      	add	r1, sp, #48	; 0x30
 800c416:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800c41a:	9000      	str	r0, [sp, #0]
 800c41c:	4650      	mov	r0, sl
 800c41e:	3601      	adds	r6, #1
 800c420:	f7fb ffb6 	bl	8008390 <ucdr_init_buffer_origin_offset>
 800c424:	2300      	movs	r3, #0
 800c426:	2205      	movs	r2, #5
 800c428:	210b      	movs	r1, #11
 800c42a:	4650      	mov	r0, sl
 800c42c:	f001 fa90 	bl	800d950 <uxr_buffer_submessage_header>
 800c430:	2101      	movs	r1, #1
 800c432:	8968      	ldrh	r0, [r5, #10]
 800c434:	f006 f9b6 	bl	80127a4 <uxr_seq_num_add>
 800c438:	892b      	ldrh	r3, [r5, #8]
 800c43a:	4602      	mov	r2, r0
 800c43c:	a90a      	add	r1, sp, #40	; 0x28
 800c43e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800c442:	4650      	mov	r0, sl
 800c444:	9b04      	ldr	r3, [sp, #16]
 800c446:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800c44a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800c44e:	f002 f903 	bl	800e658 <uxr_serialize_HEARTBEAT_Payload>
 800c452:	2200      	movs	r2, #0
 800c454:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c456:	4640      	mov	r0, r8
 800c458:	4611      	mov	r1, r2
 800c45a:	f000 fc31 	bl	800ccc0 <uxr_stamp_session_header>
 800c45e:	4650      	mov	r0, sl
 800c460:	f7fb ffd6 	bl	8008410 <ucdr_buffer_length>
 800c464:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800c468:	4602      	mov	r2, r0
 800c46a:	a90c      	add	r1, sp, #48	; 0x30
 800c46c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c470:	47a8      	blx	r5
 800c472:	9903      	ldr	r1, [sp, #12]
 800c474:	b2f0      	uxtb	r0, r6
 800c476:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800c47a:	455a      	cmp	r2, fp
 800c47c:	eb73 0101 	sbcs.w	r1, r3, r1
 800c480:	db9d      	blt.n	800c3be <listen_message_reliably+0x46>
 800c482:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800c486:	4283      	cmp	r3, r0
 800c488:	d89f      	bhi.n	800c3ca <listen_message_reliably+0x52>
 800c48a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c48e:	9a03      	ldr	r2, [sp, #12]
 800c490:	429a      	cmp	r2, r3
 800c492:	bf08      	it	eq
 800c494:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800c498:	d019      	beq.n	800c4ce <listen_message_reliably+0x156>
 800c49a:	ebab 0309 	sub.w	r3, fp, r9
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	9d05      	ldr	r5, [sp, #20]
 800c4a2:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 800c4a6:	aa08      	add	r2, sp, #32
 800c4a8:	bf08      	it	eq
 800c4aa:	2301      	moveq	r3, #1
 800c4ac:	a907      	add	r1, sp, #28
 800c4ae:	6884      	ldr	r4, [r0, #8]
 800c4b0:	429d      	cmp	r5, r3
 800c4b2:	6800      	ldr	r0, [r0, #0]
 800c4b4:	bfa8      	it	ge
 800c4b6:	461d      	movge	r5, r3
 800c4b8:	462b      	mov	r3, r5
 800c4ba:	47a0      	blx	r4
 800c4bc:	b948      	cbnz	r0, 800c4d2 <listen_message_reliably+0x15a>
 800c4be:	9b05      	ldr	r3, [sp, #20]
 800c4c0:	1b5b      	subs	r3, r3, r5
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	9305      	str	r3, [sp, #20]
 800c4c6:	f73f af60 	bgt.w	800c38a <listen_message_reliably+0x12>
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	e012      	b.n	800c4f4 <listen_message_reliably+0x17c>
 800c4ce:	9b05      	ldr	r3, [sp, #20]
 800c4d0:	e7e5      	b.n	800c49e <listen_message_reliably+0x126>
 800c4d2:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800c4d6:	4604      	mov	r4, r0
 800c4d8:	2500      	movs	r5, #0
 800c4da:	a80c      	add	r0, sp, #48	; 0x30
 800c4dc:	f7fb ff6a 	bl	80083b4 <ucdr_init_buffer>
 800c4e0:	f10d 031a 	add.w	r3, sp, #26
 800c4e4:	aa06      	add	r2, sp, #24
 800c4e6:	a90c      	add	r1, sp, #48	; 0x30
 800c4e8:	4640      	mov	r0, r8
 800c4ea:	f88d 5018 	strb.w	r5, [sp, #24]
 800c4ee:	f000 fbfb 	bl	800cce8 <uxr_read_session_header>
 800c4f2:	b918      	cbnz	r0, 800c4fc <listen_message_reliably+0x184>
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	b01d      	add	sp, #116	; 0x74
 800c4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4fc:	4629      	mov	r1, r5
 800c4fe:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800c502:	f001 f915 	bl	800d730 <uxr_stream_id_from_raw>
 800c506:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800c50a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800c50e:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800c512:	2e01      	cmp	r6, #1
 800c514:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800c518:	d04b      	beq.n	800c5b2 <listen_message_reliably+0x23a>
 800c51a:	2e02      	cmp	r6, #2
 800c51c:	d00f      	beq.n	800c53e <listen_message_reliably+0x1c6>
 800c51e:	2e00      	cmp	r6, #0
 800c520:	d1e8      	bne.n	800c4f4 <listen_message_reliably+0x17c>
 800c522:	4631      	mov	r1, r6
 800c524:	4630      	mov	r0, r6
 800c526:	f001 f903 	bl	800d730 <uxr_stream_id_from_raw>
 800c52a:	4602      	mov	r2, r0
 800c52c:	a90c      	add	r1, sp, #48	; 0x30
 800c52e:	4640      	mov	r0, r8
 800c530:	920a      	str	r2, [sp, #40]	; 0x28
 800c532:	f7ff fd97 	bl	800c064 <read_submessage_list>
 800c536:	4620      	mov	r0, r4
 800c538:	b01d      	add	sp, #116	; 0x74
 800c53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c53e:	4629      	mov	r1, r5
 800c540:	f108 0008 	add.w	r0, r8, #8
 800c544:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800c548:	f001 f9e0 	bl	800d90c <uxr_get_input_reliable_stream>
 800c54c:	4607      	mov	r7, r0
 800c54e:	b338      	cbz	r0, 800c5a0 <listen_message_reliably+0x228>
 800c550:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c552:	a80c      	add	r0, sp, #48	; 0x30
 800c554:	9203      	str	r2, [sp, #12]
 800c556:	f7fb ff5f 	bl	8008418 <ucdr_buffer_remaining>
 800c55a:	4603      	mov	r3, r0
 800c55c:	f10d 0019 	add.w	r0, sp, #25
 800c560:	9a03      	ldr	r2, [sp, #12]
 800c562:	4651      	mov	r1, sl
 800c564:	9000      	str	r0, [sp, #0]
 800c566:	4638      	mov	r0, r7
 800c568:	f005 fc84 	bl	8011e74 <uxr_receive_reliable_message>
 800c56c:	b1c0      	cbz	r0, 800c5a0 <listen_message_reliably+0x228>
 800c56e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c572:	b393      	cbz	r3, 800c5da <listen_message_reliably+0x262>
 800c574:	ae14      	add	r6, sp, #80	; 0x50
 800c576:	f04f 0a02 	mov.w	sl, #2
 800c57a:	e00a      	b.n	800c592 <listen_message_reliably+0x21a>
 800c57c:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800c580:	4631      	mov	r1, r6
 800c582:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800c586:	4640      	mov	r0, r8
 800c588:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800c58c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c58e:	f7ff fd69 	bl	800c064 <read_submessage_list>
 800c592:	2204      	movs	r2, #4
 800c594:	4631      	mov	r1, r6
 800c596:	4638      	mov	r0, r7
 800c598:	f005 fcee 	bl	8011f78 <uxr_next_input_reliable_buffer_available>
 800c59c:	2800      	cmp	r0, #0
 800c59e:	d1ed      	bne.n	800c57c <listen_message_reliably+0x204>
 800c5a0:	4640      	mov	r0, r8
 800c5a2:	462a      	mov	r2, r5
 800c5a4:	4649      	mov	r1, r9
 800c5a6:	f7ff fbd7 	bl	800bd58 <write_submessage_acknack.isra.0>
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	b01d      	add	sp, #116	; 0x74
 800c5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5b2:	4629      	mov	r1, r5
 800c5b4:	f108 0008 	add.w	r0, r8, #8
 800c5b8:	f001 f99e 	bl	800d8f8 <uxr_get_input_best_effort_stream>
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	d099      	beq.n	800c4f4 <listen_message_reliably+0x17c>
 800c5c0:	4651      	mov	r1, sl
 800c5c2:	f005 fbcd 	bl	8011d60 <uxr_receive_best_effort_message>
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	d094      	beq.n	800c4f4 <listen_message_reliably+0x17c>
 800c5ca:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800c5ce:	a90c      	add	r1, sp, #48	; 0x30
 800c5d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5d2:	4640      	mov	r0, r8
 800c5d4:	f7ff fd46 	bl	800c064 <read_submessage_list>
 800c5d8:	e78c      	b.n	800c4f4 <listen_message_reliably+0x17c>
 800c5da:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800c5de:	a90c      	add	r1, sp, #48	; 0x30
 800c5e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5e2:	4640      	mov	r0, r8
 800c5e4:	f7ff fd3e 	bl	800c064 <read_submessage_list>
 800c5e8:	e7c4      	b.n	800c574 <listen_message_reliably+0x1fc>
 800c5ea:	bf00      	nop

0800c5ec <uxr_run_session_timeout>:
 800c5ec:	b570      	push	{r4, r5, r6, lr}
 800c5ee:	4604      	mov	r4, r0
 800c5f0:	460d      	mov	r5, r1
 800c5f2:	f001 f9f3 	bl	800d9dc <uxr_millis>
 800c5f6:	4606      	mov	r6, r0
 800c5f8:	4620      	mov	r0, r4
 800c5fa:	f7ff fc77 	bl	800beec <uxr_flash_output_streams>
 800c5fe:	4629      	mov	r1, r5
 800c600:	4620      	mov	r0, r4
 800c602:	f7ff feb9 	bl	800c378 <listen_message_reliably>
 800c606:	f001 f9e9 	bl	800d9dc <uxr_millis>
 800c60a:	1b83      	subs	r3, r0, r6
 800c60c:	1ae9      	subs	r1, r5, r3
 800c60e:	2900      	cmp	r1, #0
 800c610:	dcf6      	bgt.n	800c600 <uxr_run_session_timeout+0x14>
 800c612:	f104 0008 	add.w	r0, r4, #8
 800c616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c61a:	f001 b983 	b.w	800d924 <uxr_output_streams_confirmed>
 800c61e:	bf00      	nop

0800c620 <uxr_run_session_until_data>:
 800c620:	b570      	push	{r4, r5, r6, lr}
 800c622:	4604      	mov	r4, r0
 800c624:	460d      	mov	r5, r1
 800c626:	f001 f9d9 	bl	800d9dc <uxr_millis>
 800c62a:	4606      	mov	r6, r0
 800c62c:	4620      	mov	r0, r4
 800c62e:	f7ff fc5d 	bl	800beec <uxr_flash_output_streams>
 800c632:	2300      	movs	r3, #0
 800c634:	4629      	mov	r1, r5
 800c636:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800c63a:	e005      	b.n	800c648 <uxr_run_session_until_data+0x28>
 800c63c:	f001 f9ce 	bl	800d9dc <uxr_millis>
 800c640:	1b83      	subs	r3, r0, r6
 800c642:	1ae9      	subs	r1, r5, r3
 800c644:	2900      	cmp	r1, #0
 800c646:	dd07      	ble.n	800c658 <uxr_run_session_until_data+0x38>
 800c648:	4620      	mov	r0, r4
 800c64a:	f7ff fe95 	bl	800c378 <listen_message_reliably>
 800c64e:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800c652:	2800      	cmp	r0, #0
 800c654:	d0f2      	beq.n	800c63c <uxr_run_session_until_data+0x1c>
 800c656:	bd70      	pop	{r4, r5, r6, pc}
 800c658:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800c65c:	bd70      	pop	{r4, r5, r6, pc}
 800c65e:	bf00      	nop

0800c660 <uxr_run_session_until_confirm_delivery>:
 800c660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c664:	4606      	mov	r6, r0
 800c666:	460d      	mov	r5, r1
 800c668:	f001 f9b8 	bl	800d9dc <uxr_millis>
 800c66c:	4607      	mov	r7, r0
 800c66e:	4630      	mov	r0, r6
 800c670:	f106 0808 	add.w	r8, r6, #8
 800c674:	f7ff fc3a 	bl	800beec <uxr_flash_output_streams>
 800c678:	2d00      	cmp	r5, #0
 800c67a:	db10      	blt.n	800c69e <uxr_run_session_until_confirm_delivery+0x3e>
 800c67c:	462c      	mov	r4, r5
 800c67e:	e006      	b.n	800c68e <uxr_run_session_until_confirm_delivery+0x2e>
 800c680:	f7ff fe7a 	bl	800c378 <listen_message_reliably>
 800c684:	f001 f9aa 	bl	800d9dc <uxr_millis>
 800c688:	1bc3      	subs	r3, r0, r7
 800c68a:	1aec      	subs	r4, r5, r3
 800c68c:	d407      	bmi.n	800c69e <uxr_run_session_until_confirm_delivery+0x3e>
 800c68e:	4640      	mov	r0, r8
 800c690:	f001 f948 	bl	800d924 <uxr_output_streams_confirmed>
 800c694:	4603      	mov	r3, r0
 800c696:	4621      	mov	r1, r4
 800c698:	4630      	mov	r0, r6
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d0f0      	beq.n	800c680 <uxr_run_session_until_confirm_delivery+0x20>
 800c69e:	4640      	mov	r0, r8
 800c6a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6a4:	f001 b93e 	b.w	800d924 <uxr_output_streams_confirmed>

0800c6a8 <uxr_run_session_until_all_status>:
 800c6a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ac:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800c6b0:	4606      	mov	r6, r0
 800c6b2:	4688      	mov	r8, r1
 800c6b4:	4692      	mov	sl, r2
 800c6b6:	461f      	mov	r7, r3
 800c6b8:	f7ff fc18 	bl	800beec <uxr_flash_output_streams>
 800c6bc:	f1bb 0f00 	cmp.w	fp, #0
 800c6c0:	d004      	beq.n	800c6cc <uxr_run_session_until_all_status+0x24>
 800c6c2:	465a      	mov	r2, fp
 800c6c4:	21ff      	movs	r1, #255	; 0xff
 800c6c6:	4638      	mov	r0, r7
 800c6c8:	f007 f89c 	bl	8013804 <memset>
 800c6cc:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 800c6d0:	1e7d      	subs	r5, r7, #1
 800c6d2:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 800c6d6:	f001 f981 	bl	800d9dc <uxr_millis>
 800c6da:	4641      	mov	r1, r8
 800c6dc:	4681      	mov	r9, r0
 800c6de:	4630      	mov	r0, r6
 800c6e0:	f7ff fe4a 	bl	800c378 <listen_message_reliably>
 800c6e4:	f001 f97a 	bl	800d9dc <uxr_millis>
 800c6e8:	eba0 0009 	sub.w	r0, r0, r9
 800c6ec:	eba8 0100 	sub.w	r1, r8, r0
 800c6f0:	f1bb 0f00 	cmp.w	fp, #0
 800c6f4:	d029      	beq.n	800c74a <uxr_run_session_until_all_status+0xa2>
 800c6f6:	46ae      	mov	lr, r5
 800c6f8:	f04f 0c00 	mov.w	ip, #0
 800c6fc:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800c700:	2cff      	cmp	r4, #255	; 0xff
 800c702:	d015      	beq.n	800c730 <uxr_run_session_until_all_status+0x88>
 800c704:	f10c 0c01 	add.w	ip, ip, #1
 800c708:	45e3      	cmp	fp, ip
 800c70a:	d8f7      	bhi.n	800c6fc <uxr_run_session_until_all_status+0x54>
 800c70c:	2300      	movs	r3, #0
 800c70e:	67f3      	str	r3, [r6, #124]	; 0x7c
 800c710:	e000      	b.n	800c714 <uxr_run_session_until_all_status+0x6c>
 800c712:	b158      	cbz	r0, 800c72c <uxr_run_session_until_all_status+0x84>
 800c714:	462b      	mov	r3, r5
 800c716:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800c71a:	3302      	adds	r3, #2
 800c71c:	2801      	cmp	r0, #1
 800c71e:	eba3 0307 	sub.w	r3, r3, r7
 800c722:	bf8c      	ite	hi
 800c724:	2000      	movhi	r0, #0
 800c726:	2001      	movls	r0, #1
 800c728:	459b      	cmp	fp, r3
 800c72a:	d8f2      	bhi.n	800c712 <uxr_run_session_until_all_status+0x6a>
 800c72c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c730:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 800c734:	f10c 0c01 	add.w	ip, ip, #1
 800c738:	45dc      	cmp	ip, fp
 800c73a:	d201      	bcs.n	800c740 <uxr_run_session_until_all_status+0x98>
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d0dd      	beq.n	800c6fc <uxr_run_session_until_all_status+0x54>
 800c740:	2900      	cmp	r1, #0
 800c742:	dde3      	ble.n	800c70c <uxr_run_session_until_all_status+0x64>
 800c744:	2b00      	cmp	r3, #0
 800c746:	d1ca      	bne.n	800c6de <uxr_run_session_until_all_status+0x36>
 800c748:	e7e0      	b.n	800c70c <uxr_run_session_until_all_status+0x64>
 800c74a:	2001      	movs	r0, #1
 800c74c:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 800c750:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c754 <wait_session_status>:
 800c754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c758:	4604      	mov	r4, r0
 800c75a:	b09d      	sub	sp, #116	; 0x74
 800c75c:	20ff      	movs	r0, #255	; 0xff
 800c75e:	9303      	str	r3, [sp, #12]
 800c760:	7160      	strb	r0, [r4, #5]
 800c762:	2b00      	cmp	r3, #0
 800c764:	f000 80b6 	beq.w	800c8d4 <wait_session_status+0x180>
 800c768:	4689      	mov	r9, r1
 800c76a:	4692      	mov	sl, r2
 800c76c:	f04f 0b00 	mov.w	fp, #0
 800c770:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c772:	4652      	mov	r2, sl
 800c774:	4649      	mov	r1, r9
 800c776:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c77a:	47a8      	blx	r5
 800c77c:	f001 f92e 	bl	800d9dc <uxr_millis>
 800c780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c784:	4605      	mov	r5, r0
 800c786:	e009      	b.n	800c79c <wait_session_status+0x48>
 800c788:	f001 f928 	bl	800d9dc <uxr_millis>
 800c78c:	1b40      	subs	r0, r0, r5
 800c78e:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800c792:	2b00      	cmp	r3, #0
 800c794:	dd40      	ble.n	800c818 <wait_session_status+0xc4>
 800c796:	7960      	ldrb	r0, [r4, #5]
 800c798:	28ff      	cmp	r0, #255	; 0xff
 800c79a:	d145      	bne.n	800c828 <wait_session_status+0xd4>
 800c79c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800c79e:	a908      	add	r1, sp, #32
 800c7a0:	6896      	ldr	r6, [r2, #8]
 800c7a2:	6810      	ldr	r0, [r2, #0]
 800c7a4:	aa09      	add	r2, sp, #36	; 0x24
 800c7a6:	47b0      	blx	r6
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	d0ed      	beq.n	800c788 <wait_session_status+0x34>
 800c7ac:	a80c      	add	r0, sp, #48	; 0x30
 800c7ae:	2600      	movs	r6, #0
 800c7b0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800c7b4:	f7fb fdfe 	bl	80083b4 <ucdr_init_buffer>
 800c7b8:	f10d 031e 	add.w	r3, sp, #30
 800c7bc:	aa07      	add	r2, sp, #28
 800c7be:	a90c      	add	r1, sp, #48	; 0x30
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	f88d 601c 	strb.w	r6, [sp, #28]
 800c7c6:	f000 fa8f 	bl	800cce8 <uxr_read_session_header>
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	d0dc      	beq.n	800c788 <wait_session_status+0x34>
 800c7ce:	4631      	mov	r1, r6
 800c7d0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800c7d4:	f000 ffac 	bl	800d730 <uxr_stream_id_from_raw>
 800c7d8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800c7dc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800c7e0:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800c7e4:	2f01      	cmp	r7, #1
 800c7e6:	9302      	str	r3, [sp, #8]
 800c7e8:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800c7ec:	d05c      	beq.n	800c8a8 <wait_session_status+0x154>
 800c7ee:	2f02      	cmp	r7, #2
 800c7f0:	d020      	beq.n	800c834 <wait_session_status+0xe0>
 800c7f2:	2f00      	cmp	r7, #0
 800c7f4:	d1c8      	bne.n	800c788 <wait_session_status+0x34>
 800c7f6:	4639      	mov	r1, r7
 800c7f8:	4638      	mov	r0, r7
 800c7fa:	f000 ff99 	bl	800d730 <uxr_stream_id_from_raw>
 800c7fe:	a90c      	add	r1, sp, #48	; 0x30
 800c800:	4602      	mov	r2, r0
 800c802:	900b      	str	r0, [sp, #44]	; 0x2c
 800c804:	4620      	mov	r0, r4
 800c806:	f7ff fc2d 	bl	800c064 <read_submessage_list>
 800c80a:	f001 f8e7 	bl	800d9dc <uxr_millis>
 800c80e:	1b40      	subs	r0, r0, r5
 800c810:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800c814:	2b00      	cmp	r3, #0
 800c816:	dcbe      	bgt.n	800c796 <wait_session_status+0x42>
 800c818:	f10b 0b01 	add.w	fp, fp, #1
 800c81c:	9b03      	ldr	r3, [sp, #12]
 800c81e:	7960      	ldrb	r0, [r4, #5]
 800c820:	455b      	cmp	r3, fp
 800c822:	d001      	beq.n	800c828 <wait_session_status+0xd4>
 800c824:	28ff      	cmp	r0, #255	; 0xff
 800c826:	d0a3      	beq.n	800c770 <wait_session_status+0x1c>
 800c828:	38ff      	subs	r0, #255	; 0xff
 800c82a:	bf18      	it	ne
 800c82c:	2001      	movne	r0, #1
 800c82e:	b01d      	add	sp, #116	; 0x74
 800c830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c834:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800c838:	4631      	mov	r1, r6
 800c83a:	f104 0008 	add.w	r0, r4, #8
 800c83e:	9304      	str	r3, [sp, #16]
 800c840:	f001 f864 	bl	800d90c <uxr_get_input_reliable_stream>
 800c844:	4680      	mov	r8, r0
 800c846:	b348      	cbz	r0, 800c89c <wait_session_status+0x148>
 800c848:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c84a:	a80c      	add	r0, sp, #48	; 0x30
 800c84c:	9205      	str	r2, [sp, #20]
 800c84e:	f7fb fde3 	bl	8008418 <ucdr_buffer_remaining>
 800c852:	4603      	mov	r3, r0
 800c854:	f10d 001d 	add.w	r0, sp, #29
 800c858:	9a05      	ldr	r2, [sp, #20]
 800c85a:	9000      	str	r0, [sp, #0]
 800c85c:	4640      	mov	r0, r8
 800c85e:	9902      	ldr	r1, [sp, #8]
 800c860:	f005 fb08 	bl	8011e74 <uxr_receive_reliable_message>
 800c864:	b1d0      	cbz	r0, 800c89c <wait_session_status+0x148>
 800c866:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d03a      	beq.n	800c8e4 <wait_session_status+0x190>
 800c86e:	9f04      	ldr	r7, [sp, #16]
 800c870:	e00a      	b.n	800c888 <wait_session_status+0x134>
 800c872:	f04f 0302 	mov.w	r3, #2
 800c876:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800c87a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800c87e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800c882:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c884:	f7ff fbee 	bl	800c064 <read_submessage_list>
 800c888:	a914      	add	r1, sp, #80	; 0x50
 800c88a:	2204      	movs	r2, #4
 800c88c:	4640      	mov	r0, r8
 800c88e:	f005 fb73 	bl	8011f78 <uxr_next_input_reliable_buffer_available>
 800c892:	4603      	mov	r3, r0
 800c894:	a914      	add	r1, sp, #80	; 0x50
 800c896:	4620      	mov	r0, r4
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d1ea      	bne.n	800c872 <wait_session_status+0x11e>
 800c89c:	4632      	mov	r2, r6
 800c89e:	9904      	ldr	r1, [sp, #16]
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	f7ff fa59 	bl	800bd58 <write_submessage_acknack.isra.0>
 800c8a6:	e76f      	b.n	800c788 <wait_session_status+0x34>
 800c8a8:	4631      	mov	r1, r6
 800c8aa:	f104 0008 	add.w	r0, r4, #8
 800c8ae:	f001 f823 	bl	800d8f8 <uxr_get_input_best_effort_stream>
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	f43f af68 	beq.w	800c788 <wait_session_status+0x34>
 800c8b8:	9902      	ldr	r1, [sp, #8]
 800c8ba:	f005 fa51 	bl	8011d60 <uxr_receive_best_effort_message>
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	f43f af62 	beq.w	800c788 <wait_session_status+0x34>
 800c8c4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800c8c8:	a90c      	add	r1, sp, #48	; 0x30
 800c8ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f7ff fbc9 	bl	800c064 <read_submessage_list>
 800c8d2:	e759      	b.n	800c788 <wait_session_status+0x34>
 800c8d4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c8d6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800c8da:	47a0      	blx	r4
 800c8dc:	2001      	movs	r0, #1
 800c8de:	b01d      	add	sp, #116	; 0x74
 800c8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8e4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800c8e8:	a90c      	add	r1, sp, #48	; 0x30
 800c8ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f7ff fbb9 	bl	800c064 <read_submessage_list>
 800c8f2:	e7bc      	b.n	800c86e <wait_session_status+0x11a>

0800c8f4 <uxr_delete_session_retries>:
 800c8f4:	b530      	push	{r4, r5, lr}
 800c8f6:	b08f      	sub	sp, #60	; 0x3c
 800c8f8:	4604      	mov	r4, r0
 800c8fa:	460d      	mov	r5, r1
 800c8fc:	f000 fa34 	bl	800cd68 <uxr_session_header_offset>
 800c900:	2300      	movs	r3, #0
 800c902:	2210      	movs	r2, #16
 800c904:	a902      	add	r1, sp, #8
 800c906:	9000      	str	r0, [sp, #0]
 800c908:	a806      	add	r0, sp, #24
 800c90a:	f7fb fd41 	bl	8008390 <ucdr_init_buffer_origin_offset>
 800c90e:	a906      	add	r1, sp, #24
 800c910:	4620      	mov	r0, r4
 800c912:	f000 f979 	bl	800cc08 <uxr_buffer_delete_session>
 800c916:	2200      	movs	r2, #0
 800c918:	9b06      	ldr	r3, [sp, #24]
 800c91a:	4620      	mov	r0, r4
 800c91c:	4611      	mov	r1, r2
 800c91e:	f000 f9cf 	bl	800ccc0 <uxr_stamp_session_header>
 800c922:	a806      	add	r0, sp, #24
 800c924:	f7fb fd74 	bl	8008410 <ucdr_buffer_length>
 800c928:	462b      	mov	r3, r5
 800c92a:	4602      	mov	r2, r0
 800c92c:	a902      	add	r1, sp, #8
 800c92e:	4620      	mov	r0, r4
 800c930:	f7ff ff10 	bl	800c754 <wait_session_status>
 800c934:	b118      	cbz	r0, 800c93e <uxr_delete_session_retries+0x4a>
 800c936:	7960      	ldrb	r0, [r4, #5]
 800c938:	fab0 f080 	clz	r0, r0
 800c93c:	0940      	lsrs	r0, r0, #5
 800c93e:	b00f      	add	sp, #60	; 0x3c
 800c940:	bd30      	pop	{r4, r5, pc}
 800c942:	bf00      	nop

0800c944 <uxr_create_session>:
 800c944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c948:	f100 0b08 	add.w	fp, r0, #8
 800c94c:	4604      	mov	r4, r0
 800c94e:	b0ab      	sub	sp, #172	; 0xac
 800c950:	4658      	mov	r0, fp
 800c952:	465e      	mov	r6, fp
 800c954:	f000 ff22 	bl	800d79c <uxr_reset_stream_storage>
 800c958:	4620      	mov	r0, r4
 800c95a:	f000 fa05 	bl	800cd68 <uxr_session_header_offset>
 800c95e:	2300      	movs	r3, #0
 800c960:	221c      	movs	r2, #28
 800c962:	a90b      	add	r1, sp, #44	; 0x2c
 800c964:	9000      	str	r0, [sp, #0]
 800c966:	a812      	add	r0, sp, #72	; 0x48
 800c968:	f7fb fd12 	bl	8008390 <ucdr_init_buffer_origin_offset>
 800c96c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c96e:	a912      	add	r1, sp, #72	; 0x48
 800c970:	4620      	mov	r0, r4
 800c972:	8a1a      	ldrh	r2, [r3, #16]
 800c974:	3a04      	subs	r2, #4
 800c976:	b292      	uxth	r2, r2
 800c978:	f000 f91c 	bl	800cbb4 <uxr_buffer_create_session>
 800c97c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c97e:	4620      	mov	r0, r4
 800c980:	f000 f98a 	bl	800cc98 <uxr_stamp_create_session_header>
 800c984:	a812      	add	r0, sp, #72	; 0x48
 800c986:	f7fb fd43 	bl	8008410 <ucdr_buffer_length>
 800c98a:	23ff      	movs	r3, #255	; 0xff
 800c98c:	4681      	mov	r9, r0
 800c98e:	7163      	strb	r3, [r4, #5]
 800c990:	230a      	movs	r3, #10
 800c992:	9303      	str	r3, [sp, #12]
 800c994:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c996:	464a      	mov	r2, r9
 800c998:	a90b      	add	r1, sp, #44	; 0x2c
 800c99a:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c99e:	47a8      	blx	r5
 800c9a0:	f001 f81c 	bl	800d9dc <uxr_millis>
 800c9a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c9a8:	4605      	mov	r5, r0
 800c9aa:	e009      	b.n	800c9c0 <uxr_create_session+0x7c>
 800c9ac:	f001 f816 	bl	800d9dc <uxr_millis>
 800c9b0:	1b40      	subs	r0, r0, r5
 800c9b2:	7962      	ldrb	r2, [r4, #5]
 800c9b4:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	dd38      	ble.n	800ca2e <uxr_create_session+0xea>
 800c9bc:	2aff      	cmp	r2, #255	; 0xff
 800c9be:	d13c      	bne.n	800ca3a <uxr_create_session+0xf6>
 800c9c0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800c9c2:	a907      	add	r1, sp, #28
 800c9c4:	6897      	ldr	r7, [r2, #8]
 800c9c6:	6810      	ldr	r0, [r2, #0]
 800c9c8:	aa08      	add	r2, sp, #32
 800c9ca:	47b8      	blx	r7
 800c9cc:	2800      	cmp	r0, #0
 800c9ce:	d0ed      	beq.n	800c9ac <uxr_create_session+0x68>
 800c9d0:	a81a      	add	r0, sp, #104	; 0x68
 800c9d2:	2700      	movs	r7, #0
 800c9d4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800c9d8:	f7fb fcec 	bl	80083b4 <ucdr_init_buffer>
 800c9dc:	f10d 031a 	add.w	r3, sp, #26
 800c9e0:	aa06      	add	r2, sp, #24
 800c9e2:	a91a      	add	r1, sp, #104	; 0x68
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	f88d 7018 	strb.w	r7, [sp, #24]
 800c9ea:	f000 f97d 	bl	800cce8 <uxr_read_session_header>
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	d0dc      	beq.n	800c9ac <uxr_create_session+0x68>
 800c9f2:	4639      	mov	r1, r7
 800c9f4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800c9f8:	f000 fe9a 	bl	800d730 <uxr_stream_id_from_raw>
 800c9fc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800ca00:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 800ca04:	f3c0 2807 	ubfx	r8, r0, #8, #8
 800ca08:	2f01      	cmp	r7, #1
 800ca0a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800ca0e:	d053      	beq.n	800cab8 <uxr_create_session+0x174>
 800ca10:	2f02      	cmp	r7, #2
 800ca12:	d018      	beq.n	800ca46 <uxr_create_session+0x102>
 800ca14:	2f00      	cmp	r7, #0
 800ca16:	d1c9      	bne.n	800c9ac <uxr_create_session+0x68>
 800ca18:	4639      	mov	r1, r7
 800ca1a:	4638      	mov	r0, r7
 800ca1c:	f000 fe88 	bl	800d730 <uxr_stream_id_from_raw>
 800ca20:	a91a      	add	r1, sp, #104	; 0x68
 800ca22:	4602      	mov	r2, r0
 800ca24:	900a      	str	r0, [sp, #40]	; 0x28
 800ca26:	4620      	mov	r0, r4
 800ca28:	f7ff fb1c 	bl	800c064 <read_submessage_list>
 800ca2c:	e7be      	b.n	800c9ac <uxr_create_session+0x68>
 800ca2e:	9b03      	ldr	r3, [sp, #12]
 800ca30:	3b01      	subs	r3, #1
 800ca32:	9303      	str	r3, [sp, #12]
 800ca34:	d001      	beq.n	800ca3a <uxr_create_session+0xf6>
 800ca36:	2aff      	cmp	r2, #255	; 0xff
 800ca38:	d0ac      	beq.n	800c994 <uxr_create_session+0x50>
 800ca3a:	2a00      	cmp	r2, #0
 800ca3c:	d051      	beq.n	800cae2 <uxr_create_session+0x19e>
 800ca3e:	2000      	movs	r0, #0
 800ca40:	b02b      	add	sp, #172	; 0xac
 800ca42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca46:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800ca4a:	4641      	mov	r1, r8
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	9304      	str	r3, [sp, #16]
 800ca50:	f000 ff5c 	bl	800d90c <uxr_get_input_reliable_stream>
 800ca54:	4682      	mov	sl, r0
 800ca56:	b348      	cbz	r0, 800caac <uxr_create_session+0x168>
 800ca58:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ca5a:	a81a      	add	r0, sp, #104	; 0x68
 800ca5c:	9205      	str	r2, [sp, #20]
 800ca5e:	f7fb fcdb 	bl	8008418 <ucdr_buffer_remaining>
 800ca62:	4603      	mov	r3, r0
 800ca64:	f10d 0019 	add.w	r0, sp, #25
 800ca68:	9a05      	ldr	r2, [sp, #20]
 800ca6a:	4659      	mov	r1, fp
 800ca6c:	9000      	str	r0, [sp, #0]
 800ca6e:	4650      	mov	r0, sl
 800ca70:	f005 fa00 	bl	8011e74 <uxr_receive_reliable_message>
 800ca74:	b1d0      	cbz	r0, 800caac <uxr_create_session+0x168>
 800ca76:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d038      	beq.n	800caf0 <uxr_create_session+0x1ac>
 800ca7e:	9f04      	ldr	r7, [sp, #16]
 800ca80:	e00a      	b.n	800ca98 <uxr_create_session+0x154>
 800ca82:	f04f 0302 	mov.w	r3, #2
 800ca86:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 800ca8a:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 800ca8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca94:	f7ff fae6 	bl	800c064 <read_submessage_list>
 800ca98:	a922      	add	r1, sp, #136	; 0x88
 800ca9a:	2204      	movs	r2, #4
 800ca9c:	4650      	mov	r0, sl
 800ca9e:	f005 fa6b 	bl	8011f78 <uxr_next_input_reliable_buffer_available>
 800caa2:	4603      	mov	r3, r0
 800caa4:	a922      	add	r1, sp, #136	; 0x88
 800caa6:	4620      	mov	r0, r4
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d1ea      	bne.n	800ca82 <uxr_create_session+0x13e>
 800caac:	4642      	mov	r2, r8
 800caae:	9904      	ldr	r1, [sp, #16]
 800cab0:	4620      	mov	r0, r4
 800cab2:	f7ff f951 	bl	800bd58 <write_submessage_acknack.isra.0>
 800cab6:	e779      	b.n	800c9ac <uxr_create_session+0x68>
 800cab8:	4641      	mov	r1, r8
 800caba:	4630      	mov	r0, r6
 800cabc:	f000 ff1c 	bl	800d8f8 <uxr_get_input_best_effort_stream>
 800cac0:	2800      	cmp	r0, #0
 800cac2:	f43f af73 	beq.w	800c9ac <uxr_create_session+0x68>
 800cac6:	4659      	mov	r1, fp
 800cac8:	f005 f94a 	bl	8011d60 <uxr_receive_best_effort_message>
 800cacc:	2800      	cmp	r0, #0
 800cace:	f43f af6d 	beq.w	800c9ac <uxr_create_session+0x68>
 800cad2:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 800cad6:	a91a      	add	r1, sp, #104	; 0x68
 800cad8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cada:	4620      	mov	r0, r4
 800cadc:	f7ff fac2 	bl	800c064 <read_submessage_list>
 800cae0:	e764      	b.n	800c9ac <uxr_create_session+0x68>
 800cae2:	4630      	mov	r0, r6
 800cae4:	f000 fe5a 	bl	800d79c <uxr_reset_stream_storage>
 800cae8:	2001      	movs	r0, #1
 800caea:	b02b      	add	sp, #172	; 0xac
 800caec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caf0:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 800caf4:	a91a      	add	r1, sp, #104	; 0x68
 800caf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800caf8:	4620      	mov	r0, r4
 800cafa:	f7ff fab3 	bl	800c064 <read_submessage_list>
 800cafe:	e7be      	b.n	800ca7e <uxr_create_session+0x13a>

0800cb00 <uxr_prepare_stream_to_write_submessage>:
 800cb00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb04:	b082      	sub	sp, #8
 800cb06:	4604      	mov	r4, r0
 800cb08:	4610      	mov	r0, r2
 800cb0a:	4615      	mov	r5, r2
 800cb0c:	461e      	mov	r6, r3
 800cb0e:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 800cb12:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800cb16:	f105 0904 	add.w	r9, r5, #4
 800cb1a:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800cb1e:	9101      	str	r1, [sp, #4]
 800cb20:	f000 ff56 	bl	800d9d0 <uxr_submessage_padding>
 800cb24:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cb28:	4481      	add	r9, r0
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d01d      	beq.n	800cb6a <uxr_prepare_stream_to_write_submessage+0x6a>
 800cb2e:	2b02      	cmp	r3, #2
 800cb30:	d116      	bne.n	800cb60 <uxr_prepare_stream_to_write_submessage+0x60>
 800cb32:	f104 0008 	add.w	r0, r4, #8
 800cb36:	4651      	mov	r1, sl
 800cb38:	f000 fed2 	bl	800d8e0 <uxr_get_output_reliable_stream>
 800cb3c:	4604      	mov	r4, r0
 800cb3e:	b158      	cbz	r0, 800cb58 <uxr_prepare_stream_to_write_submessage+0x58>
 800cb40:	4649      	mov	r1, r9
 800cb42:	4632      	mov	r2, r6
 800cb44:	f005 fbde 	bl	8012304 <uxr_prepare_reliable_buffer_to_write>
 800cb48:	4604      	mov	r4, r0
 800cb4a:	b12c      	cbz	r4, 800cb58 <uxr_prepare_stream_to_write_submessage+0x58>
 800cb4c:	4643      	mov	r3, r8
 800cb4e:	b2aa      	uxth	r2, r5
 800cb50:	4639      	mov	r1, r7
 800cb52:	4630      	mov	r0, r6
 800cb54:	f000 fefc 	bl	800d950 <uxr_buffer_submessage_header>
 800cb58:	4620      	mov	r0, r4
 800cb5a:	b002      	add	sp, #8
 800cb5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb60:	2400      	movs	r4, #0
 800cb62:	4620      	mov	r0, r4
 800cb64:	b002      	add	sp, #8
 800cb66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb6a:	f104 0008 	add.w	r0, r4, #8
 800cb6e:	4651      	mov	r1, sl
 800cb70:	f000 feae 	bl	800d8d0 <uxr_get_output_best_effort_stream>
 800cb74:	4604      	mov	r4, r0
 800cb76:	2800      	cmp	r0, #0
 800cb78:	d0ee      	beq.n	800cb58 <uxr_prepare_stream_to_write_submessage+0x58>
 800cb7a:	4649      	mov	r1, r9
 800cb7c:	4632      	mov	r2, r6
 800cb7e:	f005 faeb 	bl	8012158 <uxr_prepare_best_effort_buffer_to_write>
 800cb82:	4604      	mov	r4, r0
 800cb84:	e7e1      	b.n	800cb4a <uxr_prepare_stream_to_write_submessage+0x4a>
 800cb86:	bf00      	nop

0800cb88 <uxr_init_session_info>:
 800cb88:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 800cb8c:	23ff      	movs	r3, #255	; 0xff
 800cb8e:	7102      	strb	r2, [r0, #4]
 800cb90:	f880 c001 	strb.w	ip, [r0, #1]
 800cb94:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800cb98:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800cb9c:	7001      	strb	r1, [r0, #0]
 800cb9e:	f880 c002 	strb.w	ip, [r0, #2]
 800cba2:	7143      	strb	r3, [r0, #5]
 800cba4:	70c2      	strb	r2, [r0, #3]
 800cba6:	b500      	push	{lr}
 800cba8:	f04f 0e09 	mov.w	lr, #9
 800cbac:	f8a0 e006 	strh.w	lr, [r0, #6]
 800cbb0:	f85d fb04 	ldr.w	pc, [sp], #4

0800cbb4 <uxr_buffer_create_session>:
 800cbb4:	b530      	push	{r4, r5, lr}
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	b089      	sub	sp, #36	; 0x24
 800cbba:	4d12      	ldr	r5, [pc, #72]	; (800cc04 <uxr_buffer_create_session+0x50>)
 800cbbc:	460c      	mov	r4, r1
 800cbbe:	9307      	str	r3, [sp, #28]
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	f8ad 201c 	strh.w	r2, [sp, #28]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	9301      	str	r3, [sp, #4]
 800cbca:	80c2      	strh	r2, [r0, #6]
 800cbcc:	f88d 2004 	strb.w	r2, [sp, #4]
 800cbd0:	682a      	ldr	r2, [r5, #0]
 800cbd2:	9303      	str	r3, [sp, #12]
 800cbd4:	9200      	str	r2, [sp, #0]
 800cbd6:	88aa      	ldrh	r2, [r5, #4]
 800cbd8:	9306      	str	r3, [sp, #24]
 800cbda:	f8ad 2006 	strh.w	r2, [sp, #6]
 800cbde:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800cbe2:	9202      	str	r2, [sp, #8]
 800cbe4:	7802      	ldrb	r2, [r0, #0]
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	f88d 200c 	strb.w	r2, [sp, #12]
 800cbec:	2210      	movs	r2, #16
 800cbee:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800cbf2:	f000 fead 	bl	800d950 <uxr_buffer_submessage_header>
 800cbf6:	4669      	mov	r1, sp
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f001 fb89 	bl	800e310 <uxr_serialize_CREATE_CLIENT_Payload>
 800cbfe:	b009      	add	sp, #36	; 0x24
 800cc00:	bd30      	pop	{r4, r5, pc}
 800cc02:	bf00      	nop
 800cc04:	080147ec 	.word	0x080147ec

0800cc08 <uxr_buffer_delete_session>:
 800cc08:	4a0c      	ldr	r2, [pc, #48]	; (800cc3c <uxr_buffer_delete_session+0x34>)
 800cc0a:	2302      	movs	r3, #2
 800cc0c:	f44f 7c00 	mov.w	ip, #512	; 0x200
 800cc10:	b510      	push	{r4, lr}
 800cc12:	460c      	mov	r4, r1
 800cc14:	b082      	sub	sp, #8
 800cc16:	8911      	ldrh	r1, [r2, #8]
 800cc18:	2204      	movs	r2, #4
 800cc1a:	80c3      	strh	r3, [r0, #6]
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	f8ad 1006 	strh.w	r1, [sp, #6]
 800cc22:	4620      	mov	r0, r4
 800cc24:	2103      	movs	r1, #3
 800cc26:	f8ad c004 	strh.w	ip, [sp, #4]
 800cc2a:	f000 fe91 	bl	800d950 <uxr_buffer_submessage_header>
 800cc2e:	a901      	add	r1, sp, #4
 800cc30:	4620      	mov	r0, r4
 800cc32:	f001 fc15 	bl	800e460 <uxr_serialize_DELETE_Payload>
 800cc36:	b002      	add	sp, #8
 800cc38:	bd10      	pop	{r4, pc}
 800cc3a:	bf00      	nop
 800cc3c:	080147ec 	.word	0x080147ec

0800cc40 <uxr_read_create_session_status>:
 800cc40:	b510      	push	{r4, lr}
 800cc42:	460b      	mov	r3, r1
 800cc44:	b088      	sub	sp, #32
 800cc46:	4604      	mov	r4, r0
 800cc48:	a901      	add	r1, sp, #4
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f001 fc18 	bl	800e480 <uxr_deserialize_STATUS_AGENT_Payload>
 800cc50:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cc54:	7163      	strb	r3, [r4, #5]
 800cc56:	b008      	add	sp, #32
 800cc58:	bd10      	pop	{r4, pc}
 800cc5a:	bf00      	nop

0800cc5c <uxr_read_delete_session_status>:
 800cc5c:	b510      	push	{r4, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	4604      	mov	r4, r0
 800cc62:	4608      	mov	r0, r1
 800cc64:	a902      	add	r1, sp, #8
 800cc66:	f001 fc3b 	bl	800e4e0 <uxr_deserialize_STATUS_Payload>
 800cc6a:	88e3      	ldrh	r3, [r4, #6]
 800cc6c:	2b02      	cmp	r3, #2
 800cc6e:	d001      	beq.n	800cc74 <uxr_read_delete_session_status+0x18>
 800cc70:	b004      	add	sp, #16
 800cc72:	bd10      	pop	{r4, pc}
 800cc74:	f10d 000a 	add.w	r0, sp, #10
 800cc78:	f7fe fec4 	bl	800ba04 <uxr_object_id_from_raw>
 800cc7c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800cc80:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800cc84:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	2b02      	cmp	r3, #2
 800cc8c:	d1f0      	bne.n	800cc70 <uxr_read_delete_session_status+0x14>
 800cc8e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800cc92:	7163      	strb	r3, [r4, #5]
 800cc94:	e7ec      	b.n	800cc70 <uxr_read_delete_session_status+0x14>
 800cc96:	bf00      	nop

0800cc98 <uxr_stamp_create_session_header>:
 800cc98:	b510      	push	{r4, lr}
 800cc9a:	2208      	movs	r2, #8
 800cc9c:	b08a      	sub	sp, #40	; 0x28
 800cc9e:	4604      	mov	r4, r0
 800cca0:	eb0d 0002 	add.w	r0, sp, r2
 800cca4:	f7fb fb86 	bl	80083b4 <ucdr_init_buffer>
 800cca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccac:	2300      	movs	r3, #0
 800ccae:	a802      	add	r0, sp, #8
 800ccb0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800ccb4:	9400      	str	r4, [sp, #0]
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	f000 fef2 	bl	800daa0 <uxr_serialize_message_header>
 800ccbc:	b00a      	add	sp, #40	; 0x28
 800ccbe:	bd10      	pop	{r4, pc}

0800ccc0 <uxr_stamp_session_header>:
 800ccc0:	b530      	push	{r4, r5, lr}
 800ccc2:	b08d      	sub	sp, #52	; 0x34
 800ccc4:	4604      	mov	r4, r0
 800ccc6:	460d      	mov	r5, r1
 800ccc8:	4619      	mov	r1, r3
 800ccca:	a804      	add	r0, sp, #16
 800cccc:	9203      	str	r2, [sp, #12]
 800ccce:	2208      	movs	r2, #8
 800ccd0:	f7fb fb70 	bl	80083b4 <ucdr_init_buffer>
 800ccd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccd8:	9b03      	ldr	r3, [sp, #12]
 800ccda:	462a      	mov	r2, r5
 800ccdc:	a804      	add	r0, sp, #16
 800ccde:	9400      	str	r4, [sp, #0]
 800cce0:	f000 fede 	bl	800daa0 <uxr_serialize_message_header>
 800cce4:	b00d      	add	sp, #52	; 0x34
 800cce6:	bd30      	pop	{r4, r5, pc}

0800cce8 <uxr_read_session_header>:
 800cce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccec:	4607      	mov	r7, r0
 800ccee:	b084      	sub	sp, #16
 800ccf0:	4608      	mov	r0, r1
 800ccf2:	460c      	mov	r4, r1
 800ccf4:	4615      	mov	r5, r2
 800ccf6:	461e      	mov	r6, r3
 800ccf8:	f7fb fb8e 	bl	8008418 <ucdr_buffer_remaining>
 800ccfc:	2808      	cmp	r0, #8
 800ccfe:	d803      	bhi.n	800cd08 <uxr_read_session_header+0x20>
 800cd00:	2000      	movs	r0, #0
 800cd02:	b004      	add	sp, #16
 800cd04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd08:	f10d 080c 	add.w	r8, sp, #12
 800cd0c:	4633      	mov	r3, r6
 800cd0e:	462a      	mov	r2, r5
 800cd10:	4620      	mov	r0, r4
 800cd12:	f10d 010b 	add.w	r1, sp, #11
 800cd16:	f8cd 8000 	str.w	r8, [sp]
 800cd1a:	f000 fedf 	bl	800dadc <uxr_deserialize_message_header>
 800cd1e:	783a      	ldrb	r2, [r7, #0]
 800cd20:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d1eb      	bne.n	800cd00 <uxr_read_session_header+0x18>
 800cd28:	061b      	lsls	r3, r3, #24
 800cd2a:	d41b      	bmi.n	800cd64 <uxr_read_session_header+0x7c>
 800cd2c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800cd30:	787b      	ldrb	r3, [r7, #1]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d003      	beq.n	800cd3e <uxr_read_session_header+0x56>
 800cd36:	2001      	movs	r0, #1
 800cd38:	f080 0001 	eor.w	r0, r0, #1
 800cd3c:	e7e1      	b.n	800cd02 <uxr_read_session_header+0x1a>
 800cd3e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800cd42:	1cb8      	adds	r0, r7, #2
 800cd44:	78bb      	ldrb	r3, [r7, #2]
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d1f5      	bne.n	800cd36 <uxr_read_session_header+0x4e>
 800cd4a:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800cd4e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d1ef      	bne.n	800cd36 <uxr_read_session_header+0x4e>
 800cd56:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800cd5a:	7843      	ldrb	r3, [r0, #1]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d1ea      	bne.n	800cd36 <uxr_read_session_header+0x4e>
 800cd60:	2000      	movs	r0, #0
 800cd62:	e7e9      	b.n	800cd38 <uxr_read_session_header+0x50>
 800cd64:	2001      	movs	r0, #1
 800cd66:	e7cc      	b.n	800cd02 <uxr_read_session_header+0x1a>

0800cd68 <uxr_session_header_offset>:
 800cd68:	f990 3000 	ldrsb.w	r3, [r0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	bfac      	ite	ge
 800cd70:	2008      	movge	r0, #8
 800cd72:	2004      	movlt	r0, #4
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop

0800cd78 <uxr_init_base_object_request>:
 800cd78:	b510      	push	{r4, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800cd80:	9101      	str	r1, [sp, #4]
 800cd82:	88c3      	ldrh	r3, [r0, #6]
 800cd84:	f1a3 010a 	sub.w	r1, r3, #10
 800cd88:	b289      	uxth	r1, r1
 800cd8a:	42a1      	cmp	r1, r4
 800cd8c:	d80f      	bhi.n	800cdae <uxr_init_base_object_request+0x36>
 800cd8e:	3301      	adds	r3, #1
 800cd90:	b29c      	uxth	r4, r3
 800cd92:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 800cd96:	b2db      	uxtb	r3, r3
 800cd98:	80c4      	strh	r4, [r0, #6]
 800cd9a:	1c91      	adds	r1, r2, #2
 800cd9c:	9801      	ldr	r0, [sp, #4]
 800cd9e:	f882 c000 	strb.w	ip, [r2]
 800cda2:	7053      	strb	r3, [r2, #1]
 800cda4:	f7fe fe42 	bl	800ba2c <uxr_object_id_to_raw>
 800cda8:	4620      	mov	r0, r4
 800cdaa:	b002      	add	sp, #8
 800cdac:	bd10      	pop	{r4, pc}
 800cdae:	230a      	movs	r3, #10
 800cdb0:	f04f 0c00 	mov.w	ip, #0
 800cdb4:	461c      	mov	r4, r3
 800cdb6:	e7ef      	b.n	800cd98 <uxr_init_base_object_request+0x20>

0800cdb8 <uxr_parse_base_object_request>:
 800cdb8:	b570      	push	{r4, r5, r6, lr}
 800cdba:	4604      	mov	r4, r0
 800cdbc:	3002      	adds	r0, #2
 800cdbe:	460d      	mov	r5, r1
 800cdc0:	4616      	mov	r6, r2
 800cdc2:	f7fe fe1f 	bl	800ba04 <uxr_object_id_from_raw>
 800cdc6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800cdca:	8028      	strh	r0, [r5, #0]
 800cdcc:	806b      	strh	r3, [r5, #2]
 800cdce:	7822      	ldrb	r2, [r4, #0]
 800cdd0:	7863      	ldrb	r3, [r4, #1]
 800cdd2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800cdd6:	8033      	strh	r3, [r6, #0]
 800cdd8:	bd70      	pop	{r4, r5, r6, pc}
 800cdda:	bf00      	nop

0800cddc <uxr_init_framing_io>:
 800cddc:	2300      	movs	r3, #0
 800cdde:	7041      	strb	r1, [r0, #1]
 800cde0:	7003      	strb	r3, [r0, #0]
 800cde2:	8583      	strh	r3, [r0, #44]	; 0x2c
 800cde4:	4770      	bx	lr
 800cde6:	bf00      	nop

0800cde8 <uxr_write_framed_msg>:
 800cde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdec:	4617      	mov	r7, r2
 800cdee:	7842      	ldrb	r2, [r0, #1]
 800cdf0:	460e      	mov	r6, r1
 800cdf2:	b083      	sub	sp, #12
 800cdf4:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 800cdf8:	469b      	mov	fp, r3
 800cdfa:	237e      	movs	r3, #126	; 0x7e
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	2901      	cmp	r1, #1
 800ce00:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800ce04:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800ce08:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 800ce0c:	f240 8115 	bls.w	800d03a <uxr_write_framed_msg+0x252>
 800ce10:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 800ce14:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 800ce18:	2202      	movs	r2, #2
 800ce1a:	2901      	cmp	r1, #1
 800ce1c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800ce20:	d952      	bls.n	800cec8 <uxr_write_framed_msg+0xe0>
 800ce22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce24:	2103      	movs	r1, #3
 800ce26:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 800ce2a:	b2dd      	uxtb	r5, r3
 800ce2c:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 800ce30:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 800ce34:	2a01      	cmp	r2, #1
 800ce36:	d95c      	bls.n	800cef2 <uxr_write_framed_msg+0x10a>
 800ce38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce3a:	1862      	adds	r2, r4, r1
 800ce3c:	3101      	adds	r1, #1
 800ce3e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800ce42:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 800ce46:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 800ce4a:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 800ce4e:	2a01      	cmp	r2, #1
 800ce50:	d961      	bls.n	800cf16 <uxr_write_framed_msg+0x12e>
 800ce52:	1c4a      	adds	r2, r1, #1
 800ce54:	4421      	add	r1, r4
 800ce56:	b2d2      	uxtb	r2, r2
 800ce58:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 800ce5c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d06a      	beq.n	800cf3a <uxr_write_framed_msg+0x152>
 800ce64:	f04f 0800 	mov.w	r8, #0
 800ce68:	46c1      	mov	r9, r8
 800ce6a:	e016      	b.n	800ce9a <uxr_write_framed_msg+0xb2>
 800ce6c:	2a29      	cmp	r2, #41	; 0x29
 800ce6e:	d868      	bhi.n	800cf42 <uxr_write_framed_msg+0x15a>
 800ce70:	18a0      	adds	r0, r4, r2
 800ce72:	3201      	adds	r2, #1
 800ce74:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800ce78:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800ce7c:	ea88 0101 	eor.w	r1, r8, r1
 800ce80:	4b7d      	ldr	r3, [pc, #500]	; (800d078 <uxr_write_framed_msg+0x290>)
 800ce82:	f109 0901 	add.w	r9, r9, #1
 800ce86:	b2c9      	uxtb	r1, r1
 800ce88:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 800ce8c:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 800ce90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce92:	454b      	cmp	r3, r9
 800ce94:	d969      	bls.n	800cf6a <uxr_write_framed_msg+0x182>
 800ce96:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800ce9a:	f81b 1009 	ldrb.w	r1, [fp, r9]
 800ce9e:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 800cea2:	2801      	cmp	r0, #1
 800cea4:	d8e2      	bhi.n	800ce6c <uxr_write_framed_msg+0x84>
 800cea6:	1c50      	adds	r0, r2, #1
 800cea8:	b2c0      	uxtb	r0, r0
 800ceaa:	2829      	cmp	r0, #41	; 0x29
 800ceac:	d849      	bhi.n	800cf42 <uxr_write_framed_msg+0x15a>
 800ceae:	18a0      	adds	r0, r4, r2
 800ceb0:	f04f 037d 	mov.w	r3, #125	; 0x7d
 800ceb4:	3202      	adds	r2, #2
 800ceb6:	f081 0520 	eor.w	r5, r1, #32
 800ceba:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800cebe:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 800cec2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800cec6:	e7d9      	b.n	800ce7c <uxr_write_framed_msg+0x94>
 800cec8:	2104      	movs	r1, #4
 800ceca:	f04f 0c03 	mov.w	ip, #3
 800cece:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ced0:	4422      	add	r2, r4
 800ced2:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 800ced6:	44a4      	add	ip, r4
 800ced8:	b2dd      	uxtb	r5, r3
 800ceda:	f080 0020 	eor.w	r0, r0, #32
 800cede:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 800cee2:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 800cee6:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 800ceea:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 800ceee:	2a01      	cmp	r2, #1
 800cef0:	d8a2      	bhi.n	800ce38 <uxr_write_framed_msg+0x50>
 800cef2:	1862      	adds	r2, r4, r1
 800cef4:	207d      	movs	r0, #125	; 0x7d
 800cef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cef8:	f085 0520 	eor.w	r5, r5, #32
 800cefc:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 800cf00:	3102      	adds	r1, #2
 800cf02:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800cf06:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 800cf0a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 800cf0e:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 800cf12:	2a01      	cmp	r2, #1
 800cf14:	d89d      	bhi.n	800ce52 <uxr_write_framed_msg+0x6a>
 800cf16:	1c4d      	adds	r5, r1, #1
 800cf18:	1c8a      	adds	r2, r1, #2
 800cf1a:	f080 0020 	eor.w	r0, r0, #32
 800cf1e:	4421      	add	r1, r4
 800cf20:	fa54 f585 	uxtab	r5, r4, r5
 800cf24:	b2d2      	uxtb	r2, r2
 800cf26:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 800cf2a:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 800cf2e:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 800cf32:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d194      	bne.n	800ce64 <uxr_write_framed_msg+0x7c>
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	f8ad 3004 	strh.w	r3, [sp, #4]
 800cf40:	e019      	b.n	800cf76 <uxr_write_framed_msg+0x18e>
 800cf42:	2500      	movs	r5, #0
 800cf44:	e000      	b.n	800cf48 <uxr_write_framed_msg+0x160>
 800cf46:	b160      	cbz	r0, 800cf62 <uxr_write_framed_msg+0x17a>
 800cf48:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800cf4c:	1b52      	subs	r2, r2, r5
 800cf4e:	4653      	mov	r3, sl
 800cf50:	4638      	mov	r0, r7
 800cf52:	4421      	add	r1, r4
 800cf54:	47b0      	blx	r6
 800cf56:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800cf5a:	4405      	add	r5, r0
 800cf5c:	4295      	cmp	r5, r2
 800cf5e:	d3f2      	bcc.n	800cf46 <uxr_write_framed_msg+0x15e>
 800cf60:	d066      	beq.n	800d030 <uxr_write_framed_msg+0x248>
 800cf62:	2000      	movs	r0, #0
 800cf64:	b003      	add	sp, #12
 800cf66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf6a:	fa5f f188 	uxtb.w	r1, r8
 800cf6e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800cf72:	f8ad 8004 	strh.w	r8, [sp, #4]
 800cf76:	f04f 0900 	mov.w	r9, #0
 800cf7a:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 800cf7e:	46c8      	mov	r8, r9
 800cf80:	e013      	b.n	800cfaa <uxr_write_framed_msg+0x1c2>
 800cf82:	2a29      	cmp	r2, #41	; 0x29
 800cf84:	d824      	bhi.n	800cfd0 <uxr_write_framed_msg+0x1e8>
 800cf86:	18a3      	adds	r3, r4, r2
 800cf88:	3201      	adds	r2, #1
 800cf8a:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 800cf8e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800cf92:	f109 0901 	add.w	r9, r9, #1
 800cf96:	f1b9 0f02 	cmp.w	r9, #2
 800cf9a:	d02d      	beq.n	800cff8 <uxr_write_framed_msg+0x210>
 800cf9c:	f109 0308 	add.w	r3, r9, #8
 800cfa0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800cfa4:	446b      	add	r3, sp
 800cfa6:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 800cfaa:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d8e7      	bhi.n	800cf82 <uxr_write_framed_msg+0x19a>
 800cfb2:	1c53      	adds	r3, r2, #1
 800cfb4:	b2db      	uxtb	r3, r3
 800cfb6:	2b29      	cmp	r3, #41	; 0x29
 800cfb8:	d80a      	bhi.n	800cfd0 <uxr_write_framed_msg+0x1e8>
 800cfba:	18a3      	adds	r3, r4, r2
 800cfbc:	f081 0120 	eor.w	r1, r1, #32
 800cfc0:	3202      	adds	r2, #2
 800cfc2:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 800cfc6:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 800cfca:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800cfce:	e7e0      	b.n	800cf92 <uxr_write_framed_msg+0x1aa>
 800cfd0:	2500      	movs	r5, #0
 800cfd2:	e001      	b.n	800cfd8 <uxr_write_framed_msg+0x1f0>
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	d0c4      	beq.n	800cf62 <uxr_write_framed_msg+0x17a>
 800cfd8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800cfdc:	1b52      	subs	r2, r2, r5
 800cfde:	4653      	mov	r3, sl
 800cfe0:	4638      	mov	r0, r7
 800cfe2:	4421      	add	r1, r4
 800cfe4:	47b0      	blx	r6
 800cfe6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800cfea:	4405      	add	r5, r0
 800cfec:	4295      	cmp	r5, r2
 800cfee:	d3f1      	bcc.n	800cfd4 <uxr_write_framed_msg+0x1ec>
 800cff0:	d1b7      	bne.n	800cf62 <uxr_write_framed_msg+0x17a>
 800cff2:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 800cff6:	e7d1      	b.n	800cf9c <uxr_write_framed_msg+0x1b4>
 800cff8:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800cffc:	b19a      	cbz	r2, 800d026 <uxr_write_framed_msg+0x23e>
 800cffe:	2500      	movs	r5, #0
 800d000:	e001      	b.n	800d006 <uxr_write_framed_msg+0x21e>
 800d002:	2800      	cmp	r0, #0
 800d004:	d0ad      	beq.n	800cf62 <uxr_write_framed_msg+0x17a>
 800d006:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800d00a:	1b52      	subs	r2, r2, r5
 800d00c:	4653      	mov	r3, sl
 800d00e:	4638      	mov	r0, r7
 800d010:	4421      	add	r1, r4
 800d012:	47b0      	blx	r6
 800d014:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800d018:	4405      	add	r5, r0
 800d01a:	4295      	cmp	r5, r2
 800d01c:	d3f1      	bcc.n	800d002 <uxr_write_framed_msg+0x21a>
 800d01e:	d1a0      	bne.n	800cf62 <uxr_write_framed_msg+0x17a>
 800d020:	2300      	movs	r3, #0
 800d022:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800d026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d028:	b298      	uxth	r0, r3
 800d02a:	b003      	add	sp, #12
 800d02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d030:	f04f 0300 	mov.w	r3, #0
 800d034:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800d038:	e72a      	b.n	800ce90 <uxr_write_framed_msg+0xa8>
 800d03a:	217d      	movs	r1, #125	; 0x7d
 800d03c:	f082 0220 	eor.w	r2, r2, #32
 800d040:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 800d044:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 800d048:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 800d04c:	2203      	movs	r2, #3
 800d04e:	2901      	cmp	r1, #1
 800d050:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800d054:	d803      	bhi.n	800d05e <uxr_write_framed_msg+0x276>
 800d056:	2105      	movs	r1, #5
 800d058:	f04f 0c04 	mov.w	ip, #4
 800d05c:	e737      	b.n	800cece <uxr_write_framed_msg+0xe6>
 800d05e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d060:	2104      	movs	r1, #4
 800d062:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 800d066:	b2dd      	uxtb	r5, r3
 800d068:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 800d06c:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 800d070:	2a01      	cmp	r2, #1
 800d072:	f63f aee1 	bhi.w	800ce38 <uxr_write_framed_msg+0x50>
 800d076:	e73c      	b.n	800cef2 <uxr_write_framed_msg+0x10a>
 800d078:	08015108 	.word	0x08015108

0800d07c <uxr_framing_read_transport>:
 800d07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d080:	4604      	mov	r4, r0
 800d082:	b085      	sub	sp, #20
 800d084:	4692      	mov	sl, r2
 800d086:	4689      	mov	r9, r1
 800d088:	461d      	mov	r5, r3
 800d08a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800d08c:	f000 fca6 	bl	800d9dc <uxr_millis>
 800d090:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800d094:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 800d098:	4680      	mov	r8, r0
 800d09a:	42ba      	cmp	r2, r7
 800d09c:	d05f      	beq.n	800d15e <uxr_framing_read_transport+0xe2>
 800d09e:	d817      	bhi.n	800d0d0 <uxr_framing_read_transport+0x54>
 800d0a0:	3f01      	subs	r7, #1
 800d0a2:	1aba      	subs	r2, r7, r2
 800d0a4:	2700      	movs	r7, #0
 800d0a6:	b2d2      	uxtb	r2, r2
 800d0a8:	42b2      	cmp	r2, r6
 800d0aa:	d81a      	bhi.n	800d0e2 <uxr_framing_read_transport+0x66>
 800d0ac:	19d3      	adds	r3, r2, r7
 800d0ae:	42b3      	cmp	r3, r6
 800d0b0:	d852      	bhi.n	800d158 <uxr_framing_read_transport+0xdc>
 800d0b2:	b9d2      	cbnz	r2, 800d0ea <uxr_framing_read_transport+0x6e>
 800d0b4:	2600      	movs	r6, #0
 800d0b6:	f000 fc91 	bl	800d9dc <uxr_millis>
 800d0ba:	682b      	ldr	r3, [r5, #0]
 800d0bc:	eba0 0008 	sub.w	r0, r0, r8
 800d0c0:	1a1b      	subs	r3, r3, r0
 800d0c2:	4630      	mov	r0, r6
 800d0c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d0c8:	602b      	str	r3, [r5, #0]
 800d0ca:	b005      	add	sp, #20
 800d0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0d0:	2f00      	cmp	r7, #0
 800d0d2:	d060      	beq.n	800d196 <uxr_framing_read_transport+0x11a>
 800d0d4:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 800d0d8:	3f01      	subs	r7, #1
 800d0da:	b2d2      	uxtb	r2, r2
 800d0dc:	b2ff      	uxtb	r7, r7
 800d0de:	42b2      	cmp	r2, r6
 800d0e0:	d9e4      	bls.n	800d0ac <uxr_framing_read_transport+0x30>
 800d0e2:	b2f2      	uxtb	r2, r6
 800d0e4:	2700      	movs	r7, #0
 800d0e6:	2a00      	cmp	r2, #0
 800d0e8:	d0e4      	beq.n	800d0b4 <uxr_framing_read_transport+0x38>
 800d0ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0ec:	4650      	mov	r0, sl
 800d0ee:	9203      	str	r2, [sp, #12]
 800d0f0:	9300      	str	r3, [sp, #0]
 800d0f2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800d0f6:	682b      	ldr	r3, [r5, #0]
 800d0f8:	3102      	adds	r1, #2
 800d0fa:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 800d1a0 <uxr_framing_read_transport+0x124>
 800d0fe:	4421      	add	r1, r4
 800d100:	47c8      	blx	r9
 800d102:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800d106:	4606      	mov	r6, r0
 800d108:	4403      	add	r3, r0
 800d10a:	0859      	lsrs	r1, r3, #1
 800d10c:	fbab 2101 	umull	r2, r1, fp, r1
 800d110:	222a      	movs	r2, #42	; 0x2a
 800d112:	0889      	lsrs	r1, r1, #2
 800d114:	fb02 3111 	mls	r1, r2, r1, r3
 800d118:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 800d11c:	2800      	cmp	r0, #0
 800d11e:	d0c9      	beq.n	800d0b4 <uxr_framing_read_transport+0x38>
 800d120:	9a03      	ldr	r2, [sp, #12]
 800d122:	4290      	cmp	r0, r2
 800d124:	d1c7      	bne.n	800d0b6 <uxr_framing_read_transport+0x3a>
 800d126:	2f00      	cmp	r7, #0
 800d128:	d0c5      	beq.n	800d0b6 <uxr_framing_read_transport+0x3a>
 800d12a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d12c:	3102      	adds	r1, #2
 800d12e:	463a      	mov	r2, r7
 800d130:	4650      	mov	r0, sl
 800d132:	4421      	add	r1, r4
 800d134:	9300      	str	r3, [sp, #0]
 800d136:	2300      	movs	r3, #0
 800d138:	47c8      	blx	r9
 800d13a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800d13e:	4406      	add	r6, r0
 800d140:	1813      	adds	r3, r2, r0
 800d142:	085a      	lsrs	r2, r3, #1
 800d144:	fbab 1b02 	umull	r1, fp, fp, r2
 800d148:	222a      	movs	r2, #42	; 0x2a
 800d14a:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 800d14e:	fb02 331b 	mls	r3, r2, fp, r3
 800d152:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800d156:	e7ae      	b.n	800d0b6 <uxr_framing_read_transport+0x3a>
 800d158:	1ab6      	subs	r6, r6, r2
 800d15a:	b2f7      	uxtb	r7, r6
 800d15c:	e7a9      	b.n	800d0b2 <uxr_framing_read_transport+0x36>
 800d15e:	2300      	movs	r3, #0
 800d160:	2e28      	cmp	r6, #40	; 0x28
 800d162:	85a3      	strh	r3, [r4, #44]	; 0x2c
 800d164:	d9bd      	bls.n	800d0e2 <uxr_framing_read_transport+0x66>
 800d166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d168:	2229      	movs	r2, #41	; 0x29
 800d16a:	1ca1      	adds	r1, r4, #2
 800d16c:	4650      	mov	r0, sl
 800d16e:	9300      	str	r3, [sp, #0]
 800d170:	682b      	ldr	r3, [r5, #0]
 800d172:	47c8      	blx	r9
 800d174:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800d178:	4606      	mov	r6, r0
 800d17a:	212a      	movs	r1, #42	; 0x2a
 800d17c:	4403      	add	r3, r0
 800d17e:	4808      	ldr	r0, [pc, #32]	; (800d1a0 <uxr_framing_read_transport+0x124>)
 800d180:	085a      	lsrs	r2, r3, #1
 800d182:	fba0 0202 	umull	r0, r2, r0, r2
 800d186:	0892      	lsrs	r2, r2, #2
 800d188:	fb01 3312 	mls	r3, r1, r2, r3
 800d18c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800d190:	2e00      	cmp	r6, #0
 800d192:	d08f      	beq.n	800d0b4 <uxr_framing_read_transport+0x38>
 800d194:	e78f      	b.n	800d0b6 <uxr_framing_read_transport+0x3a>
 800d196:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 800d19a:	b2d2      	uxtb	r2, r2
 800d19c:	e784      	b.n	800d0a8 <uxr_framing_read_transport+0x2c>
 800d19e:	bf00      	nop
 800d1a0:	30c30c31 	.word	0x30c30c31

0800d1a4 <uxr_read_framed_msg>:
 800d1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a8:	461e      	mov	r6, r3
 800d1aa:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 800d1ae:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800d1b2:	b083      	sub	sp, #12
 800d1b4:	4604      	mov	r4, r0
 800d1b6:	4688      	mov	r8, r1
 800d1b8:	429d      	cmp	r5, r3
 800d1ba:	4691      	mov	r9, r2
 800d1bc:	f000 818c 	beq.w	800d4d8 <uxr_read_framed_msg+0x334>
 800d1c0:	7823      	ldrb	r3, [r4, #0]
 800d1c2:	4dc3      	ldr	r5, [pc, #780]	; (800d4d0 <uxr_read_framed_msg+0x32c>)
 800d1c4:	4fc3      	ldr	r7, [pc, #780]	; (800d4d4 <uxr_read_framed_msg+0x330>)
 800d1c6:	2b07      	cmp	r3, #7
 800d1c8:	d8fd      	bhi.n	800d1c6 <uxr_read_framed_msg+0x22>
 800d1ca:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d1ce:	011c      	.short	0x011c
 800d1d0:	00d900fb 	.word	0x00d900fb
 800d1d4:	008f00ba 	.word	0x008f00ba
 800d1d8:	00320051 	.word	0x00320051
 800d1dc:	0008      	.short	0x0008
 800d1de:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800d1e2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800d1e6:	4299      	cmp	r1, r3
 800d1e8:	f000 814d 	beq.w	800d486 <uxr_read_framed_msg+0x2e2>
 800d1ec:	18e2      	adds	r2, r4, r3
 800d1ee:	7892      	ldrb	r2, [r2, #2]
 800d1f0:	2a7d      	cmp	r2, #125	; 0x7d
 800d1f2:	f000 81b8 	beq.w	800d566 <uxr_read_framed_msg+0x3c2>
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	212a      	movs	r1, #42	; 0x2a
 800d1fa:	2a7e      	cmp	r2, #126	; 0x7e
 800d1fc:	ea4f 0053 	mov.w	r0, r3, lsr #1
 800d200:	fba5 c000 	umull	ip, r0, r5, r0
 800d204:	ea4f 0090 	mov.w	r0, r0, lsr #2
 800d208:	fb01 3310 	mls	r3, r1, r0, r3
 800d20c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800d210:	f000 8257 	beq.w	800d6c2 <uxr_read_framed_msg+0x51e>
 800d214:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800d216:	2000      	movs	r0, #0
 800d218:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800d21a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d21e:	7020      	strb	r0, [r4, #0]
 800d220:	b29b      	uxth	r3, r3
 800d222:	4299      	cmp	r1, r3
 800d224:	86a3      	strh	r3, [r4, #52]	; 0x34
 800d226:	f000 8178 	beq.w	800d51a <uxr_read_framed_msg+0x376>
 800d22a:	2000      	movs	r0, #0
 800d22c:	b003      	add	sp, #12
 800d22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d232:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800d236:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800d23a:	4298      	cmp	r0, r3
 800d23c:	f000 8132 	beq.w	800d4a4 <uxr_read_framed_msg+0x300>
 800d240:	18e2      	adds	r2, r4, r3
 800d242:	7891      	ldrb	r1, [r2, #2]
 800d244:	297d      	cmp	r1, #125	; 0x7d
 800d246:	f000 8170 	beq.w	800d52a <uxr_read_framed_msg+0x386>
 800d24a:	3301      	adds	r3, #1
 800d24c:	202a      	movs	r0, #42	; 0x2a
 800d24e:	297e      	cmp	r1, #126	; 0x7e
 800d250:	ea4f 0253 	mov.w	r2, r3, lsr #1
 800d254:	fba5 c202 	umull	ip, r2, r5, r2
 800d258:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800d25c:	fb00 3312 	mls	r3, r0, r2, r3
 800d260:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800d264:	f000 821d 	beq.w	800d6a2 <uxr_read_framed_msg+0x4fe>
 800d268:	2307      	movs	r3, #7
 800d26a:	86a1      	strh	r1, [r4, #52]	; 0x34
 800d26c:	7023      	strb	r3, [r4, #0]
 800d26e:	e7aa      	b.n	800d1c6 <uxr_read_framed_msg+0x22>
 800d270:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800d272:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 800d276:	459e      	cmp	lr, r3
 800d278:	d827      	bhi.n	800d2ca <uxr_read_framed_msg+0x126>
 800d27a:	e032      	b.n	800d2e2 <uxr_read_framed_msg+0x13e>
 800d27c:	fba5 b101 	umull	fp, r1, r5, r1
 800d280:	f89c c002 	ldrb.w	ip, [ip, #2]
 800d284:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 800d288:	0889      	lsrs	r1, r1, #2
 800d28a:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 800d28e:	fb0b 0111 	mls	r1, fp, r1, r0
 800d292:	f000 80d4 	beq.w	800d43e <uxr_read_framed_msg+0x29a>
 800d296:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 800d29a:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 800d29e:	f000 80cb 	beq.w	800d438 <uxr_read_framed_msg+0x294>
 800d2a2:	f806 c003 	strb.w	ip, [r6, r3]
 800d2a6:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 800d2a8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800d2aa:	ea80 010c 	eor.w	r1, r0, ip
 800d2ae:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	b2c9      	uxtb	r1, r1
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 800d2bc:	4573      	cmp	r3, lr
 800d2be:	8663      	strh	r3, [r4, #50]	; 0x32
 800d2c0:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 800d2c4:	86e2      	strh	r2, [r4, #54]	; 0x36
 800d2c6:	f080 811d 	bcs.w	800d504 <uxr_read_framed_msg+0x360>
 800d2ca:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800d2ce:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 800d2d2:	1c50      	adds	r0, r2, #1
 800d2d4:	eb04 0c02 	add.w	ip, r4, r2
 800d2d8:	4592      	cmp	sl, r2
 800d2da:	ea4f 0150 	mov.w	r1, r0, lsr #1
 800d2de:	d1cd      	bne.n	800d27c <uxr_read_framed_msg+0xd8>
 800d2e0:	459e      	cmp	lr, r3
 800d2e2:	f040 8114 	bne.w	800d50e <uxr_read_framed_msg+0x36a>
 800d2e6:	2306      	movs	r3, #6
 800d2e8:	7023      	strb	r3, [r4, #0]
 800d2ea:	e76c      	b.n	800d1c6 <uxr_read_framed_msg+0x22>
 800d2ec:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800d2f0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800d2f4:	4298      	cmp	r0, r3
 800d2f6:	f000 80c6 	beq.w	800d486 <uxr_read_framed_msg+0x2e2>
 800d2fa:	18e2      	adds	r2, r4, r3
 800d2fc:	7891      	ldrb	r1, [r2, #2]
 800d2fe:	297d      	cmp	r1, #125	; 0x7d
 800d300:	f000 8193 	beq.w	800d62a <uxr_read_framed_msg+0x486>
 800d304:	3301      	adds	r3, #1
 800d306:	202a      	movs	r0, #42	; 0x2a
 800d308:	297e      	cmp	r1, #126	; 0x7e
 800d30a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 800d30e:	fba5 c202 	umull	ip, r2, r5, r2
 800d312:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800d316:	fb00 3312 	mls	r3, r0, r2, r3
 800d31a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800d31e:	f000 81d0 	beq.w	800d6c2 <uxr_read_framed_msg+0x51e>
 800d322:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800d324:	2000      	movs	r0, #0
 800d326:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800d32a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d32c:	8660      	strh	r0, [r4, #50]	; 0x32
 800d32e:	b29b      	uxth	r3, r3
 800d330:	86e0      	strh	r0, [r4, #54]	; 0x36
 800d332:	428b      	cmp	r3, r1
 800d334:	8623      	strh	r3, [r4, #48]	; 0x30
 800d336:	f240 80e2 	bls.w	800d4fe <uxr_read_framed_msg+0x35a>
 800d33a:	7020      	strb	r0, [r4, #0]
 800d33c:	b003      	add	sp, #12
 800d33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d342:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800d346:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800d34a:	4298      	cmp	r0, r3
 800d34c:	f000 80aa 	beq.w	800d4a4 <uxr_read_framed_msg+0x300>
 800d350:	18e2      	adds	r2, r4, r3
 800d352:	7891      	ldrb	r1, [r2, #2]
 800d354:	297d      	cmp	r1, #125	; 0x7d
 800d356:	f000 8186 	beq.w	800d666 <uxr_read_framed_msg+0x4c2>
 800d35a:	3301      	adds	r3, #1
 800d35c:	202a      	movs	r0, #42	; 0x2a
 800d35e:	297e      	cmp	r1, #126	; 0x7e
 800d360:	ea4f 0253 	mov.w	r2, r3, lsr #1
 800d364:	fba5 c202 	umull	ip, r2, r5, r2
 800d368:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800d36c:	fb00 3312 	mls	r3, r0, r2, r3
 800d370:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800d374:	f000 8195 	beq.w	800d6a2 <uxr_read_framed_msg+0x4fe>
 800d378:	2304      	movs	r3, #4
 800d37a:	8621      	strh	r1, [r4, #48]	; 0x30
 800d37c:	7023      	strb	r3, [r4, #0]
 800d37e:	e722      	b.n	800d1c6 <uxr_read_framed_msg+0x22>
 800d380:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800d384:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800d388:	4290      	cmp	r0, r2
 800d38a:	f000 80b4 	beq.w	800d4f6 <uxr_read_framed_msg+0x352>
 800d38e:	18a3      	adds	r3, r4, r2
 800d390:	7899      	ldrb	r1, [r3, #2]
 800d392:	297d      	cmp	r1, #125	; 0x7d
 800d394:	f000 8107 	beq.w	800d5a6 <uxr_read_framed_msg+0x402>
 800d398:	3201      	adds	r2, #1
 800d39a:	232a      	movs	r3, #42	; 0x2a
 800d39c:	297e      	cmp	r1, #126	; 0x7e
 800d39e:	ea4f 0052 	mov.w	r0, r2, lsr #1
 800d3a2:	fba5 c000 	umull	ip, r0, r5, r0
 800d3a6:	ea4f 0090 	mov.w	r0, r0, lsr #2
 800d3aa:	fb03 2210 	mls	r2, r3, r0, r2
 800d3ae:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800d3b2:	f000 818a 	beq.w	800d6ca <uxr_read_framed_msg+0x526>
 800d3b6:	7863      	ldrb	r3, [r4, #1]
 800d3b8:	428b      	cmp	r3, r1
 800d3ba:	bf0c      	ite	eq
 800d3bc:	2303      	moveq	r3, #3
 800d3be:	2300      	movne	r3, #0
 800d3c0:	7023      	strb	r3, [r4, #0]
 800d3c2:	e700      	b.n	800d1c6 <uxr_read_framed_msg+0x22>
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800d3ca:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 800d3ce:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800d3d2:	4299      	cmp	r1, r3
 800d3d4:	d06a      	beq.n	800d4ac <uxr_read_framed_msg+0x308>
 800d3d6:	18e2      	adds	r2, r4, r3
 800d3d8:	7890      	ldrb	r0, [r2, #2]
 800d3da:	287d      	cmp	r0, #125	; 0x7d
 800d3dc:	f000 8100 	beq.w	800d5e0 <uxr_read_framed_msg+0x43c>
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	212a      	movs	r1, #42	; 0x2a
 800d3e4:	287e      	cmp	r0, #126	; 0x7e
 800d3e6:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 800d3ea:	ea4f 0253 	mov.w	r2, r3, lsr #1
 800d3ee:	fba5 c202 	umull	ip, r2, r5, r2
 800d3f2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800d3f6:	fb01 3312 	mls	r3, r1, r2, r3
 800d3fa:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800d3fe:	d055      	beq.n	800d4ac <uxr_read_framed_msg+0x308>
 800d400:	2302      	movs	r3, #2
 800d402:	7023      	strb	r3, [r4, #0]
 800d404:	e6df      	b.n	800d1c6 <uxr_read_framed_msg+0x22>
 800d406:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 800d40a:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 800d40e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800d412:	1c5a      	adds	r2, r3, #1
 800d414:	459c      	cmp	ip, r3
 800d416:	eb04 0103 	add.w	r1, r4, r3
 800d41a:	ea4f 0352 	mov.w	r3, r2, lsr #1
 800d41e:	f43f af04 	beq.w	800d22a <uxr_read_framed_msg+0x86>
 800d422:	fba5 0303 	umull	r0, r3, r5, r3
 800d426:	7889      	ldrb	r1, [r1, #2]
 800d428:	089b      	lsrs	r3, r3, #2
 800d42a:	297e      	cmp	r1, #126	; 0x7e
 800d42c:	fb0e 2313 	mls	r3, lr, r3, r2
 800d430:	b2db      	uxtb	r3, r3
 800d432:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800d436:	d1ec      	bne.n	800d412 <uxr_read_framed_msg+0x26e>
 800d438:	2301      	movs	r3, #1
 800d43a:	7023      	strb	r3, [r4, #0]
 800d43c:	e6c3      	b.n	800d1c6 <uxr_read_framed_msg+0x22>
 800d43e:	1c50      	adds	r0, r2, #1
 800d440:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 800d444:	3202      	adds	r2, #2
 800d446:	0841      	lsrs	r1, r0, #1
 800d448:	fba5 c101 	umull	ip, r1, r5, r1
 800d44c:	0889      	lsrs	r1, r1, #2
 800d44e:	fb0b 0111 	mls	r1, fp, r1, r0
 800d452:	1860      	adds	r0, r4, r1
 800d454:	b2c9      	uxtb	r1, r1
 800d456:	458a      	cmp	sl, r1
 800d458:	f43f af42 	beq.w	800d2e0 <uxr_read_framed_msg+0x13c>
 800d45c:	0851      	lsrs	r1, r2, #1
 800d45e:	7880      	ldrb	r0, [r0, #2]
 800d460:	fba5 a101 	umull	sl, r1, r5, r1
 800d464:	287e      	cmp	r0, #126	; 0x7e
 800d466:	f080 0c20 	eor.w	ip, r0, #32
 800d46a:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800d46e:	fb0b 2211 	mls	r2, fp, r1, r2
 800d472:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800d476:	f47f af14 	bne.w	800d2a2 <uxr_read_framed_msg+0xfe>
 800d47a:	459e      	cmp	lr, r3
 800d47c:	f43f af33 	beq.w	800d2e6 <uxr_read_framed_msg+0x142>
 800d480:	2301      	movs	r3, #1
 800d482:	7023      	strb	r3, [r4, #0]
 800d484:	e69f      	b.n	800d1c6 <uxr_read_framed_msg+0x22>
 800d486:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d488:	9300      	str	r3, [sp, #0]
 800d48a:	2301      	movs	r3, #1
 800d48c:	9301      	str	r3, [sp, #4]
 800d48e:	464a      	mov	r2, r9
 800d490:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d492:	4641      	mov	r1, r8
 800d494:	4620      	mov	r0, r4
 800d496:	f7ff fdf1 	bl	800d07c <uxr_framing_read_transport>
 800d49a:	2800      	cmp	r0, #0
 800d49c:	f43f aec5 	beq.w	800d22a <uxr_read_framed_msg+0x86>
 800d4a0:	7823      	ldrb	r3, [r4, #0]
 800d4a2:	e690      	b.n	800d1c6 <uxr_read_framed_msg+0x22>
 800d4a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4a6:	9300      	str	r3, [sp, #0]
 800d4a8:	2302      	movs	r3, #2
 800d4aa:	e7ef      	b.n	800d48c <uxr_read_framed_msg+0x2e8>
 800d4ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4ae:	464a      	mov	r2, r9
 800d4b0:	4641      	mov	r1, r8
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	9300      	str	r3, [sp, #0]
 800d4b6:	2304      	movs	r3, #4
 800d4b8:	9301      	str	r3, [sp, #4]
 800d4ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4bc:	f7ff fdde 	bl	800d07c <uxr_framing_read_transport>
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	d1ed      	bne.n	800d4a0 <uxr_read_framed_msg+0x2fc>
 800d4c4:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800d4c8:	2b7e      	cmp	r3, #126	; 0x7e
 800d4ca:	d0e9      	beq.n	800d4a0 <uxr_read_framed_msg+0x2fc>
 800d4cc:	e6ad      	b.n	800d22a <uxr_read_framed_msg+0x86>
 800d4ce:	bf00      	nop
 800d4d0:	30c30c31 	.word	0x30c30c31
 800d4d4:	08015108 	.word	0x08015108
 800d4d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4da:	9300      	str	r3, [sp, #0]
 800d4dc:	2305      	movs	r3, #5
 800d4de:	9301      	str	r3, [sp, #4]
 800d4e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4e2:	f7ff fdcb 	bl	800d07c <uxr_framing_read_transport>
 800d4e6:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800d4ea:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	f43f ae9b 	beq.w	800d22a <uxr_read_framed_msg+0x86>
 800d4f4:	e664      	b.n	800d1c0 <uxr_read_framed_msg+0x1c>
 800d4f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4f8:	9300      	str	r3, [sp, #0]
 800d4fa:	2303      	movs	r3, #3
 800d4fc:	e7c6      	b.n	800d48c <uxr_read_framed_msg+0x2e8>
 800d4fe:	2305      	movs	r3, #5
 800d500:	7023      	strb	r3, [r4, #0]
 800d502:	e660      	b.n	800d1c6 <uxr_read_framed_msg+0x22>
 800d504:	f43f aeef 	beq.w	800d2e6 <uxr_read_framed_msg+0x142>
 800d508:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 800d50c:	d094      	beq.n	800d438 <uxr_read_framed_msg+0x294>
 800d50e:	ebae 0303 	sub.w	r3, lr, r3
 800d512:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d514:	3302      	adds	r3, #2
 800d516:	9200      	str	r2, [sp, #0]
 800d518:	e7b8      	b.n	800d48c <uxr_read_framed_msg+0x2e8>
 800d51a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800d51e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d520:	7013      	strb	r3, [r2, #0]
 800d522:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 800d524:	b003      	add	sp, #12
 800d526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d52a:	1c59      	adds	r1, r3, #1
 800d52c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800d530:	084a      	lsrs	r2, r1, #1
 800d532:	fba5 e202 	umull	lr, r2, r5, r2
 800d536:	0892      	lsrs	r2, r2, #2
 800d538:	fb0c 1212 	mls	r2, ip, r2, r1
 800d53c:	b2d1      	uxtb	r1, r2
 800d53e:	4288      	cmp	r0, r1
 800d540:	d0b0      	beq.n	800d4a4 <uxr_read_framed_msg+0x300>
 800d542:	3302      	adds	r3, #2
 800d544:	4422      	add	r2, r4
 800d546:	7891      	ldrb	r1, [r2, #2]
 800d548:	085a      	lsrs	r2, r3, #1
 800d54a:	fba5 0202 	umull	r0, r2, r5, r2
 800d54e:	297e      	cmp	r1, #126	; 0x7e
 800d550:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800d554:	fb0c 3312 	mls	r3, ip, r2, r3
 800d558:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800d55c:	f000 80a1 	beq.w	800d6a2 <uxr_read_framed_msg+0x4fe>
 800d560:	f081 0120 	eor.w	r1, r1, #32
 800d564:	e680      	b.n	800d268 <uxr_read_framed_msg+0xc4>
 800d566:	f103 0c01 	add.w	ip, r3, #1
 800d56a:	202a      	movs	r0, #42	; 0x2a
 800d56c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800d570:	fba5 e202 	umull	lr, r2, r5, r2
 800d574:	0892      	lsrs	r2, r2, #2
 800d576:	fb00 c212 	mls	r2, r0, r2, ip
 800d57a:	fa5f fc82 	uxtb.w	ip, r2
 800d57e:	4561      	cmp	r1, ip
 800d580:	d081      	beq.n	800d486 <uxr_read_framed_msg+0x2e2>
 800d582:	3302      	adds	r3, #2
 800d584:	4422      	add	r2, r4
 800d586:	0859      	lsrs	r1, r3, #1
 800d588:	7892      	ldrb	r2, [r2, #2]
 800d58a:	fba5 c101 	umull	ip, r1, r5, r1
 800d58e:	2a7e      	cmp	r2, #126	; 0x7e
 800d590:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800d594:	fb00 3311 	mls	r3, r0, r1, r3
 800d598:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800d59c:	f000 8091 	beq.w	800d6c2 <uxr_read_framed_msg+0x51e>
 800d5a0:	f082 0220 	eor.w	r2, r2, #32
 800d5a4:	e636      	b.n	800d214 <uxr_read_framed_msg+0x70>
 800d5a6:	1c51      	adds	r1, r2, #1
 800d5a8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800d5ac:	084b      	lsrs	r3, r1, #1
 800d5ae:	fba5 e303 	umull	lr, r3, r5, r3
 800d5b2:	089b      	lsrs	r3, r3, #2
 800d5b4:	fb0c 1313 	mls	r3, ip, r3, r1
 800d5b8:	b2d9      	uxtb	r1, r3
 800d5ba:	4288      	cmp	r0, r1
 800d5bc:	d09b      	beq.n	800d4f6 <uxr_read_framed_msg+0x352>
 800d5be:	3202      	adds	r2, #2
 800d5c0:	4423      	add	r3, r4
 800d5c2:	0850      	lsrs	r0, r2, #1
 800d5c4:	789b      	ldrb	r3, [r3, #2]
 800d5c6:	fba5 1000 	umull	r1, r0, r5, r0
 800d5ca:	2b7e      	cmp	r3, #126	; 0x7e
 800d5cc:	ea4f 0090 	mov.w	r0, r0, lsr #2
 800d5d0:	fb0c 2210 	mls	r2, ip, r0, r2
 800d5d4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800d5d8:	d077      	beq.n	800d6ca <uxr_read_framed_msg+0x526>
 800d5da:	f083 0120 	eor.w	r1, r3, #32
 800d5de:	e6ea      	b.n	800d3b6 <uxr_read_framed_msg+0x212>
 800d5e0:	f103 0c01 	add.w	ip, r3, #1
 800d5e4:	202a      	movs	r0, #42	; 0x2a
 800d5e6:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800d5ea:	fba5 e202 	umull	lr, r2, r5, r2
 800d5ee:	0892      	lsrs	r2, r2, #2
 800d5f0:	fb00 c212 	mls	r2, r0, r2, ip
 800d5f4:	fa5f fc82 	uxtb.w	ip, r2
 800d5f8:	4561      	cmp	r1, ip
 800d5fa:	f43f af57 	beq.w	800d4ac <uxr_read_framed_msg+0x308>
 800d5fe:	3302      	adds	r3, #2
 800d600:	4422      	add	r2, r4
 800d602:	7891      	ldrb	r1, [r2, #2]
 800d604:	085a      	lsrs	r2, r3, #1
 800d606:	fba5 c202 	umull	ip, r2, r5, r2
 800d60a:	297e      	cmp	r1, #126	; 0x7e
 800d60c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 800d610:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800d614:	fb00 3312 	mls	r3, r0, r2, r3
 800d618:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800d61c:	f43f af46 	beq.w	800d4ac <uxr_read_framed_msg+0x308>
 800d620:	f081 0120 	eor.w	r1, r1, #32
 800d624:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 800d628:	e6ea      	b.n	800d400 <uxr_read_framed_msg+0x25c>
 800d62a:	1c59      	adds	r1, r3, #1
 800d62c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800d630:	084a      	lsrs	r2, r1, #1
 800d632:	fba5 e202 	umull	lr, r2, r5, r2
 800d636:	0892      	lsrs	r2, r2, #2
 800d638:	fb0c 1212 	mls	r2, ip, r2, r1
 800d63c:	b2d1      	uxtb	r1, r2
 800d63e:	4288      	cmp	r0, r1
 800d640:	f43f af21 	beq.w	800d486 <uxr_read_framed_msg+0x2e2>
 800d644:	3302      	adds	r3, #2
 800d646:	4422      	add	r2, r4
 800d648:	7891      	ldrb	r1, [r2, #2]
 800d64a:	085a      	lsrs	r2, r3, #1
 800d64c:	fba5 0202 	umull	r0, r2, r5, r2
 800d650:	297e      	cmp	r1, #126	; 0x7e
 800d652:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800d656:	fb0c 3312 	mls	r3, ip, r2, r3
 800d65a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800d65e:	d030      	beq.n	800d6c2 <uxr_read_framed_msg+0x51e>
 800d660:	f081 0120 	eor.w	r1, r1, #32
 800d664:	e65d      	b.n	800d322 <uxr_read_framed_msg+0x17e>
 800d666:	1c59      	adds	r1, r3, #1
 800d668:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800d66c:	084a      	lsrs	r2, r1, #1
 800d66e:	fba5 e202 	umull	lr, r2, r5, r2
 800d672:	0892      	lsrs	r2, r2, #2
 800d674:	fb0c 1212 	mls	r2, ip, r2, r1
 800d678:	b2d1      	uxtb	r1, r2
 800d67a:	4288      	cmp	r0, r1
 800d67c:	f43f af12 	beq.w	800d4a4 <uxr_read_framed_msg+0x300>
 800d680:	3302      	adds	r3, #2
 800d682:	4422      	add	r2, r4
 800d684:	7891      	ldrb	r1, [r2, #2]
 800d686:	085a      	lsrs	r2, r3, #1
 800d688:	fba5 0202 	umull	r0, r2, r5, r2
 800d68c:	297e      	cmp	r1, #126	; 0x7e
 800d68e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800d692:	fb0c 3312 	mls	r3, ip, r2, r3
 800d696:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800d69a:	d002      	beq.n	800d6a2 <uxr_read_framed_msg+0x4fe>
 800d69c:	f081 0120 	eor.w	r1, r1, #32
 800d6a0:	e66a      	b.n	800d378 <uxr_read_framed_msg+0x1d4>
 800d6a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6a4:	9300      	str	r3, [sp, #0]
 800d6a6:	2302      	movs	r3, #2
 800d6a8:	9301      	str	r3, [sp, #4]
 800d6aa:	464a      	mov	r2, r9
 800d6ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6ae:	4641      	mov	r1, r8
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	f7ff fce3 	bl	800d07c <uxr_framing_read_transport>
 800d6b6:	2800      	cmp	r0, #0
 800d6b8:	f47f aef2 	bne.w	800d4a0 <uxr_read_framed_msg+0x2fc>
 800d6bc:	2301      	movs	r3, #1
 800d6be:	7023      	strb	r3, [r4, #0]
 800d6c0:	e581      	b.n	800d1c6 <uxr_read_framed_msg+0x22>
 800d6c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6c4:	9300      	str	r3, [sp, #0]
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e7ee      	b.n	800d6a8 <uxr_read_framed_msg+0x504>
 800d6ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6cc:	9300      	str	r3, [sp, #0]
 800d6ce:	2303      	movs	r3, #3
 800d6d0:	e7ea      	b.n	800d6a8 <uxr_read_framed_msg+0x504>
 800d6d2:	bf00      	nop

0800d6d4 <uxr_stream_id>:
 800d6d4:	2901      	cmp	r1, #1
 800d6d6:	4684      	mov	ip, r0
 800d6d8:	b500      	push	{lr}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	d01f      	beq.n	800d71e <uxr_stream_id+0x4a>
 800d6de:	2902      	cmp	r1, #2
 800d6e0:	f04f 0e00 	mov.w	lr, #0
 800d6e4:	d020      	beq.n	800d728 <uxr_stream_id+0x54>
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	2000      	movs	r0, #0
 800d6ea:	f36e 0307 	bfi	r3, lr, #0, #8
 800d6ee:	f36c 230f 	bfi	r3, ip, #8, #8
 800d6f2:	f361 4317 	bfi	r3, r1, #16, #8
 800d6f6:	f362 631f 	bfi	r3, r2, #24, #8
 800d6fa:	fa5f fc83 	uxtb.w	ip, r3
 800d6fe:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800d702:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800d706:	0e1b      	lsrs	r3, r3, #24
 800d708:	f36c 0007 	bfi	r0, ip, #0, #8
 800d70c:	f361 200f 	bfi	r0, r1, #8, #8
 800d710:	f362 4017 	bfi	r0, r2, #16, #8
 800d714:	f363 601f 	bfi	r0, r3, #24, #8
 800d718:	b003      	add	sp, #12
 800d71a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d71e:	f100 0e01 	add.w	lr, r0, #1
 800d722:	fa5f fe8e 	uxtb.w	lr, lr
 800d726:	e7de      	b.n	800d6e6 <uxr_stream_id+0x12>
 800d728:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 800d72c:	e7db      	b.n	800d6e6 <uxr_stream_id+0x12>
 800d72e:	bf00      	nop

0800d730 <uxr_stream_id_from_raw>:
 800d730:	b082      	sub	sp, #8
 800d732:	b130      	cbz	r0, 800d742 <uxr_stream_id_from_raw+0x12>
 800d734:	0603      	lsls	r3, r0, #24
 800d736:	d421      	bmi.n	800d77c <uxr_stream_id_from_raw+0x4c>
 800d738:	1e42      	subs	r2, r0, #1
 800d73a:	f04f 0c01 	mov.w	ip, #1
 800d73e:	b2d2      	uxtb	r2, r2
 800d740:	e001      	b.n	800d746 <uxr_stream_id_from_raw+0x16>
 800d742:	4684      	mov	ip, r0
 800d744:	4602      	mov	r2, r0
 800d746:	2300      	movs	r3, #0
 800d748:	f360 0307 	bfi	r3, r0, #0, #8
 800d74c:	2000      	movs	r0, #0
 800d74e:	f362 230f 	bfi	r3, r2, #8, #8
 800d752:	f36c 4317 	bfi	r3, ip, #16, #8
 800d756:	f361 631f 	bfi	r3, r1, #24, #8
 800d75a:	fa5f fc83 	uxtb.w	ip, r3
 800d75e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800d762:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800d766:	0e1b      	lsrs	r3, r3, #24
 800d768:	f36c 0007 	bfi	r0, ip, #0, #8
 800d76c:	f361 200f 	bfi	r0, r1, #8, #8
 800d770:	f362 4017 	bfi	r0, r2, #16, #8
 800d774:	f363 601f 	bfi	r0, r3, #24, #8
 800d778:	b002      	add	sp, #8
 800d77a:	4770      	bx	lr
 800d77c:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800d780:	f04f 0c02 	mov.w	ip, #2
 800d784:	e7df      	b.n	800d746 <uxr_stream_id_from_raw+0x16>
 800d786:	bf00      	nop

0800d788 <uxr_init_stream_storage>:
 800d788:	2300      	movs	r3, #0
 800d78a:	7403      	strb	r3, [r0, #16]
 800d78c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800d790:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800d794:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800d798:	4770      	bx	lr
 800d79a:	bf00      	nop

0800d79c <uxr_reset_stream_storage>:
 800d79c:	b570      	push	{r4, r5, r6, lr}
 800d79e:	7c03      	ldrb	r3, [r0, #16]
 800d7a0:	4604      	mov	r4, r0
 800d7a2:	b14b      	cbz	r3, 800d7b8 <uxr_reset_stream_storage+0x1c>
 800d7a4:	4606      	mov	r6, r0
 800d7a6:	2500      	movs	r5, #0
 800d7a8:	4630      	mov	r0, r6
 800d7aa:	3501      	adds	r5, #1
 800d7ac:	f004 fcce 	bl	801214c <uxr_reset_output_best_effort_stream>
 800d7b0:	7c23      	ldrb	r3, [r4, #16]
 800d7b2:	3610      	adds	r6, #16
 800d7b4:	42ab      	cmp	r3, r5
 800d7b6:	d8f7      	bhi.n	800d7a8 <uxr_reset_stream_storage+0xc>
 800d7b8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d7bc:	b15b      	cbz	r3, 800d7d6 <uxr_reset_stream_storage+0x3a>
 800d7be:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d7c2:	2500      	movs	r5, #0
 800d7c4:	4630      	mov	r0, r6
 800d7c6:	3501      	adds	r5, #1
 800d7c8:	f004 fac6 	bl	8011d58 <uxr_reset_input_best_effort_stream>
 800d7cc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d7d0:	3602      	adds	r6, #2
 800d7d2:	42ab      	cmp	r3, r5
 800d7d4:	d8f6      	bhi.n	800d7c4 <uxr_reset_stream_storage+0x28>
 800d7d6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d7da:	b15b      	cbz	r3, 800d7f4 <uxr_reset_stream_storage+0x58>
 800d7dc:	f104 0618 	add.w	r6, r4, #24
 800d7e0:	2500      	movs	r5, #0
 800d7e2:	4630      	mov	r0, r6
 800d7e4:	3501      	adds	r5, #1
 800d7e6:	f004 fd5f 	bl	80122a8 <uxr_reset_output_reliable_stream>
 800d7ea:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d7ee:	3628      	adds	r6, #40	; 0x28
 800d7f0:	42ab      	cmp	r3, r5
 800d7f2:	d8f6      	bhi.n	800d7e2 <uxr_reset_stream_storage+0x46>
 800d7f4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800d7f8:	b15b      	cbz	r3, 800d812 <uxr_reset_stream_storage+0x76>
 800d7fa:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800d7fe:	2500      	movs	r5, #0
 800d800:	4630      	mov	r0, r6
 800d802:	3501      	adds	r5, #1
 800d804:	f004 fb14 	bl	8011e30 <uxr_reset_input_reliable_stream>
 800d808:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800d80c:	3618      	adds	r6, #24
 800d80e:	42ab      	cmp	r3, r5
 800d810:	d8f6      	bhi.n	800d800 <uxr_reset_stream_storage+0x64>
 800d812:	bd70      	pop	{r4, r5, r6, pc}

0800d814 <uxr_add_output_best_effort_buffer>:
 800d814:	b510      	push	{r4, lr}
 800d816:	7c04      	ldrb	r4, [r0, #16]
 800d818:	b082      	sub	sp, #8
 800d81a:	f104 0c01 	add.w	ip, r4, #1
 800d81e:	f880 c010 	strb.w	ip, [r0, #16]
 800d822:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800d826:	f004 fc87 	bl	8012138 <uxr_init_output_best_effort_stream>
 800d82a:	2201      	movs	r2, #1
 800d82c:	4620      	mov	r0, r4
 800d82e:	4611      	mov	r1, r2
 800d830:	b002      	add	sp, #8
 800d832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d836:	f7ff bf4d 	b.w	800d6d4 <uxr_stream_id>
 800d83a:	bf00      	nop

0800d83c <uxr_add_output_reliable_buffer>:
 800d83c:	b510      	push	{r4, lr}
 800d83e:	b084      	sub	sp, #16
 800d840:	4684      	mov	ip, r0
 800d842:	2028      	movs	r0, #40	; 0x28
 800d844:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800d848:	9400      	str	r4, [sp, #0]
 800d84a:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800d84e:	fb00 c004 	mla	r0, r0, r4, ip
 800d852:	f104 0e01 	add.w	lr, r4, #1
 800d856:	3018      	adds	r0, #24
 800d858:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800d85c:	f004 fcec 	bl	8012238 <uxr_init_output_reliable_stream>
 800d860:	2201      	movs	r2, #1
 800d862:	2102      	movs	r1, #2
 800d864:	4620      	mov	r0, r4
 800d866:	b004      	add	sp, #16
 800d868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d86c:	f7ff bf32 	b.w	800d6d4 <uxr_stream_id>

0800d870 <uxr_add_input_best_effort_buffer>:
 800d870:	b510      	push	{r4, lr}
 800d872:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800d876:	b082      	sub	sp, #8
 800d878:	1c62      	adds	r2, r4, #1
 800d87a:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800d87e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800d882:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800d886:	f004 fa63 	bl	8011d50 <uxr_init_input_best_effort_stream>
 800d88a:	2200      	movs	r2, #0
 800d88c:	2101      	movs	r1, #1
 800d88e:	4620      	mov	r0, r4
 800d890:	b002      	add	sp, #8
 800d892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d896:	f7ff bf1d 	b.w	800d6d4 <uxr_stream_id>
 800d89a:	bf00      	nop

0800d89c <uxr_add_input_reliable_buffer>:
 800d89c:	b510      	push	{r4, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	4684      	mov	ip, r0
 800d8a2:	2018      	movs	r0, #24
 800d8a4:	9c06      	ldr	r4, [sp, #24]
 800d8a6:	9400      	str	r4, [sp, #0]
 800d8a8:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800d8ac:	fb00 c004 	mla	r0, r0, r4, ip
 800d8b0:	f104 0e01 	add.w	lr, r4, #1
 800d8b4:	3048      	adds	r0, #72	; 0x48
 800d8b6:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800d8ba:	f004 fa93 	bl	8011de4 <uxr_init_input_reliable_stream>
 800d8be:	2200      	movs	r2, #0
 800d8c0:	2102      	movs	r1, #2
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	b004      	add	sp, #16
 800d8c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8ca:	f7ff bf03 	b.w	800d6d4 <uxr_stream_id>
 800d8ce:	bf00      	nop

0800d8d0 <uxr_get_output_best_effort_stream>:
 800d8d0:	7c03      	ldrb	r3, [r0, #16]
 800d8d2:	428b      	cmp	r3, r1
 800d8d4:	bf8c      	ite	hi
 800d8d6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800d8da:	2000      	movls	r0, #0
 800d8dc:	4770      	bx	lr
 800d8de:	bf00      	nop

0800d8e0 <uxr_get_output_reliable_stream>:
 800d8e0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d8e4:	428b      	cmp	r3, r1
 800d8e6:	d904      	bls.n	800d8f2 <uxr_get_output_reliable_stream+0x12>
 800d8e8:	2328      	movs	r3, #40	; 0x28
 800d8ea:	fb03 0001 	mla	r0, r3, r1, r0
 800d8ee:	3018      	adds	r0, #24
 800d8f0:	4770      	bx	lr
 800d8f2:	2000      	movs	r0, #0
 800d8f4:	4770      	bx	lr
 800d8f6:	bf00      	nop

0800d8f8 <uxr_get_input_best_effort_stream>:
 800d8f8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800d8fc:	428b      	cmp	r3, r1
 800d8fe:	d903      	bls.n	800d908 <uxr_get_input_best_effort_stream+0x10>
 800d900:	3121      	adds	r1, #33	; 0x21
 800d902:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800d906:	4770      	bx	lr
 800d908:	2000      	movs	r0, #0
 800d90a:	4770      	bx	lr

0800d90c <uxr_get_input_reliable_stream>:
 800d90c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800d910:	428b      	cmp	r3, r1
 800d912:	d904      	bls.n	800d91e <uxr_get_input_reliable_stream+0x12>
 800d914:	2318      	movs	r3, #24
 800d916:	fb03 0001 	mla	r0, r3, r1, r0
 800d91a:	3048      	adds	r0, #72	; 0x48
 800d91c:	4770      	bx	lr
 800d91e:	2000      	movs	r0, #0
 800d920:	4770      	bx	lr
 800d922:	bf00      	nop

0800d924 <uxr_output_streams_confirmed>:
 800d924:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d928:	b183      	cbz	r3, 800d94c <uxr_output_streams_confirmed+0x28>
 800d92a:	b570      	push	{r4, r5, r6, lr}
 800d92c:	4606      	mov	r6, r0
 800d92e:	f100 0518 	add.w	r5, r0, #24
 800d932:	2400      	movs	r4, #0
 800d934:	e000      	b.n	800d938 <uxr_output_streams_confirmed+0x14>
 800d936:	b140      	cbz	r0, 800d94a <uxr_output_streams_confirmed+0x26>
 800d938:	4628      	mov	r0, r5
 800d93a:	3401      	adds	r4, #1
 800d93c:	f004 ff28 	bl	8012790 <uxr_is_output_up_to_date>
 800d940:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800d944:	3528      	adds	r5, #40	; 0x28
 800d946:	42a3      	cmp	r3, r4
 800d948:	d8f5      	bhi.n	800d936 <uxr_output_streams_confirmed+0x12>
 800d94a:	bd70      	pop	{r4, r5, r6, pc}
 800d94c:	2001      	movs	r0, #1
 800d94e:	4770      	bx	lr

0800d950 <uxr_buffer_submessage_header>:
 800d950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d952:	460e      	mov	r6, r1
 800d954:	2104      	movs	r1, #4
 800d956:	4604      	mov	r4, r0
 800d958:	4615      	mov	r5, r2
 800d95a:	461f      	mov	r7, r3
 800d95c:	f7fa fd46 	bl	80083ec <ucdr_align_to>
 800d960:	2301      	movs	r3, #1
 800d962:	4631      	mov	r1, r6
 800d964:	4620      	mov	r0, r4
 800d966:	ea47 0203 	orr.w	r2, r7, r3
 800d96a:	7523      	strb	r3, [r4, #20]
 800d96c:	462b      	mov	r3, r5
 800d96e:	f000 f8d5 	bl	800db1c <uxr_serialize_submessage_header>
 800d972:	4620      	mov	r0, r4
 800d974:	f7fa fd50 	bl	8008418 <ucdr_buffer_remaining>
 800d978:	42a8      	cmp	r0, r5
 800d97a:	bf34      	ite	cc
 800d97c:	2000      	movcc	r0, #0
 800d97e:	2001      	movcs	r0, #1
 800d980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d982:	bf00      	nop

0800d984 <uxr_read_submessage_header>:
 800d984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d988:	4604      	mov	r4, r0
 800d98a:	460d      	mov	r5, r1
 800d98c:	2104      	movs	r1, #4
 800d98e:	4616      	mov	r6, r2
 800d990:	4698      	mov	r8, r3
 800d992:	f7fa fd2b 	bl	80083ec <ucdr_align_to>
 800d996:	4620      	mov	r0, r4
 800d998:	f7fa fd3e 	bl	8008418 <ucdr_buffer_remaining>
 800d99c:	2803      	cmp	r0, #3
 800d99e:	bf8c      	ite	hi
 800d9a0:	2701      	movhi	r7, #1
 800d9a2:	2700      	movls	r7, #0
 800d9a4:	d802      	bhi.n	800d9ac <uxr_read_submessage_header+0x28>
 800d9a6:	4638      	mov	r0, r7
 800d9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9ac:	4633      	mov	r3, r6
 800d9ae:	4642      	mov	r2, r8
 800d9b0:	4620      	mov	r0, r4
 800d9b2:	4629      	mov	r1, r5
 800d9b4:	f000 f8c6 	bl	800db44 <uxr_deserialize_submessage_header>
 800d9b8:	f898 3000 	ldrb.w	r3, [r8]
 800d9bc:	4638      	mov	r0, r7
 800d9be:	f003 0201 	and.w	r2, r3, #1
 800d9c2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800d9c6:	f888 3000 	strb.w	r3, [r8]
 800d9ca:	7522      	strb	r2, [r4, #20]
 800d9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d9d0 <uxr_submessage_padding>:
 800d9d0:	f010 0003 	ands.w	r0, r0, #3
 800d9d4:	bf18      	it	ne
 800d9d6:	f1c0 0004 	rsbne	r0, r0, #4
 800d9da:	4770      	bx	lr

0800d9dc <uxr_millis>:
 800d9dc:	b510      	push	{r4, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	2001      	movs	r0, #1
 800d9e2:	4669      	mov	r1, sp
 800d9e4:	f7f3 fd44 	bl	8001470 <clock_gettime>
 800d9e8:	4908      	ldr	r1, [pc, #32]	; (800da0c <uxr_millis+0x30>)
 800d9ea:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800d9ee:	fba0 0301 	umull	r0, r3, r0, r1
 800d9f2:	1900      	adds	r0, r0, r4
 800d9f4:	fb01 3102 	mla	r1, r1, r2, r3
 800d9f8:	4a05      	ldr	r2, [pc, #20]	; (800da10 <uxr_millis+0x34>)
 800d9fa:	f04f 0300 	mov.w	r3, #0
 800d9fe:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800da02:	f7f2 fc85 	bl	8000310 <__aeabi_ldivmod>
 800da06:	b004      	add	sp, #16
 800da08:	bd10      	pop	{r4, pc}
 800da0a:	bf00      	nop
 800da0c:	3b9aca00 	.word	0x3b9aca00
 800da10:	000f4240 	.word	0x000f4240

0800da14 <uxr_nanos>:
 800da14:	b510      	push	{r4, lr}
 800da16:	b084      	sub	sp, #16
 800da18:	2001      	movs	r0, #1
 800da1a:	4669      	mov	r1, sp
 800da1c:	f7f3 fd28 	bl	8001470 <clock_gettime>
 800da20:	4a06      	ldr	r2, [pc, #24]	; (800da3c <uxr_nanos+0x28>)
 800da22:	9800      	ldr	r0, [sp, #0]
 800da24:	9902      	ldr	r1, [sp, #8]
 800da26:	fba0 0302 	umull	r0, r3, r0, r2
 800da2a:	9c01      	ldr	r4, [sp, #4]
 800da2c:	1840      	adds	r0, r0, r1
 800da2e:	fb02 3304 	mla	r3, r2, r4, r3
 800da32:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800da36:	b004      	add	sp, #16
 800da38:	bd10      	pop	{r4, pc}
 800da3a:	bf00      	nop
 800da3c:	3b9aca00 	.word	0x3b9aca00

0800da40 <uxr_prepare_output_stream>:
 800da40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da42:	b087      	sub	sp, #28
 800da44:	2707      	movs	r7, #7
 800da46:	2500      	movs	r5, #0
 800da48:	461c      	mov	r4, r3
 800da4a:	4606      	mov	r6, r0
 800da4c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800da50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da52:	e9cd 7500 	strd	r7, r5, [sp]
 800da56:	3204      	adds	r2, #4
 800da58:	f7ff f852 	bl	800cb00 <uxr_prepare_stream_to_write_submessage>
 800da5c:	f080 0201 	eor.w	r2, r0, #1
 800da60:	b2d2      	uxtb	r2, r2
 800da62:	75a2      	strb	r2, [r4, #22]
 800da64:	b112      	cbz	r2, 800da6c <uxr_prepare_output_stream+0x2c>
 800da66:	4628      	mov	r0, r5
 800da68:	b007      	add	sp, #28
 800da6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da6c:	aa05      	add	r2, sp, #20
 800da6e:	9902      	ldr	r1, [sp, #8]
 800da70:	4630      	mov	r0, r6
 800da72:	f7ff f981 	bl	800cd78 <uxr_init_base_object_request>
 800da76:	a905      	add	r1, sp, #20
 800da78:	4605      	mov	r5, r0
 800da7a:	4620      	mov	r0, r4
 800da7c:	f000 fdb0 	bl	800e5e0 <uxr_serialize_WRITE_DATA_Payload_Data>
 800da80:	69a6      	ldr	r6, [r4, #24]
 800da82:	69e7      	ldr	r7, [r4, #28]
 800da84:	4620      	mov	r0, r4
 800da86:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800da8a:	1a52      	subs	r2, r2, r1
 800da8c:	f7fa fc92 	bl	80083b4 <ucdr_init_buffer>
 800da90:	4620      	mov	r0, r4
 800da92:	463a      	mov	r2, r7
 800da94:	4631      	mov	r1, r6
 800da96:	f7fa fc61 	bl	800835c <ucdr_set_on_full_buffer_callback>
 800da9a:	4628      	mov	r0, r5
 800da9c:	b007      	add	sp, #28
 800da9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800daa0 <uxr_serialize_message_header>:
 800daa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daa2:	4616      	mov	r6, r2
 800daa4:	b083      	sub	sp, #12
 800daa6:	4604      	mov	r4, r0
 800daa8:	460d      	mov	r5, r1
 800daaa:	9301      	str	r3, [sp, #4]
 800daac:	9f08      	ldr	r7, [sp, #32]
 800daae:	f7f9 fb3f 	bl	8007130 <ucdr_serialize_uint8_t>
 800dab2:	4631      	mov	r1, r6
 800dab4:	4620      	mov	r0, r4
 800dab6:	f7f9 fb3b 	bl	8007130 <ucdr_serialize_uint8_t>
 800daba:	9a01      	ldr	r2, [sp, #4]
 800dabc:	2101      	movs	r1, #1
 800dabe:	4620      	mov	r0, r4
 800dac0:	f7f9 fbe2 	bl	8007288 <ucdr_serialize_endian_uint16_t>
 800dac4:	062b      	lsls	r3, r5, #24
 800dac6:	d501      	bpl.n	800dacc <uxr_serialize_message_header+0x2c>
 800dac8:	b003      	add	sp, #12
 800daca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dacc:	2204      	movs	r2, #4
 800dace:	4639      	mov	r1, r7
 800dad0:	4620      	mov	r0, r4
 800dad2:	b003      	add	sp, #12
 800dad4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dad8:	f003 bffe 	b.w	8011ad8 <ucdr_serialize_array_uint8_t>

0800dadc <uxr_deserialize_message_header>:
 800dadc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dade:	4616      	mov	r6, r2
 800dae0:	b083      	sub	sp, #12
 800dae2:	4604      	mov	r4, r0
 800dae4:	460d      	mov	r5, r1
 800dae6:	9301      	str	r3, [sp, #4]
 800dae8:	9f08      	ldr	r7, [sp, #32]
 800daea:	f7f9 fb37 	bl	800715c <ucdr_deserialize_uint8_t>
 800daee:	4631      	mov	r1, r6
 800daf0:	4620      	mov	r0, r4
 800daf2:	f7f9 fb33 	bl	800715c <ucdr_deserialize_uint8_t>
 800daf6:	9a01      	ldr	r2, [sp, #4]
 800daf8:	2101      	movs	r1, #1
 800dafa:	4620      	mov	r0, r4
 800dafc:	f7f9 fcb8 	bl	8007470 <ucdr_deserialize_endian_uint16_t>
 800db00:	f995 3000 	ldrsb.w	r3, [r5]
 800db04:	2b00      	cmp	r3, #0
 800db06:	da01      	bge.n	800db0c <uxr_deserialize_message_header+0x30>
 800db08:	b003      	add	sp, #12
 800db0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db0c:	2204      	movs	r2, #4
 800db0e:	4639      	mov	r1, r7
 800db10:	4620      	mov	r0, r4
 800db12:	b003      	add	sp, #12
 800db14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800db18:	f004 b842 	b.w	8011ba0 <ucdr_deserialize_array_uint8_t>

0800db1c <uxr_serialize_submessage_header>:
 800db1c:	b530      	push	{r4, r5, lr}
 800db1e:	4615      	mov	r5, r2
 800db20:	b083      	sub	sp, #12
 800db22:	4604      	mov	r4, r0
 800db24:	9301      	str	r3, [sp, #4]
 800db26:	f7f9 fb03 	bl	8007130 <ucdr_serialize_uint8_t>
 800db2a:	4629      	mov	r1, r5
 800db2c:	4620      	mov	r0, r4
 800db2e:	f7f9 faff 	bl	8007130 <ucdr_serialize_uint8_t>
 800db32:	9a01      	ldr	r2, [sp, #4]
 800db34:	2101      	movs	r1, #1
 800db36:	4620      	mov	r0, r4
 800db38:	b003      	add	sp, #12
 800db3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db3e:	f7f9 bba3 	b.w	8007288 <ucdr_serialize_endian_uint16_t>
 800db42:	bf00      	nop

0800db44 <uxr_deserialize_submessage_header>:
 800db44:	b530      	push	{r4, r5, lr}
 800db46:	4615      	mov	r5, r2
 800db48:	b083      	sub	sp, #12
 800db4a:	4604      	mov	r4, r0
 800db4c:	9301      	str	r3, [sp, #4]
 800db4e:	f7f9 fb05 	bl	800715c <ucdr_deserialize_uint8_t>
 800db52:	4629      	mov	r1, r5
 800db54:	4620      	mov	r0, r4
 800db56:	f7f9 fb01 	bl	800715c <ucdr_deserialize_uint8_t>
 800db5a:	9a01      	ldr	r2, [sp, #4]
 800db5c:	2101      	movs	r1, #1
 800db5e:	4620      	mov	r0, r4
 800db60:	b003      	add	sp, #12
 800db62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db66:	f7f9 bc83 	b.w	8007470 <ucdr_deserialize_endian_uint16_t>
 800db6a:	bf00      	nop

0800db6c <uxr_serialize_CLIENT_Representation>:
 800db6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db70:	2204      	movs	r2, #4
 800db72:	460e      	mov	r6, r1
 800db74:	4605      	mov	r5, r0
 800db76:	f003 ffaf 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800db7a:	4607      	mov	r7, r0
 800db7c:	2202      	movs	r2, #2
 800db7e:	1d31      	adds	r1, r6, #4
 800db80:	4628      	mov	r0, r5
 800db82:	f003 ffa9 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800db86:	4038      	ands	r0, r7
 800db88:	2202      	movs	r2, #2
 800db8a:	1db1      	adds	r1, r6, #6
 800db8c:	b2c7      	uxtb	r7, r0
 800db8e:	4628      	mov	r0, r5
 800db90:	f003 ffa2 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800db94:	2204      	movs	r2, #4
 800db96:	4007      	ands	r7, r0
 800db98:	f106 0108 	add.w	r1, r6, #8
 800db9c:	4628      	mov	r0, r5
 800db9e:	f003 ff9b 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800dba2:	4007      	ands	r7, r0
 800dba4:	7b31      	ldrb	r1, [r6, #12]
 800dba6:	4628      	mov	r0, r5
 800dba8:	f7f9 fac2 	bl	8007130 <ucdr_serialize_uint8_t>
 800dbac:	7b71      	ldrb	r1, [r6, #13]
 800dbae:	4007      	ands	r7, r0
 800dbb0:	4628      	mov	r0, r5
 800dbb2:	f7f9 fa8f 	bl	80070d4 <ucdr_serialize_bool>
 800dbb6:	7b73      	ldrb	r3, [r6, #13]
 800dbb8:	ea07 0800 	and.w	r8, r7, r0
 800dbbc:	b93b      	cbnz	r3, 800dbce <uxr_serialize_CLIENT_Representation+0x62>
 800dbbe:	8bb1      	ldrh	r1, [r6, #28]
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	f7f9 fae1 	bl	8007188 <ucdr_serialize_uint16_t>
 800dbc6:	ea08 0000 	and.w	r0, r8, r0
 800dbca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbce:	6931      	ldr	r1, [r6, #16]
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	f7f9 fcc3 	bl	800755c <ucdr_serialize_uint32_t>
 800dbd6:	6933      	ldr	r3, [r6, #16]
 800dbd8:	b1e3      	cbz	r3, 800dc14 <uxr_serialize_CLIENT_Representation+0xa8>
 800dbda:	b1c0      	cbz	r0, 800dc0e <uxr_serialize_CLIENT_Representation+0xa2>
 800dbdc:	4637      	mov	r7, r6
 800dbde:	f04f 0900 	mov.w	r9, #0
 800dbe2:	e000      	b.n	800dbe6 <uxr_serialize_CLIENT_Representation+0x7a>
 800dbe4:	b19c      	cbz	r4, 800dc0e <uxr_serialize_CLIENT_Representation+0xa2>
 800dbe6:	6979      	ldr	r1, [r7, #20]
 800dbe8:	4628      	mov	r0, r5
 800dbea:	f004 f899 	bl	8011d20 <ucdr_serialize_string>
 800dbee:	69b9      	ldr	r1, [r7, #24]
 800dbf0:	4604      	mov	r4, r0
 800dbf2:	4628      	mov	r0, r5
 800dbf4:	f004 f894 	bl	8011d20 <ucdr_serialize_string>
 800dbf8:	f109 0901 	add.w	r9, r9, #1
 800dbfc:	6933      	ldr	r3, [r6, #16]
 800dbfe:	4004      	ands	r4, r0
 800dc00:	3708      	adds	r7, #8
 800dc02:	4599      	cmp	r9, r3
 800dc04:	b2e4      	uxtb	r4, r4
 800dc06:	d3ed      	bcc.n	800dbe4 <uxr_serialize_CLIENT_Representation+0x78>
 800dc08:	ea08 0804 	and.w	r8, r8, r4
 800dc0c:	e7d7      	b.n	800dbbe <uxr_serialize_CLIENT_Representation+0x52>
 800dc0e:	f04f 0800 	mov.w	r8, #0
 800dc12:	e7d4      	b.n	800dbbe <uxr_serialize_CLIENT_Representation+0x52>
 800dc14:	ea08 0800 	and.w	r8, r8, r0
 800dc18:	e7d1      	b.n	800dbbe <uxr_serialize_CLIENT_Representation+0x52>
 800dc1a:	bf00      	nop

0800dc1c <uxr_deserialize_CLIENT_Representation>:
 800dc1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc20:	2204      	movs	r2, #4
 800dc22:	460c      	mov	r4, r1
 800dc24:	4605      	mov	r5, r0
 800dc26:	f003 ffbb 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800dc2a:	4607      	mov	r7, r0
 800dc2c:	2202      	movs	r2, #2
 800dc2e:	1d21      	adds	r1, r4, #4
 800dc30:	4628      	mov	r0, r5
 800dc32:	f003 ffb5 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800dc36:	4038      	ands	r0, r7
 800dc38:	2202      	movs	r2, #2
 800dc3a:	1da1      	adds	r1, r4, #6
 800dc3c:	b2c6      	uxtb	r6, r0
 800dc3e:	4628      	mov	r0, r5
 800dc40:	f003 ffae 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800dc44:	2204      	movs	r2, #4
 800dc46:	4006      	ands	r6, r0
 800dc48:	f104 0108 	add.w	r1, r4, #8
 800dc4c:	4628      	mov	r0, r5
 800dc4e:	f003 ffa7 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800dc52:	4006      	ands	r6, r0
 800dc54:	f104 010c 	add.w	r1, r4, #12
 800dc58:	4628      	mov	r0, r5
 800dc5a:	f7f9 fa7f 	bl	800715c <ucdr_deserialize_uint8_t>
 800dc5e:	f104 010d 	add.w	r1, r4, #13
 800dc62:	ea06 0700 	and.w	r7, r6, r0
 800dc66:	4628      	mov	r0, r5
 800dc68:	f7f9 fa4a 	bl	8007100 <ucdr_deserialize_bool>
 800dc6c:	7b63      	ldrb	r3, [r4, #13]
 800dc6e:	4007      	ands	r7, r0
 800dc70:	b93b      	cbnz	r3, 800dc82 <uxr_deserialize_CLIENT_Representation+0x66>
 800dc72:	f104 011c 	add.w	r1, r4, #28
 800dc76:	4628      	mov	r0, r5
 800dc78:	f7f9 fb86 	bl	8007388 <ucdr_deserialize_uint16_t>
 800dc7c:	4038      	ands	r0, r7
 800dc7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc82:	f104 0110 	add.w	r1, r4, #16
 800dc86:	4628      	mov	r0, r5
 800dc88:	f7f9 fd98 	bl	80077bc <ucdr_deserialize_uint32_t>
 800dc8c:	6923      	ldr	r3, [r4, #16]
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d903      	bls.n	800dc9a <uxr_deserialize_CLIENT_Representation+0x7e>
 800dc92:	2301      	movs	r3, #1
 800dc94:	2700      	movs	r7, #0
 800dc96:	75ab      	strb	r3, [r5, #22]
 800dc98:	e7eb      	b.n	800dc72 <uxr_deserialize_CLIENT_Representation+0x56>
 800dc9a:	b30b      	cbz	r3, 800dce0 <uxr_deserialize_CLIENT_Representation+0xc4>
 800dc9c:	b1f0      	cbz	r0, 800dcdc <uxr_deserialize_CLIENT_Representation+0xc0>
 800dc9e:	46a0      	mov	r8, r4
 800dca0:	f04f 0900 	mov.w	r9, #0
 800dca4:	e000      	b.n	800dca8 <uxr_deserialize_CLIENT_Representation+0x8c>
 800dca6:	b1ce      	cbz	r6, 800dcdc <uxr_deserialize_CLIENT_Representation+0xc0>
 800dca8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800dcac:	f108 0808 	add.w	r8, r8, #8
 800dcb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dcb4:	4628      	mov	r0, r5
 800dcb6:	f004 f843 	bl	8011d40 <ucdr_deserialize_string>
 800dcba:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dcbe:	4606      	mov	r6, r0
 800dcc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dcc4:	4628      	mov	r0, r5
 800dcc6:	f109 0901 	add.w	r9, r9, #1
 800dcca:	f004 f839 	bl	8011d40 <ucdr_deserialize_string>
 800dcce:	6923      	ldr	r3, [r4, #16]
 800dcd0:	4006      	ands	r6, r0
 800dcd2:	4599      	cmp	r9, r3
 800dcd4:	b2f6      	uxtb	r6, r6
 800dcd6:	d3e6      	bcc.n	800dca6 <uxr_deserialize_CLIENT_Representation+0x8a>
 800dcd8:	4037      	ands	r7, r6
 800dcda:	e7ca      	b.n	800dc72 <uxr_deserialize_CLIENT_Representation+0x56>
 800dcdc:	2700      	movs	r7, #0
 800dcde:	e7c8      	b.n	800dc72 <uxr_deserialize_CLIENT_Representation+0x56>
 800dce0:	4007      	ands	r7, r0
 800dce2:	e7c6      	b.n	800dc72 <uxr_deserialize_CLIENT_Representation+0x56>

0800dce4 <uxr_serialize_AGENT_Representation>:
 800dce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dce8:	2204      	movs	r2, #4
 800dcea:	460f      	mov	r7, r1
 800dcec:	4605      	mov	r5, r0
 800dcee:	f003 fef3 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	2202      	movs	r2, #2
 800dcf6:	1d39      	adds	r1, r7, #4
 800dcf8:	4628      	mov	r0, r5
 800dcfa:	f003 feed 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800dcfe:	4020      	ands	r0, r4
 800dd00:	2202      	movs	r2, #2
 800dd02:	1db9      	adds	r1, r7, #6
 800dd04:	b2c4      	uxtb	r4, r0
 800dd06:	4628      	mov	r0, r5
 800dd08:	f003 fee6 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800dd0c:	7a39      	ldrb	r1, [r7, #8]
 800dd0e:	4004      	ands	r4, r0
 800dd10:	4628      	mov	r0, r5
 800dd12:	f7f9 f9df 	bl	80070d4 <ucdr_serialize_bool>
 800dd16:	7a3b      	ldrb	r3, [r7, #8]
 800dd18:	ea00 0804 	and.w	r8, r0, r4
 800dd1c:	b913      	cbnz	r3, 800dd24 <uxr_serialize_AGENT_Representation+0x40>
 800dd1e:	4640      	mov	r0, r8
 800dd20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd24:	68f9      	ldr	r1, [r7, #12]
 800dd26:	4628      	mov	r0, r5
 800dd28:	f7f9 fc18 	bl	800755c <ucdr_serialize_uint32_t>
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	b303      	cbz	r3, 800dd72 <uxr_serialize_AGENT_Representation+0x8e>
 800dd30:	b1d0      	cbz	r0, 800dd68 <uxr_serialize_AGENT_Representation+0x84>
 800dd32:	463e      	mov	r6, r7
 800dd34:	f04f 0900 	mov.w	r9, #0
 800dd38:	e000      	b.n	800dd3c <uxr_serialize_AGENT_Representation+0x58>
 800dd3a:	b1ac      	cbz	r4, 800dd68 <uxr_serialize_AGENT_Representation+0x84>
 800dd3c:	6931      	ldr	r1, [r6, #16]
 800dd3e:	4628      	mov	r0, r5
 800dd40:	f003 ffee 	bl	8011d20 <ucdr_serialize_string>
 800dd44:	6971      	ldr	r1, [r6, #20]
 800dd46:	4604      	mov	r4, r0
 800dd48:	4628      	mov	r0, r5
 800dd4a:	f003 ffe9 	bl	8011d20 <ucdr_serialize_string>
 800dd4e:	f109 0901 	add.w	r9, r9, #1
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	4004      	ands	r4, r0
 800dd56:	3608      	adds	r6, #8
 800dd58:	4599      	cmp	r9, r3
 800dd5a:	b2e4      	uxtb	r4, r4
 800dd5c:	d3ed      	bcc.n	800dd3a <uxr_serialize_AGENT_Representation+0x56>
 800dd5e:	ea08 0804 	and.w	r8, r8, r4
 800dd62:	4640      	mov	r0, r8
 800dd64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd68:	f04f 0800 	mov.w	r8, #0
 800dd6c:	4640      	mov	r0, r8
 800dd6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd72:	ea08 0800 	and.w	r8, r8, r0
 800dd76:	e7d2      	b.n	800dd1e <uxr_serialize_AGENT_Representation+0x3a>

0800dd78 <uxr_serialize_DATAWRITER_Representation>:
 800dd78:	b570      	push	{r4, r5, r6, lr}
 800dd7a:	460d      	mov	r5, r1
 800dd7c:	7809      	ldrb	r1, [r1, #0]
 800dd7e:	4606      	mov	r6, r0
 800dd80:	f7f9 f9d6 	bl	8007130 <ucdr_serialize_uint8_t>
 800dd84:	4604      	mov	r4, r0
 800dd86:	b130      	cbz	r0, 800dd96 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800dd88:	782b      	ldrb	r3, [r5, #0]
 800dd8a:	2b02      	cmp	r3, #2
 800dd8c:	d00c      	beq.n	800dda8 <uxr_serialize_DATAWRITER_Representation+0x30>
 800dd8e:	2b03      	cmp	r3, #3
 800dd90:	d010      	beq.n	800ddb4 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d008      	beq.n	800dda8 <uxr_serialize_DATAWRITER_Representation+0x30>
 800dd96:	2202      	movs	r2, #2
 800dd98:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800dd9c:	4630      	mov	r0, r6
 800dd9e:	f003 fe9b 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800dda2:	4020      	ands	r0, r4
 800dda4:	b2c0      	uxtb	r0, r0
 800dda6:	bd70      	pop	{r4, r5, r6, pc}
 800dda8:	6869      	ldr	r1, [r5, #4]
 800ddaa:	4630      	mov	r0, r6
 800ddac:	f003 ffb8 	bl	8011d20 <ucdr_serialize_string>
 800ddb0:	4604      	mov	r4, r0
 800ddb2:	e7f0      	b.n	800dd96 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ddb4:	4629      	mov	r1, r5
 800ddb6:	4630      	mov	r0, r6
 800ddb8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800ddbc:	3104      	adds	r1, #4
 800ddbe:	f003 ff83 	bl	8011cc8 <ucdr_serialize_sequence_uint8_t>
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	e7e7      	b.n	800dd96 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ddc6:	bf00      	nop

0800ddc8 <uxr_serialize_ObjectVariant.part.0>:
 800ddc8:	b570      	push	{r4, r5, r6, lr}
 800ddca:	780b      	ldrb	r3, [r1, #0]
 800ddcc:	460c      	mov	r4, r1
 800ddce:	4605      	mov	r5, r0
 800ddd0:	3b01      	subs	r3, #1
 800ddd2:	2b0d      	cmp	r3, #13
 800ddd4:	d854      	bhi.n	800de80 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800ddd6:	e8df f003 	tbb	[pc, r3]
 800ddda:	0730      	.short	0x0730
 800dddc:	07071b1b 	.word	0x07071b1b
 800dde0:	0c530707 	.word	0x0c530707
 800dde4:	494e0c0c 	.word	0x494e0c0c
 800dde8:	3104      	adds	r1, #4
 800ddea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ddee:	f7ff bfc3 	b.w	800dd78 <uxr_serialize_DATAWRITER_Representation>
 800ddf2:	7909      	ldrb	r1, [r1, #4]
 800ddf4:	f7f9 f99c 	bl	8007130 <ucdr_serialize_uint8_t>
 800ddf8:	b1e8      	cbz	r0, 800de36 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800ddfa:	7923      	ldrb	r3, [r4, #4]
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d001      	beq.n	800de04 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800de00:	2b02      	cmp	r3, #2
 800de02:	d13d      	bne.n	800de80 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800de04:	68a1      	ldr	r1, [r4, #8]
 800de06:	4628      	mov	r0, r5
 800de08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de0c:	f003 bf88 	b.w	8011d20 <ucdr_serialize_string>
 800de10:	7909      	ldrb	r1, [r1, #4]
 800de12:	f7f9 f98d 	bl	8007130 <ucdr_serialize_uint8_t>
 800de16:	4606      	mov	r6, r0
 800de18:	b120      	cbz	r0, 800de24 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800de1a:	7923      	ldrb	r3, [r4, #4]
 800de1c:	2b02      	cmp	r3, #2
 800de1e:	d039      	beq.n	800de94 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800de20:	2b03      	cmp	r3, #3
 800de22:	d02f      	beq.n	800de84 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800de24:	2202      	movs	r2, #2
 800de26:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800de2a:	4628      	mov	r0, r5
 800de2c:	f003 fe54 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800de30:	4030      	ands	r0, r6
 800de32:	b2c0      	uxtb	r0, r0
 800de34:	bd70      	pop	{r4, r5, r6, pc}
 800de36:	2000      	movs	r0, #0
 800de38:	bd70      	pop	{r4, r5, r6, pc}
 800de3a:	7909      	ldrb	r1, [r1, #4]
 800de3c:	f7f9 f978 	bl	8007130 <ucdr_serialize_uint8_t>
 800de40:	4606      	mov	r6, r0
 800de42:	b158      	cbz	r0, 800de5c <uxr_serialize_ObjectVariant.part.0+0x94>
 800de44:	7923      	ldrb	r3, [r4, #4]
 800de46:	2b02      	cmp	r3, #2
 800de48:	d003      	beq.n	800de52 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800de4a:	2b03      	cmp	r3, #3
 800de4c:	d028      	beq.n	800dea0 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800de4e:	2b01      	cmp	r3, #1
 800de50:	d104      	bne.n	800de5c <uxr_serialize_ObjectVariant.part.0+0x94>
 800de52:	68a1      	ldr	r1, [r4, #8]
 800de54:	4628      	mov	r0, r5
 800de56:	f003 ff63 	bl	8011d20 <ucdr_serialize_string>
 800de5a:	4606      	mov	r6, r0
 800de5c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800de60:	4628      	mov	r0, r5
 800de62:	f7f9 fea1 	bl	8007ba8 <ucdr_serialize_int16_t>
 800de66:	4030      	ands	r0, r6
 800de68:	b2c0      	uxtb	r0, r0
 800de6a:	bd70      	pop	{r4, r5, r6, pc}
 800de6c:	3104      	adds	r1, #4
 800de6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de72:	f7ff be7b 	b.w	800db6c <uxr_serialize_CLIENT_Representation>
 800de76:	3104      	adds	r1, #4
 800de78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de7c:	f7ff bf32 	b.w	800dce4 <uxr_serialize_AGENT_Representation>
 800de80:	2001      	movs	r0, #1
 800de82:	bd70      	pop	{r4, r5, r6, pc}
 800de84:	68a2      	ldr	r2, [r4, #8]
 800de86:	f104 010c 	add.w	r1, r4, #12
 800de8a:	4628      	mov	r0, r5
 800de8c:	f003 ff1c 	bl	8011cc8 <ucdr_serialize_sequence_uint8_t>
 800de90:	4606      	mov	r6, r0
 800de92:	e7c7      	b.n	800de24 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800de94:	68a1      	ldr	r1, [r4, #8]
 800de96:	4628      	mov	r0, r5
 800de98:	f003 ff42 	bl	8011d20 <ucdr_serialize_string>
 800de9c:	4606      	mov	r6, r0
 800de9e:	e7c1      	b.n	800de24 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800dea0:	68a2      	ldr	r2, [r4, #8]
 800dea2:	f104 010c 	add.w	r1, r4, #12
 800dea6:	4628      	mov	r0, r5
 800dea8:	f003 ff0e 	bl	8011cc8 <ucdr_serialize_sequence_uint8_t>
 800deac:	4606      	mov	r6, r0
 800deae:	e7d5      	b.n	800de5c <uxr_serialize_ObjectVariant.part.0+0x94>

0800deb0 <uxr_deserialize_DATAWRITER_Representation>:
 800deb0:	b570      	push	{r4, r5, r6, lr}
 800deb2:	4606      	mov	r6, r0
 800deb4:	460d      	mov	r5, r1
 800deb6:	f7f9 f951 	bl	800715c <ucdr_deserialize_uint8_t>
 800deba:	4604      	mov	r4, r0
 800debc:	b130      	cbz	r0, 800decc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800debe:	782b      	ldrb	r3, [r5, #0]
 800dec0:	2b02      	cmp	r3, #2
 800dec2:	d00c      	beq.n	800dede <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800dec4:	2b03      	cmp	r3, #3
 800dec6:	d012      	beq.n	800deee <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800dec8:	2b01      	cmp	r3, #1
 800deca:	d008      	beq.n	800dede <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800decc:	2202      	movs	r2, #2
 800dece:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800ded2:	4630      	mov	r0, r6
 800ded4:	f003 fe64 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800ded8:	4020      	ands	r0, r4
 800deda:	b2c0      	uxtb	r0, r0
 800dedc:	bd70      	pop	{r4, r5, r6, pc}
 800dede:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dee2:	6869      	ldr	r1, [r5, #4]
 800dee4:	4630      	mov	r0, r6
 800dee6:	f003 ff2b 	bl	8011d40 <ucdr_deserialize_string>
 800deea:	4604      	mov	r4, r0
 800deec:	e7ee      	b.n	800decc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800deee:	1d2b      	adds	r3, r5, #4
 800def0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800def4:	f105 0108 	add.w	r1, r5, #8
 800def8:	4630      	mov	r0, r6
 800defa:	f003 fef7 	bl	8011cec <ucdr_deserialize_sequence_uint8_t>
 800defe:	4604      	mov	r4, r0
 800df00:	e7e4      	b.n	800decc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800df02:	bf00      	nop

0800df04 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800df04:	b570      	push	{r4, r5, r6, lr}
 800df06:	460d      	mov	r5, r1
 800df08:	7809      	ldrb	r1, [r1, #0]
 800df0a:	4606      	mov	r6, r0
 800df0c:	f7f9 f8e2 	bl	80070d4 <ucdr_serialize_bool>
 800df10:	782b      	ldrb	r3, [r5, #0]
 800df12:	4604      	mov	r4, r0
 800df14:	b94b      	cbnz	r3, 800df2a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800df16:	7a29      	ldrb	r1, [r5, #8]
 800df18:	4630      	mov	r0, r6
 800df1a:	f7f9 f8db 	bl	80070d4 <ucdr_serialize_bool>
 800df1e:	7a2b      	ldrb	r3, [r5, #8]
 800df20:	4004      	ands	r4, r0
 800df22:	b2e4      	uxtb	r4, r4
 800df24:	b943      	cbnz	r3, 800df38 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800df26:	4620      	mov	r0, r4
 800df28:	bd70      	pop	{r4, r5, r6, pc}
 800df2a:	6869      	ldr	r1, [r5, #4]
 800df2c:	4630      	mov	r0, r6
 800df2e:	f003 fef7 	bl	8011d20 <ucdr_serialize_string>
 800df32:	4004      	ands	r4, r0
 800df34:	b2e4      	uxtb	r4, r4
 800df36:	e7ee      	b.n	800df16 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800df38:	68e9      	ldr	r1, [r5, #12]
 800df3a:	4630      	mov	r0, r6
 800df3c:	f003 fef0 	bl	8011d20 <ucdr_serialize_string>
 800df40:	4004      	ands	r4, r0
 800df42:	4620      	mov	r0, r4
 800df44:	bd70      	pop	{r4, r5, r6, pc}
 800df46:	bf00      	nop

0800df48 <uxr_serialize_OBJK_Replier_Binary>:
 800df48:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800df4c:	460f      	mov	r7, r1
 800df4e:	4680      	mov	r8, r0
 800df50:	6809      	ldr	r1, [r1, #0]
 800df52:	f003 fee5 	bl	8011d20 <ucdr_serialize_string>
 800df56:	4605      	mov	r5, r0
 800df58:	6879      	ldr	r1, [r7, #4]
 800df5a:	4640      	mov	r0, r8
 800df5c:	f003 fee0 	bl	8011d20 <ucdr_serialize_string>
 800df60:	4005      	ands	r5, r0
 800df62:	68b9      	ldr	r1, [r7, #8]
 800df64:	4640      	mov	r0, r8
 800df66:	b2ec      	uxtb	r4, r5
 800df68:	f003 feda 	bl	8011d20 <ucdr_serialize_string>
 800df6c:	7b39      	ldrb	r1, [r7, #12]
 800df6e:	4004      	ands	r4, r0
 800df70:	4640      	mov	r0, r8
 800df72:	f7f9 f8af 	bl	80070d4 <ucdr_serialize_bool>
 800df76:	7b3b      	ldrb	r3, [r7, #12]
 800df78:	4004      	ands	r4, r0
 800df7a:	b94b      	cbnz	r3, 800df90 <uxr_serialize_OBJK_Replier_Binary+0x48>
 800df7c:	7d39      	ldrb	r1, [r7, #20]
 800df7e:	4640      	mov	r0, r8
 800df80:	f7f9 f8a8 	bl	80070d4 <ucdr_serialize_bool>
 800df84:	7d3b      	ldrb	r3, [r7, #20]
 800df86:	4004      	ands	r4, r0
 800df88:	b943      	cbnz	r3, 800df9c <uxr_serialize_OBJK_Replier_Binary+0x54>
 800df8a:	4620      	mov	r0, r4
 800df8c:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800df90:	6939      	ldr	r1, [r7, #16]
 800df92:	4640      	mov	r0, r8
 800df94:	f003 fec4 	bl	8011d20 <ucdr_serialize_string>
 800df98:	4004      	ands	r4, r0
 800df9a:	e7ef      	b.n	800df7c <uxr_serialize_OBJK_Replier_Binary+0x34>
 800df9c:	69b9      	ldr	r1, [r7, #24]
 800df9e:	4640      	mov	r0, r8
 800dfa0:	f003 febe 	bl	8011d20 <ucdr_serialize_string>
 800dfa4:	4004      	ands	r4, r0
 800dfa6:	b2e4      	uxtb	r4, r4
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800dfae:	bf00      	nop

0800dfb0 <uxr_deserialize_ObjectVariant>:
 800dfb0:	b570      	push	{r4, r5, r6, lr}
 800dfb2:	4605      	mov	r5, r0
 800dfb4:	460e      	mov	r6, r1
 800dfb6:	f7f9 f8d1 	bl	800715c <ucdr_deserialize_uint8_t>
 800dfba:	b168      	cbz	r0, 800dfd8 <uxr_deserialize_ObjectVariant+0x28>
 800dfbc:	7833      	ldrb	r3, [r6, #0]
 800dfbe:	4604      	mov	r4, r0
 800dfc0:	3b01      	subs	r3, #1
 800dfc2:	2b0d      	cmp	r3, #13
 800dfc4:	d809      	bhi.n	800dfda <uxr_deserialize_ObjectVariant+0x2a>
 800dfc6:	e8df f003 	tbb	[pc, r3]
 800dfca:	0a41      	.short	0x0a41
 800dfcc:	0a0a2323 	.word	0x0a0a2323
 800dfd0:	10080a0a 	.word	0x10080a0a
 800dfd4:	565c1010 	.word	0x565c1010
 800dfd8:	2400      	movs	r4, #0
 800dfda:	4620      	mov	r0, r4
 800dfdc:	bd70      	pop	{r4, r5, r6, pc}
 800dfde:	1d31      	adds	r1, r6, #4
 800dfe0:	4628      	mov	r0, r5
 800dfe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dfe6:	f7ff bf63 	b.w	800deb0 <uxr_deserialize_DATAWRITER_Representation>
 800dfea:	1d31      	adds	r1, r6, #4
 800dfec:	4628      	mov	r0, r5
 800dfee:	f7f9 f8b5 	bl	800715c <ucdr_deserialize_uint8_t>
 800dff2:	2800      	cmp	r0, #0
 800dff4:	d0f0      	beq.n	800dfd8 <uxr_deserialize_ObjectVariant+0x28>
 800dff6:	7933      	ldrb	r3, [r6, #4]
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d001      	beq.n	800e000 <uxr_deserialize_ObjectVariant+0x50>
 800dffc:	2b02      	cmp	r3, #2
 800dffe:	d1ec      	bne.n	800dfda <uxr_deserialize_ObjectVariant+0x2a>
 800e000:	68b1      	ldr	r1, [r6, #8]
 800e002:	4628      	mov	r0, r5
 800e004:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e00c:	f003 be98 	b.w	8011d40 <ucdr_deserialize_string>
 800e010:	1d31      	adds	r1, r6, #4
 800e012:	4628      	mov	r0, r5
 800e014:	f7f9 f8a2 	bl	800715c <ucdr_deserialize_uint8_t>
 800e018:	4604      	mov	r4, r0
 800e01a:	b170      	cbz	r0, 800e03a <uxr_deserialize_ObjectVariant+0x8a>
 800e01c:	7933      	ldrb	r3, [r6, #4]
 800e01e:	2b02      	cmp	r3, #2
 800e020:	d04c      	beq.n	800e0bc <uxr_deserialize_ObjectVariant+0x10c>
 800e022:	2b03      	cmp	r3, #3
 800e024:	d109      	bne.n	800e03a <uxr_deserialize_ObjectVariant+0x8a>
 800e026:	f106 0308 	add.w	r3, r6, #8
 800e02a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e02e:	f106 010c 	add.w	r1, r6, #12
 800e032:	4628      	mov	r0, r5
 800e034:	f003 fe5a 	bl	8011cec <ucdr_deserialize_sequence_uint8_t>
 800e038:	4604      	mov	r4, r0
 800e03a:	2202      	movs	r2, #2
 800e03c:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800e040:	4628      	mov	r0, r5
 800e042:	f003 fdad 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800e046:	4020      	ands	r0, r4
 800e048:	b2c4      	uxtb	r4, r0
 800e04a:	e7c6      	b.n	800dfda <uxr_deserialize_ObjectVariant+0x2a>
 800e04c:	1d31      	adds	r1, r6, #4
 800e04e:	4628      	mov	r0, r5
 800e050:	f7f9 f884 	bl	800715c <ucdr_deserialize_uint8_t>
 800e054:	4604      	mov	r4, r0
 800e056:	b130      	cbz	r0, 800e066 <uxr_deserialize_ObjectVariant+0xb6>
 800e058:	7933      	ldrb	r3, [r6, #4]
 800e05a:	2b02      	cmp	r3, #2
 800e05c:	d036      	beq.n	800e0cc <uxr_deserialize_ObjectVariant+0x11c>
 800e05e:	2b03      	cmp	r3, #3
 800e060:	d03c      	beq.n	800e0dc <uxr_deserialize_ObjectVariant+0x12c>
 800e062:	2b01      	cmp	r3, #1
 800e064:	d032      	beq.n	800e0cc <uxr_deserialize_ObjectVariant+0x11c>
 800e066:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800e06a:	4628      	mov	r0, r5
 800e06c:	f7f9 fe1c 	bl	8007ca8 <ucdr_deserialize_int16_t>
 800e070:	4020      	ands	r0, r4
 800e072:	b2c4      	uxtb	r4, r0
 800e074:	e7b1      	b.n	800dfda <uxr_deserialize_ObjectVariant+0x2a>
 800e076:	1d31      	adds	r1, r6, #4
 800e078:	4628      	mov	r0, r5
 800e07a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e07e:	f7ff bdcd 	b.w	800dc1c <uxr_deserialize_CLIENT_Representation>
 800e082:	2204      	movs	r2, #4
 800e084:	4628      	mov	r0, r5
 800e086:	18b1      	adds	r1, r6, r2
 800e088:	f003 fd8a 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800e08c:	4604      	mov	r4, r0
 800e08e:	2202      	movs	r2, #2
 800e090:	f106 0108 	add.w	r1, r6, #8
 800e094:	4628      	mov	r0, r5
 800e096:	f003 fd83 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800e09a:	4004      	ands	r4, r0
 800e09c:	2202      	movs	r2, #2
 800e09e:	f106 010a 	add.w	r1, r6, #10
 800e0a2:	4628      	mov	r0, r5
 800e0a4:	b2e4      	uxtb	r4, r4
 800e0a6:	f003 fd7b 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	f106 010c 	add.w	r1, r6, #12
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	401c      	ands	r4, r3
 800e0b4:	f7f9 f824 	bl	8007100 <ucdr_deserialize_bool>
 800e0b8:	4004      	ands	r4, r0
 800e0ba:	e78e      	b.n	800dfda <uxr_deserialize_ObjectVariant+0x2a>
 800e0bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0c0:	68b1      	ldr	r1, [r6, #8]
 800e0c2:	4628      	mov	r0, r5
 800e0c4:	f003 fe3c 	bl	8011d40 <ucdr_deserialize_string>
 800e0c8:	4604      	mov	r4, r0
 800e0ca:	e7b6      	b.n	800e03a <uxr_deserialize_ObjectVariant+0x8a>
 800e0cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0d0:	68b1      	ldr	r1, [r6, #8]
 800e0d2:	4628      	mov	r0, r5
 800e0d4:	f003 fe34 	bl	8011d40 <ucdr_deserialize_string>
 800e0d8:	4604      	mov	r4, r0
 800e0da:	e7c4      	b.n	800e066 <uxr_deserialize_ObjectVariant+0xb6>
 800e0dc:	f106 0308 	add.w	r3, r6, #8
 800e0e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0e4:	f106 010c 	add.w	r1, r6, #12
 800e0e8:	4628      	mov	r0, r5
 800e0ea:	f003 fdff 	bl	8011cec <ucdr_deserialize_sequence_uint8_t>
 800e0ee:	4604      	mov	r4, r0
 800e0f0:	e7b9      	b.n	800e066 <uxr_deserialize_ObjectVariant+0xb6>
 800e0f2:	bf00      	nop

0800e0f4 <uxr_deserialize_BaseObjectRequest>:
 800e0f4:	b570      	push	{r4, r5, r6, lr}
 800e0f6:	2202      	movs	r2, #2
 800e0f8:	4605      	mov	r5, r0
 800e0fa:	460e      	mov	r6, r1
 800e0fc:	f003 fd50 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800e100:	2202      	movs	r2, #2
 800e102:	4604      	mov	r4, r0
 800e104:	4628      	mov	r0, r5
 800e106:	18b1      	adds	r1, r6, r2
 800e108:	f003 fd4a 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800e10c:	4020      	ands	r0, r4
 800e10e:	b2c0      	uxtb	r0, r0
 800e110:	bd70      	pop	{r4, r5, r6, pc}
 800e112:	bf00      	nop

0800e114 <uxr_serialize_ActivityInfoVariant>:
 800e114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e118:	460e      	mov	r6, r1
 800e11a:	7809      	ldrb	r1, [r1, #0]
 800e11c:	4680      	mov	r8, r0
 800e11e:	f7f9 f807 	bl	8007130 <ucdr_serialize_uint8_t>
 800e122:	4607      	mov	r7, r0
 800e124:	b138      	cbz	r0, 800e136 <uxr_serialize_ActivityInfoVariant+0x22>
 800e126:	7833      	ldrb	r3, [r6, #0]
 800e128:	2b06      	cmp	r3, #6
 800e12a:	f000 8081 	beq.w	800e230 <uxr_serialize_ActivityInfoVariant+0x11c>
 800e12e:	2b0d      	cmp	r3, #13
 800e130:	d014      	beq.n	800e15c <uxr_serialize_ActivityInfoVariant+0x48>
 800e132:	2b05      	cmp	r3, #5
 800e134:	d002      	beq.n	800e13c <uxr_serialize_ActivityInfoVariant+0x28>
 800e136:	4638      	mov	r0, r7
 800e138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e13c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 800e140:	4640      	mov	r0, r8
 800e142:	f7f9 fd31 	bl	8007ba8 <ucdr_serialize_int16_t>
 800e146:	4607      	mov	r7, r0
 800e148:	4640      	mov	r0, r8
 800e14a:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 800e14e:	f7f9 fc5b 	bl	8007a08 <ucdr_serialize_uint64_t>
 800e152:	4038      	ands	r0, r7
 800e154:	b2c7      	uxtb	r7, r0
 800e156:	4638      	mov	r0, r7
 800e158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e15c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 800e160:	4640      	mov	r0, r8
 800e162:	f7f9 fd21 	bl	8007ba8 <ucdr_serialize_int16_t>
 800e166:	68f1      	ldr	r1, [r6, #12]
 800e168:	4607      	mov	r7, r0
 800e16a:	4640      	mov	r0, r8
 800e16c:	f7f9 f9f6 	bl	800755c <ucdr_serialize_uint32_t>
 800e170:	68f3      	ldr	r3, [r6, #12]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d0ed      	beq.n	800e152 <uxr_serialize_ActivityInfoVariant+0x3e>
 800e176:	b318      	cbz	r0, 800e1c0 <uxr_serialize_ActivityInfoVariant+0xac>
 800e178:	f106 090c 	add.w	r9, r6, #12
 800e17c:	2400      	movs	r4, #0
 800e17e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800e182:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 800e186:	7c29      	ldrb	r1, [r5, #16]
 800e188:	4640      	mov	r0, r8
 800e18a:	f7f8 ffd1 	bl	8007130 <ucdr_serialize_uint8_t>
 800e18e:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 800e192:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800e196:	2800      	cmp	r0, #0
 800e198:	d051      	beq.n	800e23e <uxr_serialize_ActivityInfoVariant+0x12a>
 800e19a:	7c2b      	ldrb	r3, [r5, #16]
 800e19c:	00c9      	lsls	r1, r1, #3
 800e19e:	2b03      	cmp	r3, #3
 800e1a0:	d854      	bhi.n	800e24c <uxr_serialize_ActivityInfoVariant+0x138>
 800e1a2:	e8df f003 	tbb	[pc, r3]
 800e1a6:	2133      	.short	0x2133
 800e1a8:	020f      	.short	0x020f
 800e1aa:	4449      	add	r1, r9
 800e1ac:	4640      	mov	r0, r8
 800e1ae:	6889      	ldr	r1, [r1, #8]
 800e1b0:	f003 fdb6 	bl	8011d20 <ucdr_serialize_string>
 800e1b4:	3401      	adds	r4, #1
 800e1b6:	68f2      	ldr	r2, [r6, #12]
 800e1b8:	4294      	cmp	r4, r2
 800e1ba:	d244      	bcs.n	800e246 <uxr_serialize_ActivityInfoVariant+0x132>
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	d1de      	bne.n	800e17e <uxr_serialize_ActivityInfoVariant+0x6a>
 800e1c0:	2700      	movs	r7, #0
 800e1c2:	e7b8      	b.n	800e136 <uxr_serialize_ActivityInfoVariant+0x22>
 800e1c4:	3108      	adds	r1, #8
 800e1c6:	44a2      	add	sl, r4
 800e1c8:	2210      	movs	r2, #16
 800e1ca:	4640      	mov	r0, r8
 800e1cc:	4449      	add	r1, r9
 800e1ce:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800e1d2:	f003 fc81 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800e1d6:	4605      	mov	r5, r0
 800e1d8:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 800e1dc:	4640      	mov	r0, r8
 800e1de:	f7f9 f9bd 	bl	800755c <ucdr_serialize_uint32_t>
 800e1e2:	4028      	ands	r0, r5
 800e1e4:	b2c0      	uxtb	r0, r0
 800e1e6:	e7e5      	b.n	800e1b4 <uxr_serialize_ActivityInfoVariant+0xa0>
 800e1e8:	3108      	adds	r1, #8
 800e1ea:	44a2      	add	sl, r4
 800e1ec:	2204      	movs	r2, #4
 800e1ee:	4640      	mov	r0, r8
 800e1f0:	4449      	add	r1, r9
 800e1f2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800e1f6:	f003 fc6f 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800e1fa:	4605      	mov	r5, r0
 800e1fc:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 800e200:	4640      	mov	r0, r8
 800e202:	f7f8 ffc1 	bl	8007188 <ucdr_serialize_uint16_t>
 800e206:	4028      	ands	r0, r5
 800e208:	b2c0      	uxtb	r0, r0
 800e20a:	e7d3      	b.n	800e1b4 <uxr_serialize_ActivityInfoVariant+0xa0>
 800e20c:	3108      	adds	r1, #8
 800e20e:	44a2      	add	sl, r4
 800e210:	2202      	movs	r2, #2
 800e212:	4640      	mov	r0, r8
 800e214:	4449      	add	r1, r9
 800e216:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800e21a:	f003 fc5d 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800e21e:	4605      	mov	r5, r0
 800e220:	f89a 1016 	ldrb.w	r1, [sl, #22]
 800e224:	4640      	mov	r0, r8
 800e226:	f7f8 ff83 	bl	8007130 <ucdr_serialize_uint8_t>
 800e22a:	4028      	ands	r0, r5
 800e22c:	b2c0      	uxtb	r0, r0
 800e22e:	e7c1      	b.n	800e1b4 <uxr_serialize_ActivityInfoVariant+0xa0>
 800e230:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 800e234:	4640      	mov	r0, r8
 800e236:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e23a:	f7f9 bcb5 	b.w	8007ba8 <ucdr_serialize_int16_t>
 800e23e:	3401      	adds	r4, #1
 800e240:	68f2      	ldr	r2, [r6, #12]
 800e242:	42a2      	cmp	r2, r4
 800e244:	d8bc      	bhi.n	800e1c0 <uxr_serialize_ActivityInfoVariant+0xac>
 800e246:	4007      	ands	r7, r0
 800e248:	b2ff      	uxtb	r7, r7
 800e24a:	e774      	b.n	800e136 <uxr_serialize_ActivityInfoVariant+0x22>
 800e24c:	3401      	adds	r4, #1
 800e24e:	68f3      	ldr	r3, [r6, #12]
 800e250:	3518      	adds	r5, #24
 800e252:	429c      	cmp	r4, r3
 800e254:	d397      	bcc.n	800e186 <uxr_serialize_ActivityInfoVariant+0x72>
 800e256:	e76e      	b.n	800e136 <uxr_serialize_ActivityInfoVariant+0x22>

0800e258 <uxr_deserialize_BaseObjectReply>:
 800e258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e25c:	2202      	movs	r2, #2
 800e25e:	4606      	mov	r6, r0
 800e260:	460f      	mov	r7, r1
 800e262:	f003 fc9d 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800e266:	2202      	movs	r2, #2
 800e268:	4605      	mov	r5, r0
 800e26a:	4630      	mov	r0, r6
 800e26c:	18b9      	adds	r1, r7, r2
 800e26e:	f003 fc97 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800e272:	4680      	mov	r8, r0
 800e274:	1d39      	adds	r1, r7, #4
 800e276:	4630      	mov	r0, r6
 800e278:	f7f8 ff70 	bl	800715c <ucdr_deserialize_uint8_t>
 800e27c:	ea05 0508 	and.w	r5, r5, r8
 800e280:	4604      	mov	r4, r0
 800e282:	1d79      	adds	r1, r7, #5
 800e284:	4630      	mov	r0, r6
 800e286:	402c      	ands	r4, r5
 800e288:	f7f8 ff68 	bl	800715c <ucdr_deserialize_uint8_t>
 800e28c:	4020      	ands	r0, r4
 800e28e:	b2c0      	uxtb	r0, r0
 800e290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e294 <uxr_serialize_ReadSpecification>:
 800e294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e296:	460e      	mov	r6, r1
 800e298:	4607      	mov	r7, r0
 800e29a:	7809      	ldrb	r1, [r1, #0]
 800e29c:	f7f8 ff48 	bl	8007130 <ucdr_serialize_uint8_t>
 800e2a0:	4604      	mov	r4, r0
 800e2a2:	7871      	ldrb	r1, [r6, #1]
 800e2a4:	4638      	mov	r0, r7
 800e2a6:	f7f8 ff43 	bl	8007130 <ucdr_serialize_uint8_t>
 800e2aa:	4004      	ands	r4, r0
 800e2ac:	78b1      	ldrb	r1, [r6, #2]
 800e2ae:	4638      	mov	r0, r7
 800e2b0:	f7f8 ff10 	bl	80070d4 <ucdr_serialize_bool>
 800e2b4:	78b3      	ldrb	r3, [r6, #2]
 800e2b6:	b2e4      	uxtb	r4, r4
 800e2b8:	4004      	ands	r4, r0
 800e2ba:	b943      	cbnz	r3, 800e2ce <uxr_serialize_ReadSpecification+0x3a>
 800e2bc:	7a31      	ldrb	r1, [r6, #8]
 800e2be:	4638      	mov	r0, r7
 800e2c0:	f7f8 ff08 	bl	80070d4 <ucdr_serialize_bool>
 800e2c4:	7a33      	ldrb	r3, [r6, #8]
 800e2c6:	4004      	ands	r4, r0
 800e2c8:	b93b      	cbnz	r3, 800e2da <uxr_serialize_ReadSpecification+0x46>
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2ce:	6871      	ldr	r1, [r6, #4]
 800e2d0:	4638      	mov	r0, r7
 800e2d2:	f003 fd25 	bl	8011d20 <ucdr_serialize_string>
 800e2d6:	4004      	ands	r4, r0
 800e2d8:	e7f0      	b.n	800e2bc <uxr_serialize_ReadSpecification+0x28>
 800e2da:	8971      	ldrh	r1, [r6, #10]
 800e2dc:	4638      	mov	r0, r7
 800e2de:	f7f8 ff53 	bl	8007188 <ucdr_serialize_uint16_t>
 800e2e2:	4605      	mov	r5, r0
 800e2e4:	89b1      	ldrh	r1, [r6, #12]
 800e2e6:	4638      	mov	r0, r7
 800e2e8:	f7f8 ff4e 	bl	8007188 <ucdr_serialize_uint16_t>
 800e2ec:	4005      	ands	r5, r0
 800e2ee:	89f1      	ldrh	r1, [r6, #14]
 800e2f0:	4638      	mov	r0, r7
 800e2f2:	b2ed      	uxtb	r5, r5
 800e2f4:	f7f8 ff48 	bl	8007188 <ucdr_serialize_uint16_t>
 800e2f8:	8a31      	ldrh	r1, [r6, #16]
 800e2fa:	4025      	ands	r5, r4
 800e2fc:	4604      	mov	r4, r0
 800e2fe:	4638      	mov	r0, r7
 800e300:	4025      	ands	r5, r4
 800e302:	f7f8 ff41 	bl	8007188 <ucdr_serialize_uint16_t>
 800e306:	ea00 0405 	and.w	r4, r0, r5
 800e30a:	4620      	mov	r0, r4
 800e30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e30e:	bf00      	nop

0800e310 <uxr_serialize_CREATE_CLIENT_Payload>:
 800e310:	f7ff bc2c 	b.w	800db6c <uxr_serialize_CLIENT_Representation>

0800e314 <uxr_serialize_CREATE_Payload>:
 800e314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e316:	2202      	movs	r2, #2
 800e318:	4607      	mov	r7, r0
 800e31a:	460e      	mov	r6, r1
 800e31c:	f003 fbdc 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800e320:	2202      	movs	r2, #2
 800e322:	4605      	mov	r5, r0
 800e324:	4638      	mov	r0, r7
 800e326:	18b1      	adds	r1, r6, r2
 800e328:	f003 fbd6 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800e32c:	7931      	ldrb	r1, [r6, #4]
 800e32e:	4604      	mov	r4, r0
 800e330:	4638      	mov	r0, r7
 800e332:	f7f8 fefd 	bl	8007130 <ucdr_serialize_uint8_t>
 800e336:	b170      	cbz	r0, 800e356 <uxr_serialize_CREATE_Payload+0x42>
 800e338:	7933      	ldrb	r3, [r6, #4]
 800e33a:	402c      	ands	r4, r5
 800e33c:	3b01      	subs	r3, #1
 800e33e:	b2e4      	uxtb	r4, r4
 800e340:	2b0d      	cmp	r3, #13
 800e342:	d809      	bhi.n	800e358 <uxr_serialize_CREATE_Payload+0x44>
 800e344:	e8df f003 	tbb	[pc, r3]
 800e348:	23230a4c 	.word	0x23230a4c
 800e34c:	0a0a0a0a 	.word	0x0a0a0a0a
 800e350:	12121208 	.word	0x12121208
 800e354:	3e45      	.short	0x3e45
 800e356:	2400      	movs	r4, #0
 800e358:	4620      	mov	r0, r4
 800e35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e35c:	f106 0108 	add.w	r1, r6, #8
 800e360:	4638      	mov	r0, r7
 800e362:	f7ff fd09 	bl	800dd78 <uxr_serialize_DATAWRITER_Representation>
 800e366:	4004      	ands	r4, r0
 800e368:	4620      	mov	r0, r4
 800e36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e36c:	7a31      	ldrb	r1, [r6, #8]
 800e36e:	4638      	mov	r0, r7
 800e370:	f7f8 fede 	bl	8007130 <ucdr_serialize_uint8_t>
 800e374:	2800      	cmp	r0, #0
 800e376:	d0ee      	beq.n	800e356 <uxr_serialize_CREATE_Payload+0x42>
 800e378:	7a33      	ldrb	r3, [r6, #8]
 800e37a:	2b01      	cmp	r3, #1
 800e37c:	d001      	beq.n	800e382 <uxr_serialize_CREATE_Payload+0x6e>
 800e37e:	2b02      	cmp	r3, #2
 800e380:	d1ea      	bne.n	800e358 <uxr_serialize_CREATE_Payload+0x44>
 800e382:	68f1      	ldr	r1, [r6, #12]
 800e384:	4638      	mov	r0, r7
 800e386:	f003 fccb 	bl	8011d20 <ucdr_serialize_string>
 800e38a:	4004      	ands	r4, r0
 800e38c:	e7e4      	b.n	800e358 <uxr_serialize_CREATE_Payload+0x44>
 800e38e:	7a31      	ldrb	r1, [r6, #8]
 800e390:	4638      	mov	r0, r7
 800e392:	f7f8 fecd 	bl	8007130 <ucdr_serialize_uint8_t>
 800e396:	4605      	mov	r5, r0
 800e398:	b158      	cbz	r0, 800e3b2 <uxr_serialize_CREATE_Payload+0x9e>
 800e39a:	7a33      	ldrb	r3, [r6, #8]
 800e39c:	2b02      	cmp	r3, #2
 800e39e:	d034      	beq.n	800e40a <uxr_serialize_CREATE_Payload+0xf6>
 800e3a0:	2b03      	cmp	r3, #3
 800e3a2:	d106      	bne.n	800e3b2 <uxr_serialize_CREATE_Payload+0x9e>
 800e3a4:	68f2      	ldr	r2, [r6, #12]
 800e3a6:	f106 0110 	add.w	r1, r6, #16
 800e3aa:	4638      	mov	r0, r7
 800e3ac:	f003 fc8c 	bl	8011cc8 <ucdr_serialize_sequence_uint8_t>
 800e3b0:	4605      	mov	r5, r0
 800e3b2:	2202      	movs	r2, #2
 800e3b4:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800e3b8:	4638      	mov	r0, r7
 800e3ba:	f003 fb8d 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800e3be:	4028      	ands	r0, r5
 800e3c0:	4004      	ands	r4, r0
 800e3c2:	e7c9      	b.n	800e358 <uxr_serialize_CREATE_Payload+0x44>
 800e3c4:	f106 0108 	add.w	r1, r6, #8
 800e3c8:	4638      	mov	r0, r7
 800e3ca:	f7ff fbcf 	bl	800db6c <uxr_serialize_CLIENT_Representation>
 800e3ce:	4004      	ands	r4, r0
 800e3d0:	e7c2      	b.n	800e358 <uxr_serialize_CREATE_Payload+0x44>
 800e3d2:	f106 0108 	add.w	r1, r6, #8
 800e3d6:	4638      	mov	r0, r7
 800e3d8:	f7ff fc84 	bl	800dce4 <uxr_serialize_AGENT_Representation>
 800e3dc:	4004      	ands	r4, r0
 800e3de:	e7bb      	b.n	800e358 <uxr_serialize_CREATE_Payload+0x44>
 800e3e0:	7a31      	ldrb	r1, [r6, #8]
 800e3e2:	4638      	mov	r0, r7
 800e3e4:	f7f8 fea4 	bl	8007130 <ucdr_serialize_uint8_t>
 800e3e8:	4605      	mov	r5, r0
 800e3ea:	b130      	cbz	r0, 800e3fa <uxr_serialize_CREATE_Payload+0xe6>
 800e3ec:	7a33      	ldrb	r3, [r6, #8]
 800e3ee:	2b02      	cmp	r3, #2
 800e3f0:	d011      	beq.n	800e416 <uxr_serialize_CREATE_Payload+0x102>
 800e3f2:	2b03      	cmp	r3, #3
 800e3f4:	d015      	beq.n	800e422 <uxr_serialize_CREATE_Payload+0x10e>
 800e3f6:	2b01      	cmp	r3, #1
 800e3f8:	d00d      	beq.n	800e416 <uxr_serialize_CREATE_Payload+0x102>
 800e3fa:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 800e3fe:	4638      	mov	r0, r7
 800e400:	f7f9 fbd2 	bl	8007ba8 <ucdr_serialize_int16_t>
 800e404:	4028      	ands	r0, r5
 800e406:	4004      	ands	r4, r0
 800e408:	e7a6      	b.n	800e358 <uxr_serialize_CREATE_Payload+0x44>
 800e40a:	68f1      	ldr	r1, [r6, #12]
 800e40c:	4638      	mov	r0, r7
 800e40e:	f003 fc87 	bl	8011d20 <ucdr_serialize_string>
 800e412:	4605      	mov	r5, r0
 800e414:	e7cd      	b.n	800e3b2 <uxr_serialize_CREATE_Payload+0x9e>
 800e416:	68f1      	ldr	r1, [r6, #12]
 800e418:	4638      	mov	r0, r7
 800e41a:	f003 fc81 	bl	8011d20 <ucdr_serialize_string>
 800e41e:	4605      	mov	r5, r0
 800e420:	e7eb      	b.n	800e3fa <uxr_serialize_CREATE_Payload+0xe6>
 800e422:	68f2      	ldr	r2, [r6, #12]
 800e424:	f106 0110 	add.w	r1, r6, #16
 800e428:	4638      	mov	r0, r7
 800e42a:	f003 fc4d 	bl	8011cc8 <ucdr_serialize_sequence_uint8_t>
 800e42e:	4605      	mov	r5, r0
 800e430:	e7e3      	b.n	800e3fa <uxr_serialize_CREATE_Payload+0xe6>
 800e432:	bf00      	nop

0800e434 <uxr_deserialize_GET_INFO_Payload>:
 800e434:	b570      	push	{r4, r5, r6, lr}
 800e436:	2202      	movs	r2, #2
 800e438:	4605      	mov	r5, r0
 800e43a:	460e      	mov	r6, r1
 800e43c:	f003 fbb0 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800e440:	2202      	movs	r2, #2
 800e442:	4604      	mov	r4, r0
 800e444:	4628      	mov	r0, r5
 800e446:	18b1      	adds	r1, r6, r2
 800e448:	f003 fbaa 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800e44c:	4603      	mov	r3, r0
 800e44e:	1d31      	adds	r1, r6, #4
 800e450:	4628      	mov	r0, r5
 800e452:	401c      	ands	r4, r3
 800e454:	f7f9 f9b2 	bl	80077bc <ucdr_deserialize_uint32_t>
 800e458:	b2e4      	uxtb	r4, r4
 800e45a:	4020      	ands	r0, r4
 800e45c:	bd70      	pop	{r4, r5, r6, pc}
 800e45e:	bf00      	nop

0800e460 <uxr_serialize_DELETE_Payload>:
 800e460:	b570      	push	{r4, r5, r6, lr}
 800e462:	2202      	movs	r2, #2
 800e464:	4605      	mov	r5, r0
 800e466:	460e      	mov	r6, r1
 800e468:	f003 fb36 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800e46c:	2202      	movs	r2, #2
 800e46e:	4604      	mov	r4, r0
 800e470:	4628      	mov	r0, r5
 800e472:	18b1      	adds	r1, r6, r2
 800e474:	f003 fb30 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800e478:	4020      	ands	r0, r4
 800e47a:	b2c0      	uxtb	r0, r0
 800e47c:	bd70      	pop	{r4, r5, r6, pc}
 800e47e:	bf00      	nop

0800e480 <uxr_deserialize_STATUS_AGENT_Payload>:
 800e480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e484:	460e      	mov	r6, r1
 800e486:	4605      	mov	r5, r0
 800e488:	f7f8 fe68 	bl	800715c <ucdr_deserialize_uint8_t>
 800e48c:	4604      	mov	r4, r0
 800e48e:	1c71      	adds	r1, r6, #1
 800e490:	4628      	mov	r0, r5
 800e492:	f7f8 fe63 	bl	800715c <ucdr_deserialize_uint8_t>
 800e496:	2204      	movs	r2, #4
 800e498:	4681      	mov	r9, r0
 800e49a:	4628      	mov	r0, r5
 800e49c:	18b1      	adds	r1, r6, r2
 800e49e:	f003 fb7f 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800e4a2:	f106 0108 	add.w	r1, r6, #8
 800e4a6:	4680      	mov	r8, r0
 800e4a8:	2202      	movs	r2, #2
 800e4aa:	4628      	mov	r0, r5
 800e4ac:	f003 fb78 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800e4b0:	ea04 0309 	and.w	r3, r4, r9
 800e4b4:	4607      	mov	r7, r0
 800e4b6:	2202      	movs	r2, #2
 800e4b8:	b2db      	uxtb	r3, r3
 800e4ba:	f106 010a 	add.w	r1, r6, #10
 800e4be:	4628      	mov	r0, r5
 800e4c0:	ea03 0408 	and.w	r4, r3, r8
 800e4c4:	f003 fb6c 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	4628      	mov	r0, r5
 800e4cc:	403c      	ands	r4, r7
 800e4ce:	f106 010c 	add.w	r1, r6, #12
 800e4d2:	461d      	mov	r5, r3
 800e4d4:	f7f8 fe14 	bl	8007100 <ucdr_deserialize_bool>
 800e4d8:	4025      	ands	r5, r4
 800e4da:	4028      	ands	r0, r5
 800e4dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e4e0 <uxr_deserialize_STATUS_Payload>:
 800e4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4e4:	2202      	movs	r2, #2
 800e4e6:	4606      	mov	r6, r0
 800e4e8:	460f      	mov	r7, r1
 800e4ea:	f003 fb59 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800e4ee:	2202      	movs	r2, #2
 800e4f0:	4605      	mov	r5, r0
 800e4f2:	4630      	mov	r0, r6
 800e4f4:	18b9      	adds	r1, r7, r2
 800e4f6:	f003 fb53 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800e4fa:	4680      	mov	r8, r0
 800e4fc:	1d39      	adds	r1, r7, #4
 800e4fe:	4630      	mov	r0, r6
 800e500:	f7f8 fe2c 	bl	800715c <ucdr_deserialize_uint8_t>
 800e504:	ea05 0508 	and.w	r5, r5, r8
 800e508:	4604      	mov	r4, r0
 800e50a:	1d79      	adds	r1, r7, #5
 800e50c:	4630      	mov	r0, r6
 800e50e:	402c      	ands	r4, r5
 800e510:	f7f8 fe24 	bl	800715c <ucdr_deserialize_uint8_t>
 800e514:	4020      	ands	r0, r4
 800e516:	b2c0      	uxtb	r0, r0
 800e518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e51c <uxr_serialize_INFO_Payload>:
 800e51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e520:	2202      	movs	r2, #2
 800e522:	460c      	mov	r4, r1
 800e524:	4605      	mov	r5, r0
 800e526:	f003 fad7 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800e52a:	2202      	movs	r2, #2
 800e52c:	4680      	mov	r8, r0
 800e52e:	4628      	mov	r0, r5
 800e530:	18a1      	adds	r1, r4, r2
 800e532:	f003 fad1 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800e536:	4607      	mov	r7, r0
 800e538:	7921      	ldrb	r1, [r4, #4]
 800e53a:	4628      	mov	r0, r5
 800e53c:	f7f8 fdf8 	bl	8007130 <ucdr_serialize_uint8_t>
 800e540:	ea08 0807 	and.w	r8, r8, r7
 800e544:	4606      	mov	r6, r0
 800e546:	7961      	ldrb	r1, [r4, #5]
 800e548:	4628      	mov	r0, r5
 800e54a:	ea06 0608 	and.w	r6, r6, r8
 800e54e:	f7f8 fdef 	bl	8007130 <ucdr_serialize_uint8_t>
 800e552:	7a21      	ldrb	r1, [r4, #8]
 800e554:	4030      	ands	r0, r6
 800e556:	b2c7      	uxtb	r7, r0
 800e558:	4628      	mov	r0, r5
 800e55a:	f7f8 fdbb 	bl	80070d4 <ucdr_serialize_bool>
 800e55e:	7a23      	ldrb	r3, [r4, #8]
 800e560:	4606      	mov	r6, r0
 800e562:	b96b      	cbnz	r3, 800e580 <uxr_serialize_INFO_Payload+0x64>
 800e564:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800e568:	4628      	mov	r0, r5
 800e56a:	f7f8 fdb3 	bl	80070d4 <ucdr_serialize_bool>
 800e56e:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800e572:	4030      	ands	r0, r6
 800e574:	b2c6      	uxtb	r6, r0
 800e576:	b983      	cbnz	r3, 800e59a <uxr_serialize_INFO_Payload+0x7e>
 800e578:	ea06 0007 	and.w	r0, r6, r7
 800e57c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e580:	7b21      	ldrb	r1, [r4, #12]
 800e582:	4628      	mov	r0, r5
 800e584:	f7f8 fdd4 	bl	8007130 <ucdr_serialize_uint8_t>
 800e588:	b188      	cbz	r0, 800e5ae <uxr_serialize_INFO_Payload+0x92>
 800e58a:	f104 010c 	add.w	r1, r4, #12
 800e58e:	4628      	mov	r0, r5
 800e590:	f7ff fc1a 	bl	800ddc8 <uxr_serialize_ObjectVariant.part.0>
 800e594:	4030      	ands	r0, r6
 800e596:	b2c6      	uxtb	r6, r0
 800e598:	e7e4      	b.n	800e564 <uxr_serialize_INFO_Payload+0x48>
 800e59a:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800e59e:	4628      	mov	r0, r5
 800e5a0:	f7ff fdb8 	bl	800e114 <uxr_serialize_ActivityInfoVariant>
 800e5a4:	4006      	ands	r6, r0
 800e5a6:	ea06 0007 	and.w	r0, r6, r7
 800e5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5ae:	4606      	mov	r6, r0
 800e5b0:	e7d8      	b.n	800e564 <uxr_serialize_INFO_Payload+0x48>
 800e5b2:	bf00      	nop

0800e5b4 <uxr_serialize_READ_DATA_Payload>:
 800e5b4:	b570      	push	{r4, r5, r6, lr}
 800e5b6:	2202      	movs	r2, #2
 800e5b8:	4605      	mov	r5, r0
 800e5ba:	460e      	mov	r6, r1
 800e5bc:	f003 fa8c 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800e5c0:	2202      	movs	r2, #2
 800e5c2:	4604      	mov	r4, r0
 800e5c4:	4628      	mov	r0, r5
 800e5c6:	18b1      	adds	r1, r6, r2
 800e5c8:	f003 fa86 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	1d31      	adds	r1, r6, #4
 800e5d0:	4628      	mov	r0, r5
 800e5d2:	401c      	ands	r4, r3
 800e5d4:	f7ff fe5e 	bl	800e294 <uxr_serialize_ReadSpecification>
 800e5d8:	b2e4      	uxtb	r4, r4
 800e5da:	4020      	ands	r0, r4
 800e5dc:	bd70      	pop	{r4, r5, r6, pc}
 800e5de:	bf00      	nop

0800e5e0 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800e5e0:	b570      	push	{r4, r5, r6, lr}
 800e5e2:	2202      	movs	r2, #2
 800e5e4:	4605      	mov	r5, r0
 800e5e6:	460e      	mov	r6, r1
 800e5e8:	f003 fa76 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800e5ec:	2202      	movs	r2, #2
 800e5ee:	4604      	mov	r4, r0
 800e5f0:	4628      	mov	r0, r5
 800e5f2:	18b1      	adds	r1, r6, r2
 800e5f4:	f003 fa70 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800e5f8:	4020      	ands	r0, r4
 800e5fa:	b2c0      	uxtb	r0, r0
 800e5fc:	bd70      	pop	{r4, r5, r6, pc}
 800e5fe:	bf00      	nop

0800e600 <uxr_serialize_ACKNACK_Payload>:
 800e600:	b570      	push	{r4, r5, r6, lr}
 800e602:	460c      	mov	r4, r1
 800e604:	4605      	mov	r5, r0
 800e606:	460e      	mov	r6, r1
 800e608:	f834 1b02 	ldrh.w	r1, [r4], #2
 800e60c:	f7f8 fdbc 	bl	8007188 <ucdr_serialize_uint16_t>
 800e610:	2202      	movs	r2, #2
 800e612:	4621      	mov	r1, r4
 800e614:	4604      	mov	r4, r0
 800e616:	4628      	mov	r0, r5
 800e618:	f003 fa5e 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800e61c:	4603      	mov	r3, r0
 800e61e:	7931      	ldrb	r1, [r6, #4]
 800e620:	4628      	mov	r0, r5
 800e622:	401c      	ands	r4, r3
 800e624:	f7f8 fd84 	bl	8007130 <ucdr_serialize_uint8_t>
 800e628:	b2e4      	uxtb	r4, r4
 800e62a:	4020      	ands	r0, r4
 800e62c:	bd70      	pop	{r4, r5, r6, pc}
 800e62e:	bf00      	nop

0800e630 <uxr_deserialize_ACKNACK_Payload>:
 800e630:	b570      	push	{r4, r5, r6, lr}
 800e632:	460e      	mov	r6, r1
 800e634:	4605      	mov	r5, r0
 800e636:	f7f8 fea7 	bl	8007388 <ucdr_deserialize_uint16_t>
 800e63a:	2202      	movs	r2, #2
 800e63c:	4604      	mov	r4, r0
 800e63e:	4628      	mov	r0, r5
 800e640:	18b1      	adds	r1, r6, r2
 800e642:	f003 faad 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800e646:	4603      	mov	r3, r0
 800e648:	1d31      	adds	r1, r6, #4
 800e64a:	4628      	mov	r0, r5
 800e64c:	401c      	ands	r4, r3
 800e64e:	f7f8 fd85 	bl	800715c <ucdr_deserialize_uint8_t>
 800e652:	b2e4      	uxtb	r4, r4
 800e654:	4020      	ands	r0, r4
 800e656:	bd70      	pop	{r4, r5, r6, pc}

0800e658 <uxr_serialize_HEARTBEAT_Payload>:
 800e658:	b570      	push	{r4, r5, r6, lr}
 800e65a:	460d      	mov	r5, r1
 800e65c:	4606      	mov	r6, r0
 800e65e:	8809      	ldrh	r1, [r1, #0]
 800e660:	f7f8 fd92 	bl	8007188 <ucdr_serialize_uint16_t>
 800e664:	8869      	ldrh	r1, [r5, #2]
 800e666:	4604      	mov	r4, r0
 800e668:	4630      	mov	r0, r6
 800e66a:	f7f8 fd8d 	bl	8007188 <ucdr_serialize_uint16_t>
 800e66e:	4603      	mov	r3, r0
 800e670:	7929      	ldrb	r1, [r5, #4]
 800e672:	4630      	mov	r0, r6
 800e674:	401c      	ands	r4, r3
 800e676:	f7f8 fd5b 	bl	8007130 <ucdr_serialize_uint8_t>
 800e67a:	b2e4      	uxtb	r4, r4
 800e67c:	4020      	ands	r0, r4
 800e67e:	bd70      	pop	{r4, r5, r6, pc}

0800e680 <uxr_deserialize_HEARTBEAT_Payload>:
 800e680:	b570      	push	{r4, r5, r6, lr}
 800e682:	460e      	mov	r6, r1
 800e684:	4605      	mov	r5, r0
 800e686:	f7f8 fe7f 	bl	8007388 <ucdr_deserialize_uint16_t>
 800e68a:	4604      	mov	r4, r0
 800e68c:	1cb1      	adds	r1, r6, #2
 800e68e:	4628      	mov	r0, r5
 800e690:	f7f8 fe7a 	bl	8007388 <ucdr_deserialize_uint16_t>
 800e694:	4603      	mov	r3, r0
 800e696:	1d31      	adds	r1, r6, #4
 800e698:	4628      	mov	r0, r5
 800e69a:	401c      	ands	r4, r3
 800e69c:	f7f8 fd5e 	bl	800715c <ucdr_deserialize_uint8_t>
 800e6a0:	b2e4      	uxtb	r4, r4
 800e6a2:	4020      	ands	r0, r4
 800e6a4:	bd70      	pop	{r4, r5, r6, pc}
 800e6a6:	bf00      	nop

0800e6a8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800e6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ac:	460e      	mov	r6, r1
 800e6ae:	4605      	mov	r5, r0
 800e6b0:	f7f9 fc06 	bl	8007ec0 <ucdr_deserialize_int32_t>
 800e6b4:	4607      	mov	r7, r0
 800e6b6:	1d31      	adds	r1, r6, #4
 800e6b8:	4628      	mov	r0, r5
 800e6ba:	f7f9 f87f 	bl	80077bc <ucdr_deserialize_uint32_t>
 800e6be:	4680      	mov	r8, r0
 800e6c0:	f106 0108 	add.w	r1, r6, #8
 800e6c4:	4628      	mov	r0, r5
 800e6c6:	f7f9 fbfb 	bl	8007ec0 <ucdr_deserialize_int32_t>
 800e6ca:	ea07 0708 	and.w	r7, r7, r8
 800e6ce:	4604      	mov	r4, r0
 800e6d0:	f106 010c 	add.w	r1, r6, #12
 800e6d4:	4628      	mov	r0, r5
 800e6d6:	403c      	ands	r4, r7
 800e6d8:	f7f9 f870 	bl	80077bc <ucdr_deserialize_uint32_t>
 800e6dc:	f106 0110 	add.w	r1, r6, #16
 800e6e0:	4004      	ands	r4, r0
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	f7f9 fbec 	bl	8007ec0 <ucdr_deserialize_int32_t>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	b2e4      	uxtb	r4, r4
 800e6ec:	4628      	mov	r0, r5
 800e6ee:	461d      	mov	r5, r3
 800e6f0:	f106 0114 	add.w	r1, r6, #20
 800e6f4:	f7f9 f862 	bl	80077bc <ucdr_deserialize_uint32_t>
 800e6f8:	402c      	ands	r4, r5
 800e6fa:	4020      	ands	r0, r4
 800e6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e700 <uxr_serialize_SampleIdentity>:
 800e700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e704:	4604      	mov	r4, r0
 800e706:	460d      	mov	r5, r1
 800e708:	220c      	movs	r2, #12
 800e70a:	f003 f9e5 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800e70e:	2203      	movs	r2, #3
 800e710:	f105 010c 	add.w	r1, r5, #12
 800e714:	4607      	mov	r7, r0
 800e716:	4620      	mov	r0, r4
 800e718:	f003 f9de 	bl	8011ad8 <ucdr_serialize_array_uint8_t>
 800e71c:	7be9      	ldrb	r1, [r5, #15]
 800e71e:	4680      	mov	r8, r0
 800e720:	4620      	mov	r0, r4
 800e722:	f7f8 fd05 	bl	8007130 <ucdr_serialize_uint8_t>
 800e726:	6929      	ldr	r1, [r5, #16]
 800e728:	4606      	mov	r6, r0
 800e72a:	4620      	mov	r0, r4
 800e72c:	f7f9 fb30 	bl	8007d90 <ucdr_serialize_int32_t>
 800e730:	ea07 0708 	and.w	r7, r7, r8
 800e734:	4603      	mov	r3, r0
 800e736:	4620      	mov	r0, r4
 800e738:	403e      	ands	r6, r7
 800e73a:	6969      	ldr	r1, [r5, #20]
 800e73c:	461c      	mov	r4, r3
 800e73e:	f7f8 ff0d 	bl	800755c <ucdr_serialize_uint32_t>
 800e742:	4034      	ands	r4, r6
 800e744:	4020      	ands	r0, r4
 800e746:	b2c0      	uxtb	r0, r0
 800e748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e74c <uxr_deserialize_SampleIdentity>:
 800e74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e750:	4604      	mov	r4, r0
 800e752:	460d      	mov	r5, r1
 800e754:	220c      	movs	r2, #12
 800e756:	f003 fa23 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800e75a:	2203      	movs	r2, #3
 800e75c:	f105 010c 	add.w	r1, r5, #12
 800e760:	4607      	mov	r7, r0
 800e762:	4620      	mov	r0, r4
 800e764:	f003 fa1c 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 800e768:	f105 010f 	add.w	r1, r5, #15
 800e76c:	4680      	mov	r8, r0
 800e76e:	4620      	mov	r0, r4
 800e770:	f7f8 fcf4 	bl	800715c <ucdr_deserialize_uint8_t>
 800e774:	f105 0110 	add.w	r1, r5, #16
 800e778:	4606      	mov	r6, r0
 800e77a:	4620      	mov	r0, r4
 800e77c:	f7f9 fba0 	bl	8007ec0 <ucdr_deserialize_int32_t>
 800e780:	ea07 0708 	and.w	r7, r7, r8
 800e784:	4603      	mov	r3, r0
 800e786:	4620      	mov	r0, r4
 800e788:	403e      	ands	r6, r7
 800e78a:	f105 0114 	add.w	r1, r5, #20
 800e78e:	461c      	mov	r4, r3
 800e790:	f7f9 f814 	bl	80077bc <ucdr_deserialize_uint32_t>
 800e794:	4034      	ands	r4, r6
 800e796:	4020      	ands	r0, r4
 800e798:	b2c0      	uxtb	r0, r0
 800e79a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e79e:	bf00      	nop

0800e7a0 <rcl_client_get_rmw_handle>:
 800e7a0:	b118      	cbz	r0, 800e7aa <rcl_client_get_rmw_handle+0xa>
 800e7a2:	6800      	ldr	r0, [r0, #0]
 800e7a4:	b108      	cbz	r0, 800e7aa <rcl_client_get_rmw_handle+0xa>
 800e7a6:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800e7aa:	4770      	bx	lr

0800e7ac <rcl_send_request>:
 800e7ac:	b570      	push	{r4, r5, r6, lr}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	b1f8      	cbz	r0, 800e7f2 <rcl_send_request+0x46>
 800e7b2:	4604      	mov	r4, r0
 800e7b4:	6800      	ldr	r0, [r0, #0]
 800e7b6:	b1e0      	cbz	r0, 800e7f2 <rcl_send_request+0x46>
 800e7b8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800e7bc:	b1cb      	cbz	r3, 800e7f2 <rcl_send_request+0x46>
 800e7be:	460e      	mov	r6, r1
 800e7c0:	b1e1      	cbz	r1, 800e7fc <rcl_send_request+0x50>
 800e7c2:	4615      	mov	r5, r2
 800e7c4:	b1d2      	cbz	r2, 800e7fc <rcl_send_request+0x50>
 800e7c6:	2105      	movs	r1, #5
 800e7c8:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800e7cc:	f002 fa94 	bl	8010cf8 <__atomic_load_8>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	4631      	mov	r1, r6
 800e7d6:	e9c5 2300 	strd	r2, r3, [r5]
 800e7da:	6823      	ldr	r3, [r4, #0]
 800e7dc:	462a      	mov	r2, r5
 800e7de:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800e7e2:	f7fc f841 	bl	800a868 <rmw_send_request>
 800e7e6:	4606      	mov	r6, r0
 800e7e8:	b160      	cbz	r0, 800e804 <rcl_send_request+0x58>
 800e7ea:	2601      	movs	r6, #1
 800e7ec:	4630      	mov	r0, r6
 800e7ee:	b002      	add	sp, #8
 800e7f0:	bd70      	pop	{r4, r5, r6, pc}
 800e7f2:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 800e7f6:	4630      	mov	r0, r6
 800e7f8:	b002      	add	sp, #8
 800e7fa:	bd70      	pop	{r4, r5, r6, pc}
 800e7fc:	260b      	movs	r6, #11
 800e7fe:	4630      	mov	r0, r6
 800e800:	b002      	add	sp, #8
 800e802:	bd70      	pop	{r4, r5, r6, pc}
 800e804:	6820      	ldr	r0, [r4, #0]
 800e806:	2105      	movs	r1, #5
 800e808:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e80c:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800e810:	9100      	str	r1, [sp, #0]
 800e812:	f002 fadd 	bl	8010dd0 <__atomic_exchange_8>
 800e816:	4630      	mov	r0, r6
 800e818:	b002      	add	sp, #8
 800e81a:	bd70      	pop	{r4, r5, r6, pc}
 800e81c:	0000      	movs	r0, r0
	...

0800e820 <rcl_take_response>:
 800e820:	b570      	push	{r4, r5, r6, lr}
 800e822:	468e      	mov	lr, r1
 800e824:	b08c      	sub	sp, #48	; 0x30
 800e826:	460c      	mov	r4, r1
 800e828:	4616      	mov	r6, r2
 800e82a:	f10d 0c18 	add.w	ip, sp, #24
 800e82e:	4605      	mov	r5, r0
 800e830:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e834:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e838:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e83c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e840:	b35d      	cbz	r5, 800e89a <rcl_take_response+0x7a>
 800e842:	682b      	ldr	r3, [r5, #0]
 800e844:	b34b      	cbz	r3, 800e89a <rcl_take_response+0x7a>
 800e846:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800e84a:	b330      	cbz	r0, 800e89a <rcl_take_response+0x7a>
 800e84c:	b346      	cbz	r6, 800e8a0 <rcl_take_response+0x80>
 800e84e:	2300      	movs	r3, #0
 800e850:	4632      	mov	r2, r6
 800e852:	a902      	add	r1, sp, #8
 800e854:	f88d 3007 	strb.w	r3, [sp, #7]
 800e858:	f10d 0307 	add.w	r3, sp, #7
 800e85c:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800e8a8 <rcl_take_response+0x88>
 800e860:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e864:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e868:	f7fc f906 	bl	800aa78 <rmw_take_response>
 800e86c:	4605      	mov	r5, r0
 800e86e:	b9c8      	cbnz	r0, 800e8a4 <rcl_take_response+0x84>
 800e870:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e874:	f240 13f5 	movw	r3, #501	; 0x1f5
 800e878:	2a00      	cmp	r2, #0
 800e87a:	bf08      	it	eq
 800e87c:	461d      	moveq	r5, r3
 800e87e:	f10d 0e18 	add.w	lr, sp, #24
 800e882:	46a4      	mov	ip, r4
 800e884:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e888:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e88c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e890:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e894:	4628      	mov	r0, r5
 800e896:	b00c      	add	sp, #48	; 0x30
 800e898:	bd70      	pop	{r4, r5, r6, pc}
 800e89a:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 800e89e:	e7ee      	b.n	800e87e <rcl_take_response+0x5e>
 800e8a0:	250b      	movs	r5, #11
 800e8a2:	e7ec      	b.n	800e87e <rcl_take_response+0x5e>
 800e8a4:	2501      	movs	r5, #1
 800e8a6:	e7ea      	b.n	800e87e <rcl_take_response+0x5e>
	...

0800e8b0 <rcl_client_is_valid>:
 800e8b0:	b130      	cbz	r0, 800e8c0 <rcl_client_is_valid+0x10>
 800e8b2:	6800      	ldr	r0, [r0, #0]
 800e8b4:	b120      	cbz	r0, 800e8c0 <rcl_client_is_valid+0x10>
 800e8b6:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800e8ba:	3800      	subs	r0, #0
 800e8bc:	bf18      	it	ne
 800e8be:	2001      	movne	r0, #1
 800e8c0:	4770      	bx	lr
 800e8c2:	bf00      	nop

0800e8c4 <rcl_convert_rmw_ret_to_rcl_ret>:
 800e8c4:	280b      	cmp	r0, #11
 800e8c6:	dc0d      	bgt.n	800e8e4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800e8c8:	2800      	cmp	r0, #0
 800e8ca:	db09      	blt.n	800e8e0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800e8cc:	280b      	cmp	r0, #11
 800e8ce:	d807      	bhi.n	800e8e0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800e8d0:	e8df f000 	tbb	[pc, r0]
 800e8d4:	07060607 	.word	0x07060607
 800e8d8:	06060606 	.word	0x06060606
 800e8dc:	07070606 	.word	0x07070606
 800e8e0:	2001      	movs	r0, #1
 800e8e2:	4770      	bx	lr
 800e8e4:	28cb      	cmp	r0, #203	; 0xcb
 800e8e6:	bf18      	it	ne
 800e8e8:	2001      	movne	r0, #1
 800e8ea:	4770      	bx	lr

0800e8ec <rcl_get_zero_initialized_context>:
 800e8ec:	4a03      	ldr	r2, [pc, #12]	; (800e8fc <rcl_get_zero_initialized_context+0x10>)
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8f4:	e883 0003 	stmia.w	r3, {r0, r1}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	4770      	bx	lr
 800e8fc:	08015308 	.word	0x08015308

0800e900 <rcl_context_is_valid>:
 800e900:	b118      	cbz	r0, 800e90a <rcl_context_is_valid+0xa>
 800e902:	6840      	ldr	r0, [r0, #4]
 800e904:	3800      	subs	r0, #0
 800e906:	bf18      	it	ne
 800e908:	2001      	movne	r0, #1
 800e90a:	4770      	bx	lr

0800e90c <__cleanup_context>:
 800e90c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e910:	4606      	mov	r6, r0
 800e912:	2300      	movs	r3, #0
 800e914:	6800      	ldr	r0, [r0, #0]
 800e916:	6073      	str	r3, [r6, #4]
 800e918:	2800      	cmp	r0, #0
 800e91a:	d049      	beq.n	800e9b0 <__cleanup_context+0xa4>
 800e91c:	6947      	ldr	r7, [r0, #20]
 800e91e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800e922:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800e926:	b137      	cbz	r7, 800e936 <__cleanup_context+0x2a>
 800e928:	3014      	adds	r0, #20
 800e92a:	f7f9 fe1f 	bl	800856c <rcl_init_options_fini>
 800e92e:	4607      	mov	r7, r0
 800e930:	2800      	cmp	r0, #0
 800e932:	d144      	bne.n	800e9be <__cleanup_context+0xb2>
 800e934:	6830      	ldr	r0, [r6, #0]
 800e936:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e938:	b143      	cbz	r3, 800e94c <__cleanup_context+0x40>
 800e93a:	3028      	adds	r0, #40	; 0x28
 800e93c:	f7fb fdf8 	bl	800a530 <rmw_context_fini>
 800e940:	b118      	cbz	r0, 800e94a <__cleanup_context+0x3e>
 800e942:	2f00      	cmp	r7, #0
 800e944:	d03e      	beq.n	800e9c4 <__cleanup_context+0xb8>
 800e946:	f7fb f8e3 	bl	8009b10 <rcutils_reset_error>
 800e94a:	6830      	ldr	r0, [r6, #0]
 800e94c:	6a03      	ldr	r3, [r0, #32]
 800e94e:	b1db      	cbz	r3, 800e988 <__cleanup_context+0x7c>
 800e950:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800e954:	2a01      	cmp	r2, #1
 800e956:	f17c 0100 	sbcs.w	r1, ip, #0
 800e95a:	db11      	blt.n	800e980 <__cleanup_context+0x74>
 800e95c:	2400      	movs	r4, #0
 800e95e:	4625      	mov	r5, r4
 800e960:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e964:	4649      	mov	r1, r9
 800e966:	b1b8      	cbz	r0, 800e998 <__cleanup_context+0x8c>
 800e968:	47c0      	blx	r8
 800e96a:	6833      	ldr	r3, [r6, #0]
 800e96c:	3401      	adds	r4, #1
 800e96e:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800e972:	f145 0500 	adc.w	r5, r5, #0
 800e976:	6a1b      	ldr	r3, [r3, #32]
 800e978:	4294      	cmp	r4, r2
 800e97a:	eb75 010c 	sbcs.w	r1, r5, ip
 800e97e:	dbef      	blt.n	800e960 <__cleanup_context+0x54>
 800e980:	4618      	mov	r0, r3
 800e982:	4649      	mov	r1, r9
 800e984:	47c0      	blx	r8
 800e986:	6830      	ldr	r0, [r6, #0]
 800e988:	4649      	mov	r1, r9
 800e98a:	47c0      	blx	r8
 800e98c:	2300      	movs	r3, #0
 800e98e:	4638      	mov	r0, r7
 800e990:	e9c6 3300 	strd	r3, r3, [r6]
 800e994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e998:	3401      	adds	r4, #1
 800e99a:	f145 0500 	adc.w	r5, r5, #0
 800e99e:	4294      	cmp	r4, r2
 800e9a0:	eb75 010c 	sbcs.w	r1, r5, ip
 800e9a4:	dbdc      	blt.n	800e960 <__cleanup_context+0x54>
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	4649      	mov	r1, r9
 800e9aa:	47c0      	blx	r8
 800e9ac:	6830      	ldr	r0, [r6, #0]
 800e9ae:	e7eb      	b.n	800e988 <__cleanup_context+0x7c>
 800e9b0:	4607      	mov	r7, r0
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	4638      	mov	r0, r7
 800e9b6:	e9c6 3300 	strd	r3, r3, [r6]
 800e9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9be:	f7fb f8a7 	bl	8009b10 <rcutils_reset_error>
 800e9c2:	e7b7      	b.n	800e934 <__cleanup_context+0x28>
 800e9c4:	f7ff ff7e 	bl	800e8c4 <rcl_convert_rmw_ret_to_rcl_ret>
 800e9c8:	4607      	mov	r7, r0
 800e9ca:	e7bc      	b.n	800e946 <__cleanup_context+0x3a>

0800e9cc <rcl_get_zero_initialized_guard_condition>:
 800e9cc:	4a03      	ldr	r2, [pc, #12]	; (800e9dc <rcl_get_zero_initialized_guard_condition+0x10>)
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e9d4:	e883 0003 	stmia.w	r3, {r0, r1}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	4770      	bx	lr
 800e9dc:	08015310 	.word	0x08015310

0800e9e0 <rcl_guard_condition_init_from_rmw>:
 800e9e0:	b082      	sub	sp, #8
 800e9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9e6:	b086      	sub	sp, #24
 800e9e8:	4604      	mov	r4, r0
 800e9ea:	460e      	mov	r6, r1
 800e9ec:	4615      	mov	r5, r2
 800e9ee:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800e9f2:	f10d 0e04 	add.w	lr, sp, #4
 800e9f6:	f84c 3f04 	str.w	r3, [ip, #4]!
 800e9fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e9fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ea02:	f8dc 3000 	ldr.w	r3, [ip]
 800ea06:	a801      	add	r0, sp, #4
 800ea08:	f8ce 3000 	str.w	r3, [lr]
 800ea0c:	f7fb f842 	bl	8009a94 <rcutils_allocator_is_valid>
 800ea10:	f080 0301 	eor.w	r3, r0, #1
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	bb3b      	cbnz	r3, 800ea68 <rcl_guard_condition_init_from_rmw+0x88>
 800ea18:	b334      	cbz	r4, 800ea68 <rcl_guard_condition_init_from_rmw+0x88>
 800ea1a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800ea1e:	f1b8 0f00 	cmp.w	r8, #0
 800ea22:	d11a      	bne.n	800ea5a <rcl_guard_condition_init_from_rmw+0x7a>
 800ea24:	b305      	cbz	r5, 800ea68 <rcl_guard_condition_init_from_rmw+0x88>
 800ea26:	4628      	mov	r0, r5
 800ea28:	f7ff ff6a 	bl	800e900 <rcl_context_is_valid>
 800ea2c:	b1f0      	cbz	r0, 800ea6c <rcl_guard_condition_init_from_rmw+0x8c>
 800ea2e:	9b01      	ldr	r3, [sp, #4]
 800ea30:	201c      	movs	r0, #28
 800ea32:	9905      	ldr	r1, [sp, #20]
 800ea34:	4798      	blx	r3
 800ea36:	4607      	mov	r7, r0
 800ea38:	6060      	str	r0, [r4, #4]
 800ea3a:	b320      	cbz	r0, 800ea86 <rcl_guard_condition_init_from_rmw+0xa6>
 800ea3c:	b1c6      	cbz	r6, 800ea70 <rcl_guard_condition_init_from_rmw+0x90>
 800ea3e:	6006      	str	r6, [r0, #0]
 800ea40:	f880 8004 	strb.w	r8, [r0, #4]
 800ea44:	ac01      	add	r4, sp, #4
 800ea46:	f107 0c08 	add.w	ip, r7, #8
 800ea4a:	2500      	movs	r5, #0
 800ea4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ea4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ea52:	6823      	ldr	r3, [r4, #0]
 800ea54:	f8cc 3000 	str.w	r3, [ip]
 800ea58:	e000      	b.n	800ea5c <rcl_guard_condition_init_from_rmw+0x7c>
 800ea5a:	2564      	movs	r5, #100	; 0x64
 800ea5c:	4628      	mov	r0, r5
 800ea5e:	b006      	add	sp, #24
 800ea60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea64:	b002      	add	sp, #8
 800ea66:	4770      	bx	lr
 800ea68:	250b      	movs	r5, #11
 800ea6a:	e7f7      	b.n	800ea5c <rcl_guard_condition_init_from_rmw+0x7c>
 800ea6c:	2565      	movs	r5, #101	; 0x65
 800ea6e:	e7f5      	b.n	800ea5c <rcl_guard_condition_init_from_rmw+0x7c>
 800ea70:	6828      	ldr	r0, [r5, #0]
 800ea72:	3028      	adds	r0, #40	; 0x28
 800ea74:	f002 fd9a 	bl	80115ac <rmw_create_guard_condition>
 800ea78:	6038      	str	r0, [r7, #0]
 800ea7a:	6867      	ldr	r7, [r4, #4]
 800ea7c:	683e      	ldr	r6, [r7, #0]
 800ea7e:	b126      	cbz	r6, 800ea8a <rcl_guard_condition_init_from_rmw+0xaa>
 800ea80:	2301      	movs	r3, #1
 800ea82:	713b      	strb	r3, [r7, #4]
 800ea84:	e7de      	b.n	800ea44 <rcl_guard_condition_init_from_rmw+0x64>
 800ea86:	250a      	movs	r5, #10
 800ea88:	e7e8      	b.n	800ea5c <rcl_guard_condition_init_from_rmw+0x7c>
 800ea8a:	9b02      	ldr	r3, [sp, #8]
 800ea8c:	4638      	mov	r0, r7
 800ea8e:	9905      	ldr	r1, [sp, #20]
 800ea90:	2501      	movs	r5, #1
 800ea92:	4798      	blx	r3
 800ea94:	6066      	str	r6, [r4, #4]
 800ea96:	e7e1      	b.n	800ea5c <rcl_guard_condition_init_from_rmw+0x7c>

0800ea98 <rcl_guard_condition_fini>:
 800ea98:	b570      	push	{r4, r5, r6, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	b1f0      	cbz	r0, 800eadc <rcl_guard_condition_fini+0x44>
 800ea9e:	6843      	ldr	r3, [r0, #4]
 800eaa0:	4604      	mov	r4, r0
 800eaa2:	b163      	cbz	r3, 800eabe <rcl_guard_condition_fini+0x26>
 800eaa4:	6818      	ldr	r0, [r3, #0]
 800eaa6:	68de      	ldr	r6, [r3, #12]
 800eaa8:	6999      	ldr	r1, [r3, #24]
 800eaaa:	b160      	cbz	r0, 800eac6 <rcl_guard_condition_fini+0x2e>
 800eaac:	791d      	ldrb	r5, [r3, #4]
 800eaae:	b965      	cbnz	r5, 800eaca <rcl_guard_condition_fini+0x32>
 800eab0:	4618      	mov	r0, r3
 800eab2:	47b0      	blx	r6
 800eab4:	2300      	movs	r3, #0
 800eab6:	4628      	mov	r0, r5
 800eab8:	6063      	str	r3, [r4, #4]
 800eaba:	b002      	add	sp, #8
 800eabc:	bd70      	pop	{r4, r5, r6, pc}
 800eabe:	461d      	mov	r5, r3
 800eac0:	4628      	mov	r0, r5
 800eac2:	b002      	add	sp, #8
 800eac4:	bd70      	pop	{r4, r5, r6, pc}
 800eac6:	4605      	mov	r5, r0
 800eac8:	e7f2      	b.n	800eab0 <rcl_guard_condition_fini+0x18>
 800eaca:	9101      	str	r1, [sp, #4]
 800eacc:	f002 fd84 	bl	80115d8 <rmw_destroy_guard_condition>
 800ead0:	1e05      	subs	r5, r0, #0
 800ead2:	6863      	ldr	r3, [r4, #4]
 800ead4:	9901      	ldr	r1, [sp, #4]
 800ead6:	bf18      	it	ne
 800ead8:	2501      	movne	r5, #1
 800eada:	e7e9      	b.n	800eab0 <rcl_guard_condition_fini+0x18>
 800eadc:	250b      	movs	r5, #11
 800eade:	4628      	mov	r0, r5
 800eae0:	b002      	add	sp, #8
 800eae2:	bd70      	pop	{r4, r5, r6, pc}

0800eae4 <rcl_guard_condition_get_default_options>:
 800eae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eae6:	b087      	sub	sp, #28
 800eae8:	4606      	mov	r6, r0
 800eaea:	4c0b      	ldr	r4, [pc, #44]	; (800eb18 <rcl_guard_condition_get_default_options+0x34>)
 800eaec:	4668      	mov	r0, sp
 800eaee:	f7fa ffc3 	bl	8009a78 <rcutils_get_default_allocator>
 800eaf2:	46ee      	mov	lr, sp
 800eaf4:	46a4      	mov	ip, r4
 800eaf6:	4625      	mov	r5, r4
 800eaf8:	4634      	mov	r4, r6
 800eafa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eafe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb04:	f8de 7000 	ldr.w	r7, [lr]
 800eb08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb0a:	4630      	mov	r0, r6
 800eb0c:	f8cc 7000 	str.w	r7, [ip]
 800eb10:	6027      	str	r7, [r4, #0]
 800eb12:	b007      	add	sp, #28
 800eb14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb16:	bf00      	nop
 800eb18:	20010de8 	.word	0x20010de8

0800eb1c <rcl_guard_condition_get_rmw_handle>:
 800eb1c:	b110      	cbz	r0, 800eb24 <rcl_guard_condition_get_rmw_handle+0x8>
 800eb1e:	6840      	ldr	r0, [r0, #4]
 800eb20:	b100      	cbz	r0, 800eb24 <rcl_guard_condition_get_rmw_handle+0x8>
 800eb22:	6800      	ldr	r0, [r0, #0]
 800eb24:	4770      	bx	lr
 800eb26:	bf00      	nop

0800eb28 <rcl_init>:
 800eb28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb2c:	1e05      	subs	r5, r0, #0
 800eb2e:	b09e      	sub	sp, #120	; 0x78
 800eb30:	460e      	mov	r6, r1
 800eb32:	4690      	mov	r8, r2
 800eb34:	461f      	mov	r7, r3
 800eb36:	f340 809f 	ble.w	800ec78 <rcl_init+0x150>
 800eb3a:	2900      	cmp	r1, #0
 800eb3c:	f000 809f 	beq.w	800ec7e <rcl_init+0x156>
 800eb40:	f1a1 0e04 	sub.w	lr, r1, #4
 800eb44:	f04f 0c00 	mov.w	ip, #0
 800eb48:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800eb4c:	f10c 0c01 	add.w	ip, ip, #1
 800eb50:	2c00      	cmp	r4, #0
 800eb52:	f000 8094 	beq.w	800ec7e <rcl_init+0x156>
 800eb56:	4565      	cmp	r5, ip
 800eb58:	d1f6      	bne.n	800eb48 <rcl_init+0x20>
 800eb5a:	f1b8 0f00 	cmp.w	r8, #0
 800eb5e:	f000 808e 	beq.w	800ec7e <rcl_init+0x156>
 800eb62:	f8d8 4000 	ldr.w	r4, [r8]
 800eb66:	2c00      	cmp	r4, #0
 800eb68:	f000 8089 	beq.w	800ec7e <rcl_init+0x156>
 800eb6c:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800eb70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb76:	6823      	ldr	r3, [r4, #0]
 800eb78:	a819      	add	r0, sp, #100	; 0x64
 800eb7a:	f8cc 3000 	str.w	r3, [ip]
 800eb7e:	f7fa ff89 	bl	8009a94 <rcutils_allocator_is_valid>
 800eb82:	f080 0001 	eor.w	r0, r0, #1
 800eb86:	b2c0      	uxtb	r0, r0
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	d178      	bne.n	800ec7e <rcl_init+0x156>
 800eb8c:	2f00      	cmp	r7, #0
 800eb8e:	d076      	beq.n	800ec7e <rcl_init+0x156>
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d178      	bne.n	800ec88 <rcl_init+0x160>
 800eb96:	2178      	movs	r1, #120	; 0x78
 800eb98:	2001      	movs	r0, #1
 800eb9a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800eb9e:	4798      	blx	r3
 800eba0:	4604      	mov	r4, r0
 800eba2:	6038      	str	r0, [r7, #0]
 800eba4:	2800      	cmp	r0, #0
 800eba6:	f000 80b6 	beq.w	800ed16 <rcl_init+0x1ee>
 800ebaa:	a802      	add	r0, sp, #8
 800ebac:	f002 fa88 	bl	80110c0 <rmw_get_zero_initialized_context>
 800ebb0:	a902      	add	r1, sp, #8
 800ebb2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ebb6:	2250      	movs	r2, #80	; 0x50
 800ebb8:	f004 ff43 	bl	8013a42 <memcpy>
 800ebbc:	ac19      	add	r4, sp, #100	; 0x64
 800ebbe:	f8d7 e000 	ldr.w	lr, [r7]
 800ebc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ebc4:	46f4      	mov	ip, lr
 800ebc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ebca:	6823      	ldr	r3, [r4, #0]
 800ebcc:	f10e 0114 	add.w	r1, lr, #20
 800ebd0:	4640      	mov	r0, r8
 800ebd2:	f8cc 3000 	str.w	r3, [ip]
 800ebd6:	f7f9 fcf3 	bl	80085c0 <rcl_init_options_copy>
 800ebda:	4604      	mov	r4, r0
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	d144      	bne.n	800ec6a <rcl_init+0x142>
 800ebe0:	f8d7 9000 	ldr.w	r9, [r7]
 800ebe4:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800ebe8:	f8c9 0020 	str.w	r0, [r9, #32]
 800ebec:	f8c9 5018 	str.w	r5, [r9, #24]
 800ebf0:	f8c9 801c 	str.w	r8, [r9, #28]
 800ebf4:	2d00      	cmp	r5, #0
 800ebf6:	d04e      	beq.n	800ec96 <rcl_init+0x16e>
 800ebf8:	2e00      	cmp	r6, #0
 800ebfa:	d04c      	beq.n	800ec96 <rcl_init+0x16e>
 800ebfc:	2104      	movs	r1, #4
 800ebfe:	4628      	mov	r0, r5
 800ec00:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800ec04:	4798      	blx	r3
 800ec06:	f8c9 0020 	str.w	r0, [r9, #32]
 800ec0a:	f8d7 9000 	ldr.w	r9, [r7]
 800ec0e:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800ec12:	46ca      	mov	sl, r9
 800ec14:	b343      	cbz	r3, 800ec68 <rcl_init+0x140>
 800ec16:	2d01      	cmp	r5, #1
 800ec18:	f178 0300 	sbcs.w	r3, r8, #0
 800ec1c:	db3b      	blt.n	800ec96 <rcl_init+0x16e>
 800ec1e:	2400      	movs	r4, #0
 800ec20:	3e04      	subs	r6, #4
 800ec22:	46a1      	mov	r9, r4
 800ec24:	e00b      	b.n	800ec3e <rcl_init+0x116>
 800ec26:	6831      	ldr	r1, [r6, #0]
 800ec28:	f004 ff0b 	bl	8013a42 <memcpy>
 800ec2c:	3401      	adds	r4, #1
 800ec2e:	f149 0900 	adc.w	r9, r9, #0
 800ec32:	45c8      	cmp	r8, r9
 800ec34:	bf08      	it	eq
 800ec36:	42a5      	cmpeq	r5, r4
 800ec38:	d02b      	beq.n	800ec92 <rcl_init+0x16a>
 800ec3a:	f8d7 a000 	ldr.w	sl, [r7]
 800ec3e:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800ec42:	f7f1 fb07 	bl	8000254 <strlen>
 800ec46:	1c42      	adds	r2, r0, #1
 800ec48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ec4a:	4610      	mov	r0, r2
 800ec4c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800ec4e:	f8da a020 	ldr.w	sl, [sl, #32]
 800ec52:	9201      	str	r2, [sp, #4]
 800ec54:	4798      	blx	r3
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800ec5c:	6a1b      	ldr	r3, [r3, #32]
 800ec5e:	9a01      	ldr	r2, [sp, #4]
 800ec60:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ec64:	2800      	cmp	r0, #0
 800ec66:	d1de      	bne.n	800ec26 <rcl_init+0xfe>
 800ec68:	240a      	movs	r4, #10
 800ec6a:	4638      	mov	r0, r7
 800ec6c:	f7ff fe4e 	bl	800e90c <__cleanup_context>
 800ec70:	4620      	mov	r0, r4
 800ec72:	b01e      	add	sp, #120	; 0x78
 800ec74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec78:	2900      	cmp	r1, #0
 800ec7a:	f43f af6e 	beq.w	800eb5a <rcl_init+0x32>
 800ec7e:	240b      	movs	r4, #11
 800ec80:	4620      	mov	r0, r4
 800ec82:	b01e      	add	sp, #120	; 0x78
 800ec84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec88:	2464      	movs	r4, #100	; 0x64
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	b01e      	add	sp, #120	; 0x78
 800ec8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec92:	f8d7 9000 	ldr.w	r9, [r7]
 800ec96:	4926      	ldr	r1, [pc, #152]	; (800ed30 <rcl_init+0x208>)
 800ec98:	680b      	ldr	r3, [r1, #0]
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	d036      	beq.n	800ed0c <rcl_init+0x1e4>
 800ec9e:	461a      	mov	r2, r3
 800eca0:	2400      	movs	r4, #0
 800eca2:	600b      	str	r3, [r1, #0]
 800eca4:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800eca8:	607b      	str	r3, [r7, #4]
 800ecaa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ecac:	3301      	adds	r3, #1
 800ecae:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800ecb2:	d034      	beq.n	800ed1e <rcl_init+0x1f6>
 800ecb4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800ecb8:	b93b      	cbnz	r3, 800ecca <rcl_init+0x1a2>
 800ecba:	3030      	adds	r0, #48	; 0x30
 800ecbc:	f000 f83a 	bl	800ed34 <rcl_get_localhost_only>
 800ecc0:	4604      	mov	r4, r0
 800ecc2:	2800      	cmp	r0, #0
 800ecc4:	d1d1      	bne.n	800ec6a <rcl_init+0x142>
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	6958      	ldr	r0, [r3, #20]
 800ecca:	aa18      	add	r2, sp, #96	; 0x60
 800eccc:	a917      	add	r1, sp, #92	; 0x5c
 800ecce:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800ecd0:	f000 fc9e 	bl	800f610 <rcl_validate_enclave_name>
 800ecd4:	4604      	mov	r4, r0
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	d1c7      	bne.n	800ec6a <rcl_init+0x142>
 800ecda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ecdc:	b9eb      	cbnz	r3, 800ed1a <rcl_init+0x1f2>
 800ecde:	6839      	ldr	r1, [r7, #0]
 800ece0:	694b      	ldr	r3, [r1, #20]
 800ece2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ece6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ece8:	f000 f9c8 	bl	800f07c <rcl_get_security_options_from_environment>
 800ecec:	4604      	mov	r4, r0
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	d1bb      	bne.n	800ec6a <rcl_init+0x142>
 800ecf2:	6839      	ldr	r1, [r7, #0]
 800ecf4:	6948      	ldr	r0, [r1, #20]
 800ecf6:	3128      	adds	r1, #40	; 0x28
 800ecf8:	3018      	adds	r0, #24
 800ecfa:	f7fb fae3 	bl	800a2c4 <rmw_init>
 800ecfe:	4604      	mov	r4, r0
 800ed00:	2800      	cmp	r0, #0
 800ed02:	d0bd      	beq.n	800ec80 <rcl_init+0x158>
 800ed04:	f7ff fdde 	bl	800e8c4 <rcl_convert_rmw_ret_to_rcl_ret>
 800ed08:	4604      	mov	r4, r0
 800ed0a:	e7ae      	b.n	800ec6a <rcl_init+0x142>
 800ed0c:	2201      	movs	r2, #1
 800ed0e:	461c      	mov	r4, r3
 800ed10:	600a      	str	r2, [r1, #0]
 800ed12:	4613      	mov	r3, r2
 800ed14:	e7c6      	b.n	800eca4 <rcl_init+0x17c>
 800ed16:	240a      	movs	r4, #10
 800ed18:	e7b2      	b.n	800ec80 <rcl_init+0x158>
 800ed1a:	2401      	movs	r4, #1
 800ed1c:	e7a5      	b.n	800ec6a <rcl_init+0x142>
 800ed1e:	3024      	adds	r0, #36	; 0x24
 800ed20:	f003 fd60 	bl	80127e4 <rcl_get_default_domain_id>
 800ed24:	4604      	mov	r4, r0
 800ed26:	2800      	cmp	r0, #0
 800ed28:	d19f      	bne.n	800ec6a <rcl_init+0x142>
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	6958      	ldr	r0, [r3, #20]
 800ed2e:	e7c1      	b.n	800ecb4 <rcl_init+0x18c>
 800ed30:	20010dfc 	.word	0x20010dfc

0800ed34 <rcl_get_localhost_only>:
 800ed34:	b510      	push	{r4, lr}
 800ed36:	2300      	movs	r3, #0
 800ed38:	b082      	sub	sp, #8
 800ed3a:	9301      	str	r3, [sp, #4]
 800ed3c:	b1b8      	cbz	r0, 800ed6e <rcl_get_localhost_only+0x3a>
 800ed3e:	4604      	mov	r4, r0
 800ed40:	a901      	add	r1, sp, #4
 800ed42:	480c      	ldr	r0, [pc, #48]	; (800ed74 <rcl_get_localhost_only+0x40>)
 800ed44:	f7fa feb4 	bl	8009ab0 <rcutils_get_env>
 800ed48:	b110      	cbz	r0, 800ed50 <rcl_get_localhost_only+0x1c>
 800ed4a:	2001      	movs	r0, #1
 800ed4c:	b002      	add	sp, #8
 800ed4e:	bd10      	pop	{r4, pc}
 800ed50:	9b01      	ldr	r3, [sp, #4]
 800ed52:	b113      	cbz	r3, 800ed5a <rcl_get_localhost_only+0x26>
 800ed54:	781a      	ldrb	r2, [r3, #0]
 800ed56:	2a31      	cmp	r2, #49	; 0x31
 800ed58:	d004      	beq.n	800ed64 <rcl_get_localhost_only+0x30>
 800ed5a:	2302      	movs	r3, #2
 800ed5c:	2000      	movs	r0, #0
 800ed5e:	7023      	strb	r3, [r4, #0]
 800ed60:	b002      	add	sp, #8
 800ed62:	bd10      	pop	{r4, pc}
 800ed64:	785b      	ldrb	r3, [r3, #1]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d1f7      	bne.n	800ed5a <rcl_get_localhost_only+0x26>
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	e7f6      	b.n	800ed5c <rcl_get_localhost_only+0x28>
 800ed6e:	200b      	movs	r0, #11
 800ed70:	b002      	add	sp, #8
 800ed72:	bd10      	pop	{r4, pc}
 800ed74:	08015318 	.word	0x08015318

0800ed78 <rcl_node_resolve_name>:
 800ed78:	b082      	sub	sp, #8
 800ed7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed7e:	b091      	sub	sp, #68	; 0x44
 800ed80:	ac1a      	add	r4, sp, #104	; 0x68
 800ed82:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 800ed86:	e884 000c 	stmia.w	r4, {r2, r3}
 800ed8a:	2800      	cmp	r0, #0
 800ed8c:	d03d      	beq.n	800ee0a <rcl_node_resolve_name+0x92>
 800ed8e:	460c      	mov	r4, r1
 800ed90:	4605      	mov	r5, r0
 800ed92:	f7f9 fdf7 	bl	8008984 <rcl_node_get_options>
 800ed96:	2800      	cmp	r0, #0
 800ed98:	d03a      	beq.n	800ee10 <rcl_node_resolve_name+0x98>
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	f7f9 fde2 	bl	8008964 <rcl_node_get_name>
 800eda0:	4606      	mov	r6, r0
 800eda2:	4628      	mov	r0, r5
 800eda4:	ad0b      	add	r5, sp, #44	; 0x2c
 800eda6:	f7f9 fde5 	bl	8008974 <rcl_node_get_namespace>
 800edaa:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800edae:	4607      	mov	r7, r0
 800edb0:	46ac      	mov	ip, r5
 800edb2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800edb6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800edba:	f8de 3000 	ldr.w	r3, [lr]
 800edbe:	f8cc 3000 	str.w	r3, [ip]
 800edc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800edc4:	b30b      	cbz	r3, 800ee0a <rcl_node_resolve_name+0x92>
 800edc6:	4689      	mov	r9, r1
 800edc8:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800edcc:	f002 f848 	bl	8010e60 <rcutils_get_zero_initialized_string_map>
 800edd0:	ab10      	add	r3, sp, #64	; 0x40
 800edd2:	9008      	str	r0, [sp, #32]
 800edd4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800edd8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800eddc:	2100      	movs	r1, #0
 800edde:	a808      	add	r0, sp, #32
 800ede0:	e895 000c 	ldmia.w	r5, {r2, r3}
 800ede4:	f002 f8b2 	bl	8010f4c <rcutils_string_map_init>
 800ede8:	4683      	mov	fp, r0
 800edea:	b1a0      	cbz	r0, 800ee16 <rcl_node_resolve_name+0x9e>
 800edec:	f7fa fe78 	bl	8009ae0 <rcutils_get_error_string>
 800edf0:	f7fa fe8e 	bl	8009b10 <rcutils_reset_error>
 800edf4:	f1bb 0f0a 	cmp.w	fp, #10
 800edf8:	bf18      	it	ne
 800edfa:	f04f 0b01 	movne.w	fp, #1
 800edfe:	4658      	mov	r0, fp
 800ee00:	b011      	add	sp, #68	; 0x44
 800ee02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee06:	b002      	add	sp, #8
 800ee08:	4770      	bx	lr
 800ee0a:	f04f 0b0b 	mov.w	fp, #11
 800ee0e:	e7f6      	b.n	800edfe <rcl_node_resolve_name+0x86>
 800ee10:	f04f 0b01 	mov.w	fp, #1
 800ee14:	e7f3      	b.n	800edfe <rcl_node_resolve_name+0x86>
 800ee16:	9009      	str	r0, [sp, #36]	; 0x24
 800ee18:	9007      	str	r0, [sp, #28]
 800ee1a:	a808      	add	r0, sp, #32
 800ee1c:	f003 fe76 	bl	8012b0c <rcl_get_default_topic_name_substitutions>
 800ee20:	4683      	mov	fp, r0
 800ee22:	b180      	cbz	r0, 800ee46 <rcl_node_resolve_name+0xce>
 800ee24:	280a      	cmp	r0, #10
 800ee26:	a808      	add	r0, sp, #32
 800ee28:	bf18      	it	ne
 800ee2a:	f04f 0b01 	movne.w	fp, #1
 800ee2e:	f002 f8cd 	bl	8010fcc <rcutils_string_map_fini>
 800ee32:	4604      	mov	r4, r0
 800ee34:	2800      	cmp	r0, #0
 800ee36:	d15b      	bne.n	800eef0 <rcl_node_resolve_name+0x178>
 800ee38:	4651      	mov	r1, sl
 800ee3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee3c:	47c8      	blx	r9
 800ee3e:	4651      	mov	r1, sl
 800ee40:	4620      	mov	r0, r4
 800ee42:	47c8      	blx	r9
 800ee44:	e7db      	b.n	800edfe <rcl_node_resolve_name+0x86>
 800ee46:	ab09      	add	r3, sp, #36	; 0x24
 800ee48:	46ec      	mov	ip, sp
 800ee4a:	9305      	str	r3, [sp, #20]
 800ee4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee52:	682b      	ldr	r3, [r5, #0]
 800ee54:	463a      	mov	r2, r7
 800ee56:	4631      	mov	r1, r6
 800ee58:	4620      	mov	r0, r4
 800ee5a:	f8cc 3000 	str.w	r3, [ip]
 800ee5e:	ab08      	add	r3, sp, #32
 800ee60:	f003 fcf4 	bl	801284c <rcl_expand_topic_name>
 800ee64:	4683      	mov	fp, r0
 800ee66:	b9d8      	cbnz	r0, 800eea0 <rcl_node_resolve_name+0x128>
 800ee68:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ee6a:	4602      	mov	r2, r0
 800ee6c:	9009      	str	r0, [sp, #36]	; 0x24
 800ee6e:	a90a      	add	r1, sp, #40	; 0x28
 800ee70:	4620      	mov	r0, r4
 800ee72:	f002 f9c9 	bl	8011208 <rmw_validate_full_topic_name>
 800ee76:	bb50      	cbnz	r0, 800eece <rcl_node_resolve_name+0x156>
 800ee78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ee7a:	2d00      	cmp	r5, #0
 800ee7c:	d140      	bne.n	800ef00 <rcl_node_resolve_name+0x188>
 800ee7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee80:	a808      	add	r0, sp, #32
 800ee82:	601c      	str	r4, [r3, #0]
 800ee84:	f002 f8a2 	bl	8010fcc <rcutils_string_map_fini>
 800ee88:	4683      	mov	fp, r0
 800ee8a:	2800      	cmp	r0, #0
 800ee8c:	d043      	beq.n	800ef16 <rcl_node_resolve_name+0x19e>
 800ee8e:	f7fa fe27 	bl	8009ae0 <rcutils_get_error_string>
 800ee92:	46a8      	mov	r8, r5
 800ee94:	f04f 0b01 	mov.w	fp, #1
 800ee98:	462c      	mov	r4, r5
 800ee9a:	f7fa fe39 	bl	8009b10 <rcutils_reset_error>
 800ee9e:	e00a      	b.n	800eeb6 <rcl_node_resolve_name+0x13e>
 800eea0:	2867      	cmp	r0, #103	; 0x67
 800eea2:	bf14      	ite	ne
 800eea4:	f04f 0800 	movne.w	r8, #0
 800eea8:	f008 0801 	andeq.w	r8, r8, #1
 800eeac:	9c07      	ldr	r4, [sp, #28]
 800eeae:	a808      	add	r0, sp, #32
 800eeb0:	f002 f88c 	bl	8010fcc <rcutils_string_map_fini>
 800eeb4:	bb50      	cbnz	r0, 800ef0c <rcl_node_resolve_name+0x194>
 800eeb6:	4651      	mov	r1, sl
 800eeb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eeba:	47c8      	blx	r9
 800eebc:	4651      	mov	r1, sl
 800eebe:	4620      	mov	r0, r4
 800eec0:	47c8      	blx	r9
 800eec2:	f1b8 0f00 	cmp.w	r8, #0
 800eec6:	bf18      	it	ne
 800eec8:	f04f 0b68 	movne.w	fp, #104	; 0x68
 800eecc:	e797      	b.n	800edfe <rcl_node_resolve_name+0x86>
 800eece:	f7fa fe07 	bl	8009ae0 <rcutils_get_error_string>
 800eed2:	f7fa fe1d 	bl	8009b10 <rcutils_reset_error>
 800eed6:	a808      	add	r0, sp, #32
 800eed8:	f002 f878 	bl	8010fcc <rcutils_string_map_fini>
 800eedc:	b998      	cbnz	r0, 800ef06 <rcl_node_resolve_name+0x18e>
 800eede:	4651      	mov	r1, sl
 800eee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eee2:	47c8      	blx	r9
 800eee4:	4651      	mov	r1, sl
 800eee6:	4620      	mov	r0, r4
 800eee8:	f04f 0b01 	mov.w	fp, #1
 800eeec:	47c8      	blx	r9
 800eeee:	e786      	b.n	800edfe <rcl_node_resolve_name+0x86>
 800eef0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800eef4:	f7fa fdf4 	bl	8009ae0 <rcutils_get_error_string>
 800eef8:	f7fa fe0a 	bl	8009b10 <rcutils_reset_error>
 800eefc:	4644      	mov	r4, r8
 800eefe:	e7da      	b.n	800eeb6 <rcl_node_resolve_name+0x13e>
 800ef00:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ef04:	e7d3      	b.n	800eeae <rcl_node_resolve_name+0x136>
 800ef06:	46d8      	mov	r8, fp
 800ef08:	f04f 0b01 	mov.w	fp, #1
 800ef0c:	f7fa fde8 	bl	8009ae0 <rcutils_get_error_string>
 800ef10:	f7fa fdfe 	bl	8009b10 <rcutils_reset_error>
 800ef14:	e7cf      	b.n	800eeb6 <rcl_node_resolve_name+0x13e>
 800ef16:	4651      	mov	r1, sl
 800ef18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef1a:	47c8      	blx	r9
 800ef1c:	4651      	mov	r1, sl
 800ef1e:	4658      	mov	r0, fp
 800ef20:	47c8      	blx	r9
 800ef22:	e76c      	b.n	800edfe <rcl_node_resolve_name+0x86>

0800ef24 <exact_match_lookup>:
 800ef24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef26:	f102 0708 	add.w	r7, r2, #8
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	b085      	sub	sp, #20
 800ef2e:	4614      	mov	r4, r2
 800ef30:	4606      	mov	r6, r0
 800ef32:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800ef36:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	4919      	ldr	r1, [pc, #100]	; (800efa4 <exact_match_lookup+0x80>)
 800ef3e:	e894 000c 	ldmia.w	r4, {r2, r3}
 800ef42:	f001 ff7f 	bl	8010e44 <rcutils_join_path>
 800ef46:	7833      	ldrb	r3, [r6, #0]
 800ef48:	4605      	mov	r5, r0
 800ef4a:	2b2f      	cmp	r3, #47	; 0x2f
 800ef4c:	d023      	beq.n	800ef96 <exact_match_lookup+0x72>
 800ef4e:	f104 030c 	add.w	r3, r4, #12
 800ef52:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ef56:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ef5a:	1c70      	adds	r0, r6, #1
 800ef5c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ef60:	f001 ff76 	bl	8010e50 <rcutils_to_native_path>
 800ef64:	4606      	mov	r6, r0
 800ef66:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800ef6a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ef6e:	4631      	mov	r1, r6
 800ef70:	4628      	mov	r0, r5
 800ef72:	e894 000c 	ldmia.w	r4, {r2, r3}
 800ef76:	f001 ff65 	bl	8010e44 <rcutils_join_path>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	4630      	mov	r0, r6
 800ef7e:	6862      	ldr	r2, [r4, #4]
 800ef80:	461e      	mov	r6, r3
 800ef82:	6921      	ldr	r1, [r4, #16]
 800ef84:	4790      	blx	r2
 800ef86:	4628      	mov	r0, r5
 800ef88:	4635      	mov	r5, r6
 800ef8a:	6863      	ldr	r3, [r4, #4]
 800ef8c:	6921      	ldr	r1, [r4, #16]
 800ef8e:	4798      	blx	r3
 800ef90:	4628      	mov	r0, r5
 800ef92:	b005      	add	sp, #20
 800ef94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef96:	7873      	ldrb	r3, [r6, #1]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d1d8      	bne.n	800ef4e <exact_match_lookup+0x2a>
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	b005      	add	sp, #20
 800efa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efa2:	bf00      	nop
 800efa4:	08015368 	.word	0x08015368

0800efa8 <rcl_get_secure_root>:
 800efa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efac:	b085      	sub	sp, #20
 800efae:	b168      	cbz	r0, 800efcc <rcl_get_secure_root+0x24>
 800efb0:	4607      	mov	r7, r0
 800efb2:	4608      	mov	r0, r1
 800efb4:	460c      	mov	r4, r1
 800efb6:	f7fa fd6d 	bl	8009a94 <rcutils_allocator_is_valid>
 800efba:	b138      	cbz	r0, 800efcc <rcl_get_secure_root+0x24>
 800efbc:	2300      	movs	r3, #0
 800efbe:	482d      	ldr	r0, [pc, #180]	; (800f074 <rcl_get_secure_root+0xcc>)
 800efc0:	a903      	add	r1, sp, #12
 800efc2:	9303      	str	r3, [sp, #12]
 800efc4:	f7fa fd74 	bl	8009ab0 <rcutils_get_env>
 800efc8:	4605      	mov	r5, r0
 800efca:	b120      	cbz	r0, 800efd6 <rcl_get_secure_root+0x2e>
 800efcc:	2500      	movs	r5, #0
 800efce:	4628      	mov	r0, r5
 800efd0:	b005      	add	sp, #20
 800efd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efd6:	9b03      	ldr	r3, [sp, #12]
 800efd8:	781a      	ldrb	r2, [r3, #0]
 800efda:	2a00      	cmp	r2, #0
 800efdc:	d0f6      	beq.n	800efcc <rcl_get_secure_root+0x24>
 800efde:	f104 090c 	add.w	r9, r4, #12
 800efe2:	e899 0003 	ldmia.w	r9, {r0, r1}
 800efe6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800efea:	4618      	mov	r0, r3
 800efec:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800eff0:	f7fa fee4 	bl	8009dbc <rcutils_strdup>
 800eff4:	4680      	mov	r8, r0
 800eff6:	2800      	cmp	r0, #0
 800eff8:	d0e8      	beq.n	800efcc <rcl_get_secure_root+0x24>
 800effa:	a903      	add	r1, sp, #12
 800effc:	481e      	ldr	r0, [pc, #120]	; (800f078 <rcl_get_secure_root+0xd0>)
 800effe:	9503      	str	r5, [sp, #12]
 800f000:	f7fa fd56 	bl	8009ab0 <rcutils_get_env>
 800f004:	b160      	cbz	r0, 800f020 <rcl_get_secure_root+0x78>
 800f006:	2600      	movs	r6, #0
 800f008:	4630      	mov	r0, r6
 800f00a:	6863      	ldr	r3, [r4, #4]
 800f00c:	6921      	ldr	r1, [r4, #16]
 800f00e:	4798      	blx	r3
 800f010:	4640      	mov	r0, r8
 800f012:	6863      	ldr	r3, [r4, #4]
 800f014:	6921      	ldr	r1, [r4, #16]
 800f016:	4798      	blx	r3
 800f018:	4628      	mov	r0, r5
 800f01a:	b005      	add	sp, #20
 800f01c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f020:	9b03      	ldr	r3, [sp, #12]
 800f022:	781e      	ldrb	r6, [r3, #0]
 800f024:	b1f6      	cbz	r6, 800f064 <rcl_get_secure_root+0xbc>
 800f026:	e899 0003 	ldmia.w	r9, {r0, r1}
 800f02a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f02e:	4618      	mov	r0, r3
 800f030:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f034:	f7fa fec2 	bl	8009dbc <rcutils_strdup>
 800f038:	4606      	mov	r6, r0
 800f03a:	2800      	cmp	r0, #0
 800f03c:	d0e3      	beq.n	800f006 <rcl_get_secure_root+0x5e>
 800f03e:	4622      	mov	r2, r4
 800f040:	4641      	mov	r1, r8
 800f042:	f7ff ff6f 	bl	800ef24 <exact_match_lookup>
 800f046:	4605      	mov	r5, r0
 800f048:	2d00      	cmp	r5, #0
 800f04a:	d0dd      	beq.n	800f008 <rcl_get_secure_root+0x60>
 800f04c:	4628      	mov	r0, r5
 800f04e:	f001 fef7 	bl	8010e40 <rcutils_is_directory>
 800f052:	4603      	mov	r3, r0
 800f054:	2800      	cmp	r0, #0
 800f056:	d1d7      	bne.n	800f008 <rcl_get_secure_root+0x60>
 800f058:	4628      	mov	r0, r5
 800f05a:	6921      	ldr	r1, [r4, #16]
 800f05c:	461d      	mov	r5, r3
 800f05e:	6863      	ldr	r3, [r4, #4]
 800f060:	4798      	blx	r3
 800f062:	e7d1      	b.n	800f008 <rcl_get_secure_root+0x60>
 800f064:	4622      	mov	r2, r4
 800f066:	4638      	mov	r0, r7
 800f068:	4641      	mov	r1, r8
 800f06a:	f7ff ff5b 	bl	800ef24 <exact_match_lookup>
 800f06e:	4605      	mov	r5, r0
 800f070:	e7ea      	b.n	800f048 <rcl_get_secure_root+0xa0>
 800f072:	bf00      	nop
 800f074:	08015374 	.word	0x08015374
 800f078:	0801538c 	.word	0x0801538c

0800f07c <rcl_get_security_options_from_environment>:
 800f07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f080:	b082      	sub	sp, #8
 800f082:	2300      	movs	r3, #0
 800f084:	4606      	mov	r6, r0
 800f086:	460f      	mov	r7, r1
 800f088:	4821      	ldr	r0, [pc, #132]	; (800f110 <rcl_get_security_options_from_environment+0x94>)
 800f08a:	a901      	add	r1, sp, #4
 800f08c:	4690      	mov	r8, r2
 800f08e:	9301      	str	r3, [sp, #4]
 800f090:	f7fa fd0e 	bl	8009ab0 <rcutils_get_env>
 800f094:	b120      	cbz	r0, 800f0a0 <rcl_get_security_options_from_environment+0x24>
 800f096:	2501      	movs	r5, #1
 800f098:	4628      	mov	r0, r5
 800f09a:	b002      	add	sp, #8
 800f09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0a0:	4604      	mov	r4, r0
 800f0a2:	491c      	ldr	r1, [pc, #112]	; (800f114 <rcl_get_security_options_from_environment+0x98>)
 800f0a4:	9801      	ldr	r0, [sp, #4]
 800f0a6:	f7f1 f8cb 	bl	8000240 <strcmp>
 800f0aa:	4605      	mov	r5, r0
 800f0ac:	b9f0      	cbnz	r0, 800f0ec <rcl_get_security_options_from_environment+0x70>
 800f0ae:	9001      	str	r0, [sp, #4]
 800f0b0:	f1b8 0f00 	cmp.w	r8, #0
 800f0b4:	d021      	beq.n	800f0fa <rcl_get_security_options_from_environment+0x7e>
 800f0b6:	a901      	add	r1, sp, #4
 800f0b8:	4817      	ldr	r0, [pc, #92]	; (800f118 <rcl_get_security_options_from_environment+0x9c>)
 800f0ba:	f7fa fcf9 	bl	8009ab0 <rcutils_get_env>
 800f0be:	2800      	cmp	r0, #0
 800f0c0:	d1e9      	bne.n	800f096 <rcl_get_security_options_from_environment+0x1a>
 800f0c2:	4916      	ldr	r1, [pc, #88]	; (800f11c <rcl_get_security_options_from_environment+0xa0>)
 800f0c4:	9801      	ldr	r0, [sp, #4]
 800f0c6:	f7f1 f8bb 	bl	8000240 <strcmp>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	4639      	mov	r1, r7
 800f0ce:	4630      	mov	r0, r6
 800f0d0:	fab3 f383 	clz	r3, r3
 800f0d4:	095b      	lsrs	r3, r3, #5
 800f0d6:	f888 3000 	strb.w	r3, [r8]
 800f0da:	f7ff ff65 	bl	800efa8 <rcl_get_secure_root>
 800f0de:	b170      	cbz	r0, 800f0fe <rcl_get_security_options_from_environment+0x82>
 800f0e0:	f8c8 0004 	str.w	r0, [r8, #4]
 800f0e4:	4628      	mov	r0, r5
 800f0e6:	b002      	add	sp, #8
 800f0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0ec:	4625      	mov	r5, r4
 800f0ee:	f888 4000 	strb.w	r4, [r8]
 800f0f2:	4628      	mov	r0, r5
 800f0f4:	b002      	add	sp, #8
 800f0f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0fa:	250b      	movs	r5, #11
 800f0fc:	e7cc      	b.n	800f098 <rcl_get_security_options_from_environment+0x1c>
 800f0fe:	f898 5000 	ldrb.w	r5, [r8]
 800f102:	f1a5 0501 	sub.w	r5, r5, #1
 800f106:	fab5 f585 	clz	r5, r5
 800f10a:	096d      	lsrs	r5, r5, #5
 800f10c:	e7c4      	b.n	800f098 <rcl_get_security_options_from_environment+0x1c>
 800f10e:	bf00      	nop
 800f110:	0801532c 	.word	0x0801532c
 800f114:	08015340 	.word	0x08015340
 800f118:	08015348 	.word	0x08015348
 800f11c:	08015360 	.word	0x08015360

0800f120 <rcl_take>:
 800f120:	2800      	cmp	r0, #0
 800f122:	d049      	beq.n	800f1b8 <rcl_take+0x98>
 800f124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f128:	4615      	mov	r5, r2
 800f12a:	6802      	ldr	r2, [r0, #0]
 800f12c:	b0a4      	sub	sp, #144	; 0x90
 800f12e:	4604      	mov	r4, r0
 800f130:	2a00      	cmp	r2, #0
 800f132:	d039      	beq.n	800f1a8 <rcl_take+0x88>
 800f134:	461f      	mov	r7, r3
 800f136:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800f13a:	b3ab      	cbz	r3, 800f1a8 <rcl_take+0x88>
 800f13c:	460e      	mov	r6, r1
 800f13e:	2900      	cmp	r1, #0
 800f140:	d038      	beq.n	800f1b4 <rcl_take+0x94>
 800f142:	2d00      	cmp	r5, #0
 800f144:	d03c      	beq.n	800f1c0 <rcl_take+0xa0>
 800f146:	a802      	add	r0, sp, #8
 800f148:	f04f 0800 	mov.w	r8, #0
 800f14c:	f002 f854 	bl	80111f8 <rmw_get_zero_initialized_message_info>
 800f150:	f10d 0c08 	add.w	ip, sp, #8
 800f154:	46ae      	mov	lr, r5
 800f156:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f15a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f15e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f162:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f166:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f16a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f16e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800f172:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800f176:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 800f17a:	462b      	mov	r3, r5
 800f17c:	6820      	ldr	r0, [r4, #0]
 800f17e:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 800f182:	4631      	mov	r1, r6
 800f184:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800f188:	9700      	str	r7, [sp, #0]
 800f18a:	f002 fa5b 	bl	8011644 <rmw_take_with_info>
 800f18e:	4603      	mov	r3, r0
 800f190:	b9c0      	cbnz	r0, 800f1c4 <rcl_take+0xa4>
 800f192:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 800f196:	f240 1291 	movw	r2, #401	; 0x191
 800f19a:	2900      	cmp	r1, #0
 800f19c:	bf08      	it	eq
 800f19e:	4613      	moveq	r3, r2
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	b024      	add	sp, #144	; 0x90
 800f1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1a8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	b024      	add	sp, #144	; 0x90
 800f1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1b4:	230b      	movs	r3, #11
 800f1b6:	e7f3      	b.n	800f1a0 <rcl_take+0x80>
 800f1b8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f1bc:	4618      	mov	r0, r3
 800f1be:	4770      	bx	lr
 800f1c0:	ad14      	add	r5, sp, #80	; 0x50
 800f1c2:	e7c0      	b.n	800f146 <rcl_take+0x26>
 800f1c4:	f7ff fb7e 	bl	800e8c4 <rcl_convert_rmw_ret_to_rcl_ret>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	e7e9      	b.n	800f1a0 <rcl_take+0x80>

0800f1cc <rcl_subscription_get_rmw_handle>:
 800f1cc:	b118      	cbz	r0, 800f1d6 <rcl_subscription_get_rmw_handle+0xa>
 800f1ce:	6800      	ldr	r0, [r0, #0]
 800f1d0:	b108      	cbz	r0, 800f1d6 <rcl_subscription_get_rmw_handle+0xa>
 800f1d2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800f1d6:	4770      	bx	lr

0800f1d8 <rcl_subscription_is_valid>:
 800f1d8:	b130      	cbz	r0, 800f1e8 <rcl_subscription_is_valid+0x10>
 800f1da:	6800      	ldr	r0, [r0, #0]
 800f1dc:	b120      	cbz	r0, 800f1e8 <rcl_subscription_is_valid+0x10>
 800f1de:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800f1e2:	3800      	subs	r0, #0
 800f1e4:	bf18      	it	ne
 800f1e6:	2001      	movne	r0, #1
 800f1e8:	4770      	bx	lr
 800f1ea:	bf00      	nop

0800f1ec <rcl_get_system_time>:
 800f1ec:	4608      	mov	r0, r1
 800f1ee:	f7fa be23 	b.w	8009e38 <rcutils_system_time_now>
 800f1f2:	bf00      	nop

0800f1f4 <rcl_get_steady_time>:
 800f1f4:	4608      	mov	r0, r1
 800f1f6:	f7fa be45 	b.w	8009e84 <rcutils_steady_time_now>
 800f1fa:	bf00      	nop

0800f1fc <rcl_get_ros_time>:
 800f1fc:	7a03      	ldrb	r3, [r0, #8]
 800f1fe:	b510      	push	{r4, lr}
 800f200:	460c      	mov	r4, r1
 800f202:	b143      	cbz	r3, 800f216 <rcl_get_ros_time+0x1a>
 800f204:	2105      	movs	r1, #5
 800f206:	f001 fd77 	bl	8010cf8 <__atomic_load_8>
 800f20a:	4602      	mov	r2, r0
 800f20c:	460b      	mov	r3, r1
 800f20e:	2000      	movs	r0, #0
 800f210:	e9c4 2300 	strd	r2, r3, [r4]
 800f214:	bd10      	pop	{r4, pc}
 800f216:	4608      	mov	r0, r1
 800f218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f21c:	f7fa be0c 	b.w	8009e38 <rcutils_system_time_now>

0800f220 <rcl_clock_init>:
 800f220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f222:	4605      	mov	r5, r0
 800f224:	4610      	mov	r0, r2
 800f226:	4614      	mov	r4, r2
 800f228:	460e      	mov	r6, r1
 800f22a:	f7fa fc33 	bl	8009a94 <rcutils_allocator_is_valid>
 800f22e:	b128      	cbz	r0, 800f23c <rcl_clock_init+0x1c>
 800f230:	2d03      	cmp	r5, #3
 800f232:	d803      	bhi.n	800f23c <rcl_clock_init+0x1c>
 800f234:	e8df f005 	tbb	[pc, r5]
 800f238:	0659301f 	.word	0x0659301f
 800f23c:	f04f 0c0b 	mov.w	ip, #11
 800f240:	4660      	mov	r0, ip
 800f242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f244:	2c00      	cmp	r4, #0
 800f246:	d0f9      	beq.n	800f23c <rcl_clock_init+0x1c>
 800f248:	fab6 f386 	clz	r3, r6
 800f24c:	095b      	lsrs	r3, r3, #5
 800f24e:	2e00      	cmp	r6, #0
 800f250:	d0f4      	beq.n	800f23c <rcl_clock_init+0x1c>
 800f252:	6133      	str	r3, [r6, #16]
 800f254:	469c      	mov	ip, r3
 800f256:	f106 0514 	add.w	r5, r6, #20
 800f25a:	4f32      	ldr	r7, [pc, #200]	; (800f324 <rcl_clock_init+0x104>)
 800f25c:	f04f 0e03 	mov.w	lr, #3
 800f260:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f268:	6823      	ldr	r3, [r4, #0]
 800f26a:	4660      	mov	r0, ip
 800f26c:	602b      	str	r3, [r5, #0]
 800f26e:	60f7      	str	r7, [r6, #12]
 800f270:	f886 e000 	strb.w	lr, [r6]
 800f274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f276:	2e00      	cmp	r6, #0
 800f278:	d0e0      	beq.n	800f23c <rcl_clock_init+0x1c>
 800f27a:	2300      	movs	r3, #0
 800f27c:	f106 0514 	add.w	r5, r6, #20
 800f280:	7033      	strb	r3, [r6, #0]
 800f282:	469c      	mov	ip, r3
 800f284:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f288:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800f28c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f28e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f290:	6823      	ldr	r3, [r4, #0]
 800f292:	4660      	mov	r0, ip
 800f294:	602b      	str	r3, [r5, #0]
 800f296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f298:	2c00      	cmp	r4, #0
 800f29a:	d0cf      	beq.n	800f23c <rcl_clock_init+0x1c>
 800f29c:	fab6 f586 	clz	r5, r6
 800f2a0:	096d      	lsrs	r5, r5, #5
 800f2a2:	2e00      	cmp	r6, #0
 800f2a4:	d0ca      	beq.n	800f23c <rcl_clock_init+0x1c>
 800f2a6:	46a6      	mov	lr, r4
 800f2a8:	7035      	strb	r5, [r6, #0]
 800f2aa:	f106 0c14 	add.w	ip, r6, #20
 800f2ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f2b2:	e9c6 5501 	strd	r5, r5, [r6, #4]
 800f2b6:	e9c6 5503 	strd	r5, r5, [r6, #12]
 800f2ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f2be:	f8de 3000 	ldr.w	r3, [lr]
 800f2c2:	2010      	movs	r0, #16
 800f2c4:	f8cc 3000 	str.w	r3, [ip]
 800f2c8:	6823      	ldr	r3, [r4, #0]
 800f2ca:	6921      	ldr	r1, [r4, #16]
 800f2cc:	4798      	blx	r3
 800f2ce:	6130      	str	r0, [r6, #16]
 800f2d0:	b320      	cbz	r0, 800f31c <rcl_clock_init+0xfc>
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	46ac      	mov	ip, r5
 800f2d8:	7205      	strb	r5, [r0, #8]
 800f2da:	e9c0 2300 	strd	r2, r3, [r0]
 800f2de:	4a12      	ldr	r2, [pc, #72]	; (800f328 <rcl_clock_init+0x108>)
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	4660      	mov	r0, ip
 800f2e4:	60f2      	str	r2, [r6, #12]
 800f2e6:	7033      	strb	r3, [r6, #0]
 800f2e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2ea:	2c00      	cmp	r4, #0
 800f2ec:	d0a6      	beq.n	800f23c <rcl_clock_init+0x1c>
 800f2ee:	fab6 f386 	clz	r3, r6
 800f2f2:	095b      	lsrs	r3, r3, #5
 800f2f4:	2e00      	cmp	r6, #0
 800f2f6:	d0a1      	beq.n	800f23c <rcl_clock_init+0x1c>
 800f2f8:	6133      	str	r3, [r6, #16]
 800f2fa:	469c      	mov	ip, r3
 800f2fc:	f106 0514 	add.w	r5, r6, #20
 800f300:	f8df e028 	ldr.w	lr, [pc, #40]	; 800f32c <rcl_clock_init+0x10c>
 800f304:	2702      	movs	r7, #2
 800f306:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f30a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f30c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f30e:	6823      	ldr	r3, [r4, #0]
 800f310:	4660      	mov	r0, ip
 800f312:	602b      	str	r3, [r5, #0]
 800f314:	f8c6 e00c 	str.w	lr, [r6, #12]
 800f318:	7037      	strb	r7, [r6, #0]
 800f31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f31c:	f04f 0c0a 	mov.w	ip, #10
 800f320:	e78e      	b.n	800f240 <rcl_clock_init+0x20>
 800f322:	bf00      	nop
 800f324:	0800f1f5 	.word	0x0800f1f5
 800f328:	0800f1fd 	.word	0x0800f1fd
 800f32c:	0800f1ed 	.word	0x0800f1ed

0800f330 <rcl_clock_get_now>:
 800f330:	b140      	cbz	r0, 800f344 <rcl_clock_get_now+0x14>
 800f332:	b139      	cbz	r1, 800f344 <rcl_clock_get_now+0x14>
 800f334:	7803      	ldrb	r3, [r0, #0]
 800f336:	b11b      	cbz	r3, 800f340 <rcl_clock_get_now+0x10>
 800f338:	68c3      	ldr	r3, [r0, #12]
 800f33a:	b10b      	cbz	r3, 800f340 <rcl_clock_get_now+0x10>
 800f33c:	6900      	ldr	r0, [r0, #16]
 800f33e:	4718      	bx	r3
 800f340:	2001      	movs	r0, #1
 800f342:	4770      	bx	lr
 800f344:	200b      	movs	r0, #11
 800f346:	4770      	bx	lr

0800f348 <rcl_timer_call>:
 800f348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f34c:	b087      	sub	sp, #28
 800f34e:	2800      	cmp	r0, #0
 800f350:	d06c      	beq.n	800f42c <rcl_timer_call+0xe4>
 800f352:	6803      	ldr	r3, [r0, #0]
 800f354:	4604      	mov	r4, r0
 800f356:	2b00      	cmp	r3, #0
 800f358:	d062      	beq.n	800f420 <rcl_timer_call+0xd8>
 800f35a:	f3bf 8f5b 	dmb	ish
 800f35e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f362:	f3bf 8f5b 	dmb	ish
 800f366:	2b00      	cmp	r3, #0
 800f368:	d14f      	bne.n	800f40a <rcl_timer_call+0xc2>
 800f36a:	6803      	ldr	r3, [r0, #0]
 800f36c:	a904      	add	r1, sp, #16
 800f36e:	6818      	ldr	r0, [r3, #0]
 800f370:	f7ff ffde 	bl	800f330 <rcl_clock_get_now>
 800f374:	4605      	mov	r5, r0
 800f376:	2800      	cmp	r0, #0
 800f378:	d149      	bne.n	800f40e <rcl_timer_call+0xc6>
 800f37a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	db49      	blt.n	800f416 <rcl_timer_call+0xce>
 800f382:	2605      	movs	r6, #5
 800f384:	6820      	ldr	r0, [r4, #0]
 800f386:	9600      	str	r6, [sp, #0]
 800f388:	3020      	adds	r0, #32
 800f38a:	f001 fd21 	bl	8010dd0 <__atomic_exchange_8>
 800f38e:	6823      	ldr	r3, [r4, #0]
 800f390:	4680      	mov	r8, r0
 800f392:	f3bf 8f5b 	dmb	ish
 800f396:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800f39a:	f3bf 8f5b 	dmb	ish
 800f39e:	6820      	ldr	r0, [r4, #0]
 800f3a0:	4689      	mov	r9, r1
 800f3a2:	4631      	mov	r1, r6
 800f3a4:	3028      	adds	r0, #40	; 0x28
 800f3a6:	f001 fca7 	bl	8010cf8 <__atomic_load_8>
 800f3aa:	460f      	mov	r7, r1
 800f3ac:	4631      	mov	r1, r6
 800f3ae:	4606      	mov	r6, r0
 800f3b0:	6820      	ldr	r0, [r4, #0]
 800f3b2:	3018      	adds	r0, #24
 800f3b4:	f001 fca0 	bl	8010cf8 <__atomic_load_8>
 800f3b8:	4602      	mov	r2, r0
 800f3ba:	9804      	ldr	r0, [sp, #16]
 800f3bc:	460b      	mov	r3, r1
 800f3be:	18b6      	adds	r6, r6, r2
 800f3c0:	f8dd c014 	ldr.w	ip, [sp, #20]
 800f3c4:	4692      	mov	sl, r2
 800f3c6:	eb47 0701 	adc.w	r7, r7, r1
 800f3ca:	4286      	cmp	r6, r0
 800f3cc:	eb77 010c 	sbcs.w	r1, r7, ip
 800f3d0:	da04      	bge.n	800f3dc <rcl_timer_call+0x94>
 800f3d2:	ea53 0102 	orrs.w	r1, r3, r2
 800f3d6:	d12e      	bne.n	800f436 <rcl_timer_call+0xee>
 800f3d8:	4606      	mov	r6, r0
 800f3da:	4667      	mov	r7, ip
 800f3dc:	6820      	ldr	r0, [r4, #0]
 800f3de:	2105      	movs	r1, #5
 800f3e0:	4632      	mov	r2, r6
 800f3e2:	463b      	mov	r3, r7
 800f3e4:	3028      	adds	r0, #40	; 0x28
 800f3e6:	9100      	str	r1, [sp, #0]
 800f3e8:	f001 fcbc 	bl	8010d64 <__atomic_store_8>
 800f3ec:	f1bb 0f00 	cmp.w	fp, #0
 800f3f0:	d00d      	beq.n	800f40e <rcl_timer_call+0xc6>
 800f3f2:	9a04      	ldr	r2, [sp, #16]
 800f3f4:	4620      	mov	r0, r4
 800f3f6:	9b05      	ldr	r3, [sp, #20]
 800f3f8:	ebb2 0208 	subs.w	r2, r2, r8
 800f3fc:	eb63 0309 	sbc.w	r3, r3, r9
 800f400:	47d8      	blx	fp
 800f402:	4628      	mov	r0, r5
 800f404:	b007      	add	sp, #28
 800f406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f40a:	f240 3521 	movw	r5, #801	; 0x321
 800f40e:	4628      	mov	r0, r5
 800f410:	b007      	add	sp, #28
 800f412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f416:	2501      	movs	r5, #1
 800f418:	4628      	mov	r0, r5
 800f41a:	b007      	add	sp, #28
 800f41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f420:	f44f 7548 	mov.w	r5, #800	; 0x320
 800f424:	4628      	mov	r0, r5
 800f426:	b007      	add	sp, #28
 800f428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f42c:	250b      	movs	r5, #11
 800f42e:	4628      	mov	r0, r5
 800f430:	b007      	add	sp, #28
 800f432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f436:	1b80      	subs	r0, r0, r6
 800f438:	eb6c 0107 	sbc.w	r1, ip, r7
 800f43c:	3801      	subs	r0, #1
 800f43e:	f161 0100 	sbc.w	r1, r1, #0
 800f442:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800f446:	f7f0 ff63 	bl	8000310 <__aeabi_ldivmod>
 800f44a:	9b02      	ldr	r3, [sp, #8]
 800f44c:	3001      	adds	r0, #1
 800f44e:	f141 0100 	adc.w	r1, r1, #0
 800f452:	fb00 f303 	mul.w	r3, r0, r3
 800f456:	fb01 330a 	mla	r3, r1, sl, r3
 800f45a:	fba0 0a0a 	umull	r0, sl, r0, sl
 800f45e:	1986      	adds	r6, r0, r6
 800f460:	4453      	add	r3, sl
 800f462:	eb43 0707 	adc.w	r7, r3, r7
 800f466:	e7b9      	b.n	800f3dc <rcl_timer_call+0x94>

0800f468 <rcl_timer_is_ready>:
 800f468:	b570      	push	{r4, r5, r6, lr}
 800f46a:	b082      	sub	sp, #8
 800f46c:	b380      	cbz	r0, 800f4d0 <rcl_timer_is_ready+0x68>
 800f46e:	6803      	ldr	r3, [r0, #0]
 800f470:	4604      	mov	r4, r0
 800f472:	b38b      	cbz	r3, 800f4d8 <rcl_timer_is_ready+0x70>
 800f474:	460d      	mov	r5, r1
 800f476:	b359      	cbz	r1, 800f4d0 <rcl_timer_is_ready+0x68>
 800f478:	f3bf 8f5b 	dmb	ish
 800f47c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f480:	f3bf 8f5b 	dmb	ish
 800f484:	b953      	cbnz	r3, 800f49c <rcl_timer_is_ready+0x34>
 800f486:	6803      	ldr	r3, [r0, #0]
 800f488:	4669      	mov	r1, sp
 800f48a:	6818      	ldr	r0, [r3, #0]
 800f48c:	f7ff ff50 	bl	800f330 <rcl_clock_get_now>
 800f490:	4606      	mov	r6, r0
 800f492:	b148      	cbz	r0, 800f4a8 <rcl_timer_is_ready+0x40>
 800f494:	f240 3321 	movw	r3, #801	; 0x321
 800f498:	4298      	cmp	r0, r3
 800f49a:	d102      	bne.n	800f4a2 <rcl_timer_is_ready+0x3a>
 800f49c:	2300      	movs	r3, #0
 800f49e:	461e      	mov	r6, r3
 800f4a0:	702b      	strb	r3, [r5, #0]
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	b002      	add	sp, #8
 800f4a6:	bd70      	pop	{r4, r5, r6, pc}
 800f4a8:	6820      	ldr	r0, [r4, #0]
 800f4aa:	2105      	movs	r1, #5
 800f4ac:	3028      	adds	r0, #40	; 0x28
 800f4ae:	f001 fc23 	bl	8010cf8 <__atomic_load_8>
 800f4b2:	9b00      	ldr	r3, [sp, #0]
 800f4b4:	1ac0      	subs	r0, r0, r3
 800f4b6:	9b01      	ldr	r3, [sp, #4]
 800f4b8:	eb61 0103 	sbc.w	r1, r1, r3
 800f4bc:	2801      	cmp	r0, #1
 800f4be:	4630      	mov	r0, r6
 800f4c0:	f171 0300 	sbcs.w	r3, r1, #0
 800f4c4:	bfb4      	ite	lt
 800f4c6:	2301      	movlt	r3, #1
 800f4c8:	2300      	movge	r3, #0
 800f4ca:	702b      	strb	r3, [r5, #0]
 800f4cc:	b002      	add	sp, #8
 800f4ce:	bd70      	pop	{r4, r5, r6, pc}
 800f4d0:	260b      	movs	r6, #11
 800f4d2:	4630      	mov	r0, r6
 800f4d4:	b002      	add	sp, #8
 800f4d6:	bd70      	pop	{r4, r5, r6, pc}
 800f4d8:	f44f 7648 	mov.w	r6, #800	; 0x320
 800f4dc:	e7e1      	b.n	800f4a2 <rcl_timer_is_ready+0x3a>
 800f4de:	bf00      	nop

0800f4e0 <rcl_timer_get_time_until_next_call>:
 800f4e0:	b570      	push	{r4, r5, r6, lr}
 800f4e2:	b082      	sub	sp, #8
 800f4e4:	b330      	cbz	r0, 800f534 <rcl_timer_get_time_until_next_call+0x54>
 800f4e6:	6803      	ldr	r3, [r0, #0]
 800f4e8:	4604      	mov	r4, r0
 800f4ea:	b33b      	cbz	r3, 800f53c <rcl_timer_get_time_until_next_call+0x5c>
 800f4ec:	460d      	mov	r5, r1
 800f4ee:	b309      	cbz	r1, 800f534 <rcl_timer_get_time_until_next_call+0x54>
 800f4f0:	f3bf 8f5b 	dmb	ish
 800f4f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f4f8:	f3bf 8f5b 	dmb	ish
 800f4fc:	b9ab      	cbnz	r3, 800f52a <rcl_timer_get_time_until_next_call+0x4a>
 800f4fe:	6803      	ldr	r3, [r0, #0]
 800f500:	4669      	mov	r1, sp
 800f502:	6818      	ldr	r0, [r3, #0]
 800f504:	f7ff ff14 	bl	800f330 <rcl_clock_get_now>
 800f508:	4606      	mov	r6, r0
 800f50a:	b958      	cbnz	r0, 800f524 <rcl_timer_get_time_until_next_call+0x44>
 800f50c:	6820      	ldr	r0, [r4, #0]
 800f50e:	2105      	movs	r1, #5
 800f510:	3028      	adds	r0, #40	; 0x28
 800f512:	f001 fbf1 	bl	8010cf8 <__atomic_load_8>
 800f516:	9b00      	ldr	r3, [sp, #0]
 800f518:	1ac0      	subs	r0, r0, r3
 800f51a:	9b01      	ldr	r3, [sp, #4]
 800f51c:	eb61 0103 	sbc.w	r1, r1, r3
 800f520:	6028      	str	r0, [r5, #0]
 800f522:	6069      	str	r1, [r5, #4]
 800f524:	4630      	mov	r0, r6
 800f526:	b002      	add	sp, #8
 800f528:	bd70      	pop	{r4, r5, r6, pc}
 800f52a:	f240 3621 	movw	r6, #801	; 0x321
 800f52e:	4630      	mov	r0, r6
 800f530:	b002      	add	sp, #8
 800f532:	bd70      	pop	{r4, r5, r6, pc}
 800f534:	260b      	movs	r6, #11
 800f536:	4630      	mov	r0, r6
 800f538:	b002      	add	sp, #8
 800f53a:	bd70      	pop	{r4, r5, r6, pc}
 800f53c:	f44f 7648 	mov.w	r6, #800	; 0x320
 800f540:	e7f0      	b.n	800f524 <rcl_timer_get_time_until_next_call+0x44>
 800f542:	bf00      	nop

0800f544 <rcl_timer_get_guard_condition>:
 800f544:	b130      	cbz	r0, 800f554 <rcl_timer_get_guard_condition+0x10>
 800f546:	6800      	ldr	r0, [r0, #0]
 800f548:	b120      	cbz	r0, 800f554 <rcl_timer_get_guard_condition+0x10>
 800f54a:	68c3      	ldr	r3, [r0, #12]
 800f54c:	b10b      	cbz	r3, 800f552 <rcl_timer_get_guard_condition+0xe>
 800f54e:	3008      	adds	r0, #8
 800f550:	4770      	bx	lr
 800f552:	4618      	mov	r0, r3
 800f554:	4770      	bx	lr
 800f556:	bf00      	nop

0800f558 <rcl_validate_enclave_name_with_size>:
 800f558:	2800      	cmp	r0, #0
 800f55a:	d049      	beq.n	800f5f0 <rcl_validate_enclave_name_with_size+0x98>
 800f55c:	b570      	push	{r4, r5, r6, lr}
 800f55e:	4615      	mov	r5, r2
 800f560:	b0c2      	sub	sp, #264	; 0x108
 800f562:	b19a      	cbz	r2, 800f58c <rcl_validate_enclave_name_with_size+0x34>
 800f564:	461e      	mov	r6, r3
 800f566:	466a      	mov	r2, sp
 800f568:	ab01      	add	r3, sp, #4
 800f56a:	460c      	mov	r4, r1
 800f56c:	f7fa fcc4 	bl	8009ef8 <rmw_validate_namespace_with_size>
 800f570:	4684      	mov	ip, r0
 800f572:	b9b8      	cbnz	r0, 800f5a4 <rcl_validate_enclave_name_with_size+0x4c>
 800f574:	9900      	ldr	r1, [sp, #0]
 800f576:	b171      	cbz	r1, 800f596 <rcl_validate_enclave_name_with_size+0x3e>
 800f578:	2907      	cmp	r1, #7
 800f57a:	d019      	beq.n	800f5b0 <rcl_validate_enclave_name_with_size+0x58>
 800f57c:	1e4b      	subs	r3, r1, #1
 800f57e:	2b05      	cmp	r3, #5
 800f580:	d83a      	bhi.n	800f5f8 <rcl_validate_enclave_name_with_size+0xa0>
 800f582:	e8df f003 	tbb	[pc, r3]
 800f586:	2926      	.short	0x2926
 800f588:	1d322f2c 	.word	0x1d322f2c
 800f58c:	f04f 0c0b 	mov.w	ip, #11
 800f590:	4660      	mov	r0, ip
 800f592:	b042      	add	sp, #264	; 0x108
 800f594:	bd70      	pop	{r4, r5, r6, pc}
 800f596:	2907      	cmp	r1, #7
 800f598:	d00a      	beq.n	800f5b0 <rcl_validate_enclave_name_with_size+0x58>
 800f59a:	2300      	movs	r3, #0
 800f59c:	4660      	mov	r0, ip
 800f59e:	602b      	str	r3, [r5, #0]
 800f5a0:	b042      	add	sp, #264	; 0x108
 800f5a2:	bd70      	pop	{r4, r5, r6, pc}
 800f5a4:	f7ff f98e 	bl	800e8c4 <rcl_convert_rmw_ret_to_rcl_ret>
 800f5a8:	4684      	mov	ip, r0
 800f5aa:	4660      	mov	r0, ip
 800f5ac:	b042      	add	sp, #264	; 0x108
 800f5ae:	bd70      	pop	{r4, r5, r6, pc}
 800f5b0:	2cff      	cmp	r4, #255	; 0xff
 800f5b2:	d9f2      	bls.n	800f59a <rcl_validate_enclave_name_with_size+0x42>
 800f5b4:	6029      	str	r1, [r5, #0]
 800f5b6:	2e00      	cmp	r6, #0
 800f5b8:	d0ea      	beq.n	800f590 <rcl_validate_enclave_name_with_size+0x38>
 800f5ba:	23fe      	movs	r3, #254	; 0xfe
 800f5bc:	6033      	str	r3, [r6, #0]
 800f5be:	e7e7      	b.n	800f590 <rcl_validate_enclave_name_with_size+0x38>
 800f5c0:	2306      	movs	r3, #6
 800f5c2:	602b      	str	r3, [r5, #0]
 800f5c4:	2e00      	cmp	r6, #0
 800f5c6:	d0e3      	beq.n	800f590 <rcl_validate_enclave_name_with_size+0x38>
 800f5c8:	9b01      	ldr	r3, [sp, #4]
 800f5ca:	4660      	mov	r0, ip
 800f5cc:	6033      	str	r3, [r6, #0]
 800f5ce:	b042      	add	sp, #264	; 0x108
 800f5d0:	bd70      	pop	{r4, r5, r6, pc}
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	602b      	str	r3, [r5, #0]
 800f5d6:	e7f5      	b.n	800f5c4 <rcl_validate_enclave_name_with_size+0x6c>
 800f5d8:	2302      	movs	r3, #2
 800f5da:	602b      	str	r3, [r5, #0]
 800f5dc:	e7f2      	b.n	800f5c4 <rcl_validate_enclave_name_with_size+0x6c>
 800f5de:	2303      	movs	r3, #3
 800f5e0:	602b      	str	r3, [r5, #0]
 800f5e2:	e7ef      	b.n	800f5c4 <rcl_validate_enclave_name_with_size+0x6c>
 800f5e4:	2304      	movs	r3, #4
 800f5e6:	602b      	str	r3, [r5, #0]
 800f5e8:	e7ec      	b.n	800f5c4 <rcl_validate_enclave_name_with_size+0x6c>
 800f5ea:	2305      	movs	r3, #5
 800f5ec:	602b      	str	r3, [r5, #0]
 800f5ee:	e7e9      	b.n	800f5c4 <rcl_validate_enclave_name_with_size+0x6c>
 800f5f0:	f04f 0c0b 	mov.w	ip, #11
 800f5f4:	4660      	mov	r0, ip
 800f5f6:	4770      	bx	lr
 800f5f8:	460b      	mov	r3, r1
 800f5fa:	4a04      	ldr	r2, [pc, #16]	; (800f60c <rcl_validate_enclave_name_with_size+0xb4>)
 800f5fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f600:	a802      	add	r0, sp, #8
 800f602:	f7fa fb8d 	bl	8009d20 <rcutils_snprintf>
 800f606:	f04f 0c01 	mov.w	ip, #1
 800f60a:	e7c1      	b.n	800f590 <rcl_validate_enclave_name_with_size+0x38>
 800f60c:	080153ac 	.word	0x080153ac

0800f610 <rcl_validate_enclave_name>:
 800f610:	b168      	cbz	r0, 800f62e <rcl_validate_enclave_name+0x1e>
 800f612:	b570      	push	{r4, r5, r6, lr}
 800f614:	460d      	mov	r5, r1
 800f616:	4616      	mov	r6, r2
 800f618:	4604      	mov	r4, r0
 800f61a:	f7f0 fe1b 	bl	8000254 <strlen>
 800f61e:	4633      	mov	r3, r6
 800f620:	4601      	mov	r1, r0
 800f622:	462a      	mov	r2, r5
 800f624:	4620      	mov	r0, r4
 800f626:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f62a:	f7ff bf95 	b.w	800f558 <rcl_validate_enclave_name_with_size>
 800f62e:	200b      	movs	r0, #11
 800f630:	4770      	bx	lr
 800f632:	bf00      	nop

0800f634 <rcl_get_zero_initialized_wait_set>:
 800f634:	b510      	push	{r4, lr}
 800f636:	4c08      	ldr	r4, [pc, #32]	; (800f658 <rcl_get_zero_initialized_wait_set+0x24>)
 800f638:	4686      	mov	lr, r0
 800f63a:	4684      	mov	ip, r0
 800f63c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f63e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f644:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f64a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f64e:	6823      	ldr	r3, [r4, #0]
 800f650:	4670      	mov	r0, lr
 800f652:	f8cc 3000 	str.w	r3, [ip]
 800f656:	bd10      	pop	{r4, pc}
 800f658:	0801540c 	.word	0x0801540c

0800f65c <rcl_wait_set_is_valid>:
 800f65c:	b118      	cbz	r0, 800f666 <rcl_wait_set_is_valid+0xa>
 800f65e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800f660:	3800      	subs	r0, #0
 800f662:	bf18      	it	ne
 800f664:	2001      	movne	r0, #1
 800f666:	4770      	bx	lr

0800f668 <rcl_wait_set_fini>:
 800f668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f66c:	b082      	sub	sp, #8
 800f66e:	2800      	cmp	r0, #0
 800f670:	f000 8095 	beq.w	800f79e <rcl_wait_set_fini+0x136>
 800f674:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800f676:	4604      	mov	r4, r0
 800f678:	2e00      	cmp	r6, #0
 800f67a:	f000 808c 	beq.w	800f796 <rcl_wait_set_fini+0x12e>
 800f67e:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800f680:	f002 f9a2 	bl	80119c8 <rmw_destroy_wait_set>
 800f684:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f686:	1e06      	subs	r6, r0, #0
 800f688:	bf18      	it	ne
 800f68a:	f44f 7661 	movne.w	r6, #900	; 0x384
 800f68e:	2d00      	cmp	r5, #0
 800f690:	f000 8081 	beq.w	800f796 <rcl_wait_set_fini+0x12e>
 800f694:	2700      	movs	r7, #0
 800f696:	6820      	ldr	r0, [r4, #0]
 800f698:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800f69c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f69e:	6067      	str	r7, [r4, #4]
 800f6a0:	602f      	str	r7, [r5, #0]
 800f6a2:	b120      	cbz	r0, 800f6ae <rcl_wait_set_fini+0x46>
 800f6a4:	9101      	str	r1, [sp, #4]
 800f6a6:	47c0      	blx	r8
 800f6a8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f6aa:	9901      	ldr	r1, [sp, #4]
 800f6ac:	6027      	str	r7, [r4, #0]
 800f6ae:	68a8      	ldr	r0, [r5, #8]
 800f6b0:	b120      	cbz	r0, 800f6bc <rcl_wait_set_fini+0x54>
 800f6b2:	47c0      	blx	r8
 800f6b4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800f6bc:	f04f 0800 	mov.w	r8, #0
 800f6c0:	68a0      	ldr	r0, [r4, #8]
 800f6c2:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800f6c4:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f6c6:	f8c4 800c 	str.w	r8, [r4, #12]
 800f6ca:	f8c5 800c 	str.w	r8, [r5, #12]
 800f6ce:	b128      	cbz	r0, 800f6dc <rcl_wait_set_fini+0x74>
 800f6d0:	47b8      	blx	r7
 800f6d2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f6d4:	f8c4 8008 	str.w	r8, [r4, #8]
 800f6d8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800f6da:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f6dc:	f04f 0800 	mov.w	r8, #0
 800f6e0:	6968      	ldr	r0, [r5, #20]
 800f6e2:	f8c5 8010 	str.w	r8, [r5, #16]
 800f6e6:	b128      	cbz	r0, 800f6f4 <rcl_wait_set_fini+0x8c>
 800f6e8:	47b8      	blx	r7
 800f6ea:	f8c5 8014 	str.w	r8, [r5, #20]
 800f6ee:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f6f0:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800f6f2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f6f4:	f04f 0800 	mov.w	r8, #0
 800f6f8:	6920      	ldr	r0, [r4, #16]
 800f6fa:	f8c4 8014 	str.w	r8, [r4, #20]
 800f6fe:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 800f702:	b128      	cbz	r0, 800f710 <rcl_wait_set_fini+0xa8>
 800f704:	47b8      	blx	r7
 800f706:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f708:	f8c4 8010 	str.w	r8, [r4, #16]
 800f70c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800f70e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f710:	f04f 0800 	mov.w	r8, #0
 800f714:	69a0      	ldr	r0, [r4, #24]
 800f716:	f8c4 801c 	str.w	r8, [r4, #28]
 800f71a:	f8c5 8018 	str.w	r8, [r5, #24]
 800f71e:	b128      	cbz	r0, 800f72c <rcl_wait_set_fini+0xc4>
 800f720:	9101      	str	r1, [sp, #4]
 800f722:	47b8      	blx	r7
 800f724:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f726:	9901      	ldr	r1, [sp, #4]
 800f728:	f8c4 8018 	str.w	r8, [r4, #24]
 800f72c:	6a28      	ldr	r0, [r5, #32]
 800f72e:	b120      	cbz	r0, 800f73a <rcl_wait_set_fini+0xd2>
 800f730:	47b8      	blx	r7
 800f732:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f734:	2300      	movs	r3, #0
 800f736:	e9c5 3307 	strd	r3, r3, [r5, #28]
 800f73a:	2700      	movs	r7, #0
 800f73c:	6a20      	ldr	r0, [r4, #32]
 800f73e:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800f742:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f744:	6267      	str	r7, [r4, #36]	; 0x24
 800f746:	626f      	str	r7, [r5, #36]	; 0x24
 800f748:	b120      	cbz	r0, 800f754 <rcl_wait_set_fini+0xec>
 800f74a:	9101      	str	r1, [sp, #4]
 800f74c:	47c0      	blx	r8
 800f74e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f750:	9901      	ldr	r1, [sp, #4]
 800f752:	6227      	str	r7, [r4, #32]
 800f754:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800f756:	b120      	cbz	r0, 800f762 <rcl_wait_set_fini+0xfa>
 800f758:	47c0      	blx	r8
 800f75a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f75c:	2300      	movs	r3, #0
 800f75e:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 800f762:	2700      	movs	r7, #0
 800f764:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f766:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800f76a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f76c:	62e7      	str	r7, [r4, #44]	; 0x2c
 800f76e:	632f      	str	r7, [r5, #48]	; 0x30
 800f770:	b120      	cbz	r0, 800f77c <rcl_wait_set_fini+0x114>
 800f772:	9101      	str	r1, [sp, #4]
 800f774:	47c0      	blx	r8
 800f776:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f778:	9901      	ldr	r1, [sp, #4]
 800f77a:	62a7      	str	r7, [r4, #40]	; 0x28
 800f77c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800f77e:	b120      	cbz	r0, 800f78a <rcl_wait_set_fini+0x122>
 800f780:	47c0      	blx	r8
 800f782:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f784:	2300      	movs	r3, #0
 800f786:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 800f78a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f78c:	4628      	mov	r0, r5
 800f78e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f790:	4798      	blx	r3
 800f792:	2300      	movs	r3, #0
 800f794:	6323      	str	r3, [r4, #48]	; 0x30
 800f796:	4630      	mov	r0, r6
 800f798:	b002      	add	sp, #8
 800f79a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f79e:	260b      	movs	r6, #11
 800f7a0:	4630      	mov	r0, r6
 800f7a2:	b002      	add	sp, #8
 800f7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f7a8 <rcl_wait_set_add_subscription>:
 800f7a8:	b318      	cbz	r0, 800f7f2 <rcl_wait_set_add_subscription+0x4a>
 800f7aa:	b538      	push	{r3, r4, r5, lr}
 800f7ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f7ae:	4604      	mov	r4, r0
 800f7b0:	b30b      	cbz	r3, 800f7f6 <rcl_wait_set_add_subscription+0x4e>
 800f7b2:	b319      	cbz	r1, 800f7fc <rcl_wait_set_add_subscription+0x54>
 800f7b4:	681d      	ldr	r5, [r3, #0]
 800f7b6:	6840      	ldr	r0, [r0, #4]
 800f7b8:	4285      	cmp	r5, r0
 800f7ba:	d217      	bcs.n	800f7ec <rcl_wait_set_add_subscription+0x44>
 800f7bc:	1c68      	adds	r0, r5, #1
 800f7be:	6018      	str	r0, [r3, #0]
 800f7c0:	6823      	ldr	r3, [r4, #0]
 800f7c2:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 800f7c6:	b102      	cbz	r2, 800f7ca <rcl_wait_set_add_subscription+0x22>
 800f7c8:	6015      	str	r5, [r2, #0]
 800f7ca:	4608      	mov	r0, r1
 800f7cc:	f7ff fcfe 	bl	800f1cc <rcl_subscription_get_rmw_handle>
 800f7d0:	b150      	cbz	r0, 800f7e8 <rcl_wait_set_add_subscription+0x40>
 800f7d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f7d4:	6842      	ldr	r2, [r0, #4]
 800f7d6:	2000      	movs	r0, #0
 800f7d8:	689b      	ldr	r3, [r3, #8]
 800f7da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f7de:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f7e0:	6853      	ldr	r3, [r2, #4]
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	6053      	str	r3, [r2, #4]
 800f7e6:	bd38      	pop	{r3, r4, r5, pc}
 800f7e8:	2001      	movs	r0, #1
 800f7ea:	bd38      	pop	{r3, r4, r5, pc}
 800f7ec:	f240 3086 	movw	r0, #902	; 0x386
 800f7f0:	bd38      	pop	{r3, r4, r5, pc}
 800f7f2:	200b      	movs	r0, #11
 800f7f4:	4770      	bx	lr
 800f7f6:	f44f 7061 	mov.w	r0, #900	; 0x384
 800f7fa:	bd38      	pop	{r3, r4, r5, pc}
 800f7fc:	200b      	movs	r0, #11
 800f7fe:	bd38      	pop	{r3, r4, r5, pc}

0800f800 <rcl_wait_set_clear>:
 800f800:	2800      	cmp	r0, #0
 800f802:	d074      	beq.n	800f8ee <rcl_wait_set_clear+0xee>
 800f804:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f806:	b510      	push	{r4, lr}
 800f808:	4604      	mov	r4, r0
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d071      	beq.n	800f8f2 <rcl_wait_set_clear+0xf2>
 800f80e:	6800      	ldr	r0, [r0, #0]
 800f810:	b138      	cbz	r0, 800f822 <rcl_wait_set_clear+0x22>
 800f812:	6862      	ldr	r2, [r4, #4]
 800f814:	2100      	movs	r1, #0
 800f816:	0092      	lsls	r2, r2, #2
 800f818:	f003 fff4 	bl	8013804 <memset>
 800f81c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f81e:	2200      	movs	r2, #0
 800f820:	601a      	str	r2, [r3, #0]
 800f822:	68a0      	ldr	r0, [r4, #8]
 800f824:	b138      	cbz	r0, 800f836 <rcl_wait_set_clear+0x36>
 800f826:	68e2      	ldr	r2, [r4, #12]
 800f828:	2100      	movs	r1, #0
 800f82a:	0092      	lsls	r2, r2, #2
 800f82c:	f003 ffea 	bl	8013804 <memset>
 800f830:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f832:	2200      	movs	r2, #0
 800f834:	60da      	str	r2, [r3, #12]
 800f836:	69a0      	ldr	r0, [r4, #24]
 800f838:	b138      	cbz	r0, 800f84a <rcl_wait_set_clear+0x4a>
 800f83a:	69e2      	ldr	r2, [r4, #28]
 800f83c:	2100      	movs	r1, #0
 800f83e:	0092      	lsls	r2, r2, #2
 800f840:	f003 ffe0 	bl	8013804 <memset>
 800f844:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f846:	2200      	movs	r2, #0
 800f848:	619a      	str	r2, [r3, #24]
 800f84a:	6a20      	ldr	r0, [r4, #32]
 800f84c:	b138      	cbz	r0, 800f85e <rcl_wait_set_clear+0x5e>
 800f84e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f850:	2100      	movs	r1, #0
 800f852:	0092      	lsls	r2, r2, #2
 800f854:	f003 ffd6 	bl	8013804 <memset>
 800f858:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f85a:	2200      	movs	r2, #0
 800f85c:	625a      	str	r2, [r3, #36]	; 0x24
 800f85e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f860:	b138      	cbz	r0, 800f872 <rcl_wait_set_clear+0x72>
 800f862:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f864:	2100      	movs	r1, #0
 800f866:	0092      	lsls	r2, r2, #2
 800f868:	f003 ffcc 	bl	8013804 <memset>
 800f86c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f86e:	2200      	movs	r2, #0
 800f870:	631a      	str	r2, [r3, #48]	; 0x30
 800f872:	6920      	ldr	r0, [r4, #16]
 800f874:	b138      	cbz	r0, 800f886 <rcl_wait_set_clear+0x86>
 800f876:	6962      	ldr	r2, [r4, #20]
 800f878:	2100      	movs	r1, #0
 800f87a:	0092      	lsls	r2, r2, #2
 800f87c:	f003 ffc2 	bl	8013804 <memset>
 800f880:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f882:	2200      	movs	r2, #0
 800f884:	641a      	str	r2, [r3, #64]	; 0x40
 800f886:	6898      	ldr	r0, [r3, #8]
 800f888:	b138      	cbz	r0, 800f89a <rcl_wait_set_clear+0x9a>
 800f88a:	685a      	ldr	r2, [r3, #4]
 800f88c:	2100      	movs	r1, #0
 800f88e:	0092      	lsls	r2, r2, #2
 800f890:	f003 ffb8 	bl	8013804 <memset>
 800f894:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f896:	2200      	movs	r2, #0
 800f898:	605a      	str	r2, [r3, #4]
 800f89a:	6958      	ldr	r0, [r3, #20]
 800f89c:	b138      	cbz	r0, 800f8ae <rcl_wait_set_clear+0xae>
 800f89e:	691a      	ldr	r2, [r3, #16]
 800f8a0:	2100      	movs	r1, #0
 800f8a2:	0092      	lsls	r2, r2, #2
 800f8a4:	f003 ffae 	bl	8013804 <memset>
 800f8a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	611a      	str	r2, [r3, #16]
 800f8ae:	6a18      	ldr	r0, [r3, #32]
 800f8b0:	b138      	cbz	r0, 800f8c2 <rcl_wait_set_clear+0xc2>
 800f8b2:	69da      	ldr	r2, [r3, #28]
 800f8b4:	2100      	movs	r1, #0
 800f8b6:	0092      	lsls	r2, r2, #2
 800f8b8:	f003 ffa4 	bl	8013804 <memset>
 800f8bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f8be:	2200      	movs	r2, #0
 800f8c0:	61da      	str	r2, [r3, #28]
 800f8c2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f8c4:	b138      	cbz	r0, 800f8d6 <rcl_wait_set_clear+0xd6>
 800f8c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f8c8:	2100      	movs	r1, #0
 800f8ca:	0092      	lsls	r2, r2, #2
 800f8cc:	f003 ff9a 	bl	8013804 <memset>
 800f8d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	629a      	str	r2, [r3, #40]	; 0x28
 800f8d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800f8d8:	b140      	cbz	r0, 800f8ec <rcl_wait_set_clear+0xec>
 800f8da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f8dc:	2100      	movs	r1, #0
 800f8de:	0092      	lsls	r2, r2, #2
 800f8e0:	f003 ff90 	bl	8013804 <memset>
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	6353      	str	r3, [r2, #52]	; 0x34
 800f8ec:	bd10      	pop	{r4, pc}
 800f8ee:	200b      	movs	r0, #11
 800f8f0:	4770      	bx	lr
 800f8f2:	f44f 7061 	mov.w	r0, #900	; 0x384
 800f8f6:	bd10      	pop	{r4, pc}

0800f8f8 <rcl_wait_set_resize>:
 800f8f8:	2800      	cmp	r0, #0
 800f8fa:	f000 8180 	beq.w	800fbfe <rcl_wait_set_resize+0x306>
 800f8fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f902:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800f904:	b083      	sub	sp, #12
 800f906:	4605      	mov	r5, r0
 800f908:	2c00      	cmp	r4, #0
 800f90a:	f000 817a 	beq.w	800fc02 <rcl_wait_set_resize+0x30a>
 800f90e:	f04f 0900 	mov.w	r9, #0
 800f912:	461f      	mov	r7, r3
 800f914:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f918:	4688      	mov	r8, r1
 800f91a:	4616      	mov	r6, r2
 800f91c:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 800f920:	f8c0 9004 	str.w	r9, [r0, #4]
 800f924:	f8c4 9000 	str.w	r9, [r4]
 800f928:	2900      	cmp	r1, #0
 800f92a:	f000 80bf 	beq.w	800faac <rcl_wait_set_resize+0x1b4>
 800f92e:	008c      	lsls	r4, r1, #2
 800f930:	4652      	mov	r2, sl
 800f932:	6800      	ldr	r0, [r0, #0]
 800f934:	4621      	mov	r1, r4
 800f936:	9301      	str	r3, [sp, #4]
 800f938:	4798      	blx	r3
 800f93a:	9b01      	ldr	r3, [sp, #4]
 800f93c:	6028      	str	r0, [r5, #0]
 800f93e:	2800      	cmp	r0, #0
 800f940:	f000 80f6 	beq.w	800fb30 <rcl_wait_set_resize+0x238>
 800f944:	4622      	mov	r2, r4
 800f946:	4649      	mov	r1, r9
 800f948:	9301      	str	r3, [sp, #4]
 800f94a:	f003 ff5b 	bl	8013804 <memset>
 800f94e:	f8c5 8004 	str.w	r8, [r5, #4]
 800f952:	4652      	mov	r2, sl
 800f954:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800f958:	4621      	mov	r1, r4
 800f95a:	9b01      	ldr	r3, [sp, #4]
 800f95c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800f960:	f8c8 9004 	str.w	r9, [r8, #4]
 800f964:	4798      	blx	r3
 800f966:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800f968:	f8c8 0008 	str.w	r0, [r8, #8]
 800f96c:	689b      	ldr	r3, [r3, #8]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	f000 814a 	beq.w	800fc08 <rcl_wait_set_resize+0x310>
 800f974:	4622      	mov	r2, r4
 800f976:	4649      	mov	r1, r9
 800f978:	4618      	mov	r0, r3
 800f97a:	f003 ff43 	bl	8013804 <memset>
 800f97e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800f980:	f04f 0800 	mov.w	r8, #0
 800f984:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800f988:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 800f98c:	f8c5 800c 	str.w	r8, [r5, #12]
 800f990:	f8c4 800c 	str.w	r8, [r4, #12]
 800f994:	2e00      	cmp	r6, #0
 800f996:	f040 809b 	bne.w	800fad0 <rcl_wait_set_resize+0x1d8>
 800f99a:	68a8      	ldr	r0, [r5, #8]
 800f99c:	b128      	cbz	r0, 800f9aa <rcl_wait_set_resize+0xb2>
 800f99e:	4649      	mov	r1, r9
 800f9a0:	4790      	blx	r2
 800f9a2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800f9a4:	60ae      	str	r6, [r5, #8]
 800f9a6:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800f9aa:	f04f 0800 	mov.w	r8, #0
 800f9ae:	19f6      	adds	r6, r6, r7
 800f9b0:	f8c4 8010 	str.w	r8, [r4, #16]
 800f9b4:	f040 80a2 	bne.w	800fafc <rcl_wait_set_resize+0x204>
 800f9b8:	6960      	ldr	r0, [r4, #20]
 800f9ba:	b130      	cbz	r0, 800f9ca <rcl_wait_set_resize+0xd2>
 800f9bc:	4649      	mov	r1, r9
 800f9be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f9c0:	4798      	blx	r3
 800f9c2:	6166      	str	r6, [r4, #20]
 800f9c4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800f9c6:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800f9ca:	2600      	movs	r6, #0
 800f9cc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 800f9d0:	616e      	str	r6, [r5, #20]
 800f9d2:	6426      	str	r6, [r4, #64]	; 0x40
 800f9d4:	2f00      	cmp	r7, #0
 800f9d6:	f040 80af 	bne.w	800fb38 <rcl_wait_set_resize+0x240>
 800f9da:	6928      	ldr	r0, [r5, #16]
 800f9dc:	b138      	cbz	r0, 800f9ee <rcl_wait_set_resize+0xf6>
 800f9de:	4649      	mov	r1, r9
 800f9e0:	47d0      	blx	sl
 800f9e2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800f9e4:	612f      	str	r7, [r5, #16]
 800f9e6:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800f9ea:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 800f9ee:	2600      	movs	r6, #0
 800f9f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f9f2:	61ee      	str	r6, [r5, #28]
 800f9f4:	61a6      	str	r6, [r4, #24]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	f040 8093 	bne.w	800fb22 <rcl_wait_set_resize+0x22a>
 800f9fc:	69a8      	ldr	r0, [r5, #24]
 800f9fe:	b120      	cbz	r0, 800fa0a <rcl_wait_set_resize+0x112>
 800fa00:	4649      	mov	r1, r9
 800fa02:	47d0      	blx	sl
 800fa04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa06:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fa08:	61ab      	str	r3, [r5, #24]
 800fa0a:	6a20      	ldr	r0, [r4, #32]
 800fa0c:	b128      	cbz	r0, 800fa1a <rcl_wait_set_resize+0x122>
 800fa0e:	4649      	mov	r1, r9
 800fa10:	47d0      	blx	sl
 800fa12:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fa14:	2300      	movs	r3, #0
 800fa16:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800fa1a:	2600      	movs	r6, #0
 800fa1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa1e:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800fa20:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 800fa24:	626e      	str	r6, [r5, #36]	; 0x24
 800fa26:	6266      	str	r6, [r4, #36]	; 0x24
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	f000 8098 	beq.w	800fb5e <rcl_wait_set_resize+0x266>
 800fa2e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800fa32:	463a      	mov	r2, r7
 800fa34:	6a28      	ldr	r0, [r5, #32]
 800fa36:	4651      	mov	r1, sl
 800fa38:	47c8      	blx	r9
 800fa3a:	6228      	str	r0, [r5, #32]
 800fa3c:	2800      	cmp	r0, #0
 800fa3e:	d077      	beq.n	800fb30 <rcl_wait_set_resize+0x238>
 800fa40:	4652      	mov	r2, sl
 800fa42:	4631      	mov	r1, r6
 800fa44:	f003 fede 	bl	8013804 <memset>
 800fa48:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fa4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa4c:	463a      	mov	r2, r7
 800fa4e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800fa50:	4651      	mov	r1, sl
 800fa52:	626b      	str	r3, [r5, #36]	; 0x24
 800fa54:	62a6      	str	r6, [r4, #40]	; 0x28
 800fa56:	47c8      	blx	r9
 800fa58:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800fa5a:	62e0      	str	r0, [r4, #44]	; 0x2c
 800fa5c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800fa5e:	2c00      	cmp	r4, #0
 800fa60:	f000 80f2 	beq.w	800fc48 <rcl_wait_set_resize+0x350>
 800fa64:	4620      	mov	r0, r4
 800fa66:	4652      	mov	r2, sl
 800fa68:	4631      	mov	r1, r6
 800fa6a:	f003 fecb 	bl	8013804 <memset>
 800fa6e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fa70:	2600      	movs	r6, #0
 800fa72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa74:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800fa76:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 800fa7a:	62ee      	str	r6, [r5, #44]	; 0x2c
 800fa7c:	6326      	str	r6, [r4, #48]	; 0x30
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	f040 8097 	bne.w	800fbb2 <rcl_wait_set_resize+0x2ba>
 800fa84:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800fa86:	b120      	cbz	r0, 800fa92 <rcl_wait_set_resize+0x19a>
 800fa88:	4639      	mov	r1, r7
 800fa8a:	47c0      	blx	r8
 800fa8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa8e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fa90:	62ab      	str	r3, [r5, #40]	; 0x28
 800fa92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800fa94:	2800      	cmp	r0, #0
 800fa96:	d04c      	beq.n	800fb32 <rcl_wait_set_resize+0x23a>
 800fa98:	4639      	mov	r1, r7
 800fa9a:	47c0      	blx	r8
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800faa0:	4618      	mov	r0, r3
 800faa2:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 800faa6:	b003      	add	sp, #12
 800faa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faac:	6800      	ldr	r0, [r0, #0]
 800faae:	b120      	cbz	r0, 800faba <rcl_wait_set_resize+0x1c2>
 800fab0:	4651      	mov	r1, sl
 800fab2:	47d8      	blx	fp
 800fab4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fab6:	f8c5 8000 	str.w	r8, [r5]
 800faba:	68a0      	ldr	r0, [r4, #8]
 800fabc:	2800      	cmp	r0, #0
 800fabe:	f43f af5f 	beq.w	800f980 <rcl_wait_set_resize+0x88>
 800fac2:	4651      	mov	r1, sl
 800fac4:	47d8      	blx	fp
 800fac6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fac8:	2300      	movs	r3, #0
 800faca:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800face:	e757      	b.n	800f980 <rcl_wait_set_resize+0x88>
 800fad0:	00b4      	lsls	r4, r6, #2
 800fad2:	464a      	mov	r2, r9
 800fad4:	68a8      	ldr	r0, [r5, #8]
 800fad6:	4621      	mov	r1, r4
 800fad8:	4798      	blx	r3
 800fada:	60a8      	str	r0, [r5, #8]
 800fadc:	b340      	cbz	r0, 800fb30 <rcl_wait_set_resize+0x238>
 800fade:	4622      	mov	r2, r4
 800fae0:	4641      	mov	r1, r8
 800fae2:	f003 fe8f 	bl	8013804 <memset>
 800fae6:	f04f 0800 	mov.w	r8, #0
 800faea:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800faec:	60ee      	str	r6, [r5, #12]
 800faee:	19f6      	adds	r6, r6, r7
 800faf0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800faf4:	f8c4 8010 	str.w	r8, [r4, #16]
 800faf8:	f43f af5e 	beq.w	800f9b8 <rcl_wait_set_resize+0xc0>
 800fafc:	00b6      	lsls	r6, r6, #2
 800fafe:	464a      	mov	r2, r9
 800fb00:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800fb02:	6960      	ldr	r0, [r4, #20]
 800fb04:	4631      	mov	r1, r6
 800fb06:	4798      	blx	r3
 800fb08:	4681      	mov	r9, r0
 800fb0a:	6160      	str	r0, [r4, #20]
 800fb0c:	2800      	cmp	r0, #0
 800fb0e:	f000 8084 	beq.w	800fc1a <rcl_wait_set_resize+0x322>
 800fb12:	4632      	mov	r2, r6
 800fb14:	4641      	mov	r1, r8
 800fb16:	f003 fe75 	bl	8013804 <memset>
 800fb1a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fb1c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800fb20:	e753      	b.n	800f9ca <rcl_wait_set_resize+0xd2>
 800fb22:	009c      	lsls	r4, r3, #2
 800fb24:	464a      	mov	r2, r9
 800fb26:	69a8      	ldr	r0, [r5, #24]
 800fb28:	4621      	mov	r1, r4
 800fb2a:	47c0      	blx	r8
 800fb2c:	61a8      	str	r0, [r5, #24]
 800fb2e:	bb40      	cbnz	r0, 800fb82 <rcl_wait_set_resize+0x28a>
 800fb30:	200a      	movs	r0, #10
 800fb32:	b003      	add	sp, #12
 800fb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb38:	00bc      	lsls	r4, r7, #2
 800fb3a:	464a      	mov	r2, r9
 800fb3c:	6928      	ldr	r0, [r5, #16]
 800fb3e:	4621      	mov	r1, r4
 800fb40:	47c0      	blx	r8
 800fb42:	6128      	str	r0, [r5, #16]
 800fb44:	2800      	cmp	r0, #0
 800fb46:	d0f3      	beq.n	800fb30 <rcl_wait_set_resize+0x238>
 800fb48:	4622      	mov	r2, r4
 800fb4a:	4631      	mov	r1, r6
 800fb4c:	f003 fe5a 	bl	8013804 <memset>
 800fb50:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fb52:	616f      	str	r7, [r5, #20]
 800fb54:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800fb58:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 800fb5c:	e747      	b.n	800f9ee <rcl_wait_set_resize+0xf6>
 800fb5e:	6a28      	ldr	r0, [r5, #32]
 800fb60:	b120      	cbz	r0, 800fb6c <rcl_wait_set_resize+0x274>
 800fb62:	4639      	mov	r1, r7
 800fb64:	47c0      	blx	r8
 800fb66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb68:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fb6a:	622b      	str	r3, [r5, #32]
 800fb6c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800fb6e:	2800      	cmp	r0, #0
 800fb70:	f43f af7e 	beq.w	800fa70 <rcl_wait_set_resize+0x178>
 800fb74:	4639      	mov	r1, r7
 800fb76:	47c0      	blx	r8
 800fb78:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800fb80:	e776      	b.n	800fa70 <rcl_wait_set_resize+0x178>
 800fb82:	4622      	mov	r2, r4
 800fb84:	4631      	mov	r1, r6
 800fb86:	f003 fe3d 	bl	8013804 <memset>
 800fb8a:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 800fb8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb8e:	464a      	mov	r2, r9
 800fb90:	6a38      	ldr	r0, [r7, #32]
 800fb92:	4621      	mov	r1, r4
 800fb94:	61eb      	str	r3, [r5, #28]
 800fb96:	61fe      	str	r6, [r7, #28]
 800fb98:	47c0      	blx	r8
 800fb9a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800fb9c:	6238      	str	r0, [r7, #32]
 800fb9e:	6a1f      	ldr	r7, [r3, #32]
 800fba0:	2f00      	cmp	r7, #0
 800fba2:	d04a      	beq.n	800fc3a <rcl_wait_set_resize+0x342>
 800fba4:	4622      	mov	r2, r4
 800fba6:	4631      	mov	r1, r6
 800fba8:	4638      	mov	r0, r7
 800fbaa:	f003 fe2b 	bl	8013804 <memset>
 800fbae:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fbb0:	e733      	b.n	800fa1a <rcl_wait_set_resize+0x122>
 800fbb2:	009c      	lsls	r4, r3, #2
 800fbb4:	463a      	mov	r2, r7
 800fbb6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800fbb8:	4621      	mov	r1, r4
 800fbba:	47c8      	blx	r9
 800fbbc:	62a8      	str	r0, [r5, #40]	; 0x28
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	d0b6      	beq.n	800fb30 <rcl_wait_set_resize+0x238>
 800fbc2:	4622      	mov	r2, r4
 800fbc4:	4631      	mov	r1, r6
 800fbc6:	f003 fe1d 	bl	8013804 <memset>
 800fbca:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 800fbce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fbd0:	463a      	mov	r2, r7
 800fbd2:	4621      	mov	r1, r4
 800fbd4:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 800fbd8:	62eb      	str	r3, [r5, #44]	; 0x2c
 800fbda:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 800fbde:	47c8      	blx	r9
 800fbe0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800fbe2:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 800fbe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d034      	beq.n	800fc56 <rcl_wait_set_resize+0x35e>
 800fbec:	4622      	mov	r2, r4
 800fbee:	4631      	mov	r1, r6
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f003 fe07 	bl	8013804 <memset>
 800fbf6:	4630      	mov	r0, r6
 800fbf8:	b003      	add	sp, #12
 800fbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbfe:	200b      	movs	r0, #11
 800fc00:	4770      	bx	lr
 800fc02:	f44f 7061 	mov.w	r0, #900	; 0x384
 800fc06:	e794      	b.n	800fb32 <rcl_wait_set_resize+0x23a>
 800fc08:	6828      	ldr	r0, [r5, #0]
 800fc0a:	4651      	mov	r1, sl
 800fc0c:	9301      	str	r3, [sp, #4]
 800fc0e:	47d8      	blx	fp
 800fc10:	9b01      	ldr	r3, [sp, #4]
 800fc12:	200a      	movs	r0, #10
 800fc14:	e9c5 3300 	strd	r3, r3, [r5]
 800fc18:	e78b      	b.n	800fb32 <rcl_wait_set_resize+0x23a>
 800fc1a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800fc1c:	68a8      	ldr	r0, [r5, #8]
 800fc1e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800fc20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc22:	4798      	blx	r3
 800fc24:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800fc26:	6928      	ldr	r0, [r5, #16]
 800fc28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fc2a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800fc2c:	e9c5 9902 	strd	r9, r9, [r5, #8]
 800fc30:	4790      	blx	r2
 800fc32:	200a      	movs	r0, #10
 800fc34:	e9c5 9904 	strd	r9, r9, [r5, #16]
 800fc38:	e77b      	b.n	800fb32 <rcl_wait_set_resize+0x23a>
 800fc3a:	69a8      	ldr	r0, [r5, #24]
 800fc3c:	4649      	mov	r1, r9
 800fc3e:	47d0      	blx	sl
 800fc40:	200a      	movs	r0, #10
 800fc42:	e9c5 7706 	strd	r7, r7, [r5, #24]
 800fc46:	e774      	b.n	800fb32 <rcl_wait_set_resize+0x23a>
 800fc48:	6a28      	ldr	r0, [r5, #32]
 800fc4a:	4639      	mov	r1, r7
 800fc4c:	47c0      	blx	r8
 800fc4e:	200a      	movs	r0, #10
 800fc50:	e9c5 4408 	strd	r4, r4, [r5, #32]
 800fc54:	e76d      	b.n	800fb32 <rcl_wait_set_resize+0x23a>
 800fc56:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800fc58:	4639      	mov	r1, r7
 800fc5a:	9301      	str	r3, [sp, #4]
 800fc5c:	47c0      	blx	r8
 800fc5e:	9b01      	ldr	r3, [sp, #4]
 800fc60:	200a      	movs	r0, #10
 800fc62:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 800fc66:	e764      	b.n	800fb32 <rcl_wait_set_resize+0x23a>

0800fc68 <rcl_wait_set_init>:
 800fc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc6c:	b085      	sub	sp, #20
 800fc6e:	4605      	mov	r5, r0
 800fc70:	460e      	mov	r6, r1
 800fc72:	4617      	mov	r7, r2
 800fc74:	a812      	add	r0, sp, #72	; 0x48
 800fc76:	4698      	mov	r8, r3
 800fc78:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 800fc7c:	f7f9 ff0a 	bl	8009a94 <rcutils_allocator_is_valid>
 800fc80:	2d00      	cmp	r5, #0
 800fc82:	d072      	beq.n	800fd6a <rcl_wait_set_init+0x102>
 800fc84:	f080 0001 	eor.w	r0, r0, #1
 800fc88:	b2c0      	uxtb	r0, r0
 800fc8a:	2800      	cmp	r0, #0
 800fc8c:	d16d      	bne.n	800fd6a <rcl_wait_set_init+0x102>
 800fc8e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 800fc92:	f1ba 0f00 	cmp.w	sl, #0
 800fc96:	d004      	beq.n	800fca2 <rcl_wait_set_init+0x3a>
 800fc98:	2464      	movs	r4, #100	; 0x64
 800fc9a:	4620      	mov	r0, r4
 800fc9c:	b005      	add	sp, #20
 800fc9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fca2:	f1b9 0f00 	cmp.w	r9, #0
 800fca6:	d060      	beq.n	800fd6a <rcl_wait_set_init+0x102>
 800fca8:	4648      	mov	r0, r9
 800fcaa:	f7fe fe29 	bl	800e900 <rcl_context_is_valid>
 800fcae:	2800      	cmp	r0, #0
 800fcb0:	d068      	beq.n	800fd84 <rcl_wait_set_init+0x11c>
 800fcb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fcb4:	205c      	movs	r0, #92	; 0x5c
 800fcb6:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fcb8:	4798      	blx	r3
 800fcba:	6328      	str	r0, [r5, #48]	; 0x30
 800fcbc:	2800      	cmp	r0, #0
 800fcbe:	d063      	beq.n	800fd88 <rcl_wait_set_init+0x120>
 800fcc0:	225c      	movs	r2, #92	; 0x5c
 800fcc2:	4651      	mov	r1, sl
 800fcc4:	f003 fd9e 	bl	8013804 <memset>
 800fcc8:	ac12      	add	r4, sp, #72	; 0x48
 800fcca:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 800fcce:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800fcd2:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 800fcd6:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 800fcda:	eb03 0e02 	add.w	lr, r3, r2
 800fcde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fce0:	f8d9 9000 	ldr.w	r9, [r9]
 800fce4:	449e      	add	lr, r3
 800fce6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fce8:	e9cb aa01 	strd	sl, sl, [fp, #4]
 800fcec:	e9cb aa04 	strd	sl, sl, [fp, #16]
 800fcf0:	e9cb aa07 	strd	sl, sl, [fp, #28]
 800fcf4:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 800fcf8:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 800fcfc:	44be      	add	lr, r7
 800fcfe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd02:	6823      	ldr	r3, [r4, #0]
 800fd04:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 800fd08:	f109 0028 	add.w	r0, r9, #40	; 0x28
 800fd0c:	f8cc 3000 	str.w	r3, [ip]
 800fd10:	f001 fe50 	bl	80119b4 <rmw_create_wait_set>
 800fd14:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800fd16:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 800fd1a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800fd1c:	b350      	cbz	r0, 800fd74 <rcl_wait_set_init+0x10c>
 800fd1e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800fd20:	4643      	mov	r3, r8
 800fd22:	463a      	mov	r2, r7
 800fd24:	4631      	mov	r1, r6
 800fd26:	9402      	str	r4, [sp, #8]
 800fd28:	4628      	mov	r0, r5
 800fd2a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800fd2c:	9401      	str	r4, [sp, #4]
 800fd2e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800fd30:	9400      	str	r4, [sp, #0]
 800fd32:	f7ff fde1 	bl	800f8f8 <rcl_wait_set_resize>
 800fd36:	4604      	mov	r4, r0
 800fd38:	2800      	cmp	r0, #0
 800fd3a:	d0ae      	beq.n	800fc9a <rcl_wait_set_init+0x32>
 800fd3c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800fd3e:	bb2b      	cbnz	r3, 800fd8c <rcl_wait_set_init+0x124>
 800fd40:	2600      	movs	r6, #0
 800fd42:	4628      	mov	r0, r5
 800fd44:	4633      	mov	r3, r6
 800fd46:	4632      	mov	r2, r6
 800fd48:	4631      	mov	r1, r6
 800fd4a:	9600      	str	r6, [sp, #0]
 800fd4c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800fd50:	f7ff fdd2 	bl	800f8f8 <rcl_wait_set_resize>
 800fd54:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800fd56:	2800      	cmp	r0, #0
 800fd58:	d09f      	beq.n	800fc9a <rcl_wait_set_init+0x32>
 800fd5a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800fd5c:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800fd5e:	4798      	blx	r3
 800fd60:	4620      	mov	r0, r4
 800fd62:	632e      	str	r6, [r5, #48]	; 0x30
 800fd64:	b005      	add	sp, #20
 800fd66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd6a:	240b      	movs	r4, #11
 800fd6c:	4620      	mov	r0, r4
 800fd6e:	b005      	add	sp, #20
 800fd70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd74:	2401      	movs	r4, #1
 800fd76:	f001 fe27 	bl	80119c8 <rmw_destroy_wait_set>
 800fd7a:	2800      	cmp	r0, #0
 800fd7c:	bf18      	it	ne
 800fd7e:	f44f 7461 	movne.w	r4, #900	; 0x384
 800fd82:	e7dd      	b.n	800fd40 <rcl_wait_set_init+0xd8>
 800fd84:	2465      	movs	r4, #101	; 0x65
 800fd86:	e788      	b.n	800fc9a <rcl_wait_set_init+0x32>
 800fd88:	240a      	movs	r4, #10
 800fd8a:	e786      	b.n	800fc9a <rcl_wait_set_init+0x32>
 800fd8c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800fd8e:	e7f2      	b.n	800fd76 <rcl_wait_set_init+0x10e>

0800fd90 <rcl_wait_set_add_guard_condition>:
 800fd90:	b318      	cbz	r0, 800fdda <rcl_wait_set_add_guard_condition+0x4a>
 800fd92:	b538      	push	{r3, r4, r5, lr}
 800fd94:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fd96:	4604      	mov	r4, r0
 800fd98:	b30b      	cbz	r3, 800fdde <rcl_wait_set_add_guard_condition+0x4e>
 800fd9a:	b319      	cbz	r1, 800fde4 <rcl_wait_set_add_guard_condition+0x54>
 800fd9c:	68dd      	ldr	r5, [r3, #12]
 800fd9e:	68c0      	ldr	r0, [r0, #12]
 800fda0:	4285      	cmp	r5, r0
 800fda2:	d217      	bcs.n	800fdd4 <rcl_wait_set_add_guard_condition+0x44>
 800fda4:	1c68      	adds	r0, r5, #1
 800fda6:	60d8      	str	r0, [r3, #12]
 800fda8:	68a3      	ldr	r3, [r4, #8]
 800fdaa:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 800fdae:	b102      	cbz	r2, 800fdb2 <rcl_wait_set_add_guard_condition+0x22>
 800fdb0:	6015      	str	r5, [r2, #0]
 800fdb2:	4608      	mov	r0, r1
 800fdb4:	f7fe feb2 	bl	800eb1c <rcl_guard_condition_get_rmw_handle>
 800fdb8:	b150      	cbz	r0, 800fdd0 <rcl_wait_set_add_guard_condition+0x40>
 800fdba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fdbc:	6842      	ldr	r2, [r0, #4]
 800fdbe:	2000      	movs	r0, #0
 800fdc0:	695b      	ldr	r3, [r3, #20]
 800fdc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fdc6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fdc8:	6913      	ldr	r3, [r2, #16]
 800fdca:	3301      	adds	r3, #1
 800fdcc:	6113      	str	r3, [r2, #16]
 800fdce:	bd38      	pop	{r3, r4, r5, pc}
 800fdd0:	2001      	movs	r0, #1
 800fdd2:	bd38      	pop	{r3, r4, r5, pc}
 800fdd4:	f240 3086 	movw	r0, #902	; 0x386
 800fdd8:	bd38      	pop	{r3, r4, r5, pc}
 800fdda:	200b      	movs	r0, #11
 800fddc:	4770      	bx	lr
 800fdde:	f44f 7061 	mov.w	r0, #900	; 0x384
 800fde2:	bd38      	pop	{r3, r4, r5, pc}
 800fde4:	200b      	movs	r0, #11
 800fde6:	bd38      	pop	{r3, r4, r5, pc}

0800fde8 <rcl_wait_set_add_timer>:
 800fde8:	b328      	cbz	r0, 800fe36 <rcl_wait_set_add_timer+0x4e>
 800fdea:	b538      	push	{r3, r4, r5, lr}
 800fdec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fdee:	4604      	mov	r4, r0
 800fdf0:	b31b      	cbz	r3, 800fe3a <rcl_wait_set_add_timer+0x52>
 800fdf2:	b329      	cbz	r1, 800fe40 <rcl_wait_set_add_timer+0x58>
 800fdf4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800fdf6:	6965      	ldr	r5, [r4, #20]
 800fdf8:	42a8      	cmp	r0, r5
 800fdfa:	d219      	bcs.n	800fe30 <rcl_wait_set_add_timer+0x48>
 800fdfc:	1c45      	adds	r5, r0, #1
 800fdfe:	641d      	str	r5, [r3, #64]	; 0x40
 800fe00:	6923      	ldr	r3, [r4, #16]
 800fe02:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 800fe06:	b102      	cbz	r2, 800fe0a <rcl_wait_set_add_timer+0x22>
 800fe08:	6010      	str	r0, [r2, #0]
 800fe0a:	4608      	mov	r0, r1
 800fe0c:	f7ff fb9a 	bl	800f544 <rcl_timer_get_guard_condition>
 800fe10:	b168      	cbz	r0, 800fe2e <rcl_wait_set_add_timer+0x46>
 800fe12:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fe14:	68e3      	ldr	r3, [r4, #12]
 800fe16:	6c15      	ldr	r5, [r2, #64]	; 0x40
 800fe18:	3b01      	subs	r3, #1
 800fe1a:	441d      	add	r5, r3
 800fe1c:	f7fe fe7e 	bl	800eb1c <rcl_guard_condition_get_rmw_handle>
 800fe20:	b180      	cbz	r0, 800fe44 <rcl_wait_set_add_timer+0x5c>
 800fe22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fe24:	6842      	ldr	r2, [r0, #4]
 800fe26:	2000      	movs	r0, #0
 800fe28:	695b      	ldr	r3, [r3, #20]
 800fe2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fe2e:	bd38      	pop	{r3, r4, r5, pc}
 800fe30:	f240 3086 	movw	r0, #902	; 0x386
 800fe34:	bd38      	pop	{r3, r4, r5, pc}
 800fe36:	200b      	movs	r0, #11
 800fe38:	4770      	bx	lr
 800fe3a:	f44f 7061 	mov.w	r0, #900	; 0x384
 800fe3e:	bd38      	pop	{r3, r4, r5, pc}
 800fe40:	200b      	movs	r0, #11
 800fe42:	bd38      	pop	{r3, r4, r5, pc}
 800fe44:	2001      	movs	r0, #1
 800fe46:	bd38      	pop	{r3, r4, r5, pc}

0800fe48 <rcl_wait_set_add_client>:
 800fe48:	b318      	cbz	r0, 800fe92 <rcl_wait_set_add_client+0x4a>
 800fe4a:	b538      	push	{r3, r4, r5, lr}
 800fe4c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fe4e:	4604      	mov	r4, r0
 800fe50:	b30b      	cbz	r3, 800fe96 <rcl_wait_set_add_client+0x4e>
 800fe52:	b319      	cbz	r1, 800fe9c <rcl_wait_set_add_client+0x54>
 800fe54:	699d      	ldr	r5, [r3, #24]
 800fe56:	69c0      	ldr	r0, [r0, #28]
 800fe58:	4285      	cmp	r5, r0
 800fe5a:	d217      	bcs.n	800fe8c <rcl_wait_set_add_client+0x44>
 800fe5c:	1c68      	adds	r0, r5, #1
 800fe5e:	6198      	str	r0, [r3, #24]
 800fe60:	69a3      	ldr	r3, [r4, #24]
 800fe62:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 800fe66:	b102      	cbz	r2, 800fe6a <rcl_wait_set_add_client+0x22>
 800fe68:	6015      	str	r5, [r2, #0]
 800fe6a:	4608      	mov	r0, r1
 800fe6c:	f7fe fc98 	bl	800e7a0 <rcl_client_get_rmw_handle>
 800fe70:	b150      	cbz	r0, 800fe88 <rcl_wait_set_add_client+0x40>
 800fe72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fe74:	6842      	ldr	r2, [r0, #4]
 800fe76:	2000      	movs	r0, #0
 800fe78:	6a1b      	ldr	r3, [r3, #32]
 800fe7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fe7e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fe80:	69d3      	ldr	r3, [r2, #28]
 800fe82:	3301      	adds	r3, #1
 800fe84:	61d3      	str	r3, [r2, #28]
 800fe86:	bd38      	pop	{r3, r4, r5, pc}
 800fe88:	2001      	movs	r0, #1
 800fe8a:	bd38      	pop	{r3, r4, r5, pc}
 800fe8c:	f240 3086 	movw	r0, #902	; 0x386
 800fe90:	bd38      	pop	{r3, r4, r5, pc}
 800fe92:	200b      	movs	r0, #11
 800fe94:	4770      	bx	lr
 800fe96:	f44f 7061 	mov.w	r0, #900	; 0x384
 800fe9a:	bd38      	pop	{r3, r4, r5, pc}
 800fe9c:	200b      	movs	r0, #11
 800fe9e:	bd38      	pop	{r3, r4, r5, pc}

0800fea0 <rcl_wait_set_add_service>:
 800fea0:	b318      	cbz	r0, 800feea <rcl_wait_set_add_service+0x4a>
 800fea2:	b538      	push	{r3, r4, r5, lr}
 800fea4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fea6:	4604      	mov	r4, r0
 800fea8:	b30b      	cbz	r3, 800feee <rcl_wait_set_add_service+0x4e>
 800feaa:	b319      	cbz	r1, 800fef4 <rcl_wait_set_add_service+0x54>
 800feac:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800feae:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800feb0:	4285      	cmp	r5, r0
 800feb2:	d217      	bcs.n	800fee4 <rcl_wait_set_add_service+0x44>
 800feb4:	1c68      	adds	r0, r5, #1
 800feb6:	6258      	str	r0, [r3, #36]	; 0x24
 800feb8:	6a23      	ldr	r3, [r4, #32]
 800feba:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 800febe:	b102      	cbz	r2, 800fec2 <rcl_wait_set_add_service+0x22>
 800fec0:	6015      	str	r5, [r2, #0]
 800fec2:	4608      	mov	r0, r1
 800fec4:	f7f8 fe58 	bl	8008b78 <rcl_service_get_rmw_handle>
 800fec8:	b150      	cbz	r0, 800fee0 <rcl_wait_set_add_service+0x40>
 800feca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fecc:	6842      	ldr	r2, [r0, #4]
 800fece:	2000      	movs	r0, #0
 800fed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fed2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fed6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fed8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800feda:	3301      	adds	r3, #1
 800fedc:	6293      	str	r3, [r2, #40]	; 0x28
 800fede:	bd38      	pop	{r3, r4, r5, pc}
 800fee0:	2001      	movs	r0, #1
 800fee2:	bd38      	pop	{r3, r4, r5, pc}
 800fee4:	f240 3086 	movw	r0, #902	; 0x386
 800fee8:	bd38      	pop	{r3, r4, r5, pc}
 800feea:	200b      	movs	r0, #11
 800feec:	4770      	bx	lr
 800feee:	f44f 7061 	mov.w	r0, #900	; 0x384
 800fef2:	bd38      	pop	{r3, r4, r5, pc}
 800fef4:	200b      	movs	r0, #11
 800fef6:	bd38      	pop	{r3, r4, r5, pc}

0800fef8 <rcl_wait>:
 800fef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fefc:	ed2d 8b02 	vpush	{d8}
 800ff00:	b08d      	sub	sp, #52	; 0x34
 800ff02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ff06:	2800      	cmp	r0, #0
 800ff08:	f000 814f 	beq.w	80101aa <rcl_wait+0x2b2>
 800ff0c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800ff0e:	4605      	mov	r5, r0
 800ff10:	2e00      	cmp	r6, #0
 800ff12:	f000 811a 	beq.w	801014a <rcl_wait+0x252>
 800ff16:	6843      	ldr	r3, [r0, #4]
 800ff18:	b983      	cbnz	r3, 800ff3c <rcl_wait+0x44>
 800ff1a:	68eb      	ldr	r3, [r5, #12]
 800ff1c:	b973      	cbnz	r3, 800ff3c <rcl_wait+0x44>
 800ff1e:	696b      	ldr	r3, [r5, #20]
 800ff20:	b963      	cbnz	r3, 800ff3c <rcl_wait+0x44>
 800ff22:	69eb      	ldr	r3, [r5, #28]
 800ff24:	b953      	cbnz	r3, 800ff3c <rcl_wait+0x44>
 800ff26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ff28:	b943      	cbnz	r3, 800ff3c <rcl_wait+0x44>
 800ff2a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ff2c:	b933      	cbnz	r3, 800ff3c <rcl_wait+0x44>
 800ff2e:	f240 3085 	movw	r0, #901	; 0x385
 800ff32:	b00d      	add	sp, #52	; 0x34
 800ff34:	ecbd 8b02 	vpop	{d8}
 800ff38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff3c:	9b04      	ldr	r3, [sp, #16]
 800ff3e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 800ff40:	2b01      	cmp	r3, #1
 800ff42:	9b05      	ldr	r3, [sp, #20]
 800ff44:	f173 0300 	sbcs.w	r3, r3, #0
 800ff48:	f2c0 80f8 	blt.w	801013c <rcl_wait+0x244>
 800ff4c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 800ff50:	2a00      	cmp	r2, #0
 800ff52:	f000 810f 	beq.w	8010174 <rcl_wait+0x27c>
 800ff56:	2400      	movs	r4, #0
 800ff58:	4613      	mov	r3, r2
 800ff5a:	f240 3921 	movw	r9, #801	; 0x321
 800ff5e:	4632      	mov	r2, r6
 800ff60:	46a2      	mov	sl, r4
 800ff62:	46a3      	mov	fp, r4
 800ff64:	ed9f 8b98 	vldr	d8, [pc, #608]	; 80101c8 <rcl_wait+0x2d0>
 800ff68:	e014      	b.n	800ff94 <rcl_wait+0x9c>
 800ff6a:	2800      	cmp	r0, #0
 800ff6c:	d1e1      	bne.n	800ff32 <rcl_wait+0x3a>
 800ff6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ff72:	4542      	cmp	r2, r8
 800ff74:	eb73 0107 	sbcs.w	r1, r3, r7
 800ff78:	da03      	bge.n	800ff82 <rcl_wait+0x8a>
 800ff7a:	4690      	mov	r8, r2
 800ff7c:	461f      	mov	r7, r3
 800ff7e:	f04f 0b01 	mov.w	fp, #1
 800ff82:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800ff84:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ff86:	3401      	adds	r4, #1
 800ff88:	f14a 0a00 	adc.w	sl, sl, #0
 800ff8c:	429c      	cmp	r4, r3
 800ff8e:	f17a 0100 	sbcs.w	r1, sl, #0
 800ff92:	d228      	bcs.n	800ffe6 <rcl_wait+0xee>
 800ff94:	6928      	ldr	r0, [r5, #16]
 800ff96:	a908      	add	r1, sp, #32
 800ff98:	00a6      	lsls	r6, r4, #2
 800ff9a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800ff9e:	2800      	cmp	r0, #0
 800ffa0:	d0f1      	beq.n	800ff86 <rcl_wait+0x8e>
 800ffa2:	68eb      	ldr	r3, [r5, #12]
 800ffa4:	f8d2 c014 	ldr.w	ip, [r2, #20]
 800ffa8:	4423      	add	r3, r4
 800ffaa:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 800ffae:	f1be 0f00 	cmp.w	lr, #0
 800ffb2:	d006      	beq.n	800ffc2 <rcl_wait+0xca>
 800ffb4:	6913      	ldr	r3, [r2, #16]
 800ffb6:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 800ffba:	3301      	adds	r3, #1
 800ffbc:	6113      	str	r3, [r2, #16]
 800ffbe:	692b      	ldr	r3, [r5, #16]
 800ffc0:	5998      	ldr	r0, [r3, r6]
 800ffc2:	ed8d 8b08 	vstr	d8, [sp, #32]
 800ffc6:	f7ff fa8b 	bl	800f4e0 <rcl_timer_get_time_until_next_call>
 800ffca:	4548      	cmp	r0, r9
 800ffcc:	d1cd      	bne.n	800ff6a <rcl_wait+0x72>
 800ffce:	692b      	ldr	r3, [r5, #16]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	3401      	adds	r4, #1
 800ffd4:	519a      	str	r2, [r3, r6]
 800ffd6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800ffd8:	f14a 0a00 	adc.w	sl, sl, #0
 800ffdc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ffde:	429c      	cmp	r4, r3
 800ffe0:	f17a 0100 	sbcs.w	r1, sl, #0
 800ffe4:	d3d6      	bcc.n	800ff94 <rcl_wait+0x9c>
 800ffe6:	4659      	mov	r1, fp
 800ffe8:	4616      	mov	r6, r2
 800ffea:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ffee:	4313      	orrs	r3, r2
 800fff0:	f040 80b4 	bne.w	801015c <rcl_wait+0x264>
 800fff4:	2300      	movs	r3, #0
 800fff6:	2200      	movs	r2, #0
 800fff8:	460c      	mov	r4, r1
 800fffa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fffe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010002:	ab08      	add	r3, sp, #32
 8010004:	9302      	str	r3, [sp, #8]
 8010006:	f106 0334 	add.w	r3, r6, #52	; 0x34
 801000a:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 801000c:	f106 0110 	add.w	r1, r6, #16
 8010010:	9300      	str	r3, [sp, #0]
 8010012:	1d30      	adds	r0, r6, #4
 8010014:	f106 031c 	add.w	r3, r6, #28
 8010018:	9201      	str	r2, [sp, #4]
 801001a:	f106 0228 	add.w	r2, r6, #40	; 0x28
 801001e:	f001 fb65 	bl	80116ec <rmw_wait>
 8010022:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010024:	4680      	mov	r8, r0
 8010026:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010028:	b1e2      	cbz	r2, 8010064 <rcl_wait+0x16c>
 801002a:	f04f 0900 	mov.w	r9, #0
 801002e:	464f      	mov	r7, r9
 8010030:	692a      	ldr	r2, [r5, #16]
 8010032:	f10d 011f 	add.w	r1, sp, #31
 8010036:	ea4f 0689 	mov.w	r6, r9, lsl #2
 801003a:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801003e:	b160      	cbz	r0, 801005a <rcl_wait+0x162>
 8010040:	f88d 701f 	strb.w	r7, [sp, #31]
 8010044:	f7ff fa10 	bl	800f468 <rcl_timer_is_ready>
 8010048:	2800      	cmp	r0, #0
 801004a:	f47f af72 	bne.w	800ff32 <rcl_wait+0x3a>
 801004e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8010052:	b90b      	cbnz	r3, 8010058 <rcl_wait+0x160>
 8010054:	692a      	ldr	r2, [r5, #16]
 8010056:	5193      	str	r3, [r2, r6]
 8010058:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801005a:	f109 0901 	add.w	r9, r9, #1
 801005e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010060:	454a      	cmp	r2, r9
 8010062:	d8e5      	bhi.n	8010030 <rcl_wait+0x138>
 8010064:	f038 0002 	bics.w	r0, r8, #2
 8010068:	d176      	bne.n	8010158 <rcl_wait+0x260>
 801006a:	686f      	ldr	r7, [r5, #4]
 801006c:	b17f      	cbz	r7, 801008e <rcl_wait+0x196>
 801006e:	4602      	mov	r2, r0
 8010070:	e002      	b.n	8010078 <rcl_wait+0x180>
 8010072:	3201      	adds	r2, #1
 8010074:	42ba      	cmp	r2, r7
 8010076:	d00a      	beq.n	801008e <rcl_wait+0x196>
 8010078:	6899      	ldr	r1, [r3, #8]
 801007a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801007e:	2900      	cmp	r1, #0
 8010080:	d1f7      	bne.n	8010072 <rcl_wait+0x17a>
 8010082:	682e      	ldr	r6, [r5, #0]
 8010084:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8010088:	3201      	adds	r2, #1
 801008a:	42ba      	cmp	r2, r7
 801008c:	d1f4      	bne.n	8010078 <rcl_wait+0x180>
 801008e:	68ef      	ldr	r7, [r5, #12]
 8010090:	b17f      	cbz	r7, 80100b2 <rcl_wait+0x1ba>
 8010092:	2200      	movs	r2, #0
 8010094:	e002      	b.n	801009c <rcl_wait+0x1a4>
 8010096:	3201      	adds	r2, #1
 8010098:	42ba      	cmp	r2, r7
 801009a:	d00a      	beq.n	80100b2 <rcl_wait+0x1ba>
 801009c:	6959      	ldr	r1, [r3, #20]
 801009e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80100a2:	2900      	cmp	r1, #0
 80100a4:	d1f7      	bne.n	8010096 <rcl_wait+0x19e>
 80100a6:	68ae      	ldr	r6, [r5, #8]
 80100a8:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80100ac:	3201      	adds	r2, #1
 80100ae:	42ba      	cmp	r2, r7
 80100b0:	d1f4      	bne.n	801009c <rcl_wait+0x1a4>
 80100b2:	69ef      	ldr	r7, [r5, #28]
 80100b4:	b17f      	cbz	r7, 80100d6 <rcl_wait+0x1de>
 80100b6:	2200      	movs	r2, #0
 80100b8:	e002      	b.n	80100c0 <rcl_wait+0x1c8>
 80100ba:	3201      	adds	r2, #1
 80100bc:	42ba      	cmp	r2, r7
 80100be:	d00a      	beq.n	80100d6 <rcl_wait+0x1de>
 80100c0:	6a19      	ldr	r1, [r3, #32]
 80100c2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80100c6:	2900      	cmp	r1, #0
 80100c8:	d1f7      	bne.n	80100ba <rcl_wait+0x1c2>
 80100ca:	69ae      	ldr	r6, [r5, #24]
 80100cc:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80100d0:	3201      	adds	r2, #1
 80100d2:	42ba      	cmp	r2, r7
 80100d4:	d1f4      	bne.n	80100c0 <rcl_wait+0x1c8>
 80100d6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80100d8:	b17f      	cbz	r7, 80100fa <rcl_wait+0x202>
 80100da:	2200      	movs	r2, #0
 80100dc:	e002      	b.n	80100e4 <rcl_wait+0x1ec>
 80100de:	3201      	adds	r2, #1
 80100e0:	42ba      	cmp	r2, r7
 80100e2:	d00a      	beq.n	80100fa <rcl_wait+0x202>
 80100e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80100e6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80100ea:	2900      	cmp	r1, #0
 80100ec:	d1f7      	bne.n	80100de <rcl_wait+0x1e6>
 80100ee:	6a2e      	ldr	r6, [r5, #32]
 80100f0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80100f4:	3201      	adds	r2, #1
 80100f6:	42ba      	cmp	r2, r7
 80100f8:	d1f4      	bne.n	80100e4 <rcl_wait+0x1ec>
 80100fa:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 80100fc:	b17f      	cbz	r7, 801011e <rcl_wait+0x226>
 80100fe:	2200      	movs	r2, #0
 8010100:	e002      	b.n	8010108 <rcl_wait+0x210>
 8010102:	3201      	adds	r2, #1
 8010104:	42ba      	cmp	r2, r7
 8010106:	d00a      	beq.n	801011e <rcl_wait+0x226>
 8010108:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801010a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801010e:	2900      	cmp	r1, #0
 8010110:	d1f7      	bne.n	8010102 <rcl_wait+0x20a>
 8010112:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8010114:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8010118:	3201      	adds	r2, #1
 801011a:	42ba      	cmp	r2, r7
 801011c:	d1f4      	bne.n	8010108 <rcl_wait+0x210>
 801011e:	f1b8 0f02 	cmp.w	r8, #2
 8010122:	f47f af06 	bne.w	800ff32 <rcl_wait+0x3a>
 8010126:	f084 0301 	eor.w	r3, r4, #1
 801012a:	b2db      	uxtb	r3, r3
 801012c:	2b00      	cmp	r3, #0
 801012e:	bf18      	it	ne
 8010130:	2002      	movne	r0, #2
 8010132:	b00d      	add	sp, #52	; 0x34
 8010134:	ecbd 8b02 	vpop	{d8}
 8010138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801013c:	2a00      	cmp	r2, #0
 801013e:	d03a      	beq.n	80101b6 <rcl_wait+0x2be>
 8010140:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8010144:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8010148:	e705      	b.n	800ff56 <rcl_wait+0x5e>
 801014a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801014e:	b00d      	add	sp, #52	; 0x34
 8010150:	ecbd 8b02 	vpop	{d8}
 8010154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010158:	2001      	movs	r0, #1
 801015a:	e6ea      	b.n	800ff32 <rcl_wait+0x3a>
 801015c:	9b04      	ldr	r3, [sp, #16]
 801015e:	460c      	mov	r4, r1
 8010160:	2b01      	cmp	r3, #1
 8010162:	9b05      	ldr	r3, [sp, #20]
 8010164:	f173 0300 	sbcs.w	r3, r3, #0
 8010168:	bfa8      	it	ge
 801016a:	f044 0401 	orrge.w	r4, r4, #1
 801016e:	b914      	cbnz	r4, 8010176 <rcl_wait+0x27e>
 8010170:	4623      	mov	r3, r4
 8010172:	e747      	b.n	8010004 <rcl_wait+0x10c>
 8010174:	4611      	mov	r1, r2
 8010176:	2f00      	cmp	r7, #0
 8010178:	da02      	bge.n	8010180 <rcl_wait+0x288>
 801017a:	f04f 0800 	mov.w	r8, #0
 801017e:	4647      	mov	r7, r8
 8010180:	460c      	mov	r4, r1
 8010182:	4640      	mov	r0, r8
 8010184:	4639      	mov	r1, r7
 8010186:	a312      	add	r3, pc, #72	; (adr r3, 80101d0 <rcl_wait+0x2d8>)
 8010188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801018c:	f7f0 f8c0 	bl	8000310 <__aeabi_ldivmod>
 8010190:	a30f      	add	r3, pc, #60	; (adr r3, 80101d0 <rcl_wait+0x2d8>)
 8010192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010196:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801019a:	4640      	mov	r0, r8
 801019c:	4639      	mov	r1, r7
 801019e:	f7f0 f8b7 	bl	8000310 <__aeabi_ldivmod>
 80101a2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80101a6:	ab08      	add	r3, sp, #32
 80101a8:	e72c      	b.n	8010004 <rcl_wait+0x10c>
 80101aa:	200b      	movs	r0, #11
 80101ac:	b00d      	add	sp, #52	; 0x34
 80101ae:	ecbd 8b02 	vpop	{d8}
 80101b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101b6:	4611      	mov	r1, r2
 80101b8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80101bc:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80101c0:	e713      	b.n	800ffea <rcl_wait+0xf2>
 80101c2:	bf00      	nop
 80101c4:	f3af 8000 	nop.w
 80101c8:	ffffffff 	.word	0xffffffff
 80101cc:	7fffffff 	.word	0x7fffffff
 80101d0:	3b9aca00 	.word	0x3b9aca00
 80101d4:	00000000 	.word	0x00000000

080101d8 <rcl_action_take_goal_response>:
 80101d8:	2800      	cmp	r0, #0
 80101da:	d039      	beq.n	8010250 <rcl_action_take_goal_response+0x78>
 80101dc:	b570      	push	{r4, r5, r6, lr}
 80101de:	4604      	mov	r4, r0
 80101e0:	6800      	ldr	r0, [r0, #0]
 80101e2:	b380      	cbz	r0, 8010246 <rcl_action_take_goal_response+0x6e>
 80101e4:	460e      	mov	r6, r1
 80101e6:	4615      	mov	r5, r2
 80101e8:	f7fe fb62 	bl	800e8b0 <rcl_client_is_valid>
 80101ec:	b330      	cbz	r0, 801023c <rcl_action_take_goal_response+0x64>
 80101ee:	6820      	ldr	r0, [r4, #0]
 80101f0:	3004      	adds	r0, #4
 80101f2:	f7fe fb5d 	bl	800e8b0 <rcl_client_is_valid>
 80101f6:	b308      	cbz	r0, 801023c <rcl_action_take_goal_response+0x64>
 80101f8:	6820      	ldr	r0, [r4, #0]
 80101fa:	3008      	adds	r0, #8
 80101fc:	f7fe fb58 	bl	800e8b0 <rcl_client_is_valid>
 8010200:	b1e0      	cbz	r0, 801023c <rcl_action_take_goal_response+0x64>
 8010202:	6820      	ldr	r0, [r4, #0]
 8010204:	300c      	adds	r0, #12
 8010206:	f7fe ffe7 	bl	800f1d8 <rcl_subscription_is_valid>
 801020a:	b1b8      	cbz	r0, 801023c <rcl_action_take_goal_response+0x64>
 801020c:	6820      	ldr	r0, [r4, #0]
 801020e:	3010      	adds	r0, #16
 8010210:	f7fe ffe2 	bl	800f1d8 <rcl_subscription_is_valid>
 8010214:	b190      	cbz	r0, 801023c <rcl_action_take_goal_response+0x64>
 8010216:	b1cd      	cbz	r5, 801024c <rcl_action_take_goal_response+0x74>
 8010218:	b1c6      	cbz	r6, 801024c <rcl_action_take_goal_response+0x74>
 801021a:	462a      	mov	r2, r5
 801021c:	4631      	mov	r1, r6
 801021e:	6820      	ldr	r0, [r4, #0]
 8010220:	f7fe fafe 	bl	800e820 <rcl_take_response>
 8010224:	b148      	cbz	r0, 801023a <rcl_action_take_goal_response+0x62>
 8010226:	280a      	cmp	r0, #10
 8010228:	d007      	beq.n	801023a <rcl_action_take_goal_response+0x62>
 801022a:	f240 12f5 	movw	r2, #501	; 0x1f5
 801022e:	f640 0337 	movw	r3, #2103	; 0x837
 8010232:	4290      	cmp	r0, r2
 8010234:	bf0c      	ite	eq
 8010236:	4618      	moveq	r0, r3
 8010238:	2001      	movne	r0, #1
 801023a:	bd70      	pop	{r4, r5, r6, pc}
 801023c:	f7f9 fc68 	bl	8009b10 <rcutils_reset_error>
 8010240:	f640 0036 	movw	r0, #2102	; 0x836
 8010244:	bd70      	pop	{r4, r5, r6, pc}
 8010246:	f640 0036 	movw	r0, #2102	; 0x836
 801024a:	bd70      	pop	{r4, r5, r6, pc}
 801024c:	200b      	movs	r0, #11
 801024e:	bd70      	pop	{r4, r5, r6, pc}
 8010250:	f640 0036 	movw	r0, #2102	; 0x836
 8010254:	4770      	bx	lr
 8010256:	bf00      	nop

08010258 <rcl_action_send_result_request>:
 8010258:	b390      	cbz	r0, 80102c0 <rcl_action_send_result_request+0x68>
 801025a:	b570      	push	{r4, r5, r6, lr}
 801025c:	4604      	mov	r4, r0
 801025e:	6800      	ldr	r0, [r0, #0]
 8010260:	b348      	cbz	r0, 80102b6 <rcl_action_send_result_request+0x5e>
 8010262:	460e      	mov	r6, r1
 8010264:	4615      	mov	r5, r2
 8010266:	f7fe fb23 	bl	800e8b0 <rcl_client_is_valid>
 801026a:	b1f8      	cbz	r0, 80102ac <rcl_action_send_result_request+0x54>
 801026c:	6820      	ldr	r0, [r4, #0]
 801026e:	3004      	adds	r0, #4
 8010270:	f7fe fb1e 	bl	800e8b0 <rcl_client_is_valid>
 8010274:	b1d0      	cbz	r0, 80102ac <rcl_action_send_result_request+0x54>
 8010276:	6820      	ldr	r0, [r4, #0]
 8010278:	3008      	adds	r0, #8
 801027a:	f7fe fb19 	bl	800e8b0 <rcl_client_is_valid>
 801027e:	b1a8      	cbz	r0, 80102ac <rcl_action_send_result_request+0x54>
 8010280:	6820      	ldr	r0, [r4, #0]
 8010282:	300c      	adds	r0, #12
 8010284:	f7fe ffa8 	bl	800f1d8 <rcl_subscription_is_valid>
 8010288:	b180      	cbz	r0, 80102ac <rcl_action_send_result_request+0x54>
 801028a:	6820      	ldr	r0, [r4, #0]
 801028c:	3010      	adds	r0, #16
 801028e:	f7fe ffa3 	bl	800f1d8 <rcl_subscription_is_valid>
 8010292:	b158      	cbz	r0, 80102ac <rcl_action_send_result_request+0x54>
 8010294:	b195      	cbz	r5, 80102bc <rcl_action_send_result_request+0x64>
 8010296:	b18e      	cbz	r6, 80102bc <rcl_action_send_result_request+0x64>
 8010298:	6820      	ldr	r0, [r4, #0]
 801029a:	462a      	mov	r2, r5
 801029c:	4631      	mov	r1, r6
 801029e:	3008      	adds	r0, #8
 80102a0:	f7fe fa84 	bl	800e7ac <rcl_send_request>
 80102a4:	3800      	subs	r0, #0
 80102a6:	bf18      	it	ne
 80102a8:	2001      	movne	r0, #1
 80102aa:	bd70      	pop	{r4, r5, r6, pc}
 80102ac:	f7f9 fc30 	bl	8009b10 <rcutils_reset_error>
 80102b0:	f640 0036 	movw	r0, #2102	; 0x836
 80102b4:	bd70      	pop	{r4, r5, r6, pc}
 80102b6:	f640 0036 	movw	r0, #2102	; 0x836
 80102ba:	bd70      	pop	{r4, r5, r6, pc}
 80102bc:	200b      	movs	r0, #11
 80102be:	bd70      	pop	{r4, r5, r6, pc}
 80102c0:	f640 0036 	movw	r0, #2102	; 0x836
 80102c4:	4770      	bx	lr
 80102c6:	bf00      	nop

080102c8 <rcl_action_take_result_response>:
 80102c8:	2800      	cmp	r0, #0
 80102ca:	d03a      	beq.n	8010342 <rcl_action_take_result_response+0x7a>
 80102cc:	b570      	push	{r4, r5, r6, lr}
 80102ce:	4604      	mov	r4, r0
 80102d0:	6800      	ldr	r0, [r0, #0]
 80102d2:	b388      	cbz	r0, 8010338 <rcl_action_take_result_response+0x70>
 80102d4:	460e      	mov	r6, r1
 80102d6:	4615      	mov	r5, r2
 80102d8:	f7fe faea 	bl	800e8b0 <rcl_client_is_valid>
 80102dc:	b338      	cbz	r0, 801032e <rcl_action_take_result_response+0x66>
 80102de:	6820      	ldr	r0, [r4, #0]
 80102e0:	3004      	adds	r0, #4
 80102e2:	f7fe fae5 	bl	800e8b0 <rcl_client_is_valid>
 80102e6:	b310      	cbz	r0, 801032e <rcl_action_take_result_response+0x66>
 80102e8:	6820      	ldr	r0, [r4, #0]
 80102ea:	3008      	adds	r0, #8
 80102ec:	f7fe fae0 	bl	800e8b0 <rcl_client_is_valid>
 80102f0:	b1e8      	cbz	r0, 801032e <rcl_action_take_result_response+0x66>
 80102f2:	6820      	ldr	r0, [r4, #0]
 80102f4:	300c      	adds	r0, #12
 80102f6:	f7fe ff6f 	bl	800f1d8 <rcl_subscription_is_valid>
 80102fa:	b1c0      	cbz	r0, 801032e <rcl_action_take_result_response+0x66>
 80102fc:	6820      	ldr	r0, [r4, #0]
 80102fe:	3010      	adds	r0, #16
 8010300:	f7fe ff6a 	bl	800f1d8 <rcl_subscription_is_valid>
 8010304:	b198      	cbz	r0, 801032e <rcl_action_take_result_response+0x66>
 8010306:	b1d5      	cbz	r5, 801033e <rcl_action_take_result_response+0x76>
 8010308:	b1ce      	cbz	r6, 801033e <rcl_action_take_result_response+0x76>
 801030a:	6820      	ldr	r0, [r4, #0]
 801030c:	462a      	mov	r2, r5
 801030e:	4631      	mov	r1, r6
 8010310:	3008      	adds	r0, #8
 8010312:	f7fe fa85 	bl	800e820 <rcl_take_response>
 8010316:	b148      	cbz	r0, 801032c <rcl_action_take_result_response+0x64>
 8010318:	280a      	cmp	r0, #10
 801031a:	d007      	beq.n	801032c <rcl_action_take_result_response+0x64>
 801031c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8010320:	f640 0337 	movw	r3, #2103	; 0x837
 8010324:	4290      	cmp	r0, r2
 8010326:	bf0c      	ite	eq
 8010328:	4618      	moveq	r0, r3
 801032a:	2001      	movne	r0, #1
 801032c:	bd70      	pop	{r4, r5, r6, pc}
 801032e:	f7f9 fbef 	bl	8009b10 <rcutils_reset_error>
 8010332:	f640 0036 	movw	r0, #2102	; 0x836
 8010336:	bd70      	pop	{r4, r5, r6, pc}
 8010338:	f640 0036 	movw	r0, #2102	; 0x836
 801033c:	bd70      	pop	{r4, r5, r6, pc}
 801033e:	200b      	movs	r0, #11
 8010340:	bd70      	pop	{r4, r5, r6, pc}
 8010342:	f640 0036 	movw	r0, #2102	; 0x836
 8010346:	4770      	bx	lr

08010348 <rcl_action_take_cancel_response>:
 8010348:	2800      	cmp	r0, #0
 801034a:	d03a      	beq.n	80103c2 <rcl_action_take_cancel_response+0x7a>
 801034c:	b570      	push	{r4, r5, r6, lr}
 801034e:	4604      	mov	r4, r0
 8010350:	6800      	ldr	r0, [r0, #0]
 8010352:	b388      	cbz	r0, 80103b8 <rcl_action_take_cancel_response+0x70>
 8010354:	460e      	mov	r6, r1
 8010356:	4615      	mov	r5, r2
 8010358:	f7fe faaa 	bl	800e8b0 <rcl_client_is_valid>
 801035c:	b338      	cbz	r0, 80103ae <rcl_action_take_cancel_response+0x66>
 801035e:	6820      	ldr	r0, [r4, #0]
 8010360:	3004      	adds	r0, #4
 8010362:	f7fe faa5 	bl	800e8b0 <rcl_client_is_valid>
 8010366:	b310      	cbz	r0, 80103ae <rcl_action_take_cancel_response+0x66>
 8010368:	6820      	ldr	r0, [r4, #0]
 801036a:	3008      	adds	r0, #8
 801036c:	f7fe faa0 	bl	800e8b0 <rcl_client_is_valid>
 8010370:	b1e8      	cbz	r0, 80103ae <rcl_action_take_cancel_response+0x66>
 8010372:	6820      	ldr	r0, [r4, #0]
 8010374:	300c      	adds	r0, #12
 8010376:	f7fe ff2f 	bl	800f1d8 <rcl_subscription_is_valid>
 801037a:	b1c0      	cbz	r0, 80103ae <rcl_action_take_cancel_response+0x66>
 801037c:	6820      	ldr	r0, [r4, #0]
 801037e:	3010      	adds	r0, #16
 8010380:	f7fe ff2a 	bl	800f1d8 <rcl_subscription_is_valid>
 8010384:	b198      	cbz	r0, 80103ae <rcl_action_take_cancel_response+0x66>
 8010386:	b1d5      	cbz	r5, 80103be <rcl_action_take_cancel_response+0x76>
 8010388:	b1ce      	cbz	r6, 80103be <rcl_action_take_cancel_response+0x76>
 801038a:	6820      	ldr	r0, [r4, #0]
 801038c:	462a      	mov	r2, r5
 801038e:	4631      	mov	r1, r6
 8010390:	3004      	adds	r0, #4
 8010392:	f7fe fa45 	bl	800e820 <rcl_take_response>
 8010396:	b148      	cbz	r0, 80103ac <rcl_action_take_cancel_response+0x64>
 8010398:	280a      	cmp	r0, #10
 801039a:	d007      	beq.n	80103ac <rcl_action_take_cancel_response+0x64>
 801039c:	f240 12f5 	movw	r2, #501	; 0x1f5
 80103a0:	f640 0337 	movw	r3, #2103	; 0x837
 80103a4:	4290      	cmp	r0, r2
 80103a6:	bf0c      	ite	eq
 80103a8:	4618      	moveq	r0, r3
 80103aa:	2001      	movne	r0, #1
 80103ac:	bd70      	pop	{r4, r5, r6, pc}
 80103ae:	f7f9 fbaf 	bl	8009b10 <rcutils_reset_error>
 80103b2:	f640 0036 	movw	r0, #2102	; 0x836
 80103b6:	bd70      	pop	{r4, r5, r6, pc}
 80103b8:	f640 0036 	movw	r0, #2102	; 0x836
 80103bc:	bd70      	pop	{r4, r5, r6, pc}
 80103be:	200b      	movs	r0, #11
 80103c0:	bd70      	pop	{r4, r5, r6, pc}
 80103c2:	f640 0036 	movw	r0, #2102	; 0x836
 80103c6:	4770      	bx	lr

080103c8 <rcl_action_take_feedback>:
 80103c8:	2800      	cmp	r0, #0
 80103ca:	d038      	beq.n	801043e <rcl_action_take_feedback+0x76>
 80103cc:	b530      	push	{r4, r5, lr}
 80103ce:	4604      	mov	r4, r0
 80103d0:	6800      	ldr	r0, [r0, #0]
 80103d2:	b091      	sub	sp, #68	; 0x44
 80103d4:	b378      	cbz	r0, 8010436 <rcl_action_take_feedback+0x6e>
 80103d6:	460d      	mov	r5, r1
 80103d8:	f7fe fa6a 	bl	800e8b0 <rcl_client_is_valid>
 80103dc:	b328      	cbz	r0, 801042a <rcl_action_take_feedback+0x62>
 80103de:	6820      	ldr	r0, [r4, #0]
 80103e0:	3004      	adds	r0, #4
 80103e2:	f7fe fa65 	bl	800e8b0 <rcl_client_is_valid>
 80103e6:	b300      	cbz	r0, 801042a <rcl_action_take_feedback+0x62>
 80103e8:	6820      	ldr	r0, [r4, #0]
 80103ea:	3008      	adds	r0, #8
 80103ec:	f7fe fa60 	bl	800e8b0 <rcl_client_is_valid>
 80103f0:	b1d8      	cbz	r0, 801042a <rcl_action_take_feedback+0x62>
 80103f2:	6820      	ldr	r0, [r4, #0]
 80103f4:	300c      	adds	r0, #12
 80103f6:	f7fe feef 	bl	800f1d8 <rcl_subscription_is_valid>
 80103fa:	b1b0      	cbz	r0, 801042a <rcl_action_take_feedback+0x62>
 80103fc:	6820      	ldr	r0, [r4, #0]
 80103fe:	3010      	adds	r0, #16
 8010400:	f7fe feea 	bl	800f1d8 <rcl_subscription_is_valid>
 8010404:	b188      	cbz	r0, 801042a <rcl_action_take_feedback+0x62>
 8010406:	b1ed      	cbz	r5, 8010444 <rcl_action_take_feedback+0x7c>
 8010408:	6820      	ldr	r0, [r4, #0]
 801040a:	2300      	movs	r3, #0
 801040c:	466a      	mov	r2, sp
 801040e:	4629      	mov	r1, r5
 8010410:	300c      	adds	r0, #12
 8010412:	f7fe fe85 	bl	800f120 <rcl_take>
 8010416:	b160      	cbz	r0, 8010432 <rcl_action_take_feedback+0x6a>
 8010418:	f240 1391 	movw	r3, #401	; 0x191
 801041c:	4298      	cmp	r0, r3
 801041e:	d014      	beq.n	801044a <rcl_action_take_feedback+0x82>
 8010420:	280a      	cmp	r0, #10
 8010422:	bf18      	it	ne
 8010424:	2001      	movne	r0, #1
 8010426:	b011      	add	sp, #68	; 0x44
 8010428:	bd30      	pop	{r4, r5, pc}
 801042a:	f7f9 fb71 	bl	8009b10 <rcutils_reset_error>
 801042e:	f640 0036 	movw	r0, #2102	; 0x836
 8010432:	b011      	add	sp, #68	; 0x44
 8010434:	bd30      	pop	{r4, r5, pc}
 8010436:	f640 0036 	movw	r0, #2102	; 0x836
 801043a:	b011      	add	sp, #68	; 0x44
 801043c:	bd30      	pop	{r4, r5, pc}
 801043e:	f640 0036 	movw	r0, #2102	; 0x836
 8010442:	4770      	bx	lr
 8010444:	200b      	movs	r0, #11
 8010446:	b011      	add	sp, #68	; 0x44
 8010448:	bd30      	pop	{r4, r5, pc}
 801044a:	f640 0037 	movw	r0, #2103	; 0x837
 801044e:	e7f0      	b.n	8010432 <rcl_action_take_feedback+0x6a>

08010450 <rcl_action_wait_set_add_action_client>:
 8010450:	2800      	cmp	r0, #0
 8010452:	d048      	beq.n	80104e6 <rcl_action_wait_set_add_action_client+0x96>
 8010454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010456:	460c      	mov	r4, r1
 8010458:	2900      	cmp	r1, #0
 801045a:	d03c      	beq.n	80104d6 <rcl_action_wait_set_add_action_client+0x86>
 801045c:	4605      	mov	r5, r0
 801045e:	6808      	ldr	r0, [r1, #0]
 8010460:	2800      	cmp	r0, #0
 8010462:	d038      	beq.n	80104d6 <rcl_action_wait_set_add_action_client+0x86>
 8010464:	4617      	mov	r7, r2
 8010466:	461e      	mov	r6, r3
 8010468:	f7fe fa22 	bl	800e8b0 <rcl_client_is_valid>
 801046c:	b3b0      	cbz	r0, 80104dc <rcl_action_wait_set_add_action_client+0x8c>
 801046e:	6820      	ldr	r0, [r4, #0]
 8010470:	3004      	adds	r0, #4
 8010472:	f7fe fa1d 	bl	800e8b0 <rcl_client_is_valid>
 8010476:	b388      	cbz	r0, 80104dc <rcl_action_wait_set_add_action_client+0x8c>
 8010478:	6820      	ldr	r0, [r4, #0]
 801047a:	3008      	adds	r0, #8
 801047c:	f7fe fa18 	bl	800e8b0 <rcl_client_is_valid>
 8010480:	b360      	cbz	r0, 80104dc <rcl_action_wait_set_add_action_client+0x8c>
 8010482:	6820      	ldr	r0, [r4, #0]
 8010484:	300c      	adds	r0, #12
 8010486:	f7fe fea7 	bl	800f1d8 <rcl_subscription_is_valid>
 801048a:	b338      	cbz	r0, 80104dc <rcl_action_wait_set_add_action_client+0x8c>
 801048c:	6820      	ldr	r0, [r4, #0]
 801048e:	3010      	adds	r0, #16
 8010490:	f7fe fea2 	bl	800f1d8 <rcl_subscription_is_valid>
 8010494:	b310      	cbz	r0, 80104dc <rcl_action_wait_set_add_action_client+0x8c>
 8010496:	6821      	ldr	r1, [r4, #0]
 8010498:	4628      	mov	r0, r5
 801049a:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 801049e:	f7ff fcd3 	bl	800fe48 <rcl_wait_set_add_client>
 80104a2:	b9b8      	cbnz	r0, 80104d4 <rcl_action_wait_set_add_action_client+0x84>
 80104a4:	6821      	ldr	r1, [r4, #0]
 80104a6:	4628      	mov	r0, r5
 80104a8:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 80104ac:	3104      	adds	r1, #4
 80104ae:	f7ff fccb 	bl	800fe48 <rcl_wait_set_add_client>
 80104b2:	b978      	cbnz	r0, 80104d4 <rcl_action_wait_set_add_action_client+0x84>
 80104b4:	6821      	ldr	r1, [r4, #0]
 80104b6:	4628      	mov	r0, r5
 80104b8:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 80104bc:	3108      	adds	r1, #8
 80104be:	f7ff fcc3 	bl	800fe48 <rcl_wait_set_add_client>
 80104c2:	b938      	cbnz	r0, 80104d4 <rcl_action_wait_set_add_action_client+0x84>
 80104c4:	6821      	ldr	r1, [r4, #0]
 80104c6:	4628      	mov	r0, r5
 80104c8:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 80104cc:	310c      	adds	r1, #12
 80104ce:	f7ff f96b 	bl	800f7a8 <rcl_wait_set_add_subscription>
 80104d2:	b158      	cbz	r0, 80104ec <rcl_action_wait_set_add_action_client+0x9c>
 80104d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104d6:	f640 0036 	movw	r0, #2102	; 0x836
 80104da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104dc:	f7f9 fb18 	bl	8009b10 <rcutils_reset_error>
 80104e0:	f640 0036 	movw	r0, #2102	; 0x836
 80104e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104e6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80104ea:	4770      	bx	lr
 80104ec:	6821      	ldr	r1, [r4, #0]
 80104ee:	4628      	mov	r0, r5
 80104f0:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 80104f4:	3110      	adds	r1, #16
 80104f6:	f7ff f957 	bl	800f7a8 <rcl_wait_set_add_subscription>
 80104fa:	2800      	cmp	r0, #0
 80104fc:	d1ea      	bne.n	80104d4 <rcl_action_wait_set_add_action_client+0x84>
 80104fe:	b11f      	cbz	r7, 8010508 <rcl_action_wait_set_add_action_client+0xb8>
 8010500:	6823      	ldr	r3, [r4, #0]
 8010502:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8010506:	603b      	str	r3, [r7, #0]
 8010508:	2e00      	cmp	r6, #0
 801050a:	d0e3      	beq.n	80104d4 <rcl_action_wait_set_add_action_client+0x84>
 801050c:	6823      	ldr	r3, [r4, #0]
 801050e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8010512:	6033      	str	r3, [r6, #0]
 8010514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010516:	bf00      	nop

08010518 <rcl_action_client_wait_set_get_entities_ready>:
 8010518:	2800      	cmp	r0, #0
 801051a:	d050      	beq.n	80105be <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801051c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010520:	460c      	mov	r4, r1
 8010522:	2900      	cmp	r1, #0
 8010524:	d03e      	beq.n	80105a4 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8010526:	4605      	mov	r5, r0
 8010528:	6808      	ldr	r0, [r1, #0]
 801052a:	2800      	cmp	r0, #0
 801052c:	d03a      	beq.n	80105a4 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801052e:	4616      	mov	r6, r2
 8010530:	461f      	mov	r7, r3
 8010532:	f7fe f9bd 	bl	800e8b0 <rcl_client_is_valid>
 8010536:	2800      	cmp	r0, #0
 8010538:	d038      	beq.n	80105ac <rcl_action_client_wait_set_get_entities_ready+0x94>
 801053a:	6820      	ldr	r0, [r4, #0]
 801053c:	3004      	adds	r0, #4
 801053e:	f7fe f9b7 	bl	800e8b0 <rcl_client_is_valid>
 8010542:	2800      	cmp	r0, #0
 8010544:	d032      	beq.n	80105ac <rcl_action_client_wait_set_get_entities_ready+0x94>
 8010546:	6820      	ldr	r0, [r4, #0]
 8010548:	3008      	adds	r0, #8
 801054a:	f7fe f9b1 	bl	800e8b0 <rcl_client_is_valid>
 801054e:	b368      	cbz	r0, 80105ac <rcl_action_client_wait_set_get_entities_ready+0x94>
 8010550:	6820      	ldr	r0, [r4, #0]
 8010552:	300c      	adds	r0, #12
 8010554:	f7fe fe40 	bl	800f1d8 <rcl_subscription_is_valid>
 8010558:	b340      	cbz	r0, 80105ac <rcl_action_client_wait_set_get_entities_ready+0x94>
 801055a:	6820      	ldr	r0, [r4, #0]
 801055c:	3010      	adds	r0, #16
 801055e:	f7fe fe3b 	bl	800f1d8 <rcl_subscription_is_valid>
 8010562:	b318      	cbz	r0, 80105ac <rcl_action_client_wait_set_get_entities_ready+0x94>
 8010564:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010568:	2a00      	cmp	r2, #0
 801056a:	bf18      	it	ne
 801056c:	2b00      	cmpne	r3, #0
 801056e:	9b08      	ldr	r3, [sp, #32]
 8010570:	bf0c      	ite	eq
 8010572:	2101      	moveq	r1, #1
 8010574:	2100      	movne	r1, #0
 8010576:	2b00      	cmp	r3, #0
 8010578:	bf08      	it	eq
 801057a:	f041 0101 	orreq.w	r1, r1, #1
 801057e:	2f00      	cmp	r7, #0
 8010580:	bf08      	it	eq
 8010582:	f041 0101 	orreq.w	r1, r1, #1
 8010586:	b9b9      	cbnz	r1, 80105b8 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8010588:	b1b6      	cbz	r6, 80105b8 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801058a:	6823      	ldr	r3, [r4, #0]
 801058c:	686c      	ldr	r4, [r5, #4]
 801058e:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 8010592:	428a      	cmp	r2, r1
 8010594:	4610      	mov	r0, r2
 8010596:	bf38      	it	cc
 8010598:	4608      	movcc	r0, r1
 801059a:	4284      	cmp	r4, r0
 801059c:	d812      	bhi.n	80105c4 <rcl_action_client_wait_set_get_entities_ready+0xac>
 801059e:	2001      	movs	r0, #1
 80105a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105a4:	f640 0036 	movw	r0, #2102	; 0x836
 80105a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105ac:	f7f9 fab0 	bl	8009b10 <rcutils_reset_error>
 80105b0:	f640 0036 	movw	r0, #2102	; 0x836
 80105b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105b8:	200b      	movs	r0, #11
 80105ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105be:	f44f 7061 	mov.w	r0, #900	; 0x384
 80105c2:	4770      	bx	lr
 80105c4:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 80105c8:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 80105cc:	45f0      	cmp	r8, lr
 80105ce:	4640      	mov	r0, r8
 80105d0:	69ec      	ldr	r4, [r5, #28]
 80105d2:	bf38      	it	cc
 80105d4:	4670      	movcc	r0, lr
 80105d6:	4560      	cmp	r0, ip
 80105d8:	bf38      	it	cc
 80105da:	4660      	movcc	r0, ip
 80105dc:	4284      	cmp	r4, r0
 80105de:	d9de      	bls.n	801059e <rcl_action_client_wait_set_get_entities_ready+0x86>
 80105e0:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80105e4:	682d      	ldr	r5, [r5, #0]
 80105e6:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 80105ea:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 80105ee:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80105f2:	1a18      	subs	r0, r3, r0
 80105f4:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 80105f8:	f103 0c0c 	add.w	ip, r3, #12
 80105fc:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8010600:	fab0 f080 	clz	r0, r0
 8010604:	eba5 050c 	sub.w	r5, r5, ip
 8010608:	0940      	lsrs	r0, r0, #5
 801060a:	fab5 f585 	clz	r5, r5
 801060e:	096d      	lsrs	r5, r5, #5
 8010610:	7035      	strb	r5, [r6, #0]
 8010612:	f103 0510 	add.w	r5, r3, #16
 8010616:	1b64      	subs	r4, r4, r5
 8010618:	9d08      	ldr	r5, [sp, #32]
 801061a:	fab4 f484 	clz	r4, r4
 801061e:	0964      	lsrs	r4, r4, #5
 8010620:	703c      	strb	r4, [r7, #0]
 8010622:	1d1c      	adds	r4, r3, #4
 8010624:	3308      	adds	r3, #8
 8010626:	7028      	strb	r0, [r5, #0]
 8010628:	1b09      	subs	r1, r1, r4
 801062a:	2000      	movs	r0, #0
 801062c:	1ad3      	subs	r3, r2, r3
 801062e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010630:	fab1 f181 	clz	r1, r1
 8010634:	fab3 f383 	clz	r3, r3
 8010638:	0949      	lsrs	r1, r1, #5
 801063a:	095b      	lsrs	r3, r3, #5
 801063c:	7011      	strb	r1, [r2, #0]
 801063e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010640:	7013      	strb	r3, [r2, #0]
 8010642:	e7b1      	b.n	80105a8 <rcl_action_client_wait_set_get_entities_ready+0x90>

08010644 <rcl_action_take_goal_request>:
 8010644:	2800      	cmp	r0, #0
 8010646:	d039      	beq.n	80106bc <rcl_action_take_goal_request+0x78>
 8010648:	b570      	push	{r4, r5, r6, lr}
 801064a:	4604      	mov	r4, r0
 801064c:	6800      	ldr	r0, [r0, #0]
 801064e:	b380      	cbz	r0, 80106b2 <rcl_action_take_goal_request+0x6e>
 8010650:	460e      	mov	r6, r1
 8010652:	4615      	mov	r5, r2
 8010654:	f7f8 faee 	bl	8008c34 <rcl_service_is_valid>
 8010658:	b330      	cbz	r0, 80106a8 <rcl_action_take_goal_request+0x64>
 801065a:	6820      	ldr	r0, [r4, #0]
 801065c:	3004      	adds	r0, #4
 801065e:	f7f8 fae9 	bl	8008c34 <rcl_service_is_valid>
 8010662:	b308      	cbz	r0, 80106a8 <rcl_action_take_goal_request+0x64>
 8010664:	6820      	ldr	r0, [r4, #0]
 8010666:	3008      	adds	r0, #8
 8010668:	f7f8 fae4 	bl	8008c34 <rcl_service_is_valid>
 801066c:	b1e0      	cbz	r0, 80106a8 <rcl_action_take_goal_request+0x64>
 801066e:	6820      	ldr	r0, [r4, #0]
 8010670:	300c      	adds	r0, #12
 8010672:	f002 fa51 	bl	8012b18 <rcl_publisher_is_valid>
 8010676:	b1b8      	cbz	r0, 80106a8 <rcl_action_take_goal_request+0x64>
 8010678:	6820      	ldr	r0, [r4, #0]
 801067a:	3010      	adds	r0, #16
 801067c:	f002 fa4c 	bl	8012b18 <rcl_publisher_is_valid>
 8010680:	b190      	cbz	r0, 80106a8 <rcl_action_take_goal_request+0x64>
 8010682:	b1cd      	cbz	r5, 80106b8 <rcl_action_take_goal_request+0x74>
 8010684:	b1c6      	cbz	r6, 80106b8 <rcl_action_take_goal_request+0x74>
 8010686:	462a      	mov	r2, r5
 8010688:	4631      	mov	r1, r6
 801068a:	6820      	ldr	r0, [r4, #0]
 801068c:	f7f8 fa7a 	bl	8008b84 <rcl_take_request>
 8010690:	b148      	cbz	r0, 80106a6 <rcl_action_take_goal_request+0x62>
 8010692:	280a      	cmp	r0, #10
 8010694:	d007      	beq.n	80106a6 <rcl_action_take_goal_request+0x62>
 8010696:	f240 2259 	movw	r2, #601	; 0x259
 801069a:	f640 0399 	movw	r3, #2201	; 0x899
 801069e:	4290      	cmp	r0, r2
 80106a0:	bf0c      	ite	eq
 80106a2:	4618      	moveq	r0, r3
 80106a4:	2001      	movne	r0, #1
 80106a6:	bd70      	pop	{r4, r5, r6, pc}
 80106a8:	f7f9 fa32 	bl	8009b10 <rcutils_reset_error>
 80106ac:	f640 0098 	movw	r0, #2200	; 0x898
 80106b0:	bd70      	pop	{r4, r5, r6, pc}
 80106b2:	f640 0098 	movw	r0, #2200	; 0x898
 80106b6:	bd70      	pop	{r4, r5, r6, pc}
 80106b8:	200b      	movs	r0, #11
 80106ba:	bd70      	pop	{r4, r5, r6, pc}
 80106bc:	f640 0098 	movw	r0, #2200	; 0x898
 80106c0:	4770      	bx	lr
 80106c2:	bf00      	nop

080106c4 <rcl_action_send_goal_response>:
 80106c4:	b388      	cbz	r0, 801072a <rcl_action_send_goal_response+0x66>
 80106c6:	b570      	push	{r4, r5, r6, lr}
 80106c8:	4604      	mov	r4, r0
 80106ca:	6800      	ldr	r0, [r0, #0]
 80106cc:	b340      	cbz	r0, 8010720 <rcl_action_send_goal_response+0x5c>
 80106ce:	460e      	mov	r6, r1
 80106d0:	4615      	mov	r5, r2
 80106d2:	f7f8 faaf 	bl	8008c34 <rcl_service_is_valid>
 80106d6:	b1f0      	cbz	r0, 8010716 <rcl_action_send_goal_response+0x52>
 80106d8:	6820      	ldr	r0, [r4, #0]
 80106da:	3004      	adds	r0, #4
 80106dc:	f7f8 faaa 	bl	8008c34 <rcl_service_is_valid>
 80106e0:	b1c8      	cbz	r0, 8010716 <rcl_action_send_goal_response+0x52>
 80106e2:	6820      	ldr	r0, [r4, #0]
 80106e4:	3008      	adds	r0, #8
 80106e6:	f7f8 faa5 	bl	8008c34 <rcl_service_is_valid>
 80106ea:	b1a0      	cbz	r0, 8010716 <rcl_action_send_goal_response+0x52>
 80106ec:	6820      	ldr	r0, [r4, #0]
 80106ee:	300c      	adds	r0, #12
 80106f0:	f002 fa12 	bl	8012b18 <rcl_publisher_is_valid>
 80106f4:	b178      	cbz	r0, 8010716 <rcl_action_send_goal_response+0x52>
 80106f6:	6820      	ldr	r0, [r4, #0]
 80106f8:	3010      	adds	r0, #16
 80106fa:	f002 fa0d 	bl	8012b18 <rcl_publisher_is_valid>
 80106fe:	b150      	cbz	r0, 8010716 <rcl_action_send_goal_response+0x52>
 8010700:	b18d      	cbz	r5, 8010726 <rcl_action_send_goal_response+0x62>
 8010702:	b186      	cbz	r6, 8010726 <rcl_action_send_goal_response+0x62>
 8010704:	462a      	mov	r2, r5
 8010706:	4631      	mov	r1, r6
 8010708:	6820      	ldr	r0, [r4, #0]
 801070a:	f7f8 fa7b 	bl	8008c04 <rcl_send_response>
 801070e:	3800      	subs	r0, #0
 8010710:	bf18      	it	ne
 8010712:	2001      	movne	r0, #1
 8010714:	bd70      	pop	{r4, r5, r6, pc}
 8010716:	f7f9 f9fb 	bl	8009b10 <rcutils_reset_error>
 801071a:	f640 0098 	movw	r0, #2200	; 0x898
 801071e:	bd70      	pop	{r4, r5, r6, pc}
 8010720:	f640 0098 	movw	r0, #2200	; 0x898
 8010724:	bd70      	pop	{r4, r5, r6, pc}
 8010726:	200b      	movs	r0, #11
 8010728:	bd70      	pop	{r4, r5, r6, pc}
 801072a:	f640 0098 	movw	r0, #2200	; 0x898
 801072e:	4770      	bx	lr

08010730 <rcl_action_take_result_request>:
 8010730:	2800      	cmp	r0, #0
 8010732:	d03a      	beq.n	80107aa <rcl_action_take_result_request+0x7a>
 8010734:	b570      	push	{r4, r5, r6, lr}
 8010736:	4604      	mov	r4, r0
 8010738:	6800      	ldr	r0, [r0, #0]
 801073a:	b388      	cbz	r0, 80107a0 <rcl_action_take_result_request+0x70>
 801073c:	460e      	mov	r6, r1
 801073e:	4615      	mov	r5, r2
 8010740:	f7f8 fa78 	bl	8008c34 <rcl_service_is_valid>
 8010744:	b338      	cbz	r0, 8010796 <rcl_action_take_result_request+0x66>
 8010746:	6820      	ldr	r0, [r4, #0]
 8010748:	3004      	adds	r0, #4
 801074a:	f7f8 fa73 	bl	8008c34 <rcl_service_is_valid>
 801074e:	b310      	cbz	r0, 8010796 <rcl_action_take_result_request+0x66>
 8010750:	6820      	ldr	r0, [r4, #0]
 8010752:	3008      	adds	r0, #8
 8010754:	f7f8 fa6e 	bl	8008c34 <rcl_service_is_valid>
 8010758:	b1e8      	cbz	r0, 8010796 <rcl_action_take_result_request+0x66>
 801075a:	6820      	ldr	r0, [r4, #0]
 801075c:	300c      	adds	r0, #12
 801075e:	f002 f9db 	bl	8012b18 <rcl_publisher_is_valid>
 8010762:	b1c0      	cbz	r0, 8010796 <rcl_action_take_result_request+0x66>
 8010764:	6820      	ldr	r0, [r4, #0]
 8010766:	3010      	adds	r0, #16
 8010768:	f002 f9d6 	bl	8012b18 <rcl_publisher_is_valid>
 801076c:	b198      	cbz	r0, 8010796 <rcl_action_take_result_request+0x66>
 801076e:	b1d5      	cbz	r5, 80107a6 <rcl_action_take_result_request+0x76>
 8010770:	b1ce      	cbz	r6, 80107a6 <rcl_action_take_result_request+0x76>
 8010772:	6820      	ldr	r0, [r4, #0]
 8010774:	462a      	mov	r2, r5
 8010776:	4631      	mov	r1, r6
 8010778:	3008      	adds	r0, #8
 801077a:	f7f8 fa03 	bl	8008b84 <rcl_take_request>
 801077e:	b148      	cbz	r0, 8010794 <rcl_action_take_result_request+0x64>
 8010780:	280a      	cmp	r0, #10
 8010782:	d007      	beq.n	8010794 <rcl_action_take_result_request+0x64>
 8010784:	f240 2259 	movw	r2, #601	; 0x259
 8010788:	f640 0399 	movw	r3, #2201	; 0x899
 801078c:	4290      	cmp	r0, r2
 801078e:	bf0c      	ite	eq
 8010790:	4618      	moveq	r0, r3
 8010792:	2001      	movne	r0, #1
 8010794:	bd70      	pop	{r4, r5, r6, pc}
 8010796:	f7f9 f9bb 	bl	8009b10 <rcutils_reset_error>
 801079a:	f640 0098 	movw	r0, #2200	; 0x898
 801079e:	bd70      	pop	{r4, r5, r6, pc}
 80107a0:	f640 0098 	movw	r0, #2200	; 0x898
 80107a4:	bd70      	pop	{r4, r5, r6, pc}
 80107a6:	200b      	movs	r0, #11
 80107a8:	bd70      	pop	{r4, r5, r6, pc}
 80107aa:	f640 0098 	movw	r0, #2200	; 0x898
 80107ae:	4770      	bx	lr

080107b0 <rcl_action_take_cancel_request>:
 80107b0:	2800      	cmp	r0, #0
 80107b2:	d03a      	beq.n	801082a <rcl_action_take_cancel_request+0x7a>
 80107b4:	b570      	push	{r4, r5, r6, lr}
 80107b6:	4604      	mov	r4, r0
 80107b8:	6800      	ldr	r0, [r0, #0]
 80107ba:	b388      	cbz	r0, 8010820 <rcl_action_take_cancel_request+0x70>
 80107bc:	460e      	mov	r6, r1
 80107be:	4615      	mov	r5, r2
 80107c0:	f7f8 fa38 	bl	8008c34 <rcl_service_is_valid>
 80107c4:	b338      	cbz	r0, 8010816 <rcl_action_take_cancel_request+0x66>
 80107c6:	6820      	ldr	r0, [r4, #0]
 80107c8:	3004      	adds	r0, #4
 80107ca:	f7f8 fa33 	bl	8008c34 <rcl_service_is_valid>
 80107ce:	b310      	cbz	r0, 8010816 <rcl_action_take_cancel_request+0x66>
 80107d0:	6820      	ldr	r0, [r4, #0]
 80107d2:	3008      	adds	r0, #8
 80107d4:	f7f8 fa2e 	bl	8008c34 <rcl_service_is_valid>
 80107d8:	b1e8      	cbz	r0, 8010816 <rcl_action_take_cancel_request+0x66>
 80107da:	6820      	ldr	r0, [r4, #0]
 80107dc:	300c      	adds	r0, #12
 80107de:	f002 f99b 	bl	8012b18 <rcl_publisher_is_valid>
 80107e2:	b1c0      	cbz	r0, 8010816 <rcl_action_take_cancel_request+0x66>
 80107e4:	6820      	ldr	r0, [r4, #0]
 80107e6:	3010      	adds	r0, #16
 80107e8:	f002 f996 	bl	8012b18 <rcl_publisher_is_valid>
 80107ec:	b198      	cbz	r0, 8010816 <rcl_action_take_cancel_request+0x66>
 80107ee:	b1d5      	cbz	r5, 8010826 <rcl_action_take_cancel_request+0x76>
 80107f0:	b1ce      	cbz	r6, 8010826 <rcl_action_take_cancel_request+0x76>
 80107f2:	6820      	ldr	r0, [r4, #0]
 80107f4:	462a      	mov	r2, r5
 80107f6:	4631      	mov	r1, r6
 80107f8:	3004      	adds	r0, #4
 80107fa:	f7f8 f9c3 	bl	8008b84 <rcl_take_request>
 80107fe:	b148      	cbz	r0, 8010814 <rcl_action_take_cancel_request+0x64>
 8010800:	280a      	cmp	r0, #10
 8010802:	d007      	beq.n	8010814 <rcl_action_take_cancel_request+0x64>
 8010804:	f240 2259 	movw	r2, #601	; 0x259
 8010808:	f640 0399 	movw	r3, #2201	; 0x899
 801080c:	4290      	cmp	r0, r2
 801080e:	bf0c      	ite	eq
 8010810:	4618      	moveq	r0, r3
 8010812:	2001      	movne	r0, #1
 8010814:	bd70      	pop	{r4, r5, r6, pc}
 8010816:	f7f9 f97b 	bl	8009b10 <rcutils_reset_error>
 801081a:	f640 0098 	movw	r0, #2200	; 0x898
 801081e:	bd70      	pop	{r4, r5, r6, pc}
 8010820:	f640 0098 	movw	r0, #2200	; 0x898
 8010824:	bd70      	pop	{r4, r5, r6, pc}
 8010826:	200b      	movs	r0, #11
 8010828:	bd70      	pop	{r4, r5, r6, pc}
 801082a:	f640 0098 	movw	r0, #2200	; 0x898
 801082e:	4770      	bx	lr

08010830 <rcl_action_send_cancel_response>:
 8010830:	b390      	cbz	r0, 8010898 <rcl_action_send_cancel_response+0x68>
 8010832:	b570      	push	{r4, r5, r6, lr}
 8010834:	4604      	mov	r4, r0
 8010836:	6800      	ldr	r0, [r0, #0]
 8010838:	b348      	cbz	r0, 801088e <rcl_action_send_cancel_response+0x5e>
 801083a:	460e      	mov	r6, r1
 801083c:	4615      	mov	r5, r2
 801083e:	f7f8 f9f9 	bl	8008c34 <rcl_service_is_valid>
 8010842:	b1f8      	cbz	r0, 8010884 <rcl_action_send_cancel_response+0x54>
 8010844:	6820      	ldr	r0, [r4, #0]
 8010846:	3004      	adds	r0, #4
 8010848:	f7f8 f9f4 	bl	8008c34 <rcl_service_is_valid>
 801084c:	b1d0      	cbz	r0, 8010884 <rcl_action_send_cancel_response+0x54>
 801084e:	6820      	ldr	r0, [r4, #0]
 8010850:	3008      	adds	r0, #8
 8010852:	f7f8 f9ef 	bl	8008c34 <rcl_service_is_valid>
 8010856:	b1a8      	cbz	r0, 8010884 <rcl_action_send_cancel_response+0x54>
 8010858:	6820      	ldr	r0, [r4, #0]
 801085a:	300c      	adds	r0, #12
 801085c:	f002 f95c 	bl	8012b18 <rcl_publisher_is_valid>
 8010860:	b180      	cbz	r0, 8010884 <rcl_action_send_cancel_response+0x54>
 8010862:	6820      	ldr	r0, [r4, #0]
 8010864:	3010      	adds	r0, #16
 8010866:	f002 f957 	bl	8012b18 <rcl_publisher_is_valid>
 801086a:	b158      	cbz	r0, 8010884 <rcl_action_send_cancel_response+0x54>
 801086c:	b195      	cbz	r5, 8010894 <rcl_action_send_cancel_response+0x64>
 801086e:	b18e      	cbz	r6, 8010894 <rcl_action_send_cancel_response+0x64>
 8010870:	6820      	ldr	r0, [r4, #0]
 8010872:	462a      	mov	r2, r5
 8010874:	4631      	mov	r1, r6
 8010876:	3004      	adds	r0, #4
 8010878:	f7f8 f9c4 	bl	8008c04 <rcl_send_response>
 801087c:	3800      	subs	r0, #0
 801087e:	bf18      	it	ne
 8010880:	2001      	movne	r0, #1
 8010882:	bd70      	pop	{r4, r5, r6, pc}
 8010884:	f7f9 f944 	bl	8009b10 <rcutils_reset_error>
 8010888:	f640 0098 	movw	r0, #2200	; 0x898
 801088c:	bd70      	pop	{r4, r5, r6, pc}
 801088e:	f640 0098 	movw	r0, #2200	; 0x898
 8010892:	bd70      	pop	{r4, r5, r6, pc}
 8010894:	200b      	movs	r0, #11
 8010896:	bd70      	pop	{r4, r5, r6, pc}
 8010898:	f640 0098 	movw	r0, #2200	; 0x898
 801089c:	4770      	bx	lr
 801089e:	bf00      	nop

080108a0 <rcl_action_wait_set_add_action_server>:
 80108a0:	2800      	cmp	r0, #0
 80108a2:	d04d      	beq.n	8010940 <rcl_action_wait_set_add_action_server+0xa0>
 80108a4:	b570      	push	{r4, r5, r6, lr}
 80108a6:	460c      	mov	r4, r1
 80108a8:	b159      	cbz	r1, 80108c2 <rcl_action_wait_set_add_action_server+0x22>
 80108aa:	4605      	mov	r5, r0
 80108ac:	6808      	ldr	r0, [r1, #0]
 80108ae:	b140      	cbz	r0, 80108c2 <rcl_action_wait_set_add_action_server+0x22>
 80108b0:	4616      	mov	r6, r2
 80108b2:	f7f8 f9bf 	bl	8008c34 <rcl_service_is_valid>
 80108b6:	b120      	cbz	r0, 80108c2 <rcl_action_wait_set_add_action_server+0x22>
 80108b8:	6820      	ldr	r0, [r4, #0]
 80108ba:	3004      	adds	r0, #4
 80108bc:	f7f8 f9ba 	bl	8008c34 <rcl_service_is_valid>
 80108c0:	b910      	cbnz	r0, 80108c8 <rcl_action_wait_set_add_action_server+0x28>
 80108c2:	f640 0098 	movw	r0, #2200	; 0x898
 80108c6:	bd70      	pop	{r4, r5, r6, pc}
 80108c8:	6820      	ldr	r0, [r4, #0]
 80108ca:	3008      	adds	r0, #8
 80108cc:	f7f8 f9b2 	bl	8008c34 <rcl_service_is_valid>
 80108d0:	2800      	cmp	r0, #0
 80108d2:	d0f6      	beq.n	80108c2 <rcl_action_wait_set_add_action_server+0x22>
 80108d4:	6820      	ldr	r0, [r4, #0]
 80108d6:	300c      	adds	r0, #12
 80108d8:	f002 f936 	bl	8012b48 <rcl_publisher_is_valid_except_context>
 80108dc:	2800      	cmp	r0, #0
 80108de:	d0f0      	beq.n	80108c2 <rcl_action_wait_set_add_action_server+0x22>
 80108e0:	6820      	ldr	r0, [r4, #0]
 80108e2:	3010      	adds	r0, #16
 80108e4:	f002 f930 	bl	8012b48 <rcl_publisher_is_valid_except_context>
 80108e8:	2800      	cmp	r0, #0
 80108ea:	d0ea      	beq.n	80108c2 <rcl_action_wait_set_add_action_server+0x22>
 80108ec:	6821      	ldr	r1, [r4, #0]
 80108ee:	4628      	mov	r0, r5
 80108f0:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 80108f4:	f7ff fad4 	bl	800fea0 <rcl_wait_set_add_service>
 80108f8:	2800      	cmp	r0, #0
 80108fa:	d1e4      	bne.n	80108c6 <rcl_action_wait_set_add_action_server+0x26>
 80108fc:	6821      	ldr	r1, [r4, #0]
 80108fe:	4628      	mov	r0, r5
 8010900:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 8010904:	3104      	adds	r1, #4
 8010906:	f7ff facb 	bl	800fea0 <rcl_wait_set_add_service>
 801090a:	2800      	cmp	r0, #0
 801090c:	d1db      	bne.n	80108c6 <rcl_action_wait_set_add_action_server+0x26>
 801090e:	6821      	ldr	r1, [r4, #0]
 8010910:	4628      	mov	r0, r5
 8010912:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 8010916:	3108      	adds	r1, #8
 8010918:	f7ff fac2 	bl	800fea0 <rcl_wait_set_add_service>
 801091c:	2800      	cmp	r0, #0
 801091e:	d1d2      	bne.n	80108c6 <rcl_action_wait_set_add_action_server+0x26>
 8010920:	6821      	ldr	r1, [r4, #0]
 8010922:	4628      	mov	r0, r5
 8010924:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 8010928:	3114      	adds	r1, #20
 801092a:	f7ff fa5d 	bl	800fde8 <rcl_wait_set_add_timer>
 801092e:	2800      	cmp	r0, #0
 8010930:	d1c9      	bne.n	80108c6 <rcl_action_wait_set_add_action_server+0x26>
 8010932:	2e00      	cmp	r6, #0
 8010934:	d0c7      	beq.n	80108c6 <rcl_action_wait_set_add_action_server+0x26>
 8010936:	6823      	ldr	r3, [r4, #0]
 8010938:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801093c:	6033      	str	r3, [r6, #0]
 801093e:	bd70      	pop	{r4, r5, r6, pc}
 8010940:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010944:	4770      	bx	lr
 8010946:	bf00      	nop

08010948 <rcl_action_server_wait_set_get_entities_ready>:
 8010948:	2800      	cmp	r0, #0
 801094a:	d067      	beq.n	8010a1c <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801094c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010950:	460c      	mov	r4, r1
 8010952:	b161      	cbz	r1, 801096e <rcl_action_server_wait_set_get_entities_ready+0x26>
 8010954:	4605      	mov	r5, r0
 8010956:	6808      	ldr	r0, [r1, #0]
 8010958:	b148      	cbz	r0, 801096e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801095a:	4616      	mov	r6, r2
 801095c:	4698      	mov	r8, r3
 801095e:	f7f8 f969 	bl	8008c34 <rcl_service_is_valid>
 8010962:	b120      	cbz	r0, 801096e <rcl_action_server_wait_set_get_entities_ready+0x26>
 8010964:	6820      	ldr	r0, [r4, #0]
 8010966:	3004      	adds	r0, #4
 8010968:	f7f8 f964 	bl	8008c34 <rcl_service_is_valid>
 801096c:	b918      	cbnz	r0, 8010976 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801096e:	f640 0098 	movw	r0, #2200	; 0x898
 8010972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010976:	6820      	ldr	r0, [r4, #0]
 8010978:	3008      	adds	r0, #8
 801097a:	f7f8 f95b 	bl	8008c34 <rcl_service_is_valid>
 801097e:	2800      	cmp	r0, #0
 8010980:	d0f5      	beq.n	801096e <rcl_action_server_wait_set_get_entities_ready+0x26>
 8010982:	6820      	ldr	r0, [r4, #0]
 8010984:	300c      	adds	r0, #12
 8010986:	f002 f8df 	bl	8012b48 <rcl_publisher_is_valid_except_context>
 801098a:	2800      	cmp	r0, #0
 801098c:	d0ef      	beq.n	801096e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801098e:	6820      	ldr	r0, [r4, #0]
 8010990:	3010      	adds	r0, #16
 8010992:	f002 f8d9 	bl	8012b48 <rcl_publisher_is_valid_except_context>
 8010996:	2800      	cmp	r0, #0
 8010998:	d0e9      	beq.n	801096e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801099a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801099e:	2a00      	cmp	r2, #0
 80109a0:	bf18      	it	ne
 80109a2:	2b00      	cmpne	r3, #0
 80109a4:	bf0c      	ite	eq
 80109a6:	2101      	moveq	r1, #1
 80109a8:	2100      	movne	r1, #0
 80109aa:	f1b8 0f00 	cmp.w	r8, #0
 80109ae:	bf08      	it	eq
 80109b0:	f041 0101 	orreq.w	r1, r1, #1
 80109b4:	bba9      	cbnz	r1, 8010a22 <rcl_action_server_wait_set_get_entities_ready+0xda>
 80109b6:	b3a6      	cbz	r6, 8010a22 <rcl_action_server_wait_set_get_entities_ready+0xda>
 80109b8:	6821      	ldr	r1, [r4, #0]
 80109ba:	2000      	movs	r0, #0
 80109bc:	692c      	ldr	r4, [r5, #16]
 80109be:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 80109c2:	6a2f      	ldr	r7, [r5, #32]
 80109c4:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80109c8:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 80109cc:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 80109d0:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 80109d4:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 80109d8:	1a64      	subs	r4, r4, r1
 80109da:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 80109de:	fab4 f484 	clz	r4, r4
 80109e2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80109e6:	0964      	lsrs	r4, r4, #5
 80109e8:	7034      	strb	r4, [r6, #0]
 80109ea:	1d0c      	adds	r4, r1, #4
 80109ec:	1b2c      	subs	r4, r5, r4
 80109ee:	fab4 f484 	clz	r4, r4
 80109f2:	0964      	lsrs	r4, r4, #5
 80109f4:	f888 4000 	strb.w	r4, [r8]
 80109f8:	f101 0408 	add.w	r4, r1, #8
 80109fc:	1b1b      	subs	r3, r3, r4
 80109fe:	9c06      	ldr	r4, [sp, #24]
 8010a00:	fab3 f383 	clz	r3, r3
 8010a04:	095b      	lsrs	r3, r3, #5
 8010a06:	7023      	strb	r3, [r4, #0]
 8010a08:	f101 0314 	add.w	r3, r1, #20
 8010a0c:	1ad3      	subs	r3, r2, r3
 8010a0e:	9a07      	ldr	r2, [sp, #28]
 8010a10:	fab3 f383 	clz	r3, r3
 8010a14:	095b      	lsrs	r3, r3, #5
 8010a16:	7013      	strb	r3, [r2, #0]
 8010a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a1c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010a20:	4770      	bx	lr
 8010a22:	200b      	movs	r0, #11
 8010a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010a28 <_execute_event_handler>:
 8010a28:	2002      	movs	r0, #2
 8010a2a:	4770      	bx	lr

08010a2c <_cancel_goal_event_handler>:
 8010a2c:	2003      	movs	r0, #3
 8010a2e:	4770      	bx	lr

08010a30 <_succeed_event_handler>:
 8010a30:	2004      	movs	r0, #4
 8010a32:	4770      	bx	lr

08010a34 <_abort_event_handler>:
 8010a34:	2006      	movs	r0, #6
 8010a36:	4770      	bx	lr

08010a38 <_canceled_event_handler>:
 8010a38:	2005      	movs	r0, #5
 8010a3a:	4770      	bx	lr

08010a3c <rcl_action_transition_goal_state>:
 8010a3c:	b2c2      	uxtb	r2, r0
 8010a3e:	2a06      	cmp	r2, #6
 8010a40:	d810      	bhi.n	8010a64 <rcl_action_transition_goal_state+0x28>
 8010a42:	2904      	cmp	r1, #4
 8010a44:	d80e      	bhi.n	8010a64 <rcl_action_transition_goal_state+0x28>
 8010a46:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8010a4a:	b410      	push	{r4}
 8010a4c:	1853      	adds	r3, r2, r1
 8010a4e:	4c06      	ldr	r4, [pc, #24]	; (8010a68 <rcl_action_transition_goal_state+0x2c>)
 8010a50:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8010a54:	b113      	cbz	r3, 8010a5c <rcl_action_transition_goal_state+0x20>
 8010a56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a5a:	4718      	bx	r3
 8010a5c:	2000      	movs	r0, #0
 8010a5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a62:	4770      	bx	lr
 8010a64:	2000      	movs	r0, #0
 8010a66:	4770      	bx	lr
 8010a68:	08015440 	.word	0x08015440

08010a6c <rcl_action_get_zero_initialized_cancel_response>:
 8010a6c:	b510      	push	{r4, lr}
 8010a6e:	4c07      	ldr	r4, [pc, #28]	; (8010a8c <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8010a70:	4686      	mov	lr, r0
 8010a72:	4684      	mov	ip, r0
 8010a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010a76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010a7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a80:	6823      	ldr	r3, [r4, #0]
 8010a82:	4670      	mov	r0, lr
 8010a84:	f8cc 3000 	str.w	r3, [ip]
 8010a88:	bd10      	pop	{r4, pc}
 8010a8a:	bf00      	nop
 8010a8c:	080154cc 	.word	0x080154cc

08010a90 <rclc_action_send_result_request>:
 8010a90:	b1d0      	cbz	r0, 8010ac8 <rclc_action_send_result_request+0x38>
 8010a92:	4684      	mov	ip, r0
 8010a94:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8010a98:	b500      	push	{lr}
 8010a9a:	b087      	sub	sp, #28
 8010a9c:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8010aa0:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8010aa4:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8010aa8:	f10d 0e08 	add.w	lr, sp, #8
 8010aac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010ab0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8010ab4:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 8010ab8:	a902      	add	r1, sp, #8
 8010aba:	3010      	adds	r0, #16
 8010abc:	f7ff fbcc 	bl	8010258 <rcl_action_send_result_request>
 8010ac0:	b920      	cbnz	r0, 8010acc <rclc_action_send_result_request+0x3c>
 8010ac2:	b007      	add	sp, #28
 8010ac4:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ac8:	200b      	movs	r0, #11
 8010aca:	4770      	bx	lr
 8010acc:	9001      	str	r0, [sp, #4]
 8010ace:	f7f9 f81f 	bl	8009b10 <rcutils_reset_error>
 8010ad2:	9801      	ldr	r0, [sp, #4]
 8010ad4:	b007      	add	sp, #28
 8010ad6:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ada:	bf00      	nop

08010adc <rclc_action_take_goal_handle>:
 8010adc:	b160      	cbz	r0, 8010af8 <rclc_action_take_goal_handle+0x1c>
 8010ade:	6883      	ldr	r3, [r0, #8]
 8010ae0:	b143      	cbz	r3, 8010af4 <rclc_action_take_goal_handle+0x18>
 8010ae2:	6819      	ldr	r1, [r3, #0]
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	6081      	str	r1, [r0, #8]
 8010ae8:	721a      	strb	r2, [r3, #8]
 8010aea:	68c1      	ldr	r1, [r0, #12]
 8010aec:	621a      	str	r2, [r3, #32]
 8010aee:	849a      	strh	r2, [r3, #36]	; 0x24
 8010af0:	6019      	str	r1, [r3, #0]
 8010af2:	60c3      	str	r3, [r0, #12]
 8010af4:	4618      	mov	r0, r3
 8010af6:	4770      	bx	lr
 8010af8:	4603      	mov	r3, r0
 8010afa:	e7fb      	b.n	8010af4 <rclc_action_take_goal_handle+0x18>

08010afc <rclc_action_remove_used_goal_handle>:
 8010afc:	b180      	cbz	r0, 8010b20 <rclc_action_remove_used_goal_handle+0x24>
 8010afe:	b179      	cbz	r1, 8010b20 <rclc_action_remove_used_goal_handle+0x24>
 8010b00:	68c3      	ldr	r3, [r0, #12]
 8010b02:	4299      	cmp	r1, r3
 8010b04:	d00d      	beq.n	8010b22 <rclc_action_remove_used_goal_handle+0x26>
 8010b06:	b12b      	cbz	r3, 8010b14 <rclc_action_remove_used_goal_handle+0x18>
 8010b08:	681a      	ldr	r2, [r3, #0]
 8010b0a:	4291      	cmp	r1, r2
 8010b0c:	d003      	beq.n	8010b16 <rclc_action_remove_used_goal_handle+0x1a>
 8010b0e:	4613      	mov	r3, r2
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d1f9      	bne.n	8010b08 <rclc_action_remove_used_goal_handle+0xc>
 8010b14:	4770      	bx	lr
 8010b16:	680a      	ldr	r2, [r1, #0]
 8010b18:	601a      	str	r2, [r3, #0]
 8010b1a:	6883      	ldr	r3, [r0, #8]
 8010b1c:	600b      	str	r3, [r1, #0]
 8010b1e:	6081      	str	r1, [r0, #8]
 8010b20:	4770      	bx	lr
 8010b22:	680b      	ldr	r3, [r1, #0]
 8010b24:	60c3      	str	r3, [r0, #12]
 8010b26:	e7f8      	b.n	8010b1a <rclc_action_remove_used_goal_handle+0x1e>

08010b28 <rclc_action_find_goal_handle_by_uuid>:
 8010b28:	b538      	push	{r3, r4, r5, lr}
 8010b2a:	b181      	cbz	r1, 8010b4e <rclc_action_find_goal_handle_by_uuid+0x26>
 8010b2c:	b178      	cbz	r0, 8010b4e <rclc_action_find_goal_handle_by_uuid+0x26>
 8010b2e:	68c4      	ldr	r4, [r0, #12]
 8010b30:	460d      	mov	r5, r1
 8010b32:	b914      	cbnz	r4, 8010b3a <rclc_action_find_goal_handle_by_uuid+0x12>
 8010b34:	e009      	b.n	8010b4a <rclc_action_find_goal_handle_by_uuid+0x22>
 8010b36:	6824      	ldr	r4, [r4, #0]
 8010b38:	b13c      	cbz	r4, 8010b4a <rclc_action_find_goal_handle_by_uuid+0x22>
 8010b3a:	f104 0009 	add.w	r0, r4, #9
 8010b3e:	2210      	movs	r2, #16
 8010b40:	4629      	mov	r1, r5
 8010b42:	f002 fe35 	bl	80137b0 <memcmp>
 8010b46:	2800      	cmp	r0, #0
 8010b48:	d1f5      	bne.n	8010b36 <rclc_action_find_goal_handle_by_uuid+0xe>
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	bd38      	pop	{r3, r4, r5, pc}
 8010b4e:	2400      	movs	r4, #0
 8010b50:	4620      	mov	r0, r4
 8010b52:	bd38      	pop	{r3, r4, r5, pc}

08010b54 <rclc_action_find_first_handle_by_status>:
 8010b54:	b140      	cbz	r0, 8010b68 <rclc_action_find_first_handle_by_status+0x14>
 8010b56:	68c0      	ldr	r0, [r0, #12]
 8010b58:	b910      	cbnz	r0, 8010b60 <rclc_action_find_first_handle_by_status+0xc>
 8010b5a:	e005      	b.n	8010b68 <rclc_action_find_first_handle_by_status+0x14>
 8010b5c:	6800      	ldr	r0, [r0, #0]
 8010b5e:	b118      	cbz	r0, 8010b68 <rclc_action_find_first_handle_by_status+0x14>
 8010b60:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8010b64:	428b      	cmp	r3, r1
 8010b66:	d1f9      	bne.n	8010b5c <rclc_action_find_first_handle_by_status+0x8>
 8010b68:	4770      	bx	lr
 8010b6a:	bf00      	nop

08010b6c <rclc_action_find_first_terminated_handle>:
 8010b6c:	b140      	cbz	r0, 8010b80 <rclc_action_find_first_terminated_handle+0x14>
 8010b6e:	68c0      	ldr	r0, [r0, #12]
 8010b70:	b910      	cbnz	r0, 8010b78 <rclc_action_find_first_terminated_handle+0xc>
 8010b72:	e005      	b.n	8010b80 <rclc_action_find_first_terminated_handle+0x14>
 8010b74:	6800      	ldr	r0, [r0, #0]
 8010b76:	b118      	cbz	r0, 8010b80 <rclc_action_find_first_terminated_handle+0x14>
 8010b78:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8010b7c:	2b03      	cmp	r3, #3
 8010b7e:	ddf9      	ble.n	8010b74 <rclc_action_find_first_terminated_handle+0x8>
 8010b80:	4770      	bx	lr
 8010b82:	bf00      	nop

08010b84 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8010b84:	b170      	cbz	r0, 8010ba4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8010b86:	68c0      	ldr	r0, [r0, #12]
 8010b88:	b160      	cbz	r0, 8010ba4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8010b8a:	b410      	push	{r4}
 8010b8c:	e001      	b.n	8010b92 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8010b8e:	6800      	ldr	r0, [r0, #0]
 8010b90:	b128      	cbz	r0, 8010b9e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8010b92:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 8010b96:	4299      	cmp	r1, r3
 8010b98:	bf08      	it	eq
 8010b9a:	4294      	cmpeq	r4, r2
 8010b9c:	d1f7      	bne.n	8010b8e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8010b9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ba2:	4770      	bx	lr
 8010ba4:	4770      	bx	lr
 8010ba6:	bf00      	nop

08010ba8 <rclc_action_find_handle_by_result_request_sequence_number>:
 8010ba8:	b170      	cbz	r0, 8010bc8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8010baa:	68c0      	ldr	r0, [r0, #12]
 8010bac:	b160      	cbz	r0, 8010bc8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8010bae:	b410      	push	{r4}
 8010bb0:	e001      	b.n	8010bb6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8010bb2:	6800      	ldr	r0, [r0, #0]
 8010bb4:	b128      	cbz	r0, 8010bc2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8010bb6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 8010bba:	4299      	cmp	r1, r3
 8010bbc:	bf08      	it	eq
 8010bbe:	4294      	cmpeq	r4, r2
 8010bc0:	d1f7      	bne.n	8010bb2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8010bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bc6:	4770      	bx	lr
 8010bc8:	4770      	bx	lr
 8010bca:	bf00      	nop

08010bcc <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8010bcc:	b170      	cbz	r0, 8010bec <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8010bce:	68c0      	ldr	r0, [r0, #12]
 8010bd0:	b160      	cbz	r0, 8010bec <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8010bd2:	b410      	push	{r4}
 8010bd4:	e001      	b.n	8010bda <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8010bd6:	6800      	ldr	r0, [r0, #0]
 8010bd8:	b128      	cbz	r0, 8010be6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8010bda:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 8010bde:	4299      	cmp	r1, r3
 8010be0:	bf08      	it	eq
 8010be2:	4294      	cmpeq	r4, r2
 8010be4:	d1f7      	bne.n	8010bd6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8010be6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bea:	4770      	bx	lr
 8010bec:	4770      	bx	lr
 8010bee:	bf00      	nop

08010bf0 <rclc_action_find_first_handle_with_goal_response>:
 8010bf0:	b140      	cbz	r0, 8010c04 <rclc_action_find_first_handle_with_goal_response+0x14>
 8010bf2:	68c0      	ldr	r0, [r0, #12]
 8010bf4:	b910      	cbnz	r0, 8010bfc <rclc_action_find_first_handle_with_goal_response+0xc>
 8010bf6:	e005      	b.n	8010c04 <rclc_action_find_first_handle_with_goal_response+0x14>
 8010bf8:	6800      	ldr	r0, [r0, #0]
 8010bfa:	b118      	cbz	r0, 8010c04 <rclc_action_find_first_handle_with_goal_response+0x14>
 8010bfc:	f890 3020 	ldrb.w	r3, [r0, #32]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d0f9      	beq.n	8010bf8 <rclc_action_find_first_handle_with_goal_response+0x8>
 8010c04:	4770      	bx	lr
 8010c06:	bf00      	nop

08010c08 <rclc_action_find_first_handle_with_result_response>:
 8010c08:	b140      	cbz	r0, 8010c1c <rclc_action_find_first_handle_with_result_response+0x14>
 8010c0a:	68c0      	ldr	r0, [r0, #12]
 8010c0c:	b910      	cbnz	r0, 8010c14 <rclc_action_find_first_handle_with_result_response+0xc>
 8010c0e:	e005      	b.n	8010c1c <rclc_action_find_first_handle_with_result_response+0x14>
 8010c10:	6800      	ldr	r0, [r0, #0]
 8010c12:	b118      	cbz	r0, 8010c1c <rclc_action_find_first_handle_with_result_response+0x14>
 8010c14:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d0f9      	beq.n	8010c10 <rclc_action_find_first_handle_with_result_response+0x8>
 8010c1c:	4770      	bx	lr
 8010c1e:	bf00      	nop

08010c20 <rclc_action_server_response_goal_request>:
 8010c20:	b198      	cbz	r0, 8010c4a <rclc_action_server_response_goal_request+0x2a>
 8010c22:	2200      	movs	r2, #0
 8010c24:	460b      	mov	r3, r1
 8010c26:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8010c2a:	b510      	push	{r4, lr}
 8010c2c:	6844      	ldr	r4, [r0, #4]
 8010c2e:	b086      	sub	sp, #24
 8010c30:	f104 0010 	add.w	r0, r4, #16
 8010c34:	9205      	str	r2, [sp, #20]
 8010c36:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8010c3a:	aa03      	add	r2, sp, #12
 8010c3c:	f88d 300c 	strb.w	r3, [sp, #12]
 8010c40:	f7ff fd40 	bl	80106c4 <rcl_action_send_goal_response>
 8010c44:	b918      	cbnz	r0, 8010c4e <rclc_action_server_response_goal_request+0x2e>
 8010c46:	b006      	add	sp, #24
 8010c48:	bd10      	pop	{r4, pc}
 8010c4a:	200b      	movs	r0, #11
 8010c4c:	4770      	bx	lr
 8010c4e:	9001      	str	r0, [sp, #4]
 8010c50:	f7f8 ff5e 	bl	8009b10 <rcutils_reset_error>
 8010c54:	9801      	ldr	r0, [sp, #4]
 8010c56:	b006      	add	sp, #24
 8010c58:	bd10      	pop	{r4, pc}
 8010c5a:	bf00      	nop
 8010c5c:	0000      	movs	r0, r0
	...

08010c60 <rclc_action_server_goal_cancel_accept>:
 8010c60:	b310      	cbz	r0, 8010ca8 <rclc_action_server_goal_cancel_accept+0x48>
 8010c62:	b510      	push	{r4, lr}
 8010c64:	b090      	sub	sp, #64	; 0x40
 8010c66:	4604      	mov	r4, r0
 8010c68:	a806      	add	r0, sp, #24
 8010c6a:	f7ff feff 	bl	8010a6c <rcl_action_get_zero_initialized_cancel_response>
 8010c6e:	2300      	movs	r3, #0
 8010c70:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8010c74:	46ec      	mov	ip, sp
 8010c76:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8010c7a:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8010c7e:	f88d 3018 	strb.w	r3, [sp, #24]
 8010c82:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8010c86:	f8cd d01c 	str.w	sp, [sp, #28]
 8010c8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010c8e:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8010cb0 <rclc_action_server_goal_cancel_accept+0x50>
 8010c92:	6860      	ldr	r0, [r4, #4]
 8010c94:	aa06      	add	r2, sp, #24
 8010c96:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8010c9a:	3010      	adds	r0, #16
 8010c9c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8010ca0:	f7ff fdc6 	bl	8010830 <rcl_action_send_cancel_response>
 8010ca4:	b010      	add	sp, #64	; 0x40
 8010ca6:	bd10      	pop	{r4, pc}
 8010ca8:	200b      	movs	r0, #11
 8010caa:	4770      	bx	lr
 8010cac:	f3af 8000 	nop.w
 8010cb0:	00000001 	.word	0x00000001
 8010cb4:	00000001 	.word	0x00000001

08010cb8 <rclc_action_server_goal_cancel_reject>:
 8010cb8:	b082      	sub	sp, #8
 8010cba:	b530      	push	{r4, r5, lr}
 8010cbc:	b08b      	sub	sp, #44	; 0x2c
 8010cbe:	ac0e      	add	r4, sp, #56	; 0x38
 8010cc0:	e884 000c 	stmia.w	r4, {r2, r3}
 8010cc4:	b188      	cbz	r0, 8010cea <rclc_action_server_goal_cancel_reject+0x32>
 8010cc6:	4604      	mov	r4, r0
 8010cc8:	a801      	add	r0, sp, #4
 8010cca:	460d      	mov	r5, r1
 8010ccc:	f7ff fece 	bl	8010a6c <rcl_action_get_zero_initialized_cancel_response>
 8010cd0:	aa01      	add	r2, sp, #4
 8010cd2:	a90e      	add	r1, sp, #56	; 0x38
 8010cd4:	f104 0010 	add.w	r0, r4, #16
 8010cd8:	f88d 5004 	strb.w	r5, [sp, #4]
 8010cdc:	f7ff fda8 	bl	8010830 <rcl_action_send_cancel_response>
 8010ce0:	b00b      	add	sp, #44	; 0x2c
 8010ce2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010ce6:	b002      	add	sp, #8
 8010ce8:	4770      	bx	lr
 8010cea:	200b      	movs	r0, #11
 8010cec:	b00b      	add	sp, #44	; 0x2c
 8010cee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010cf2:	b002      	add	sp, #8
 8010cf4:	4770      	bx	lr
 8010cf6:	bf00      	nop

08010cf8 <__atomic_load_8>:
 8010cf8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8010cfc:	4a16      	ldr	r2, [pc, #88]	; (8010d58 <__atomic_load_8+0x60>)
 8010cfe:	4b17      	ldr	r3, [pc, #92]	; (8010d5c <__atomic_load_8+0x64>)
 8010d00:	f04f 0c01 	mov.w	ip, #1
 8010d04:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8010d08:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8010d0c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8010d10:	fb02 f101 	mul.w	r1, r2, r1
 8010d14:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8010d18:	fba3 2301 	umull	r2, r3, r3, r1
 8010d1c:	091b      	lsrs	r3, r3, #4
 8010d1e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8010d22:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8010d26:	b4d0      	push	{r4, r6, r7}
 8010d28:	1ac9      	subs	r1, r1, r3
 8010d2a:	4c0d      	ldr	r4, [pc, #52]	; (8010d60 <__atomic_load_8+0x68>)
 8010d2c:	1862      	adds	r2, r4, r1
 8010d2e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8010d32:	e8c2 cf46 	strexb	r6, ip, [r2]
 8010d36:	2e00      	cmp	r6, #0
 8010d38:	d1f9      	bne.n	8010d2e <__atomic_load_8+0x36>
 8010d3a:	b2db      	uxtb	r3, r3
 8010d3c:	f3bf 8f5b 	dmb	ish
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d1f4      	bne.n	8010d2e <__atomic_load_8+0x36>
 8010d44:	e9d0 6700 	ldrd	r6, r7, [r0]
 8010d48:	f3bf 8f5b 	dmb	ish
 8010d4c:	5463      	strb	r3, [r4, r1]
 8010d4e:	4630      	mov	r0, r6
 8010d50:	4639      	mov	r1, r7
 8010d52:	bcd0      	pop	{r4, r6, r7}
 8010d54:	4770      	bx	lr
 8010d56:	bf00      	nop
 8010d58:	27d4eb2d 	.word	0x27d4eb2d
 8010d5c:	b21642c9 	.word	0xb21642c9
 8010d60:	20010e00 	.word	0x20010e00

08010d64 <__atomic_store_8>:
 8010d64:	b570      	push	{r4, r5, r6, lr}
 8010d66:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8010d6a:	4916      	ldr	r1, [pc, #88]	; (8010dc4 <__atomic_store_8+0x60>)
 8010d6c:	4c16      	ldr	r4, [pc, #88]	; (8010dc8 <__atomic_store_8+0x64>)
 8010d6e:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 8010d72:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8010d76:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8010d7a:	fb01 fe0e 	mul.w	lr, r1, lr
 8010d7e:	4913      	ldr	r1, [pc, #76]	; (8010dcc <__atomic_store_8+0x68>)
 8010d80:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8010d84:	fba1 510e 	umull	r5, r1, r1, lr
 8010d88:	f04f 0501 	mov.w	r5, #1
 8010d8c:	0909      	lsrs	r1, r1, #4
 8010d8e:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8010d92:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8010d96:	ebae 0e01 	sub.w	lr, lr, r1
 8010d9a:	eb04 0c0e 	add.w	ip, r4, lr
 8010d9e:	e8dc 1f4f 	ldrexb	r1, [ip]
 8010da2:	e8cc 5f46 	strexb	r6, r5, [ip]
 8010da6:	2e00      	cmp	r6, #0
 8010da8:	d1f9      	bne.n	8010d9e <__atomic_store_8+0x3a>
 8010daa:	b2c9      	uxtb	r1, r1
 8010dac:	f3bf 8f5b 	dmb	ish
 8010db0:	2900      	cmp	r1, #0
 8010db2:	d1f4      	bne.n	8010d9e <__atomic_store_8+0x3a>
 8010db4:	e9c0 2300 	strd	r2, r3, [r0]
 8010db8:	f3bf 8f5b 	dmb	ish
 8010dbc:	f804 100e 	strb.w	r1, [r4, lr]
 8010dc0:	bd70      	pop	{r4, r5, r6, pc}
 8010dc2:	bf00      	nop
 8010dc4:	27d4eb2d 	.word	0x27d4eb2d
 8010dc8:	20010e00 	.word	0x20010e00
 8010dcc:	b21642c9 	.word	0xb21642c9

08010dd0 <__atomic_exchange_8>:
 8010dd0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8010dd4:	4917      	ldr	r1, [pc, #92]	; (8010e34 <__atomic_exchange_8+0x64>)
 8010dd6:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 8010dda:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8010dde:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8010de2:	fb01 fc0c 	mul.w	ip, r1, ip
 8010de6:	4914      	ldr	r1, [pc, #80]	; (8010e38 <__atomic_exchange_8+0x68>)
 8010de8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8010dec:	b570      	push	{r4, r5, r6, lr}
 8010dee:	4686      	mov	lr, r0
 8010df0:	fba1 010c 	umull	r0, r1, r1, ip
 8010df4:	4d11      	ldr	r5, [pc, #68]	; (8010e3c <__atomic_exchange_8+0x6c>)
 8010df6:	f04f 0001 	mov.w	r0, #1
 8010dfa:	0909      	lsrs	r1, r1, #4
 8010dfc:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8010e00:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8010e04:	ebac 0c01 	sub.w	ip, ip, r1
 8010e08:	eb05 010c 	add.w	r1, r5, ip
 8010e0c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8010e10:	e8c1 0f46 	strexb	r6, r0, [r1]
 8010e14:	2e00      	cmp	r6, #0
 8010e16:	d1f9      	bne.n	8010e0c <__atomic_exchange_8+0x3c>
 8010e18:	b2e4      	uxtb	r4, r4
 8010e1a:	f3bf 8f5b 	dmb	ish
 8010e1e:	2c00      	cmp	r4, #0
 8010e20:	d1f4      	bne.n	8010e0c <__atomic_exchange_8+0x3c>
 8010e22:	e9de 0100 	ldrd	r0, r1, [lr]
 8010e26:	e9ce 2300 	strd	r2, r3, [lr]
 8010e2a:	f3bf 8f5b 	dmb	ish
 8010e2e:	f805 400c 	strb.w	r4, [r5, ip]
 8010e32:	bd70      	pop	{r4, r5, r6, pc}
 8010e34:	27d4eb2d 	.word	0x27d4eb2d
 8010e38:	b21642c9 	.word	0xb21642c9
 8010e3c:	20010e00 	.word	0x20010e00

08010e40 <rcutils_is_directory>:
 8010e40:	2000      	movs	r0, #0
 8010e42:	4770      	bx	lr

08010e44 <rcutils_join_path>:
 8010e44:	b082      	sub	sp, #8
 8010e46:	2000      	movs	r0, #0
 8010e48:	e88d 000c 	stmia.w	sp, {r2, r3}
 8010e4c:	b002      	add	sp, #8
 8010e4e:	4770      	bx	lr

08010e50 <rcutils_to_native_path>:
 8010e50:	b084      	sub	sp, #16
 8010e52:	2000      	movs	r0, #0
 8010e54:	f10d 0c04 	add.w	ip, sp, #4
 8010e58:	b004      	add	sp, #16
 8010e5a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8010e5e:	4770      	bx	lr

08010e60 <rcutils_get_zero_initialized_string_map>:
 8010e60:	2000      	movs	r0, #0
 8010e62:	4b01      	ldr	r3, [pc, #4]	; (8010e68 <rcutils_get_zero_initialized_string_map+0x8>)
 8010e64:	6018      	str	r0, [r3, #0]
 8010e66:	4770      	bx	lr
 8010e68:	20010e18 	.word	0x20010e18

08010e6c <rcutils_string_map_reserve>:
 8010e6c:	2800      	cmp	r0, #0
 8010e6e:	d05e      	beq.n	8010f2e <rcutils_string_map_reserve+0xc2>
 8010e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e74:	460c      	mov	r4, r1
 8010e76:	6801      	ldr	r1, [r0, #0]
 8010e78:	b082      	sub	sp, #8
 8010e7a:	4605      	mov	r5, r0
 8010e7c:	b129      	cbz	r1, 8010e8a <rcutils_string_map_reserve+0x1e>
 8010e7e:	68cb      	ldr	r3, [r1, #12]
 8010e80:	42a3      	cmp	r3, r4
 8010e82:	d906      	bls.n	8010e92 <rcutils_string_map_reserve+0x26>
 8010e84:	461c      	mov	r4, r3
 8010e86:	2900      	cmp	r1, #0
 8010e88:	d1f9      	bne.n	8010e7e <rcutils_string_map_reserve+0x12>
 8010e8a:	201f      	movs	r0, #31
 8010e8c:	b002      	add	sp, #8
 8010e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e92:	688b      	ldr	r3, [r1, #8]
 8010e94:	42a3      	cmp	r3, r4
 8010e96:	d046      	beq.n	8010f26 <rcutils_string_map_reserve+0xba>
 8010e98:	6a0e      	ldr	r6, [r1, #32]
 8010e9a:	2c00      	cmp	r4, #0
 8010e9c:	d033      	beq.n	8010f06 <rcutils_string_map_reserve+0x9a>
 8010e9e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8010ea2:	d242      	bcs.n	8010f2a <rcutils_string_map_reserve+0xbe>
 8010ea4:	00a7      	lsls	r7, r4, #2
 8010ea6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8010eaa:	6808      	ldr	r0, [r1, #0]
 8010eac:	4632      	mov	r2, r6
 8010eae:	4639      	mov	r1, r7
 8010eb0:	47c0      	blx	r8
 8010eb2:	2800      	cmp	r0, #0
 8010eb4:	d039      	beq.n	8010f2a <rcutils_string_map_reserve+0xbe>
 8010eb6:	682b      	ldr	r3, [r5, #0]
 8010eb8:	4632      	mov	r2, r6
 8010eba:	4639      	mov	r1, r7
 8010ebc:	6018      	str	r0, [r3, #0]
 8010ebe:	6858      	ldr	r0, [r3, #4]
 8010ec0:	47c0      	blx	r8
 8010ec2:	2800      	cmp	r0, #0
 8010ec4:	d031      	beq.n	8010f2a <rcutils_string_map_reserve+0xbe>
 8010ec6:	682d      	ldr	r5, [r5, #0]
 8010ec8:	68ab      	ldr	r3, [r5, #8]
 8010eca:	6068      	str	r0, [r5, #4]
 8010ecc:	42a3      	cmp	r3, r4
 8010ece:	d225      	bcs.n	8010f1c <rcutils_string_map_reserve+0xb0>
 8010ed0:	682a      	ldr	r2, [r5, #0]
 8010ed2:	eb00 0c07 	add.w	ip, r0, r7
 8010ed6:	0099      	lsls	r1, r3, #2
 8010ed8:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8010edc:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8010ee0:	45e6      	cmp	lr, ip
 8010ee2:	d203      	bcs.n	8010eec <rcutils_string_map_reserve+0x80>
 8010ee4:	eb02 0c07 	add.w	ip, r2, r7
 8010ee8:	4566      	cmp	r6, ip
 8010eea:	d322      	bcc.n	8010f32 <rcutils_string_map_reserve+0xc6>
 8010eec:	1ae3      	subs	r3, r4, r3
 8010eee:	4670      	mov	r0, lr
 8010ef0:	2100      	movs	r1, #0
 8010ef2:	009a      	lsls	r2, r3, #2
 8010ef4:	9201      	str	r2, [sp, #4]
 8010ef6:	f002 fc85 	bl	8013804 <memset>
 8010efa:	9a01      	ldr	r2, [sp, #4]
 8010efc:	2100      	movs	r1, #0
 8010efe:	4630      	mov	r0, r6
 8010f00:	f002 fc80 	bl	8013804 <memset>
 8010f04:	e00a      	b.n	8010f1c <rcutils_string_map_reserve+0xb0>
 8010f06:	694f      	ldr	r7, [r1, #20]
 8010f08:	6808      	ldr	r0, [r1, #0]
 8010f0a:	4631      	mov	r1, r6
 8010f0c:	47b8      	blx	r7
 8010f0e:	682b      	ldr	r3, [r5, #0]
 8010f10:	4631      	mov	r1, r6
 8010f12:	6858      	ldr	r0, [r3, #4]
 8010f14:	601c      	str	r4, [r3, #0]
 8010f16:	47b8      	blx	r7
 8010f18:	682d      	ldr	r5, [r5, #0]
 8010f1a:	606c      	str	r4, [r5, #4]
 8010f1c:	2000      	movs	r0, #0
 8010f1e:	60ac      	str	r4, [r5, #8]
 8010f20:	b002      	add	sp, #8
 8010f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f26:	2000      	movs	r0, #0
 8010f28:	e7b0      	b.n	8010e8c <rcutils_string_map_reserve+0x20>
 8010f2a:	200a      	movs	r0, #10
 8010f2c:	e7ae      	b.n	8010e8c <rcutils_string_map_reserve+0x20>
 8010f2e:	200b      	movs	r0, #11
 8010f30:	4770      	bx	lr
 8010f32:	1f0b      	subs	r3, r1, #4
 8010f34:	4418      	add	r0, r3
 8010f36:	4413      	add	r3, r2
 8010f38:	3a04      	subs	r2, #4
 8010f3a:	4417      	add	r7, r2
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	f843 2f04 	str.w	r2, [r3, #4]!
 8010f42:	42bb      	cmp	r3, r7
 8010f44:	f840 2f04 	str.w	r2, [r0, #4]!
 8010f48:	d1f9      	bne.n	8010f3e <rcutils_string_map_reserve+0xd2>
 8010f4a:	e7e7      	b.n	8010f1c <rcutils_string_map_reserve+0xb0>

08010f4c <rcutils_string_map_init>:
 8010f4c:	b082      	sub	sp, #8
 8010f4e:	b570      	push	{r4, r5, r6, lr}
 8010f50:	ac04      	add	r4, sp, #16
 8010f52:	e884 000c 	stmia.w	r4, {r2, r3}
 8010f56:	b380      	cbz	r0, 8010fba <rcutils_string_map_init+0x6e>
 8010f58:	6806      	ldr	r6, [r0, #0]
 8010f5a:	4604      	mov	r4, r0
 8010f5c:	b12e      	cbz	r6, 8010f6a <rcutils_string_map_init+0x1e>
 8010f5e:	251e      	movs	r5, #30
 8010f60:	4628      	mov	r0, r5
 8010f62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f66:	b002      	add	sp, #8
 8010f68:	4770      	bx	lr
 8010f6a:	a804      	add	r0, sp, #16
 8010f6c:	460d      	mov	r5, r1
 8010f6e:	f7f8 fd91 	bl	8009a94 <rcutils_allocator_is_valid>
 8010f72:	b310      	cbz	r0, 8010fba <rcutils_string_map_init+0x6e>
 8010f74:	9b04      	ldr	r3, [sp, #16]
 8010f76:	2024      	movs	r0, #36	; 0x24
 8010f78:	9908      	ldr	r1, [sp, #32]
 8010f7a:	4798      	blx	r3
 8010f7c:	6020      	str	r0, [r4, #0]
 8010f7e:	b310      	cbz	r0, 8010fc6 <rcutils_string_map_init+0x7a>
 8010f80:	f10d 0e10 	add.w	lr, sp, #16
 8010f84:	f100 0c10 	add.w	ip, r0, #16
 8010f88:	e9c0 6600 	strd	r6, r6, [r0]
 8010f8c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8010f90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010f94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010f98:	f8de 3000 	ldr.w	r3, [lr]
 8010f9c:	4629      	mov	r1, r5
 8010f9e:	4620      	mov	r0, r4
 8010fa0:	f8cc 3000 	str.w	r3, [ip]
 8010fa4:	f7ff ff62 	bl	8010e6c <rcutils_string_map_reserve>
 8010fa8:	4605      	mov	r5, r0
 8010faa:	2800      	cmp	r0, #0
 8010fac:	d0d8      	beq.n	8010f60 <rcutils_string_map_init+0x14>
 8010fae:	9b05      	ldr	r3, [sp, #20]
 8010fb0:	9908      	ldr	r1, [sp, #32]
 8010fb2:	6820      	ldr	r0, [r4, #0]
 8010fb4:	4798      	blx	r3
 8010fb6:	6026      	str	r6, [r4, #0]
 8010fb8:	e7d2      	b.n	8010f60 <rcutils_string_map_init+0x14>
 8010fba:	250b      	movs	r5, #11
 8010fbc:	4628      	mov	r0, r5
 8010fbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fc2:	b002      	add	sp, #8
 8010fc4:	4770      	bx	lr
 8010fc6:	250a      	movs	r5, #10
 8010fc8:	e7ca      	b.n	8010f60 <rcutils_string_map_init+0x14>
 8010fca:	bf00      	nop

08010fcc <rcutils_string_map_fini>:
 8010fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fd0:	b082      	sub	sp, #8
 8010fd2:	2800      	cmp	r0, #0
 8010fd4:	d03a      	beq.n	801104c <rcutils_string_map_fini+0x80>
 8010fd6:	6804      	ldr	r4, [r0, #0]
 8010fd8:	4606      	mov	r6, r0
 8010fda:	2c00      	cmp	r4, #0
 8010fdc:	d032      	beq.n	8011044 <rcutils_string_map_fini+0x78>
 8010fde:	68a3      	ldr	r3, [r4, #8]
 8010fe0:	b32b      	cbz	r3, 801102e <rcutils_string_map_fini+0x62>
 8010fe2:	2500      	movs	r5, #0
 8010fe4:	6822      	ldr	r2, [r4, #0]
 8010fe6:	462f      	mov	r7, r5
 8010fe8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8010fec:	b1e0      	cbz	r0, 8011028 <rcutils_string_map_fini+0x5c>
 8010fee:	6a21      	ldr	r1, [r4, #32]
 8010ff0:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8010ff4:	9101      	str	r1, [sp, #4]
 8010ff6:	47c0      	blx	r8
 8010ff8:	9901      	ldr	r1, [sp, #4]
 8010ffa:	e9d4 3200 	ldrd	r3, r2, [r4]
 8010ffe:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 8011002:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8011006:	47c0      	blx	r8
 8011008:	68e3      	ldr	r3, [r4, #12]
 801100a:	6862      	ldr	r2, [r4, #4]
 801100c:	3b01      	subs	r3, #1
 801100e:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8011012:	3501      	adds	r5, #1
 8011014:	60e3      	str	r3, [r4, #12]
 8011016:	6834      	ldr	r4, [r6, #0]
 8011018:	68a3      	ldr	r3, [r4, #8]
 801101a:	429d      	cmp	r5, r3
 801101c:	d207      	bcs.n	801102e <rcutils_string_map_fini+0x62>
 801101e:	6822      	ldr	r2, [r4, #0]
 8011020:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8011024:	2800      	cmp	r0, #0
 8011026:	d1e2      	bne.n	8010fee <rcutils_string_map_fini+0x22>
 8011028:	3501      	adds	r5, #1
 801102a:	429d      	cmp	r5, r3
 801102c:	d3dc      	bcc.n	8010fe8 <rcutils_string_map_fini+0x1c>
 801102e:	2100      	movs	r1, #0
 8011030:	4630      	mov	r0, r6
 8011032:	f7ff ff1b 	bl	8010e6c <rcutils_string_map_reserve>
 8011036:	4604      	mov	r4, r0
 8011038:	b920      	cbnz	r0, 8011044 <rcutils_string_map_fini+0x78>
 801103a:	6830      	ldr	r0, [r6, #0]
 801103c:	6943      	ldr	r3, [r0, #20]
 801103e:	6a01      	ldr	r1, [r0, #32]
 8011040:	4798      	blx	r3
 8011042:	6034      	str	r4, [r6, #0]
 8011044:	4620      	mov	r0, r4
 8011046:	b002      	add	sp, #8
 8011048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801104c:	240b      	movs	r4, #11
 801104e:	4620      	mov	r0, r4
 8011050:	b002      	add	sp, #8
 8011052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011056:	bf00      	nop

08011058 <rcutils_string_map_getn>:
 8011058:	b378      	cbz	r0, 80110ba <rcutils_string_map_getn+0x62>
 801105a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801105e:	f8d0 b000 	ldr.w	fp, [r0]
 8011062:	f1bb 0f00 	cmp.w	fp, #0
 8011066:	d01f      	beq.n	80110a8 <rcutils_string_map_getn+0x50>
 8011068:	fab1 f481 	clz	r4, r1
 801106c:	4688      	mov	r8, r1
 801106e:	0964      	lsrs	r4, r4, #5
 8011070:	b1d1      	cbz	r1, 80110a8 <rcutils_string_map_getn+0x50>
 8011072:	f8db 7008 	ldr.w	r7, [fp, #8]
 8011076:	f8db 6000 	ldr.w	r6, [fp]
 801107a:	b1af      	cbz	r7, 80110a8 <rcutils_string_map_getn+0x50>
 801107c:	4691      	mov	r9, r2
 801107e:	3e04      	subs	r6, #4
 8011080:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8011084:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8011088:	3401      	adds	r4, #1
 801108a:	4628      	mov	r0, r5
 801108c:	b155      	cbz	r5, 80110a4 <rcutils_string_map_getn+0x4c>
 801108e:	f7ef f8e1 	bl	8000254 <strlen>
 8011092:	4602      	mov	r2, r0
 8011094:	4629      	mov	r1, r5
 8011096:	4640      	mov	r0, r8
 8011098:	454a      	cmp	r2, r9
 801109a:	bf38      	it	cc
 801109c:	464a      	movcc	r2, r9
 801109e:	f002 fbc6 	bl	801382e <strncmp>
 80110a2:	b120      	cbz	r0, 80110ae <rcutils_string_map_getn+0x56>
 80110a4:	42a7      	cmp	r7, r4
 80110a6:	d1eb      	bne.n	8011080 <rcutils_string_map_getn+0x28>
 80110a8:	2000      	movs	r0, #0
 80110aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ae:	f8db 3004 	ldr.w	r3, [fp, #4]
 80110b2:	f853 000a 	ldr.w	r0, [r3, sl]
 80110b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ba:	4770      	bx	lr
 80110bc:	0000      	movs	r0, r0
	...

080110c0 <rmw_get_zero_initialized_context>:
 80110c0:	b510      	push	{r4, lr}
 80110c2:	4604      	mov	r4, r0
 80110c4:	3010      	adds	r0, #16
 80110c6:	f7f8 ff03 	bl	8009ed0 <rmw_get_zero_initialized_init_options>
 80110ca:	2300      	movs	r3, #0
 80110cc:	4620      	mov	r0, r4
 80110ce:	60a3      	str	r3, [r4, #8]
 80110d0:	64a3      	str	r3, [r4, #72]	; 0x48
 80110d2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80110d4:	ed9f 7b02 	vldr	d7, [pc, #8]	; 80110e0 <rmw_get_zero_initialized_context+0x20>
 80110d8:	ed84 7b00 	vstr	d7, [r4]
 80110dc:	bd10      	pop	{r4, pc}
 80110de:	bf00      	nop
	...

080110e8 <rmw_time_equal>:
 80110e8:	b4f0      	push	{r4, r5, r6, r7}
 80110ea:	b084      	sub	sp, #16
 80110ec:	ac04      	add	r4, sp, #16
 80110ee:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80110f2:	4603      	mov	r3, r0
 80110f4:	4925      	ldr	r1, [pc, #148]	; (801118c <rmw_time_equal+0xa4>)
 80110f6:	9d01      	ldr	r5, [sp, #4]
 80110f8:	4610      	mov	r0, r2
 80110fa:	4299      	cmp	r1, r3
 80110fc:	f04f 0202 	mov.w	r2, #2
 8011100:	9e03      	ldr	r6, [sp, #12]
 8011102:	41aa      	sbcs	r2, r5
 8011104:	d330      	bcc.n	8011168 <rmw_time_equal+0x80>
 8011106:	4c22      	ldr	r4, [pc, #136]	; (8011190 <rmw_time_equal+0xa8>)
 8011108:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801110c:	fba3 3204 	umull	r3, r2, r3, r4
 8011110:	fb04 2205 	mla	r2, r4, r5, r2
 8011114:	43dd      	mvns	r5, r3
 8011116:	1a8c      	subs	r4, r1, r2
 8011118:	4285      	cmp	r5, r0
 801111a:	41b4      	sbcs	r4, r6
 801111c:	d332      	bcc.n	8011184 <rmw_time_equal+0x9c>
 801111e:	eb10 0c03 	adds.w	ip, r0, r3
 8011122:	eb42 0106 	adc.w	r1, r2, r6
 8011126:	4819      	ldr	r0, [pc, #100]	; (801118c <rmw_time_equal+0xa4>)
 8011128:	2202      	movs	r2, #2
 801112a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801112c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801112e:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8011132:	4298      	cmp	r0, r3
 8011134:	41b2      	sbcs	r2, r6
 8011136:	d31c      	bcc.n	8011172 <rmw_time_equal+0x8a>
 8011138:	4c15      	ldr	r4, [pc, #84]	; (8011190 <rmw_time_equal+0xa8>)
 801113a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801113e:	fba3 3204 	umull	r3, r2, r3, r4
 8011142:	fb04 2206 	mla	r2, r4, r6, r2
 8011146:	43de      	mvns	r6, r3
 8011148:	1a84      	subs	r4, r0, r2
 801114a:	42ae      	cmp	r6, r5
 801114c:	41bc      	sbcs	r4, r7
 801114e:	d315      	bcc.n	801117c <rmw_time_equal+0x94>
 8011150:	195b      	adds	r3, r3, r5
 8011152:	eb42 0207 	adc.w	r2, r2, r7
 8011156:	428a      	cmp	r2, r1
 8011158:	bf08      	it	eq
 801115a:	4563      	cmpeq	r3, ip
 801115c:	bf0c      	ite	eq
 801115e:	2001      	moveq	r0, #1
 8011160:	2000      	movne	r0, #0
 8011162:	b004      	add	sp, #16
 8011164:	bcf0      	pop	{r4, r5, r6, r7}
 8011166:	4770      	bx	lr
 8011168:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801116c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011170:	e7d9      	b.n	8011126 <rmw_time_equal+0x3e>
 8011172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011176:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801117a:	e7ec      	b.n	8011156 <rmw_time_equal+0x6e>
 801117c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011180:	4602      	mov	r2, r0
 8011182:	e7e8      	b.n	8011156 <rmw_time_equal+0x6e>
 8011184:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8011188:	e7cd      	b.n	8011126 <rmw_time_equal+0x3e>
 801118a:	bf00      	nop
 801118c:	25c17d04 	.word	0x25c17d04
 8011190:	3b9aca00 	.word	0x3b9aca00

08011194 <rmw_time_total_nsec>:
 8011194:	b470      	push	{r4, r5, r6}
 8011196:	b085      	sub	sp, #20
 8011198:	ac04      	add	r4, sp, #16
 801119a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801119e:	4603      	mov	r3, r0
 80111a0:	4913      	ldr	r1, [pc, #76]	; (80111f0 <rmw_time_total_nsec+0x5c>)
 80111a2:	9d01      	ldr	r5, [sp, #4]
 80111a4:	4610      	mov	r0, r2
 80111a6:	4299      	cmp	r1, r3
 80111a8:	f04f 0202 	mov.w	r2, #2
 80111ac:	9e03      	ldr	r6, [sp, #12]
 80111ae:	41aa      	sbcs	r2, r5
 80111b0:	d311      	bcc.n	80111d6 <rmw_time_total_nsec+0x42>
 80111b2:	4c10      	ldr	r4, [pc, #64]	; (80111f4 <rmw_time_total_nsec+0x60>)
 80111b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80111b8:	fba3 3204 	umull	r3, r2, r3, r4
 80111bc:	fb04 2205 	mla	r2, r4, r5, r2
 80111c0:	43dd      	mvns	r5, r3
 80111c2:	1a8c      	subs	r4, r1, r2
 80111c4:	4285      	cmp	r5, r0
 80111c6:	41b4      	sbcs	r4, r6
 80111c8:	d30c      	bcc.n	80111e4 <rmw_time_total_nsec+0x50>
 80111ca:	1818      	adds	r0, r3, r0
 80111cc:	eb42 0106 	adc.w	r1, r2, r6
 80111d0:	b005      	add	sp, #20
 80111d2:	bc70      	pop	{r4, r5, r6}
 80111d4:	4770      	bx	lr
 80111d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80111de:	b005      	add	sp, #20
 80111e0:	bc70      	pop	{r4, r5, r6}
 80111e2:	4770      	bx	lr
 80111e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111e8:	b005      	add	sp, #20
 80111ea:	bc70      	pop	{r4, r5, r6}
 80111ec:	4770      	bx	lr
 80111ee:	bf00      	nop
 80111f0:	25c17d04 	.word	0x25c17d04
 80111f4:	3b9aca00 	.word	0x3b9aca00

080111f8 <rmw_get_zero_initialized_message_info>:
 80111f8:	b510      	push	{r4, lr}
 80111fa:	4604      	mov	r4, r0
 80111fc:	2240      	movs	r2, #64	; 0x40
 80111fe:	2100      	movs	r1, #0
 8011200:	f002 fb00 	bl	8013804 <memset>
 8011204:	4620      	mov	r0, r4
 8011206:	bd10      	pop	{r4, pc}

08011208 <rmw_validate_full_topic_name>:
 8011208:	2800      	cmp	r0, #0
 801120a:	d05d      	beq.n	80112c8 <rmw_validate_full_topic_name+0xc0>
 801120c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011210:	460d      	mov	r5, r1
 8011212:	2900      	cmp	r1, #0
 8011214:	d05a      	beq.n	80112cc <rmw_validate_full_topic_name+0xc4>
 8011216:	4604      	mov	r4, r0
 8011218:	4616      	mov	r6, r2
 801121a:	f7ef f81b 	bl	8000254 <strlen>
 801121e:	b150      	cbz	r0, 8011236 <rmw_validate_full_topic_name+0x2e>
 8011220:	7823      	ldrb	r3, [r4, #0]
 8011222:	2b2f      	cmp	r3, #47	; 0x2f
 8011224:	d00e      	beq.n	8011244 <rmw_validate_full_topic_name+0x3c>
 8011226:	2302      	movs	r3, #2
 8011228:	602b      	str	r3, [r5, #0]
 801122a:	b146      	cbz	r6, 801123e <rmw_validate_full_topic_name+0x36>
 801122c:	2300      	movs	r3, #0
 801122e:	4618      	mov	r0, r3
 8011230:	6033      	str	r3, [r6, #0]
 8011232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011236:	2301      	movs	r3, #1
 8011238:	602b      	str	r3, [r5, #0]
 801123a:	2e00      	cmp	r6, #0
 801123c:	d1f6      	bne.n	801122c <rmw_validate_full_topic_name+0x24>
 801123e:	2000      	movs	r0, #0
 8011240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011244:	1e43      	subs	r3, r0, #1
 8011246:	5ce2      	ldrb	r2, [r4, r3]
 8011248:	2a2f      	cmp	r2, #47	; 0x2f
 801124a:	d041      	beq.n	80112d0 <rmw_validate_full_topic_name+0xc8>
 801124c:	1e62      	subs	r2, r4, #1
 801124e:	f1c4 0e01 	rsb	lr, r4, #1
 8011252:	eb02 0800 	add.w	r8, r2, r0
 8011256:	eb0e 0702 	add.w	r7, lr, r2
 801125a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801125e:	f023 0120 	bic.w	r1, r3, #32
 8011262:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 8011266:	3941      	subs	r1, #65	; 0x41
 8011268:	2919      	cmp	r1, #25
 801126a:	d90f      	bls.n	801128c <rmw_validate_full_topic_name+0x84>
 801126c:	f1bc 0f0a 	cmp.w	ip, #10
 8011270:	d90c      	bls.n	801128c <rmw_validate_full_topic_name+0x84>
 8011272:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 8011276:	fab3 f383 	clz	r3, r3
 801127a:	095b      	lsrs	r3, r3, #5
 801127c:	b933      	cbnz	r3, 801128c <rmw_validate_full_topic_name+0x84>
 801127e:	2204      	movs	r2, #4
 8011280:	602a      	str	r2, [r5, #0]
 8011282:	2e00      	cmp	r6, #0
 8011284:	d0db      	beq.n	801123e <rmw_validate_full_topic_name+0x36>
 8011286:	4618      	mov	r0, r3
 8011288:	6037      	str	r7, [r6, #0]
 801128a:	e7d2      	b.n	8011232 <rmw_validate_full_topic_name+0x2a>
 801128c:	4542      	cmp	r2, r8
 801128e:	d1e2      	bne.n	8011256 <rmw_validate_full_topic_name+0x4e>
 8011290:	2301      	movs	r3, #1
 8011292:	4f1a      	ldr	r7, [pc, #104]	; (80112fc <rmw_validate_full_topic_name+0xf4>)
 8011294:	e004      	b.n	80112a0 <rmw_validate_full_topic_name+0x98>
 8011296:	4298      	cmp	r0, r3
 8011298:	f104 0401 	add.w	r4, r4, #1
 801129c:	4613      	mov	r3, r2
 801129e:	d91c      	bls.n	80112da <rmw_validate_full_topic_name+0xd2>
 80112a0:	4298      	cmp	r0, r3
 80112a2:	f103 0201 	add.w	r2, r3, #1
 80112a6:	d0f6      	beq.n	8011296 <rmw_validate_full_topic_name+0x8e>
 80112a8:	7821      	ldrb	r1, [r4, #0]
 80112aa:	292f      	cmp	r1, #47	; 0x2f
 80112ac:	d1f3      	bne.n	8011296 <rmw_validate_full_topic_name+0x8e>
 80112ae:	7861      	ldrb	r1, [r4, #1]
 80112b0:	292f      	cmp	r1, #47	; 0x2f
 80112b2:	d01e      	beq.n	80112f2 <rmw_validate_full_topic_name+0xea>
 80112b4:	5dc9      	ldrb	r1, [r1, r7]
 80112b6:	0749      	lsls	r1, r1, #29
 80112b8:	d5ed      	bpl.n	8011296 <rmw_validate_full_topic_name+0x8e>
 80112ba:	2206      	movs	r2, #6
 80112bc:	602a      	str	r2, [r5, #0]
 80112be:	2e00      	cmp	r6, #0
 80112c0:	d0bd      	beq.n	801123e <rmw_validate_full_topic_name+0x36>
 80112c2:	2000      	movs	r0, #0
 80112c4:	6033      	str	r3, [r6, #0]
 80112c6:	e7b4      	b.n	8011232 <rmw_validate_full_topic_name+0x2a>
 80112c8:	200b      	movs	r0, #11
 80112ca:	4770      	bx	lr
 80112cc:	200b      	movs	r0, #11
 80112ce:	e7b0      	b.n	8011232 <rmw_validate_full_topic_name+0x2a>
 80112d0:	2203      	movs	r2, #3
 80112d2:	602a      	str	r2, [r5, #0]
 80112d4:	2e00      	cmp	r6, #0
 80112d6:	d1f4      	bne.n	80112c2 <rmw_validate_full_topic_name+0xba>
 80112d8:	e7b1      	b.n	801123e <rmw_validate_full_topic_name+0x36>
 80112da:	28f7      	cmp	r0, #247	; 0xf7
 80112dc:	d803      	bhi.n	80112e6 <rmw_validate_full_topic_name+0xde>
 80112de:	2300      	movs	r3, #0
 80112e0:	4618      	mov	r0, r3
 80112e2:	602b      	str	r3, [r5, #0]
 80112e4:	e7a5      	b.n	8011232 <rmw_validate_full_topic_name+0x2a>
 80112e6:	2307      	movs	r3, #7
 80112e8:	602b      	str	r3, [r5, #0]
 80112ea:	2e00      	cmp	r6, #0
 80112ec:	d0a7      	beq.n	801123e <rmw_validate_full_topic_name+0x36>
 80112ee:	23f6      	movs	r3, #246	; 0xf6
 80112f0:	e7e7      	b.n	80112c2 <rmw_validate_full_topic_name+0xba>
 80112f2:	2205      	movs	r2, #5
 80112f4:	602a      	str	r2, [r5, #0]
 80112f6:	2e00      	cmp	r6, #0
 80112f8:	d1e3      	bne.n	80112c2 <rmw_validate_full_topic_name+0xba>
 80112fa:	e7a0      	b.n	801123e <rmw_validate_full_topic_name+0x36>
 80112fc:	080155b0 	.word	0x080155b0

08011300 <on_status>:
 8011300:	b082      	sub	sp, #8
 8011302:	b002      	add	sp, #8
 8011304:	4770      	bx	lr
 8011306:	bf00      	nop

08011308 <on_topic>:
 8011308:	4a23      	ldr	r2, [pc, #140]	; (8011398 <on_topic+0x90>)
 801130a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801130e:	6812      	ldr	r2, [r2, #0]
 8011310:	b094      	sub	sp, #80	; 0x50
 8011312:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8011314:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8011318:	9113      	str	r1, [sp, #76]	; 0x4c
 801131a:	9312      	str	r3, [sp, #72]	; 0x48
 801131c:	b3c2      	cbz	r2, 8011390 <on_topic+0x88>
 801131e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8011322:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8011326:	e001      	b.n	801132c <on_topic+0x24>
 8011328:	6852      	ldr	r2, [r2, #4]
 801132a:	b38a      	cbz	r2, 8011390 <on_topic+0x88>
 801132c:	6894      	ldr	r4, [r2, #8]
 801132e:	8aa3      	ldrh	r3, [r4, #20]
 8011330:	428b      	cmp	r3, r1
 8011332:	d1f9      	bne.n	8011328 <on_topic+0x20>
 8011334:	7da3      	ldrb	r3, [r4, #22]
 8011336:	4283      	cmp	r3, r0
 8011338:	d1f6      	bne.n	8011328 <on_topic+0x20>
 801133a:	2248      	movs	r2, #72	; 0x48
 801133c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011340:	4668      	mov	r0, sp
 8011342:	f002 fb7e 	bl	8013a42 <memcpy>
 8011346:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801134a:	4620      	mov	r0, r4
 801134c:	cb0c      	ldmia	r3, {r2, r3}
 801134e:	f7f9 ff7d 	bl	800b24c <rmw_uxrce_get_static_input_buffer_for_entity>
 8011352:	4607      	mov	r7, r0
 8011354:	b1e0      	cbz	r0, 8011390 <on_topic+0x88>
 8011356:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801135a:	462a      	mov	r2, r5
 801135c:	4630      	mov	r0, r6
 801135e:	f108 0110 	add.w	r1, r8, #16
 8011362:	f000 fc1d 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 8011366:	b930      	cbnz	r0, 8011376 <on_topic+0x6e>
 8011368:	4639      	mov	r1, r7
 801136a:	480c      	ldr	r0, [pc, #48]	; (801139c <on_topic+0x94>)
 801136c:	b014      	add	sp, #80	; 0x50
 801136e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011372:	f000 b8bd 	b.w	80114f0 <put_memory>
 8011376:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801137a:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801137e:	f000 fb37 	bl	80119f0 <rmw_uros_epoch_nanos>
 8011382:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8011386:	2305      	movs	r3, #5
 8011388:	e942 0102 	strd	r0, r1, [r2, #-8]
 801138c:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8011390:	b014      	add	sp, #80	; 0x50
 8011392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011396:	bf00      	nop
 8011398:	20010db4 	.word	0x20010db4
 801139c:	20010da4 	.word	0x20010da4

080113a0 <on_request>:
 80113a0:	4824      	ldr	r0, [pc, #144]	; (8011434 <on_request+0x94>)
 80113a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113a6:	6800      	ldr	r0, [r0, #0]
 80113a8:	b094      	sub	sp, #80	; 0x50
 80113aa:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80113ac:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 80113b0:	9113      	str	r1, [sp, #76]	; 0x4c
 80113b2:	2800      	cmp	r0, #0
 80113b4:	d03b      	beq.n	801142e <on_request+0x8e>
 80113b6:	461d      	mov	r5, r3
 80113b8:	e001      	b.n	80113be <on_request+0x1e>
 80113ba:	6840      	ldr	r0, [r0, #4]
 80113bc:	b3b8      	cbz	r0, 801142e <on_request+0x8e>
 80113be:	6884      	ldr	r4, [r0, #8]
 80113c0:	8b21      	ldrh	r1, [r4, #24]
 80113c2:	4291      	cmp	r1, r2
 80113c4:	d1f9      	bne.n	80113ba <on_request+0x1a>
 80113c6:	2248      	movs	r2, #72	; 0x48
 80113c8:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80113cc:	4668      	mov	r0, sp
 80113ce:	f002 fb38 	bl	8013a42 <memcpy>
 80113d2:	f104 0320 	add.w	r3, r4, #32
 80113d6:	4620      	mov	r0, r4
 80113d8:	cb0c      	ldmia	r3, {r2, r3}
 80113da:	f7f9 ff37 	bl	800b24c <rmw_uxrce_get_static_input_buffer_for_entity>
 80113de:	4680      	mov	r8, r0
 80113e0:	b328      	cbz	r0, 801142e <on_request+0x8e>
 80113e2:	4630      	mov	r0, r6
 80113e4:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80113e8:	463a      	mov	r2, r7
 80113ea:	f106 0110 	add.w	r1, r6, #16
 80113ee:	f000 fbd7 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 80113f2:	b930      	cbnz	r0, 8011402 <on_request+0x62>
 80113f4:	4641      	mov	r1, r8
 80113f6:	4810      	ldr	r0, [pc, #64]	; (8011438 <on_request+0x98>)
 80113f8:	b014      	add	sp, #80	; 0x50
 80113fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80113fe:	f000 b877 	b.w	80114f0 <put_memory>
 8011402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011404:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 8011408:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801140c:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 8011410:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011414:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011418:	e88c 0003 	stmia.w	ip, {r0, r1}
 801141c:	f000 fae8 	bl	80119f0 <rmw_uros_epoch_nanos>
 8011420:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 8011424:	2303      	movs	r3, #3
 8011426:	e942 0102 	strd	r0, r1, [r2, #-8]
 801142a:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801142e:	b014      	add	sp, #80	; 0x50
 8011430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011434:	20010d84 	.word	0x20010d84
 8011438:	20010da4 	.word	0x20010da4

0801143c <on_reply>:
 801143c:	4822      	ldr	r0, [pc, #136]	; (80114c8 <on_reply+0x8c>)
 801143e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011442:	6800      	ldr	r0, [r0, #0]
 8011444:	b094      	sub	sp, #80	; 0x50
 8011446:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8011448:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801144c:	9113      	str	r1, [sp, #76]	; 0x4c
 801144e:	b3b8      	cbz	r0, 80114c0 <on_reply+0x84>
 8011450:	461d      	mov	r5, r3
 8011452:	e001      	b.n	8011458 <on_reply+0x1c>
 8011454:	6840      	ldr	r0, [r0, #4]
 8011456:	b398      	cbz	r0, 80114c0 <on_reply+0x84>
 8011458:	6884      	ldr	r4, [r0, #8]
 801145a:	8b21      	ldrh	r1, [r4, #24]
 801145c:	4291      	cmp	r1, r2
 801145e:	d1f9      	bne.n	8011454 <on_reply+0x18>
 8011460:	2248      	movs	r2, #72	; 0x48
 8011462:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011466:	4668      	mov	r0, sp
 8011468:	f002 faeb 	bl	8013a42 <memcpy>
 801146c:	f104 0320 	add.w	r3, r4, #32
 8011470:	4620      	mov	r0, r4
 8011472:	cb0c      	ldmia	r3, {r2, r3}
 8011474:	f7f9 feea 	bl	800b24c <rmw_uxrce_get_static_input_buffer_for_entity>
 8011478:	4680      	mov	r8, r0
 801147a:	b308      	cbz	r0, 80114c0 <on_reply+0x84>
 801147c:	4630      	mov	r0, r6
 801147e:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8011482:	463a      	mov	r2, r7
 8011484:	f106 0110 	add.w	r1, r6, #16
 8011488:	f000 fb8a 	bl	8011ba0 <ucdr_deserialize_array_uint8_t>
 801148c:	b930      	cbnz	r0, 801149c <on_reply+0x60>
 801148e:	4641      	mov	r1, r8
 8011490:	480e      	ldr	r0, [pc, #56]	; (80114cc <on_reply+0x90>)
 8011492:	b014      	add	sp, #80	; 0x50
 8011494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011498:	f000 b82a 	b.w	80114f0 <put_memory>
 801149c:	2200      	movs	r2, #0
 801149e:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 80114a2:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 80114a6:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 80114aa:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 80114ae:	f000 fa9f 	bl	80119f0 <rmw_uros_epoch_nanos>
 80114b2:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 80114b6:	2304      	movs	r3, #4
 80114b8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80114bc:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 80114c0:	b014      	add	sp, #80	; 0x50
 80114c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114c6:	bf00      	nop
 80114c8:	2000c494 	.word	0x2000c494
 80114cc:	20010da4 	.word	0x20010da4

080114d0 <get_memory>:
 80114d0:	4603      	mov	r3, r0
 80114d2:	6840      	ldr	r0, [r0, #4]
 80114d4:	b158      	cbz	r0, 80114ee <get_memory+0x1e>
 80114d6:	6842      	ldr	r2, [r0, #4]
 80114d8:	605a      	str	r2, [r3, #4]
 80114da:	b10a      	cbz	r2, 80114e0 <get_memory+0x10>
 80114dc:	2100      	movs	r1, #0
 80114de:	6011      	str	r1, [r2, #0]
 80114e0:	681a      	ldr	r2, [r3, #0]
 80114e2:	6042      	str	r2, [r0, #4]
 80114e4:	b102      	cbz	r2, 80114e8 <get_memory+0x18>
 80114e6:	6010      	str	r0, [r2, #0]
 80114e8:	2200      	movs	r2, #0
 80114ea:	6002      	str	r2, [r0, #0]
 80114ec:	6018      	str	r0, [r3, #0]
 80114ee:	4770      	bx	lr

080114f0 <put_memory>:
 80114f0:	680b      	ldr	r3, [r1, #0]
 80114f2:	b10b      	cbz	r3, 80114f8 <put_memory+0x8>
 80114f4:	684a      	ldr	r2, [r1, #4]
 80114f6:	605a      	str	r2, [r3, #4]
 80114f8:	684a      	ldr	r2, [r1, #4]
 80114fa:	b102      	cbz	r2, 80114fe <put_memory+0xe>
 80114fc:	6013      	str	r3, [r2, #0]
 80114fe:	6803      	ldr	r3, [r0, #0]
 8011500:	428b      	cmp	r3, r1
 8011502:	6843      	ldr	r3, [r0, #4]
 8011504:	bf08      	it	eq
 8011506:	6002      	streq	r2, [r0, #0]
 8011508:	604b      	str	r3, [r1, #4]
 801150a:	b103      	cbz	r3, 801150e <put_memory+0x1e>
 801150c:	6019      	str	r1, [r3, #0]
 801150e:	2300      	movs	r3, #0
 8011510:	600b      	str	r3, [r1, #0]
 8011512:	6041      	str	r1, [r0, #4]
 8011514:	4770      	bx	lr
 8011516:	bf00      	nop

08011518 <rmw_destroy_client>:
 8011518:	b570      	push	{r4, r5, r6, lr}
 801151a:	b128      	cbz	r0, 8011528 <rmw_destroy_client+0x10>
 801151c:	4604      	mov	r4, r0
 801151e:	6800      	ldr	r0, [r0, #0]
 8011520:	460d      	mov	r5, r1
 8011522:	f7fa f85f 	bl	800b5e4 <is_uxrce_rmw_identifier_valid>
 8011526:	b910      	cbnz	r0, 801152e <rmw_destroy_client+0x16>
 8011528:	2401      	movs	r4, #1
 801152a:	4620      	mov	r0, r4
 801152c:	bd70      	pop	{r4, r5, r6, pc}
 801152e:	6863      	ldr	r3, [r4, #4]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d0f9      	beq.n	8011528 <rmw_destroy_client+0x10>
 8011534:	2d00      	cmp	r5, #0
 8011536:	d0f7      	beq.n	8011528 <rmw_destroy_client+0x10>
 8011538:	6828      	ldr	r0, [r5, #0]
 801153a:	f7fa f853 	bl	800b5e4 <is_uxrce_rmw_identifier_valid>
 801153e:	2800      	cmp	r0, #0
 8011540:	d0f2      	beq.n	8011528 <rmw_destroy_client+0x10>
 8011542:	686e      	ldr	r6, [r5, #4]
 8011544:	2e00      	cmp	r6, #0
 8011546:	d0ef      	beq.n	8011528 <rmw_destroy_client+0x10>
 8011548:	6864      	ldr	r4, [r4, #4]
 801154a:	6932      	ldr	r2, [r6, #16]
 801154c:	6920      	ldr	r0, [r4, #16]
 801154e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011552:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011556:	6819      	ldr	r1, [r3, #0]
 8011558:	f7fa fab0 	bl	800babc <uxr_buffer_cancel_data>
 801155c:	4602      	mov	r2, r0
 801155e:	6920      	ldr	r0, [r4, #16]
 8011560:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011564:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011568:	f7f9 ff70 	bl	800b44c <run_xrce_session>
 801156c:	6920      	ldr	r0, [r4, #16]
 801156e:	6932      	ldr	r2, [r6, #16]
 8011570:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011574:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011578:	6819      	ldr	r1, [r3, #0]
 801157a:	f7fa f8bf 	bl	800b6fc <uxr_buffer_delete_entity>
 801157e:	4602      	mov	r2, r0
 8011580:	6920      	ldr	r0, [r4, #16]
 8011582:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011586:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801158a:	f7f9 ff5f 	bl	800b44c <run_xrce_session>
 801158e:	4603      	mov	r3, r0
 8011590:	4628      	mov	r0, r5
 8011592:	2b00      	cmp	r3, #0
 8011594:	bf14      	ite	ne
 8011596:	2400      	movne	r4, #0
 8011598:	2402      	moveq	r4, #2
 801159a:	f7f9 fe35 	bl	800b208 <rmw_uxrce_fini_client_memory>
 801159e:	e7c4      	b.n	801152a <rmw_destroy_client+0x12>

080115a0 <rmw_get_implementation_identifier>:
 80115a0:	4b01      	ldr	r3, [pc, #4]	; (80115a8 <rmw_get_implementation_identifier+0x8>)
 80115a2:	6818      	ldr	r0, [r3, #0]
 80115a4:	4770      	bx	lr
 80115a6:	bf00      	nop
 80115a8:	08015508 	.word	0x08015508

080115ac <rmw_create_guard_condition>:
 80115ac:	b538      	push	{r3, r4, r5, lr}
 80115ae:	4605      	mov	r5, r0
 80115b0:	4808      	ldr	r0, [pc, #32]	; (80115d4 <rmw_create_guard_condition+0x28>)
 80115b2:	f7ff ff8d 	bl	80114d0 <get_memory>
 80115b6:	4603      	mov	r3, r0
 80115b8:	b148      	cbz	r0, 80115ce <rmw_create_guard_condition+0x22>
 80115ba:	6884      	ldr	r4, [r0, #8]
 80115bc:	2300      	movs	r3, #0
 80115be:	61e5      	str	r5, [r4, #28]
 80115c0:	7423      	strb	r3, [r4, #16]
 80115c2:	f7ff ffed 	bl	80115a0 <rmw_get_implementation_identifier>
 80115c6:	f104 0314 	add.w	r3, r4, #20
 80115ca:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80115ce:	4618      	mov	r0, r3
 80115d0:	bd38      	pop	{r3, r4, r5, pc}
 80115d2:	bf00      	nop
 80115d4:	20010d44 	.word	0x20010d44

080115d8 <rmw_destroy_guard_condition>:
 80115d8:	b508      	push	{r3, lr}
 80115da:	4b08      	ldr	r3, [pc, #32]	; (80115fc <rmw_destroy_guard_condition+0x24>)
 80115dc:	6819      	ldr	r1, [r3, #0]
 80115de:	b911      	cbnz	r1, 80115e6 <rmw_destroy_guard_condition+0xe>
 80115e0:	e00a      	b.n	80115f8 <rmw_destroy_guard_condition+0x20>
 80115e2:	6849      	ldr	r1, [r1, #4]
 80115e4:	b141      	cbz	r1, 80115f8 <rmw_destroy_guard_condition+0x20>
 80115e6:	688b      	ldr	r3, [r1, #8]
 80115e8:	3314      	adds	r3, #20
 80115ea:	4298      	cmp	r0, r3
 80115ec:	d1f9      	bne.n	80115e2 <rmw_destroy_guard_condition+0xa>
 80115ee:	4803      	ldr	r0, [pc, #12]	; (80115fc <rmw_destroy_guard_condition+0x24>)
 80115f0:	f7ff ff7e 	bl	80114f0 <put_memory>
 80115f4:	2000      	movs	r0, #0
 80115f6:	bd08      	pop	{r3, pc}
 80115f8:	2001      	movs	r0, #1
 80115fa:	bd08      	pop	{r3, pc}
 80115fc:	20010d44 	.word	0x20010d44

08011600 <destroy_topic>:
 8011600:	b538      	push	{r3, r4, r5, lr}
 8011602:	6985      	ldr	r5, [r0, #24]
 8011604:	b1dd      	cbz	r5, 801163e <destroy_topic+0x3e>
 8011606:	4604      	mov	r4, r0
 8011608:	6928      	ldr	r0, [r5, #16]
 801160a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801160e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011612:	6922      	ldr	r2, [r4, #16]
 8011614:	6819      	ldr	r1, [r3, #0]
 8011616:	f7fa f871 	bl	800b6fc <uxr_buffer_delete_entity>
 801161a:	4602      	mov	r2, r0
 801161c:	6928      	ldr	r0, [r5, #16]
 801161e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011622:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011626:	f7f9 ff11 	bl	800b44c <run_xrce_session>
 801162a:	4603      	mov	r3, r0
 801162c:	4620      	mov	r0, r4
 801162e:	2b00      	cmp	r3, #0
 8011630:	bf14      	ite	ne
 8011632:	2400      	movne	r4, #0
 8011634:	2402      	moveq	r4, #2
 8011636:	f7f9 fdfd 	bl	800b234 <rmw_uxrce_fini_topic_memory>
 801163a:	4620      	mov	r0, r4
 801163c:	bd38      	pop	{r3, r4, r5, pc}
 801163e:	2401      	movs	r4, #1
 8011640:	4620      	mov	r0, r4
 8011642:	bd38      	pop	{r3, r4, r5, pc}

08011644 <rmw_take_with_info>:
 8011644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011646:	4604      	mov	r4, r0
 8011648:	6800      	ldr	r0, [r0, #0]
 801164a:	b089      	sub	sp, #36	; 0x24
 801164c:	460f      	mov	r7, r1
 801164e:	4615      	mov	r5, r2
 8011650:	b128      	cbz	r0, 801165e <rmw_take_with_info+0x1a>
 8011652:	4b24      	ldr	r3, [pc, #144]	; (80116e4 <rmw_take_with_info+0xa0>)
 8011654:	6819      	ldr	r1, [r3, #0]
 8011656:	f7ee fdf3 	bl	8000240 <strcmp>
 801165a:	2800      	cmp	r0, #0
 801165c:	d13e      	bne.n	80116dc <rmw_take_with_info+0x98>
 801165e:	b305      	cbz	r5, 80116a2 <rmw_take_with_info+0x5e>
 8011660:	2300      	movs	r3, #0
 8011662:	6864      	ldr	r4, [r4, #4]
 8011664:	702b      	strb	r3, [r5, #0]
 8011666:	f7f9 fe73 	bl	800b350 <rmw_uxrce_clean_expired_static_input_buffer>
 801166a:	4620      	mov	r0, r4
 801166c:	f7f9 fe48 	bl	800b300 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011670:	4606      	mov	r6, r0
 8011672:	b1f0      	cbz	r0, 80116b2 <rmw_take_with_info+0x6e>
 8011674:	6881      	ldr	r1, [r0, #8]
 8011676:	4668      	mov	r0, sp
 8011678:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801167c:	3110      	adds	r1, #16
 801167e:	f7f6 fe99 	bl	80083b4 <ucdr_init_buffer>
 8011682:	69a3      	ldr	r3, [r4, #24]
 8011684:	4639      	mov	r1, r7
 8011686:	4668      	mov	r0, sp
 8011688:	68db      	ldr	r3, [r3, #12]
 801168a:	4798      	blx	r3
 801168c:	4604      	mov	r4, r0
 801168e:	4631      	mov	r1, r6
 8011690:	4815      	ldr	r0, [pc, #84]	; (80116e8 <rmw_take_with_info+0xa4>)
 8011692:	f7ff ff2d 	bl	80114f0 <put_memory>
 8011696:	702c      	strb	r4, [r5, #0]
 8011698:	f084 0001 	eor.w	r0, r4, #1
 801169c:	b2c0      	uxtb	r0, r0
 801169e:	b009      	add	sp, #36	; 0x24
 80116a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116a2:	6864      	ldr	r4, [r4, #4]
 80116a4:	f7f9 fe54 	bl	800b350 <rmw_uxrce_clean_expired_static_input_buffer>
 80116a8:	4620      	mov	r0, r4
 80116aa:	f7f9 fe29 	bl	800b300 <rmw_uxrce_find_static_input_buffer_by_owner>
 80116ae:	4605      	mov	r5, r0
 80116b0:	b910      	cbnz	r0, 80116b8 <rmw_take_with_info+0x74>
 80116b2:	2001      	movs	r0, #1
 80116b4:	b009      	add	sp, #36	; 0x24
 80116b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116b8:	68a9      	ldr	r1, [r5, #8]
 80116ba:	4668      	mov	r0, sp
 80116bc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80116c0:	3110      	adds	r1, #16
 80116c2:	f7f6 fe77 	bl	80083b4 <ucdr_init_buffer>
 80116c6:	69a3      	ldr	r3, [r4, #24]
 80116c8:	4639      	mov	r1, r7
 80116ca:	4668      	mov	r0, sp
 80116cc:	68db      	ldr	r3, [r3, #12]
 80116ce:	4798      	blx	r3
 80116d0:	4629      	mov	r1, r5
 80116d2:	4604      	mov	r4, r0
 80116d4:	4804      	ldr	r0, [pc, #16]	; (80116e8 <rmw_take_with_info+0xa4>)
 80116d6:	f7ff ff0b 	bl	80114f0 <put_memory>
 80116da:	e7dd      	b.n	8011698 <rmw_take_with_info+0x54>
 80116dc:	200c      	movs	r0, #12
 80116de:	b009      	add	sp, #36	; 0x24
 80116e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116e2:	bf00      	nop
 80116e4:	08015508 	.word	0x08015508
 80116e8:	20010da4 	.word	0x20010da4

080116ec <rmw_wait>:
 80116ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80116f0:	4698      	mov	r8, r3
 80116f2:	ea40 0301 	orr.w	r3, r0, r1
 80116f6:	b089      	sub	sp, #36	; 0x24
 80116f8:	ea48 0303 	orr.w	r3, r8, r3
 80116fc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80116fe:	4313      	orrs	r3, r2
 8011700:	f000 8106 	beq.w	8011910 <rmw_wait+0x224>
 8011704:	4605      	mov	r5, r0
 8011706:	460e      	mov	r6, r1
 8011708:	4691      	mov	r9, r2
 801170a:	b16c      	cbz	r4, 8011728 <rmw_wait+0x3c>
 801170c:	4ba6      	ldr	r3, [pc, #664]	; (80119a8 <rmw_wait+0x2bc>)
 801170e:	af04      	add	r7, sp, #16
 8011710:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011712:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8011716:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801171a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801171e:	f7ff fce3 	bl	80110e8 <rmw_time_equal>
 8011722:	2800      	cmp	r0, #0
 8011724:	f000 810b 	beq.w	801193e <rmw_wait+0x252>
 8011728:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801172c:	f7f9 fe10 	bl	800b350 <rmw_uxrce_clean_expired_static_input_buffer>
 8011730:	4b9e      	ldr	r3, [pc, #632]	; (80119ac <rmw_wait+0x2c0>)
 8011732:	681c      	ldr	r4, [r3, #0]
 8011734:	b14c      	cbz	r4, 801174a <rmw_wait+0x5e>
 8011736:	4623      	mov	r3, r4
 8011738:	2100      	movs	r1, #0
 801173a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801173e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011742:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 8011746:	2b00      	cmp	r3, #0
 8011748:	d1f7      	bne.n	801173a <rmw_wait+0x4e>
 801174a:	f1b9 0f00 	cmp.w	r9, #0
 801174e:	d011      	beq.n	8011774 <rmw_wait+0x88>
 8011750:	f8d9 1000 	ldr.w	r1, [r9]
 8011754:	b171      	cbz	r1, 8011774 <rmw_wait+0x88>
 8011756:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801175a:	2300      	movs	r3, #0
 801175c:	2001      	movs	r0, #1
 801175e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8011762:	3301      	adds	r3, #1
 8011764:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8011766:	4299      	cmp	r1, r3
 8011768:	6912      	ldr	r2, [r2, #16]
 801176a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801176e:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8011772:	d1f4      	bne.n	801175e <rmw_wait+0x72>
 8011774:	f1b8 0f00 	cmp.w	r8, #0
 8011778:	d011      	beq.n	801179e <rmw_wait+0xb2>
 801177a:	f8d8 1000 	ldr.w	r1, [r8]
 801177e:	b171      	cbz	r1, 801179e <rmw_wait+0xb2>
 8011780:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8011784:	2300      	movs	r3, #0
 8011786:	2001      	movs	r0, #1
 8011788:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801178c:	3301      	adds	r3, #1
 801178e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8011790:	4299      	cmp	r1, r3
 8011792:	6912      	ldr	r2, [r2, #16]
 8011794:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011798:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801179c:	d1f4      	bne.n	8011788 <rmw_wait+0x9c>
 801179e:	b185      	cbz	r5, 80117c2 <rmw_wait+0xd6>
 80117a0:	6829      	ldr	r1, [r5, #0]
 80117a2:	b171      	cbz	r1, 80117c2 <rmw_wait+0xd6>
 80117a4:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80117a8:	2300      	movs	r3, #0
 80117aa:	2001      	movs	r0, #1
 80117ac:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80117b0:	3301      	adds	r3, #1
 80117b2:	6a12      	ldr	r2, [r2, #32]
 80117b4:	4299      	cmp	r1, r3
 80117b6:	6912      	ldr	r2, [r2, #16]
 80117b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80117bc:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80117c0:	d1f4      	bne.n	80117ac <rmw_wait+0xc0>
 80117c2:	b344      	cbz	r4, 8011816 <rmw_wait+0x12a>
 80117c4:	4622      	mov	r2, r4
 80117c6:	2300      	movs	r3, #0
 80117c8:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80117cc:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80117d0:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 80117d4:	440b      	add	r3, r1
 80117d6:	b2db      	uxtb	r3, r3
 80117d8:	2a00      	cmp	r2, #0
 80117da:	d1f5      	bne.n	80117c8 <rmw_wait+0xdc>
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d05f      	beq.n	80118a0 <rmw_wait+0x1b4>
 80117e0:	1c7a      	adds	r2, r7, #1
 80117e2:	d00d      	beq.n	8011800 <rmw_wait+0x114>
 80117e4:	ee07 7a90 	vmov	s15, r7
 80117e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80117ec:	ee07 3a90 	vmov	s15, r3
 80117f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80117f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80117f8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80117fc:	ee17 7a90 	vmov	r7, s15
 8011800:	68a0      	ldr	r0, [r4, #8]
 8011802:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8011806:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 801180a:	2b00      	cmp	r3, #0
 801180c:	f040 808d 	bne.w	801192a <rmw_wait+0x23e>
 8011810:	6864      	ldr	r4, [r4, #4]
 8011812:	2c00      	cmp	r4, #0
 8011814:	d1f4      	bne.n	8011800 <rmw_wait+0x114>
 8011816:	f1b9 0f00 	cmp.w	r9, #0
 801181a:	f000 80a1 	beq.w	8011960 <rmw_wait+0x274>
 801181e:	f8d9 7000 	ldr.w	r7, [r9]
 8011822:	2f00      	cmp	r7, #0
 8011824:	f000 80a4 	beq.w	8011970 <rmw_wait+0x284>
 8011828:	2400      	movs	r4, #0
 801182a:	4627      	mov	r7, r4
 801182c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011830:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011834:	f7f9 fd64 	bl	800b300 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011838:	2800      	cmp	r0, #0
 801183a:	d03b      	beq.n	80118b4 <rmw_wait+0x1c8>
 801183c:	3401      	adds	r4, #1
 801183e:	f8d9 3000 	ldr.w	r3, [r9]
 8011842:	2701      	movs	r7, #1
 8011844:	42a3      	cmp	r3, r4
 8011846:	d8f1      	bhi.n	801182c <rmw_wait+0x140>
 8011848:	2701      	movs	r7, #1
 801184a:	f1b8 0f00 	cmp.w	r8, #0
 801184e:	d010      	beq.n	8011872 <rmw_wait+0x186>
 8011850:	f8d8 3000 	ldr.w	r3, [r8]
 8011854:	b16b      	cbz	r3, 8011872 <rmw_wait+0x186>
 8011856:	2400      	movs	r4, #0
 8011858:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801185c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011860:	f7f9 fd4e 	bl	800b300 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011864:	b370      	cbz	r0, 80118c4 <rmw_wait+0x1d8>
 8011866:	3401      	adds	r4, #1
 8011868:	f8d8 3000 	ldr.w	r3, [r8]
 801186c:	2701      	movs	r7, #1
 801186e:	42a3      	cmp	r3, r4
 8011870:	d8f2      	bhi.n	8011858 <rmw_wait+0x16c>
 8011872:	2d00      	cmp	r5, #0
 8011874:	d035      	beq.n	80118e2 <rmw_wait+0x1f6>
 8011876:	682b      	ldr	r3, [r5, #0]
 8011878:	b39b      	cbz	r3, 80118e2 <rmw_wait+0x1f6>
 801187a:	2400      	movs	r4, #0
 801187c:	686b      	ldr	r3, [r5, #4]
 801187e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011882:	f7f9 fd3d 	bl	800b300 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011886:	b328      	cbz	r0, 80118d4 <rmw_wait+0x1e8>
 8011888:	3401      	adds	r4, #1
 801188a:	682b      	ldr	r3, [r5, #0]
 801188c:	2701      	movs	r7, #1
 801188e:	42a3      	cmp	r3, r4
 8011890:	d8f4      	bhi.n	801187c <rmw_wait+0x190>
 8011892:	2e00      	cmp	r6, #0
 8011894:	d03c      	beq.n	8011910 <rmw_wait+0x224>
 8011896:	6834      	ldr	r4, [r6, #0]
 8011898:	2c00      	cmp	r4, #0
 801189a:	d039      	beq.n	8011910 <rmw_wait+0x224>
 801189c:	2701      	movs	r7, #1
 801189e:	e023      	b.n	80118e8 <rmw_wait+0x1fc>
 80118a0:	68a0      	ldr	r0, [r4, #8]
 80118a2:	2100      	movs	r1, #0
 80118a4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80118a8:	f7fa fea0 	bl	800c5ec <uxr_run_session_timeout>
 80118ac:	6864      	ldr	r4, [r4, #4]
 80118ae:	2c00      	cmp	r4, #0
 80118b0:	d1f6      	bne.n	80118a0 <rmw_wait+0x1b4>
 80118b2:	e7b0      	b.n	8011816 <rmw_wait+0x12a>
 80118b4:	e9d9 3200 	ldrd	r3, r2, [r9]
 80118b8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80118bc:	3401      	adds	r4, #1
 80118be:	42a3      	cmp	r3, r4
 80118c0:	d8b4      	bhi.n	801182c <rmw_wait+0x140>
 80118c2:	e7c2      	b.n	801184a <rmw_wait+0x15e>
 80118c4:	e9d8 3200 	ldrd	r3, r2, [r8]
 80118c8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80118cc:	3401      	adds	r4, #1
 80118ce:	429c      	cmp	r4, r3
 80118d0:	d3c2      	bcc.n	8011858 <rmw_wait+0x16c>
 80118d2:	e7ce      	b.n	8011872 <rmw_wait+0x186>
 80118d4:	e9d5 3200 	ldrd	r3, r2, [r5]
 80118d8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80118dc:	3401      	adds	r4, #1
 80118de:	42a3      	cmp	r3, r4
 80118e0:	d8cc      	bhi.n	801187c <rmw_wait+0x190>
 80118e2:	b1a6      	cbz	r6, 801190e <rmw_wait+0x222>
 80118e4:	6834      	ldr	r4, [r6, #0]
 80118e6:	b194      	cbz	r4, 801190e <rmw_wait+0x222>
 80118e8:	2300      	movs	r3, #0
 80118ea:	461d      	mov	r5, r3
 80118ec:	e004      	b.n	80118f8 <rmw_wait+0x20c>
 80118ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80118f2:	3301      	adds	r3, #1
 80118f4:	42a3      	cmp	r3, r4
 80118f6:	d00a      	beq.n	801190e <rmw_wait+0x222>
 80118f8:	6870      	ldr	r0, [r6, #4]
 80118fa:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80118fe:	7c0a      	ldrb	r2, [r1, #16]
 8011900:	2a00      	cmp	r2, #0
 8011902:	d0f4      	beq.n	80118ee <rmw_wait+0x202>
 8011904:	3301      	adds	r3, #1
 8011906:	4617      	mov	r7, r2
 8011908:	740d      	strb	r5, [r1, #16]
 801190a:	42a3      	cmp	r3, r4
 801190c:	d1f4      	bne.n	80118f8 <rmw_wait+0x20c>
 801190e:	b147      	cbz	r7, 8011922 <rmw_wait+0x236>
 8011910:	2000      	movs	r0, #0
 8011912:	b009      	add	sp, #36	; 0x24
 8011914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011918:	b11e      	cbz	r6, 8011922 <rmw_wait+0x236>
 801191a:	6834      	ldr	r4, [r6, #0]
 801191c:	462f      	mov	r7, r5
 801191e:	2c00      	cmp	r4, #0
 8011920:	d1e2      	bne.n	80118e8 <rmw_wait+0x1fc>
 8011922:	2002      	movs	r0, #2
 8011924:	b009      	add	sp, #36	; 0x24
 8011926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801192a:	4639      	mov	r1, r7
 801192c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011930:	f7fa fe76 	bl	800c620 <uxr_run_session_until_data>
 8011934:	6864      	ldr	r4, [r4, #4]
 8011936:	2c00      	cmp	r4, #0
 8011938:	f47f af62 	bne.w	8011800 <rmw_wait+0x114>
 801193c:	e76b      	b.n	8011816 <rmw_wait+0x12a>
 801193e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011942:	f7ff fc27 	bl	8011194 <rmw_time_total_nsec>
 8011946:	2300      	movs	r3, #0
 8011948:	4a19      	ldr	r2, [pc, #100]	; (80119b0 <rmw_wait+0x2c4>)
 801194a:	f7ee fd31 	bl	80003b0 <__aeabi_uldivmod>
 801194e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8011952:	4607      	mov	r7, r0
 8011954:	f171 0300 	sbcs.w	r3, r1, #0
 8011958:	bfa8      	it	ge
 801195a:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801195e:	e6e5      	b.n	801172c <rmw_wait+0x40>
 8011960:	f1b8 0f00 	cmp.w	r8, #0
 8011964:	d00f      	beq.n	8011986 <rmw_wait+0x29a>
 8011966:	f8d8 3000 	ldr.w	r3, [r8]
 801196a:	b193      	cbz	r3, 8011992 <rmw_wait+0x2a6>
 801196c:	464f      	mov	r7, r9
 801196e:	e772      	b.n	8011856 <rmw_wait+0x16a>
 8011970:	f1b8 0f00 	cmp.w	r8, #0
 8011974:	d007      	beq.n	8011986 <rmw_wait+0x29a>
 8011976:	f8d8 3000 	ldr.w	r3, [r8]
 801197a:	2b00      	cmp	r3, #0
 801197c:	f47f af6b 	bne.w	8011856 <rmw_wait+0x16a>
 8011980:	b155      	cbz	r5, 8011998 <rmw_wait+0x2ac>
 8011982:	461f      	mov	r7, r3
 8011984:	e777      	b.n	8011876 <rmw_wait+0x18a>
 8011986:	2d00      	cmp	r5, #0
 8011988:	d0c6      	beq.n	8011918 <rmw_wait+0x22c>
 801198a:	682b      	ldr	r3, [r5, #0]
 801198c:	b143      	cbz	r3, 80119a0 <rmw_wait+0x2b4>
 801198e:	4647      	mov	r7, r8
 8011990:	e773      	b.n	801187a <rmw_wait+0x18e>
 8011992:	b10d      	cbz	r5, 8011998 <rmw_wait+0x2ac>
 8011994:	464f      	mov	r7, r9
 8011996:	e76e      	b.n	8011876 <rmw_wait+0x18a>
 8011998:	462f      	mov	r7, r5
 801199a:	2e00      	cmp	r6, #0
 801199c:	d1a2      	bne.n	80118e4 <rmw_wait+0x1f8>
 801199e:	e7c0      	b.n	8011922 <rmw_wait+0x236>
 80119a0:	4647      	mov	r7, r8
 80119a2:	2e00      	cmp	r6, #0
 80119a4:	d19e      	bne.n	80118e4 <rmw_wait+0x1f8>
 80119a6:	e7bc      	b.n	8011922 <rmw_wait+0x236>
 80119a8:	080147f8 	.word	0x080147f8
 80119ac:	20010d94 	.word	0x20010d94
 80119b0:	000f4240 	.word	0x000f4240

080119b4 <rmw_create_wait_set>:
 80119b4:	b508      	push	{r3, lr}
 80119b6:	4803      	ldr	r0, [pc, #12]	; (80119c4 <rmw_create_wait_set+0x10>)
 80119b8:	f7ff fd8a 	bl	80114d0 <get_memory>
 80119bc:	b108      	cbz	r0, 80119c2 <rmw_create_wait_set+0xe>
 80119be:	6880      	ldr	r0, [r0, #8]
 80119c0:	3010      	adds	r0, #16
 80119c2:	bd08      	pop	{r3, pc}
 80119c4:	20010dd4 	.word	0x20010dd4

080119c8 <rmw_destroy_wait_set>:
 80119c8:	b508      	push	{r3, lr}
 80119ca:	4b08      	ldr	r3, [pc, #32]	; (80119ec <rmw_destroy_wait_set+0x24>)
 80119cc:	6819      	ldr	r1, [r3, #0]
 80119ce:	b911      	cbnz	r1, 80119d6 <rmw_destroy_wait_set+0xe>
 80119d0:	e00a      	b.n	80119e8 <rmw_destroy_wait_set+0x20>
 80119d2:	6849      	ldr	r1, [r1, #4]
 80119d4:	b141      	cbz	r1, 80119e8 <rmw_destroy_wait_set+0x20>
 80119d6:	688b      	ldr	r3, [r1, #8]
 80119d8:	3310      	adds	r3, #16
 80119da:	4298      	cmp	r0, r3
 80119dc:	d1f9      	bne.n	80119d2 <rmw_destroy_wait_set+0xa>
 80119de:	4803      	ldr	r0, [pc, #12]	; (80119ec <rmw_destroy_wait_set+0x24>)
 80119e0:	f7ff fd86 	bl	80114f0 <put_memory>
 80119e4:	2000      	movs	r0, #0
 80119e6:	bd08      	pop	{r3, pc}
 80119e8:	2001      	movs	r0, #1
 80119ea:	bd08      	pop	{r3, pc}
 80119ec:	20010dd4 	.word	0x20010dd4

080119f0 <rmw_uros_epoch_nanos>:
 80119f0:	4b05      	ldr	r3, [pc, #20]	; (8011a08 <rmw_uros_epoch_nanos+0x18>)
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	b123      	cbz	r3, 8011a00 <rmw_uros_epoch_nanos+0x10>
 80119f6:	6898      	ldr	r0, [r3, #8]
 80119f8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80119fc:	f7fa ba6c 	b.w	800bed8 <uxr_epoch_nanos>
 8011a00:	2000      	movs	r0, #0
 8011a02:	2100      	movs	r1, #0
 8011a04:	4770      	bx	lr
 8011a06:	bf00      	nop
 8011a08:	20010d94 	.word	0x20010d94

08011a0c <ucdr_serialize_endian_array_char>:
 8011a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a10:	4619      	mov	r1, r3
 8011a12:	461f      	mov	r7, r3
 8011a14:	4605      	mov	r5, r0
 8011a16:	4690      	mov	r8, r2
 8011a18:	f7f6 fc78 	bl	800830c <ucdr_check_buffer_available_for>
 8011a1c:	b9e0      	cbnz	r0, 8011a58 <ucdr_serialize_endian_array_char+0x4c>
 8011a1e:	463e      	mov	r6, r7
 8011a20:	e00b      	b.n	8011a3a <ucdr_serialize_endian_array_char+0x2e>
 8011a22:	4441      	add	r1, r8
 8011a24:	68a8      	ldr	r0, [r5, #8]
 8011a26:	4622      	mov	r2, r4
 8011a28:	1b36      	subs	r6, r6, r4
 8011a2a:	f002 f80a 	bl	8013a42 <memcpy>
 8011a2e:	68ab      	ldr	r3, [r5, #8]
 8011a30:	6928      	ldr	r0, [r5, #16]
 8011a32:	4423      	add	r3, r4
 8011a34:	4420      	add	r0, r4
 8011a36:	60ab      	str	r3, [r5, #8]
 8011a38:	6128      	str	r0, [r5, #16]
 8011a3a:	4631      	mov	r1, r6
 8011a3c:	2201      	movs	r2, #1
 8011a3e:	4628      	mov	r0, r5
 8011a40:	f7f6 fcee 	bl	8008420 <ucdr_check_final_buffer_behavior_array>
 8011a44:	1bb9      	subs	r1, r7, r6
 8011a46:	4604      	mov	r4, r0
 8011a48:	2800      	cmp	r0, #0
 8011a4a:	d1ea      	bne.n	8011a22 <ucdr_serialize_endian_array_char+0x16>
 8011a4c:	2301      	movs	r3, #1
 8011a4e:	7da8      	ldrb	r0, [r5, #22]
 8011a50:	756b      	strb	r3, [r5, #21]
 8011a52:	4058      	eors	r0, r3
 8011a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a58:	463a      	mov	r2, r7
 8011a5a:	4641      	mov	r1, r8
 8011a5c:	68a8      	ldr	r0, [r5, #8]
 8011a5e:	f001 fff0 	bl	8013a42 <memcpy>
 8011a62:	68aa      	ldr	r2, [r5, #8]
 8011a64:	692b      	ldr	r3, [r5, #16]
 8011a66:	443a      	add	r2, r7
 8011a68:	443b      	add	r3, r7
 8011a6a:	60aa      	str	r2, [r5, #8]
 8011a6c:	612b      	str	r3, [r5, #16]
 8011a6e:	e7ed      	b.n	8011a4c <ucdr_serialize_endian_array_char+0x40>

08011a70 <ucdr_deserialize_endian_array_char>:
 8011a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a74:	4619      	mov	r1, r3
 8011a76:	461f      	mov	r7, r3
 8011a78:	4605      	mov	r5, r0
 8011a7a:	4690      	mov	r8, r2
 8011a7c:	f7f6 fc46 	bl	800830c <ucdr_check_buffer_available_for>
 8011a80:	b9e8      	cbnz	r0, 8011abe <ucdr_deserialize_endian_array_char+0x4e>
 8011a82:	463e      	mov	r6, r7
 8011a84:	e00c      	b.n	8011aa0 <ucdr_deserialize_endian_array_char+0x30>
 8011a86:	eb08 0003 	add.w	r0, r8, r3
 8011a8a:	68a9      	ldr	r1, [r5, #8]
 8011a8c:	4622      	mov	r2, r4
 8011a8e:	1b36      	subs	r6, r6, r4
 8011a90:	f001 ffd7 	bl	8013a42 <memcpy>
 8011a94:	68ab      	ldr	r3, [r5, #8]
 8011a96:	6928      	ldr	r0, [r5, #16]
 8011a98:	4423      	add	r3, r4
 8011a9a:	4420      	add	r0, r4
 8011a9c:	60ab      	str	r3, [r5, #8]
 8011a9e:	6128      	str	r0, [r5, #16]
 8011aa0:	4631      	mov	r1, r6
 8011aa2:	2201      	movs	r2, #1
 8011aa4:	4628      	mov	r0, r5
 8011aa6:	f7f6 fcbb 	bl	8008420 <ucdr_check_final_buffer_behavior_array>
 8011aaa:	1bbb      	subs	r3, r7, r6
 8011aac:	4604      	mov	r4, r0
 8011aae:	2800      	cmp	r0, #0
 8011ab0:	d1e9      	bne.n	8011a86 <ucdr_deserialize_endian_array_char+0x16>
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	7da8      	ldrb	r0, [r5, #22]
 8011ab6:	756b      	strb	r3, [r5, #21]
 8011ab8:	4058      	eors	r0, r3
 8011aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011abe:	463a      	mov	r2, r7
 8011ac0:	68a9      	ldr	r1, [r5, #8]
 8011ac2:	4640      	mov	r0, r8
 8011ac4:	f001 ffbd 	bl	8013a42 <memcpy>
 8011ac8:	68aa      	ldr	r2, [r5, #8]
 8011aca:	692b      	ldr	r3, [r5, #16]
 8011acc:	443a      	add	r2, r7
 8011ace:	443b      	add	r3, r7
 8011ad0:	60aa      	str	r2, [r5, #8]
 8011ad2:	612b      	str	r3, [r5, #16]
 8011ad4:	e7ed      	b.n	8011ab2 <ucdr_deserialize_endian_array_char+0x42>
 8011ad6:	bf00      	nop

08011ad8 <ucdr_serialize_array_uint8_t>:
 8011ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011adc:	4688      	mov	r8, r1
 8011ade:	4611      	mov	r1, r2
 8011ae0:	4617      	mov	r7, r2
 8011ae2:	4605      	mov	r5, r0
 8011ae4:	f7f6 fc12 	bl	800830c <ucdr_check_buffer_available_for>
 8011ae8:	b9e0      	cbnz	r0, 8011b24 <ucdr_serialize_array_uint8_t+0x4c>
 8011aea:	463e      	mov	r6, r7
 8011aec:	e00b      	b.n	8011b06 <ucdr_serialize_array_uint8_t+0x2e>
 8011aee:	4441      	add	r1, r8
 8011af0:	68a8      	ldr	r0, [r5, #8]
 8011af2:	4622      	mov	r2, r4
 8011af4:	1b36      	subs	r6, r6, r4
 8011af6:	f001 ffa4 	bl	8013a42 <memcpy>
 8011afa:	68ab      	ldr	r3, [r5, #8]
 8011afc:	6928      	ldr	r0, [r5, #16]
 8011afe:	4423      	add	r3, r4
 8011b00:	4420      	add	r0, r4
 8011b02:	60ab      	str	r3, [r5, #8]
 8011b04:	6128      	str	r0, [r5, #16]
 8011b06:	4631      	mov	r1, r6
 8011b08:	2201      	movs	r2, #1
 8011b0a:	4628      	mov	r0, r5
 8011b0c:	f7f6 fc88 	bl	8008420 <ucdr_check_final_buffer_behavior_array>
 8011b10:	1bb9      	subs	r1, r7, r6
 8011b12:	4604      	mov	r4, r0
 8011b14:	2800      	cmp	r0, #0
 8011b16:	d1ea      	bne.n	8011aee <ucdr_serialize_array_uint8_t+0x16>
 8011b18:	2301      	movs	r3, #1
 8011b1a:	7da8      	ldrb	r0, [r5, #22]
 8011b1c:	756b      	strb	r3, [r5, #21]
 8011b1e:	4058      	eors	r0, r3
 8011b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b24:	463a      	mov	r2, r7
 8011b26:	4641      	mov	r1, r8
 8011b28:	68a8      	ldr	r0, [r5, #8]
 8011b2a:	f001 ff8a 	bl	8013a42 <memcpy>
 8011b2e:	68aa      	ldr	r2, [r5, #8]
 8011b30:	692b      	ldr	r3, [r5, #16]
 8011b32:	443a      	add	r2, r7
 8011b34:	443b      	add	r3, r7
 8011b36:	60aa      	str	r2, [r5, #8]
 8011b38:	612b      	str	r3, [r5, #16]
 8011b3a:	e7ed      	b.n	8011b18 <ucdr_serialize_array_uint8_t+0x40>

08011b3c <ucdr_serialize_endian_array_uint8_t>:
 8011b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b40:	4619      	mov	r1, r3
 8011b42:	461f      	mov	r7, r3
 8011b44:	4605      	mov	r5, r0
 8011b46:	4690      	mov	r8, r2
 8011b48:	f7f6 fbe0 	bl	800830c <ucdr_check_buffer_available_for>
 8011b4c:	b9e0      	cbnz	r0, 8011b88 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8011b4e:	463e      	mov	r6, r7
 8011b50:	e00b      	b.n	8011b6a <ucdr_serialize_endian_array_uint8_t+0x2e>
 8011b52:	4441      	add	r1, r8
 8011b54:	68a8      	ldr	r0, [r5, #8]
 8011b56:	4622      	mov	r2, r4
 8011b58:	1b36      	subs	r6, r6, r4
 8011b5a:	f001 ff72 	bl	8013a42 <memcpy>
 8011b5e:	68ab      	ldr	r3, [r5, #8]
 8011b60:	6928      	ldr	r0, [r5, #16]
 8011b62:	4423      	add	r3, r4
 8011b64:	4420      	add	r0, r4
 8011b66:	60ab      	str	r3, [r5, #8]
 8011b68:	6128      	str	r0, [r5, #16]
 8011b6a:	4631      	mov	r1, r6
 8011b6c:	2201      	movs	r2, #1
 8011b6e:	4628      	mov	r0, r5
 8011b70:	f7f6 fc56 	bl	8008420 <ucdr_check_final_buffer_behavior_array>
 8011b74:	1bb9      	subs	r1, r7, r6
 8011b76:	4604      	mov	r4, r0
 8011b78:	2800      	cmp	r0, #0
 8011b7a:	d1ea      	bne.n	8011b52 <ucdr_serialize_endian_array_uint8_t+0x16>
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	7da8      	ldrb	r0, [r5, #22]
 8011b80:	756b      	strb	r3, [r5, #21]
 8011b82:	4058      	eors	r0, r3
 8011b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b88:	463a      	mov	r2, r7
 8011b8a:	4641      	mov	r1, r8
 8011b8c:	68a8      	ldr	r0, [r5, #8]
 8011b8e:	f001 ff58 	bl	8013a42 <memcpy>
 8011b92:	68aa      	ldr	r2, [r5, #8]
 8011b94:	692b      	ldr	r3, [r5, #16]
 8011b96:	443a      	add	r2, r7
 8011b98:	443b      	add	r3, r7
 8011b9a:	60aa      	str	r2, [r5, #8]
 8011b9c:	612b      	str	r3, [r5, #16]
 8011b9e:	e7ed      	b.n	8011b7c <ucdr_serialize_endian_array_uint8_t+0x40>

08011ba0 <ucdr_deserialize_array_uint8_t>:
 8011ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ba4:	4688      	mov	r8, r1
 8011ba6:	4611      	mov	r1, r2
 8011ba8:	4617      	mov	r7, r2
 8011baa:	4605      	mov	r5, r0
 8011bac:	f7f6 fbae 	bl	800830c <ucdr_check_buffer_available_for>
 8011bb0:	b9e8      	cbnz	r0, 8011bee <ucdr_deserialize_array_uint8_t+0x4e>
 8011bb2:	463e      	mov	r6, r7
 8011bb4:	e00c      	b.n	8011bd0 <ucdr_deserialize_array_uint8_t+0x30>
 8011bb6:	eb08 0003 	add.w	r0, r8, r3
 8011bba:	68a9      	ldr	r1, [r5, #8]
 8011bbc:	4622      	mov	r2, r4
 8011bbe:	1b36      	subs	r6, r6, r4
 8011bc0:	f001 ff3f 	bl	8013a42 <memcpy>
 8011bc4:	68ab      	ldr	r3, [r5, #8]
 8011bc6:	6928      	ldr	r0, [r5, #16]
 8011bc8:	4423      	add	r3, r4
 8011bca:	4420      	add	r0, r4
 8011bcc:	60ab      	str	r3, [r5, #8]
 8011bce:	6128      	str	r0, [r5, #16]
 8011bd0:	4631      	mov	r1, r6
 8011bd2:	2201      	movs	r2, #1
 8011bd4:	4628      	mov	r0, r5
 8011bd6:	f7f6 fc23 	bl	8008420 <ucdr_check_final_buffer_behavior_array>
 8011bda:	1bbb      	subs	r3, r7, r6
 8011bdc:	4604      	mov	r4, r0
 8011bde:	2800      	cmp	r0, #0
 8011be0:	d1e9      	bne.n	8011bb6 <ucdr_deserialize_array_uint8_t+0x16>
 8011be2:	2301      	movs	r3, #1
 8011be4:	7da8      	ldrb	r0, [r5, #22]
 8011be6:	756b      	strb	r3, [r5, #21]
 8011be8:	4058      	eors	r0, r3
 8011bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bee:	463a      	mov	r2, r7
 8011bf0:	68a9      	ldr	r1, [r5, #8]
 8011bf2:	4640      	mov	r0, r8
 8011bf4:	f001 ff25 	bl	8013a42 <memcpy>
 8011bf8:	68aa      	ldr	r2, [r5, #8]
 8011bfa:	692b      	ldr	r3, [r5, #16]
 8011bfc:	443a      	add	r2, r7
 8011bfe:	443b      	add	r3, r7
 8011c00:	60aa      	str	r2, [r5, #8]
 8011c02:	612b      	str	r3, [r5, #16]
 8011c04:	e7ed      	b.n	8011be2 <ucdr_deserialize_array_uint8_t+0x42>
 8011c06:	bf00      	nop

08011c08 <ucdr_deserialize_endian_array_uint8_t>:
 8011c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c0c:	4619      	mov	r1, r3
 8011c0e:	461f      	mov	r7, r3
 8011c10:	4605      	mov	r5, r0
 8011c12:	4690      	mov	r8, r2
 8011c14:	f7f6 fb7a 	bl	800830c <ucdr_check_buffer_available_for>
 8011c18:	b9e8      	cbnz	r0, 8011c56 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8011c1a:	463e      	mov	r6, r7
 8011c1c:	e00c      	b.n	8011c38 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8011c1e:	eb08 0003 	add.w	r0, r8, r3
 8011c22:	68a9      	ldr	r1, [r5, #8]
 8011c24:	4622      	mov	r2, r4
 8011c26:	1b36      	subs	r6, r6, r4
 8011c28:	f001 ff0b 	bl	8013a42 <memcpy>
 8011c2c:	68ab      	ldr	r3, [r5, #8]
 8011c2e:	6928      	ldr	r0, [r5, #16]
 8011c30:	4423      	add	r3, r4
 8011c32:	4420      	add	r0, r4
 8011c34:	60ab      	str	r3, [r5, #8]
 8011c36:	6128      	str	r0, [r5, #16]
 8011c38:	4631      	mov	r1, r6
 8011c3a:	2201      	movs	r2, #1
 8011c3c:	4628      	mov	r0, r5
 8011c3e:	f7f6 fbef 	bl	8008420 <ucdr_check_final_buffer_behavior_array>
 8011c42:	1bbb      	subs	r3, r7, r6
 8011c44:	4604      	mov	r4, r0
 8011c46:	2800      	cmp	r0, #0
 8011c48:	d1e9      	bne.n	8011c1e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	7da8      	ldrb	r0, [r5, #22]
 8011c4e:	756b      	strb	r3, [r5, #21]
 8011c50:	4058      	eors	r0, r3
 8011c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c56:	463a      	mov	r2, r7
 8011c58:	68a9      	ldr	r1, [r5, #8]
 8011c5a:	4640      	mov	r0, r8
 8011c5c:	f001 fef1 	bl	8013a42 <memcpy>
 8011c60:	68aa      	ldr	r2, [r5, #8]
 8011c62:	692b      	ldr	r3, [r5, #16]
 8011c64:	443a      	add	r2, r7
 8011c66:	443b      	add	r3, r7
 8011c68:	60aa      	str	r2, [r5, #8]
 8011c6a:	612b      	str	r3, [r5, #16]
 8011c6c:	e7ed      	b.n	8011c4a <ucdr_deserialize_endian_array_uint8_t+0x42>
 8011c6e:	bf00      	nop

08011c70 <ucdr_serialize_sequence_char>:
 8011c70:	b570      	push	{r4, r5, r6, lr}
 8011c72:	4615      	mov	r5, r2
 8011c74:	460e      	mov	r6, r1
 8011c76:	7d01      	ldrb	r1, [r0, #20]
 8011c78:	4604      	mov	r4, r0
 8011c7a:	f7f5 fd07 	bl	800768c <ucdr_serialize_endian_uint32_t>
 8011c7e:	b90d      	cbnz	r5, 8011c84 <ucdr_serialize_sequence_char+0x14>
 8011c80:	2001      	movs	r0, #1
 8011c82:	bd70      	pop	{r4, r5, r6, pc}
 8011c84:	462b      	mov	r3, r5
 8011c86:	4632      	mov	r2, r6
 8011c88:	7d21      	ldrb	r1, [r4, #20]
 8011c8a:	4620      	mov	r0, r4
 8011c8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c90:	f7ff bebc 	b.w	8011a0c <ucdr_serialize_endian_array_char>

08011c94 <ucdr_deserialize_sequence_char>:
 8011c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c98:	461d      	mov	r5, r3
 8011c9a:	4616      	mov	r6, r2
 8011c9c:	460f      	mov	r7, r1
 8011c9e:	461a      	mov	r2, r3
 8011ca0:	7d01      	ldrb	r1, [r0, #20]
 8011ca2:	4604      	mov	r4, r0
 8011ca4:	f7f5 fe1a 	bl	80078dc <ucdr_deserialize_endian_uint32_t>
 8011ca8:	682b      	ldr	r3, [r5, #0]
 8011caa:	429e      	cmp	r6, r3
 8011cac:	d201      	bcs.n	8011cb2 <ucdr_deserialize_sequence_char+0x1e>
 8011cae:	2201      	movs	r2, #1
 8011cb0:	75a2      	strb	r2, [r4, #22]
 8011cb2:	b913      	cbnz	r3, 8011cba <ucdr_deserialize_sequence_char+0x26>
 8011cb4:	2001      	movs	r0, #1
 8011cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cba:	463a      	mov	r2, r7
 8011cbc:	7d21      	ldrb	r1, [r4, #20]
 8011cbe:	4620      	mov	r0, r4
 8011cc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011cc4:	f7ff bed4 	b.w	8011a70 <ucdr_deserialize_endian_array_char>

08011cc8 <ucdr_serialize_sequence_uint8_t>:
 8011cc8:	b570      	push	{r4, r5, r6, lr}
 8011cca:	4615      	mov	r5, r2
 8011ccc:	460e      	mov	r6, r1
 8011cce:	7d01      	ldrb	r1, [r0, #20]
 8011cd0:	4604      	mov	r4, r0
 8011cd2:	f7f5 fcdb 	bl	800768c <ucdr_serialize_endian_uint32_t>
 8011cd6:	b90d      	cbnz	r5, 8011cdc <ucdr_serialize_sequence_uint8_t+0x14>
 8011cd8:	2001      	movs	r0, #1
 8011cda:	bd70      	pop	{r4, r5, r6, pc}
 8011cdc:	462b      	mov	r3, r5
 8011cde:	4632      	mov	r2, r6
 8011ce0:	7d21      	ldrb	r1, [r4, #20]
 8011ce2:	4620      	mov	r0, r4
 8011ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ce8:	f7ff bf28 	b.w	8011b3c <ucdr_serialize_endian_array_uint8_t>

08011cec <ucdr_deserialize_sequence_uint8_t>:
 8011cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cf0:	461d      	mov	r5, r3
 8011cf2:	4616      	mov	r6, r2
 8011cf4:	460f      	mov	r7, r1
 8011cf6:	461a      	mov	r2, r3
 8011cf8:	7d01      	ldrb	r1, [r0, #20]
 8011cfa:	4604      	mov	r4, r0
 8011cfc:	f7f5 fdee 	bl	80078dc <ucdr_deserialize_endian_uint32_t>
 8011d00:	682b      	ldr	r3, [r5, #0]
 8011d02:	429e      	cmp	r6, r3
 8011d04:	d201      	bcs.n	8011d0a <ucdr_deserialize_sequence_uint8_t+0x1e>
 8011d06:	2201      	movs	r2, #1
 8011d08:	75a2      	strb	r2, [r4, #22]
 8011d0a:	b913      	cbnz	r3, 8011d12 <ucdr_deserialize_sequence_uint8_t+0x26>
 8011d0c:	2001      	movs	r0, #1
 8011d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d12:	463a      	mov	r2, r7
 8011d14:	7d21      	ldrb	r1, [r4, #20]
 8011d16:	4620      	mov	r0, r4
 8011d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d1c:	f7ff bf74 	b.w	8011c08 <ucdr_deserialize_endian_array_uint8_t>

08011d20 <ucdr_serialize_string>:
 8011d20:	b510      	push	{r4, lr}
 8011d22:	b082      	sub	sp, #8
 8011d24:	4604      	mov	r4, r0
 8011d26:	4608      	mov	r0, r1
 8011d28:	9101      	str	r1, [sp, #4]
 8011d2a:	f7ee fa93 	bl	8000254 <strlen>
 8011d2e:	4602      	mov	r2, r0
 8011d30:	9901      	ldr	r1, [sp, #4]
 8011d32:	4620      	mov	r0, r4
 8011d34:	3201      	adds	r2, #1
 8011d36:	b002      	add	sp, #8
 8011d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d3c:	f7ff bf98 	b.w	8011c70 <ucdr_serialize_sequence_char>

08011d40 <ucdr_deserialize_string>:
 8011d40:	b500      	push	{lr}
 8011d42:	b083      	sub	sp, #12
 8011d44:	ab01      	add	r3, sp, #4
 8011d46:	f7ff ffa5 	bl	8011c94 <ucdr_deserialize_sequence_char>
 8011d4a:	b003      	add	sp, #12
 8011d4c:	f85d fb04 	ldr.w	pc, [sp], #4

08011d50 <uxr_init_input_best_effort_stream>:
 8011d50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011d54:	8003      	strh	r3, [r0, #0]
 8011d56:	4770      	bx	lr

08011d58 <uxr_reset_input_best_effort_stream>:
 8011d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011d5c:	8003      	strh	r3, [r0, #0]
 8011d5e:	4770      	bx	lr

08011d60 <uxr_receive_best_effort_message>:
 8011d60:	b538      	push	{r3, r4, r5, lr}
 8011d62:	4604      	mov	r4, r0
 8011d64:	8800      	ldrh	r0, [r0, #0]
 8011d66:	460d      	mov	r5, r1
 8011d68:	f000 fd24 	bl	80127b4 <uxr_seq_num_cmp>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	0fc0      	lsrs	r0, r0, #31
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	bfb8      	it	lt
 8011d74:	8025      	strhlt	r5, [r4, #0]
 8011d76:	bd38      	pop	{r3, r4, r5, pc}

08011d78 <on_full_input_buffer>:
 8011d78:	b570      	push	{r4, r5, r6, lr}
 8011d7a:	460c      	mov	r4, r1
 8011d7c:	4605      	mov	r5, r0
 8011d7e:	8908      	ldrh	r0, [r1, #8]
 8011d80:	682b      	ldr	r3, [r5, #0]
 8011d82:	7d26      	ldrb	r6, [r4, #20]
 8011d84:	e9d1 1200 	ldrd	r1, r2, [r1]
 8011d88:	fbb2 f2f0 	udiv	r2, r2, r0
 8011d8c:	eba3 0c01 	sub.w	ip, r3, r1
 8011d90:	fbbc fcf2 	udiv	ip, ip, r2
 8011d94:	f10c 0c01 	add.w	ip, ip, #1
 8011d98:	fa1f f38c 	uxth.w	r3, ip
 8011d9c:	fbb3 fcf0 	udiv	ip, r3, r0
 8011da0:	fb00 331c 	mls	r3, r0, ip, r3
 8011da4:	b29b      	uxth	r3, r3
 8011da6:	fb02 f303 	mul.w	r3, r2, r3
 8011daa:	1d18      	adds	r0, r3, #4
 8011dac:	4408      	add	r0, r1
 8011dae:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8011db2:	b116      	cbz	r6, 8011dba <on_full_input_buffer+0x42>
 8011db4:	2600      	movs	r6, #0
 8011db6:	f840 6c04 	str.w	r6, [r0, #-4]
 8011dba:	2a03      	cmp	r2, #3
 8011dbc:	d801      	bhi.n	8011dc2 <on_full_input_buffer+0x4a>
 8011dbe:	2001      	movs	r0, #1
 8011dc0:	bd70      	pop	{r4, r5, r6, pc}
 8011dc2:	3308      	adds	r3, #8
 8011dc4:	4628      	mov	r0, r5
 8011dc6:	3a04      	subs	r2, #4
 8011dc8:	4419      	add	r1, r3
 8011dca:	692b      	ldr	r3, [r5, #16]
 8011dcc:	f7f6 faea 	bl	80083a4 <ucdr_init_buffer_origin>
 8011dd0:	4628      	mov	r0, r5
 8011dd2:	4622      	mov	r2, r4
 8011dd4:	4902      	ldr	r1, [pc, #8]	; (8011de0 <on_full_input_buffer+0x68>)
 8011dd6:	f7f6 fac1 	bl	800835c <ucdr_set_on_full_buffer_callback>
 8011dda:	2000      	movs	r0, #0
 8011ddc:	bd70      	pop	{r4, r5, r6, pc}
 8011dde:	bf00      	nop
 8011de0:	08011d79 	.word	0x08011d79

08011de4 <uxr_init_input_reliable_stream>:
 8011de4:	b510      	push	{r4, lr}
 8011de6:	e9c0 1200 	strd	r1, r2, [r0]
 8011dea:	2400      	movs	r4, #0
 8011dec:	9a02      	ldr	r2, [sp, #8]
 8011dee:	8103      	strh	r3, [r0, #8]
 8011df0:	6102      	str	r2, [r0, #16]
 8011df2:	7504      	strb	r4, [r0, #20]
 8011df4:	b1c3      	cbz	r3, 8011e28 <uxr_init_input_reliable_stream+0x44>
 8011df6:	600c      	str	r4, [r1, #0]
 8011df8:	8901      	ldrh	r1, [r0, #8]
 8011dfa:	2901      	cmp	r1, #1
 8011dfc:	d914      	bls.n	8011e28 <uxr_init_input_reliable_stream+0x44>
 8011dfe:	f04f 0c01 	mov.w	ip, #1
 8011e02:	6843      	ldr	r3, [r0, #4]
 8011e04:	f10c 0e01 	add.w	lr, ip, #1
 8011e08:	fbbc f2f1 	udiv	r2, ip, r1
 8011e0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e10:	fb01 c212 	mls	r2, r1, r2, ip
 8011e14:	fa1f fc8e 	uxth.w	ip, lr
 8011e18:	b292      	uxth	r2, r2
 8011e1a:	fb02 f303 	mul.w	r3, r2, r3
 8011e1e:	6802      	ldr	r2, [r0, #0]
 8011e20:	50d4      	str	r4, [r2, r3]
 8011e22:	8901      	ldrh	r1, [r0, #8]
 8011e24:	4561      	cmp	r1, ip
 8011e26:	d8ec      	bhi.n	8011e02 <uxr_init_input_reliable_stream+0x1e>
 8011e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e2c:	60c3      	str	r3, [r0, #12]
 8011e2e:	bd10      	pop	{r4, pc}

08011e30 <uxr_reset_input_reliable_stream>:
 8011e30:	8901      	ldrh	r1, [r0, #8]
 8011e32:	b1d9      	cbz	r1, 8011e6c <uxr_reset_input_reliable_stream+0x3c>
 8011e34:	b510      	push	{r4, lr}
 8011e36:	f04f 0e00 	mov.w	lr, #0
 8011e3a:	46f4      	mov	ip, lr
 8011e3c:	4674      	mov	r4, lr
 8011e3e:	6843      	ldr	r3, [r0, #4]
 8011e40:	f10e 0e01 	add.w	lr, lr, #1
 8011e44:	fbbc f2f1 	udiv	r2, ip, r1
 8011e48:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e4c:	fb01 c212 	mls	r2, r1, r2, ip
 8011e50:	fa1f fc8e 	uxth.w	ip, lr
 8011e54:	b292      	uxth	r2, r2
 8011e56:	fb02 f303 	mul.w	r3, r2, r3
 8011e5a:	6802      	ldr	r2, [r0, #0]
 8011e5c:	50d4      	str	r4, [r2, r3]
 8011e5e:	8901      	ldrh	r1, [r0, #8]
 8011e60:	4561      	cmp	r1, ip
 8011e62:	d8ec      	bhi.n	8011e3e <uxr_reset_input_reliable_stream+0xe>
 8011e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e68:	60c3      	str	r3, [r0, #12]
 8011e6a:	bd10      	pop	{r4, pc}
 8011e6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e70:	60c3      	str	r3, [r0, #12]
 8011e72:	4770      	bx	lr

08011e74 <uxr_receive_reliable_message>:
 8011e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e78:	4604      	mov	r4, r0
 8011e7a:	460d      	mov	r5, r1
 8011e7c:	8901      	ldrh	r1, [r0, #8]
 8011e7e:	4617      	mov	r7, r2
 8011e80:	8980      	ldrh	r0, [r0, #12]
 8011e82:	4698      	mov	r8, r3
 8011e84:	f000 fc8e 	bl	80127a4 <uxr_seq_num_add>
 8011e88:	4629      	mov	r1, r5
 8011e8a:	4606      	mov	r6, r0
 8011e8c:	89a0      	ldrh	r0, [r4, #12]
 8011e8e:	f000 fc91 	bl	80127b4 <uxr_seq_num_cmp>
 8011e92:	2800      	cmp	r0, #0
 8011e94:	db0a      	blt.n	8011eac <uxr_receive_reliable_message+0x38>
 8011e96:	2600      	movs	r6, #0
 8011e98:	4629      	mov	r1, r5
 8011e9a:	89e0      	ldrh	r0, [r4, #14]
 8011e9c:	f000 fc8a 	bl	80127b4 <uxr_seq_num_cmp>
 8011ea0:	2800      	cmp	r0, #0
 8011ea2:	da00      	bge.n	8011ea6 <uxr_receive_reliable_message+0x32>
 8011ea4:	81e5      	strh	r5, [r4, #14]
 8011ea6:	4630      	mov	r0, r6
 8011ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011eac:	4630      	mov	r0, r6
 8011eae:	4629      	mov	r1, r5
 8011eb0:	f000 fc80 	bl	80127b4 <uxr_seq_num_cmp>
 8011eb4:	2800      	cmp	r0, #0
 8011eb6:	dbee      	blt.n	8011e96 <uxr_receive_reliable_message+0x22>
 8011eb8:	6923      	ldr	r3, [r4, #16]
 8011eba:	4638      	mov	r0, r7
 8011ebc:	4798      	blx	r3
 8011ebe:	4681      	mov	r9, r0
 8011ec0:	2101      	movs	r1, #1
 8011ec2:	89a0      	ldrh	r0, [r4, #12]
 8011ec4:	f000 fc6e 	bl	80127a4 <uxr_seq_num_add>
 8011ec8:	f1b9 0f00 	cmp.w	r9, #0
 8011ecc:	bf08      	it	eq
 8011ece:	4285      	cmpeq	r5, r0
 8011ed0:	bf0c      	ite	eq
 8011ed2:	2601      	moveq	r6, #1
 8011ed4:	2600      	movne	r6, #0
 8011ed6:	d104      	bne.n	8011ee2 <uxr_receive_reliable_message+0x6e>
 8011ed8:	2300      	movs	r3, #0
 8011eda:	9a08      	ldr	r2, [sp, #32]
 8011edc:	81a0      	strh	r0, [r4, #12]
 8011ede:	7013      	strb	r3, [r2, #0]
 8011ee0:	e7da      	b.n	8011e98 <uxr_receive_reliable_message+0x24>
 8011ee2:	8922      	ldrh	r2, [r4, #8]
 8011ee4:	6863      	ldr	r3, [r4, #4]
 8011ee6:	fbb5 f0f2 	udiv	r0, r5, r2
 8011eea:	fbb3 f3f2 	udiv	r3, r3, r2
 8011eee:	fb02 5010 	mls	r0, r2, r0, r5
 8011ef2:	b280      	uxth	r0, r0
 8011ef4:	fb03 f000 	mul.w	r0, r3, r0
 8011ef8:	6823      	ldr	r3, [r4, #0]
 8011efa:	3004      	adds	r0, #4
 8011efc:	4418      	add	r0, r3
 8011efe:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d1c7      	bne.n	8011e96 <uxr_receive_reliable_message+0x22>
 8011f06:	4639      	mov	r1, r7
 8011f08:	4642      	mov	r2, r8
 8011f0a:	f001 fd9a 	bl	8013a42 <memcpy>
 8011f0e:	8921      	ldrh	r1, [r4, #8]
 8011f10:	6863      	ldr	r3, [r4, #4]
 8011f12:	fbb5 f2f1 	udiv	r2, r5, r1
 8011f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f1a:	fb01 5212 	mls	r2, r1, r2, r5
 8011f1e:	b292      	uxth	r2, r2
 8011f20:	fb02 f303 	mul.w	r3, r2, r3
 8011f24:	6822      	ldr	r2, [r4, #0]
 8011f26:	f842 8003 	str.w	r8, [r2, r3]
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	9a08      	ldr	r2, [sp, #32]
 8011f2e:	7013      	strb	r3, [r2, #0]
 8011f30:	f1b9 0f00 	cmp.w	r9, #0
 8011f34:	d0af      	beq.n	8011e96 <uxr_receive_reliable_message+0x22>
 8011f36:	89a6      	ldrh	r6, [r4, #12]
 8011f38:	2101      	movs	r1, #1
 8011f3a:	4630      	mov	r0, r6
 8011f3c:	f000 fc32 	bl	80127a4 <uxr_seq_num_add>
 8011f40:	8921      	ldrh	r1, [r4, #8]
 8011f42:	6863      	ldr	r3, [r4, #4]
 8011f44:	4606      	mov	r6, r0
 8011f46:	fbb0 f2f1 	udiv	r2, r0, r1
 8011f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f4e:	fb01 0212 	mls	r2, r1, r2, r0
 8011f52:	6820      	ldr	r0, [r4, #0]
 8011f54:	b292      	uxth	r2, r2
 8011f56:	fb02 f303 	mul.w	r3, r2, r3
 8011f5a:	3304      	adds	r3, #4
 8011f5c:	4418      	add	r0, r3
 8011f5e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d097      	beq.n	8011e96 <uxr_receive_reliable_message+0x22>
 8011f66:	6923      	ldr	r3, [r4, #16]
 8011f68:	4798      	blx	r3
 8011f6a:	2802      	cmp	r0, #2
 8011f6c:	d002      	beq.n	8011f74 <uxr_receive_reliable_message+0x100>
 8011f6e:	2801      	cmp	r0, #1
 8011f70:	d0e2      	beq.n	8011f38 <uxr_receive_reliable_message+0xc4>
 8011f72:	e790      	b.n	8011e96 <uxr_receive_reliable_message+0x22>
 8011f74:	2601      	movs	r6, #1
 8011f76:	e78f      	b.n	8011e98 <uxr_receive_reliable_message+0x24>

08011f78 <uxr_next_input_reliable_buffer_available>:
 8011f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f7c:	4604      	mov	r4, r0
 8011f7e:	460f      	mov	r7, r1
 8011f80:	8980      	ldrh	r0, [r0, #12]
 8011f82:	2101      	movs	r1, #1
 8011f84:	4690      	mov	r8, r2
 8011f86:	f000 fc0d 	bl	80127a4 <uxr_seq_num_add>
 8011f8a:	8922      	ldrh	r2, [r4, #8]
 8011f8c:	6866      	ldr	r6, [r4, #4]
 8011f8e:	fbb0 f3f2 	udiv	r3, r0, r2
 8011f92:	fbb6 f6f2 	udiv	r6, r6, r2
 8011f96:	fb02 0313 	mls	r3, r2, r3, r0
 8011f9a:	b29b      	uxth	r3, r3
 8011f9c:	fb03 f606 	mul.w	r6, r3, r6
 8011fa0:	6823      	ldr	r3, [r4, #0]
 8011fa2:	3604      	adds	r6, #4
 8011fa4:	441e      	add	r6, r3
 8011fa6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8011faa:	f1b9 0f00 	cmp.w	r9, #0
 8011fae:	d023      	beq.n	8011ff8 <uxr_next_input_reliable_buffer_available+0x80>
 8011fb0:	4605      	mov	r5, r0
 8011fb2:	6923      	ldr	r3, [r4, #16]
 8011fb4:	4630      	mov	r0, r6
 8011fb6:	4798      	blx	r3
 8011fb8:	4682      	mov	sl, r0
 8011fba:	b300      	cbz	r0, 8011ffe <uxr_next_input_reliable_buffer_available+0x86>
 8011fbc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8011fc0:	2101      	movs	r1, #1
 8011fc2:	4650      	mov	r0, sl
 8011fc4:	f000 fbee 	bl	80127a4 <uxr_seq_num_add>
 8011fc8:	8921      	ldrh	r1, [r4, #8]
 8011fca:	4682      	mov	sl, r0
 8011fcc:	6863      	ldr	r3, [r4, #4]
 8011fce:	6820      	ldr	r0, [r4, #0]
 8011fd0:	fbba f2f1 	udiv	r2, sl, r1
 8011fd4:	fbb3 f3f1 	udiv	r3, r3, r1
 8011fd8:	fb01 a212 	mls	r2, r1, r2, sl
 8011fdc:	b292      	uxth	r2, r2
 8011fde:	fb02 f303 	mul.w	r3, r2, r3
 8011fe2:	3304      	adds	r3, #4
 8011fe4:	4418      	add	r0, r3
 8011fe6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011fea:	b12b      	cbz	r3, 8011ff8 <uxr_next_input_reliable_buffer_available+0x80>
 8011fec:	6923      	ldr	r3, [r4, #16]
 8011fee:	4798      	blx	r3
 8011ff0:	2802      	cmp	r0, #2
 8011ff2:	d01b      	beq.n	801202c <uxr_next_input_reliable_buffer_available+0xb4>
 8011ff4:	2801      	cmp	r0, #1
 8011ff6:	d0e3      	beq.n	8011fc0 <uxr_next_input_reliable_buffer_available+0x48>
 8011ff8:	2000      	movs	r0, #0
 8011ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ffe:	464a      	mov	r2, r9
 8012000:	4631      	mov	r1, r6
 8012002:	4638      	mov	r0, r7
 8012004:	f7f6 f9d6 	bl	80083b4 <ucdr_init_buffer>
 8012008:	8921      	ldrh	r1, [r4, #8]
 801200a:	6863      	ldr	r3, [r4, #4]
 801200c:	2001      	movs	r0, #1
 801200e:	fbb5 f2f1 	udiv	r2, r5, r1
 8012012:	fbb3 f3f1 	udiv	r3, r3, r1
 8012016:	fb01 5212 	mls	r2, r1, r2, r5
 801201a:	b292      	uxth	r2, r2
 801201c:	fb02 f303 	mul.w	r3, r2, r3
 8012020:	6822      	ldr	r2, [r4, #0]
 8012022:	f842 a003 	str.w	sl, [r2, r3]
 8012026:	81a5      	strh	r5, [r4, #12]
 8012028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801202c:	8920      	ldrh	r0, [r4, #8]
 801202e:	eb06 0108 	add.w	r1, r6, r8
 8012032:	6863      	ldr	r3, [r4, #4]
 8012034:	eba9 0208 	sub.w	r2, r9, r8
 8012038:	fbb5 f6f0 	udiv	r6, r5, r0
 801203c:	fbb3 f3f0 	udiv	r3, r3, r0
 8012040:	fb00 5516 	mls	r5, r0, r6, r5
 8012044:	2000      	movs	r0, #0
 8012046:	b2ad      	uxth	r5, r5
 8012048:	fb03 f505 	mul.w	r5, r3, r5
 801204c:	6823      	ldr	r3, [r4, #0]
 801204e:	5158      	str	r0, [r3, r5]
 8012050:	4638      	mov	r0, r7
 8012052:	f7f6 f9af 	bl	80083b4 <ucdr_init_buffer>
 8012056:	4638      	mov	r0, r7
 8012058:	4622      	mov	r2, r4
 801205a:	4903      	ldr	r1, [pc, #12]	; (8012068 <uxr_next_input_reliable_buffer_available+0xf0>)
 801205c:	f7f6 f97e 	bl	800835c <ucdr_set_on_full_buffer_callback>
 8012060:	2001      	movs	r0, #1
 8012062:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8012066:	e7c8      	b.n	8011ffa <uxr_next_input_reliable_buffer_available+0x82>
 8012068:	08011d79 	.word	0x08011d79

0801206c <uxr_process_heartbeat>:
 801206c:	b538      	push	{r3, r4, r5, lr}
 801206e:	4611      	mov	r1, r2
 8012070:	4604      	mov	r4, r0
 8012072:	89c0      	ldrh	r0, [r0, #14]
 8012074:	4615      	mov	r5, r2
 8012076:	f000 fb9d 	bl	80127b4 <uxr_seq_num_cmp>
 801207a:	2800      	cmp	r0, #0
 801207c:	bfb8      	it	lt
 801207e:	81e5      	strhlt	r5, [r4, #14]
 8012080:	bd38      	pop	{r3, r4, r5, pc}
 8012082:	bf00      	nop

08012084 <uxr_compute_acknack>:
 8012084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012088:	8903      	ldrh	r3, [r0, #8]
 801208a:	4604      	mov	r4, r0
 801208c:	460f      	mov	r7, r1
 801208e:	8985      	ldrh	r5, [r0, #12]
 8012090:	b1db      	cbz	r3, 80120ca <uxr_compute_acknack+0x46>
 8012092:	4628      	mov	r0, r5
 8012094:	2601      	movs	r6, #1
 8012096:	e004      	b.n	80120a2 <uxr_compute_acknack+0x1e>
 8012098:	4566      	cmp	r6, ip
 801209a:	f106 0601 	add.w	r6, r6, #1
 801209e:	d214      	bcs.n	80120ca <uxr_compute_acknack+0x46>
 80120a0:	89a0      	ldrh	r0, [r4, #12]
 80120a2:	b2b1      	uxth	r1, r6
 80120a4:	f000 fb7e 	bl	80127a4 <uxr_seq_num_add>
 80120a8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80120ac:	fbb0 f2fc 	udiv	r2, r0, ip
 80120b0:	e9d4 1300 	ldrd	r1, r3, [r4]
 80120b4:	fb0c 0212 	mls	r2, ip, r2, r0
 80120b8:	fbb3 f3fc 	udiv	r3, r3, ip
 80120bc:	b292      	uxth	r2, r2
 80120be:	fb02 f303 	mul.w	r3, r2, r3
 80120c2:	58cb      	ldr	r3, [r1, r3]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d1e7      	bne.n	8012098 <uxr_compute_acknack+0x14>
 80120c8:	4605      	mov	r5, r0
 80120ca:	803d      	strh	r5, [r7, #0]
 80120cc:	2101      	movs	r1, #1
 80120ce:	89e6      	ldrh	r6, [r4, #14]
 80120d0:	4628      	mov	r0, r5
 80120d2:	f000 fb6b 	bl	80127ac <uxr_seq_num_sub>
 80120d6:	4601      	mov	r1, r0
 80120d8:	4630      	mov	r0, r6
 80120da:	f000 fb67 	bl	80127ac <uxr_seq_num_sub>
 80120de:	4606      	mov	r6, r0
 80120e0:	b328      	cbz	r0, 801212e <uxr_compute_acknack+0xaa>
 80120e2:	f04f 0900 	mov.w	r9, #0
 80120e6:	f04f 0801 	mov.w	r8, #1
 80120ea:	464d      	mov	r5, r9
 80120ec:	fa1f f189 	uxth.w	r1, r9
 80120f0:	8838      	ldrh	r0, [r7, #0]
 80120f2:	f000 fb57 	bl	80127a4 <uxr_seq_num_add>
 80120f6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80120fa:	6861      	ldr	r1, [r4, #4]
 80120fc:	fa08 fe09 	lsl.w	lr, r8, r9
 8012100:	6822      	ldr	r2, [r4, #0]
 8012102:	f109 0901 	add.w	r9, r9, #1
 8012106:	ea4e 0e05 	orr.w	lr, lr, r5
 801210a:	fbb0 f3fc 	udiv	r3, r0, ip
 801210e:	fbb1 f1fc 	udiv	r1, r1, ip
 8012112:	fb03 001c 	mls	r0, r3, ip, r0
 8012116:	b283      	uxth	r3, r0
 8012118:	fb01 f303 	mul.w	r3, r1, r3
 801211c:	58d3      	ldr	r3, [r2, r3]
 801211e:	b90b      	cbnz	r3, 8012124 <uxr_compute_acknack+0xa0>
 8012120:	fa1f f58e 	uxth.w	r5, lr
 8012124:	454e      	cmp	r6, r9
 8012126:	d1e1      	bne.n	80120ec <uxr_compute_acknack+0x68>
 8012128:	4628      	mov	r0, r5
 801212a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801212e:	4605      	mov	r5, r0
 8012130:	4628      	mov	r0, r5
 8012132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012136:	bf00      	nop

08012138 <uxr_init_output_best_effort_stream>:
 8012138:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801213c:	6001      	str	r1, [r0, #0]
 801213e:	7303      	strb	r3, [r0, #12]
 8012140:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8012144:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8012148:	4770      	bx	lr
 801214a:	bf00      	nop

0801214c <uxr_reset_output_best_effort_stream>:
 801214c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012150:	7b03      	ldrb	r3, [r0, #12]
 8012152:	81c2      	strh	r2, [r0, #14]
 8012154:	6043      	str	r3, [r0, #4]
 8012156:	4770      	bx	lr

08012158 <uxr_prepare_best_effort_buffer_to_write>:
 8012158:	b5f0      	push	{r4, r5, r6, r7, lr}
 801215a:	4604      	mov	r4, r0
 801215c:	b083      	sub	sp, #12
 801215e:	6840      	ldr	r0, [r0, #4]
 8012160:	460d      	mov	r5, r1
 8012162:	4616      	mov	r6, r2
 8012164:	f7fb fc34 	bl	800d9d0 <uxr_submessage_padding>
 8012168:	6863      	ldr	r3, [r4, #4]
 801216a:	4418      	add	r0, r3
 801216c:	68a3      	ldr	r3, [r4, #8]
 801216e:	1942      	adds	r2, r0, r5
 8012170:	4293      	cmp	r3, r2
 8012172:	bf2c      	ite	cs
 8012174:	2701      	movcs	r7, #1
 8012176:	2700      	movcc	r7, #0
 8012178:	d202      	bcs.n	8012180 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801217a:	4638      	mov	r0, r7
 801217c:	b003      	add	sp, #12
 801217e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012180:	9000      	str	r0, [sp, #0]
 8012182:	2300      	movs	r3, #0
 8012184:	4630      	mov	r0, r6
 8012186:	6821      	ldr	r1, [r4, #0]
 8012188:	f7f6 f902 	bl	8008390 <ucdr_init_buffer_origin_offset>
 801218c:	6861      	ldr	r1, [r4, #4]
 801218e:	4638      	mov	r0, r7
 8012190:	4429      	add	r1, r5
 8012192:	6061      	str	r1, [r4, #4]
 8012194:	b003      	add	sp, #12
 8012196:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012198 <uxr_prepare_best_effort_buffer_to_send>:
 8012198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801219c:	4604      	mov	r4, r0
 801219e:	461d      	mov	r5, r3
 80121a0:	6840      	ldr	r0, [r0, #4]
 80121a2:	7b23      	ldrb	r3, [r4, #12]
 80121a4:	4298      	cmp	r0, r3
 80121a6:	bf8c      	ite	hi
 80121a8:	2601      	movhi	r6, #1
 80121aa:	2600      	movls	r6, #0
 80121ac:	d802      	bhi.n	80121b4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80121ae:	4630      	mov	r0, r6
 80121b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121b4:	4688      	mov	r8, r1
 80121b6:	89e0      	ldrh	r0, [r4, #14]
 80121b8:	2101      	movs	r1, #1
 80121ba:	4617      	mov	r7, r2
 80121bc:	f000 faf2 	bl	80127a4 <uxr_seq_num_add>
 80121c0:	6823      	ldr	r3, [r4, #0]
 80121c2:	81e0      	strh	r0, [r4, #14]
 80121c4:	8028      	strh	r0, [r5, #0]
 80121c6:	4630      	mov	r0, r6
 80121c8:	f8c8 3000 	str.w	r3, [r8]
 80121cc:	6863      	ldr	r3, [r4, #4]
 80121ce:	603b      	str	r3, [r7, #0]
 80121d0:	7b23      	ldrb	r3, [r4, #12]
 80121d2:	6063      	str	r3, [r4, #4]
 80121d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080121d8 <on_full_output_buffer>:
 80121d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121da:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 80121de:	460c      	mov	r4, r1
 80121e0:	6803      	ldr	r3, [r0, #0]
 80121e2:	4605      	mov	r5, r0
 80121e4:	7b26      	ldrb	r6, [r4, #12]
 80121e6:	e9d1 1200 	ldrd	r1, r2, [r1]
 80121ea:	fbb2 f2fc 	udiv	r2, r2, ip
 80121ee:	eba3 0e01 	sub.w	lr, r3, r1
 80121f2:	6903      	ldr	r3, [r0, #16]
 80121f4:	fbbe fef2 	udiv	lr, lr, r2
 80121f8:	f10e 0e01 	add.w	lr, lr, #1
 80121fc:	fa1f fe8e 	uxth.w	lr, lr
 8012200:	fbbe f7fc 	udiv	r7, lr, ip
 8012204:	fb0c ec17 	mls	ip, ip, r7, lr
 8012208:	fa1f fc8c 	uxth.w	ip, ip
 801220c:	fb02 fc0c 	mul.w	ip, r2, ip
 8012210:	f851 200c 	ldr.w	r2, [r1, ip]
 8012214:	44b4      	add	ip, r6
 8012216:	1b92      	subs	r2, r2, r6
 8012218:	f10c 0c08 	add.w	ip, ip, #8
 801221c:	3a04      	subs	r2, #4
 801221e:	4461      	add	r1, ip
 8012220:	f7f6 f8c0 	bl	80083a4 <ucdr_init_buffer_origin>
 8012224:	4628      	mov	r0, r5
 8012226:	4622      	mov	r2, r4
 8012228:	4902      	ldr	r1, [pc, #8]	; (8012234 <on_full_output_buffer+0x5c>)
 801222a:	f7f6 f897 	bl	800835c <ucdr_set_on_full_buffer_callback>
 801222e:	2000      	movs	r0, #0
 8012230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012232:	bf00      	nop
 8012234:	080121d9 	.word	0x080121d9

08012238 <uxr_init_output_reliable_stream>:
 8012238:	b530      	push	{r4, r5, lr}
 801223a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801223e:	8103      	strh	r3, [r0, #8]
 8012240:	7304      	strb	r4, [r0, #12]
 8012242:	e9c0 1200 	strd	r1, r2, [r0]
 8012246:	b1e3      	cbz	r3, 8012282 <uxr_init_output_reliable_stream+0x4a>
 8012248:	600c      	str	r4, [r1, #0]
 801224a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801224e:	f1bc 0f01 	cmp.w	ip, #1
 8012252:	d916      	bls.n	8012282 <uxr_init_output_reliable_stream+0x4a>
 8012254:	f04f 0e01 	mov.w	lr, #1
 8012258:	6843      	ldr	r3, [r0, #4]
 801225a:	f10e 0501 	add.w	r5, lr, #1
 801225e:	7b04      	ldrb	r4, [r0, #12]
 8012260:	6801      	ldr	r1, [r0, #0]
 8012262:	fbbe f2fc 	udiv	r2, lr, ip
 8012266:	fbb3 f3fc 	udiv	r3, r3, ip
 801226a:	fb0c e212 	mls	r2, ip, r2, lr
 801226e:	fa1f fe85 	uxth.w	lr, r5
 8012272:	b292      	uxth	r2, r2
 8012274:	fb02 f303 	mul.w	r3, r2, r3
 8012278:	50cc      	str	r4, [r1, r3]
 801227a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801227e:	45f4      	cmp	ip, lr
 8012280:	d8ea      	bhi.n	8012258 <uxr_init_output_reliable_stream+0x20>
 8012282:	4b07      	ldr	r3, [pc, #28]	; (80122a0 <uxr_init_output_reliable_stream+0x68>)
 8012284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012288:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801228c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8012290:	f8c0 300e 	str.w	r3, [r0, #14]
 8012294:	2300      	movs	r3, #0
 8012296:	8242      	strh	r2, [r0, #18]
 8012298:	8403      	strh	r3, [r0, #32]
 801229a:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801229e:	bd30      	pop	{r4, r5, pc}
 80122a0:	ffff0000 	.word	0xffff0000
 80122a4:	00000000 	.word	0x00000000

080122a8 <uxr_reset_output_reliable_stream>:
 80122a8:	8901      	ldrh	r1, [r0, #8]
 80122aa:	b510      	push	{r4, lr}
 80122ac:	b1b1      	cbz	r1, 80122dc <uxr_reset_output_reliable_stream+0x34>
 80122ae:	f04f 0e00 	mov.w	lr, #0
 80122b2:	46f4      	mov	ip, lr
 80122b4:	6843      	ldr	r3, [r0, #4]
 80122b6:	f10e 0e01 	add.w	lr, lr, #1
 80122ba:	7b04      	ldrb	r4, [r0, #12]
 80122bc:	fbbc f2f1 	udiv	r2, ip, r1
 80122c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80122c4:	fb01 c212 	mls	r2, r1, r2, ip
 80122c8:	fa1f fc8e 	uxth.w	ip, lr
 80122cc:	b292      	uxth	r2, r2
 80122ce:	fb02 f303 	mul.w	r3, r2, r3
 80122d2:	6802      	ldr	r2, [r0, #0]
 80122d4:	50d4      	str	r4, [r2, r3]
 80122d6:	8901      	ldrh	r1, [r0, #8]
 80122d8:	4561      	cmp	r1, ip
 80122da:	d8eb      	bhi.n	80122b4 <uxr_reset_output_reliable_stream+0xc>
 80122dc:	4b08      	ldr	r3, [pc, #32]	; (8012300 <uxr_reset_output_reliable_stream+0x58>)
 80122de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122e2:	ed9f 7b05 	vldr	d7, [pc, #20]	; 80122f8 <uxr_reset_output_reliable_stream+0x50>
 80122e6:	f8c0 300e 	str.w	r3, [r0, #14]
 80122ea:	2300      	movs	r3, #0
 80122ec:	8242      	strh	r2, [r0, #18]
 80122ee:	8403      	strh	r3, [r0, #32]
 80122f0:	ed80 7b06 	vstr	d7, [r0, #24]
 80122f4:	bd10      	pop	{r4, pc}
 80122f6:	bf00      	nop
 80122f8:	ffffffff 	.word	0xffffffff
 80122fc:	7fffffff 	.word	0x7fffffff
 8012300:	ffff0000 	.word	0xffff0000

08012304 <uxr_prepare_reliable_buffer_to_write>:
 8012304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012308:	4604      	mov	r4, r0
 801230a:	b091      	sub	sp, #68	; 0x44
 801230c:	8900      	ldrh	r0, [r0, #8]
 801230e:	468b      	mov	fp, r1
 8012310:	89e6      	ldrh	r6, [r4, #14]
 8012312:	9204      	str	r2, [sp, #16]
 8012314:	6865      	ldr	r5, [r4, #4]
 8012316:	6823      	ldr	r3, [r4, #0]
 8012318:	f894 900c 	ldrb.w	r9, [r4, #12]
 801231c:	fbb6 f2f0 	udiv	r2, r6, r0
 8012320:	fbb5 f5f0 	udiv	r5, r5, r0
 8012324:	fb00 6212 	mls	r2, r0, r2, r6
 8012328:	1f2f      	subs	r7, r5, #4
 801232a:	b292      	uxth	r2, r2
 801232c:	fb05 3202 	mla	r2, r5, r2, r3
 8012330:	1d11      	adds	r1, r2, #4
 8012332:	f8d2 8000 	ldr.w	r8, [r2]
 8012336:	9103      	str	r1, [sp, #12]
 8012338:	2800      	cmp	r0, #0
 801233a:	f000 814a 	beq.w	80125d2 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801233e:	f04f 0c00 	mov.w	ip, #0
 8012342:	46e2      	mov	sl, ip
 8012344:	4661      	mov	r1, ip
 8012346:	f10c 0c01 	add.w	ip, ip, #1
 801234a:	fbb1 f2f0 	udiv	r2, r1, r0
 801234e:	fb00 1212 	mls	r2, r0, r2, r1
 8012352:	fa1f f18c 	uxth.w	r1, ip
 8012356:	b292      	uxth	r2, r2
 8012358:	fb05 f202 	mul.w	r2, r5, r2
 801235c:	589a      	ldr	r2, [r3, r2]
 801235e:	454a      	cmp	r2, r9
 8012360:	d103      	bne.n	801236a <uxr_prepare_reliable_buffer_to_write+0x66>
 8012362:	f10a 0a01 	add.w	sl, sl, #1
 8012366:	fa1f fa8a 	uxth.w	sl, sl
 801236a:	4281      	cmp	r1, r0
 801236c:	d3eb      	bcc.n	8012346 <uxr_prepare_reliable_buffer_to_write+0x42>
 801236e:	4640      	mov	r0, r8
 8012370:	2104      	movs	r1, #4
 8012372:	f8cd a014 	str.w	sl, [sp, #20]
 8012376:	f7f6 f821 	bl	80083bc <ucdr_alignment>
 801237a:	4480      	add	r8, r0
 801237c:	eb08 020b 	add.w	r2, r8, fp
 8012380:	42ba      	cmp	r2, r7
 8012382:	f240 80ca 	bls.w	801251a <uxr_prepare_reliable_buffer_to_write+0x216>
 8012386:	7b22      	ldrb	r2, [r4, #12]
 8012388:	445a      	add	r2, fp
 801238a:	42ba      	cmp	r2, r7
 801238c:	f240 80b2 	bls.w	80124f4 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8012390:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8012394:	b2bb      	uxth	r3, r7
 8012396:	eba2 0209 	sub.w	r2, r2, r9
 801239a:	441a      	add	r2, r3
 801239c:	b292      	uxth	r2, r2
 801239e:	fb0a f902 	mul.w	r9, sl, r2
 80123a2:	9205      	str	r2, [sp, #20]
 80123a4:	45d9      	cmp	r9, fp
 80123a6:	9206      	str	r2, [sp, #24]
 80123a8:	f0c0 80b3 	bcc.w	8012512 <uxr_prepare_reliable_buffer_to_write+0x20e>
 80123ac:	f108 0204 	add.w	r2, r8, #4
 80123b0:	42ba      	cmp	r2, r7
 80123b2:	f080 80da 	bcs.w	801256a <uxr_prepare_reliable_buffer_to_write+0x266>
 80123b6:	f1a3 0904 	sub.w	r9, r3, #4
 80123ba:	9b05      	ldr	r3, [sp, #20]
 80123bc:	eba9 0908 	sub.w	r9, r9, r8
 80123c0:	fa1f f989 	uxth.w	r9, r9
 80123c4:	ebab 0b09 	sub.w	fp, fp, r9
 80123c8:	fbbb f2f3 	udiv	r2, fp, r3
 80123cc:	fb03 b312 	mls	r3, r3, r2, fp
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	f040 80c4 	bne.w	801255e <uxr_prepare_reliable_buffer_to_write+0x25a>
 80123d6:	b293      	uxth	r3, r2
 80123d8:	4553      	cmp	r3, sl
 80123da:	f200 809a 	bhi.w	8012512 <uxr_prepare_reliable_buffer_to_write+0x20e>
 80123de:	2b00      	cmp	r3, #0
 80123e0:	f000 80f9 	beq.w	80125d6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80123e4:	f8cd 801c 	str.w	r8, [sp, #28]
 80123e8:	f04f 0a00 	mov.w	sl, #0
 80123ec:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80123f0:	f10d 0b20 	add.w	fp, sp, #32
 80123f4:	9505      	str	r5, [sp, #20]
 80123f6:	461d      	mov	r5, r3
 80123f8:	e000      	b.n	80123fc <uxr_prepare_reliable_buffer_to_write+0xf8>
 80123fa:	46c1      	mov	r9, r8
 80123fc:	8922      	ldrh	r2, [r4, #8]
 80123fe:	4658      	mov	r0, fp
 8012400:	6863      	ldr	r3, [r4, #4]
 8012402:	f10a 0a01 	add.w	sl, sl, #1
 8012406:	fbb6 f1f2 	udiv	r1, r6, r2
 801240a:	fbb3 f3f2 	udiv	r3, r3, r2
 801240e:	fb02 6111 	mls	r1, r2, r1, r6
 8012412:	463a      	mov	r2, r7
 8012414:	b289      	uxth	r1, r1
 8012416:	fb03 f101 	mul.w	r1, r3, r1
 801241a:	6823      	ldr	r3, [r4, #0]
 801241c:	3104      	adds	r1, #4
 801241e:	4419      	add	r1, r3
 8012420:	2300      	movs	r3, #0
 8012422:	f851 cc04 	ldr.w	ip, [r1, #-4]
 8012426:	f8cd c000 	str.w	ip, [sp]
 801242a:	f7f5 ffb1 	bl	8008390 <ucdr_init_buffer_origin_offset>
 801242e:	464a      	mov	r2, r9
 8012430:	2300      	movs	r3, #0
 8012432:	210d      	movs	r1, #13
 8012434:	4658      	mov	r0, fp
 8012436:	f7fb fa8b 	bl	800d950 <uxr_buffer_submessage_header>
 801243a:	8921      	ldrh	r1, [r4, #8]
 801243c:	6863      	ldr	r3, [r4, #4]
 801243e:	4630      	mov	r0, r6
 8012440:	fbb6 f2f1 	udiv	r2, r6, r1
 8012444:	fbb3 f3f1 	udiv	r3, r3, r1
 8012448:	fb01 6212 	mls	r2, r1, r2, r6
 801244c:	2101      	movs	r1, #1
 801244e:	b292      	uxth	r2, r2
 8012450:	fb02 f303 	mul.w	r3, r2, r3
 8012454:	6822      	ldr	r2, [r4, #0]
 8012456:	50d7      	str	r7, [r2, r3]
 8012458:	f000 f9a4 	bl	80127a4 <uxr_seq_num_add>
 801245c:	4606      	mov	r6, r0
 801245e:	fa1f f38a 	uxth.w	r3, sl
 8012462:	429d      	cmp	r5, r3
 8012464:	d8c9      	bhi.n	80123fa <uxr_prepare_reliable_buffer_to_write+0xf6>
 8012466:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801246a:	9d05      	ldr	r5, [sp, #20]
 801246c:	8920      	ldrh	r0, [r4, #8]
 801246e:	463a      	mov	r2, r7
 8012470:	6863      	ldr	r3, [r4, #4]
 8012472:	fbb6 f1f0 	udiv	r1, r6, r0
 8012476:	fbb3 f3f0 	udiv	r3, r3, r0
 801247a:	fb00 6111 	mls	r1, r0, r1, r6
 801247e:	4658      	mov	r0, fp
 8012480:	b289      	uxth	r1, r1
 8012482:	fb01 f303 	mul.w	r3, r1, r3
 8012486:	6821      	ldr	r1, [r4, #0]
 8012488:	3304      	adds	r3, #4
 801248a:	4419      	add	r1, r3
 801248c:	2300      	movs	r3, #0
 801248e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8012492:	9700      	str	r7, [sp, #0]
 8012494:	f7f5 ff7c 	bl	8008390 <ucdr_init_buffer_origin_offset>
 8012498:	9f06      	ldr	r7, [sp, #24]
 801249a:	4658      	mov	r0, fp
 801249c:	2302      	movs	r3, #2
 801249e:	b2ba      	uxth	r2, r7
 80124a0:	210d      	movs	r1, #13
 80124a2:	f7fb fa55 	bl	800d950 <uxr_buffer_submessage_header>
 80124a6:	f108 0104 	add.w	r1, r8, #4
 80124aa:	9b03      	ldr	r3, [sp, #12]
 80124ac:	f1a5 0208 	sub.w	r2, r5, #8
 80124b0:	8925      	ldrh	r5, [r4, #8]
 80124b2:	440b      	add	r3, r1
 80124b4:	eba2 0208 	sub.w	r2, r2, r8
 80124b8:	fbb6 f0f5 	udiv	r0, r6, r5
 80124bc:	4619      	mov	r1, r3
 80124be:	6863      	ldr	r3, [r4, #4]
 80124c0:	fb05 6010 	mls	r0, r5, r0, r6
 80124c4:	fbb3 f3f5 	udiv	r3, r3, r5
 80124c8:	b280      	uxth	r0, r0
 80124ca:	6825      	ldr	r5, [r4, #0]
 80124cc:	fb00 f303 	mul.w	r3, r0, r3
 80124d0:	7b20      	ldrb	r0, [r4, #12]
 80124d2:	3004      	adds	r0, #4
 80124d4:	4438      	add	r0, r7
 80124d6:	50e8      	str	r0, [r5, r3]
 80124d8:	9d04      	ldr	r5, [sp, #16]
 80124da:	4628      	mov	r0, r5
 80124dc:	f7f5 ff6a 	bl	80083b4 <ucdr_init_buffer>
 80124e0:	4628      	mov	r0, r5
 80124e2:	4622      	mov	r2, r4
 80124e4:	493d      	ldr	r1, [pc, #244]	; (80125dc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80124e6:	f7f5 ff39 	bl	800835c <ucdr_set_on_full_buffer_callback>
 80124ea:	2001      	movs	r0, #1
 80124ec:	81e6      	strh	r6, [r4, #14]
 80124ee:	b011      	add	sp, #68	; 0x44
 80124f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124f4:	2101      	movs	r1, #1
 80124f6:	89e0      	ldrh	r0, [r4, #14]
 80124f8:	f000 f954 	bl	80127a4 <uxr_seq_num_add>
 80124fc:	4605      	mov	r5, r0
 80124fe:	8921      	ldrh	r1, [r4, #8]
 8012500:	8a60      	ldrh	r0, [r4, #18]
 8012502:	f000 f94f 	bl	80127a4 <uxr_seq_num_add>
 8012506:	4601      	mov	r1, r0
 8012508:	4628      	mov	r0, r5
 801250a:	f000 f953 	bl	80127b4 <uxr_seq_num_cmp>
 801250e:	2800      	cmp	r0, #0
 8012510:	dd44      	ble.n	801259c <uxr_prepare_reliable_buffer_to_write+0x298>
 8012512:	2000      	movs	r0, #0
 8012514:	b011      	add	sp, #68	; 0x44
 8012516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801251a:	8921      	ldrh	r1, [r4, #8]
 801251c:	8a60      	ldrh	r0, [r4, #18]
 801251e:	9205      	str	r2, [sp, #20]
 8012520:	f000 f940 	bl	80127a4 <uxr_seq_num_add>
 8012524:	4601      	mov	r1, r0
 8012526:	4630      	mov	r0, r6
 8012528:	f000 f944 	bl	80127b4 <uxr_seq_num_cmp>
 801252c:	2800      	cmp	r0, #0
 801252e:	9a05      	ldr	r2, [sp, #20]
 8012530:	dcef      	bgt.n	8012512 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8012532:	8925      	ldrh	r5, [r4, #8]
 8012534:	e9d4 7300 	ldrd	r7, r3, [r4]
 8012538:	fbb6 f4f5 	udiv	r4, r6, r5
 801253c:	fbb3 f3f5 	udiv	r3, r3, r5
 8012540:	fb05 6414 	mls	r4, r5, r4, r6
 8012544:	b2a4      	uxth	r4, r4
 8012546:	fb04 f303 	mul.w	r3, r4, r3
 801254a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801254e:	50fa      	str	r2, [r7, r3]
 8012550:	2300      	movs	r3, #0
 8012552:	f8cd 8000 	str.w	r8, [sp]
 8012556:	f7f5 ff1b 	bl	8008390 <ucdr_init_buffer_origin_offset>
 801255a:	2001      	movs	r0, #1
 801255c:	e7da      	b.n	8012514 <uxr_prepare_reliable_buffer_to_write+0x210>
 801255e:	3201      	adds	r2, #1
 8012560:	9306      	str	r3, [sp, #24]
 8012562:	b293      	uxth	r3, r2
 8012564:	4553      	cmp	r3, sl
 8012566:	d8d4      	bhi.n	8012512 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8012568:	e739      	b.n	80123de <uxr_prepare_reliable_buffer_to_write+0xda>
 801256a:	4630      	mov	r0, r6
 801256c:	2101      	movs	r1, #1
 801256e:	9307      	str	r3, [sp, #28]
 8012570:	f000 f918 	bl	80127a4 <uxr_seq_num_add>
 8012574:	4606      	mov	r6, r0
 8012576:	8920      	ldrh	r0, [r4, #8]
 8012578:	6862      	ldr	r2, [r4, #4]
 801257a:	fbb6 f1f0 	udiv	r1, r6, r0
 801257e:	fbb2 f2f0 	udiv	r2, r2, r0
 8012582:	fb00 6111 	mls	r1, r0, r1, r6
 8012586:	b289      	uxth	r1, r1
 8012588:	fb01 f202 	mul.w	r2, r1, r2
 801258c:	6821      	ldr	r1, [r4, #0]
 801258e:	3204      	adds	r2, #4
 8012590:	188b      	adds	r3, r1, r2
 8012592:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8012596:	9303      	str	r3, [sp, #12]
 8012598:	9b07      	ldr	r3, [sp, #28]
 801259a:	e70c      	b.n	80123b6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801259c:	8921      	ldrh	r1, [r4, #8]
 801259e:	6863      	ldr	r3, [r4, #4]
 80125a0:	9804      	ldr	r0, [sp, #16]
 80125a2:	fbb5 f2f1 	udiv	r2, r5, r1
 80125a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80125aa:	fb01 5212 	mls	r2, r1, r2, r5
 80125ae:	6821      	ldr	r1, [r4, #0]
 80125b0:	b292      	uxth	r2, r2
 80125b2:	fb02 f303 	mul.w	r3, r2, r3
 80125b6:	7b22      	ldrb	r2, [r4, #12]
 80125b8:	3304      	adds	r3, #4
 80125ba:	445a      	add	r2, fp
 80125bc:	4419      	add	r1, r3
 80125be:	f841 2c04 	str.w	r2, [r1, #-4]
 80125c2:	7b23      	ldrb	r3, [r4, #12]
 80125c4:	9300      	str	r3, [sp, #0]
 80125c6:	2300      	movs	r3, #0
 80125c8:	f7f5 fee2 	bl	8008390 <ucdr_init_buffer_origin_offset>
 80125cc:	2001      	movs	r0, #1
 80125ce:	81e5      	strh	r5, [r4, #14]
 80125d0:	e7a0      	b.n	8012514 <uxr_prepare_reliable_buffer_to_write+0x210>
 80125d2:	4682      	mov	sl, r0
 80125d4:	e6cb      	b.n	801236e <uxr_prepare_reliable_buffer_to_write+0x6a>
 80125d6:	f10d 0b20 	add.w	fp, sp, #32
 80125da:	e747      	b.n	801246c <uxr_prepare_reliable_buffer_to_write+0x168>
 80125dc:	080121d9 	.word	0x080121d9

080125e0 <uxr_prepare_next_reliable_buffer_to_send>:
 80125e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125e2:	4604      	mov	r4, r0
 80125e4:	461d      	mov	r5, r3
 80125e6:	460f      	mov	r7, r1
 80125e8:	8a00      	ldrh	r0, [r0, #16]
 80125ea:	2101      	movs	r1, #1
 80125ec:	4616      	mov	r6, r2
 80125ee:	f000 f8d9 	bl	80127a4 <uxr_seq_num_add>
 80125f2:	8028      	strh	r0, [r5, #0]
 80125f4:	8922      	ldrh	r2, [r4, #8]
 80125f6:	6863      	ldr	r3, [r4, #4]
 80125f8:	fbb0 f1f2 	udiv	r1, r0, r2
 80125fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8012600:	fb02 0c11 	mls	ip, r2, r1, r0
 8012604:	89e1      	ldrh	r1, [r4, #14]
 8012606:	fa1f fc8c 	uxth.w	ip, ip
 801260a:	fb0c fc03 	mul.w	ip, ip, r3
 801260e:	6823      	ldr	r3, [r4, #0]
 8012610:	f10c 0c04 	add.w	ip, ip, #4
 8012614:	4463      	add	r3, ip
 8012616:	603b      	str	r3, [r7, #0]
 8012618:	6823      	ldr	r3, [r4, #0]
 801261a:	449c      	add	ip, r3
 801261c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8012620:	6033      	str	r3, [r6, #0]
 8012622:	f000 f8c7 	bl	80127b4 <uxr_seq_num_cmp>
 8012626:	2800      	cmp	r0, #0
 8012628:	dd01      	ble.n	801262e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801262a:	2000      	movs	r0, #0
 801262c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801262e:	7b23      	ldrb	r3, [r4, #12]
 8012630:	6832      	ldr	r2, [r6, #0]
 8012632:	429a      	cmp	r2, r3
 8012634:	d9f9      	bls.n	801262a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8012636:	8a61      	ldrh	r1, [r4, #18]
 8012638:	8a20      	ldrh	r0, [r4, #16]
 801263a:	f000 f8b7 	bl	80127ac <uxr_seq_num_sub>
 801263e:	8923      	ldrh	r3, [r4, #8]
 8012640:	4283      	cmp	r3, r0
 8012642:	d0f2      	beq.n	801262a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8012644:	8828      	ldrh	r0, [r5, #0]
 8012646:	89e3      	ldrh	r3, [r4, #14]
 8012648:	8220      	strh	r0, [r4, #16]
 801264a:	4298      	cmp	r0, r3
 801264c:	d001      	beq.n	8012652 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801264e:	2001      	movs	r0, #1
 8012650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012652:	2101      	movs	r1, #1
 8012654:	f000 f8a6 	bl	80127a4 <uxr_seq_num_add>
 8012658:	4603      	mov	r3, r0
 801265a:	2001      	movs	r0, #1
 801265c:	81e3      	strh	r3, [r4, #14]
 801265e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012660 <uxr_update_output_stream_heartbeat_timestamp>:
 8012660:	b570      	push	{r4, r5, r6, lr}
 8012662:	8a01      	ldrh	r1, [r0, #16]
 8012664:	4604      	mov	r4, r0
 8012666:	8a40      	ldrh	r0, [r0, #18]
 8012668:	4615      	mov	r5, r2
 801266a:	461e      	mov	r6, r3
 801266c:	f000 f8a2 	bl	80127b4 <uxr_seq_num_cmp>
 8012670:	2800      	cmp	r0, #0
 8012672:	db07      	blt.n	8012684 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8012674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012678:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801267c:	2000      	movs	r0, #0
 801267e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8012682:	bd70      	pop	{r4, r5, r6, pc}
 8012684:	f894 0020 	ldrb.w	r0, [r4, #32]
 8012688:	b940      	cbnz	r0, 801269c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801268a:	2301      	movs	r3, #1
 801268c:	f884 3020 	strb.w	r3, [r4, #32]
 8012690:	3564      	adds	r5, #100	; 0x64
 8012692:	f146 0600 	adc.w	r6, r6, #0
 8012696:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801269a:	bd70      	pop	{r4, r5, r6, pc}
 801269c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80126a0:	4295      	cmp	r5, r2
 80126a2:	eb76 0303 	sbcs.w	r3, r6, r3
 80126a6:	db04      	blt.n	80126b2 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 80126a8:	1c43      	adds	r3, r0, #1
 80126aa:	2001      	movs	r0, #1
 80126ac:	f884 3020 	strb.w	r3, [r4, #32]
 80126b0:	e7ee      	b.n	8012690 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80126b2:	2000      	movs	r0, #0
 80126b4:	e7ec      	b.n	8012690 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80126b6:	bf00      	nop

080126b8 <uxr_begin_output_nack_buffer_it>:
 80126b8:	8a40      	ldrh	r0, [r0, #18]
 80126ba:	4770      	bx	lr

080126bc <uxr_next_reliable_nack_buffer_to_send>:
 80126bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126c0:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 80126c4:	b197      	cbz	r7, 80126ec <uxr_next_reliable_nack_buffer_to_send+0x30>
 80126c6:	4680      	mov	r8, r0
 80126c8:	460d      	mov	r5, r1
 80126ca:	4616      	mov	r6, r2
 80126cc:	461c      	mov	r4, r3
 80126ce:	8818      	ldrh	r0, [r3, #0]
 80126d0:	2101      	movs	r1, #1
 80126d2:	f000 f867 	bl	80127a4 <uxr_seq_num_add>
 80126d6:	8020      	strh	r0, [r4, #0]
 80126d8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 80126dc:	f000 f86a 	bl	80127b4 <uxr_seq_num_cmp>
 80126e0:	2800      	cmp	r0, #0
 80126e2:	dd06      	ble.n	80126f2 <uxr_next_reliable_nack_buffer_to_send+0x36>
 80126e4:	2300      	movs	r3, #0
 80126e6:	461f      	mov	r7, r3
 80126e8:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 80126ec:	4638      	mov	r0, r7
 80126ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126f2:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 80126f6:	8820      	ldrh	r0, [r4, #0]
 80126f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80126fc:	fbb0 f3f2 	udiv	r3, r0, r2
 8012700:	fbb1 fcf2 	udiv	ip, r1, r2
 8012704:	fb02 0313 	mls	r3, r2, r3, r0
 8012708:	b29b      	uxth	r3, r3
 801270a:	fb03 fc0c 	mul.w	ip, r3, ip
 801270e:	f8d8 3000 	ldr.w	r3, [r8]
 8012712:	f10c 0c04 	add.w	ip, ip, #4
 8012716:	4463      	add	r3, ip
 8012718:	602b      	str	r3, [r5, #0]
 801271a:	f8d8 3000 	ldr.w	r3, [r8]
 801271e:	4463      	add	r3, ip
 8012720:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012724:	6033      	str	r3, [r6, #0]
 8012726:	f898 200c 	ldrb.w	r2, [r8, #12]
 801272a:	429a      	cmp	r2, r3
 801272c:	d0d0      	beq.n	80126d0 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801272e:	e7dd      	b.n	80126ec <uxr_next_reliable_nack_buffer_to_send+0x30>

08012730 <uxr_process_acknack>:
 8012730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012732:	4604      	mov	r4, r0
 8012734:	460e      	mov	r6, r1
 8012736:	4610      	mov	r0, r2
 8012738:	2101      	movs	r1, #1
 801273a:	f000 f837 	bl	80127ac <uxr_seq_num_sub>
 801273e:	8a61      	ldrh	r1, [r4, #18]
 8012740:	f000 f834 	bl	80127ac <uxr_seq_num_sub>
 8012744:	b1c8      	cbz	r0, 801277a <uxr_process_acknack+0x4a>
 8012746:	4605      	mov	r5, r0
 8012748:	2700      	movs	r7, #0
 801274a:	2101      	movs	r1, #1
 801274c:	8a60      	ldrh	r0, [r4, #18]
 801274e:	f000 f829 	bl	80127a4 <uxr_seq_num_add>
 8012752:	8923      	ldrh	r3, [r4, #8]
 8012754:	6862      	ldr	r2, [r4, #4]
 8012756:	3701      	adds	r7, #1
 8012758:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801275c:	6821      	ldr	r1, [r4, #0]
 801275e:	42bd      	cmp	r5, r7
 8012760:	8260      	strh	r0, [r4, #18]
 8012762:	fbb0 fef3 	udiv	lr, r0, r3
 8012766:	fbb2 f2f3 	udiv	r2, r2, r3
 801276a:	fb03 031e 	mls	r3, r3, lr, r0
 801276e:	b29b      	uxth	r3, r3
 8012770:	fb02 f303 	mul.w	r3, r2, r3
 8012774:	f841 c003 	str.w	ip, [r1, r3]
 8012778:	d1e7      	bne.n	801274a <uxr_process_acknack+0x1a>
 801277a:	3e00      	subs	r6, #0
 801277c:	f04f 0300 	mov.w	r3, #0
 8012780:	bf18      	it	ne
 8012782:	2601      	movne	r6, #1
 8012784:	f884 3020 	strb.w	r3, [r4, #32]
 8012788:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801278c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801278e:	bf00      	nop

08012790 <uxr_is_output_up_to_date>:
 8012790:	8a01      	ldrh	r1, [r0, #16]
 8012792:	8a40      	ldrh	r0, [r0, #18]
 8012794:	b508      	push	{r3, lr}
 8012796:	f000 f80d 	bl	80127b4 <uxr_seq_num_cmp>
 801279a:	fab0 f080 	clz	r0, r0
 801279e:	0940      	lsrs	r0, r0, #5
 80127a0:	bd08      	pop	{r3, pc}
 80127a2:	bf00      	nop

080127a4 <uxr_seq_num_add>:
 80127a4:	4408      	add	r0, r1
 80127a6:	b280      	uxth	r0, r0
 80127a8:	4770      	bx	lr
 80127aa:	bf00      	nop

080127ac <uxr_seq_num_sub>:
 80127ac:	1a40      	subs	r0, r0, r1
 80127ae:	b280      	uxth	r0, r0
 80127b0:	4770      	bx	lr
 80127b2:	bf00      	nop

080127b4 <uxr_seq_num_cmp>:
 80127b4:	4288      	cmp	r0, r1
 80127b6:	d011      	beq.n	80127dc <uxr_seq_num_cmp+0x28>
 80127b8:	d309      	bcc.n	80127ce <uxr_seq_num_cmp+0x1a>
 80127ba:	4288      	cmp	r0, r1
 80127bc:	d910      	bls.n	80127e0 <uxr_seq_num_cmp+0x2c>
 80127be:	1a40      	subs	r0, r0, r1
 80127c0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80127c4:	bfd4      	ite	le
 80127c6:	2001      	movle	r0, #1
 80127c8:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 80127cc:	4770      	bx	lr
 80127ce:	1a0b      	subs	r3, r1, r0
 80127d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80127d4:	daf1      	bge.n	80127ba <uxr_seq_num_cmp+0x6>
 80127d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127da:	4770      	bx	lr
 80127dc:	2000      	movs	r0, #0
 80127de:	4770      	bx	lr
 80127e0:	2001      	movs	r0, #1
 80127e2:	4770      	bx	lr

080127e4 <rcl_get_default_domain_id>:
 80127e4:	b530      	push	{r4, r5, lr}
 80127e6:	2300      	movs	r3, #0
 80127e8:	b083      	sub	sp, #12
 80127ea:	9300      	str	r3, [sp, #0]
 80127ec:	b1d0      	cbz	r0, 8012824 <rcl_get_default_domain_id+0x40>
 80127ee:	4604      	mov	r4, r0
 80127f0:	4669      	mov	r1, sp
 80127f2:	4815      	ldr	r0, [pc, #84]	; (8012848 <rcl_get_default_domain_id+0x64>)
 80127f4:	f7f7 f95c 	bl	8009ab0 <rcutils_get_env>
 80127f8:	4602      	mov	r2, r0
 80127fa:	b110      	cbz	r0, 8012802 <rcl_get_default_domain_id+0x1e>
 80127fc:	2001      	movs	r0, #1
 80127fe:	b003      	add	sp, #12
 8012800:	bd30      	pop	{r4, r5, pc}
 8012802:	9b00      	ldr	r3, [sp, #0]
 8012804:	b18b      	cbz	r3, 801282a <rcl_get_default_domain_id+0x46>
 8012806:	7818      	ldrb	r0, [r3, #0]
 8012808:	2800      	cmp	r0, #0
 801280a:	d0f8      	beq.n	80127fe <rcl_get_default_domain_id+0x1a>
 801280c:	a901      	add	r1, sp, #4
 801280e:	4618      	mov	r0, r3
 8012810:	9201      	str	r2, [sp, #4]
 8012812:	f000 fc9f 	bl	8013154 <strtoul>
 8012816:	4605      	mov	r5, r0
 8012818:	b150      	cbz	r0, 8012830 <rcl_get_default_domain_id+0x4c>
 801281a:	1c43      	adds	r3, r0, #1
 801281c:	d00d      	beq.n	801283a <rcl_get_default_domain_id+0x56>
 801281e:	2000      	movs	r0, #0
 8012820:	6025      	str	r5, [r4, #0]
 8012822:	e7ec      	b.n	80127fe <rcl_get_default_domain_id+0x1a>
 8012824:	200b      	movs	r0, #11
 8012826:	b003      	add	sp, #12
 8012828:	bd30      	pop	{r4, r5, pc}
 801282a:	4618      	mov	r0, r3
 801282c:	b003      	add	sp, #12
 801282e:	bd30      	pop	{r4, r5, pc}
 8012830:	9b01      	ldr	r3, [sp, #4]
 8012832:	781b      	ldrb	r3, [r3, #0]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d0f2      	beq.n	801281e <rcl_get_default_domain_id+0x3a>
 8012838:	e7e0      	b.n	80127fc <rcl_get_default_domain_id+0x18>
 801283a:	f001 f8cd 	bl	80139d8 <__errno>
 801283e:	6803      	ldr	r3, [r0, #0]
 8012840:	2b22      	cmp	r3, #34	; 0x22
 8012842:	d1ec      	bne.n	801281e <rcl_get_default_domain_id+0x3a>
 8012844:	e7da      	b.n	80127fc <rcl_get_default_domain_id+0x18>
 8012846:	bf00      	nop
 8012848:	0801550c 	.word	0x0801550c

0801284c <rcl_expand_topic_name>:
 801284c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012850:	b08d      	sub	sp, #52	; 0x34
 8012852:	4698      	mov	r8, r3
 8012854:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012856:	9207      	str	r2, [sp, #28]
 8012858:	2b00      	cmp	r3, #0
 801285a:	bf18      	it	ne
 801285c:	f1b8 0f00 	cmpne.w	r8, #0
 8012860:	bf0c      	ite	eq
 8012862:	2301      	moveq	r3, #1
 8012864:	2300      	movne	r3, #0
 8012866:	2a00      	cmp	r2, #0
 8012868:	bf08      	it	eq
 801286a:	f043 0301 	orreq.w	r3, r3, #1
 801286e:	2900      	cmp	r1, #0
 8012870:	bf08      	it	eq
 8012872:	f043 0301 	orreq.w	r3, r3, #1
 8012876:	2b00      	cmp	r3, #0
 8012878:	d13d      	bne.n	80128f6 <rcl_expand_topic_name+0xaa>
 801287a:	fab0 f280 	clz	r2, r0
 801287e:	4604      	mov	r4, r0
 8012880:	0952      	lsrs	r2, r2, #5
 8012882:	2800      	cmp	r0, #0
 8012884:	d037      	beq.n	80128f6 <rcl_expand_topic_name+0xaa>
 8012886:	460f      	mov	r7, r1
 8012888:	a90b      	add	r1, sp, #44	; 0x2c
 801288a:	f000 f967 	bl	8012b5c <rcl_validate_topic_name>
 801288e:	4605      	mov	r5, r0
 8012890:	bb68      	cbnz	r0, 80128ee <rcl_expand_topic_name+0xa2>
 8012892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012894:	2b00      	cmp	r3, #0
 8012896:	d137      	bne.n	8012908 <rcl_expand_topic_name+0xbc>
 8012898:	4602      	mov	r2, r0
 801289a:	a90b      	add	r1, sp, #44	; 0x2c
 801289c:	4638      	mov	r0, r7
 801289e:	f7f7 fb9d 	bl	8009fdc <rmw_validate_node_name>
 80128a2:	bb68      	cbnz	r0, 8012900 <rcl_expand_topic_name+0xb4>
 80128a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d133      	bne.n	8012912 <rcl_expand_topic_name+0xc6>
 80128aa:	462a      	mov	r2, r5
 80128ac:	a90b      	add	r1, sp, #44	; 0x2c
 80128ae:	9807      	ldr	r0, [sp, #28]
 80128b0:	f7f7 fb76 	bl	8009fa0 <rmw_validate_namespace>
 80128b4:	bb20      	cbnz	r0, 8012900 <rcl_expand_topic_name+0xb4>
 80128b6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80128b8:	2d00      	cmp	r5, #0
 80128ba:	f040 80a2 	bne.w	8012a02 <rcl_expand_topic_name+0x1b6>
 80128be:	217b      	movs	r1, #123	; 0x7b
 80128c0:	4620      	mov	r0, r4
 80128c2:	f000 ffa7 	bl	8013814 <strchr>
 80128c6:	7823      	ldrb	r3, [r4, #0]
 80128c8:	4681      	mov	r9, r0
 80128ca:	bb20      	cbnz	r0, 8012916 <rcl_expand_topic_name+0xca>
 80128cc:	2b2f      	cmp	r3, #47	; 0x2f
 80128ce:	d122      	bne.n	8012916 <rcl_expand_topic_name+0xca>
 80128d0:	ab19      	add	r3, sp, #100	; 0x64
 80128d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80128d6:	ab16      	add	r3, sp, #88	; 0x58
 80128d8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80128dc:	4620      	mov	r0, r4
 80128de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80128e0:	f7f7 fa6c 	bl	8009dbc <rcutils_strdup>
 80128e4:	2800      	cmp	r0, #0
 80128e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80128e8:	bf08      	it	eq
 80128ea:	250a      	moveq	r5, #10
 80128ec:	6018      	str	r0, [r3, #0]
 80128ee:	4628      	mov	r0, r5
 80128f0:	b00d      	add	sp, #52	; 0x34
 80128f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128f6:	250b      	movs	r5, #11
 80128f8:	4628      	mov	r0, r5
 80128fa:	b00d      	add	sp, #52	; 0x34
 80128fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012900:	f7fb ffe0 	bl	800e8c4 <rcl_convert_rmw_ret_to_rcl_ret>
 8012904:	4605      	mov	r5, r0
 8012906:	e7f2      	b.n	80128ee <rcl_expand_topic_name+0xa2>
 8012908:	2567      	movs	r5, #103	; 0x67
 801290a:	4628      	mov	r0, r5
 801290c:	b00d      	add	sp, #52	; 0x34
 801290e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012912:	25c9      	movs	r5, #201	; 0xc9
 8012914:	e7eb      	b.n	80128ee <rcl_expand_topic_name+0xa2>
 8012916:	2b7e      	cmp	r3, #126	; 0x7e
 8012918:	d075      	beq.n	8012a06 <rcl_expand_topic_name+0x1ba>
 801291a:	f1b9 0f00 	cmp.w	r9, #0
 801291e:	f000 80c2 	beq.w	8012aa6 <rcl_expand_topic_name+0x25a>
 8012922:	2300      	movs	r3, #0
 8012924:	46a2      	mov	sl, r4
 8012926:	461e      	mov	r6, r3
 8012928:	9508      	str	r5, [sp, #32]
 801292a:	4655      	mov	r5, sl
 801292c:	9409      	str	r4, [sp, #36]	; 0x24
 801292e:	46b2      	mov	sl, r6
 8012930:	464c      	mov	r4, r9
 8012932:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8012936:	2c00      	cmp	r4, #0
 8012938:	f000 80ae 	beq.w	8012a98 <rcl_expand_topic_name+0x24c>
 801293c:	217d      	movs	r1, #125	; 0x7d
 801293e:	4628      	mov	r0, r5
 8012940:	f000 ff68 	bl	8013814 <strchr>
 8012944:	eba0 0904 	sub.w	r9, r0, r4
 8012948:	4621      	mov	r1, r4
 801294a:	4869      	ldr	r0, [pc, #420]	; (8012af0 <rcl_expand_topic_name+0x2a4>)
 801294c:	f109 0601 	add.w	r6, r9, #1
 8012950:	4632      	mov	r2, r6
 8012952:	f000 ff6c 	bl	801382e <strncmp>
 8012956:	2800      	cmp	r0, #0
 8012958:	d051      	beq.n	80129fe <rcl_expand_topic_name+0x1b2>
 801295a:	4632      	mov	r2, r6
 801295c:	4621      	mov	r1, r4
 801295e:	4865      	ldr	r0, [pc, #404]	; (8012af4 <rcl_expand_topic_name+0x2a8>)
 8012960:	f000 ff65 	bl	801382e <strncmp>
 8012964:	b128      	cbz	r0, 8012972 <rcl_expand_topic_name+0x126>
 8012966:	4632      	mov	r2, r6
 8012968:	4621      	mov	r1, r4
 801296a:	4863      	ldr	r0, [pc, #396]	; (8012af8 <rcl_expand_topic_name+0x2ac>)
 801296c:	f000 ff5f 	bl	801382e <strncmp>
 8012970:	bb38      	cbnz	r0, 80129c2 <rcl_expand_topic_name+0x176>
 8012972:	46d9      	mov	r9, fp
 8012974:	ab18      	add	r3, sp, #96	; 0x60
 8012976:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801297a:	ab16      	add	r3, sp, #88	; 0x58
 801297c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012980:	4620      	mov	r0, r4
 8012982:	4631      	mov	r1, r6
 8012984:	cb0c      	ldmia	r3, {r2, r3}
 8012986:	f7f7 fa3b 	bl	8009e00 <rcutils_strndup>
 801298a:	4604      	mov	r4, r0
 801298c:	2800      	cmp	r0, #0
 801298e:	f000 80a3 	beq.w	8012ad8 <rcl_expand_topic_name+0x28c>
 8012992:	464a      	mov	r2, r9
 8012994:	4628      	mov	r0, r5
 8012996:	ab16      	add	r3, sp, #88	; 0x58
 8012998:	4621      	mov	r1, r4
 801299a:	f7f7 f90f 	bl	8009bbc <rcutils_repl_str>
 801299e:	991a      	ldr	r1, [sp, #104]	; 0x68
 80129a0:	4605      	mov	r5, r0
 80129a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80129a4:	4620      	mov	r0, r4
 80129a6:	4798      	blx	r3
 80129a8:	4650      	mov	r0, sl
 80129aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80129ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80129ae:	4798      	blx	r3
 80129b0:	2d00      	cmp	r5, #0
 80129b2:	d06c      	beq.n	8012a8e <rcl_expand_topic_name+0x242>
 80129b4:	217b      	movs	r1, #123	; 0x7b
 80129b6:	4628      	mov	r0, r5
 80129b8:	f000 ff2c 	bl	8013814 <strchr>
 80129bc:	46aa      	mov	sl, r5
 80129be:	4604      	mov	r4, r0
 80129c0:	e7b9      	b.n	8012936 <rcl_expand_topic_name+0xea>
 80129c2:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80129c6:	1c61      	adds	r1, r4, #1
 80129c8:	4640      	mov	r0, r8
 80129ca:	f7fe fb45 	bl	8011058 <rcutils_string_map_getn>
 80129ce:	4681      	mov	r9, r0
 80129d0:	2800      	cmp	r0, #0
 80129d2:	d1cf      	bne.n	8012974 <rcl_expand_topic_name+0x128>
 80129d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80129d6:	aa18      	add	r2, sp, #96	; 0x60
 80129d8:	2569      	movs	r5, #105	; 0x69
 80129da:	6018      	str	r0, [r3, #0]
 80129dc:	ab16      	add	r3, sp, #88	; 0x58
 80129de:	ca07      	ldmia	r2, {r0, r1, r2}
 80129e0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80129e4:	4631      	mov	r1, r6
 80129e6:	4620      	mov	r0, r4
 80129e8:	cb0c      	ldmia	r3, {r2, r3}
 80129ea:	f7f7 fa09 	bl	8009e00 <rcutils_strndup>
 80129ee:	991a      	ldr	r1, [sp, #104]	; 0x68
 80129f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80129f2:	4798      	blx	r3
 80129f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80129f6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80129f8:	4650      	mov	r0, sl
 80129fa:	4798      	blx	r3
 80129fc:	e777      	b.n	80128ee <rcl_expand_topic_name+0xa2>
 80129fe:	46b9      	mov	r9, r7
 8012a00:	e7b8      	b.n	8012974 <rcl_expand_topic_name+0x128>
 8012a02:	25ca      	movs	r5, #202	; 0xca
 8012a04:	e773      	b.n	80128ee <rcl_expand_topic_name+0xa2>
 8012a06:	9e07      	ldr	r6, [sp, #28]
 8012a08:	4630      	mov	r0, r6
 8012a0a:	f7ed fc23 	bl	8000254 <strlen>
 8012a0e:	4a3b      	ldr	r2, [pc, #236]	; (8012afc <rcl_expand_topic_name+0x2b0>)
 8012a10:	4b3b      	ldr	r3, [pc, #236]	; (8012b00 <rcl_expand_topic_name+0x2b4>)
 8012a12:	9603      	str	r6, [sp, #12]
 8012a14:	2801      	cmp	r0, #1
 8012a16:	bf18      	it	ne
 8012a18:	4613      	movne	r3, r2
 8012a1a:	9704      	str	r7, [sp, #16]
 8012a1c:	9302      	str	r3, [sp, #8]
 8012a1e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012a20:	9300      	str	r3, [sp, #0]
 8012a22:	1c63      	adds	r3, r4, #1
 8012a24:	9305      	str	r3, [sp, #20]
 8012a26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012a2a:	9301      	str	r3, [sp, #4]
 8012a2c:	ab16      	add	r3, sp, #88	; 0x58
 8012a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012a30:	f7f7 f88a 	bl	8009b48 <rcutils_format_string_limit>
 8012a34:	4606      	mov	r6, r0
 8012a36:	b350      	cbz	r0, 8012a8e <rcl_expand_topic_name+0x242>
 8012a38:	f1b9 0f00 	cmp.w	r9, #0
 8012a3c:	d005      	beq.n	8012a4a <rcl_expand_topic_name+0x1fe>
 8012a3e:	217b      	movs	r1, #123	; 0x7b
 8012a40:	46b2      	mov	sl, r6
 8012a42:	f000 fee7 	bl	8013814 <strchr>
 8012a46:	4681      	mov	r9, r0
 8012a48:	e76e      	b.n	8012928 <rcl_expand_topic_name+0xdc>
 8012a4a:	7833      	ldrb	r3, [r6, #0]
 8012a4c:	2b2f      	cmp	r3, #47	; 0x2f
 8012a4e:	d01b      	beq.n	8012a88 <rcl_expand_topic_name+0x23c>
 8012a50:	9c07      	ldr	r4, [sp, #28]
 8012a52:	4620      	mov	r0, r4
 8012a54:	f7ed fbfe 	bl	8000254 <strlen>
 8012a58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012a5c:	4a29      	ldr	r2, [pc, #164]	; (8012b04 <rcl_expand_topic_name+0x2b8>)
 8012a5e:	9301      	str	r3, [sp, #4]
 8012a60:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012a62:	9604      	str	r6, [sp, #16]
 8012a64:	9300      	str	r3, [sp, #0]
 8012a66:	4b28      	ldr	r3, [pc, #160]	; (8012b08 <rcl_expand_topic_name+0x2bc>)
 8012a68:	9403      	str	r4, [sp, #12]
 8012a6a:	2801      	cmp	r0, #1
 8012a6c:	bf18      	it	ne
 8012a6e:	4613      	movne	r3, r2
 8012a70:	9302      	str	r3, [sp, #8]
 8012a72:	ab16      	add	r3, sp, #88	; 0x58
 8012a74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012a76:	f7f7 f867 	bl	8009b48 <rcutils_format_string_limit>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012a7e:	4630      	mov	r0, r6
 8012a80:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012a82:	461e      	mov	r6, r3
 8012a84:	4790      	blx	r2
 8012a86:	b116      	cbz	r6, 8012a8e <rcl_expand_topic_name+0x242>
 8012a88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012a8a:	601e      	str	r6, [r3, #0]
 8012a8c:	e72f      	b.n	80128ee <rcl_expand_topic_name+0xa2>
 8012a8e:	2300      	movs	r3, #0
 8012a90:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012a92:	250a      	movs	r5, #10
 8012a94:	6013      	str	r3, [r2, #0]
 8012a96:	e72a      	b.n	80128ee <rcl_expand_topic_name+0xa2>
 8012a98:	4653      	mov	r3, sl
 8012a9a:	4656      	mov	r6, sl
 8012a9c:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d1d2      	bne.n	8012a4a <rcl_expand_topic_name+0x1fe>
 8012aa4:	7823      	ldrb	r3, [r4, #0]
 8012aa6:	2b2f      	cmp	r3, #47	; 0x2f
 8012aa8:	d01e      	beq.n	8012ae8 <rcl_expand_topic_name+0x29c>
 8012aaa:	9e07      	ldr	r6, [sp, #28]
 8012aac:	4630      	mov	r0, r6
 8012aae:	f7ed fbd1 	bl	8000254 <strlen>
 8012ab2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012ab4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012ab8:	9603      	str	r6, [sp, #12]
 8012aba:	9404      	str	r4, [sp, #16]
 8012abc:	e9cd 2300 	strd	r2, r3, [sp]
 8012ac0:	4a10      	ldr	r2, [pc, #64]	; (8012b04 <rcl_expand_topic_name+0x2b8>)
 8012ac2:	4b11      	ldr	r3, [pc, #68]	; (8012b08 <rcl_expand_topic_name+0x2bc>)
 8012ac4:	2801      	cmp	r0, #1
 8012ac6:	bf18      	it	ne
 8012ac8:	4613      	movne	r3, r2
 8012aca:	9302      	str	r3, [sp, #8]
 8012acc:	ab16      	add	r3, sp, #88	; 0x58
 8012ace:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012ad0:	f7f7 f83a 	bl	8009b48 <rcutils_format_string_limit>
 8012ad4:	4606      	mov	r6, r0
 8012ad6:	e7d6      	b.n	8012a86 <rcl_expand_topic_name+0x23a>
 8012ad8:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 8012adc:	4650      	mov	r0, sl
 8012ade:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012ae0:	6014      	str	r4, [r2, #0]
 8012ae2:	250a      	movs	r5, #10
 8012ae4:	4798      	blx	r3
 8012ae6:	e702      	b.n	80128ee <rcl_expand_topic_name+0xa2>
 8012ae8:	2300      	movs	r3, #0
 8012aea:	461e      	mov	r6, r3
 8012aec:	e7cc      	b.n	8012a88 <rcl_expand_topic_name+0x23c>
 8012aee:	bf00      	nop
 8012af0:	08015524 	.word	0x08015524
 8012af4:	0801552c 	.word	0x0801552c
 8012af8:	08015534 	.word	0x08015534
 8012afc:	0801551c 	.word	0x0801551c
 8012b00:	080150c8 	.word	0x080150c8
 8012b04:	08014c18 	.word	0x08014c18
 8012b08:	08014c10 	.word	0x08014c10

08012b0c <rcl_get_default_topic_name_substitutions>:
 8012b0c:	2800      	cmp	r0, #0
 8012b0e:	bf0c      	ite	eq
 8012b10:	200b      	moveq	r0, #11
 8012b12:	2000      	movne	r0, #0
 8012b14:	4770      	bx	lr
 8012b16:	bf00      	nop

08012b18 <rcl_publisher_is_valid>:
 8012b18:	b1a0      	cbz	r0, 8012b44 <rcl_publisher_is_valid+0x2c>
 8012b1a:	6803      	ldr	r3, [r0, #0]
 8012b1c:	b510      	push	{r4, lr}
 8012b1e:	4604      	mov	r4, r0
 8012b20:	b173      	cbz	r3, 8012b40 <rcl_publisher_is_valid+0x28>
 8012b22:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8012b26:	b15a      	cbz	r2, 8012b40 <rcl_publisher_is_valid+0x28>
 8012b28:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8012b2c:	f7fb fee8 	bl	800e900 <rcl_context_is_valid>
 8012b30:	b130      	cbz	r0, 8012b40 <rcl_publisher_is_valid+0x28>
 8012b32:	6823      	ldr	r3, [r4, #0]
 8012b34:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8012b38:	3800      	subs	r0, #0
 8012b3a:	bf18      	it	ne
 8012b3c:	2001      	movne	r0, #1
 8012b3e:	bd10      	pop	{r4, pc}
 8012b40:	2000      	movs	r0, #0
 8012b42:	bd10      	pop	{r4, pc}
 8012b44:	2000      	movs	r0, #0
 8012b46:	4770      	bx	lr

08012b48 <rcl_publisher_is_valid_except_context>:
 8012b48:	b130      	cbz	r0, 8012b58 <rcl_publisher_is_valid_except_context+0x10>
 8012b4a:	6800      	ldr	r0, [r0, #0]
 8012b4c:	b120      	cbz	r0, 8012b58 <rcl_publisher_is_valid_except_context+0x10>
 8012b4e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8012b52:	3800      	subs	r0, #0
 8012b54:	bf18      	it	ne
 8012b56:	2001      	movne	r0, #1
 8012b58:	4770      	bx	lr
 8012b5a:	bf00      	nop

08012b5c <rcl_validate_topic_name>:
 8012b5c:	2800      	cmp	r0, #0
 8012b5e:	f000 8089 	beq.w	8012c74 <rcl_validate_topic_name+0x118>
 8012b62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b66:	460e      	mov	r6, r1
 8012b68:	2900      	cmp	r1, #0
 8012b6a:	f000 8085 	beq.w	8012c78 <rcl_validate_topic_name+0x11c>
 8012b6e:	4604      	mov	r4, r0
 8012b70:	4617      	mov	r7, r2
 8012b72:	f7ed fb6f 	bl	8000254 <strlen>
 8012b76:	b1b0      	cbz	r0, 8012ba6 <rcl_validate_topic_name+0x4a>
 8012b78:	f894 e000 	ldrb.w	lr, [r4]
 8012b7c:	f8df c160 	ldr.w	ip, [pc, #352]	; 8012ce0 <rcl_validate_topic_name+0x184>
 8012b80:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8012b84:	f013 0304 	ands.w	r3, r3, #4
 8012b88:	d139      	bne.n	8012bfe <rcl_validate_topic_name+0xa2>
 8012b8a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8012b8e:	f814 2008 	ldrb.w	r2, [r4, r8]
 8012b92:	2a2f      	cmp	r2, #47	; 0x2f
 8012b94:	d10f      	bne.n	8012bb6 <rcl_validate_topic_name+0x5a>
 8012b96:	2202      	movs	r2, #2
 8012b98:	6032      	str	r2, [r6, #0]
 8012b9a:	b3a7      	cbz	r7, 8012c06 <rcl_validate_topic_name+0xaa>
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f8c7 8000 	str.w	r8, [r7]
 8012ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ba6:	2301      	movs	r3, #1
 8012ba8:	6033      	str	r3, [r6, #0]
 8012baa:	b367      	cbz	r7, 8012c06 <rcl_validate_topic_name+0xaa>
 8012bac:	2300      	movs	r3, #0
 8012bae:	4618      	mov	r0, r3
 8012bb0:	603b      	str	r3, [r7, #0]
 8012bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bb6:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 8012bba:	461d      	mov	r5, r3
 8012bbc:	4619      	mov	r1, r3
 8012bbe:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8012bc2:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8012bc6:	f1b9 0f09 	cmp.w	r9, #9
 8012bca:	d91f      	bls.n	8012c0c <rcl_validate_topic_name+0xb0>
 8012bcc:	f022 0920 	bic.w	r9, r2, #32
 8012bd0:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 8012bd4:	f1b9 0f19 	cmp.w	r9, #25
 8012bd8:	d918      	bls.n	8012c0c <rcl_validate_topic_name+0xb0>
 8012bda:	2a5f      	cmp	r2, #95	; 0x5f
 8012bdc:	d024      	beq.n	8012c28 <rcl_validate_topic_name+0xcc>
 8012bde:	2a2f      	cmp	r2, #47	; 0x2f
 8012be0:	d058      	beq.n	8012c94 <rcl_validate_topic_name+0x138>
 8012be2:	2a7e      	cmp	r2, #126	; 0x7e
 8012be4:	d04a      	beq.n	8012c7c <rcl_validate_topic_name+0x120>
 8012be6:	2a7b      	cmp	r2, #123	; 0x7b
 8012be8:	d05b      	beq.n	8012ca2 <rcl_validate_topic_name+0x146>
 8012bea:	2a7d      	cmp	r2, #125	; 0x7d
 8012bec:	d169      	bne.n	8012cc2 <rcl_validate_topic_name+0x166>
 8012bee:	2d00      	cmp	r5, #0
 8012bf0:	d15c      	bne.n	8012cac <rcl_validate_topic_name+0x150>
 8012bf2:	2305      	movs	r3, #5
 8012bf4:	6033      	str	r3, [r6, #0]
 8012bf6:	b137      	cbz	r7, 8012c06 <rcl_validate_topic_name+0xaa>
 8012bf8:	2000      	movs	r0, #0
 8012bfa:	6039      	str	r1, [r7, #0]
 8012bfc:	e7d9      	b.n	8012bb2 <rcl_validate_topic_name+0x56>
 8012bfe:	2304      	movs	r3, #4
 8012c00:	6033      	str	r3, [r6, #0]
 8012c02:	2f00      	cmp	r7, #0
 8012c04:	d1d2      	bne.n	8012bac <rcl_validate_topic_name+0x50>
 8012c06:	2000      	movs	r0, #0
 8012c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c0c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8012c10:	0752      	lsls	r2, r2, #29
 8012c12:	d509      	bpl.n	8012c28 <rcl_validate_topic_name+0xcc>
 8012c14:	2900      	cmp	r1, #0
 8012c16:	bf0c      	ite	eq
 8012c18:	2200      	moveq	r2, #0
 8012c1a:	f005 0201 	andne.w	r2, r5, #1
 8012c1e:	b11a      	cbz	r2, 8012c28 <rcl_validate_topic_name+0xcc>
 8012c20:	1e4d      	subs	r5, r1, #1
 8012c22:	429d      	cmp	r5, r3
 8012c24:	d031      	beq.n	8012c8a <rcl_validate_topic_name+0x12e>
 8012c26:	4615      	mov	r5, r2
 8012c28:	3101      	adds	r1, #1
 8012c2a:	4288      	cmp	r0, r1
 8012c2c:	d1c7      	bne.n	8012bbe <rcl_validate_topic_name+0x62>
 8012c2e:	2d00      	cmp	r5, #0
 8012c30:	d142      	bne.n	8012cb8 <rcl_validate_topic_name+0x15c>
 8012c32:	4628      	mov	r0, r5
 8012c34:	2301      	movs	r3, #1
 8012c36:	e00c      	b.n	8012c52 <rcl_validate_topic_name+0xf6>
 8012c38:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8012c3c:	d101      	bne.n	8012c42 <rcl_validate_topic_name+0xe6>
 8012c3e:	2801      	cmp	r0, #1
 8012c40:	d047      	beq.n	8012cd2 <rcl_validate_topic_name+0x176>
 8012c42:	1c5a      	adds	r2, r3, #1
 8012c44:	428b      	cmp	r3, r1
 8012c46:	f100 0001 	add.w	r0, r0, #1
 8012c4a:	f104 0401 	add.w	r4, r4, #1
 8012c4e:	4613      	mov	r3, r2
 8012c50:	d22e      	bcs.n	8012cb0 <rcl_validate_topic_name+0x154>
 8012c52:	4580      	cmp	r8, r0
 8012c54:	d0f5      	beq.n	8012c42 <rcl_validate_topic_name+0xe6>
 8012c56:	7822      	ldrb	r2, [r4, #0]
 8012c58:	2a2f      	cmp	r2, #47	; 0x2f
 8012c5a:	d1ed      	bne.n	8012c38 <rcl_validate_topic_name+0xdc>
 8012c5c:	7862      	ldrb	r2, [r4, #1]
 8012c5e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8012c62:	0752      	lsls	r2, r2, #29
 8012c64:	d5ed      	bpl.n	8012c42 <rcl_validate_topic_name+0xe6>
 8012c66:	2204      	movs	r2, #4
 8012c68:	6032      	str	r2, [r6, #0]
 8012c6a:	2f00      	cmp	r7, #0
 8012c6c:	d0cb      	beq.n	8012c06 <rcl_validate_topic_name+0xaa>
 8012c6e:	2000      	movs	r0, #0
 8012c70:	603b      	str	r3, [r7, #0]
 8012c72:	e79e      	b.n	8012bb2 <rcl_validate_topic_name+0x56>
 8012c74:	200b      	movs	r0, #11
 8012c76:	4770      	bx	lr
 8012c78:	200b      	movs	r0, #11
 8012c7a:	e79a      	b.n	8012bb2 <rcl_validate_topic_name+0x56>
 8012c7c:	2900      	cmp	r1, #0
 8012c7e:	d0d3      	beq.n	8012c28 <rcl_validate_topic_name+0xcc>
 8012c80:	2306      	movs	r3, #6
 8012c82:	6033      	str	r3, [r6, #0]
 8012c84:	2f00      	cmp	r7, #0
 8012c86:	d1b7      	bne.n	8012bf8 <rcl_validate_topic_name+0x9c>
 8012c88:	e7bd      	b.n	8012c06 <rcl_validate_topic_name+0xaa>
 8012c8a:	2309      	movs	r3, #9
 8012c8c:	6033      	str	r3, [r6, #0]
 8012c8e:	2f00      	cmp	r7, #0
 8012c90:	d1b2      	bne.n	8012bf8 <rcl_validate_topic_name+0x9c>
 8012c92:	e7b8      	b.n	8012c06 <rcl_validate_topic_name+0xaa>
 8012c94:	2d00      	cmp	r5, #0
 8012c96:	d0c7      	beq.n	8012c28 <rcl_validate_topic_name+0xcc>
 8012c98:	2308      	movs	r3, #8
 8012c9a:	6033      	str	r3, [r6, #0]
 8012c9c:	2f00      	cmp	r7, #0
 8012c9e:	d1ab      	bne.n	8012bf8 <rcl_validate_topic_name+0x9c>
 8012ca0:	e7b1      	b.n	8012c06 <rcl_validate_topic_name+0xaa>
 8012ca2:	2d00      	cmp	r5, #0
 8012ca4:	d1f8      	bne.n	8012c98 <rcl_validate_topic_name+0x13c>
 8012ca6:	460b      	mov	r3, r1
 8012ca8:	2501      	movs	r5, #1
 8012caa:	e7bd      	b.n	8012c28 <rcl_validate_topic_name+0xcc>
 8012cac:	2500      	movs	r5, #0
 8012cae:	e7bb      	b.n	8012c28 <rcl_validate_topic_name+0xcc>
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	6033      	str	r3, [r6, #0]
 8012cb6:	e77c      	b.n	8012bb2 <rcl_validate_topic_name+0x56>
 8012cb8:	2205      	movs	r2, #5
 8012cba:	6032      	str	r2, [r6, #0]
 8012cbc:	2f00      	cmp	r7, #0
 8012cbe:	d1d6      	bne.n	8012c6e <rcl_validate_topic_name+0x112>
 8012cc0:	e7a1      	b.n	8012c06 <rcl_validate_topic_name+0xaa>
 8012cc2:	2d00      	cmp	r5, #0
 8012cc4:	bf14      	ite	ne
 8012cc6:	2308      	movne	r3, #8
 8012cc8:	2303      	moveq	r3, #3
 8012cca:	6033      	str	r3, [r6, #0]
 8012ccc:	2f00      	cmp	r7, #0
 8012cce:	d193      	bne.n	8012bf8 <rcl_validate_topic_name+0x9c>
 8012cd0:	e799      	b.n	8012c06 <rcl_validate_topic_name+0xaa>
 8012cd2:	2307      	movs	r3, #7
 8012cd4:	6033      	str	r3, [r6, #0]
 8012cd6:	2f00      	cmp	r7, #0
 8012cd8:	d095      	beq.n	8012c06 <rcl_validate_topic_name+0xaa>
 8012cda:	2301      	movs	r3, #1
 8012cdc:	e7c7      	b.n	8012c6e <rcl_validate_topic_name+0x112>
 8012cde:	bf00      	nop
 8012ce0:	080155b0 	.word	0x080155b0

08012ce4 <calloc>:
 8012ce4:	4b02      	ldr	r3, [pc, #8]	; (8012cf0 <calloc+0xc>)
 8012ce6:	460a      	mov	r2, r1
 8012ce8:	4601      	mov	r1, r0
 8012cea:	6818      	ldr	r0, [r3, #0]
 8012cec:	f000 b802 	b.w	8012cf4 <_calloc_r>
 8012cf0:	20000254 	.word	0x20000254

08012cf4 <_calloc_r>:
 8012cf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012cf6:	fba1 2402 	umull	r2, r4, r1, r2
 8012cfa:	b94c      	cbnz	r4, 8012d10 <_calloc_r+0x1c>
 8012cfc:	4611      	mov	r1, r2
 8012cfe:	9201      	str	r2, [sp, #4]
 8012d00:	f000 f886 	bl	8012e10 <_malloc_r>
 8012d04:	9a01      	ldr	r2, [sp, #4]
 8012d06:	4605      	mov	r5, r0
 8012d08:	b930      	cbnz	r0, 8012d18 <_calloc_r+0x24>
 8012d0a:	4628      	mov	r0, r5
 8012d0c:	b003      	add	sp, #12
 8012d0e:	bd30      	pop	{r4, r5, pc}
 8012d10:	220c      	movs	r2, #12
 8012d12:	6002      	str	r2, [r0, #0]
 8012d14:	2500      	movs	r5, #0
 8012d16:	e7f8      	b.n	8012d0a <_calloc_r+0x16>
 8012d18:	4621      	mov	r1, r4
 8012d1a:	f000 fd73 	bl	8013804 <memset>
 8012d1e:	e7f4      	b.n	8012d0a <_calloc_r+0x16>

08012d20 <getenv>:
 8012d20:	b507      	push	{r0, r1, r2, lr}
 8012d22:	4b04      	ldr	r3, [pc, #16]	; (8012d34 <getenv+0x14>)
 8012d24:	4601      	mov	r1, r0
 8012d26:	aa01      	add	r2, sp, #4
 8012d28:	6818      	ldr	r0, [r3, #0]
 8012d2a:	f000 f805 	bl	8012d38 <_findenv_r>
 8012d2e:	b003      	add	sp, #12
 8012d30:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d34:	20000254 	.word	0x20000254

08012d38 <_findenv_r>:
 8012d38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d3c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8012dac <_findenv_r+0x74>
 8012d40:	4607      	mov	r7, r0
 8012d42:	4689      	mov	r9, r1
 8012d44:	4616      	mov	r6, r2
 8012d46:	f000 fea9 	bl	8013a9c <__env_lock>
 8012d4a:	f8da 4000 	ldr.w	r4, [sl]
 8012d4e:	b134      	cbz	r4, 8012d5e <_findenv_r+0x26>
 8012d50:	464b      	mov	r3, r9
 8012d52:	4698      	mov	r8, r3
 8012d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d58:	b13a      	cbz	r2, 8012d6a <_findenv_r+0x32>
 8012d5a:	2a3d      	cmp	r2, #61	; 0x3d
 8012d5c:	d1f9      	bne.n	8012d52 <_findenv_r+0x1a>
 8012d5e:	4638      	mov	r0, r7
 8012d60:	f000 fea2 	bl	8013aa8 <__env_unlock>
 8012d64:	2000      	movs	r0, #0
 8012d66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d6a:	eba8 0809 	sub.w	r8, r8, r9
 8012d6e:	46a3      	mov	fp, r4
 8012d70:	f854 0b04 	ldr.w	r0, [r4], #4
 8012d74:	2800      	cmp	r0, #0
 8012d76:	d0f2      	beq.n	8012d5e <_findenv_r+0x26>
 8012d78:	4642      	mov	r2, r8
 8012d7a:	4649      	mov	r1, r9
 8012d7c:	f000 fd57 	bl	801382e <strncmp>
 8012d80:	2800      	cmp	r0, #0
 8012d82:	d1f4      	bne.n	8012d6e <_findenv_r+0x36>
 8012d84:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012d88:	eb03 0508 	add.w	r5, r3, r8
 8012d8c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8012d90:	2b3d      	cmp	r3, #61	; 0x3d
 8012d92:	d1ec      	bne.n	8012d6e <_findenv_r+0x36>
 8012d94:	f8da 3000 	ldr.w	r3, [sl]
 8012d98:	ebab 0303 	sub.w	r3, fp, r3
 8012d9c:	109b      	asrs	r3, r3, #2
 8012d9e:	4638      	mov	r0, r7
 8012da0:	6033      	str	r3, [r6, #0]
 8012da2:	f000 fe81 	bl	8013aa8 <__env_unlock>
 8012da6:	1c68      	adds	r0, r5, #1
 8012da8:	e7dd      	b.n	8012d66 <_findenv_r+0x2e>
 8012daa:	bf00      	nop
 8012dac:	20000000 	.word	0x20000000

08012db0 <malloc>:
 8012db0:	4b02      	ldr	r3, [pc, #8]	; (8012dbc <malloc+0xc>)
 8012db2:	4601      	mov	r1, r0
 8012db4:	6818      	ldr	r0, [r3, #0]
 8012db6:	f000 b82b 	b.w	8012e10 <_malloc_r>
 8012dba:	bf00      	nop
 8012dbc:	20000254 	.word	0x20000254

08012dc0 <free>:
 8012dc0:	4b02      	ldr	r3, [pc, #8]	; (8012dcc <free+0xc>)
 8012dc2:	4601      	mov	r1, r0
 8012dc4:	6818      	ldr	r0, [r3, #0]
 8012dc6:	f000 be75 	b.w	8013ab4 <_free_r>
 8012dca:	bf00      	nop
 8012dcc:	20000254 	.word	0x20000254

08012dd0 <sbrk_aligned>:
 8012dd0:	b570      	push	{r4, r5, r6, lr}
 8012dd2:	4e0e      	ldr	r6, [pc, #56]	; (8012e0c <sbrk_aligned+0x3c>)
 8012dd4:	460c      	mov	r4, r1
 8012dd6:	6831      	ldr	r1, [r6, #0]
 8012dd8:	4605      	mov	r5, r0
 8012dda:	b911      	cbnz	r1, 8012de2 <sbrk_aligned+0x12>
 8012ddc:	f000 fdda 	bl	8013994 <_sbrk_r>
 8012de0:	6030      	str	r0, [r6, #0]
 8012de2:	4621      	mov	r1, r4
 8012de4:	4628      	mov	r0, r5
 8012de6:	f000 fdd5 	bl	8013994 <_sbrk_r>
 8012dea:	1c43      	adds	r3, r0, #1
 8012dec:	d00a      	beq.n	8012e04 <sbrk_aligned+0x34>
 8012dee:	1cc4      	adds	r4, r0, #3
 8012df0:	f024 0403 	bic.w	r4, r4, #3
 8012df4:	42a0      	cmp	r0, r4
 8012df6:	d007      	beq.n	8012e08 <sbrk_aligned+0x38>
 8012df8:	1a21      	subs	r1, r4, r0
 8012dfa:	4628      	mov	r0, r5
 8012dfc:	f000 fdca 	bl	8013994 <_sbrk_r>
 8012e00:	3001      	adds	r0, #1
 8012e02:	d101      	bne.n	8012e08 <sbrk_aligned+0x38>
 8012e04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8012e08:	4620      	mov	r0, r4
 8012e0a:	bd70      	pop	{r4, r5, r6, pc}
 8012e0c:	20010e20 	.word	0x20010e20

08012e10 <_malloc_r>:
 8012e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e14:	1ccd      	adds	r5, r1, #3
 8012e16:	f025 0503 	bic.w	r5, r5, #3
 8012e1a:	3508      	adds	r5, #8
 8012e1c:	2d0c      	cmp	r5, #12
 8012e1e:	bf38      	it	cc
 8012e20:	250c      	movcc	r5, #12
 8012e22:	2d00      	cmp	r5, #0
 8012e24:	4607      	mov	r7, r0
 8012e26:	db01      	blt.n	8012e2c <_malloc_r+0x1c>
 8012e28:	42a9      	cmp	r1, r5
 8012e2a:	d905      	bls.n	8012e38 <_malloc_r+0x28>
 8012e2c:	230c      	movs	r3, #12
 8012e2e:	603b      	str	r3, [r7, #0]
 8012e30:	2600      	movs	r6, #0
 8012e32:	4630      	mov	r0, r6
 8012e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012f0c <_malloc_r+0xfc>
 8012e3c:	f000 f868 	bl	8012f10 <__malloc_lock>
 8012e40:	f8d8 3000 	ldr.w	r3, [r8]
 8012e44:	461c      	mov	r4, r3
 8012e46:	bb5c      	cbnz	r4, 8012ea0 <_malloc_r+0x90>
 8012e48:	4629      	mov	r1, r5
 8012e4a:	4638      	mov	r0, r7
 8012e4c:	f7ff ffc0 	bl	8012dd0 <sbrk_aligned>
 8012e50:	1c43      	adds	r3, r0, #1
 8012e52:	4604      	mov	r4, r0
 8012e54:	d155      	bne.n	8012f02 <_malloc_r+0xf2>
 8012e56:	f8d8 4000 	ldr.w	r4, [r8]
 8012e5a:	4626      	mov	r6, r4
 8012e5c:	2e00      	cmp	r6, #0
 8012e5e:	d145      	bne.n	8012eec <_malloc_r+0xdc>
 8012e60:	2c00      	cmp	r4, #0
 8012e62:	d048      	beq.n	8012ef6 <_malloc_r+0xe6>
 8012e64:	6823      	ldr	r3, [r4, #0]
 8012e66:	4631      	mov	r1, r6
 8012e68:	4638      	mov	r0, r7
 8012e6a:	eb04 0903 	add.w	r9, r4, r3
 8012e6e:	f000 fd91 	bl	8013994 <_sbrk_r>
 8012e72:	4581      	cmp	r9, r0
 8012e74:	d13f      	bne.n	8012ef6 <_malloc_r+0xe6>
 8012e76:	6821      	ldr	r1, [r4, #0]
 8012e78:	1a6d      	subs	r5, r5, r1
 8012e7a:	4629      	mov	r1, r5
 8012e7c:	4638      	mov	r0, r7
 8012e7e:	f7ff ffa7 	bl	8012dd0 <sbrk_aligned>
 8012e82:	3001      	adds	r0, #1
 8012e84:	d037      	beq.n	8012ef6 <_malloc_r+0xe6>
 8012e86:	6823      	ldr	r3, [r4, #0]
 8012e88:	442b      	add	r3, r5
 8012e8a:	6023      	str	r3, [r4, #0]
 8012e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d038      	beq.n	8012f06 <_malloc_r+0xf6>
 8012e94:	685a      	ldr	r2, [r3, #4]
 8012e96:	42a2      	cmp	r2, r4
 8012e98:	d12b      	bne.n	8012ef2 <_malloc_r+0xe2>
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	605a      	str	r2, [r3, #4]
 8012e9e:	e00f      	b.n	8012ec0 <_malloc_r+0xb0>
 8012ea0:	6822      	ldr	r2, [r4, #0]
 8012ea2:	1b52      	subs	r2, r2, r5
 8012ea4:	d41f      	bmi.n	8012ee6 <_malloc_r+0xd6>
 8012ea6:	2a0b      	cmp	r2, #11
 8012ea8:	d917      	bls.n	8012eda <_malloc_r+0xca>
 8012eaa:	1961      	adds	r1, r4, r5
 8012eac:	42a3      	cmp	r3, r4
 8012eae:	6025      	str	r5, [r4, #0]
 8012eb0:	bf18      	it	ne
 8012eb2:	6059      	strne	r1, [r3, #4]
 8012eb4:	6863      	ldr	r3, [r4, #4]
 8012eb6:	bf08      	it	eq
 8012eb8:	f8c8 1000 	streq.w	r1, [r8]
 8012ebc:	5162      	str	r2, [r4, r5]
 8012ebe:	604b      	str	r3, [r1, #4]
 8012ec0:	4638      	mov	r0, r7
 8012ec2:	f104 060b 	add.w	r6, r4, #11
 8012ec6:	f000 f829 	bl	8012f1c <__malloc_unlock>
 8012eca:	f026 0607 	bic.w	r6, r6, #7
 8012ece:	1d23      	adds	r3, r4, #4
 8012ed0:	1af2      	subs	r2, r6, r3
 8012ed2:	d0ae      	beq.n	8012e32 <_malloc_r+0x22>
 8012ed4:	1b9b      	subs	r3, r3, r6
 8012ed6:	50a3      	str	r3, [r4, r2]
 8012ed8:	e7ab      	b.n	8012e32 <_malloc_r+0x22>
 8012eda:	42a3      	cmp	r3, r4
 8012edc:	6862      	ldr	r2, [r4, #4]
 8012ede:	d1dd      	bne.n	8012e9c <_malloc_r+0x8c>
 8012ee0:	f8c8 2000 	str.w	r2, [r8]
 8012ee4:	e7ec      	b.n	8012ec0 <_malloc_r+0xb0>
 8012ee6:	4623      	mov	r3, r4
 8012ee8:	6864      	ldr	r4, [r4, #4]
 8012eea:	e7ac      	b.n	8012e46 <_malloc_r+0x36>
 8012eec:	4634      	mov	r4, r6
 8012eee:	6876      	ldr	r6, [r6, #4]
 8012ef0:	e7b4      	b.n	8012e5c <_malloc_r+0x4c>
 8012ef2:	4613      	mov	r3, r2
 8012ef4:	e7cc      	b.n	8012e90 <_malloc_r+0x80>
 8012ef6:	230c      	movs	r3, #12
 8012ef8:	603b      	str	r3, [r7, #0]
 8012efa:	4638      	mov	r0, r7
 8012efc:	f000 f80e 	bl	8012f1c <__malloc_unlock>
 8012f00:	e797      	b.n	8012e32 <_malloc_r+0x22>
 8012f02:	6025      	str	r5, [r4, #0]
 8012f04:	e7dc      	b.n	8012ec0 <_malloc_r+0xb0>
 8012f06:	605b      	str	r3, [r3, #4]
 8012f08:	deff      	udf	#255	; 0xff
 8012f0a:	bf00      	nop
 8012f0c:	20010e1c 	.word	0x20010e1c

08012f10 <__malloc_lock>:
 8012f10:	4801      	ldr	r0, [pc, #4]	; (8012f18 <__malloc_lock+0x8>)
 8012f12:	f000 bd8c 	b.w	8013a2e <__retarget_lock_acquire_recursive>
 8012f16:	bf00      	nop
 8012f18:	20010f65 	.word	0x20010f65

08012f1c <__malloc_unlock>:
 8012f1c:	4801      	ldr	r0, [pc, #4]	; (8012f24 <__malloc_unlock+0x8>)
 8012f1e:	f000 bd87 	b.w	8013a30 <__retarget_lock_release_recursive>
 8012f22:	bf00      	nop
 8012f24:	20010f65 	.word	0x20010f65

08012f28 <srand>:
 8012f28:	b538      	push	{r3, r4, r5, lr}
 8012f2a:	4b10      	ldr	r3, [pc, #64]	; (8012f6c <srand+0x44>)
 8012f2c:	681d      	ldr	r5, [r3, #0]
 8012f2e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012f30:	4604      	mov	r4, r0
 8012f32:	b9b3      	cbnz	r3, 8012f62 <srand+0x3a>
 8012f34:	2018      	movs	r0, #24
 8012f36:	f7ff ff3b 	bl	8012db0 <malloc>
 8012f3a:	4602      	mov	r2, r0
 8012f3c:	6328      	str	r0, [r5, #48]	; 0x30
 8012f3e:	b920      	cbnz	r0, 8012f4a <srand+0x22>
 8012f40:	4b0b      	ldr	r3, [pc, #44]	; (8012f70 <srand+0x48>)
 8012f42:	480c      	ldr	r0, [pc, #48]	; (8012f74 <srand+0x4c>)
 8012f44:	2146      	movs	r1, #70	; 0x46
 8012f46:	f000 fd8b 	bl	8013a60 <__assert_func>
 8012f4a:	490b      	ldr	r1, [pc, #44]	; (8012f78 <srand+0x50>)
 8012f4c:	4b0b      	ldr	r3, [pc, #44]	; (8012f7c <srand+0x54>)
 8012f4e:	e9c0 1300 	strd	r1, r3, [r0]
 8012f52:	4b0b      	ldr	r3, [pc, #44]	; (8012f80 <srand+0x58>)
 8012f54:	6083      	str	r3, [r0, #8]
 8012f56:	230b      	movs	r3, #11
 8012f58:	8183      	strh	r3, [r0, #12]
 8012f5a:	2100      	movs	r1, #0
 8012f5c:	2001      	movs	r0, #1
 8012f5e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012f62:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012f64:	2200      	movs	r2, #0
 8012f66:	611c      	str	r4, [r3, #16]
 8012f68:	615a      	str	r2, [r3, #20]
 8012f6a:	bd38      	pop	{r3, r4, r5, pc}
 8012f6c:	20000254 	.word	0x20000254
 8012f70:	08015540 	.word	0x08015540
 8012f74:	08015557 	.word	0x08015557
 8012f78:	abcd330e 	.word	0xabcd330e
 8012f7c:	e66d1234 	.word	0xe66d1234
 8012f80:	0005deec 	.word	0x0005deec

08012f84 <rand>:
 8012f84:	4b16      	ldr	r3, [pc, #88]	; (8012fe0 <rand+0x5c>)
 8012f86:	b510      	push	{r4, lr}
 8012f88:	681c      	ldr	r4, [r3, #0]
 8012f8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012f8c:	b9b3      	cbnz	r3, 8012fbc <rand+0x38>
 8012f8e:	2018      	movs	r0, #24
 8012f90:	f7ff ff0e 	bl	8012db0 <malloc>
 8012f94:	4602      	mov	r2, r0
 8012f96:	6320      	str	r0, [r4, #48]	; 0x30
 8012f98:	b920      	cbnz	r0, 8012fa4 <rand+0x20>
 8012f9a:	4b12      	ldr	r3, [pc, #72]	; (8012fe4 <rand+0x60>)
 8012f9c:	4812      	ldr	r0, [pc, #72]	; (8012fe8 <rand+0x64>)
 8012f9e:	2152      	movs	r1, #82	; 0x52
 8012fa0:	f000 fd5e 	bl	8013a60 <__assert_func>
 8012fa4:	4911      	ldr	r1, [pc, #68]	; (8012fec <rand+0x68>)
 8012fa6:	4b12      	ldr	r3, [pc, #72]	; (8012ff0 <rand+0x6c>)
 8012fa8:	e9c0 1300 	strd	r1, r3, [r0]
 8012fac:	4b11      	ldr	r3, [pc, #68]	; (8012ff4 <rand+0x70>)
 8012fae:	6083      	str	r3, [r0, #8]
 8012fb0:	230b      	movs	r3, #11
 8012fb2:	8183      	strh	r3, [r0, #12]
 8012fb4:	2100      	movs	r1, #0
 8012fb6:	2001      	movs	r0, #1
 8012fb8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012fbc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012fbe:	480e      	ldr	r0, [pc, #56]	; (8012ff8 <rand+0x74>)
 8012fc0:	690b      	ldr	r3, [r1, #16]
 8012fc2:	694c      	ldr	r4, [r1, #20]
 8012fc4:	4a0d      	ldr	r2, [pc, #52]	; (8012ffc <rand+0x78>)
 8012fc6:	4358      	muls	r0, r3
 8012fc8:	fb02 0004 	mla	r0, r2, r4, r0
 8012fcc:	fba3 3202 	umull	r3, r2, r3, r2
 8012fd0:	3301      	adds	r3, #1
 8012fd2:	eb40 0002 	adc.w	r0, r0, r2
 8012fd6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8012fda:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012fde:	bd10      	pop	{r4, pc}
 8012fe0:	20000254 	.word	0x20000254
 8012fe4:	08015540 	.word	0x08015540
 8012fe8:	08015557 	.word	0x08015557
 8012fec:	abcd330e 	.word	0xabcd330e
 8012ff0:	e66d1234 	.word	0xe66d1234
 8012ff4:	0005deec 	.word	0x0005deec
 8012ff8:	5851f42d 	.word	0x5851f42d
 8012ffc:	4c957f2d 	.word	0x4c957f2d

08013000 <realloc>:
 8013000:	4b02      	ldr	r3, [pc, #8]	; (801300c <realloc+0xc>)
 8013002:	460a      	mov	r2, r1
 8013004:	4601      	mov	r1, r0
 8013006:	6818      	ldr	r0, [r3, #0]
 8013008:	f000 b802 	b.w	8013010 <_realloc_r>
 801300c:	20000254 	.word	0x20000254

08013010 <_realloc_r>:
 8013010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013014:	4680      	mov	r8, r0
 8013016:	4614      	mov	r4, r2
 8013018:	460e      	mov	r6, r1
 801301a:	b921      	cbnz	r1, 8013026 <_realloc_r+0x16>
 801301c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013020:	4611      	mov	r1, r2
 8013022:	f7ff bef5 	b.w	8012e10 <_malloc_r>
 8013026:	b92a      	cbnz	r2, 8013034 <_realloc_r+0x24>
 8013028:	f000 fd44 	bl	8013ab4 <_free_r>
 801302c:	4625      	mov	r5, r4
 801302e:	4628      	mov	r0, r5
 8013030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013034:	f000 fd8a 	bl	8013b4c <_malloc_usable_size_r>
 8013038:	4284      	cmp	r4, r0
 801303a:	4607      	mov	r7, r0
 801303c:	d802      	bhi.n	8013044 <_realloc_r+0x34>
 801303e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013042:	d812      	bhi.n	801306a <_realloc_r+0x5a>
 8013044:	4621      	mov	r1, r4
 8013046:	4640      	mov	r0, r8
 8013048:	f7ff fee2 	bl	8012e10 <_malloc_r>
 801304c:	4605      	mov	r5, r0
 801304e:	2800      	cmp	r0, #0
 8013050:	d0ed      	beq.n	801302e <_realloc_r+0x1e>
 8013052:	42bc      	cmp	r4, r7
 8013054:	4622      	mov	r2, r4
 8013056:	4631      	mov	r1, r6
 8013058:	bf28      	it	cs
 801305a:	463a      	movcs	r2, r7
 801305c:	f000 fcf1 	bl	8013a42 <memcpy>
 8013060:	4631      	mov	r1, r6
 8013062:	4640      	mov	r0, r8
 8013064:	f000 fd26 	bl	8013ab4 <_free_r>
 8013068:	e7e1      	b.n	801302e <_realloc_r+0x1e>
 801306a:	4635      	mov	r5, r6
 801306c:	e7df      	b.n	801302e <_realloc_r+0x1e>
	...

08013070 <_strtoul_l.constprop.0>:
 8013070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013074:	4f36      	ldr	r7, [pc, #216]	; (8013150 <_strtoul_l.constprop.0+0xe0>)
 8013076:	4686      	mov	lr, r0
 8013078:	460d      	mov	r5, r1
 801307a:	4628      	mov	r0, r5
 801307c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013080:	5d3e      	ldrb	r6, [r7, r4]
 8013082:	f016 0608 	ands.w	r6, r6, #8
 8013086:	d1f8      	bne.n	801307a <_strtoul_l.constprop.0+0xa>
 8013088:	2c2d      	cmp	r4, #45	; 0x2d
 801308a:	d130      	bne.n	80130ee <_strtoul_l.constprop.0+0x7e>
 801308c:	782c      	ldrb	r4, [r5, #0]
 801308e:	2601      	movs	r6, #1
 8013090:	1c85      	adds	r5, r0, #2
 8013092:	2b00      	cmp	r3, #0
 8013094:	d057      	beq.n	8013146 <_strtoul_l.constprop.0+0xd6>
 8013096:	2b10      	cmp	r3, #16
 8013098:	d109      	bne.n	80130ae <_strtoul_l.constprop.0+0x3e>
 801309a:	2c30      	cmp	r4, #48	; 0x30
 801309c:	d107      	bne.n	80130ae <_strtoul_l.constprop.0+0x3e>
 801309e:	7828      	ldrb	r0, [r5, #0]
 80130a0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80130a4:	2858      	cmp	r0, #88	; 0x58
 80130a6:	d149      	bne.n	801313c <_strtoul_l.constprop.0+0xcc>
 80130a8:	786c      	ldrb	r4, [r5, #1]
 80130aa:	2310      	movs	r3, #16
 80130ac:	3502      	adds	r5, #2
 80130ae:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80130b2:	2700      	movs	r7, #0
 80130b4:	fbb8 f8f3 	udiv	r8, r8, r3
 80130b8:	fb03 f908 	mul.w	r9, r3, r8
 80130bc:	ea6f 0909 	mvn.w	r9, r9
 80130c0:	4638      	mov	r0, r7
 80130c2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80130c6:	f1bc 0f09 	cmp.w	ip, #9
 80130ca:	d815      	bhi.n	80130f8 <_strtoul_l.constprop.0+0x88>
 80130cc:	4664      	mov	r4, ip
 80130ce:	42a3      	cmp	r3, r4
 80130d0:	dd23      	ble.n	801311a <_strtoul_l.constprop.0+0xaa>
 80130d2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80130d6:	d007      	beq.n	80130e8 <_strtoul_l.constprop.0+0x78>
 80130d8:	4580      	cmp	r8, r0
 80130da:	d31b      	bcc.n	8013114 <_strtoul_l.constprop.0+0xa4>
 80130dc:	d101      	bne.n	80130e2 <_strtoul_l.constprop.0+0x72>
 80130de:	45a1      	cmp	r9, r4
 80130e0:	db18      	blt.n	8013114 <_strtoul_l.constprop.0+0xa4>
 80130e2:	fb00 4003 	mla	r0, r0, r3, r4
 80130e6:	2701      	movs	r7, #1
 80130e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80130ec:	e7e9      	b.n	80130c2 <_strtoul_l.constprop.0+0x52>
 80130ee:	2c2b      	cmp	r4, #43	; 0x2b
 80130f0:	bf04      	itt	eq
 80130f2:	782c      	ldrbeq	r4, [r5, #0]
 80130f4:	1c85      	addeq	r5, r0, #2
 80130f6:	e7cc      	b.n	8013092 <_strtoul_l.constprop.0+0x22>
 80130f8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80130fc:	f1bc 0f19 	cmp.w	ip, #25
 8013100:	d801      	bhi.n	8013106 <_strtoul_l.constprop.0+0x96>
 8013102:	3c37      	subs	r4, #55	; 0x37
 8013104:	e7e3      	b.n	80130ce <_strtoul_l.constprop.0+0x5e>
 8013106:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801310a:	f1bc 0f19 	cmp.w	ip, #25
 801310e:	d804      	bhi.n	801311a <_strtoul_l.constprop.0+0xaa>
 8013110:	3c57      	subs	r4, #87	; 0x57
 8013112:	e7dc      	b.n	80130ce <_strtoul_l.constprop.0+0x5e>
 8013114:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013118:	e7e6      	b.n	80130e8 <_strtoul_l.constprop.0+0x78>
 801311a:	1c7b      	adds	r3, r7, #1
 801311c:	d106      	bne.n	801312c <_strtoul_l.constprop.0+0xbc>
 801311e:	2322      	movs	r3, #34	; 0x22
 8013120:	f8ce 3000 	str.w	r3, [lr]
 8013124:	4638      	mov	r0, r7
 8013126:	b932      	cbnz	r2, 8013136 <_strtoul_l.constprop.0+0xc6>
 8013128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801312c:	b106      	cbz	r6, 8013130 <_strtoul_l.constprop.0+0xc0>
 801312e:	4240      	negs	r0, r0
 8013130:	2a00      	cmp	r2, #0
 8013132:	d0f9      	beq.n	8013128 <_strtoul_l.constprop.0+0xb8>
 8013134:	b107      	cbz	r7, 8013138 <_strtoul_l.constprop.0+0xc8>
 8013136:	1e69      	subs	r1, r5, #1
 8013138:	6011      	str	r1, [r2, #0]
 801313a:	e7f5      	b.n	8013128 <_strtoul_l.constprop.0+0xb8>
 801313c:	2430      	movs	r4, #48	; 0x30
 801313e:	2b00      	cmp	r3, #0
 8013140:	d1b5      	bne.n	80130ae <_strtoul_l.constprop.0+0x3e>
 8013142:	2308      	movs	r3, #8
 8013144:	e7b3      	b.n	80130ae <_strtoul_l.constprop.0+0x3e>
 8013146:	2c30      	cmp	r4, #48	; 0x30
 8013148:	d0a9      	beq.n	801309e <_strtoul_l.constprop.0+0x2e>
 801314a:	230a      	movs	r3, #10
 801314c:	e7af      	b.n	80130ae <_strtoul_l.constprop.0+0x3e>
 801314e:	bf00      	nop
 8013150:	080155b0 	.word	0x080155b0

08013154 <strtoul>:
 8013154:	4613      	mov	r3, r2
 8013156:	460a      	mov	r2, r1
 8013158:	4601      	mov	r1, r0
 801315a:	4802      	ldr	r0, [pc, #8]	; (8013164 <strtoul+0x10>)
 801315c:	6800      	ldr	r0, [r0, #0]
 801315e:	f7ff bf87 	b.w	8013070 <_strtoul_l.constprop.0>
 8013162:	bf00      	nop
 8013164:	20000254 	.word	0x20000254

08013168 <std>:
 8013168:	2300      	movs	r3, #0
 801316a:	b510      	push	{r4, lr}
 801316c:	4604      	mov	r4, r0
 801316e:	e9c0 3300 	strd	r3, r3, [r0]
 8013172:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013176:	6083      	str	r3, [r0, #8]
 8013178:	8181      	strh	r1, [r0, #12]
 801317a:	6643      	str	r3, [r0, #100]	; 0x64
 801317c:	81c2      	strh	r2, [r0, #14]
 801317e:	6183      	str	r3, [r0, #24]
 8013180:	4619      	mov	r1, r3
 8013182:	2208      	movs	r2, #8
 8013184:	305c      	adds	r0, #92	; 0x5c
 8013186:	f000 fb3d 	bl	8013804 <memset>
 801318a:	4b0d      	ldr	r3, [pc, #52]	; (80131c0 <std+0x58>)
 801318c:	6263      	str	r3, [r4, #36]	; 0x24
 801318e:	4b0d      	ldr	r3, [pc, #52]	; (80131c4 <std+0x5c>)
 8013190:	62a3      	str	r3, [r4, #40]	; 0x28
 8013192:	4b0d      	ldr	r3, [pc, #52]	; (80131c8 <std+0x60>)
 8013194:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013196:	4b0d      	ldr	r3, [pc, #52]	; (80131cc <std+0x64>)
 8013198:	6323      	str	r3, [r4, #48]	; 0x30
 801319a:	4b0d      	ldr	r3, [pc, #52]	; (80131d0 <std+0x68>)
 801319c:	6224      	str	r4, [r4, #32]
 801319e:	429c      	cmp	r4, r3
 80131a0:	d006      	beq.n	80131b0 <std+0x48>
 80131a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80131a6:	4294      	cmp	r4, r2
 80131a8:	d002      	beq.n	80131b0 <std+0x48>
 80131aa:	33d0      	adds	r3, #208	; 0xd0
 80131ac:	429c      	cmp	r4, r3
 80131ae:	d105      	bne.n	80131bc <std+0x54>
 80131b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80131b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131b8:	f000 bc38 	b.w	8013a2c <__retarget_lock_init_recursive>
 80131bc:	bd10      	pop	{r4, pc}
 80131be:	bf00      	nop
 80131c0:	0801358d 	.word	0x0801358d
 80131c4:	080135af 	.word	0x080135af
 80131c8:	080135e7 	.word	0x080135e7
 80131cc:	0801360b 	.word	0x0801360b
 80131d0:	20010e24 	.word	0x20010e24

080131d4 <stdio_exit_handler>:
 80131d4:	4a02      	ldr	r2, [pc, #8]	; (80131e0 <stdio_exit_handler+0xc>)
 80131d6:	4903      	ldr	r1, [pc, #12]	; (80131e4 <stdio_exit_handler+0x10>)
 80131d8:	4803      	ldr	r0, [pc, #12]	; (80131e8 <stdio_exit_handler+0x14>)
 80131da:	f000 b869 	b.w	80132b0 <_fwalk_sglue>
 80131de:	bf00      	nop
 80131e0:	200001fc 	.word	0x200001fc
 80131e4:	080144c1 	.word	0x080144c1
 80131e8:	20000208 	.word	0x20000208

080131ec <cleanup_stdio>:
 80131ec:	6841      	ldr	r1, [r0, #4]
 80131ee:	4b0c      	ldr	r3, [pc, #48]	; (8013220 <cleanup_stdio+0x34>)
 80131f0:	4299      	cmp	r1, r3
 80131f2:	b510      	push	{r4, lr}
 80131f4:	4604      	mov	r4, r0
 80131f6:	d001      	beq.n	80131fc <cleanup_stdio+0x10>
 80131f8:	f001 f962 	bl	80144c0 <_fflush_r>
 80131fc:	68a1      	ldr	r1, [r4, #8]
 80131fe:	4b09      	ldr	r3, [pc, #36]	; (8013224 <cleanup_stdio+0x38>)
 8013200:	4299      	cmp	r1, r3
 8013202:	d002      	beq.n	801320a <cleanup_stdio+0x1e>
 8013204:	4620      	mov	r0, r4
 8013206:	f001 f95b 	bl	80144c0 <_fflush_r>
 801320a:	68e1      	ldr	r1, [r4, #12]
 801320c:	4b06      	ldr	r3, [pc, #24]	; (8013228 <cleanup_stdio+0x3c>)
 801320e:	4299      	cmp	r1, r3
 8013210:	d004      	beq.n	801321c <cleanup_stdio+0x30>
 8013212:	4620      	mov	r0, r4
 8013214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013218:	f001 b952 	b.w	80144c0 <_fflush_r>
 801321c:	bd10      	pop	{r4, pc}
 801321e:	bf00      	nop
 8013220:	20010e24 	.word	0x20010e24
 8013224:	20010e8c 	.word	0x20010e8c
 8013228:	20010ef4 	.word	0x20010ef4

0801322c <global_stdio_init.part.0>:
 801322c:	b510      	push	{r4, lr}
 801322e:	4b0b      	ldr	r3, [pc, #44]	; (801325c <global_stdio_init.part.0+0x30>)
 8013230:	4c0b      	ldr	r4, [pc, #44]	; (8013260 <global_stdio_init.part.0+0x34>)
 8013232:	4a0c      	ldr	r2, [pc, #48]	; (8013264 <global_stdio_init.part.0+0x38>)
 8013234:	601a      	str	r2, [r3, #0]
 8013236:	4620      	mov	r0, r4
 8013238:	2200      	movs	r2, #0
 801323a:	2104      	movs	r1, #4
 801323c:	f7ff ff94 	bl	8013168 <std>
 8013240:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8013244:	2201      	movs	r2, #1
 8013246:	2109      	movs	r1, #9
 8013248:	f7ff ff8e 	bl	8013168 <std>
 801324c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8013250:	2202      	movs	r2, #2
 8013252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013256:	2112      	movs	r1, #18
 8013258:	f7ff bf86 	b.w	8013168 <std>
 801325c:	20010f5c 	.word	0x20010f5c
 8013260:	20010e24 	.word	0x20010e24
 8013264:	080131d5 	.word	0x080131d5

08013268 <__sfp_lock_acquire>:
 8013268:	4801      	ldr	r0, [pc, #4]	; (8013270 <__sfp_lock_acquire+0x8>)
 801326a:	f000 bbe0 	b.w	8013a2e <__retarget_lock_acquire_recursive>
 801326e:	bf00      	nop
 8013270:	20010f66 	.word	0x20010f66

08013274 <__sfp_lock_release>:
 8013274:	4801      	ldr	r0, [pc, #4]	; (801327c <__sfp_lock_release+0x8>)
 8013276:	f000 bbdb 	b.w	8013a30 <__retarget_lock_release_recursive>
 801327a:	bf00      	nop
 801327c:	20010f66 	.word	0x20010f66

08013280 <__sinit>:
 8013280:	b510      	push	{r4, lr}
 8013282:	4604      	mov	r4, r0
 8013284:	f7ff fff0 	bl	8013268 <__sfp_lock_acquire>
 8013288:	6a23      	ldr	r3, [r4, #32]
 801328a:	b11b      	cbz	r3, 8013294 <__sinit+0x14>
 801328c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013290:	f7ff bff0 	b.w	8013274 <__sfp_lock_release>
 8013294:	4b04      	ldr	r3, [pc, #16]	; (80132a8 <__sinit+0x28>)
 8013296:	6223      	str	r3, [r4, #32]
 8013298:	4b04      	ldr	r3, [pc, #16]	; (80132ac <__sinit+0x2c>)
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d1f5      	bne.n	801328c <__sinit+0xc>
 80132a0:	f7ff ffc4 	bl	801322c <global_stdio_init.part.0>
 80132a4:	e7f2      	b.n	801328c <__sinit+0xc>
 80132a6:	bf00      	nop
 80132a8:	080131ed 	.word	0x080131ed
 80132ac:	20010f5c 	.word	0x20010f5c

080132b0 <_fwalk_sglue>:
 80132b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132b4:	4607      	mov	r7, r0
 80132b6:	4688      	mov	r8, r1
 80132b8:	4614      	mov	r4, r2
 80132ba:	2600      	movs	r6, #0
 80132bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80132c0:	f1b9 0901 	subs.w	r9, r9, #1
 80132c4:	d505      	bpl.n	80132d2 <_fwalk_sglue+0x22>
 80132c6:	6824      	ldr	r4, [r4, #0]
 80132c8:	2c00      	cmp	r4, #0
 80132ca:	d1f7      	bne.n	80132bc <_fwalk_sglue+0xc>
 80132cc:	4630      	mov	r0, r6
 80132ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132d2:	89ab      	ldrh	r3, [r5, #12]
 80132d4:	2b01      	cmp	r3, #1
 80132d6:	d907      	bls.n	80132e8 <_fwalk_sglue+0x38>
 80132d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80132dc:	3301      	adds	r3, #1
 80132de:	d003      	beq.n	80132e8 <_fwalk_sglue+0x38>
 80132e0:	4629      	mov	r1, r5
 80132e2:	4638      	mov	r0, r7
 80132e4:	47c0      	blx	r8
 80132e6:	4306      	orrs	r6, r0
 80132e8:	3568      	adds	r5, #104	; 0x68
 80132ea:	e7e9      	b.n	80132c0 <_fwalk_sglue+0x10>

080132ec <iprintf>:
 80132ec:	b40f      	push	{r0, r1, r2, r3}
 80132ee:	b507      	push	{r0, r1, r2, lr}
 80132f0:	4906      	ldr	r1, [pc, #24]	; (801330c <iprintf+0x20>)
 80132f2:	ab04      	add	r3, sp, #16
 80132f4:	6808      	ldr	r0, [r1, #0]
 80132f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80132fa:	6881      	ldr	r1, [r0, #8]
 80132fc:	9301      	str	r3, [sp, #4]
 80132fe:	f000 fdaf 	bl	8013e60 <_vfiprintf_r>
 8013302:	b003      	add	sp, #12
 8013304:	f85d eb04 	ldr.w	lr, [sp], #4
 8013308:	b004      	add	sp, #16
 801330a:	4770      	bx	lr
 801330c:	20000254 	.word	0x20000254

08013310 <_puts_r>:
 8013310:	6a03      	ldr	r3, [r0, #32]
 8013312:	b570      	push	{r4, r5, r6, lr}
 8013314:	6884      	ldr	r4, [r0, #8]
 8013316:	4605      	mov	r5, r0
 8013318:	460e      	mov	r6, r1
 801331a:	b90b      	cbnz	r3, 8013320 <_puts_r+0x10>
 801331c:	f7ff ffb0 	bl	8013280 <__sinit>
 8013320:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013322:	07db      	lsls	r3, r3, #31
 8013324:	d405      	bmi.n	8013332 <_puts_r+0x22>
 8013326:	89a3      	ldrh	r3, [r4, #12]
 8013328:	0598      	lsls	r0, r3, #22
 801332a:	d402      	bmi.n	8013332 <_puts_r+0x22>
 801332c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801332e:	f000 fb7e 	bl	8013a2e <__retarget_lock_acquire_recursive>
 8013332:	89a3      	ldrh	r3, [r4, #12]
 8013334:	0719      	lsls	r1, r3, #28
 8013336:	d513      	bpl.n	8013360 <_puts_r+0x50>
 8013338:	6923      	ldr	r3, [r4, #16]
 801333a:	b18b      	cbz	r3, 8013360 <_puts_r+0x50>
 801333c:	3e01      	subs	r6, #1
 801333e:	68a3      	ldr	r3, [r4, #8]
 8013340:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013344:	3b01      	subs	r3, #1
 8013346:	60a3      	str	r3, [r4, #8]
 8013348:	b9e9      	cbnz	r1, 8013386 <_puts_r+0x76>
 801334a:	2b00      	cmp	r3, #0
 801334c:	da2e      	bge.n	80133ac <_puts_r+0x9c>
 801334e:	4622      	mov	r2, r4
 8013350:	210a      	movs	r1, #10
 8013352:	4628      	mov	r0, r5
 8013354:	f000 f996 	bl	8013684 <__swbuf_r>
 8013358:	3001      	adds	r0, #1
 801335a:	d007      	beq.n	801336c <_puts_r+0x5c>
 801335c:	250a      	movs	r5, #10
 801335e:	e007      	b.n	8013370 <_puts_r+0x60>
 8013360:	4621      	mov	r1, r4
 8013362:	4628      	mov	r0, r5
 8013364:	f000 f9cc 	bl	8013700 <__swsetup_r>
 8013368:	2800      	cmp	r0, #0
 801336a:	d0e7      	beq.n	801333c <_puts_r+0x2c>
 801336c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8013370:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013372:	07da      	lsls	r2, r3, #31
 8013374:	d405      	bmi.n	8013382 <_puts_r+0x72>
 8013376:	89a3      	ldrh	r3, [r4, #12]
 8013378:	059b      	lsls	r3, r3, #22
 801337a:	d402      	bmi.n	8013382 <_puts_r+0x72>
 801337c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801337e:	f000 fb57 	bl	8013a30 <__retarget_lock_release_recursive>
 8013382:	4628      	mov	r0, r5
 8013384:	bd70      	pop	{r4, r5, r6, pc}
 8013386:	2b00      	cmp	r3, #0
 8013388:	da04      	bge.n	8013394 <_puts_r+0x84>
 801338a:	69a2      	ldr	r2, [r4, #24]
 801338c:	429a      	cmp	r2, r3
 801338e:	dc06      	bgt.n	801339e <_puts_r+0x8e>
 8013390:	290a      	cmp	r1, #10
 8013392:	d004      	beq.n	801339e <_puts_r+0x8e>
 8013394:	6823      	ldr	r3, [r4, #0]
 8013396:	1c5a      	adds	r2, r3, #1
 8013398:	6022      	str	r2, [r4, #0]
 801339a:	7019      	strb	r1, [r3, #0]
 801339c:	e7cf      	b.n	801333e <_puts_r+0x2e>
 801339e:	4622      	mov	r2, r4
 80133a0:	4628      	mov	r0, r5
 80133a2:	f000 f96f 	bl	8013684 <__swbuf_r>
 80133a6:	3001      	adds	r0, #1
 80133a8:	d1c9      	bne.n	801333e <_puts_r+0x2e>
 80133aa:	e7df      	b.n	801336c <_puts_r+0x5c>
 80133ac:	6823      	ldr	r3, [r4, #0]
 80133ae:	250a      	movs	r5, #10
 80133b0:	1c5a      	adds	r2, r3, #1
 80133b2:	6022      	str	r2, [r4, #0]
 80133b4:	701d      	strb	r5, [r3, #0]
 80133b6:	e7db      	b.n	8013370 <_puts_r+0x60>

080133b8 <puts>:
 80133b8:	4b02      	ldr	r3, [pc, #8]	; (80133c4 <puts+0xc>)
 80133ba:	4601      	mov	r1, r0
 80133bc:	6818      	ldr	r0, [r3, #0]
 80133be:	f7ff bfa7 	b.w	8013310 <_puts_r>
 80133c2:	bf00      	nop
 80133c4:	20000254 	.word	0x20000254

080133c8 <setvbuf>:
 80133c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80133cc:	461d      	mov	r5, r3
 80133ce:	4b54      	ldr	r3, [pc, #336]	; (8013520 <setvbuf+0x158>)
 80133d0:	681f      	ldr	r7, [r3, #0]
 80133d2:	4604      	mov	r4, r0
 80133d4:	460e      	mov	r6, r1
 80133d6:	4690      	mov	r8, r2
 80133d8:	b127      	cbz	r7, 80133e4 <setvbuf+0x1c>
 80133da:	6a3b      	ldr	r3, [r7, #32]
 80133dc:	b913      	cbnz	r3, 80133e4 <setvbuf+0x1c>
 80133de:	4638      	mov	r0, r7
 80133e0:	f7ff ff4e 	bl	8013280 <__sinit>
 80133e4:	f1b8 0f02 	cmp.w	r8, #2
 80133e8:	d006      	beq.n	80133f8 <setvbuf+0x30>
 80133ea:	f1b8 0f01 	cmp.w	r8, #1
 80133ee:	f200 8094 	bhi.w	801351a <setvbuf+0x152>
 80133f2:	2d00      	cmp	r5, #0
 80133f4:	f2c0 8091 	blt.w	801351a <setvbuf+0x152>
 80133f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80133fa:	07da      	lsls	r2, r3, #31
 80133fc:	d405      	bmi.n	801340a <setvbuf+0x42>
 80133fe:	89a3      	ldrh	r3, [r4, #12]
 8013400:	059b      	lsls	r3, r3, #22
 8013402:	d402      	bmi.n	801340a <setvbuf+0x42>
 8013404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013406:	f000 fb12 	bl	8013a2e <__retarget_lock_acquire_recursive>
 801340a:	4621      	mov	r1, r4
 801340c:	4638      	mov	r0, r7
 801340e:	f001 f857 	bl	80144c0 <_fflush_r>
 8013412:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013414:	b141      	cbz	r1, 8013428 <setvbuf+0x60>
 8013416:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801341a:	4299      	cmp	r1, r3
 801341c:	d002      	beq.n	8013424 <setvbuf+0x5c>
 801341e:	4638      	mov	r0, r7
 8013420:	f000 fb48 	bl	8013ab4 <_free_r>
 8013424:	2300      	movs	r3, #0
 8013426:	6363      	str	r3, [r4, #52]	; 0x34
 8013428:	2300      	movs	r3, #0
 801342a:	61a3      	str	r3, [r4, #24]
 801342c:	6063      	str	r3, [r4, #4]
 801342e:	89a3      	ldrh	r3, [r4, #12]
 8013430:	0618      	lsls	r0, r3, #24
 8013432:	d503      	bpl.n	801343c <setvbuf+0x74>
 8013434:	6921      	ldr	r1, [r4, #16]
 8013436:	4638      	mov	r0, r7
 8013438:	f000 fb3c 	bl	8013ab4 <_free_r>
 801343c:	89a3      	ldrh	r3, [r4, #12]
 801343e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8013442:	f023 0303 	bic.w	r3, r3, #3
 8013446:	f1b8 0f02 	cmp.w	r8, #2
 801344a:	81a3      	strh	r3, [r4, #12]
 801344c:	d05f      	beq.n	801350e <setvbuf+0x146>
 801344e:	ab01      	add	r3, sp, #4
 8013450:	466a      	mov	r2, sp
 8013452:	4621      	mov	r1, r4
 8013454:	4638      	mov	r0, r7
 8013456:	f001 f86d 	bl	8014534 <__swhatbuf_r>
 801345a:	89a3      	ldrh	r3, [r4, #12]
 801345c:	4318      	orrs	r0, r3
 801345e:	81a0      	strh	r0, [r4, #12]
 8013460:	bb2d      	cbnz	r5, 80134ae <setvbuf+0xe6>
 8013462:	9d00      	ldr	r5, [sp, #0]
 8013464:	4628      	mov	r0, r5
 8013466:	f7ff fca3 	bl	8012db0 <malloc>
 801346a:	4606      	mov	r6, r0
 801346c:	2800      	cmp	r0, #0
 801346e:	d150      	bne.n	8013512 <setvbuf+0x14a>
 8013470:	f8dd 9000 	ldr.w	r9, [sp]
 8013474:	45a9      	cmp	r9, r5
 8013476:	d13e      	bne.n	80134f6 <setvbuf+0x12e>
 8013478:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801347c:	2200      	movs	r2, #0
 801347e:	60a2      	str	r2, [r4, #8]
 8013480:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8013484:	6022      	str	r2, [r4, #0]
 8013486:	6122      	str	r2, [r4, #16]
 8013488:	2201      	movs	r2, #1
 801348a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801348e:	6162      	str	r2, [r4, #20]
 8013490:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013492:	f043 0302 	orr.w	r3, r3, #2
 8013496:	07d1      	lsls	r1, r2, #31
 8013498:	81a3      	strh	r3, [r4, #12]
 801349a:	d404      	bmi.n	80134a6 <setvbuf+0xde>
 801349c:	059b      	lsls	r3, r3, #22
 801349e:	d402      	bmi.n	80134a6 <setvbuf+0xde>
 80134a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80134a2:	f000 fac5 	bl	8013a30 <__retarget_lock_release_recursive>
 80134a6:	4628      	mov	r0, r5
 80134a8:	b003      	add	sp, #12
 80134aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134ae:	2e00      	cmp	r6, #0
 80134b0:	d0d8      	beq.n	8013464 <setvbuf+0x9c>
 80134b2:	6a3b      	ldr	r3, [r7, #32]
 80134b4:	b913      	cbnz	r3, 80134bc <setvbuf+0xf4>
 80134b6:	4638      	mov	r0, r7
 80134b8:	f7ff fee2 	bl	8013280 <__sinit>
 80134bc:	f1b8 0f01 	cmp.w	r8, #1
 80134c0:	bf08      	it	eq
 80134c2:	89a3      	ldrheq	r3, [r4, #12]
 80134c4:	6026      	str	r6, [r4, #0]
 80134c6:	bf04      	itt	eq
 80134c8:	f043 0301 	orreq.w	r3, r3, #1
 80134cc:	81a3      	strheq	r3, [r4, #12]
 80134ce:	89a3      	ldrh	r3, [r4, #12]
 80134d0:	f013 0208 	ands.w	r2, r3, #8
 80134d4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80134d8:	d01d      	beq.n	8013516 <setvbuf+0x14e>
 80134da:	07da      	lsls	r2, r3, #31
 80134dc:	bf41      	itttt	mi
 80134de:	2200      	movmi	r2, #0
 80134e0:	426d      	negmi	r5, r5
 80134e2:	60a2      	strmi	r2, [r4, #8]
 80134e4:	61a5      	strmi	r5, [r4, #24]
 80134e6:	bf58      	it	pl
 80134e8:	60a5      	strpl	r5, [r4, #8]
 80134ea:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80134ec:	f015 0501 	ands.w	r5, r5, #1
 80134f0:	d0d4      	beq.n	801349c <setvbuf+0xd4>
 80134f2:	2500      	movs	r5, #0
 80134f4:	e7d7      	b.n	80134a6 <setvbuf+0xde>
 80134f6:	4648      	mov	r0, r9
 80134f8:	f7ff fc5a 	bl	8012db0 <malloc>
 80134fc:	4606      	mov	r6, r0
 80134fe:	2800      	cmp	r0, #0
 8013500:	d0ba      	beq.n	8013478 <setvbuf+0xb0>
 8013502:	89a3      	ldrh	r3, [r4, #12]
 8013504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013508:	81a3      	strh	r3, [r4, #12]
 801350a:	464d      	mov	r5, r9
 801350c:	e7d1      	b.n	80134b2 <setvbuf+0xea>
 801350e:	2500      	movs	r5, #0
 8013510:	e7b4      	b.n	801347c <setvbuf+0xb4>
 8013512:	46a9      	mov	r9, r5
 8013514:	e7f5      	b.n	8013502 <setvbuf+0x13a>
 8013516:	60a2      	str	r2, [r4, #8]
 8013518:	e7e7      	b.n	80134ea <setvbuf+0x122>
 801351a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801351e:	e7c2      	b.n	80134a6 <setvbuf+0xde>
 8013520:	20000254 	.word	0x20000254

08013524 <sniprintf>:
 8013524:	b40c      	push	{r2, r3}
 8013526:	b530      	push	{r4, r5, lr}
 8013528:	4b17      	ldr	r3, [pc, #92]	; (8013588 <sniprintf+0x64>)
 801352a:	1e0c      	subs	r4, r1, #0
 801352c:	681d      	ldr	r5, [r3, #0]
 801352e:	b09d      	sub	sp, #116	; 0x74
 8013530:	da08      	bge.n	8013544 <sniprintf+0x20>
 8013532:	238b      	movs	r3, #139	; 0x8b
 8013534:	602b      	str	r3, [r5, #0]
 8013536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801353a:	b01d      	add	sp, #116	; 0x74
 801353c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013540:	b002      	add	sp, #8
 8013542:	4770      	bx	lr
 8013544:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013548:	f8ad 3014 	strh.w	r3, [sp, #20]
 801354c:	bf14      	ite	ne
 801354e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8013552:	4623      	moveq	r3, r4
 8013554:	9304      	str	r3, [sp, #16]
 8013556:	9307      	str	r3, [sp, #28]
 8013558:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801355c:	9002      	str	r0, [sp, #8]
 801355e:	9006      	str	r0, [sp, #24]
 8013560:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013564:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013566:	ab21      	add	r3, sp, #132	; 0x84
 8013568:	a902      	add	r1, sp, #8
 801356a:	4628      	mov	r0, r5
 801356c:	9301      	str	r3, [sp, #4]
 801356e:	f000 fb4f 	bl	8013c10 <_svfiprintf_r>
 8013572:	1c43      	adds	r3, r0, #1
 8013574:	bfbc      	itt	lt
 8013576:	238b      	movlt	r3, #139	; 0x8b
 8013578:	602b      	strlt	r3, [r5, #0]
 801357a:	2c00      	cmp	r4, #0
 801357c:	d0dd      	beq.n	801353a <sniprintf+0x16>
 801357e:	9b02      	ldr	r3, [sp, #8]
 8013580:	2200      	movs	r2, #0
 8013582:	701a      	strb	r2, [r3, #0]
 8013584:	e7d9      	b.n	801353a <sniprintf+0x16>
 8013586:	bf00      	nop
 8013588:	20000254 	.word	0x20000254

0801358c <__sread>:
 801358c:	b510      	push	{r4, lr}
 801358e:	460c      	mov	r4, r1
 8013590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013594:	f000 f9ec 	bl	8013970 <_read_r>
 8013598:	2800      	cmp	r0, #0
 801359a:	bfab      	itete	ge
 801359c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801359e:	89a3      	ldrhlt	r3, [r4, #12]
 80135a0:	181b      	addge	r3, r3, r0
 80135a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80135a6:	bfac      	ite	ge
 80135a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80135aa:	81a3      	strhlt	r3, [r4, #12]
 80135ac:	bd10      	pop	{r4, pc}

080135ae <__swrite>:
 80135ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135b2:	461f      	mov	r7, r3
 80135b4:	898b      	ldrh	r3, [r1, #12]
 80135b6:	05db      	lsls	r3, r3, #23
 80135b8:	4605      	mov	r5, r0
 80135ba:	460c      	mov	r4, r1
 80135bc:	4616      	mov	r6, r2
 80135be:	d505      	bpl.n	80135cc <__swrite+0x1e>
 80135c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135c4:	2302      	movs	r3, #2
 80135c6:	2200      	movs	r2, #0
 80135c8:	f000 f9c0 	bl	801394c <_lseek_r>
 80135cc:	89a3      	ldrh	r3, [r4, #12]
 80135ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80135d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80135d6:	81a3      	strh	r3, [r4, #12]
 80135d8:	4632      	mov	r2, r6
 80135da:	463b      	mov	r3, r7
 80135dc:	4628      	mov	r0, r5
 80135de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80135e2:	f000 b9e7 	b.w	80139b4 <_write_r>

080135e6 <__sseek>:
 80135e6:	b510      	push	{r4, lr}
 80135e8:	460c      	mov	r4, r1
 80135ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135ee:	f000 f9ad 	bl	801394c <_lseek_r>
 80135f2:	1c43      	adds	r3, r0, #1
 80135f4:	89a3      	ldrh	r3, [r4, #12]
 80135f6:	bf15      	itete	ne
 80135f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80135fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80135fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013602:	81a3      	strheq	r3, [r4, #12]
 8013604:	bf18      	it	ne
 8013606:	81a3      	strhne	r3, [r4, #12]
 8013608:	bd10      	pop	{r4, pc}

0801360a <__sclose>:
 801360a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801360e:	f000 b937 	b.w	8013880 <_close_r>

08013612 <_vsniprintf_r>:
 8013612:	b530      	push	{r4, r5, lr}
 8013614:	4614      	mov	r4, r2
 8013616:	2c00      	cmp	r4, #0
 8013618:	b09b      	sub	sp, #108	; 0x6c
 801361a:	4605      	mov	r5, r0
 801361c:	461a      	mov	r2, r3
 801361e:	da05      	bge.n	801362c <_vsniprintf_r+0x1a>
 8013620:	238b      	movs	r3, #139	; 0x8b
 8013622:	6003      	str	r3, [r0, #0]
 8013624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013628:	b01b      	add	sp, #108	; 0x6c
 801362a:	bd30      	pop	{r4, r5, pc}
 801362c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013630:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013634:	bf14      	ite	ne
 8013636:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801363a:	4623      	moveq	r3, r4
 801363c:	9302      	str	r3, [sp, #8]
 801363e:	9305      	str	r3, [sp, #20]
 8013640:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013644:	9100      	str	r1, [sp, #0]
 8013646:	9104      	str	r1, [sp, #16]
 8013648:	f8ad 300e 	strh.w	r3, [sp, #14]
 801364c:	4669      	mov	r1, sp
 801364e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013650:	f000 fade 	bl	8013c10 <_svfiprintf_r>
 8013654:	1c43      	adds	r3, r0, #1
 8013656:	bfbc      	itt	lt
 8013658:	238b      	movlt	r3, #139	; 0x8b
 801365a:	602b      	strlt	r3, [r5, #0]
 801365c:	2c00      	cmp	r4, #0
 801365e:	d0e3      	beq.n	8013628 <_vsniprintf_r+0x16>
 8013660:	9b00      	ldr	r3, [sp, #0]
 8013662:	2200      	movs	r2, #0
 8013664:	701a      	strb	r2, [r3, #0]
 8013666:	e7df      	b.n	8013628 <_vsniprintf_r+0x16>

08013668 <vsniprintf>:
 8013668:	b507      	push	{r0, r1, r2, lr}
 801366a:	9300      	str	r3, [sp, #0]
 801366c:	4613      	mov	r3, r2
 801366e:	460a      	mov	r2, r1
 8013670:	4601      	mov	r1, r0
 8013672:	4803      	ldr	r0, [pc, #12]	; (8013680 <vsniprintf+0x18>)
 8013674:	6800      	ldr	r0, [r0, #0]
 8013676:	f7ff ffcc 	bl	8013612 <_vsniprintf_r>
 801367a:	b003      	add	sp, #12
 801367c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013680:	20000254 	.word	0x20000254

08013684 <__swbuf_r>:
 8013684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013686:	460e      	mov	r6, r1
 8013688:	4614      	mov	r4, r2
 801368a:	4605      	mov	r5, r0
 801368c:	b118      	cbz	r0, 8013696 <__swbuf_r+0x12>
 801368e:	6a03      	ldr	r3, [r0, #32]
 8013690:	b90b      	cbnz	r3, 8013696 <__swbuf_r+0x12>
 8013692:	f7ff fdf5 	bl	8013280 <__sinit>
 8013696:	69a3      	ldr	r3, [r4, #24]
 8013698:	60a3      	str	r3, [r4, #8]
 801369a:	89a3      	ldrh	r3, [r4, #12]
 801369c:	071a      	lsls	r2, r3, #28
 801369e:	d525      	bpl.n	80136ec <__swbuf_r+0x68>
 80136a0:	6923      	ldr	r3, [r4, #16]
 80136a2:	b31b      	cbz	r3, 80136ec <__swbuf_r+0x68>
 80136a4:	6823      	ldr	r3, [r4, #0]
 80136a6:	6922      	ldr	r2, [r4, #16]
 80136a8:	1a98      	subs	r0, r3, r2
 80136aa:	6963      	ldr	r3, [r4, #20]
 80136ac:	b2f6      	uxtb	r6, r6
 80136ae:	4283      	cmp	r3, r0
 80136b0:	4637      	mov	r7, r6
 80136b2:	dc04      	bgt.n	80136be <__swbuf_r+0x3a>
 80136b4:	4621      	mov	r1, r4
 80136b6:	4628      	mov	r0, r5
 80136b8:	f000 ff02 	bl	80144c0 <_fflush_r>
 80136bc:	b9e0      	cbnz	r0, 80136f8 <__swbuf_r+0x74>
 80136be:	68a3      	ldr	r3, [r4, #8]
 80136c0:	3b01      	subs	r3, #1
 80136c2:	60a3      	str	r3, [r4, #8]
 80136c4:	6823      	ldr	r3, [r4, #0]
 80136c6:	1c5a      	adds	r2, r3, #1
 80136c8:	6022      	str	r2, [r4, #0]
 80136ca:	701e      	strb	r6, [r3, #0]
 80136cc:	6962      	ldr	r2, [r4, #20]
 80136ce:	1c43      	adds	r3, r0, #1
 80136d0:	429a      	cmp	r2, r3
 80136d2:	d004      	beq.n	80136de <__swbuf_r+0x5a>
 80136d4:	89a3      	ldrh	r3, [r4, #12]
 80136d6:	07db      	lsls	r3, r3, #31
 80136d8:	d506      	bpl.n	80136e8 <__swbuf_r+0x64>
 80136da:	2e0a      	cmp	r6, #10
 80136dc:	d104      	bne.n	80136e8 <__swbuf_r+0x64>
 80136de:	4621      	mov	r1, r4
 80136e0:	4628      	mov	r0, r5
 80136e2:	f000 feed 	bl	80144c0 <_fflush_r>
 80136e6:	b938      	cbnz	r0, 80136f8 <__swbuf_r+0x74>
 80136e8:	4638      	mov	r0, r7
 80136ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136ec:	4621      	mov	r1, r4
 80136ee:	4628      	mov	r0, r5
 80136f0:	f000 f806 	bl	8013700 <__swsetup_r>
 80136f4:	2800      	cmp	r0, #0
 80136f6:	d0d5      	beq.n	80136a4 <__swbuf_r+0x20>
 80136f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80136fc:	e7f4      	b.n	80136e8 <__swbuf_r+0x64>
	...

08013700 <__swsetup_r>:
 8013700:	b538      	push	{r3, r4, r5, lr}
 8013702:	4b2a      	ldr	r3, [pc, #168]	; (80137ac <__swsetup_r+0xac>)
 8013704:	4605      	mov	r5, r0
 8013706:	6818      	ldr	r0, [r3, #0]
 8013708:	460c      	mov	r4, r1
 801370a:	b118      	cbz	r0, 8013714 <__swsetup_r+0x14>
 801370c:	6a03      	ldr	r3, [r0, #32]
 801370e:	b90b      	cbnz	r3, 8013714 <__swsetup_r+0x14>
 8013710:	f7ff fdb6 	bl	8013280 <__sinit>
 8013714:	89a3      	ldrh	r3, [r4, #12]
 8013716:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801371a:	0718      	lsls	r0, r3, #28
 801371c:	d422      	bmi.n	8013764 <__swsetup_r+0x64>
 801371e:	06d9      	lsls	r1, r3, #27
 8013720:	d407      	bmi.n	8013732 <__swsetup_r+0x32>
 8013722:	2309      	movs	r3, #9
 8013724:	602b      	str	r3, [r5, #0]
 8013726:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801372a:	81a3      	strh	r3, [r4, #12]
 801372c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013730:	e034      	b.n	801379c <__swsetup_r+0x9c>
 8013732:	0758      	lsls	r0, r3, #29
 8013734:	d512      	bpl.n	801375c <__swsetup_r+0x5c>
 8013736:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013738:	b141      	cbz	r1, 801374c <__swsetup_r+0x4c>
 801373a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801373e:	4299      	cmp	r1, r3
 8013740:	d002      	beq.n	8013748 <__swsetup_r+0x48>
 8013742:	4628      	mov	r0, r5
 8013744:	f000 f9b6 	bl	8013ab4 <_free_r>
 8013748:	2300      	movs	r3, #0
 801374a:	6363      	str	r3, [r4, #52]	; 0x34
 801374c:	89a3      	ldrh	r3, [r4, #12]
 801374e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013752:	81a3      	strh	r3, [r4, #12]
 8013754:	2300      	movs	r3, #0
 8013756:	6063      	str	r3, [r4, #4]
 8013758:	6923      	ldr	r3, [r4, #16]
 801375a:	6023      	str	r3, [r4, #0]
 801375c:	89a3      	ldrh	r3, [r4, #12]
 801375e:	f043 0308 	orr.w	r3, r3, #8
 8013762:	81a3      	strh	r3, [r4, #12]
 8013764:	6923      	ldr	r3, [r4, #16]
 8013766:	b94b      	cbnz	r3, 801377c <__swsetup_r+0x7c>
 8013768:	89a3      	ldrh	r3, [r4, #12]
 801376a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801376e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013772:	d003      	beq.n	801377c <__swsetup_r+0x7c>
 8013774:	4621      	mov	r1, r4
 8013776:	4628      	mov	r0, r5
 8013778:	f000 ff02 	bl	8014580 <__smakebuf_r>
 801377c:	89a0      	ldrh	r0, [r4, #12]
 801377e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013782:	f010 0301 	ands.w	r3, r0, #1
 8013786:	d00a      	beq.n	801379e <__swsetup_r+0x9e>
 8013788:	2300      	movs	r3, #0
 801378a:	60a3      	str	r3, [r4, #8]
 801378c:	6963      	ldr	r3, [r4, #20]
 801378e:	425b      	negs	r3, r3
 8013790:	61a3      	str	r3, [r4, #24]
 8013792:	6923      	ldr	r3, [r4, #16]
 8013794:	b943      	cbnz	r3, 80137a8 <__swsetup_r+0xa8>
 8013796:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801379a:	d1c4      	bne.n	8013726 <__swsetup_r+0x26>
 801379c:	bd38      	pop	{r3, r4, r5, pc}
 801379e:	0781      	lsls	r1, r0, #30
 80137a0:	bf58      	it	pl
 80137a2:	6963      	ldrpl	r3, [r4, #20]
 80137a4:	60a3      	str	r3, [r4, #8]
 80137a6:	e7f4      	b.n	8013792 <__swsetup_r+0x92>
 80137a8:	2000      	movs	r0, #0
 80137aa:	e7f7      	b.n	801379c <__swsetup_r+0x9c>
 80137ac:	20000254 	.word	0x20000254

080137b0 <memcmp>:
 80137b0:	b510      	push	{r4, lr}
 80137b2:	3901      	subs	r1, #1
 80137b4:	4402      	add	r2, r0
 80137b6:	4290      	cmp	r0, r2
 80137b8:	d101      	bne.n	80137be <memcmp+0xe>
 80137ba:	2000      	movs	r0, #0
 80137bc:	e005      	b.n	80137ca <memcmp+0x1a>
 80137be:	7803      	ldrb	r3, [r0, #0]
 80137c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80137c4:	42a3      	cmp	r3, r4
 80137c6:	d001      	beq.n	80137cc <memcmp+0x1c>
 80137c8:	1b18      	subs	r0, r3, r4
 80137ca:	bd10      	pop	{r4, pc}
 80137cc:	3001      	adds	r0, #1
 80137ce:	e7f2      	b.n	80137b6 <memcmp+0x6>

080137d0 <memmove>:
 80137d0:	4288      	cmp	r0, r1
 80137d2:	b510      	push	{r4, lr}
 80137d4:	eb01 0402 	add.w	r4, r1, r2
 80137d8:	d902      	bls.n	80137e0 <memmove+0x10>
 80137da:	4284      	cmp	r4, r0
 80137dc:	4623      	mov	r3, r4
 80137de:	d807      	bhi.n	80137f0 <memmove+0x20>
 80137e0:	1e43      	subs	r3, r0, #1
 80137e2:	42a1      	cmp	r1, r4
 80137e4:	d008      	beq.n	80137f8 <memmove+0x28>
 80137e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80137ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80137ee:	e7f8      	b.n	80137e2 <memmove+0x12>
 80137f0:	4402      	add	r2, r0
 80137f2:	4601      	mov	r1, r0
 80137f4:	428a      	cmp	r2, r1
 80137f6:	d100      	bne.n	80137fa <memmove+0x2a>
 80137f8:	bd10      	pop	{r4, pc}
 80137fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80137fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013802:	e7f7      	b.n	80137f4 <memmove+0x24>

08013804 <memset>:
 8013804:	4402      	add	r2, r0
 8013806:	4603      	mov	r3, r0
 8013808:	4293      	cmp	r3, r2
 801380a:	d100      	bne.n	801380e <memset+0xa>
 801380c:	4770      	bx	lr
 801380e:	f803 1b01 	strb.w	r1, [r3], #1
 8013812:	e7f9      	b.n	8013808 <memset+0x4>

08013814 <strchr>:
 8013814:	b2c9      	uxtb	r1, r1
 8013816:	4603      	mov	r3, r0
 8013818:	f810 2b01 	ldrb.w	r2, [r0], #1
 801381c:	b11a      	cbz	r2, 8013826 <strchr+0x12>
 801381e:	428a      	cmp	r2, r1
 8013820:	d1f9      	bne.n	8013816 <strchr+0x2>
 8013822:	4618      	mov	r0, r3
 8013824:	4770      	bx	lr
 8013826:	2900      	cmp	r1, #0
 8013828:	bf18      	it	ne
 801382a:	2300      	movne	r3, #0
 801382c:	e7f9      	b.n	8013822 <strchr+0xe>

0801382e <strncmp>:
 801382e:	b510      	push	{r4, lr}
 8013830:	b16a      	cbz	r2, 801384e <strncmp+0x20>
 8013832:	3901      	subs	r1, #1
 8013834:	1884      	adds	r4, r0, r2
 8013836:	f810 2b01 	ldrb.w	r2, [r0], #1
 801383a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801383e:	429a      	cmp	r2, r3
 8013840:	d103      	bne.n	801384a <strncmp+0x1c>
 8013842:	42a0      	cmp	r0, r4
 8013844:	d001      	beq.n	801384a <strncmp+0x1c>
 8013846:	2a00      	cmp	r2, #0
 8013848:	d1f5      	bne.n	8013836 <strncmp+0x8>
 801384a:	1ad0      	subs	r0, r2, r3
 801384c:	bd10      	pop	{r4, pc}
 801384e:	4610      	mov	r0, r2
 8013850:	e7fc      	b.n	801384c <strncmp+0x1e>

08013852 <strstr>:
 8013852:	780a      	ldrb	r2, [r1, #0]
 8013854:	b570      	push	{r4, r5, r6, lr}
 8013856:	b96a      	cbnz	r2, 8013874 <strstr+0x22>
 8013858:	bd70      	pop	{r4, r5, r6, pc}
 801385a:	429a      	cmp	r2, r3
 801385c:	d109      	bne.n	8013872 <strstr+0x20>
 801385e:	460c      	mov	r4, r1
 8013860:	4605      	mov	r5, r0
 8013862:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013866:	2b00      	cmp	r3, #0
 8013868:	d0f6      	beq.n	8013858 <strstr+0x6>
 801386a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801386e:	429e      	cmp	r6, r3
 8013870:	d0f7      	beq.n	8013862 <strstr+0x10>
 8013872:	3001      	adds	r0, #1
 8013874:	7803      	ldrb	r3, [r0, #0]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d1ef      	bne.n	801385a <strstr+0x8>
 801387a:	4618      	mov	r0, r3
 801387c:	e7ec      	b.n	8013858 <strstr+0x6>
	...

08013880 <_close_r>:
 8013880:	b538      	push	{r3, r4, r5, lr}
 8013882:	4d06      	ldr	r5, [pc, #24]	; (801389c <_close_r+0x1c>)
 8013884:	2300      	movs	r3, #0
 8013886:	4604      	mov	r4, r0
 8013888:	4608      	mov	r0, r1
 801388a:	602b      	str	r3, [r5, #0]
 801388c:	f7ed ffa3 	bl	80017d6 <_close>
 8013890:	1c43      	adds	r3, r0, #1
 8013892:	d102      	bne.n	801389a <_close_r+0x1a>
 8013894:	682b      	ldr	r3, [r5, #0]
 8013896:	b103      	cbz	r3, 801389a <_close_r+0x1a>
 8013898:	6023      	str	r3, [r4, #0]
 801389a:	bd38      	pop	{r3, r4, r5, pc}
 801389c:	20010f60 	.word	0x20010f60

080138a0 <_reclaim_reent>:
 80138a0:	4b29      	ldr	r3, [pc, #164]	; (8013948 <_reclaim_reent+0xa8>)
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	4283      	cmp	r3, r0
 80138a6:	b570      	push	{r4, r5, r6, lr}
 80138a8:	4604      	mov	r4, r0
 80138aa:	d04b      	beq.n	8013944 <_reclaim_reent+0xa4>
 80138ac:	69c3      	ldr	r3, [r0, #28]
 80138ae:	b143      	cbz	r3, 80138c2 <_reclaim_reent+0x22>
 80138b0:	68db      	ldr	r3, [r3, #12]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d144      	bne.n	8013940 <_reclaim_reent+0xa0>
 80138b6:	69e3      	ldr	r3, [r4, #28]
 80138b8:	6819      	ldr	r1, [r3, #0]
 80138ba:	b111      	cbz	r1, 80138c2 <_reclaim_reent+0x22>
 80138bc:	4620      	mov	r0, r4
 80138be:	f000 f8f9 	bl	8013ab4 <_free_r>
 80138c2:	6961      	ldr	r1, [r4, #20]
 80138c4:	b111      	cbz	r1, 80138cc <_reclaim_reent+0x2c>
 80138c6:	4620      	mov	r0, r4
 80138c8:	f000 f8f4 	bl	8013ab4 <_free_r>
 80138cc:	69e1      	ldr	r1, [r4, #28]
 80138ce:	b111      	cbz	r1, 80138d6 <_reclaim_reent+0x36>
 80138d0:	4620      	mov	r0, r4
 80138d2:	f000 f8ef 	bl	8013ab4 <_free_r>
 80138d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80138d8:	b111      	cbz	r1, 80138e0 <_reclaim_reent+0x40>
 80138da:	4620      	mov	r0, r4
 80138dc:	f000 f8ea 	bl	8013ab4 <_free_r>
 80138e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80138e2:	b111      	cbz	r1, 80138ea <_reclaim_reent+0x4a>
 80138e4:	4620      	mov	r0, r4
 80138e6:	f000 f8e5 	bl	8013ab4 <_free_r>
 80138ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80138ec:	b111      	cbz	r1, 80138f4 <_reclaim_reent+0x54>
 80138ee:	4620      	mov	r0, r4
 80138f0:	f000 f8e0 	bl	8013ab4 <_free_r>
 80138f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80138f6:	b111      	cbz	r1, 80138fe <_reclaim_reent+0x5e>
 80138f8:	4620      	mov	r0, r4
 80138fa:	f000 f8db 	bl	8013ab4 <_free_r>
 80138fe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8013900:	b111      	cbz	r1, 8013908 <_reclaim_reent+0x68>
 8013902:	4620      	mov	r0, r4
 8013904:	f000 f8d6 	bl	8013ab4 <_free_r>
 8013908:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801390a:	b111      	cbz	r1, 8013912 <_reclaim_reent+0x72>
 801390c:	4620      	mov	r0, r4
 801390e:	f000 f8d1 	bl	8013ab4 <_free_r>
 8013912:	6a23      	ldr	r3, [r4, #32]
 8013914:	b1b3      	cbz	r3, 8013944 <_reclaim_reent+0xa4>
 8013916:	4620      	mov	r0, r4
 8013918:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801391c:	4718      	bx	r3
 801391e:	5949      	ldr	r1, [r1, r5]
 8013920:	b941      	cbnz	r1, 8013934 <_reclaim_reent+0x94>
 8013922:	3504      	adds	r5, #4
 8013924:	69e3      	ldr	r3, [r4, #28]
 8013926:	2d80      	cmp	r5, #128	; 0x80
 8013928:	68d9      	ldr	r1, [r3, #12]
 801392a:	d1f8      	bne.n	801391e <_reclaim_reent+0x7e>
 801392c:	4620      	mov	r0, r4
 801392e:	f000 f8c1 	bl	8013ab4 <_free_r>
 8013932:	e7c0      	b.n	80138b6 <_reclaim_reent+0x16>
 8013934:	680e      	ldr	r6, [r1, #0]
 8013936:	4620      	mov	r0, r4
 8013938:	f000 f8bc 	bl	8013ab4 <_free_r>
 801393c:	4631      	mov	r1, r6
 801393e:	e7ef      	b.n	8013920 <_reclaim_reent+0x80>
 8013940:	2500      	movs	r5, #0
 8013942:	e7ef      	b.n	8013924 <_reclaim_reent+0x84>
 8013944:	bd70      	pop	{r4, r5, r6, pc}
 8013946:	bf00      	nop
 8013948:	20000254 	.word	0x20000254

0801394c <_lseek_r>:
 801394c:	b538      	push	{r3, r4, r5, lr}
 801394e:	4d07      	ldr	r5, [pc, #28]	; (801396c <_lseek_r+0x20>)
 8013950:	4604      	mov	r4, r0
 8013952:	4608      	mov	r0, r1
 8013954:	4611      	mov	r1, r2
 8013956:	2200      	movs	r2, #0
 8013958:	602a      	str	r2, [r5, #0]
 801395a:	461a      	mov	r2, r3
 801395c:	f7ed ff62 	bl	8001824 <_lseek>
 8013960:	1c43      	adds	r3, r0, #1
 8013962:	d102      	bne.n	801396a <_lseek_r+0x1e>
 8013964:	682b      	ldr	r3, [r5, #0]
 8013966:	b103      	cbz	r3, 801396a <_lseek_r+0x1e>
 8013968:	6023      	str	r3, [r4, #0]
 801396a:	bd38      	pop	{r3, r4, r5, pc}
 801396c:	20010f60 	.word	0x20010f60

08013970 <_read_r>:
 8013970:	b538      	push	{r3, r4, r5, lr}
 8013972:	4d07      	ldr	r5, [pc, #28]	; (8013990 <_read_r+0x20>)
 8013974:	4604      	mov	r4, r0
 8013976:	4608      	mov	r0, r1
 8013978:	4611      	mov	r1, r2
 801397a:	2200      	movs	r2, #0
 801397c:	602a      	str	r2, [r5, #0]
 801397e:	461a      	mov	r2, r3
 8013980:	f7ed fef0 	bl	8001764 <_read>
 8013984:	1c43      	adds	r3, r0, #1
 8013986:	d102      	bne.n	801398e <_read_r+0x1e>
 8013988:	682b      	ldr	r3, [r5, #0]
 801398a:	b103      	cbz	r3, 801398e <_read_r+0x1e>
 801398c:	6023      	str	r3, [r4, #0]
 801398e:	bd38      	pop	{r3, r4, r5, pc}
 8013990:	20010f60 	.word	0x20010f60

08013994 <_sbrk_r>:
 8013994:	b538      	push	{r3, r4, r5, lr}
 8013996:	4d06      	ldr	r5, [pc, #24]	; (80139b0 <_sbrk_r+0x1c>)
 8013998:	2300      	movs	r3, #0
 801399a:	4604      	mov	r4, r0
 801399c:	4608      	mov	r0, r1
 801399e:	602b      	str	r3, [r5, #0]
 80139a0:	f7ed ff4e 	bl	8001840 <_sbrk>
 80139a4:	1c43      	adds	r3, r0, #1
 80139a6:	d102      	bne.n	80139ae <_sbrk_r+0x1a>
 80139a8:	682b      	ldr	r3, [r5, #0]
 80139aa:	b103      	cbz	r3, 80139ae <_sbrk_r+0x1a>
 80139ac:	6023      	str	r3, [r4, #0]
 80139ae:	bd38      	pop	{r3, r4, r5, pc}
 80139b0:	20010f60 	.word	0x20010f60

080139b4 <_write_r>:
 80139b4:	b538      	push	{r3, r4, r5, lr}
 80139b6:	4d07      	ldr	r5, [pc, #28]	; (80139d4 <_write_r+0x20>)
 80139b8:	4604      	mov	r4, r0
 80139ba:	4608      	mov	r0, r1
 80139bc:	4611      	mov	r1, r2
 80139be:	2200      	movs	r2, #0
 80139c0:	602a      	str	r2, [r5, #0]
 80139c2:	461a      	mov	r2, r3
 80139c4:	f7ed feeb 	bl	800179e <_write>
 80139c8:	1c43      	adds	r3, r0, #1
 80139ca:	d102      	bne.n	80139d2 <_write_r+0x1e>
 80139cc:	682b      	ldr	r3, [r5, #0]
 80139ce:	b103      	cbz	r3, 80139d2 <_write_r+0x1e>
 80139d0:	6023      	str	r3, [r4, #0]
 80139d2:	bd38      	pop	{r3, r4, r5, pc}
 80139d4:	20010f60 	.word	0x20010f60

080139d8 <__errno>:
 80139d8:	4b01      	ldr	r3, [pc, #4]	; (80139e0 <__errno+0x8>)
 80139da:	6818      	ldr	r0, [r3, #0]
 80139dc:	4770      	bx	lr
 80139de:	bf00      	nop
 80139e0:	20000254 	.word	0x20000254

080139e4 <__libc_init_array>:
 80139e4:	b570      	push	{r4, r5, r6, lr}
 80139e6:	4d0d      	ldr	r5, [pc, #52]	; (8013a1c <__libc_init_array+0x38>)
 80139e8:	4c0d      	ldr	r4, [pc, #52]	; (8013a20 <__libc_init_array+0x3c>)
 80139ea:	1b64      	subs	r4, r4, r5
 80139ec:	10a4      	asrs	r4, r4, #2
 80139ee:	2600      	movs	r6, #0
 80139f0:	42a6      	cmp	r6, r4
 80139f2:	d109      	bne.n	8013a08 <__libc_init_array+0x24>
 80139f4:	4d0b      	ldr	r5, [pc, #44]	; (8013a24 <__libc_init_array+0x40>)
 80139f6:	4c0c      	ldr	r4, [pc, #48]	; (8013a28 <__libc_init_array+0x44>)
 80139f8:	f000 fe6c 	bl	80146d4 <_init>
 80139fc:	1b64      	subs	r4, r4, r5
 80139fe:	10a4      	asrs	r4, r4, #2
 8013a00:	2600      	movs	r6, #0
 8013a02:	42a6      	cmp	r6, r4
 8013a04:	d105      	bne.n	8013a12 <__libc_init_array+0x2e>
 8013a06:	bd70      	pop	{r4, r5, r6, pc}
 8013a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a0c:	4798      	blx	r3
 8013a0e:	3601      	adds	r6, #1
 8013a10:	e7ee      	b.n	80139f0 <__libc_init_array+0xc>
 8013a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a16:	4798      	blx	r3
 8013a18:	3601      	adds	r6, #1
 8013a1a:	e7f2      	b.n	8013a02 <__libc_init_array+0x1e>
 8013a1c:	08015728 	.word	0x08015728
 8013a20:	08015728 	.word	0x08015728
 8013a24:	08015728 	.word	0x08015728
 8013a28:	08015730 	.word	0x08015730

08013a2c <__retarget_lock_init_recursive>:
 8013a2c:	4770      	bx	lr

08013a2e <__retarget_lock_acquire_recursive>:
 8013a2e:	4770      	bx	lr

08013a30 <__retarget_lock_release_recursive>:
 8013a30:	4770      	bx	lr

08013a32 <strcpy>:
 8013a32:	4603      	mov	r3, r0
 8013a34:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a38:	f803 2b01 	strb.w	r2, [r3], #1
 8013a3c:	2a00      	cmp	r2, #0
 8013a3e:	d1f9      	bne.n	8013a34 <strcpy+0x2>
 8013a40:	4770      	bx	lr

08013a42 <memcpy>:
 8013a42:	440a      	add	r2, r1
 8013a44:	4291      	cmp	r1, r2
 8013a46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013a4a:	d100      	bne.n	8013a4e <memcpy+0xc>
 8013a4c:	4770      	bx	lr
 8013a4e:	b510      	push	{r4, lr}
 8013a50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013a54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013a58:	4291      	cmp	r1, r2
 8013a5a:	d1f9      	bne.n	8013a50 <memcpy+0xe>
 8013a5c:	bd10      	pop	{r4, pc}
	...

08013a60 <__assert_func>:
 8013a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013a62:	4614      	mov	r4, r2
 8013a64:	461a      	mov	r2, r3
 8013a66:	4b09      	ldr	r3, [pc, #36]	; (8013a8c <__assert_func+0x2c>)
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	4605      	mov	r5, r0
 8013a6c:	68d8      	ldr	r0, [r3, #12]
 8013a6e:	b14c      	cbz	r4, 8013a84 <__assert_func+0x24>
 8013a70:	4b07      	ldr	r3, [pc, #28]	; (8013a90 <__assert_func+0x30>)
 8013a72:	9100      	str	r1, [sp, #0]
 8013a74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013a78:	4906      	ldr	r1, [pc, #24]	; (8013a94 <__assert_func+0x34>)
 8013a7a:	462b      	mov	r3, r5
 8013a7c:	f000 fd48 	bl	8014510 <fiprintf>
 8013a80:	f000 fddc 	bl	801463c <abort>
 8013a84:	4b04      	ldr	r3, [pc, #16]	; (8013a98 <__assert_func+0x38>)
 8013a86:	461c      	mov	r4, r3
 8013a88:	e7f3      	b.n	8013a72 <__assert_func+0x12>
 8013a8a:	bf00      	nop
 8013a8c:	20000254 	.word	0x20000254
 8013a90:	080156b0 	.word	0x080156b0
 8013a94:	080156bd 	.word	0x080156bd
 8013a98:	080156eb 	.word	0x080156eb

08013a9c <__env_lock>:
 8013a9c:	4801      	ldr	r0, [pc, #4]	; (8013aa4 <__env_lock+0x8>)
 8013a9e:	f7ff bfc6 	b.w	8013a2e <__retarget_lock_acquire_recursive>
 8013aa2:	bf00      	nop
 8013aa4:	20010f64 	.word	0x20010f64

08013aa8 <__env_unlock>:
 8013aa8:	4801      	ldr	r0, [pc, #4]	; (8013ab0 <__env_unlock+0x8>)
 8013aaa:	f7ff bfc1 	b.w	8013a30 <__retarget_lock_release_recursive>
 8013aae:	bf00      	nop
 8013ab0:	20010f64 	.word	0x20010f64

08013ab4 <_free_r>:
 8013ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013ab6:	2900      	cmp	r1, #0
 8013ab8:	d044      	beq.n	8013b44 <_free_r+0x90>
 8013aba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013abe:	9001      	str	r0, [sp, #4]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	f1a1 0404 	sub.w	r4, r1, #4
 8013ac6:	bfb8      	it	lt
 8013ac8:	18e4      	addlt	r4, r4, r3
 8013aca:	f7ff fa21 	bl	8012f10 <__malloc_lock>
 8013ace:	4a1e      	ldr	r2, [pc, #120]	; (8013b48 <_free_r+0x94>)
 8013ad0:	9801      	ldr	r0, [sp, #4]
 8013ad2:	6813      	ldr	r3, [r2, #0]
 8013ad4:	b933      	cbnz	r3, 8013ae4 <_free_r+0x30>
 8013ad6:	6063      	str	r3, [r4, #4]
 8013ad8:	6014      	str	r4, [r2, #0]
 8013ada:	b003      	add	sp, #12
 8013adc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013ae0:	f7ff ba1c 	b.w	8012f1c <__malloc_unlock>
 8013ae4:	42a3      	cmp	r3, r4
 8013ae6:	d908      	bls.n	8013afa <_free_r+0x46>
 8013ae8:	6825      	ldr	r5, [r4, #0]
 8013aea:	1961      	adds	r1, r4, r5
 8013aec:	428b      	cmp	r3, r1
 8013aee:	bf01      	itttt	eq
 8013af0:	6819      	ldreq	r1, [r3, #0]
 8013af2:	685b      	ldreq	r3, [r3, #4]
 8013af4:	1949      	addeq	r1, r1, r5
 8013af6:	6021      	streq	r1, [r4, #0]
 8013af8:	e7ed      	b.n	8013ad6 <_free_r+0x22>
 8013afa:	461a      	mov	r2, r3
 8013afc:	685b      	ldr	r3, [r3, #4]
 8013afe:	b10b      	cbz	r3, 8013b04 <_free_r+0x50>
 8013b00:	42a3      	cmp	r3, r4
 8013b02:	d9fa      	bls.n	8013afa <_free_r+0x46>
 8013b04:	6811      	ldr	r1, [r2, #0]
 8013b06:	1855      	adds	r5, r2, r1
 8013b08:	42a5      	cmp	r5, r4
 8013b0a:	d10b      	bne.n	8013b24 <_free_r+0x70>
 8013b0c:	6824      	ldr	r4, [r4, #0]
 8013b0e:	4421      	add	r1, r4
 8013b10:	1854      	adds	r4, r2, r1
 8013b12:	42a3      	cmp	r3, r4
 8013b14:	6011      	str	r1, [r2, #0]
 8013b16:	d1e0      	bne.n	8013ada <_free_r+0x26>
 8013b18:	681c      	ldr	r4, [r3, #0]
 8013b1a:	685b      	ldr	r3, [r3, #4]
 8013b1c:	6053      	str	r3, [r2, #4]
 8013b1e:	440c      	add	r4, r1
 8013b20:	6014      	str	r4, [r2, #0]
 8013b22:	e7da      	b.n	8013ada <_free_r+0x26>
 8013b24:	d902      	bls.n	8013b2c <_free_r+0x78>
 8013b26:	230c      	movs	r3, #12
 8013b28:	6003      	str	r3, [r0, #0]
 8013b2a:	e7d6      	b.n	8013ada <_free_r+0x26>
 8013b2c:	6825      	ldr	r5, [r4, #0]
 8013b2e:	1961      	adds	r1, r4, r5
 8013b30:	428b      	cmp	r3, r1
 8013b32:	bf04      	itt	eq
 8013b34:	6819      	ldreq	r1, [r3, #0]
 8013b36:	685b      	ldreq	r3, [r3, #4]
 8013b38:	6063      	str	r3, [r4, #4]
 8013b3a:	bf04      	itt	eq
 8013b3c:	1949      	addeq	r1, r1, r5
 8013b3e:	6021      	streq	r1, [r4, #0]
 8013b40:	6054      	str	r4, [r2, #4]
 8013b42:	e7ca      	b.n	8013ada <_free_r+0x26>
 8013b44:	b003      	add	sp, #12
 8013b46:	bd30      	pop	{r4, r5, pc}
 8013b48:	20010e1c 	.word	0x20010e1c

08013b4c <_malloc_usable_size_r>:
 8013b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b50:	1f18      	subs	r0, r3, #4
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	bfbc      	itt	lt
 8013b56:	580b      	ldrlt	r3, [r1, r0]
 8013b58:	18c0      	addlt	r0, r0, r3
 8013b5a:	4770      	bx	lr

08013b5c <__ssputs_r>:
 8013b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b60:	688e      	ldr	r6, [r1, #8]
 8013b62:	461f      	mov	r7, r3
 8013b64:	42be      	cmp	r6, r7
 8013b66:	680b      	ldr	r3, [r1, #0]
 8013b68:	4682      	mov	sl, r0
 8013b6a:	460c      	mov	r4, r1
 8013b6c:	4690      	mov	r8, r2
 8013b6e:	d82c      	bhi.n	8013bca <__ssputs_r+0x6e>
 8013b70:	898a      	ldrh	r2, [r1, #12]
 8013b72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013b76:	d026      	beq.n	8013bc6 <__ssputs_r+0x6a>
 8013b78:	6965      	ldr	r5, [r4, #20]
 8013b7a:	6909      	ldr	r1, [r1, #16]
 8013b7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013b80:	eba3 0901 	sub.w	r9, r3, r1
 8013b84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013b88:	1c7b      	adds	r3, r7, #1
 8013b8a:	444b      	add	r3, r9
 8013b8c:	106d      	asrs	r5, r5, #1
 8013b8e:	429d      	cmp	r5, r3
 8013b90:	bf38      	it	cc
 8013b92:	461d      	movcc	r5, r3
 8013b94:	0553      	lsls	r3, r2, #21
 8013b96:	d527      	bpl.n	8013be8 <__ssputs_r+0x8c>
 8013b98:	4629      	mov	r1, r5
 8013b9a:	f7ff f939 	bl	8012e10 <_malloc_r>
 8013b9e:	4606      	mov	r6, r0
 8013ba0:	b360      	cbz	r0, 8013bfc <__ssputs_r+0xa0>
 8013ba2:	6921      	ldr	r1, [r4, #16]
 8013ba4:	464a      	mov	r2, r9
 8013ba6:	f7ff ff4c 	bl	8013a42 <memcpy>
 8013baa:	89a3      	ldrh	r3, [r4, #12]
 8013bac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013bb4:	81a3      	strh	r3, [r4, #12]
 8013bb6:	6126      	str	r6, [r4, #16]
 8013bb8:	6165      	str	r5, [r4, #20]
 8013bba:	444e      	add	r6, r9
 8013bbc:	eba5 0509 	sub.w	r5, r5, r9
 8013bc0:	6026      	str	r6, [r4, #0]
 8013bc2:	60a5      	str	r5, [r4, #8]
 8013bc4:	463e      	mov	r6, r7
 8013bc6:	42be      	cmp	r6, r7
 8013bc8:	d900      	bls.n	8013bcc <__ssputs_r+0x70>
 8013bca:	463e      	mov	r6, r7
 8013bcc:	6820      	ldr	r0, [r4, #0]
 8013bce:	4632      	mov	r2, r6
 8013bd0:	4641      	mov	r1, r8
 8013bd2:	f7ff fdfd 	bl	80137d0 <memmove>
 8013bd6:	68a3      	ldr	r3, [r4, #8]
 8013bd8:	1b9b      	subs	r3, r3, r6
 8013bda:	60a3      	str	r3, [r4, #8]
 8013bdc:	6823      	ldr	r3, [r4, #0]
 8013bde:	4433      	add	r3, r6
 8013be0:	6023      	str	r3, [r4, #0]
 8013be2:	2000      	movs	r0, #0
 8013be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013be8:	462a      	mov	r2, r5
 8013bea:	f7ff fa11 	bl	8013010 <_realloc_r>
 8013bee:	4606      	mov	r6, r0
 8013bf0:	2800      	cmp	r0, #0
 8013bf2:	d1e0      	bne.n	8013bb6 <__ssputs_r+0x5a>
 8013bf4:	6921      	ldr	r1, [r4, #16]
 8013bf6:	4650      	mov	r0, sl
 8013bf8:	f7ff ff5c 	bl	8013ab4 <_free_r>
 8013bfc:	230c      	movs	r3, #12
 8013bfe:	f8ca 3000 	str.w	r3, [sl]
 8013c02:	89a3      	ldrh	r3, [r4, #12]
 8013c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c08:	81a3      	strh	r3, [r4, #12]
 8013c0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c0e:	e7e9      	b.n	8013be4 <__ssputs_r+0x88>

08013c10 <_svfiprintf_r>:
 8013c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c14:	4698      	mov	r8, r3
 8013c16:	898b      	ldrh	r3, [r1, #12]
 8013c18:	061b      	lsls	r3, r3, #24
 8013c1a:	b09d      	sub	sp, #116	; 0x74
 8013c1c:	4607      	mov	r7, r0
 8013c1e:	460d      	mov	r5, r1
 8013c20:	4614      	mov	r4, r2
 8013c22:	d50e      	bpl.n	8013c42 <_svfiprintf_r+0x32>
 8013c24:	690b      	ldr	r3, [r1, #16]
 8013c26:	b963      	cbnz	r3, 8013c42 <_svfiprintf_r+0x32>
 8013c28:	2140      	movs	r1, #64	; 0x40
 8013c2a:	f7ff f8f1 	bl	8012e10 <_malloc_r>
 8013c2e:	6028      	str	r0, [r5, #0]
 8013c30:	6128      	str	r0, [r5, #16]
 8013c32:	b920      	cbnz	r0, 8013c3e <_svfiprintf_r+0x2e>
 8013c34:	230c      	movs	r3, #12
 8013c36:	603b      	str	r3, [r7, #0]
 8013c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c3c:	e0d0      	b.n	8013de0 <_svfiprintf_r+0x1d0>
 8013c3e:	2340      	movs	r3, #64	; 0x40
 8013c40:	616b      	str	r3, [r5, #20]
 8013c42:	2300      	movs	r3, #0
 8013c44:	9309      	str	r3, [sp, #36]	; 0x24
 8013c46:	2320      	movs	r3, #32
 8013c48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013c4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c50:	2330      	movs	r3, #48	; 0x30
 8013c52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013df8 <_svfiprintf_r+0x1e8>
 8013c56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013c5a:	f04f 0901 	mov.w	r9, #1
 8013c5e:	4623      	mov	r3, r4
 8013c60:	469a      	mov	sl, r3
 8013c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c66:	b10a      	cbz	r2, 8013c6c <_svfiprintf_r+0x5c>
 8013c68:	2a25      	cmp	r2, #37	; 0x25
 8013c6a:	d1f9      	bne.n	8013c60 <_svfiprintf_r+0x50>
 8013c6c:	ebba 0b04 	subs.w	fp, sl, r4
 8013c70:	d00b      	beq.n	8013c8a <_svfiprintf_r+0x7a>
 8013c72:	465b      	mov	r3, fp
 8013c74:	4622      	mov	r2, r4
 8013c76:	4629      	mov	r1, r5
 8013c78:	4638      	mov	r0, r7
 8013c7a:	f7ff ff6f 	bl	8013b5c <__ssputs_r>
 8013c7e:	3001      	adds	r0, #1
 8013c80:	f000 80a9 	beq.w	8013dd6 <_svfiprintf_r+0x1c6>
 8013c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c86:	445a      	add	r2, fp
 8013c88:	9209      	str	r2, [sp, #36]	; 0x24
 8013c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	f000 80a1 	beq.w	8013dd6 <_svfiprintf_r+0x1c6>
 8013c94:	2300      	movs	r3, #0
 8013c96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c9e:	f10a 0a01 	add.w	sl, sl, #1
 8013ca2:	9304      	str	r3, [sp, #16]
 8013ca4:	9307      	str	r3, [sp, #28]
 8013ca6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013caa:	931a      	str	r3, [sp, #104]	; 0x68
 8013cac:	4654      	mov	r4, sl
 8013cae:	2205      	movs	r2, #5
 8013cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013cb4:	4850      	ldr	r0, [pc, #320]	; (8013df8 <_svfiprintf_r+0x1e8>)
 8013cb6:	f7ec fadb 	bl	8000270 <memchr>
 8013cba:	9a04      	ldr	r2, [sp, #16]
 8013cbc:	b9d8      	cbnz	r0, 8013cf6 <_svfiprintf_r+0xe6>
 8013cbe:	06d0      	lsls	r0, r2, #27
 8013cc0:	bf44      	itt	mi
 8013cc2:	2320      	movmi	r3, #32
 8013cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013cc8:	0711      	lsls	r1, r2, #28
 8013cca:	bf44      	itt	mi
 8013ccc:	232b      	movmi	r3, #43	; 0x2b
 8013cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8013cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8013cd8:	d015      	beq.n	8013d06 <_svfiprintf_r+0xf6>
 8013cda:	9a07      	ldr	r2, [sp, #28]
 8013cdc:	4654      	mov	r4, sl
 8013cde:	2000      	movs	r0, #0
 8013ce0:	f04f 0c0a 	mov.w	ip, #10
 8013ce4:	4621      	mov	r1, r4
 8013ce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013cea:	3b30      	subs	r3, #48	; 0x30
 8013cec:	2b09      	cmp	r3, #9
 8013cee:	d94d      	bls.n	8013d8c <_svfiprintf_r+0x17c>
 8013cf0:	b1b0      	cbz	r0, 8013d20 <_svfiprintf_r+0x110>
 8013cf2:	9207      	str	r2, [sp, #28]
 8013cf4:	e014      	b.n	8013d20 <_svfiprintf_r+0x110>
 8013cf6:	eba0 0308 	sub.w	r3, r0, r8
 8013cfa:	fa09 f303 	lsl.w	r3, r9, r3
 8013cfe:	4313      	orrs	r3, r2
 8013d00:	9304      	str	r3, [sp, #16]
 8013d02:	46a2      	mov	sl, r4
 8013d04:	e7d2      	b.n	8013cac <_svfiprintf_r+0x9c>
 8013d06:	9b03      	ldr	r3, [sp, #12]
 8013d08:	1d19      	adds	r1, r3, #4
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	9103      	str	r1, [sp, #12]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	bfbb      	ittet	lt
 8013d12:	425b      	neglt	r3, r3
 8013d14:	f042 0202 	orrlt.w	r2, r2, #2
 8013d18:	9307      	strge	r3, [sp, #28]
 8013d1a:	9307      	strlt	r3, [sp, #28]
 8013d1c:	bfb8      	it	lt
 8013d1e:	9204      	strlt	r2, [sp, #16]
 8013d20:	7823      	ldrb	r3, [r4, #0]
 8013d22:	2b2e      	cmp	r3, #46	; 0x2e
 8013d24:	d10c      	bne.n	8013d40 <_svfiprintf_r+0x130>
 8013d26:	7863      	ldrb	r3, [r4, #1]
 8013d28:	2b2a      	cmp	r3, #42	; 0x2a
 8013d2a:	d134      	bne.n	8013d96 <_svfiprintf_r+0x186>
 8013d2c:	9b03      	ldr	r3, [sp, #12]
 8013d2e:	1d1a      	adds	r2, r3, #4
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	9203      	str	r2, [sp, #12]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	bfb8      	it	lt
 8013d38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013d3c:	3402      	adds	r4, #2
 8013d3e:	9305      	str	r3, [sp, #20]
 8013d40:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8013e08 <_svfiprintf_r+0x1f8>
 8013d44:	7821      	ldrb	r1, [r4, #0]
 8013d46:	2203      	movs	r2, #3
 8013d48:	4650      	mov	r0, sl
 8013d4a:	f7ec fa91 	bl	8000270 <memchr>
 8013d4e:	b138      	cbz	r0, 8013d60 <_svfiprintf_r+0x150>
 8013d50:	9b04      	ldr	r3, [sp, #16]
 8013d52:	eba0 000a 	sub.w	r0, r0, sl
 8013d56:	2240      	movs	r2, #64	; 0x40
 8013d58:	4082      	lsls	r2, r0
 8013d5a:	4313      	orrs	r3, r2
 8013d5c:	3401      	adds	r4, #1
 8013d5e:	9304      	str	r3, [sp, #16]
 8013d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d64:	4825      	ldr	r0, [pc, #148]	; (8013dfc <_svfiprintf_r+0x1ec>)
 8013d66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013d6a:	2206      	movs	r2, #6
 8013d6c:	f7ec fa80 	bl	8000270 <memchr>
 8013d70:	2800      	cmp	r0, #0
 8013d72:	d038      	beq.n	8013de6 <_svfiprintf_r+0x1d6>
 8013d74:	4b22      	ldr	r3, [pc, #136]	; (8013e00 <_svfiprintf_r+0x1f0>)
 8013d76:	bb1b      	cbnz	r3, 8013dc0 <_svfiprintf_r+0x1b0>
 8013d78:	9b03      	ldr	r3, [sp, #12]
 8013d7a:	3307      	adds	r3, #7
 8013d7c:	f023 0307 	bic.w	r3, r3, #7
 8013d80:	3308      	adds	r3, #8
 8013d82:	9303      	str	r3, [sp, #12]
 8013d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d86:	4433      	add	r3, r6
 8013d88:	9309      	str	r3, [sp, #36]	; 0x24
 8013d8a:	e768      	b.n	8013c5e <_svfiprintf_r+0x4e>
 8013d8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d90:	460c      	mov	r4, r1
 8013d92:	2001      	movs	r0, #1
 8013d94:	e7a6      	b.n	8013ce4 <_svfiprintf_r+0xd4>
 8013d96:	2300      	movs	r3, #0
 8013d98:	3401      	adds	r4, #1
 8013d9a:	9305      	str	r3, [sp, #20]
 8013d9c:	4619      	mov	r1, r3
 8013d9e:	f04f 0c0a 	mov.w	ip, #10
 8013da2:	4620      	mov	r0, r4
 8013da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013da8:	3a30      	subs	r2, #48	; 0x30
 8013daa:	2a09      	cmp	r2, #9
 8013dac:	d903      	bls.n	8013db6 <_svfiprintf_r+0x1a6>
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d0c6      	beq.n	8013d40 <_svfiprintf_r+0x130>
 8013db2:	9105      	str	r1, [sp, #20]
 8013db4:	e7c4      	b.n	8013d40 <_svfiprintf_r+0x130>
 8013db6:	fb0c 2101 	mla	r1, ip, r1, r2
 8013dba:	4604      	mov	r4, r0
 8013dbc:	2301      	movs	r3, #1
 8013dbe:	e7f0      	b.n	8013da2 <_svfiprintf_r+0x192>
 8013dc0:	ab03      	add	r3, sp, #12
 8013dc2:	9300      	str	r3, [sp, #0]
 8013dc4:	462a      	mov	r2, r5
 8013dc6:	4b0f      	ldr	r3, [pc, #60]	; (8013e04 <_svfiprintf_r+0x1f4>)
 8013dc8:	a904      	add	r1, sp, #16
 8013dca:	4638      	mov	r0, r7
 8013dcc:	f3af 8000 	nop.w
 8013dd0:	1c42      	adds	r2, r0, #1
 8013dd2:	4606      	mov	r6, r0
 8013dd4:	d1d6      	bne.n	8013d84 <_svfiprintf_r+0x174>
 8013dd6:	89ab      	ldrh	r3, [r5, #12]
 8013dd8:	065b      	lsls	r3, r3, #25
 8013dda:	f53f af2d 	bmi.w	8013c38 <_svfiprintf_r+0x28>
 8013dde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013de0:	b01d      	add	sp, #116	; 0x74
 8013de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013de6:	ab03      	add	r3, sp, #12
 8013de8:	9300      	str	r3, [sp, #0]
 8013dea:	462a      	mov	r2, r5
 8013dec:	4b05      	ldr	r3, [pc, #20]	; (8013e04 <_svfiprintf_r+0x1f4>)
 8013dee:	a904      	add	r1, sp, #16
 8013df0:	4638      	mov	r0, r7
 8013df2:	f000 f9bd 	bl	8014170 <_printf_i>
 8013df6:	e7eb      	b.n	8013dd0 <_svfiprintf_r+0x1c0>
 8013df8:	080156ec 	.word	0x080156ec
 8013dfc:	080156f6 	.word	0x080156f6
 8013e00:	00000000 	.word	0x00000000
 8013e04:	08013b5d 	.word	0x08013b5d
 8013e08:	080156f2 	.word	0x080156f2

08013e0c <__sfputc_r>:
 8013e0c:	6893      	ldr	r3, [r2, #8]
 8013e0e:	3b01      	subs	r3, #1
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	b410      	push	{r4}
 8013e14:	6093      	str	r3, [r2, #8]
 8013e16:	da08      	bge.n	8013e2a <__sfputc_r+0x1e>
 8013e18:	6994      	ldr	r4, [r2, #24]
 8013e1a:	42a3      	cmp	r3, r4
 8013e1c:	db01      	blt.n	8013e22 <__sfputc_r+0x16>
 8013e1e:	290a      	cmp	r1, #10
 8013e20:	d103      	bne.n	8013e2a <__sfputc_r+0x1e>
 8013e22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e26:	f7ff bc2d 	b.w	8013684 <__swbuf_r>
 8013e2a:	6813      	ldr	r3, [r2, #0]
 8013e2c:	1c58      	adds	r0, r3, #1
 8013e2e:	6010      	str	r0, [r2, #0]
 8013e30:	7019      	strb	r1, [r3, #0]
 8013e32:	4608      	mov	r0, r1
 8013e34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e38:	4770      	bx	lr

08013e3a <__sfputs_r>:
 8013e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e3c:	4606      	mov	r6, r0
 8013e3e:	460f      	mov	r7, r1
 8013e40:	4614      	mov	r4, r2
 8013e42:	18d5      	adds	r5, r2, r3
 8013e44:	42ac      	cmp	r4, r5
 8013e46:	d101      	bne.n	8013e4c <__sfputs_r+0x12>
 8013e48:	2000      	movs	r0, #0
 8013e4a:	e007      	b.n	8013e5c <__sfputs_r+0x22>
 8013e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e50:	463a      	mov	r2, r7
 8013e52:	4630      	mov	r0, r6
 8013e54:	f7ff ffda 	bl	8013e0c <__sfputc_r>
 8013e58:	1c43      	adds	r3, r0, #1
 8013e5a:	d1f3      	bne.n	8013e44 <__sfputs_r+0xa>
 8013e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013e60 <_vfiprintf_r>:
 8013e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e64:	460d      	mov	r5, r1
 8013e66:	b09d      	sub	sp, #116	; 0x74
 8013e68:	4614      	mov	r4, r2
 8013e6a:	4698      	mov	r8, r3
 8013e6c:	4606      	mov	r6, r0
 8013e6e:	b118      	cbz	r0, 8013e78 <_vfiprintf_r+0x18>
 8013e70:	6a03      	ldr	r3, [r0, #32]
 8013e72:	b90b      	cbnz	r3, 8013e78 <_vfiprintf_r+0x18>
 8013e74:	f7ff fa04 	bl	8013280 <__sinit>
 8013e78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e7a:	07d9      	lsls	r1, r3, #31
 8013e7c:	d405      	bmi.n	8013e8a <_vfiprintf_r+0x2a>
 8013e7e:	89ab      	ldrh	r3, [r5, #12]
 8013e80:	059a      	lsls	r2, r3, #22
 8013e82:	d402      	bmi.n	8013e8a <_vfiprintf_r+0x2a>
 8013e84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e86:	f7ff fdd2 	bl	8013a2e <__retarget_lock_acquire_recursive>
 8013e8a:	89ab      	ldrh	r3, [r5, #12]
 8013e8c:	071b      	lsls	r3, r3, #28
 8013e8e:	d501      	bpl.n	8013e94 <_vfiprintf_r+0x34>
 8013e90:	692b      	ldr	r3, [r5, #16]
 8013e92:	b99b      	cbnz	r3, 8013ebc <_vfiprintf_r+0x5c>
 8013e94:	4629      	mov	r1, r5
 8013e96:	4630      	mov	r0, r6
 8013e98:	f7ff fc32 	bl	8013700 <__swsetup_r>
 8013e9c:	b170      	cbz	r0, 8013ebc <_vfiprintf_r+0x5c>
 8013e9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013ea0:	07dc      	lsls	r4, r3, #31
 8013ea2:	d504      	bpl.n	8013eae <_vfiprintf_r+0x4e>
 8013ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ea8:	b01d      	add	sp, #116	; 0x74
 8013eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eae:	89ab      	ldrh	r3, [r5, #12]
 8013eb0:	0598      	lsls	r0, r3, #22
 8013eb2:	d4f7      	bmi.n	8013ea4 <_vfiprintf_r+0x44>
 8013eb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013eb6:	f7ff fdbb 	bl	8013a30 <__retarget_lock_release_recursive>
 8013eba:	e7f3      	b.n	8013ea4 <_vfiprintf_r+0x44>
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8013ec0:	2320      	movs	r3, #32
 8013ec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ec6:	f8cd 800c 	str.w	r8, [sp, #12]
 8013eca:	2330      	movs	r3, #48	; 0x30
 8013ecc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014080 <_vfiprintf_r+0x220>
 8013ed0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013ed4:	f04f 0901 	mov.w	r9, #1
 8013ed8:	4623      	mov	r3, r4
 8013eda:	469a      	mov	sl, r3
 8013edc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ee0:	b10a      	cbz	r2, 8013ee6 <_vfiprintf_r+0x86>
 8013ee2:	2a25      	cmp	r2, #37	; 0x25
 8013ee4:	d1f9      	bne.n	8013eda <_vfiprintf_r+0x7a>
 8013ee6:	ebba 0b04 	subs.w	fp, sl, r4
 8013eea:	d00b      	beq.n	8013f04 <_vfiprintf_r+0xa4>
 8013eec:	465b      	mov	r3, fp
 8013eee:	4622      	mov	r2, r4
 8013ef0:	4629      	mov	r1, r5
 8013ef2:	4630      	mov	r0, r6
 8013ef4:	f7ff ffa1 	bl	8013e3a <__sfputs_r>
 8013ef8:	3001      	adds	r0, #1
 8013efa:	f000 80a9 	beq.w	8014050 <_vfiprintf_r+0x1f0>
 8013efe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013f00:	445a      	add	r2, fp
 8013f02:	9209      	str	r2, [sp, #36]	; 0x24
 8013f04:	f89a 3000 	ldrb.w	r3, [sl]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	f000 80a1 	beq.w	8014050 <_vfiprintf_r+0x1f0>
 8013f0e:	2300      	movs	r3, #0
 8013f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013f14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013f18:	f10a 0a01 	add.w	sl, sl, #1
 8013f1c:	9304      	str	r3, [sp, #16]
 8013f1e:	9307      	str	r3, [sp, #28]
 8013f20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013f24:	931a      	str	r3, [sp, #104]	; 0x68
 8013f26:	4654      	mov	r4, sl
 8013f28:	2205      	movs	r2, #5
 8013f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f2e:	4854      	ldr	r0, [pc, #336]	; (8014080 <_vfiprintf_r+0x220>)
 8013f30:	f7ec f99e 	bl	8000270 <memchr>
 8013f34:	9a04      	ldr	r2, [sp, #16]
 8013f36:	b9d8      	cbnz	r0, 8013f70 <_vfiprintf_r+0x110>
 8013f38:	06d1      	lsls	r1, r2, #27
 8013f3a:	bf44      	itt	mi
 8013f3c:	2320      	movmi	r3, #32
 8013f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f42:	0713      	lsls	r3, r2, #28
 8013f44:	bf44      	itt	mi
 8013f46:	232b      	movmi	r3, #43	; 0x2b
 8013f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8013f50:	2b2a      	cmp	r3, #42	; 0x2a
 8013f52:	d015      	beq.n	8013f80 <_vfiprintf_r+0x120>
 8013f54:	9a07      	ldr	r2, [sp, #28]
 8013f56:	4654      	mov	r4, sl
 8013f58:	2000      	movs	r0, #0
 8013f5a:	f04f 0c0a 	mov.w	ip, #10
 8013f5e:	4621      	mov	r1, r4
 8013f60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f64:	3b30      	subs	r3, #48	; 0x30
 8013f66:	2b09      	cmp	r3, #9
 8013f68:	d94d      	bls.n	8014006 <_vfiprintf_r+0x1a6>
 8013f6a:	b1b0      	cbz	r0, 8013f9a <_vfiprintf_r+0x13a>
 8013f6c:	9207      	str	r2, [sp, #28]
 8013f6e:	e014      	b.n	8013f9a <_vfiprintf_r+0x13a>
 8013f70:	eba0 0308 	sub.w	r3, r0, r8
 8013f74:	fa09 f303 	lsl.w	r3, r9, r3
 8013f78:	4313      	orrs	r3, r2
 8013f7a:	9304      	str	r3, [sp, #16]
 8013f7c:	46a2      	mov	sl, r4
 8013f7e:	e7d2      	b.n	8013f26 <_vfiprintf_r+0xc6>
 8013f80:	9b03      	ldr	r3, [sp, #12]
 8013f82:	1d19      	adds	r1, r3, #4
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	9103      	str	r1, [sp, #12]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	bfbb      	ittet	lt
 8013f8c:	425b      	neglt	r3, r3
 8013f8e:	f042 0202 	orrlt.w	r2, r2, #2
 8013f92:	9307      	strge	r3, [sp, #28]
 8013f94:	9307      	strlt	r3, [sp, #28]
 8013f96:	bfb8      	it	lt
 8013f98:	9204      	strlt	r2, [sp, #16]
 8013f9a:	7823      	ldrb	r3, [r4, #0]
 8013f9c:	2b2e      	cmp	r3, #46	; 0x2e
 8013f9e:	d10c      	bne.n	8013fba <_vfiprintf_r+0x15a>
 8013fa0:	7863      	ldrb	r3, [r4, #1]
 8013fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8013fa4:	d134      	bne.n	8014010 <_vfiprintf_r+0x1b0>
 8013fa6:	9b03      	ldr	r3, [sp, #12]
 8013fa8:	1d1a      	adds	r2, r3, #4
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	9203      	str	r2, [sp, #12]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	bfb8      	it	lt
 8013fb2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013fb6:	3402      	adds	r4, #2
 8013fb8:	9305      	str	r3, [sp, #20]
 8013fba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014090 <_vfiprintf_r+0x230>
 8013fbe:	7821      	ldrb	r1, [r4, #0]
 8013fc0:	2203      	movs	r2, #3
 8013fc2:	4650      	mov	r0, sl
 8013fc4:	f7ec f954 	bl	8000270 <memchr>
 8013fc8:	b138      	cbz	r0, 8013fda <_vfiprintf_r+0x17a>
 8013fca:	9b04      	ldr	r3, [sp, #16]
 8013fcc:	eba0 000a 	sub.w	r0, r0, sl
 8013fd0:	2240      	movs	r2, #64	; 0x40
 8013fd2:	4082      	lsls	r2, r0
 8013fd4:	4313      	orrs	r3, r2
 8013fd6:	3401      	adds	r4, #1
 8013fd8:	9304      	str	r3, [sp, #16]
 8013fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fde:	4829      	ldr	r0, [pc, #164]	; (8014084 <_vfiprintf_r+0x224>)
 8013fe0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013fe4:	2206      	movs	r2, #6
 8013fe6:	f7ec f943 	bl	8000270 <memchr>
 8013fea:	2800      	cmp	r0, #0
 8013fec:	d03f      	beq.n	801406e <_vfiprintf_r+0x20e>
 8013fee:	4b26      	ldr	r3, [pc, #152]	; (8014088 <_vfiprintf_r+0x228>)
 8013ff0:	bb1b      	cbnz	r3, 801403a <_vfiprintf_r+0x1da>
 8013ff2:	9b03      	ldr	r3, [sp, #12]
 8013ff4:	3307      	adds	r3, #7
 8013ff6:	f023 0307 	bic.w	r3, r3, #7
 8013ffa:	3308      	adds	r3, #8
 8013ffc:	9303      	str	r3, [sp, #12]
 8013ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014000:	443b      	add	r3, r7
 8014002:	9309      	str	r3, [sp, #36]	; 0x24
 8014004:	e768      	b.n	8013ed8 <_vfiprintf_r+0x78>
 8014006:	fb0c 3202 	mla	r2, ip, r2, r3
 801400a:	460c      	mov	r4, r1
 801400c:	2001      	movs	r0, #1
 801400e:	e7a6      	b.n	8013f5e <_vfiprintf_r+0xfe>
 8014010:	2300      	movs	r3, #0
 8014012:	3401      	adds	r4, #1
 8014014:	9305      	str	r3, [sp, #20]
 8014016:	4619      	mov	r1, r3
 8014018:	f04f 0c0a 	mov.w	ip, #10
 801401c:	4620      	mov	r0, r4
 801401e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014022:	3a30      	subs	r2, #48	; 0x30
 8014024:	2a09      	cmp	r2, #9
 8014026:	d903      	bls.n	8014030 <_vfiprintf_r+0x1d0>
 8014028:	2b00      	cmp	r3, #0
 801402a:	d0c6      	beq.n	8013fba <_vfiprintf_r+0x15a>
 801402c:	9105      	str	r1, [sp, #20]
 801402e:	e7c4      	b.n	8013fba <_vfiprintf_r+0x15a>
 8014030:	fb0c 2101 	mla	r1, ip, r1, r2
 8014034:	4604      	mov	r4, r0
 8014036:	2301      	movs	r3, #1
 8014038:	e7f0      	b.n	801401c <_vfiprintf_r+0x1bc>
 801403a:	ab03      	add	r3, sp, #12
 801403c:	9300      	str	r3, [sp, #0]
 801403e:	462a      	mov	r2, r5
 8014040:	4b12      	ldr	r3, [pc, #72]	; (801408c <_vfiprintf_r+0x22c>)
 8014042:	a904      	add	r1, sp, #16
 8014044:	4630      	mov	r0, r6
 8014046:	f3af 8000 	nop.w
 801404a:	4607      	mov	r7, r0
 801404c:	1c78      	adds	r0, r7, #1
 801404e:	d1d6      	bne.n	8013ffe <_vfiprintf_r+0x19e>
 8014050:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014052:	07d9      	lsls	r1, r3, #31
 8014054:	d405      	bmi.n	8014062 <_vfiprintf_r+0x202>
 8014056:	89ab      	ldrh	r3, [r5, #12]
 8014058:	059a      	lsls	r2, r3, #22
 801405a:	d402      	bmi.n	8014062 <_vfiprintf_r+0x202>
 801405c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801405e:	f7ff fce7 	bl	8013a30 <__retarget_lock_release_recursive>
 8014062:	89ab      	ldrh	r3, [r5, #12]
 8014064:	065b      	lsls	r3, r3, #25
 8014066:	f53f af1d 	bmi.w	8013ea4 <_vfiprintf_r+0x44>
 801406a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801406c:	e71c      	b.n	8013ea8 <_vfiprintf_r+0x48>
 801406e:	ab03      	add	r3, sp, #12
 8014070:	9300      	str	r3, [sp, #0]
 8014072:	462a      	mov	r2, r5
 8014074:	4b05      	ldr	r3, [pc, #20]	; (801408c <_vfiprintf_r+0x22c>)
 8014076:	a904      	add	r1, sp, #16
 8014078:	4630      	mov	r0, r6
 801407a:	f000 f879 	bl	8014170 <_printf_i>
 801407e:	e7e4      	b.n	801404a <_vfiprintf_r+0x1ea>
 8014080:	080156ec 	.word	0x080156ec
 8014084:	080156f6 	.word	0x080156f6
 8014088:	00000000 	.word	0x00000000
 801408c:	08013e3b 	.word	0x08013e3b
 8014090:	080156f2 	.word	0x080156f2

08014094 <_printf_common>:
 8014094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014098:	4616      	mov	r6, r2
 801409a:	4699      	mov	r9, r3
 801409c:	688a      	ldr	r2, [r1, #8]
 801409e:	690b      	ldr	r3, [r1, #16]
 80140a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80140a4:	4293      	cmp	r3, r2
 80140a6:	bfb8      	it	lt
 80140a8:	4613      	movlt	r3, r2
 80140aa:	6033      	str	r3, [r6, #0]
 80140ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80140b0:	4607      	mov	r7, r0
 80140b2:	460c      	mov	r4, r1
 80140b4:	b10a      	cbz	r2, 80140ba <_printf_common+0x26>
 80140b6:	3301      	adds	r3, #1
 80140b8:	6033      	str	r3, [r6, #0]
 80140ba:	6823      	ldr	r3, [r4, #0]
 80140bc:	0699      	lsls	r1, r3, #26
 80140be:	bf42      	ittt	mi
 80140c0:	6833      	ldrmi	r3, [r6, #0]
 80140c2:	3302      	addmi	r3, #2
 80140c4:	6033      	strmi	r3, [r6, #0]
 80140c6:	6825      	ldr	r5, [r4, #0]
 80140c8:	f015 0506 	ands.w	r5, r5, #6
 80140cc:	d106      	bne.n	80140dc <_printf_common+0x48>
 80140ce:	f104 0a19 	add.w	sl, r4, #25
 80140d2:	68e3      	ldr	r3, [r4, #12]
 80140d4:	6832      	ldr	r2, [r6, #0]
 80140d6:	1a9b      	subs	r3, r3, r2
 80140d8:	42ab      	cmp	r3, r5
 80140da:	dc26      	bgt.n	801412a <_printf_common+0x96>
 80140dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80140e0:	1e13      	subs	r3, r2, #0
 80140e2:	6822      	ldr	r2, [r4, #0]
 80140e4:	bf18      	it	ne
 80140e6:	2301      	movne	r3, #1
 80140e8:	0692      	lsls	r2, r2, #26
 80140ea:	d42b      	bmi.n	8014144 <_printf_common+0xb0>
 80140ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80140f0:	4649      	mov	r1, r9
 80140f2:	4638      	mov	r0, r7
 80140f4:	47c0      	blx	r8
 80140f6:	3001      	adds	r0, #1
 80140f8:	d01e      	beq.n	8014138 <_printf_common+0xa4>
 80140fa:	6823      	ldr	r3, [r4, #0]
 80140fc:	6922      	ldr	r2, [r4, #16]
 80140fe:	f003 0306 	and.w	r3, r3, #6
 8014102:	2b04      	cmp	r3, #4
 8014104:	bf02      	ittt	eq
 8014106:	68e5      	ldreq	r5, [r4, #12]
 8014108:	6833      	ldreq	r3, [r6, #0]
 801410a:	1aed      	subeq	r5, r5, r3
 801410c:	68a3      	ldr	r3, [r4, #8]
 801410e:	bf0c      	ite	eq
 8014110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014114:	2500      	movne	r5, #0
 8014116:	4293      	cmp	r3, r2
 8014118:	bfc4      	itt	gt
 801411a:	1a9b      	subgt	r3, r3, r2
 801411c:	18ed      	addgt	r5, r5, r3
 801411e:	2600      	movs	r6, #0
 8014120:	341a      	adds	r4, #26
 8014122:	42b5      	cmp	r5, r6
 8014124:	d11a      	bne.n	801415c <_printf_common+0xc8>
 8014126:	2000      	movs	r0, #0
 8014128:	e008      	b.n	801413c <_printf_common+0xa8>
 801412a:	2301      	movs	r3, #1
 801412c:	4652      	mov	r2, sl
 801412e:	4649      	mov	r1, r9
 8014130:	4638      	mov	r0, r7
 8014132:	47c0      	blx	r8
 8014134:	3001      	adds	r0, #1
 8014136:	d103      	bne.n	8014140 <_printf_common+0xac>
 8014138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801413c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014140:	3501      	adds	r5, #1
 8014142:	e7c6      	b.n	80140d2 <_printf_common+0x3e>
 8014144:	18e1      	adds	r1, r4, r3
 8014146:	1c5a      	adds	r2, r3, #1
 8014148:	2030      	movs	r0, #48	; 0x30
 801414a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801414e:	4422      	add	r2, r4
 8014150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014158:	3302      	adds	r3, #2
 801415a:	e7c7      	b.n	80140ec <_printf_common+0x58>
 801415c:	2301      	movs	r3, #1
 801415e:	4622      	mov	r2, r4
 8014160:	4649      	mov	r1, r9
 8014162:	4638      	mov	r0, r7
 8014164:	47c0      	blx	r8
 8014166:	3001      	adds	r0, #1
 8014168:	d0e6      	beq.n	8014138 <_printf_common+0xa4>
 801416a:	3601      	adds	r6, #1
 801416c:	e7d9      	b.n	8014122 <_printf_common+0x8e>
	...

08014170 <_printf_i>:
 8014170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014174:	7e0f      	ldrb	r7, [r1, #24]
 8014176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014178:	2f78      	cmp	r7, #120	; 0x78
 801417a:	4691      	mov	r9, r2
 801417c:	4680      	mov	r8, r0
 801417e:	460c      	mov	r4, r1
 8014180:	469a      	mov	sl, r3
 8014182:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014186:	d807      	bhi.n	8014198 <_printf_i+0x28>
 8014188:	2f62      	cmp	r7, #98	; 0x62
 801418a:	d80a      	bhi.n	80141a2 <_printf_i+0x32>
 801418c:	2f00      	cmp	r7, #0
 801418e:	f000 80d4 	beq.w	801433a <_printf_i+0x1ca>
 8014192:	2f58      	cmp	r7, #88	; 0x58
 8014194:	f000 80c0 	beq.w	8014318 <_printf_i+0x1a8>
 8014198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801419c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80141a0:	e03a      	b.n	8014218 <_printf_i+0xa8>
 80141a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80141a6:	2b15      	cmp	r3, #21
 80141a8:	d8f6      	bhi.n	8014198 <_printf_i+0x28>
 80141aa:	a101      	add	r1, pc, #4	; (adr r1, 80141b0 <_printf_i+0x40>)
 80141ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80141b0:	08014209 	.word	0x08014209
 80141b4:	0801421d 	.word	0x0801421d
 80141b8:	08014199 	.word	0x08014199
 80141bc:	08014199 	.word	0x08014199
 80141c0:	08014199 	.word	0x08014199
 80141c4:	08014199 	.word	0x08014199
 80141c8:	0801421d 	.word	0x0801421d
 80141cc:	08014199 	.word	0x08014199
 80141d0:	08014199 	.word	0x08014199
 80141d4:	08014199 	.word	0x08014199
 80141d8:	08014199 	.word	0x08014199
 80141dc:	08014321 	.word	0x08014321
 80141e0:	08014249 	.word	0x08014249
 80141e4:	080142db 	.word	0x080142db
 80141e8:	08014199 	.word	0x08014199
 80141ec:	08014199 	.word	0x08014199
 80141f0:	08014343 	.word	0x08014343
 80141f4:	08014199 	.word	0x08014199
 80141f8:	08014249 	.word	0x08014249
 80141fc:	08014199 	.word	0x08014199
 8014200:	08014199 	.word	0x08014199
 8014204:	080142e3 	.word	0x080142e3
 8014208:	682b      	ldr	r3, [r5, #0]
 801420a:	1d1a      	adds	r2, r3, #4
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	602a      	str	r2, [r5, #0]
 8014210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014218:	2301      	movs	r3, #1
 801421a:	e09f      	b.n	801435c <_printf_i+0x1ec>
 801421c:	6820      	ldr	r0, [r4, #0]
 801421e:	682b      	ldr	r3, [r5, #0]
 8014220:	0607      	lsls	r7, r0, #24
 8014222:	f103 0104 	add.w	r1, r3, #4
 8014226:	6029      	str	r1, [r5, #0]
 8014228:	d501      	bpl.n	801422e <_printf_i+0xbe>
 801422a:	681e      	ldr	r6, [r3, #0]
 801422c:	e003      	b.n	8014236 <_printf_i+0xc6>
 801422e:	0646      	lsls	r6, r0, #25
 8014230:	d5fb      	bpl.n	801422a <_printf_i+0xba>
 8014232:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014236:	2e00      	cmp	r6, #0
 8014238:	da03      	bge.n	8014242 <_printf_i+0xd2>
 801423a:	232d      	movs	r3, #45	; 0x2d
 801423c:	4276      	negs	r6, r6
 801423e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014242:	485a      	ldr	r0, [pc, #360]	; (80143ac <_printf_i+0x23c>)
 8014244:	230a      	movs	r3, #10
 8014246:	e012      	b.n	801426e <_printf_i+0xfe>
 8014248:	682b      	ldr	r3, [r5, #0]
 801424a:	6820      	ldr	r0, [r4, #0]
 801424c:	1d19      	adds	r1, r3, #4
 801424e:	6029      	str	r1, [r5, #0]
 8014250:	0605      	lsls	r5, r0, #24
 8014252:	d501      	bpl.n	8014258 <_printf_i+0xe8>
 8014254:	681e      	ldr	r6, [r3, #0]
 8014256:	e002      	b.n	801425e <_printf_i+0xee>
 8014258:	0641      	lsls	r1, r0, #25
 801425a:	d5fb      	bpl.n	8014254 <_printf_i+0xe4>
 801425c:	881e      	ldrh	r6, [r3, #0]
 801425e:	4853      	ldr	r0, [pc, #332]	; (80143ac <_printf_i+0x23c>)
 8014260:	2f6f      	cmp	r7, #111	; 0x6f
 8014262:	bf0c      	ite	eq
 8014264:	2308      	moveq	r3, #8
 8014266:	230a      	movne	r3, #10
 8014268:	2100      	movs	r1, #0
 801426a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801426e:	6865      	ldr	r5, [r4, #4]
 8014270:	60a5      	str	r5, [r4, #8]
 8014272:	2d00      	cmp	r5, #0
 8014274:	bfa2      	ittt	ge
 8014276:	6821      	ldrge	r1, [r4, #0]
 8014278:	f021 0104 	bicge.w	r1, r1, #4
 801427c:	6021      	strge	r1, [r4, #0]
 801427e:	b90e      	cbnz	r6, 8014284 <_printf_i+0x114>
 8014280:	2d00      	cmp	r5, #0
 8014282:	d04b      	beq.n	801431c <_printf_i+0x1ac>
 8014284:	4615      	mov	r5, r2
 8014286:	fbb6 f1f3 	udiv	r1, r6, r3
 801428a:	fb03 6711 	mls	r7, r3, r1, r6
 801428e:	5dc7      	ldrb	r7, [r0, r7]
 8014290:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014294:	4637      	mov	r7, r6
 8014296:	42bb      	cmp	r3, r7
 8014298:	460e      	mov	r6, r1
 801429a:	d9f4      	bls.n	8014286 <_printf_i+0x116>
 801429c:	2b08      	cmp	r3, #8
 801429e:	d10b      	bne.n	80142b8 <_printf_i+0x148>
 80142a0:	6823      	ldr	r3, [r4, #0]
 80142a2:	07de      	lsls	r6, r3, #31
 80142a4:	d508      	bpl.n	80142b8 <_printf_i+0x148>
 80142a6:	6923      	ldr	r3, [r4, #16]
 80142a8:	6861      	ldr	r1, [r4, #4]
 80142aa:	4299      	cmp	r1, r3
 80142ac:	bfde      	ittt	le
 80142ae:	2330      	movle	r3, #48	; 0x30
 80142b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80142b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80142b8:	1b52      	subs	r2, r2, r5
 80142ba:	6122      	str	r2, [r4, #16]
 80142bc:	f8cd a000 	str.w	sl, [sp]
 80142c0:	464b      	mov	r3, r9
 80142c2:	aa03      	add	r2, sp, #12
 80142c4:	4621      	mov	r1, r4
 80142c6:	4640      	mov	r0, r8
 80142c8:	f7ff fee4 	bl	8014094 <_printf_common>
 80142cc:	3001      	adds	r0, #1
 80142ce:	d14a      	bne.n	8014366 <_printf_i+0x1f6>
 80142d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80142d4:	b004      	add	sp, #16
 80142d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142da:	6823      	ldr	r3, [r4, #0]
 80142dc:	f043 0320 	orr.w	r3, r3, #32
 80142e0:	6023      	str	r3, [r4, #0]
 80142e2:	4833      	ldr	r0, [pc, #204]	; (80143b0 <_printf_i+0x240>)
 80142e4:	2778      	movs	r7, #120	; 0x78
 80142e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80142ea:	6823      	ldr	r3, [r4, #0]
 80142ec:	6829      	ldr	r1, [r5, #0]
 80142ee:	061f      	lsls	r7, r3, #24
 80142f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80142f4:	d402      	bmi.n	80142fc <_printf_i+0x18c>
 80142f6:	065f      	lsls	r7, r3, #25
 80142f8:	bf48      	it	mi
 80142fa:	b2b6      	uxthmi	r6, r6
 80142fc:	07df      	lsls	r7, r3, #31
 80142fe:	bf48      	it	mi
 8014300:	f043 0320 	orrmi.w	r3, r3, #32
 8014304:	6029      	str	r1, [r5, #0]
 8014306:	bf48      	it	mi
 8014308:	6023      	strmi	r3, [r4, #0]
 801430a:	b91e      	cbnz	r6, 8014314 <_printf_i+0x1a4>
 801430c:	6823      	ldr	r3, [r4, #0]
 801430e:	f023 0320 	bic.w	r3, r3, #32
 8014312:	6023      	str	r3, [r4, #0]
 8014314:	2310      	movs	r3, #16
 8014316:	e7a7      	b.n	8014268 <_printf_i+0xf8>
 8014318:	4824      	ldr	r0, [pc, #144]	; (80143ac <_printf_i+0x23c>)
 801431a:	e7e4      	b.n	80142e6 <_printf_i+0x176>
 801431c:	4615      	mov	r5, r2
 801431e:	e7bd      	b.n	801429c <_printf_i+0x12c>
 8014320:	682b      	ldr	r3, [r5, #0]
 8014322:	6826      	ldr	r6, [r4, #0]
 8014324:	6961      	ldr	r1, [r4, #20]
 8014326:	1d18      	adds	r0, r3, #4
 8014328:	6028      	str	r0, [r5, #0]
 801432a:	0635      	lsls	r5, r6, #24
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	d501      	bpl.n	8014334 <_printf_i+0x1c4>
 8014330:	6019      	str	r1, [r3, #0]
 8014332:	e002      	b.n	801433a <_printf_i+0x1ca>
 8014334:	0670      	lsls	r0, r6, #25
 8014336:	d5fb      	bpl.n	8014330 <_printf_i+0x1c0>
 8014338:	8019      	strh	r1, [r3, #0]
 801433a:	2300      	movs	r3, #0
 801433c:	6123      	str	r3, [r4, #16]
 801433e:	4615      	mov	r5, r2
 8014340:	e7bc      	b.n	80142bc <_printf_i+0x14c>
 8014342:	682b      	ldr	r3, [r5, #0]
 8014344:	1d1a      	adds	r2, r3, #4
 8014346:	602a      	str	r2, [r5, #0]
 8014348:	681d      	ldr	r5, [r3, #0]
 801434a:	6862      	ldr	r2, [r4, #4]
 801434c:	2100      	movs	r1, #0
 801434e:	4628      	mov	r0, r5
 8014350:	f7eb ff8e 	bl	8000270 <memchr>
 8014354:	b108      	cbz	r0, 801435a <_printf_i+0x1ea>
 8014356:	1b40      	subs	r0, r0, r5
 8014358:	6060      	str	r0, [r4, #4]
 801435a:	6863      	ldr	r3, [r4, #4]
 801435c:	6123      	str	r3, [r4, #16]
 801435e:	2300      	movs	r3, #0
 8014360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014364:	e7aa      	b.n	80142bc <_printf_i+0x14c>
 8014366:	6923      	ldr	r3, [r4, #16]
 8014368:	462a      	mov	r2, r5
 801436a:	4649      	mov	r1, r9
 801436c:	4640      	mov	r0, r8
 801436e:	47d0      	blx	sl
 8014370:	3001      	adds	r0, #1
 8014372:	d0ad      	beq.n	80142d0 <_printf_i+0x160>
 8014374:	6823      	ldr	r3, [r4, #0]
 8014376:	079b      	lsls	r3, r3, #30
 8014378:	d413      	bmi.n	80143a2 <_printf_i+0x232>
 801437a:	68e0      	ldr	r0, [r4, #12]
 801437c:	9b03      	ldr	r3, [sp, #12]
 801437e:	4298      	cmp	r0, r3
 8014380:	bfb8      	it	lt
 8014382:	4618      	movlt	r0, r3
 8014384:	e7a6      	b.n	80142d4 <_printf_i+0x164>
 8014386:	2301      	movs	r3, #1
 8014388:	4632      	mov	r2, r6
 801438a:	4649      	mov	r1, r9
 801438c:	4640      	mov	r0, r8
 801438e:	47d0      	blx	sl
 8014390:	3001      	adds	r0, #1
 8014392:	d09d      	beq.n	80142d0 <_printf_i+0x160>
 8014394:	3501      	adds	r5, #1
 8014396:	68e3      	ldr	r3, [r4, #12]
 8014398:	9903      	ldr	r1, [sp, #12]
 801439a:	1a5b      	subs	r3, r3, r1
 801439c:	42ab      	cmp	r3, r5
 801439e:	dcf2      	bgt.n	8014386 <_printf_i+0x216>
 80143a0:	e7eb      	b.n	801437a <_printf_i+0x20a>
 80143a2:	2500      	movs	r5, #0
 80143a4:	f104 0619 	add.w	r6, r4, #25
 80143a8:	e7f5      	b.n	8014396 <_printf_i+0x226>
 80143aa:	bf00      	nop
 80143ac:	080156fd 	.word	0x080156fd
 80143b0:	0801570e 	.word	0x0801570e

080143b4 <__sflush_r>:
 80143b4:	898a      	ldrh	r2, [r1, #12]
 80143b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143ba:	4605      	mov	r5, r0
 80143bc:	0710      	lsls	r0, r2, #28
 80143be:	460c      	mov	r4, r1
 80143c0:	d458      	bmi.n	8014474 <__sflush_r+0xc0>
 80143c2:	684b      	ldr	r3, [r1, #4]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	dc05      	bgt.n	80143d4 <__sflush_r+0x20>
 80143c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	dc02      	bgt.n	80143d4 <__sflush_r+0x20>
 80143ce:	2000      	movs	r0, #0
 80143d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80143d6:	2e00      	cmp	r6, #0
 80143d8:	d0f9      	beq.n	80143ce <__sflush_r+0x1a>
 80143da:	2300      	movs	r3, #0
 80143dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80143e0:	682f      	ldr	r7, [r5, #0]
 80143e2:	6a21      	ldr	r1, [r4, #32]
 80143e4:	602b      	str	r3, [r5, #0]
 80143e6:	d032      	beq.n	801444e <__sflush_r+0x9a>
 80143e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80143ea:	89a3      	ldrh	r3, [r4, #12]
 80143ec:	075a      	lsls	r2, r3, #29
 80143ee:	d505      	bpl.n	80143fc <__sflush_r+0x48>
 80143f0:	6863      	ldr	r3, [r4, #4]
 80143f2:	1ac0      	subs	r0, r0, r3
 80143f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80143f6:	b10b      	cbz	r3, 80143fc <__sflush_r+0x48>
 80143f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80143fa:	1ac0      	subs	r0, r0, r3
 80143fc:	2300      	movs	r3, #0
 80143fe:	4602      	mov	r2, r0
 8014400:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014402:	6a21      	ldr	r1, [r4, #32]
 8014404:	4628      	mov	r0, r5
 8014406:	47b0      	blx	r6
 8014408:	1c43      	adds	r3, r0, #1
 801440a:	89a3      	ldrh	r3, [r4, #12]
 801440c:	d106      	bne.n	801441c <__sflush_r+0x68>
 801440e:	6829      	ldr	r1, [r5, #0]
 8014410:	291d      	cmp	r1, #29
 8014412:	d82b      	bhi.n	801446c <__sflush_r+0xb8>
 8014414:	4a29      	ldr	r2, [pc, #164]	; (80144bc <__sflush_r+0x108>)
 8014416:	410a      	asrs	r2, r1
 8014418:	07d6      	lsls	r6, r2, #31
 801441a:	d427      	bmi.n	801446c <__sflush_r+0xb8>
 801441c:	2200      	movs	r2, #0
 801441e:	6062      	str	r2, [r4, #4]
 8014420:	04d9      	lsls	r1, r3, #19
 8014422:	6922      	ldr	r2, [r4, #16]
 8014424:	6022      	str	r2, [r4, #0]
 8014426:	d504      	bpl.n	8014432 <__sflush_r+0x7e>
 8014428:	1c42      	adds	r2, r0, #1
 801442a:	d101      	bne.n	8014430 <__sflush_r+0x7c>
 801442c:	682b      	ldr	r3, [r5, #0]
 801442e:	b903      	cbnz	r3, 8014432 <__sflush_r+0x7e>
 8014430:	6560      	str	r0, [r4, #84]	; 0x54
 8014432:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014434:	602f      	str	r7, [r5, #0]
 8014436:	2900      	cmp	r1, #0
 8014438:	d0c9      	beq.n	80143ce <__sflush_r+0x1a>
 801443a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801443e:	4299      	cmp	r1, r3
 8014440:	d002      	beq.n	8014448 <__sflush_r+0x94>
 8014442:	4628      	mov	r0, r5
 8014444:	f7ff fb36 	bl	8013ab4 <_free_r>
 8014448:	2000      	movs	r0, #0
 801444a:	6360      	str	r0, [r4, #52]	; 0x34
 801444c:	e7c0      	b.n	80143d0 <__sflush_r+0x1c>
 801444e:	2301      	movs	r3, #1
 8014450:	4628      	mov	r0, r5
 8014452:	47b0      	blx	r6
 8014454:	1c41      	adds	r1, r0, #1
 8014456:	d1c8      	bne.n	80143ea <__sflush_r+0x36>
 8014458:	682b      	ldr	r3, [r5, #0]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d0c5      	beq.n	80143ea <__sflush_r+0x36>
 801445e:	2b1d      	cmp	r3, #29
 8014460:	d001      	beq.n	8014466 <__sflush_r+0xb2>
 8014462:	2b16      	cmp	r3, #22
 8014464:	d101      	bne.n	801446a <__sflush_r+0xb6>
 8014466:	602f      	str	r7, [r5, #0]
 8014468:	e7b1      	b.n	80143ce <__sflush_r+0x1a>
 801446a:	89a3      	ldrh	r3, [r4, #12]
 801446c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014470:	81a3      	strh	r3, [r4, #12]
 8014472:	e7ad      	b.n	80143d0 <__sflush_r+0x1c>
 8014474:	690f      	ldr	r7, [r1, #16]
 8014476:	2f00      	cmp	r7, #0
 8014478:	d0a9      	beq.n	80143ce <__sflush_r+0x1a>
 801447a:	0793      	lsls	r3, r2, #30
 801447c:	680e      	ldr	r6, [r1, #0]
 801447e:	bf08      	it	eq
 8014480:	694b      	ldreq	r3, [r1, #20]
 8014482:	600f      	str	r7, [r1, #0]
 8014484:	bf18      	it	ne
 8014486:	2300      	movne	r3, #0
 8014488:	eba6 0807 	sub.w	r8, r6, r7
 801448c:	608b      	str	r3, [r1, #8]
 801448e:	f1b8 0f00 	cmp.w	r8, #0
 8014492:	dd9c      	ble.n	80143ce <__sflush_r+0x1a>
 8014494:	6a21      	ldr	r1, [r4, #32]
 8014496:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014498:	4643      	mov	r3, r8
 801449a:	463a      	mov	r2, r7
 801449c:	4628      	mov	r0, r5
 801449e:	47b0      	blx	r6
 80144a0:	2800      	cmp	r0, #0
 80144a2:	dc06      	bgt.n	80144b2 <__sflush_r+0xfe>
 80144a4:	89a3      	ldrh	r3, [r4, #12]
 80144a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144aa:	81a3      	strh	r3, [r4, #12]
 80144ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80144b0:	e78e      	b.n	80143d0 <__sflush_r+0x1c>
 80144b2:	4407      	add	r7, r0
 80144b4:	eba8 0800 	sub.w	r8, r8, r0
 80144b8:	e7e9      	b.n	801448e <__sflush_r+0xda>
 80144ba:	bf00      	nop
 80144bc:	dfbffffe 	.word	0xdfbffffe

080144c0 <_fflush_r>:
 80144c0:	b538      	push	{r3, r4, r5, lr}
 80144c2:	690b      	ldr	r3, [r1, #16]
 80144c4:	4605      	mov	r5, r0
 80144c6:	460c      	mov	r4, r1
 80144c8:	b913      	cbnz	r3, 80144d0 <_fflush_r+0x10>
 80144ca:	2500      	movs	r5, #0
 80144cc:	4628      	mov	r0, r5
 80144ce:	bd38      	pop	{r3, r4, r5, pc}
 80144d0:	b118      	cbz	r0, 80144da <_fflush_r+0x1a>
 80144d2:	6a03      	ldr	r3, [r0, #32]
 80144d4:	b90b      	cbnz	r3, 80144da <_fflush_r+0x1a>
 80144d6:	f7fe fed3 	bl	8013280 <__sinit>
 80144da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d0f3      	beq.n	80144ca <_fflush_r+0xa>
 80144e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80144e4:	07d0      	lsls	r0, r2, #31
 80144e6:	d404      	bmi.n	80144f2 <_fflush_r+0x32>
 80144e8:	0599      	lsls	r1, r3, #22
 80144ea:	d402      	bmi.n	80144f2 <_fflush_r+0x32>
 80144ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80144ee:	f7ff fa9e 	bl	8013a2e <__retarget_lock_acquire_recursive>
 80144f2:	4628      	mov	r0, r5
 80144f4:	4621      	mov	r1, r4
 80144f6:	f7ff ff5d 	bl	80143b4 <__sflush_r>
 80144fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80144fc:	07da      	lsls	r2, r3, #31
 80144fe:	4605      	mov	r5, r0
 8014500:	d4e4      	bmi.n	80144cc <_fflush_r+0xc>
 8014502:	89a3      	ldrh	r3, [r4, #12]
 8014504:	059b      	lsls	r3, r3, #22
 8014506:	d4e1      	bmi.n	80144cc <_fflush_r+0xc>
 8014508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801450a:	f7ff fa91 	bl	8013a30 <__retarget_lock_release_recursive>
 801450e:	e7dd      	b.n	80144cc <_fflush_r+0xc>

08014510 <fiprintf>:
 8014510:	b40e      	push	{r1, r2, r3}
 8014512:	b503      	push	{r0, r1, lr}
 8014514:	4601      	mov	r1, r0
 8014516:	ab03      	add	r3, sp, #12
 8014518:	4805      	ldr	r0, [pc, #20]	; (8014530 <fiprintf+0x20>)
 801451a:	f853 2b04 	ldr.w	r2, [r3], #4
 801451e:	6800      	ldr	r0, [r0, #0]
 8014520:	9301      	str	r3, [sp, #4]
 8014522:	f7ff fc9d 	bl	8013e60 <_vfiprintf_r>
 8014526:	b002      	add	sp, #8
 8014528:	f85d eb04 	ldr.w	lr, [sp], #4
 801452c:	b003      	add	sp, #12
 801452e:	4770      	bx	lr
 8014530:	20000254 	.word	0x20000254

08014534 <__swhatbuf_r>:
 8014534:	b570      	push	{r4, r5, r6, lr}
 8014536:	460c      	mov	r4, r1
 8014538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801453c:	2900      	cmp	r1, #0
 801453e:	b096      	sub	sp, #88	; 0x58
 8014540:	4615      	mov	r5, r2
 8014542:	461e      	mov	r6, r3
 8014544:	da0d      	bge.n	8014562 <__swhatbuf_r+0x2e>
 8014546:	89a3      	ldrh	r3, [r4, #12]
 8014548:	f013 0f80 	tst.w	r3, #128	; 0x80
 801454c:	f04f 0100 	mov.w	r1, #0
 8014550:	bf0c      	ite	eq
 8014552:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014556:	2340      	movne	r3, #64	; 0x40
 8014558:	2000      	movs	r0, #0
 801455a:	6031      	str	r1, [r6, #0]
 801455c:	602b      	str	r3, [r5, #0]
 801455e:	b016      	add	sp, #88	; 0x58
 8014560:	bd70      	pop	{r4, r5, r6, pc}
 8014562:	466a      	mov	r2, sp
 8014564:	f000 f848 	bl	80145f8 <_fstat_r>
 8014568:	2800      	cmp	r0, #0
 801456a:	dbec      	blt.n	8014546 <__swhatbuf_r+0x12>
 801456c:	9901      	ldr	r1, [sp, #4]
 801456e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014572:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014576:	4259      	negs	r1, r3
 8014578:	4159      	adcs	r1, r3
 801457a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801457e:	e7eb      	b.n	8014558 <__swhatbuf_r+0x24>

08014580 <__smakebuf_r>:
 8014580:	898b      	ldrh	r3, [r1, #12]
 8014582:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014584:	079d      	lsls	r5, r3, #30
 8014586:	4606      	mov	r6, r0
 8014588:	460c      	mov	r4, r1
 801458a:	d507      	bpl.n	801459c <__smakebuf_r+0x1c>
 801458c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014590:	6023      	str	r3, [r4, #0]
 8014592:	6123      	str	r3, [r4, #16]
 8014594:	2301      	movs	r3, #1
 8014596:	6163      	str	r3, [r4, #20]
 8014598:	b002      	add	sp, #8
 801459a:	bd70      	pop	{r4, r5, r6, pc}
 801459c:	ab01      	add	r3, sp, #4
 801459e:	466a      	mov	r2, sp
 80145a0:	f7ff ffc8 	bl	8014534 <__swhatbuf_r>
 80145a4:	9900      	ldr	r1, [sp, #0]
 80145a6:	4605      	mov	r5, r0
 80145a8:	4630      	mov	r0, r6
 80145aa:	f7fe fc31 	bl	8012e10 <_malloc_r>
 80145ae:	b948      	cbnz	r0, 80145c4 <__smakebuf_r+0x44>
 80145b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145b4:	059a      	lsls	r2, r3, #22
 80145b6:	d4ef      	bmi.n	8014598 <__smakebuf_r+0x18>
 80145b8:	f023 0303 	bic.w	r3, r3, #3
 80145bc:	f043 0302 	orr.w	r3, r3, #2
 80145c0:	81a3      	strh	r3, [r4, #12]
 80145c2:	e7e3      	b.n	801458c <__smakebuf_r+0xc>
 80145c4:	89a3      	ldrh	r3, [r4, #12]
 80145c6:	6020      	str	r0, [r4, #0]
 80145c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80145cc:	81a3      	strh	r3, [r4, #12]
 80145ce:	9b00      	ldr	r3, [sp, #0]
 80145d0:	6163      	str	r3, [r4, #20]
 80145d2:	9b01      	ldr	r3, [sp, #4]
 80145d4:	6120      	str	r0, [r4, #16]
 80145d6:	b15b      	cbz	r3, 80145f0 <__smakebuf_r+0x70>
 80145d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80145dc:	4630      	mov	r0, r6
 80145de:	f000 f81d 	bl	801461c <_isatty_r>
 80145e2:	b128      	cbz	r0, 80145f0 <__smakebuf_r+0x70>
 80145e4:	89a3      	ldrh	r3, [r4, #12]
 80145e6:	f023 0303 	bic.w	r3, r3, #3
 80145ea:	f043 0301 	orr.w	r3, r3, #1
 80145ee:	81a3      	strh	r3, [r4, #12]
 80145f0:	89a3      	ldrh	r3, [r4, #12]
 80145f2:	431d      	orrs	r5, r3
 80145f4:	81a5      	strh	r5, [r4, #12]
 80145f6:	e7cf      	b.n	8014598 <__smakebuf_r+0x18>

080145f8 <_fstat_r>:
 80145f8:	b538      	push	{r3, r4, r5, lr}
 80145fa:	4d07      	ldr	r5, [pc, #28]	; (8014618 <_fstat_r+0x20>)
 80145fc:	2300      	movs	r3, #0
 80145fe:	4604      	mov	r4, r0
 8014600:	4608      	mov	r0, r1
 8014602:	4611      	mov	r1, r2
 8014604:	602b      	str	r3, [r5, #0]
 8014606:	f7ed f8f2 	bl	80017ee <_fstat>
 801460a:	1c43      	adds	r3, r0, #1
 801460c:	d102      	bne.n	8014614 <_fstat_r+0x1c>
 801460e:	682b      	ldr	r3, [r5, #0]
 8014610:	b103      	cbz	r3, 8014614 <_fstat_r+0x1c>
 8014612:	6023      	str	r3, [r4, #0]
 8014614:	bd38      	pop	{r3, r4, r5, pc}
 8014616:	bf00      	nop
 8014618:	20010f60 	.word	0x20010f60

0801461c <_isatty_r>:
 801461c:	b538      	push	{r3, r4, r5, lr}
 801461e:	4d06      	ldr	r5, [pc, #24]	; (8014638 <_isatty_r+0x1c>)
 8014620:	2300      	movs	r3, #0
 8014622:	4604      	mov	r4, r0
 8014624:	4608      	mov	r0, r1
 8014626:	602b      	str	r3, [r5, #0]
 8014628:	f7ed f8f1 	bl	800180e <_isatty>
 801462c:	1c43      	adds	r3, r0, #1
 801462e:	d102      	bne.n	8014636 <_isatty_r+0x1a>
 8014630:	682b      	ldr	r3, [r5, #0]
 8014632:	b103      	cbz	r3, 8014636 <_isatty_r+0x1a>
 8014634:	6023      	str	r3, [r4, #0]
 8014636:	bd38      	pop	{r3, r4, r5, pc}
 8014638:	20010f60 	.word	0x20010f60

0801463c <abort>:
 801463c:	b508      	push	{r3, lr}
 801463e:	2006      	movs	r0, #6
 8014640:	f000 f82c 	bl	801469c <raise>
 8014644:	2001      	movs	r0, #1
 8014646:	f7ed f883 	bl	8001750 <_exit>

0801464a <_raise_r>:
 801464a:	291f      	cmp	r1, #31
 801464c:	b538      	push	{r3, r4, r5, lr}
 801464e:	4604      	mov	r4, r0
 8014650:	460d      	mov	r5, r1
 8014652:	d904      	bls.n	801465e <_raise_r+0x14>
 8014654:	2316      	movs	r3, #22
 8014656:	6003      	str	r3, [r0, #0]
 8014658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801465c:	bd38      	pop	{r3, r4, r5, pc}
 801465e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014660:	b112      	cbz	r2, 8014668 <_raise_r+0x1e>
 8014662:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014666:	b94b      	cbnz	r3, 801467c <_raise_r+0x32>
 8014668:	4620      	mov	r0, r4
 801466a:	f000 f831 	bl	80146d0 <_getpid_r>
 801466e:	462a      	mov	r2, r5
 8014670:	4601      	mov	r1, r0
 8014672:	4620      	mov	r0, r4
 8014674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014678:	f000 b818 	b.w	80146ac <_kill_r>
 801467c:	2b01      	cmp	r3, #1
 801467e:	d00a      	beq.n	8014696 <_raise_r+0x4c>
 8014680:	1c59      	adds	r1, r3, #1
 8014682:	d103      	bne.n	801468c <_raise_r+0x42>
 8014684:	2316      	movs	r3, #22
 8014686:	6003      	str	r3, [r0, #0]
 8014688:	2001      	movs	r0, #1
 801468a:	e7e7      	b.n	801465c <_raise_r+0x12>
 801468c:	2400      	movs	r4, #0
 801468e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014692:	4628      	mov	r0, r5
 8014694:	4798      	blx	r3
 8014696:	2000      	movs	r0, #0
 8014698:	e7e0      	b.n	801465c <_raise_r+0x12>
	...

0801469c <raise>:
 801469c:	4b02      	ldr	r3, [pc, #8]	; (80146a8 <raise+0xc>)
 801469e:	4601      	mov	r1, r0
 80146a0:	6818      	ldr	r0, [r3, #0]
 80146a2:	f7ff bfd2 	b.w	801464a <_raise_r>
 80146a6:	bf00      	nop
 80146a8:	20000254 	.word	0x20000254

080146ac <_kill_r>:
 80146ac:	b538      	push	{r3, r4, r5, lr}
 80146ae:	4d07      	ldr	r5, [pc, #28]	; (80146cc <_kill_r+0x20>)
 80146b0:	2300      	movs	r3, #0
 80146b2:	4604      	mov	r4, r0
 80146b4:	4608      	mov	r0, r1
 80146b6:	4611      	mov	r1, r2
 80146b8:	602b      	str	r3, [r5, #0]
 80146ba:	f7ed f839 	bl	8001730 <_kill>
 80146be:	1c43      	adds	r3, r0, #1
 80146c0:	d102      	bne.n	80146c8 <_kill_r+0x1c>
 80146c2:	682b      	ldr	r3, [r5, #0]
 80146c4:	b103      	cbz	r3, 80146c8 <_kill_r+0x1c>
 80146c6:	6023      	str	r3, [r4, #0]
 80146c8:	bd38      	pop	{r3, r4, r5, pc}
 80146ca:	bf00      	nop
 80146cc:	20010f60 	.word	0x20010f60

080146d0 <_getpid_r>:
 80146d0:	f7ed b826 	b.w	8001720 <_getpid>

080146d4 <_init>:
 80146d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146d6:	bf00      	nop
 80146d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146da:	bc08      	pop	{r3}
 80146dc:	469e      	mov	lr, r3
 80146de:	4770      	bx	lr

080146e0 <_fini>:
 80146e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146e2:	bf00      	nop
 80146e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146e6:	bc08      	pop	{r3}
 80146e8:	469e      	mov	lr, r3
 80146ea:	4770      	bx	lr
