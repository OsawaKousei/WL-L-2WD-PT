
WL-L-2WDprototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001549c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001040  080156a0  080156a0  000256a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080166e0  080166e0  00030258  2**0
                  CONTENTS
  4 .ARM          00000008  080166e0  080166e0  000266e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080166e8  080166e8  00030258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080166e8  080166e8  000266e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080166f0  080166f0  000266f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  080166f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010d58  20000258  0801694c  00030258  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20010fb0  0801694c  00030fb0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00030286  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bb89  00000000  00000000  000302fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040d1  00000000  00000000  0004be85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a0  00000000  00000000  0004ff58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd1  00000000  00000000  000513f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d988  00000000  00000000  000523c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b808  00000000  00000000  0007fd51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010fb4c  00000000  00000000  0009b559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061f0  00000000  00000000  001ab0a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001b1298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000258 	.word	0x20000258
 800021c:	00000000 	.word	0x00000000
 8000220:	08015684 	.word	0x08015684

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000025c 	.word	0x2000025c
 800023c:	08015684 	.word	0x08015684

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800032e:	f000 b9bb 	b.w	80006a8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80006b8:	f006 fcc2 	bl	8007040 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80006bc:	4b5b      	ldr	r3, [pc, #364]	; (800082c <pvPortMallocMicroROS+0x180>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d101      	bne.n	80006c8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80006c4:	f000 f98a 	bl	80009dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006c8:	4b59      	ldr	r3, [pc, #356]	; (8000830 <pvPortMallocMicroROS+0x184>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4013      	ands	r3, r2
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	f040 8092 	bne.w	80007fa <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d01f      	beq.n	800071c <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 80006dc:	2208      	movs	r2, #8
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d016      	beq.n	800071c <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f023 0307 	bic.w	r3, r3, #7
 80006f4:	3308      	adds	r3, #8
 80006f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d00c      	beq.n	800071c <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000706:	b672      	cpsid	i
 8000708:	f383 8811 	msr	BASEPRI, r3
 800070c:	f3bf 8f6f 	isb	sy
 8000710:	f3bf 8f4f 	dsb	sy
 8000714:	b662      	cpsie	i
 8000716:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000718:	bf00      	nop
 800071a:	e7fe      	b.n	800071a <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d06b      	beq.n	80007fa <pvPortMallocMicroROS+0x14e>
 8000722:	4b44      	ldr	r3, [pc, #272]	; (8000834 <pvPortMallocMicroROS+0x188>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	429a      	cmp	r2, r3
 800072a:	d866      	bhi.n	80007fa <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800072c:	4b42      	ldr	r3, [pc, #264]	; (8000838 <pvPortMallocMicroROS+0x18c>)
 800072e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000730:	4b41      	ldr	r3, [pc, #260]	; (8000838 <pvPortMallocMicroROS+0x18c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000736:	e004      	b.n	8000742 <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	429a      	cmp	r2, r3
 800074a:	d903      	bls.n	8000754 <pvPortMallocMicroROS+0xa8>
 800074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1f1      	bne.n	8000738 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000754:	4b35      	ldr	r3, [pc, #212]	; (800082c <pvPortMallocMicroROS+0x180>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800075a:	429a      	cmp	r2, r3
 800075c:	d04d      	beq.n	80007fa <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800075e:	6a3b      	ldr	r3, [r7, #32]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2208      	movs	r2, #8
 8000764:	4413      	add	r3, r2
 8000766:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	6a3b      	ldr	r3, [r7, #32]
 800076e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000772:	685a      	ldr	r2, [r3, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	1ad2      	subs	r2, r2, r3
 8000778:	2308      	movs	r3, #8
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	429a      	cmp	r2, r3
 800077e:	d921      	bls.n	80007c4 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	2b00      	cmp	r3, #0
 8000790:	d00c      	beq.n	80007ac <pvPortMallocMicroROS+0x100>
	__asm volatile
 8000792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000796:	b672      	cpsid	i
 8000798:	f383 8811 	msr	BASEPRI, r3
 800079c:	f3bf 8f6f 	isb	sy
 80007a0:	f3bf 8f4f 	dsb	sy
 80007a4:	b662      	cpsie	i
 80007a6:	613b      	str	r3, [r7, #16]
}
 80007a8:	bf00      	nop
 80007aa:	e7fe      	b.n	80007aa <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80007ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ae:	685a      	ldr	r2, [r3, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	1ad2      	subs	r2, r2, r3
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80007b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80007be:	69b8      	ldr	r0, [r7, #24]
 80007c0:	f000 f96e 	bl	8000aa0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <pvPortMallocMicroROS+0x188>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	4a19      	ldr	r2, [pc, #100]	; (8000834 <pvPortMallocMicroROS+0x188>)
 80007d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <pvPortMallocMicroROS+0x188>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <pvPortMallocMicroROS+0x190>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d203      	bcs.n	80007e6 <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <pvPortMallocMicroROS+0x188>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a16      	ldr	r2, [pc, #88]	; (800083c <pvPortMallocMicroROS+0x190>)
 80007e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e8:	685a      	ldr	r2, [r3, #4]
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <pvPortMallocMicroROS+0x184>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	431a      	orrs	r2, r3
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007fa:	f006 fc2f 	bl	800705c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	f003 0307 	and.w	r3, r3, #7
 8000804:	2b00      	cmp	r3, #0
 8000806:	d00c      	beq.n	8000822 <pvPortMallocMicroROS+0x176>
	__asm volatile
 8000808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800080c:	b672      	cpsid	i
 800080e:	f383 8811 	msr	BASEPRI, r3
 8000812:	f3bf 8f6f 	isb	sy
 8000816:	f3bf 8f4f 	dsb	sy
 800081a:	b662      	cpsie	i
 800081c:	60fb      	str	r3, [r7, #12]
}
 800081e:	bf00      	nop
 8000820:	e7fe      	b.n	8000820 <pvPortMallocMicroROS+0x174>
	return pvReturn;
 8000822:	69fb      	ldr	r3, [r7, #28]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20003e7c 	.word	0x20003e7c
 8000830:	20003e88 	.word	0x20003e88
 8000834:	20003e80 	.word	0x20003e80
 8000838:	20003e74 	.word	0x20003e74
 800083c:	20003e84 	.word	0x20003e84

08000840 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d04c      	beq.n	80008ec <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000852:	2308      	movs	r3, #8
 8000854:	425b      	negs	r3, r3
 8000856:	697a      	ldr	r2, [r7, #20]
 8000858:	4413      	add	r3, r2
 800085a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <vPortFreeMicroROS+0xb4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4013      	ands	r3, r2
 800086a:	2b00      	cmp	r3, #0
 800086c:	d10c      	bne.n	8000888 <vPortFreeMicroROS+0x48>
	__asm volatile
 800086e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000872:	b672      	cpsid	i
 8000874:	f383 8811 	msr	BASEPRI, r3
 8000878:	f3bf 8f6f 	isb	sy
 800087c:	f3bf 8f4f 	dsb	sy
 8000880:	b662      	cpsie	i
 8000882:	60fb      	str	r3, [r7, #12]
}
 8000884:	bf00      	nop
 8000886:	e7fe      	b.n	8000886 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d00c      	beq.n	80008aa <vPortFreeMicroROS+0x6a>
	__asm volatile
 8000890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000894:	b672      	cpsid	i
 8000896:	f383 8811 	msr	BASEPRI, r3
 800089a:	f3bf 8f6f 	isb	sy
 800089e:	f3bf 8f4f 	dsb	sy
 80008a2:	b662      	cpsie	i
 80008a4:	60bb      	str	r3, [r7, #8]
}
 80008a6:	bf00      	nop
 80008a8:	e7fe      	b.n	80008a8 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <vPortFreeMicroROS+0xb4>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4013      	ands	r3, r2
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d019      	beq.n	80008ec <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d115      	bne.n	80008ec <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	685a      	ldr	r2, [r3, #4]
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <vPortFreeMicroROS+0xb4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	43db      	mvns	r3, r3
 80008ca:	401a      	ands	r2, r3
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80008d0:	f006 fbb6 	bl	8007040 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <vPortFreeMicroROS+0xb8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4413      	add	r3, r2
 80008de:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <vPortFreeMicroROS+0xb8>)
 80008e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80008e2:	6938      	ldr	r0, [r7, #16]
 80008e4:	f000 f8dc 	bl	8000aa0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008e8:	f006 fbb8 	bl	800705c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008ec:	bf00      	nop
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20003e88 	.word	0x20003e88
 80008f8:	20003e80 	.word	0x20003e80

080008fc <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008fc:	b480      	push	{r7}
 80008fe:	b087      	sub	sp, #28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000908:	2308      	movs	r3, #8
 800090a:	425b      	negs	r3, r3
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	4413      	add	r3, r2
 8000910:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	685a      	ldr	r2, [r3, #4]
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <getBlockSize+0x38>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	43db      	mvns	r3, r3
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]

	return count;
 8000924:	68fb      	ldr	r3, [r7, #12]
}
 8000926:	4618      	mov	r0, r3
 8000928:	371c      	adds	r7, #28
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20003e88 	.word	0x20003e88

08000938 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000942:	f006 fb7d 	bl	8007040 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000946:	6838      	ldr	r0, [r7, #0]
 8000948:	f7ff feb0 	bl	80006ac <pvPortMallocMicroROS>
 800094c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d017      	beq.n	8000984 <pvPortReallocMicroROS+0x4c>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d014      	beq.n	8000984 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff ffce 	bl	80008fc <getBlockSize>
 8000960:	4603      	mov	r3, r0
 8000962:	2208      	movs	r2, #8
 8000964:	1a9b      	subs	r3, r3, r2
 8000966:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	429a      	cmp	r2, r3
 800096e:	d201      	bcs.n	8000974 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	68b8      	ldr	r0, [r7, #8]
 800097a:	f014 f83a 	bl	80149f2 <memcpy>

		vPortFreeMicroROS(pv);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ff5e 	bl	8000840 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000984:	f006 fb6a 	bl	800705c <xTaskResumeAll>

	return newmem;
 8000988:	68bb      	ldr	r3, [r7, #8]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b086      	sub	sp, #24
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800099c:	f006 fb50 	bl	8007040 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80009aa:	6978      	ldr	r0, [r7, #20]
 80009ac:	f7ff fe7e 	bl	80006ac <pvPortMallocMicroROS>
 80009b0:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	613b      	str	r3, [r7, #16]

  	while(count--)
 80009b6:	e004      	b.n	80009c2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	613a      	str	r2, [r7, #16]
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	1e5a      	subs	r2, r3, #1
 80009c6:	617a      	str	r2, [r7, #20]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1f5      	bne.n	80009b8 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80009cc:	f006 fb46 	bl	800705c <xTaskResumeAll>
  	return mem;
 80009d0:	68fb      	ldr	r3, [r7, #12]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009e2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80009e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009e8:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <prvHeapInit+0xac>)
 80009ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d00c      	beq.n	8000a10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3307      	adds	r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f023 0307 	bic.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a04:	68ba      	ldr	r2, [r7, #8]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	4a1f      	ldr	r2, [pc, #124]	; (8000a88 <prvHeapInit+0xac>)
 8000a0c:	4413      	add	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a14:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <prvHeapInit+0xb0>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <prvHeapInit+0xb0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	4413      	add	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a28:	2208      	movs	r2, #8
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	1a9b      	subs	r3, r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f023 0307 	bic.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <prvHeapInit+0xb4>)
 8000a3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <prvHeapInit+0xb4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2200      	movs	r2, #0
 8000a44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <prvHeapInit+0xb4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	1ad2      	subs	r2, r2, r3
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <prvHeapInit+0xb4>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <prvHeapInit+0xb8>)
 8000a6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	4a09      	ldr	r2, [pc, #36]	; (8000a98 <prvHeapInit+0xbc>)
 8000a72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <prvHeapInit+0xc0>)
 8000a76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a7a:	601a      	str	r2, [r3, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	20000274 	.word	0x20000274
 8000a8c:	20003e74 	.word	0x20003e74
 8000a90:	20003e7c 	.word	0x20003e7c
 8000a94:	20003e84 	.word	0x20003e84
 8000a98:	20003e80 	.word	0x20003e80
 8000a9c:	20003e88 	.word	0x20003e88

08000aa0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000aa8:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <prvInsertBlockIntoFreeList+0xac>)
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	e002      	b.n	8000ab4 <prvInsertBlockIntoFreeList+0x14>
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d8f7      	bhi.n	8000aae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	4413      	add	r3, r2
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d108      	bne.n	8000ae2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	685a      	ldr	r2, [r3, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	441a      	add	r2, r3
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	441a      	add	r2, r3
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d118      	bne.n	8000b28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <prvInsertBlockIntoFreeList+0xb0>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d00d      	beq.n	8000b1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	441a      	add	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	e008      	b.n	8000b30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <prvInsertBlockIntoFreeList+0xb0>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	e003      	b.n	8000b30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d002      	beq.n	8000b3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20003e74 	.word	0x20003e74
 8000b50:	20003e7c 	.word	0x20003e7c

08000b54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <MX_DMA_Init+0x48>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <MX_DMA_Init+0x48>)
 8000b60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <MX_DMA_Init+0x48>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2105      	movs	r1, #5
 8000b76:	200c      	movs	r0, #12
 8000b78:	f001 fa9c 	bl	80020b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b7c:	200c      	movs	r0, #12
 8000b7e:	f001 fab5 	bl	80020ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2105      	movs	r1, #5
 8000b86:	200e      	movs	r0, #14
 8000b88:	f001 fa94 	bl	80020b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b8c:	200e      	movs	r0, #14
 8000b8e:	f001 faad 	bl	80020ec <HAL_NVIC_EnableIRQ>

}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000bae:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bb4:	4904      	ldr	r1, [pc, #16]	; (8000bc8 <cubemx_transport_open+0x28>)
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f004 fbe4 	bl	8005384 <HAL_UART_Receive_DMA>
    return true;
 8000bbc:	2301      	movs	r3, #1
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20003e8c 	.word	0x20003e8c

08000bcc <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000bda:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f004 fc15 	bl	800540c <HAL_UART_DMAStop>
    return true;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
 8000bf8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000c00:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000c06:	2b20      	cmp	r3, #32
 8000c08:	d11a      	bne.n	8000c40 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f004 fb3a 	bl	800528c <HAL_UART_Transmit_DMA>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c1c:	e002      	b.n	8000c24 <cubemx_transport_write+0x38>
            osDelay(1);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f005 fef0 	bl	8006a04 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c24:	7cfb      	ldrb	r3, [r7, #19]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d103      	bne.n	8000c32 <cubemx_transport_write+0x46>
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000c2e:	2b20      	cmp	r3, #32
 8000c30:	d1f5      	bne.n	8000c1e <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8000c32:	7cfb      	ldrb	r3, [r7, #19]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d101      	bne.n	8000c3c <cubemx_transport_write+0x50>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	e002      	b.n	8000c42 <cubemx_transport_write+0x56>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e000      	b.n	8000c42 <cubemx_transport_write+0x56>
    }else{
        return 0;
 8000c40:	2300      	movs	r3, #0
    }
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000c60:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c66:	b672      	cpsid	i
}
 8000c68:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000c76:	4a1c      	ldr	r2, [pc, #112]	; (8000ce8 <cubemx_transport_read+0x9c>)
 8000c78:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c7a:	b662      	cpsie	i
}
 8000c7c:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3301      	adds	r3, #1
 8000c82:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f005 febd 	bl	8006a04 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <cubemx_transport_read+0xa0>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <cubemx_transport_read+0x9c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d103      	bne.n	8000c9e <cubemx_transport_read+0x52>
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	dbe3      	blt.n	8000c66 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000ca2:	e011      	b.n	8000cc8 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <cubemx_transport_read+0xa0>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	440b      	add	r3, r1
 8000cae:	4910      	ldr	r1, [pc, #64]	; (8000cf0 <cubemx_transport_read+0xa4>)
 8000cb0:	5c8a      	ldrb	r2, [r1, r2]
 8000cb2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <cubemx_transport_read+0xa0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <cubemx_transport_read+0xa0>)
 8000cc0:	6013      	str	r3, [r2, #0]
        wrote++;
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <cubemx_transport_read+0xa0>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <cubemx_transport_read+0x9c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d003      	beq.n	8000cdc <cubemx_transport_read+0x90>
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d3e3      	bcc.n	8000ca4 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000cdc:	69bb      	ldr	r3, [r7, #24]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3720      	adds	r7, #32
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20004690 	.word	0x20004690
 8000cec:	2000468c 	.word	0x2000468c
 8000cf0:	20003e8c 	.word	0x20003e8c

08000cf4 <service_callback>:
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

// サービスのコールバック関数を定義
void service_callback(const void *request, void *response)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
	// リクエストとレスポンスを適切な型にキャスト
	custom_test_msgs__srv__AddThreeInts_Request *_req = (custom_test_msgs__srv__AddThreeInts_Request *)request;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	60fb      	str	r3, [r7, #12]
	custom_test_msgs__srv__AddThreeInts_Response *_res = (custom_test_msgs__srv__AddThreeInts_Response *)response;
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	60bb      	str	r3, [r7, #8]

	printf("a: %d\r\nb: %d",_req->a,_req->b);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d12:	e9cd 2300 	strd	r2, r3, [sp]
 8000d16:	4602      	mov	r2, r0
 8000d18:	460b      	mov	r3, r1
 8000d1a:	4860      	ldr	r0, [pc, #384]	; (8000e9c <service_callback+0x1a8>)
 8000d1c:	f013 fabe 	bl	801429c <iprintf>

	if(_req->a == 1){
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d26:	1e51      	subs	r1, r2, #1
 8000d28:	430b      	orrs	r3, r1
 8000d2a:	d145      	bne.n	8000db8 <service_callback+0xc4>

		HAL_GPIO_WritePin(GPIOB, M11_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d32:	485b      	ldr	r0, [pc, #364]	; (8000ea0 <service_callback+0x1ac>)
 8000d34:	f001 ffaa 	bl	8002c8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M12_Pin, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d3e:	4858      	ldr	r0, [pc, #352]	; (8000ea0 <service_callback+0x1ac>)
 8000d40:	f001 ffa4 	bl	8002c8c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, M21_Pin, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d4a:	4855      	ldr	r0, [pc, #340]	; (8000ea0 <service_callback+0x1ac>)
 8000d4c:	f001 ff9e 	bl	8002c8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M22_Pin, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d56:	4852      	ldr	r0, [pc, #328]	; (8000ea0 <service_callback+0x1ac>)
 8000d58:	f001 ff98 	bl	8002c8c <HAL_GPIO_WritePin>

		if(_req->b == 1){
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d62:	1e51      	subs	r1, r2, #1
 8000d64:	430b      	orrs	r3, r1
 8000d66:	d109      	bne.n	8000d7c <service_callback+0x88>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 200);
 8000d68:	4b4e      	ldr	r3, [pc, #312]	; (8000ea4 <service_callback+0x1b0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	22c8      	movs	r2, #200	; 0xc8
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 300);
 8000d70:	4b4c      	ldr	r3, [pc, #304]	; (8000ea4 <service_callback+0x1b0>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d78:	639a      	str	r2, [r3, #56]	; 0x38
 8000d7a:	e084      	b.n	8000e86 <service_callback+0x192>
		}else if(_req->b == -1){
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d86:	bf08      	it	eq
 8000d88:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8000d8c:	d109      	bne.n	8000da2 <service_callback+0xae>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 300);
 8000d8e:	4b45      	ldr	r3, [pc, #276]	; (8000ea4 <service_callback+0x1b0>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d96:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 200);
 8000d98:	4b42      	ldr	r3, [pc, #264]	; (8000ea4 <service_callback+0x1b0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	22c8      	movs	r2, #200	; 0xc8
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38
 8000da0:	e071      	b.n	8000e86 <service_callback+0x192>
		}else{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 300);
 8000da2:	4b40      	ldr	r3, [pc, #256]	; (8000ea4 <service_callback+0x1b0>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000daa:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 300);
 8000dac:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <service_callback+0x1b0>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000db4:	639a      	str	r2, [r3, #56]	; 0x38
 8000db6:	e066      	b.n	8000e86 <service_callback+0x192>
		}

	}else if(_req->a == -1){
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dc2:	bf08      	it	eq
 8000dc4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8000dc8:	d145      	bne.n	8000e56 <service_callback+0x162>

		HAL_GPIO_WritePin(GPIOB, M11_Pin, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd0:	4833      	ldr	r0, [pc, #204]	; (8000ea0 <service_callback+0x1ac>)
 8000dd2:	f001 ff5b 	bl	8002c8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M12_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ddc:	4830      	ldr	r0, [pc, #192]	; (8000ea0 <service_callback+0x1ac>)
 8000dde:	f001 ff55 	bl	8002c8c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, M21_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de8:	482d      	ldr	r0, [pc, #180]	; (8000ea0 <service_callback+0x1ac>)
 8000dea:	f001 ff4f 	bl	8002c8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M22_Pin, GPIO_PIN_SET);
 8000dee:	2201      	movs	r2, #1
 8000df0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df4:	482a      	ldr	r0, [pc, #168]	; (8000ea0 <service_callback+0x1ac>)
 8000df6:	f001 ff49 	bl	8002c8c <HAL_GPIO_WritePin>

		if(_req->b == 1){
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e00:	1e51      	subs	r1, r2, #1
 8000e02:	430b      	orrs	r3, r1
 8000e04:	d109      	bne.n	8000e1a <service_callback+0x126>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 200);
 8000e06:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <service_callback+0x1b0>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	22c8      	movs	r2, #200	; 0xc8
 8000e0c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 300);
 8000e0e:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <service_callback+0x1b0>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e16:	639a      	str	r2, [r3, #56]	; 0x38
 8000e18:	e035      	b.n	8000e86 <service_callback+0x192>
		}else if(_req->b == -1){
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e24:	bf08      	it	eq
 8000e26:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8000e2a:	d109      	bne.n	8000e40 <service_callback+0x14c>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 300);
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <service_callback+0x1b0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e34:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 200);
 8000e36:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <service_callback+0x1b0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	22c8      	movs	r2, #200	; 0xc8
 8000e3c:	639a      	str	r2, [r3, #56]	; 0x38
 8000e3e:	e022      	b.n	8000e86 <service_callback+0x192>
		}else{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 300);
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <service_callback+0x1b0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e48:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 300);
 8000e4a:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <service_callback+0x1b0>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e52:	639a      	str	r2, [r3, #56]	; 0x38
 8000e54:	e017      	b.n	8000e86 <service_callback+0x192>
		}

	}else{
		HAL_GPIO_WritePin(GPIOB, M11_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e5c:	4810      	ldr	r0, [pc, #64]	; (8000ea0 <service_callback+0x1ac>)
 8000e5e:	f001 ff15 	bl	8002c8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M12_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <service_callback+0x1ac>)
 8000e6a:	f001 ff0f 	bl	8002c8c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, M21_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e74:	480a      	ldr	r0, [pc, #40]	; (8000ea0 <service_callback+0x1ac>)
 8000e76:	f001 ff09 	bl	8002c8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M22_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e80:	4807      	ldr	r0, [pc, #28]	; (8000ea0 <service_callback+0x1ac>)
 8000e82:	f001 ff03 	bl	8002c8c <HAL_GPIO_WritePin>
	}
	// レスポンスに合計値をセット
	_res->sum = 0;
 8000e86:	68b9      	ldr	r1, [r7, #8]
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	f04f 0300 	mov.w	r3, #0
 8000e90:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	080156a0 	.word	0x080156a0
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	200083dc 	.word	0x200083dc

08000ea8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000eb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <vApplicationGetIdleTaskMemory+0x30>)
 8000ebe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	20007ee0 	.word	0x20007ee0
 8000ed8:	20007f80 	.word	0x20007f80

08000edc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000edc:	b5b0      	push	{r4, r5, r7, lr}
 8000ede:	b08e      	sub	sp, #56	; 0x38
 8000ee0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512, defaultTaskBuffer, &defaultTaskControlBlock);
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_FREERTOS_Init+0x58>)
 8000ee4:	f107 041c 	add.w	r4, r7, #28
 8000ee8:	461d      	mov	r5, r3
 8000eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ef2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f005 fd35 	bl	800696c <osThreadCreate>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a0c      	ldr	r2, [pc, #48]	; (8000f38 <MX_FREERTOS_Init+0x5c>)
 8000f06:	6013      	str	r3, [r2, #0]

  /* definition and creation of micoroROSTask */
  osThreadStaticDef(micoroROSTask, StartMicroROSTask, osPriorityHigh, 0, 3000, micoroROSTaskBuffer, &micoroROSTaskControlBlock);
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_FREERTOS_Init+0x60>)
 8000f0a:	463c      	mov	r4, r7
 8000f0c:	461d      	mov	r5, r3
 8000f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  micoroROSTaskHandle = osThreadCreate(osThread(micoroROSTask), NULL);
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f005 fd24 	bl	800696c <osThreadCreate>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a06      	ldr	r2, [pc, #24]	; (8000f40 <MX_FREERTOS_Init+0x64>)
 8000f28:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

}
 8000f2a:	bf00      	nop
 8000f2c:	3738      	adds	r7, #56	; 0x38
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bdb0      	pop	{r4, r5, r7, pc}
 8000f32:	bf00      	nop
 8000f34:	080156bc 	.word	0x080156bc
 8000f38:	200046b8 	.word	0x200046b8
 8000f3c:	080156e8 	.word	0x080156e8
 8000f40:	20004f5c 	.word	0x20004f5c

08000f44 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f005 fd59 	bl	8006a04 <osDelay>
 8000f52:	e7fb      	b.n	8000f4c <StartDefaultTask+0x8>
 8000f54:	0000      	movs	r0, r0
	...

08000f58 <StartMicroROSTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMicroROSTask */
void StartMicroROSTask(void const * argument)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b0e3      	sub	sp, #396	; 0x18c
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000f62:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8000f66:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartMicroROSTask */
	// micro-ROSの初期化
	 	printf("start microROS task\r\n");
 8000f68:	4881      	ldr	r0, [pc, #516]	; (8001170 <StartMicroROSTask+0x218>)
 8000f6a:	f013 f9fd 	bl	8014368 <puts>
	 	rmw_uros_set_custom_transport(
 8000f6e:	4b81      	ldr	r3, [pc, #516]	; (8001174 <StartMicroROSTask+0x21c>)
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	4b81      	ldr	r3, [pc, #516]	; (8001178 <StartMicroROSTask+0x220>)
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	4b81      	ldr	r3, [pc, #516]	; (800117c <StartMicroROSTask+0x224>)
 8000f78:	4a81      	ldr	r2, [pc, #516]	; (8001180 <StartMicroROSTask+0x228>)
 8000f7a:	4982      	ldr	r1, [pc, #520]	; (8001184 <StartMicroROSTask+0x22c>)
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f00a f865 	bl	800b04c <rmw_uros_set_custom_transport>
	 	    cubemx_transport_open,
	 	    cubemx_transport_close,
	 	    cubemx_transport_write,
	 	    cubemx_transport_read);

	 	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000f82:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000f86:	4618      	mov	r0, r3
 8000f88:	f009 fd22 	bl	800a9d0 <rcutils_get_zero_initialized_allocator>
	 	freeRTOS_allocator.allocate = microros_allocate;
 8000f8c:	4b7e      	ldr	r3, [pc, #504]	; (8001188 <StartMicroROSTask+0x230>)
 8000f8e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	 	freeRTOS_allocator.deallocate = microros_deallocate;
 8000f92:	4b7e      	ldr	r3, [pc, #504]	; (800118c <StartMicroROSTask+0x234>)
 8000f94:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	 	freeRTOS_allocator.reallocate = microros_reallocate;
 8000f98:	4b7d      	ldr	r3, [pc, #500]	; (8001190 <StartMicroROSTask+0x238>)
 8000f9a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	 	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000f9e:	4b7d      	ldr	r3, [pc, #500]	; (8001194 <StartMicroROSTask+0x23c>)
 8000fa0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	 	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000fa4:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f009 fd1f 	bl	800a9ec <rcutils_set_default_allocator>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f083 0301 	eor.w	r3, r3, #1
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d004      	beq.n	8000fc4 <StartMicroROSTask+0x6c>
	 		printf("Error on default allocators (line %d)\r\n", __LINE__);
 8000fba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fbe:	4876      	ldr	r0, [pc, #472]	; (8001198 <StartMicroROSTask+0x240>)
 8000fc0:	f013 f96c 	bl	801429c <iprintf>
	 	}

	     // ここからサービスサーバの実装
	 	setvbuf(stdout, NULL, _IONBF, BUFSIZ);
 8000fc4:	4b75      	ldr	r3, [pc, #468]	; (800119c <StartMicroROSTask+0x244>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6898      	ldr	r0, [r3, #8]
 8000fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fce:	2202      	movs	r2, #2
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	f013 f9d1 	bl	8014378 <setvbuf>
	 	rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 8000fd6:	f008 fa39 	bl	800944c <rcl_get_zero_initialized_init_options>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	 	rcl_allocator_t allocator = rcl_get_default_allocator();
 8000fe0:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f009 fd1f 	bl	800aa28 <rcutils_get_default_allocator>
	 	rclc_support_t support;
	 	rcl_node_t node = rcl_get_zero_initialized_node();
 8000fea:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f008 fb34 	bl	800965c <rcl_get_zero_initialized_node>
	 	rcl_service_t service = rcl_get_zero_initialized_service();
 8000ff4:	f008 fcdc 	bl	80099b0 <rcl_get_zero_initialized_service>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	 	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8000ffe:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001002:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001006:	4618      	mov	r0, r3
 8001008:	f009 f93e 	bl	800a288 <rclc_executor_get_zero_initialized_executor>
	 	rcl_node_options_t node_ops = rcl_node_get_default_options();
 800100c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001010:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001014:	4618      	mov	r0, r3
 8001016:	f008 fc9b 	bl	8009950 <rcl_node_get_default_options>

	 	RCCHECK(rcl_init_options_init(&init_options, allocator));
 800101a:	f507 74a8 	add.w	r4, r7, #336	; 0x150
 800101e:	466a      	mov	r2, sp
 8001020:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001024:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001028:	e882 0003 	stmia.w	r2, {r0, r1}
 800102c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001030:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001032:	4620      	mov	r0, r4
 8001034:	f008 fa0c 	bl	8009450 <rcl_init_options_init>
 8001038:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
 800103c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001040:	2b00      	cmp	r3, #0
 8001042:	d006      	beq.n	8001052 <StartMicroROSTask+0xfa>
 8001044:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001048:	f240 110d 	movw	r1, #269	; 0x10d
 800104c:	4854      	ldr	r0, [pc, #336]	; (80011a0 <StartMicroROSTask+0x248>)
 800104e:	f013 f925 	bl	801429c <iprintf>
	     // ROS_DOMAIN_IDの設定。今回は0としてる。
	 	RCCHECK(rcl_init_options_set_domain_id(&init_options, 0));
 8001052:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f008 faf7 	bl	800964c <rcl_init_options_set_domain_id>
 800105e:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 8001062:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <StartMicroROSTask+0x120>
 800106a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800106e:	f240 110f 	movw	r1, #271	; 0x10f
 8001072:	484b      	ldr	r0, [pc, #300]	; (80011a0 <StartMicroROSTask+0x248>)
 8001074:	f013 f912 	bl	801429c <iprintf>
	 	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001078:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800107c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001080:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	4613      	mov	r3, r2
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	f009 fbec 	bl	800a868 <rclc_support_init_with_options>
	     // ノードの作成
	 	RCCHECK(rclc_node_init_with_options(&node, "simple_server", "", &support, &node_ops));
 8001090:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001094:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	4613      	mov	r3, r2
 80010a0:	4a40      	ldr	r2, [pc, #256]	; (80011a4 <StartMicroROSTask+0x24c>)
 80010a2:	4941      	ldr	r1, [pc, #260]	; (80011a8 <StartMicroROSTask+0x250>)
 80010a4:	f009 fc16 	bl	800a8d4 <rclc_node_init_with_options>
 80010a8:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 80010ac:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d006      	beq.n	80010c2 <StartMicroROSTask+0x16a>
 80010b4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80010b8:	f44f 7189 	mov.w	r1, #274	; 0x112
 80010bc:	4838      	ldr	r0, [pc, #224]	; (80011a0 <StartMicroROSTask+0x248>)
 80010be:	f013 f8ed 	bl	801429c <iprintf>
	     // サービスの作成
	 	RCCHECK(rclc_service_init_default(&service, &node, ROSIDL_GET_SRV_TYPE_SUPPORT(custom_test_msgs, srv, AddThreeInts), "add_three_ints"));
 80010c2:	f006 fec7 	bl	8007e54 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>
 80010c6:	4602      	mov	r2, r0
 80010c8:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80010cc:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 80010d0:	4b36      	ldr	r3, [pc, #216]	; (80011ac <StartMicroROSTask+0x254>)
 80010d2:	f009 fc3b 	bl	800a94c <rclc_service_init_default>
 80010d6:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170
 80010da:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d006      	beq.n	80010f0 <StartMicroROSTask+0x198>
 80010e2:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80010e6:	f44f 718a 	mov.w	r1, #276	; 0x114
 80010ea:	482d      	ldr	r0, [pc, #180]	; (80011a0 <StartMicroROSTask+0x248>)
 80010ec:	f013 f8d6 	bl	801429c <iprintf>
	     // エグゼキューターの作成
	 	RCCHECK(rclc_executor_init(&executor, &support.context, 1, &allocator));
 80010f0:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80010f4:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80010f8:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80010fc:	2201      	movs	r2, #1
 80010fe:	f009 f8cf 	bl	800a2a0 <rclc_executor_init>
 8001102:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
 8001106:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800110a:	2b00      	cmp	r3, #0
 800110c:	d006      	beq.n	800111c <StartMicroROSTask+0x1c4>
 800110e:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8001112:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001116:	4822      	ldr	r0, [pc, #136]	; (80011a0 <StartMicroROSTask+0x248>)
 8001118:	f013 f8c0 	bl	801429c <iprintf>
	     // エグゼキューターにサービスを追加
	 	RCCHECK(rclc_executor_add_service(&executor, &service, &req, &res, &service_callback));
 800111c:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8001120:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001124:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <StartMicroROSTask+0x258>)
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <StartMicroROSTask+0x25c>)
 800112a:	4a23      	ldr	r2, [pc, #140]	; (80011b8 <StartMicroROSTask+0x260>)
 800112c:	f009 f934 	bl	800a398 <rclc_executor_add_service>
 8001130:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168
 8001134:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001138:	2b00      	cmp	r3, #0
 800113a:	d006      	beq.n	800114a <StartMicroROSTask+0x1f2>
 800113c:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8001140:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001144:	4816      	ldr	r0, [pc, #88]	; (80011a0 <StartMicroROSTask+0x248>)
 8001146:	f013 f8a9 	bl	801429c <iprintf>
  /* Infinite loop */
  for(;;)
  {
	  // エグゼキューターを実行してリクエストを処理
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 800114a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800114e:	a306      	add	r3, pc, #24	; (adr r3, 8001168 <StartMicroROSTask+0x210>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	4608      	mov	r0, r1
 8001156:	f009 fb4f 	bl	800a7f8 <rclc_executor_spin_some>
		osDelay(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f005 fc52 	bl	8006a04 <osDelay>
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8001160:	e7f3      	b.n	800114a <StartMicroROSTask+0x1f2>
 8001162:	bf00      	nop
 8001164:	f3af 8000 	nop.w
 8001168:	05f5e100 	.word	0x05f5e100
 800116c:	00000000 	.word	0x00000000
 8001170:	08015704 	.word	0x08015704
 8001174:	08000c4d 	.word	0x08000c4d
 8001178:	08000bed 	.word	0x08000bed
 800117c:	08000bcd 	.word	0x08000bcd
 8001180:	08000ba1 	.word	0x08000ba1
 8001184:	20008428 	.word	0x20008428
 8001188:	08001479 	.word	0x08001479
 800118c:	080014bd 	.word	0x080014bd
 8001190:	080014f5 	.word	0x080014f5
 8001194:	08001561 	.word	0x08001561
 8001198:	0801571c 	.word	0x0801571c
 800119c:	20000254 	.word	0x20000254
 80011a0:	08015744 	.word	0x08015744
 80011a4:	08015770 	.word	0x08015770
 80011a8:	08015774 	.word	0x08015774
 80011ac:	08015784 	.word	0x08015784
 80011b0:	08000cf5 	.word	0x08000cf5
 80011b4:	200046b0 	.word	0x200046b0
 80011b8:	20004698 	.word	0x20004698

080011bc <MX_GPIO_Init>:
        * EXTI
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	; 0x30
 80011c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	4b39      	ldr	r3, [pc, #228]	; (80012b8 <MX_GPIO_Init+0xfc>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a38      	ldr	r2, [pc, #224]	; (80012b8 <MX_GPIO_Init+0xfc>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b36      	ldr	r3, [pc, #216]	; (80012b8 <MX_GPIO_Init+0xfc>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ea:	4b33      	ldr	r3, [pc, #204]	; (80012b8 <MX_GPIO_Init+0xfc>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a32      	ldr	r2, [pc, #200]	; (80012b8 <MX_GPIO_Init+0xfc>)
 80011f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b30      	ldr	r3, [pc, #192]	; (80012b8 <MX_GPIO_Init+0xfc>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001202:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <MX_GPIO_Init+0xfc>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a2c      	ldr	r2, [pc, #176]	; (80012b8 <MX_GPIO_Init+0xfc>)
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <MX_GPIO_Init+0xfc>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <MX_GPIO_Init+0xfc>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a26      	ldr	r2, [pc, #152]	; (80012b8 <MX_GPIO_Init+0xfc>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <MX_GPIO_Init+0xfc>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <MX_GPIO_Init+0xfc>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a20      	ldr	r2, [pc, #128]	; (80012b8 <MX_GPIO_Init+0xfc>)
 8001238:	f043 0308 	orr.w	r3, r3, #8
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <MX_GPIO_Init+0xfc>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800124a:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_GPIO_Init+0xfc>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a1a      	ldr	r2, [pc, #104]	; (80012b8 <MX_GPIO_Init+0xfc>)
 8001250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_GPIO_Init+0xfc>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M11_Pin|M12_Pin|LD2_Pin|M22_Pin
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8001268:	4814      	ldr	r0, [pc, #80]	; (80012bc <MX_GPIO_Init+0x100>)
 800126a:	f001 fd0f 	bl	8002c8c <HAL_GPIO_WritePin>
                          |M21_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = M11_Pin|M12_Pin|LD2_Pin|M22_Pin
 800126e:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 8001272:	61fb      	str	r3, [r7, #28]
                          |M21_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	480d      	ldr	r0, [pc, #52]	; (80012bc <MX_GPIO_Init+0x100>)
 8001288:	f001 fb54 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800128c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800129e:	230b      	movs	r3, #11
 80012a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	4619      	mov	r1, r3
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_GPIO_Init+0x104>)
 80012aa:	f001 fb43 	bl	8002934 <HAL_GPIO_Init>

}
 80012ae:	bf00      	nop
 80012b0:	3730      	adds	r7, #48	; 0x30
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020400 	.word	0x40020400
 80012c0:	40021800 	.word	0x40021800

080012c4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 80012ce:	1df9      	adds	r1, r7, #7
 80012d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012d4:	2201      	movs	r2, #1
 80012d6:	4804      	ldr	r0, [pc, #16]	; (80012e8 <__io_putchar+0x24>)
 80012d8:	f003 ff54 	bl	8005184 <HAL_UART_Transmit>
    return ch;
 80012dc:	79fb      	ldrb	r3, [r7, #7]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20008428 	.word	0x20008428

080012ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f0:	f000 fdfb 	bl	8001eea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f4:	f000 f83e 	bl	8001374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f8:	f7ff ff60 	bl	80011bc <MX_GPIO_Init>
  MX_DMA_Init();
 80012fc:	f7ff fc2a 	bl	8000b54 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001300:	f000 fcca 	bl	8001c98 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001304:	f000 fbd4 	bl	8001ab0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  printf("startProgram\n");
 8001308:	4817      	ldr	r0, [pc, #92]	; (8001368 <main+0x7c>)
 800130a:	f013 f82d 	bl	8014368 <puts>

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800130e:	2100      	movs	r1, #0
 8001310:	4816      	ldr	r0, [pc, #88]	; (800136c <main+0x80>)
 8001312:	f002 ff45 	bl	80041a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001316:	2104      	movs	r1, #4
 8001318:	4814      	ldr	r0, [pc, #80]	; (800136c <main+0x80>)
 800131a:	f002 ff41 	bl	80041a0 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <main+0x80>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2264      	movs	r2, #100	; 0x64
 8001324:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <main+0x80>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2264      	movs	r2, #100	; 0x64
 800132c:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_GPIO_WritePin(GPIOB, M11_Pin, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001334:	480e      	ldr	r0, [pc, #56]	; (8001370 <main+0x84>)
 8001336:	f001 fca9 	bl	8002c8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M12_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001340:	480b      	ldr	r0, [pc, #44]	; (8001370 <main+0x84>)
 8001342:	f001 fca3 	bl	8002c8c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, M21_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800134c:	4808      	ldr	r0, [pc, #32]	; (8001370 <main+0x84>)
 800134e:	f001 fc9d 	bl	8002c8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M22_Pin, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <main+0x84>)
 800135a:	f001 fc97 	bl	8002c8c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800135e:	f7ff fdbd 	bl	8000edc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001362:	f005 fafc 	bl	800695e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001366:	e7fe      	b.n	8001366 <main+0x7a>
 8001368:	08015794 	.word	0x08015794
 800136c:	200083dc 	.word	0x200083dc
 8001370:	40020400 	.word	0x40020400

08001374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b094      	sub	sp, #80	; 0x50
 8001378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	2234      	movs	r2, #52	; 0x34
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f013 fa16 	bl	80147b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001388:	f107 0308 	add.w	r3, r7, #8
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001398:	f001 fc92 	bl	8002cc0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800139c:	4b28      	ldr	r3, [pc, #160]	; (8001440 <SystemClock_Config+0xcc>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	4a27      	ldr	r2, [pc, #156]	; (8001440 <SystemClock_Config+0xcc>)
 80013a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a6:	6413      	str	r3, [r2, #64]	; 0x40
 80013a8:	4b25      	ldr	r3, [pc, #148]	; (8001440 <SystemClock_Config+0xcc>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b4:	4b23      	ldr	r3, [pc, #140]	; (8001444 <SystemClock_Config+0xd0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a22      	ldr	r2, [pc, #136]	; (8001444 <SystemClock_Config+0xd0>)
 80013ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	4b20      	ldr	r3, [pc, #128]	; (8001444 <SystemClock_Config+0xd0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d0:	2301      	movs	r3, #1
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013d4:	2310      	movs	r3, #16
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d8:	2302      	movs	r3, #2
 80013da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013dc:	2300      	movs	r3, #0
 80013de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013e0:	2308      	movs	r3, #8
 80013e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80013e4:	23b4      	movs	r3, #180	; 0xb4
 80013e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e8:	2302      	movs	r3, #2
 80013ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013f0:	2302      	movs	r3, #2
 80013f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f4:	f107 031c 	add.w	r3, r7, #28
 80013f8:	4618      	mov	r0, r3
 80013fa:	f001 fc71 	bl	8002ce0 <HAL_RCC_OscConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001404:	f000 f832 	bl	800146c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001408:	230f      	movs	r3, #15
 800140a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140c:	2302      	movs	r3, #2
 800140e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001414:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001418:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800141a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	2105      	movs	r1, #5
 8001426:	4618      	mov	r0, r3
 8001428:	f001 ff08 	bl	800323c <HAL_RCC_ClockConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001432:	f000 f81b 	bl	800146c <Error_Handler>
  }
}
 8001436:	bf00      	nop
 8001438:	3750      	adds	r7, #80	; 0x50
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800
 8001444:	40007000 	.word	0x40007000

08001448 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a04      	ldr	r2, [pc, #16]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800145a:	f000 fd53 	bl	8001f04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40002000 	.word	0x40002000

0800146c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001470:	b672      	cpsid	i
}
 8001472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001474:	e7fe      	b.n	8001474 <Error_Handler+0x8>
	...

08001478 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <microros_allocate+0x3c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4413      	add	r3, r2
 800148c:	461a      	mov	r2, r3
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <microros_allocate+0x3c>)
 8001490:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <microros_allocate+0x40>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	461a      	mov	r2, r3
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <microros_allocate+0x40>)
 80014a0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff f902 	bl	80006ac <pvPortMallocMicroROS>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20008380 	.word	0x20008380
 80014b8:	20008384 	.word	0x20008384

080014bc <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00c      	beq.n	80014e6 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff fa15 	bl	80008fc <getBlockSize>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <microros_deallocate+0x34>)
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <microros_deallocate+0x34>)
 80014de:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff f9ad 	bl	8000840 <vPortFreeMicroROS>
  }
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20008384 	.word	0x20008384

080014f4 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <microros_reallocate+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	4413      	add	r3, r2
 800150a:	461a      	mov	r2, r3
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <microros_reallocate+0x64>)
 800150e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <microros_reallocate+0x68>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	4413      	add	r3, r2
 800151a:	461a      	mov	r2, r3
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <microros_reallocate+0x68>)
 800151e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d104      	bne.n	8001530 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001526:	68b8      	ldr	r0, [r7, #8]
 8001528:	f7ff f8c0 	bl	80006ac <pvPortMallocMicroROS>
 800152c:	4603      	mov	r3, r0
 800152e:	e00e      	b.n	800154e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f7ff f9e3 	bl	80008fc <getBlockSize>
 8001536:	4603      	mov	r3, r0
 8001538:	4a08      	ldr	r2, [pc, #32]	; (800155c <microros_reallocate+0x68>)
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	461a      	mov	r2, r3
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <microros_reallocate+0x68>)
 8001542:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f7ff f9f6 	bl	8000938 <pvPortReallocMicroROS>
 800154c:	4603      	mov	r3, r0
  }
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20008380 	.word	0x20008380
 800155c:	20008384 	.word	0x20008384

08001560 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	fb02 f303 	mul.w	r3, r2, r3
 8001574:	4a0c      	ldr	r2, [pc, #48]	; (80015a8 <microros_zero_allocate+0x48>)
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	4413      	add	r3, r2
 800157a:	461a      	mov	r2, r3
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <microros_zero_allocate+0x48>)
 800157e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	fb02 f303 	mul.w	r3, r2, r3
 8001588:	4a08      	ldr	r2, [pc, #32]	; (80015ac <microros_zero_allocate+0x4c>)
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	4413      	add	r3, r2
 800158e:	461a      	mov	r2, r3
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <microros_zero_allocate+0x4c>)
 8001592:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f7ff f9fb 	bl	8000992 <pvPortCallocMicroROS>
 800159c:	4603      	mov	r3, r0
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20008380 	.word	0x20008380
 80015ac:	20008384 	.word	0x20008384

080015b0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80015b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80015c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015c6:	a320      	add	r3, pc, #128	; (adr r3, 8001648 <UTILS_NanosecondsToTimespec+0x98>)
 80015c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015cc:	f7fe fea0 	bl	8000310 <__aeabi_ldivmod>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80015da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015de:	a31a      	add	r3, pc, #104	; (adr r3, 8001648 <UTILS_NanosecondsToTimespec+0x98>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f7fe fe94 	bl	8000310 <__aeabi_ldivmod>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	da20      	bge.n	8001636 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a11      	ldr	r2, [pc, #68]	; (8001640 <UTILS_NanosecondsToTimespec+0x90>)
 80015fa:	fb82 1203 	smull	r1, r2, r2, r3
 80015fe:	1712      	asrs	r2, r2, #28
 8001600:	17db      	asrs	r3, r3, #31
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	3301      	adds	r3, #1
 8001606:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	6979      	ldr	r1, [r7, #20]
 8001610:	17c8      	asrs	r0, r1, #31
 8001612:	460c      	mov	r4, r1
 8001614:	4605      	mov	r5, r0
 8001616:	ebb2 0804 	subs.w	r8, r2, r4
 800161a:	eb63 0905 	sbc.w	r9, r3, r5
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	4906      	ldr	r1, [pc, #24]	; (8001644 <UTILS_NanosecondsToTimespec+0x94>)
 800162c:	fb01 f303 	mul.w	r3, r1, r3
 8001630:	441a      	add	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	609a      	str	r2, [r3, #8]
    }
}
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001640:	44b82fa1 	.word	0x44b82fa1
 8001644:	3b9aca00 	.word	0x3b9aca00
 8001648:	3b9aca00 	.word	0x3b9aca00
 800164c:	00000000 	.word	0x00000000

08001650 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001654:	b08e      	sub	sp, #56	; 0x38
 8001656:	af00      	add	r7, sp, #0
 8001658:	6278      	str	r0, [r7, #36]	; 0x24
 800165a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800165c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001660:	2300      	movs	r3, #0
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001676:	4618      	mov	r0, r3
 8001678:	f005 feac 	bl	80073d4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800167c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167e:	17da      	asrs	r2, r3, #31
 8001680:	61bb      	str	r3, [r7, #24]
 8001682:	61fa      	str	r2, [r7, #28]
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	69b9      	ldr	r1, [r7, #24]
 800168e:	000b      	movs	r3, r1
 8001690:	2200      	movs	r2, #0
 8001692:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001698:	2200      	movs	r2, #0
 800169a:	461c      	mov	r4, r3
 800169c:	4615      	mov	r5, r2
 800169e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80016a2:	1911      	adds	r1, r2, r4
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	416b      	adcs	r3, r5
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80016ae:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80016b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	f04f 0400 	mov.w	r4, #0
 80016be:	f04f 0500 	mov.w	r5, #0
 80016c2:	015d      	lsls	r5, r3, #5
 80016c4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80016c8:	0154      	lsls	r4, r2, #5
 80016ca:	4622      	mov	r2, r4
 80016cc:	462b      	mov	r3, r5
 80016ce:	ebb2 0800 	subs.w	r8, r2, r0
 80016d2:	eb63 0901 	sbc.w	r9, r3, r1
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80016e2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80016e6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80016ea:	4690      	mov	r8, r2
 80016ec:	4699      	mov	r9, r3
 80016ee:	eb18 0a00 	adds.w	sl, r8, r0
 80016f2:	eb49 0b01 	adc.w	fp, r9, r1
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001702:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001706:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800170a:	ebb2 040a 	subs.w	r4, r2, sl
 800170e:	603c      	str	r4, [r7, #0]
 8001710:	eb63 030b 	sbc.w	r3, r3, fp
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	e9d7 4500 	ldrd	r4, r5, [r7]
 800171a:	4623      	mov	r3, r4
 800171c:	181b      	adds	r3, r3, r0
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	462b      	mov	r3, r5
 8001722:	eb41 0303 	adc.w	r3, r1, r3
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	6a3a      	ldr	r2, [r7, #32]
 800172a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800172e:	f7ff ff3f 	bl	80015b0 <UTILS_NanosecondsToTimespec>

    return 0;
 8001732:	2300      	movs	r3, #0
 8001734:	4618      	mov	r0, r3
 8001736:	3738      	adds	r7, #56	; 0x38
 8001738:	46bd      	mov	sp, r7
 800173a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <HAL_MspInit+0x4c>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a10      	ldr	r2, [pc, #64]	; (800178c <HAL_MspInit+0x4c>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_MspInit+0x4c>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_MspInit+0x4c>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <HAL_MspInit+0x4c>)
 8001764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_MspInit+0x4c>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	210f      	movs	r1, #15
 800177a:	f06f 0001 	mvn.w	r0, #1
 800177e:	f000 fc99 	bl	80020b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800

08001790 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08e      	sub	sp, #56	; 0x38
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80017a0:	4b33      	ldr	r3, [pc, #204]	; (8001870 <HAL_InitTick+0xe0>)
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	4a32      	ldr	r2, [pc, #200]	; (8001870 <HAL_InitTick+0xe0>)
 80017a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017aa:	6413      	str	r3, [r2, #64]	; 0x40
 80017ac:	4b30      	ldr	r3, [pc, #192]	; (8001870 <HAL_InitTick+0xe0>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017b8:	f107 0210 	add.w	r2, r7, #16
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f001 ff60 	bl	8003688 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d103      	bne.n	80017da <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017d2:	f001 ff31 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 80017d6:	6378      	str	r0, [r7, #52]	; 0x34
 80017d8:	e004      	b.n	80017e4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017da:	f001 ff2d 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 80017de:	4603      	mov	r3, r0
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e6:	4a23      	ldr	r2, [pc, #140]	; (8001874 <HAL_InitTick+0xe4>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	0c9b      	lsrs	r3, r3, #18
 80017ee:	3b01      	subs	r3, #1
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80017f2:	4b21      	ldr	r3, [pc, #132]	; (8001878 <HAL_InitTick+0xe8>)
 80017f4:	4a21      	ldr	r2, [pc, #132]	; (800187c <HAL_InitTick+0xec>)
 80017f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <HAL_InitTick+0xe8>)
 80017fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017fe:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001800:	4a1d      	ldr	r2, [pc, #116]	; (8001878 <HAL_InitTick+0xe8>)
 8001802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001804:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <HAL_InitTick+0xe8>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <HAL_InitTick+0xe8>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001812:	4b19      	ldr	r3, [pc, #100]	; (8001878 <HAL_InitTick+0xe8>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001818:	4817      	ldr	r0, [pc, #92]	; (8001878 <HAL_InitTick+0xe8>)
 800181a:	f002 fb8f 	bl	8003f3c <HAL_TIM_Base_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001824:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001828:	2b00      	cmp	r3, #0
 800182a:	d11b      	bne.n	8001864 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 800182c:	4812      	ldr	r0, [pc, #72]	; (8001878 <HAL_InitTick+0xe8>)
 800182e:	f002 fbe7 	bl	8004000 <HAL_TIM_Base_Start_IT>
 8001832:	4603      	mov	r3, r0
 8001834:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001838:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800183c:	2b00      	cmp	r3, #0
 800183e:	d111      	bne.n	8001864 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001840:	202d      	movs	r0, #45	; 0x2d
 8001842:	f000 fc53 	bl	80020ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d808      	bhi.n	800185e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	202d      	movs	r0, #45	; 0x2d
 8001852:	f000 fc2f 	bl	80020b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <HAL_InitTick+0xf0>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	e002      	b.n	8001864 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001864:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001868:	4618      	mov	r0, r3
 800186a:	3738      	adds	r7, #56	; 0x38
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40023800 	.word	0x40023800
 8001874:	431bde83 	.word	0x431bde83
 8001878:	20008388 	.word	0x20008388
 800187c:	40002000 	.word	0x40002000
 8001880:	20000008 	.word	0x20000008

08001884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <NMI_Handler+0x4>

0800188a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <MemManage_Handler+0x4>

08001896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <BusFault_Handler+0x4>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <UsageFault_Handler+0x4>

080018a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <DMA1_Stream1_IRQHandler+0x10>)
 80018b6:	f000 fdc7 	bl	8002448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200084b0 	.word	0x200084b0

080018c4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <DMA1_Stream3_IRQHandler+0x10>)
 80018ca:	f000 fdbd 	bl	8002448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20008510 	.word	0x20008510

080018d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <USART3_IRQHandler+0x10>)
 80018de:	f003 fe27 	bl	8005530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20008428 	.word	0x20008428

080018ec <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80018f2:	f002 fd4f 	bl	8004394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20008388 	.word	0x20008388

08001900 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return 1;
 8001904:	2301      	movs	r3, #1
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <_kill>:

int _kill(int pid, int sig)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800191a:	f013 f835 	bl	8014988 <__errno>
 800191e:	4603      	mov	r3, r0
 8001920:	2216      	movs	r2, #22
 8001922:	601a      	str	r2, [r3, #0]
  return -1;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_exit>:

void _exit (int status)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001938:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ffe7 	bl	8001910 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001942:	e7fe      	b.n	8001942 <_exit+0x12>

08001944 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	e00a      	b.n	800196c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001956:	f3af 8000 	nop.w
 800195a:	4601      	mov	r1, r0
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	60ba      	str	r2, [r7, #8]
 8001962:	b2ca      	uxtb	r2, r1
 8001964:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3301      	adds	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	429a      	cmp	r2, r3
 8001972:	dbf0      	blt.n	8001956 <_read+0x12>
  }

  return len;
 8001974:	687b      	ldr	r3, [r7, #4]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b086      	sub	sp, #24
 8001982:	af00      	add	r7, sp, #0
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	e009      	b.n	80019a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	60ba      	str	r2, [r7, #8]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fc93 	bl	80012c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	3301      	adds	r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	dbf1      	blt.n	8001990 <_write+0x12>
  }
  return len;
 80019ac:	687b      	ldr	r3, [r7, #4]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <_close>:

int _close(int file)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019de:	605a      	str	r2, [r3, #4]
  return 0;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <_isatty>:

int _isatty(int file)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a28:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <_sbrk+0x5c>)
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <_sbrk+0x60>)
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <_sbrk+0x64>)
 8001a3e:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <_sbrk+0x68>)
 8001a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d207      	bcs.n	8001a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a50:	f012 ff9a 	bl	8014988 <__errno>
 8001a54:	4603      	mov	r3, r0
 8001a56:	220c      	movs	r2, #12
 8001a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a5e:	e009      	b.n	8001a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <_sbrk+0x64>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <_sbrk+0x64>)
 8001a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a72:	68fb      	ldr	r3, [r7, #12]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20080000 	.word	0x20080000
 8001a80:	00000400 	.word	0x00000400
 8001a84:	200083d8 	.word	0x200083d8
 8001a88:	20010fb0 	.word	0x20010fb0

08001a8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <SystemInit+0x20>)
 8001a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a96:	4a05      	ldr	r2, [pc, #20]	; (8001aac <SystemInit+0x20>)
 8001a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b096      	sub	sp, #88	; 0x58
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	611a      	str	r2, [r3, #16]
 8001ad2:	615a      	str	r2, [r3, #20]
 8001ad4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	222c      	movs	r2, #44	; 0x2c
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f012 fe69 	bl	80147b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ae2:	4b3f      	ldr	r3, [pc, #252]	; (8001be0 <MX_TIM1_Init+0x130>)
 8001ae4:	4a3f      	ldr	r2, [pc, #252]	; (8001be4 <MX_TIM1_Init+0x134>)
 8001ae6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001ae8:	4b3d      	ldr	r3, [pc, #244]	; (8001be0 <MX_TIM1_Init+0x130>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aee:	4b3c      	ldr	r3, [pc, #240]	; (8001be0 <MX_TIM1_Init+0x130>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8001af4:	4b3a      	ldr	r3, [pc, #232]	; (8001be0 <MX_TIM1_Init+0x130>)
 8001af6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001afa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afc:	4b38      	ldr	r3, [pc, #224]	; (8001be0 <MX_TIM1_Init+0x130>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b02:	4b37      	ldr	r3, [pc, #220]	; (8001be0 <MX_TIM1_Init+0x130>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b08:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <MX_TIM1_Init+0x130>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b0e:	4834      	ldr	r0, [pc, #208]	; (8001be0 <MX_TIM1_Init+0x130>)
 8001b10:	f002 faee 	bl	80040f0 <HAL_TIM_PWM_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001b1a:	f7ff fca7 	bl	800146c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b2e:	4619      	mov	r1, r3
 8001b30:	482b      	ldr	r0, [pc, #172]	; (8001be0 <MX_TIM1_Init+0x130>)
 8001b32:	f003 f9af 	bl	8004e94 <HAL_TIMEx_MasterConfigSynchronization>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b3c:	f7ff fc96 	bl	800146c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b40:	2360      	movs	r3, #96	; 0x60
 8001b42:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b60:	2200      	movs	r2, #0
 8001b62:	4619      	mov	r1, r3
 8001b64:	481e      	ldr	r0, [pc, #120]	; (8001be0 <MX_TIM1_Init+0x130>)
 8001b66:	f002 fd35 	bl	80045d4 <HAL_TIM_PWM_ConfigChannel>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b70:	f7ff fc7c 	bl	800146c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b78:	2204      	movs	r2, #4
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4818      	ldr	r0, [pc, #96]	; (8001be0 <MX_TIM1_Init+0x130>)
 8001b7e:	f002 fd29 	bl	80045d4 <HAL_TIM_PWM_ConfigChannel>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001b88:	f7ff fc70 	bl	800146c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4807      	ldr	r0, [pc, #28]	; (8001be0 <MX_TIM1_Init+0x130>)
 8001bc2:	f003 f9f5 	bl	8004fb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8001bcc:	f7ff fc4e 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bd0:	4803      	ldr	r0, [pc, #12]	; (8001be0 <MX_TIM1_Init+0x130>)
 8001bd2:	f000 f829 	bl	8001c28 <HAL_TIM_MspPostInit>

}
 8001bd6:	bf00      	nop
 8001bd8:	3758      	adds	r7, #88	; 0x58
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200083dc 	.word	0x200083dc
 8001be4:	40010000 	.word	0x40010000

08001be8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <HAL_TIM_PWM_MspInit+0x38>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d10b      	bne.n	8001c12 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6453      	str	r3, [r2, #68]	; 0x44
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40010000 	.word	0x40010000
 8001c24:	40023800 	.word	0x40023800

08001c28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a11      	ldr	r2, [pc, #68]	; (8001c8c <HAL_TIM_MspPostInit+0x64>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d11c      	bne.n	8001c84 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <HAL_TIM_MspPostInit+0x68>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a10      	ldr	r2, [pc, #64]	; (8001c90 <HAL_TIM_MspPostInit+0x68>)
 8001c50:	f043 0310 	orr.w	r3, r3, #16
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <HAL_TIM_MspPostInit+0x68>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001c62:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001c66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c74:	2301      	movs	r3, #1
 8001c76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4805      	ldr	r0, [pc, #20]	; (8001c94 <HAL_TIM_MspPostInit+0x6c>)
 8001c80:	f000 fe58 	bl	8002934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c84:	bf00      	nop
 8001c86:	3720      	adds	r7, #32
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40010000 	.word	0x40010000
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40021000 	.word	0x40021000

08001c98 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c9c:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <MX_USART3_UART_Init+0x58>)
 8001c9e:	4a15      	ldr	r2, [pc, #84]	; (8001cf4 <MX_USART3_UART_Init+0x5c>)
 8001ca0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ca2:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <MX_USART3_UART_Init+0x58>)
 8001ca4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ca8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001caa:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <MX_USART3_UART_Init+0x58>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <MX_USART3_UART_Init+0x58>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <MX_USART3_UART_Init+0x58>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <MX_USART3_UART_Init+0x58>)
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <MX_USART3_UART_Init+0x58>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <MX_USART3_UART_Init+0x58>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <MX_USART3_UART_Init+0x58>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <MX_USART3_UART_Init+0x58>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <MX_USART3_UART_Init+0x58>)
 8001cdc:	f003 fa04 	bl	80050e8 <HAL_UART_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ce6:	f7ff fbc1 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20008428 	.word	0x20008428
 8001cf4:	40004800 	.word	0x40004800

08001cf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b0ae      	sub	sp, #184	; 0xb8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	2290      	movs	r2, #144	; 0x90
 8001d16:	2100      	movs	r1, #0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f012 fd4b 	bl	80147b4 <memset>
  if(uartHandle->Instance==USART3)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a56      	ldr	r2, [pc, #344]	; (8001e7c <HAL_UART_MspInit+0x184>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	f040 80a4 	bne.w	8001e72 <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d2e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f001 fcd7 	bl	80036ec <HAL_RCCEx_PeriphCLKConfig>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001d44:	f7ff fb92 	bl	800146c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d48:	4b4d      	ldr	r3, [pc, #308]	; (8001e80 <HAL_UART_MspInit+0x188>)
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	4a4c      	ldr	r2, [pc, #304]	; (8001e80 <HAL_UART_MspInit+0x188>)
 8001d4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d52:	6413      	str	r3, [r2, #64]	; 0x40
 8001d54:	4b4a      	ldr	r3, [pc, #296]	; (8001e80 <HAL_UART_MspInit+0x188>)
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d60:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <HAL_UART_MspInit+0x188>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	4a46      	ldr	r2, [pc, #280]	; (8001e80 <HAL_UART_MspInit+0x188>)
 8001d66:	f043 0308 	orr.w	r3, r3, #8
 8001d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6c:	4b44      	ldr	r3, [pc, #272]	; (8001e80 <HAL_UART_MspInit+0x188>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d92:	2307      	movs	r3, #7
 8001d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4839      	ldr	r0, [pc, #228]	; (8001e84 <HAL_UART_MspInit+0x18c>)
 8001da0:	f000 fdc8 	bl	8002934 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001da4:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <HAL_UART_MspInit+0x190>)
 8001da6:	4a39      	ldr	r2, [pc, #228]	; (8001e8c <HAL_UART_MspInit+0x194>)
 8001da8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001daa:	4b37      	ldr	r3, [pc, #220]	; (8001e88 <HAL_UART_MspInit+0x190>)
 8001dac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001db0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001db2:	4b35      	ldr	r3, [pc, #212]	; (8001e88 <HAL_UART_MspInit+0x190>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db8:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <HAL_UART_MspInit+0x190>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dbe:	4b32      	ldr	r3, [pc, #200]	; (8001e88 <HAL_UART_MspInit+0x190>)
 8001dc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dc4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dc6:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <HAL_UART_MspInit+0x190>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dcc:	4b2e      	ldr	r3, [pc, #184]	; (8001e88 <HAL_UART_MspInit+0x190>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001dd2:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <HAL_UART_MspInit+0x190>)
 8001dd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dd8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001dda:	4b2b      	ldr	r3, [pc, #172]	; (8001e88 <HAL_UART_MspInit+0x190>)
 8001ddc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001de0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001de2:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <HAL_UART_MspInit+0x190>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001de8:	4827      	ldr	r0, [pc, #156]	; (8001e88 <HAL_UART_MspInit+0x190>)
 8001dea:	f000 f98d 	bl	8002108 <HAL_DMA_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8001df4:	f7ff fb3a 	bl	800146c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a23      	ldr	r2, [pc, #140]	; (8001e88 <HAL_UART_MspInit+0x190>)
 8001dfc:	675a      	str	r2, [r3, #116]	; 0x74
 8001dfe:	4a22      	ldr	r2, [pc, #136]	; (8001e88 <HAL_UART_MspInit+0x190>)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001e04:	4b22      	ldr	r3, [pc, #136]	; (8001e90 <HAL_UART_MspInit+0x198>)
 8001e06:	4a23      	ldr	r2, [pc, #140]	; (8001e94 <HAL_UART_MspInit+0x19c>)
 8001e08:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001e0a:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <HAL_UART_MspInit+0x198>)
 8001e0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e10:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e12:	4b1f      	ldr	r3, [pc, #124]	; (8001e90 <HAL_UART_MspInit+0x198>)
 8001e14:	2240      	movs	r2, #64	; 0x40
 8001e16:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e18:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <HAL_UART_MspInit+0x198>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e1e:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <HAL_UART_MspInit+0x198>)
 8001e20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e24:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e26:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <HAL_UART_MspInit+0x198>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e2c:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <HAL_UART_MspInit+0x198>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001e32:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <HAL_UART_MspInit+0x198>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e38:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <HAL_UART_MspInit+0x198>)
 8001e3a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e3e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e40:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <HAL_UART_MspInit+0x198>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001e46:	4812      	ldr	r0, [pc, #72]	; (8001e90 <HAL_UART_MspInit+0x198>)
 8001e48:	f000 f95e 	bl	8002108 <HAL_DMA_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8001e52:	f7ff fb0b 	bl	800146c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a0d      	ldr	r2, [pc, #52]	; (8001e90 <HAL_UART_MspInit+0x198>)
 8001e5a:	671a      	str	r2, [r3, #112]	; 0x70
 8001e5c:	4a0c      	ldr	r2, [pc, #48]	; (8001e90 <HAL_UART_MspInit+0x198>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2105      	movs	r1, #5
 8001e66:	2027      	movs	r0, #39	; 0x27
 8001e68:	f000 f924 	bl	80020b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e6c:	2027      	movs	r0, #39	; 0x27
 8001e6e:	f000 f93d 	bl	80020ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e72:	bf00      	nop
 8001e74:	37b8      	adds	r7, #184	; 0xb8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40004800 	.word	0x40004800
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40020c00 	.word	0x40020c00
 8001e88:	200084b0 	.word	0x200084b0
 8001e8c:	40026028 	.word	0x40026028
 8001e90:	20008510 	.word	0x20008510
 8001e94:	40026058 	.word	0x40026058

08001e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e9c:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e9e:	490e      	ldr	r1, [pc, #56]	; (8001ed8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ea0:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea4:	e002      	b.n	8001eac <LoopCopyDataInit>

08001ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eaa:	3304      	adds	r3, #4

08001eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb0:	d3f9      	bcc.n	8001ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001eb4:	4c0b      	ldr	r4, [pc, #44]	; (8001ee4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb8:	e001      	b.n	8001ebe <LoopFillZerobss>

08001eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ebc:	3204      	adds	r2, #4

08001ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec0:	d3fb      	bcc.n	8001eba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ec2:	f7ff fde3 	bl	8001a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ec6:	f012 fd65 	bl	8014994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eca:	f7ff fa0f 	bl	80012ec <main>
  bx  lr    
 8001ece:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ed0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed8:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8001edc:	080166f4 	.word	0x080166f4
  ldr r2, =_sbss
 8001ee0:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8001ee4:	20010fb0 	.word	0x20010fb0

08001ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ee8:	e7fe      	b.n	8001ee8 <ADC_IRQHandler>

08001eea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eee:	2003      	movs	r0, #3
 8001ef0:	f000 f8d5 	bl	800209e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ef4:	200f      	movs	r0, #15
 8001ef6:	f7ff fc4b 	bl	8001790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001efa:	f7ff fc21 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_IncTick+0x20>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_IncTick+0x24>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <HAL_IncTick+0x24>)
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	2000000c 	.word	0x2000000c
 8001f28:	20008570 	.word	0x20008570

08001f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <HAL_GetTick+0x14>)
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20008570 	.word	0x20008570

08001f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <__NVIC_SetPriorityGrouping+0x40>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f60:	4013      	ands	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f72:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <__NVIC_SetPriorityGrouping+0x40>)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	60d3      	str	r3, [r2, #12]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000ed00 	.word	0xe000ed00
 8001f88:	05fa0000 	.word	0x05fa0000

08001f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	f003 0307 	and.w	r3, r3, #7
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	db0b      	blt.n	8001fd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	f003 021f 	and.w	r2, r3, #31
 8001fc0:	4907      	ldr	r1, [pc, #28]	; (8001fe0 <__NVIC_EnableIRQ+0x38>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	2001      	movs	r0, #1
 8001fca:	fa00 f202 	lsl.w	r2, r0, r2
 8001fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000e100 	.word	0xe000e100

08001fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	db0a      	blt.n	800200e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	490c      	ldr	r1, [pc, #48]	; (8002030 <__NVIC_SetPriority+0x4c>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	0112      	lsls	r2, r2, #4
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	440b      	add	r3, r1
 8002008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800200c:	e00a      	b.n	8002024 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4908      	ldr	r1, [pc, #32]	; (8002034 <__NVIC_SetPriority+0x50>)
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3b04      	subs	r3, #4
 800201c:	0112      	lsls	r2, r2, #4
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	440b      	add	r3, r1
 8002022:	761a      	strb	r2, [r3, #24]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000e100 	.word	0xe000e100
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f1c3 0307 	rsb	r3, r3, #7
 8002052:	2b04      	cmp	r3, #4
 8002054:	bf28      	it	cs
 8002056:	2304      	movcs	r3, #4
 8002058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3304      	adds	r3, #4
 800205e:	2b06      	cmp	r3, #6
 8002060:	d902      	bls.n	8002068 <NVIC_EncodePriority+0x30>
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3b03      	subs	r3, #3
 8002066:	e000      	b.n	800206a <NVIC_EncodePriority+0x32>
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	401a      	ands	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002080:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	43d9      	mvns	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	4313      	orrs	r3, r2
         );
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ff4c 	bl	8001f44 <__NVIC_SetPriorityGrouping>
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c6:	f7ff ff61 	bl	8001f8c <__NVIC_GetPriorityGrouping>
 80020ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	68b9      	ldr	r1, [r7, #8]
 80020d0:	6978      	ldr	r0, [r7, #20]
 80020d2:	f7ff ffb1 	bl	8002038 <NVIC_EncodePriority>
 80020d6:	4602      	mov	r2, r0
 80020d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020dc:	4611      	mov	r1, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff ff80 	bl	8001fe4 <__NVIC_SetPriority>
}
 80020e4:	bf00      	nop
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ff54 	bl	8001fa8 <__NVIC_EnableIRQ>
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002114:	f7ff ff0a 	bl	8001f2c <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e099      	b.n	8002258 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0201 	bic.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002144:	e00f      	b.n	8002166 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002146:	f7ff fef1 	bl	8001f2c <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b05      	cmp	r3, #5
 8002152:	d908      	bls.n	8002166 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2220      	movs	r2, #32
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2203      	movs	r2, #3
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e078      	b.n	8002258 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1e8      	bne.n	8002146 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	4b38      	ldr	r3, [pc, #224]	; (8002260 <HAL_DMA_Init+0x158>)
 8002180:	4013      	ands	r3, r2
 8002182:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002192:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800219e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d107      	bne.n	80021d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	4313      	orrs	r3, r2
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f023 0307 	bic.w	r3, r3, #7
 80021e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d117      	bne.n	800222a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4313      	orrs	r3, r2
 8002202:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00e      	beq.n	800222a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 fb15 	bl	800283c <DMA_CheckFifoParam>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2240      	movs	r2, #64	; 0x40
 800221c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002226:	2301      	movs	r3, #1
 8002228:	e016      	b.n	8002258 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 facc 	bl	80027d0 <DMA_CalcBaseAndBitshift>
 8002238:	4603      	mov	r3, r0
 800223a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002240:	223f      	movs	r2, #63	; 0x3f
 8002242:	409a      	lsls	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	e010803f 	.word	0xe010803f

08002264 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_DMA_Start_IT+0x26>
 8002286:	2302      	movs	r3, #2
 8002288:	e048      	b.n	800231c <HAL_DMA_Start_IT+0xb8>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d137      	bne.n	800230e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2202      	movs	r2, #2
 80022a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 fa5e 	bl	8002774 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022bc:	223f      	movs	r2, #63	; 0x3f
 80022be:	409a      	lsls	r2, r3
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0216 	orr.w	r2, r2, #22
 80022d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022e2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d007      	beq.n	80022fc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0208 	orr.w	r2, r2, #8
 80022fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	e005      	b.n	800231a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002316:	2302      	movs	r3, #2
 8002318:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800231a:	7dfb      	ldrb	r3, [r7, #23]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002332:	f7ff fdfb 	bl	8001f2c <HAL_GetTick>
 8002336:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d008      	beq.n	8002356 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2280      	movs	r2, #128	; 0x80
 8002348:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e052      	b.n	80023fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0216 	bic.w	r2, r2, #22
 8002364:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695a      	ldr	r2, [r3, #20]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002374:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	2b00      	cmp	r3, #0
 800237c:	d103      	bne.n	8002386 <HAL_DMA_Abort+0x62>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002382:	2b00      	cmp	r3, #0
 8002384:	d007      	beq.n	8002396 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0208 	bic.w	r2, r2, #8
 8002394:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0201 	bic.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a6:	e013      	b.n	80023d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023a8:	f7ff fdc0 	bl	8001f2c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b05      	cmp	r3, #5
 80023b4:	d90c      	bls.n	80023d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2220      	movs	r2, #32
 80023ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2203      	movs	r2, #3
 80023c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e015      	b.n	80023fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1e4      	bne.n	80023a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e2:	223f      	movs	r2, #63	; 0x3f
 80023e4:	409a      	lsls	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d004      	beq.n	8002422 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2280      	movs	r2, #128	; 0x80
 800241c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e00c      	b.n	800243c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2205      	movs	r2, #5
 8002426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0201 	bic.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002454:	4b8e      	ldr	r3, [pc, #568]	; (8002690 <HAL_DMA_IRQHandler+0x248>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a8e      	ldr	r2, [pc, #568]	; (8002694 <HAL_DMA_IRQHandler+0x24c>)
 800245a:	fba2 2303 	umull	r2, r3, r2, r3
 800245e:	0a9b      	lsrs	r3, r3, #10
 8002460:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002466:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002472:	2208      	movs	r2, #8
 8002474:	409a      	lsls	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4013      	ands	r3, r2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d01a      	beq.n	80024b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d013      	beq.n	80024b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0204 	bic.w	r2, r2, #4
 800249a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a0:	2208      	movs	r2, #8
 80024a2:	409a      	lsls	r2, r3
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ac:	f043 0201 	orr.w	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b8:	2201      	movs	r2, #1
 80024ba:	409a      	lsls	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4013      	ands	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d012      	beq.n	80024ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00b      	beq.n	80024ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d6:	2201      	movs	r2, #1
 80024d8:	409a      	lsls	r2, r3
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e2:	f043 0202 	orr.w	r2, r3, #2
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ee:	2204      	movs	r2, #4
 80024f0:	409a      	lsls	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d012      	beq.n	8002520 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00b      	beq.n	8002520 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250c:	2204      	movs	r2, #4
 800250e:	409a      	lsls	r2, r3
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002518:	f043 0204 	orr.w	r2, r3, #4
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002524:	2210      	movs	r2, #16
 8002526:	409a      	lsls	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d043      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d03c      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002542:	2210      	movs	r2, #16
 8002544:	409a      	lsls	r2, r3
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d018      	beq.n	800258a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d108      	bne.n	8002578 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	2b00      	cmp	r3, #0
 800256c:	d024      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	4798      	blx	r3
 8002576:	e01f      	b.n	80025b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01b      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	4798      	blx	r3
 8002588:	e016      	b.n	80025b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d107      	bne.n	80025a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0208 	bic.w	r2, r2, #8
 80025a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025bc:	2220      	movs	r2, #32
 80025be:	409a      	lsls	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 808f 	beq.w	80026e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 8087 	beq.w	80026e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025de:	2220      	movs	r2, #32
 80025e0:	409a      	lsls	r2, r3
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b05      	cmp	r3, #5
 80025f0:	d136      	bne.n	8002660 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0216 	bic.w	r2, r2, #22
 8002600:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695a      	ldr	r2, [r3, #20]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002610:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	2b00      	cmp	r3, #0
 8002618:	d103      	bne.n	8002622 <HAL_DMA_IRQHandler+0x1da>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261e:	2b00      	cmp	r3, #0
 8002620:	d007      	beq.n	8002632 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0208 	bic.w	r2, r2, #8
 8002630:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002636:	223f      	movs	r2, #63	; 0x3f
 8002638:	409a      	lsls	r2, r3
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002652:	2b00      	cmp	r3, #0
 8002654:	d07e      	beq.n	8002754 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	4798      	blx	r3
        }
        return;
 800265e:	e079      	b.n	8002754 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d01d      	beq.n	80026aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10d      	bne.n	8002698 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002680:	2b00      	cmp	r3, #0
 8002682:	d031      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	4798      	blx	r3
 800268c:	e02c      	b.n	80026e8 <HAL_DMA_IRQHandler+0x2a0>
 800268e:	bf00      	nop
 8002690:	20000004 	.word	0x20000004
 8002694:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269c:	2b00      	cmp	r3, #0
 800269e:	d023      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	4798      	blx	r3
 80026a8:	e01e      	b.n	80026e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10f      	bne.n	80026d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0210 	bic.w	r2, r2, #16
 80026c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d032      	beq.n	8002756 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d022      	beq.n	8002742 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2205      	movs	r2, #5
 8002700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0201 	bic.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	3301      	adds	r3, #1
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	429a      	cmp	r2, r3
 800271e:	d307      	bcc.n	8002730 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f2      	bne.n	8002714 <HAL_DMA_IRQHandler+0x2cc>
 800272e:	e000      	b.n	8002732 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002730:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002746:	2b00      	cmp	r3, #0
 8002748:	d005      	beq.n	8002756 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	4798      	blx	r3
 8002752:	e000      	b.n	8002756 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002754:	bf00      	nop
    }
  }
}
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002768:	4618      	mov	r0, r3
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002790:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b40      	cmp	r3, #64	; 0x40
 80027a0:	d108      	bne.n	80027b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027b2:	e007      	b.n	80027c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	60da      	str	r2, [r3, #12]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	3b10      	subs	r3, #16
 80027e0:	4a13      	ldr	r2, [pc, #76]	; (8002830 <DMA_CalcBaseAndBitshift+0x60>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027ea:	4a12      	ldr	r2, [pc, #72]	; (8002834 <DMA_CalcBaseAndBitshift+0x64>)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4413      	add	r3, r2
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d908      	bls.n	8002810 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <DMA_CalcBaseAndBitshift+0x68>)
 8002806:	4013      	ands	r3, r2
 8002808:	1d1a      	adds	r2, r3, #4
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	659a      	str	r2, [r3, #88]	; 0x58
 800280e:	e006      	b.n	800281e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	4b08      	ldr	r3, [pc, #32]	; (8002838 <DMA_CalcBaseAndBitshift+0x68>)
 8002818:	4013      	ands	r3, r2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	aaaaaaab 	.word	0xaaaaaaab
 8002834:	080157e0 	.word	0x080157e0
 8002838:	fffffc00 	.word	0xfffffc00

0800283c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d11f      	bne.n	8002896 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b03      	cmp	r3, #3
 800285a:	d856      	bhi.n	800290a <DMA_CheckFifoParam+0xce>
 800285c:	a201      	add	r2, pc, #4	; (adr r2, 8002864 <DMA_CheckFifoParam+0x28>)
 800285e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002862:	bf00      	nop
 8002864:	08002875 	.word	0x08002875
 8002868:	08002887 	.word	0x08002887
 800286c:	08002875 	.word	0x08002875
 8002870:	0800290b 	.word	0x0800290b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d046      	beq.n	800290e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002884:	e043      	b.n	800290e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800288e:	d140      	bne.n	8002912 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002894:	e03d      	b.n	8002912 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800289e:	d121      	bne.n	80028e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d837      	bhi.n	8002916 <DMA_CheckFifoParam+0xda>
 80028a6:	a201      	add	r2, pc, #4	; (adr r2, 80028ac <DMA_CheckFifoParam+0x70>)
 80028a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ac:	080028bd 	.word	0x080028bd
 80028b0:	080028c3 	.word	0x080028c3
 80028b4:	080028bd 	.word	0x080028bd
 80028b8:	080028d5 	.word	0x080028d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
      break;
 80028c0:	e030      	b.n	8002924 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d025      	beq.n	800291a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d2:	e022      	b.n	800291a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028dc:	d11f      	bne.n	800291e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028e2:	e01c      	b.n	800291e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d903      	bls.n	80028f2 <DMA_CheckFifoParam+0xb6>
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d003      	beq.n	80028f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028f0:	e018      	b.n	8002924 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	73fb      	strb	r3, [r7, #15]
      break;
 80028f6:	e015      	b.n	8002924 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00e      	beq.n	8002922 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
      break;
 8002908:	e00b      	b.n	8002922 <DMA_CheckFifoParam+0xe6>
      break;
 800290a:	bf00      	nop
 800290c:	e00a      	b.n	8002924 <DMA_CheckFifoParam+0xe8>
      break;
 800290e:	bf00      	nop
 8002910:	e008      	b.n	8002924 <DMA_CheckFifoParam+0xe8>
      break;
 8002912:	bf00      	nop
 8002914:	e006      	b.n	8002924 <DMA_CheckFifoParam+0xe8>
      break;
 8002916:	bf00      	nop
 8002918:	e004      	b.n	8002924 <DMA_CheckFifoParam+0xe8>
      break;
 800291a:	bf00      	nop
 800291c:	e002      	b.n	8002924 <DMA_CheckFifoParam+0xe8>
      break;   
 800291e:	bf00      	nop
 8002920:	e000      	b.n	8002924 <DMA_CheckFifoParam+0xe8>
      break;
 8002922:	bf00      	nop
    }
  } 
  
  return status; 
 8002924:	7bfb      	ldrb	r3, [r7, #15]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop

08002934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002934:	b480      	push	{r7}
 8002936:	b089      	sub	sp, #36	; 0x24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800294a:	2300      	movs	r3, #0
 800294c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	e175      	b.n	8002c40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002954:	2201      	movs	r2, #1
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4013      	ands	r3, r2
 8002966:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	429a      	cmp	r2, r3
 800296e:	f040 8164 	bne.w	8002c3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d005      	beq.n	800298a <HAL_GPIO_Init+0x56>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d130      	bne.n	80029ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	2203      	movs	r2, #3
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c0:	2201      	movs	r2, #1
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 0201 	and.w	r2, r3, #1
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d017      	beq.n	8002a28 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	2203      	movs	r2, #3
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d123      	bne.n	8002a7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	08da      	lsrs	r2, r3, #3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3208      	adds	r2, #8
 8002a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	220f      	movs	r2, #15
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	08da      	lsrs	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3208      	adds	r2, #8
 8002a76:	69b9      	ldr	r1, [r7, #24]
 8002a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	2203      	movs	r2, #3
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0203 	and.w	r2, r3, #3
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80be 	beq.w	8002c3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002abe:	4b66      	ldr	r3, [pc, #408]	; (8002c58 <HAL_GPIO_Init+0x324>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	4a65      	ldr	r2, [pc, #404]	; (8002c58 <HAL_GPIO_Init+0x324>)
 8002ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aca:	4b63      	ldr	r3, [pc, #396]	; (8002c58 <HAL_GPIO_Init+0x324>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ad6:	4a61      	ldr	r2, [pc, #388]	; (8002c5c <HAL_GPIO_Init+0x328>)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	089b      	lsrs	r3, r3, #2
 8002adc:	3302      	adds	r3, #2
 8002ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	220f      	movs	r2, #15
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a58      	ldr	r2, [pc, #352]	; (8002c60 <HAL_GPIO_Init+0x32c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d037      	beq.n	8002b72 <HAL_GPIO_Init+0x23e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a57      	ldr	r2, [pc, #348]	; (8002c64 <HAL_GPIO_Init+0x330>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d031      	beq.n	8002b6e <HAL_GPIO_Init+0x23a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a56      	ldr	r2, [pc, #344]	; (8002c68 <HAL_GPIO_Init+0x334>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d02b      	beq.n	8002b6a <HAL_GPIO_Init+0x236>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a55      	ldr	r2, [pc, #340]	; (8002c6c <HAL_GPIO_Init+0x338>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d025      	beq.n	8002b66 <HAL_GPIO_Init+0x232>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a54      	ldr	r2, [pc, #336]	; (8002c70 <HAL_GPIO_Init+0x33c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d01f      	beq.n	8002b62 <HAL_GPIO_Init+0x22e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a53      	ldr	r2, [pc, #332]	; (8002c74 <HAL_GPIO_Init+0x340>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d019      	beq.n	8002b5e <HAL_GPIO_Init+0x22a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a52      	ldr	r2, [pc, #328]	; (8002c78 <HAL_GPIO_Init+0x344>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d013      	beq.n	8002b5a <HAL_GPIO_Init+0x226>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a51      	ldr	r2, [pc, #324]	; (8002c7c <HAL_GPIO_Init+0x348>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00d      	beq.n	8002b56 <HAL_GPIO_Init+0x222>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a50      	ldr	r2, [pc, #320]	; (8002c80 <HAL_GPIO_Init+0x34c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d007      	beq.n	8002b52 <HAL_GPIO_Init+0x21e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a4f      	ldr	r2, [pc, #316]	; (8002c84 <HAL_GPIO_Init+0x350>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d101      	bne.n	8002b4e <HAL_GPIO_Init+0x21a>
 8002b4a:	2309      	movs	r3, #9
 8002b4c:	e012      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b4e:	230a      	movs	r3, #10
 8002b50:	e010      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b52:	2308      	movs	r3, #8
 8002b54:	e00e      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b56:	2307      	movs	r3, #7
 8002b58:	e00c      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b5a:	2306      	movs	r3, #6
 8002b5c:	e00a      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b5e:	2305      	movs	r3, #5
 8002b60:	e008      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b62:	2304      	movs	r3, #4
 8002b64:	e006      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b66:	2303      	movs	r3, #3
 8002b68:	e004      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e002      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b72:	2300      	movs	r3, #0
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	f002 0203 	and.w	r2, r2, #3
 8002b7a:	0092      	lsls	r2, r2, #2
 8002b7c:	4093      	lsls	r3, r2
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b84:	4935      	ldr	r1, [pc, #212]	; (8002c5c <HAL_GPIO_Init+0x328>)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b92:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bb6:	4a34      	ldr	r2, [pc, #208]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bbc:	4b32      	ldr	r3, [pc, #200]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002be0:	4a29      	ldr	r2, [pc, #164]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002be6:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c0a:	4a1f      	ldr	r2, [pc, #124]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c10:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c34:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2b0f      	cmp	r3, #15
 8002c44:	f67f ae86 	bls.w	8002954 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	3724      	adds	r7, #36	; 0x24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40013800 	.word	0x40013800
 8002c60:	40020000 	.word	0x40020000
 8002c64:	40020400 	.word	0x40020400
 8002c68:	40020800 	.word	0x40020800
 8002c6c:	40020c00 	.word	0x40020c00
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40021400 	.word	0x40021400
 8002c78:	40021800 	.word	0x40021800
 8002c7c:	40021c00 	.word	0x40021c00
 8002c80:	40022000 	.word	0x40022000
 8002c84:	40022400 	.word	0x40022400
 8002c88:	40013c00 	.word	0x40013c00

08002c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	807b      	strh	r3, [r7, #2]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c9c:	787b      	ldrb	r3, [r7, #1]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ca2:	887a      	ldrh	r2, [r7, #2]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ca8:	e003      	b.n	8002cb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002caa:	887b      	ldrh	r3, [r7, #2]
 8002cac:	041a      	lsls	r2, r3, #16
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	619a      	str	r2, [r3, #24]
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cce:	6013      	str	r3, [r2, #0]
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40007000 	.word	0x40007000

08002ce0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e29b      	b.n	800322e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 8087 	beq.w	8002e12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d04:	4b96      	ldr	r3, [pc, #600]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 030c 	and.w	r3, r3, #12
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d00c      	beq.n	8002d2a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d10:	4b93      	ldr	r3, [pc, #588]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d112      	bne.n	8002d42 <HAL_RCC_OscConfig+0x62>
 8002d1c:	4b90      	ldr	r3, [pc, #576]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d28:	d10b      	bne.n	8002d42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2a:	4b8d      	ldr	r3, [pc, #564]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d06c      	beq.n	8002e10 <HAL_RCC_OscConfig+0x130>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d168      	bne.n	8002e10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e275      	b.n	800322e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4a:	d106      	bne.n	8002d5a <HAL_RCC_OscConfig+0x7a>
 8002d4c:	4b84      	ldr	r3, [pc, #528]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a83      	ldr	r2, [pc, #524]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	e02e      	b.n	8002db8 <HAL_RCC_OscConfig+0xd8>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10c      	bne.n	8002d7c <HAL_RCC_OscConfig+0x9c>
 8002d62:	4b7f      	ldr	r3, [pc, #508]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a7e      	ldr	r2, [pc, #504]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	4b7c      	ldr	r3, [pc, #496]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a7b      	ldr	r2, [pc, #492]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e01d      	b.n	8002db8 <HAL_RCC_OscConfig+0xd8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCC_OscConfig+0xc0>
 8002d86:	4b76      	ldr	r3, [pc, #472]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a75      	ldr	r2, [pc, #468]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	4b73      	ldr	r3, [pc, #460]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a72      	ldr	r2, [pc, #456]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCC_OscConfig+0xd8>
 8002da0:	4b6f      	ldr	r3, [pc, #444]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a6e      	ldr	r2, [pc, #440]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	4b6c      	ldr	r3, [pc, #432]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a6b      	ldr	r2, [pc, #428]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d013      	beq.n	8002de8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7ff f8b4 	bl	8001f2c <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7ff f8b0 	bl	8001f2c <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	; 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e229      	b.n	800322e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	4b61      	ldr	r3, [pc, #388]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0xe8>
 8002de6:	e014      	b.n	8002e12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de8:	f7ff f8a0 	bl	8001f2c <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df0:	f7ff f89c 	bl	8001f2c <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	; 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e215      	b.n	800322e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e02:	4b57      	ldr	r3, [pc, #348]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0x110>
 8002e0e:	e000      	b.n	8002e12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d069      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e1e:	4b50      	ldr	r3, [pc, #320]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2a:	4b4d      	ldr	r3, [pc, #308]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d11c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x190>
 8002e36:	4b4a      	ldr	r3, [pc, #296]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d116      	bne.n	8002e70 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e42:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <HAL_RCC_OscConfig+0x17a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d001      	beq.n	8002e5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e1e9      	b.n	800322e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5a:	4b41      	ldr	r3, [pc, #260]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	493d      	ldr	r1, [pc, #244]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6e:	e040      	b.n	8002ef2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d023      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e78:	4b39      	ldr	r3, [pc, #228]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a38      	ldr	r2, [pc, #224]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e84:	f7ff f852 	bl	8001f2c <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e8c:	f7ff f84e 	bl	8001f2c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e1c7      	b.n	800322e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9e:	4b30      	ldr	r3, [pc, #192]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eaa:	4b2d      	ldr	r3, [pc, #180]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4929      	ldr	r1, [pc, #164]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	600b      	str	r3, [r1, #0]
 8002ebe:	e018      	b.n	8002ef2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec0:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a26      	ldr	r2, [pc, #152]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002ec6:	f023 0301 	bic.w	r3, r3, #1
 8002eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7ff f82e 	bl	8001f2c <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed4:	f7ff f82a 	bl	8001f2c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e1a3      	b.n	800322e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee6:	4b1e      	ldr	r3, [pc, #120]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d038      	beq.n	8002f70 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d019      	beq.n	8002f3a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f06:	4b16      	ldr	r3, [pc, #88]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f0a:	4a15      	ldr	r2, [pc, #84]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f12:	f7ff f80b 	bl	8001f2c <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f1a:	f7ff f807 	bl	8001f2c <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e180      	b.n	800322e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_OscConfig+0x23a>
 8002f38:	e01a      	b.n	8002f70 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f3e:	4a08      	ldr	r2, [pc, #32]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f46:	f7fe fff1 	bl	8001f2c <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f4e:	f7fe ffed 	bl	8001f2c <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d903      	bls.n	8002f64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e166      	b.n	800322e <HAL_RCC_OscConfig+0x54e>
 8002f60:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f64:	4b92      	ldr	r3, [pc, #584]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8002f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1ee      	bne.n	8002f4e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80a4 	beq.w	80030c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f7e:	4b8c      	ldr	r3, [pc, #560]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10d      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f8a:	4b89      	ldr	r3, [pc, #548]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	4a88      	ldr	r2, [pc, #544]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8002f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f94:	6413      	str	r3, [r2, #64]	; 0x40
 8002f96:	4b86      	ldr	r3, [pc, #536]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fa6:	4b83      	ldr	r3, [pc, #524]	; (80031b4 <HAL_RCC_OscConfig+0x4d4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d118      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002fb2:	4b80      	ldr	r3, [pc, #512]	; (80031b4 <HAL_RCC_OscConfig+0x4d4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a7f      	ldr	r2, [pc, #508]	; (80031b4 <HAL_RCC_OscConfig+0x4d4>)
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fbe:	f7fe ffb5 	bl	8001f2c <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc6:	f7fe ffb1 	bl	8001f2c <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b64      	cmp	r3, #100	; 0x64
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e12a      	b.n	800322e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fd8:	4b76      	ldr	r3, [pc, #472]	; (80031b4 <HAL_RCC_OscConfig+0x4d4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d106      	bne.n	8002ffa <HAL_RCC_OscConfig+0x31a>
 8002fec:	4b70      	ldr	r3, [pc, #448]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff0:	4a6f      	ldr	r2, [pc, #444]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff8:	e02d      	b.n	8003056 <HAL_RCC_OscConfig+0x376>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0x33c>
 8003002:	4b6b      	ldr	r3, [pc, #428]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	4a6a      	ldr	r2, [pc, #424]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8003008:	f023 0301 	bic.w	r3, r3, #1
 800300c:	6713      	str	r3, [r2, #112]	; 0x70
 800300e:	4b68      	ldr	r3, [pc, #416]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	4a67      	ldr	r2, [pc, #412]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8003014:	f023 0304 	bic.w	r3, r3, #4
 8003018:	6713      	str	r3, [r2, #112]	; 0x70
 800301a:	e01c      	b.n	8003056 <HAL_RCC_OscConfig+0x376>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b05      	cmp	r3, #5
 8003022:	d10c      	bne.n	800303e <HAL_RCC_OscConfig+0x35e>
 8003024:	4b62      	ldr	r3, [pc, #392]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8003026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003028:	4a61      	ldr	r2, [pc, #388]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 800302a:	f043 0304 	orr.w	r3, r3, #4
 800302e:	6713      	str	r3, [r2, #112]	; 0x70
 8003030:	4b5f      	ldr	r3, [pc, #380]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003034:	4a5e      	ldr	r2, [pc, #376]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6713      	str	r3, [r2, #112]	; 0x70
 800303c:	e00b      	b.n	8003056 <HAL_RCC_OscConfig+0x376>
 800303e:	4b5c      	ldr	r3, [pc, #368]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8003040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003042:	4a5b      	ldr	r2, [pc, #364]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8003044:	f023 0301 	bic.w	r3, r3, #1
 8003048:	6713      	str	r3, [r2, #112]	; 0x70
 800304a:	4b59      	ldr	r3, [pc, #356]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304e:	4a58      	ldr	r2, [pc, #352]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8003050:	f023 0304 	bic.w	r3, r3, #4
 8003054:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d015      	beq.n	800308a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305e:	f7fe ff65 	bl	8001f2c <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003064:	e00a      	b.n	800307c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003066:	f7fe ff61 	bl	8001f2c <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	f241 3288 	movw	r2, #5000	; 0x1388
 8003074:	4293      	cmp	r3, r2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e0d8      	b.n	800322e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307c:	4b4c      	ldr	r3, [pc, #304]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0ee      	beq.n	8003066 <HAL_RCC_OscConfig+0x386>
 8003088:	e014      	b.n	80030b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308a:	f7fe ff4f 	bl	8001f2c <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003090:	e00a      	b.n	80030a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7fe ff4b 	bl	8001f2c <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e0c2      	b.n	800322e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a8:	4b41      	ldr	r3, [pc, #260]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 80030aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1ee      	bne.n	8003092 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d105      	bne.n	80030c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ba:	4b3d      	ldr	r3, [pc, #244]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	4a3c      	ldr	r2, [pc, #240]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 80030c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 80ae 	beq.w	800322c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d0:	4b37      	ldr	r3, [pc, #220]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 030c 	and.w	r3, r3, #12
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d06d      	beq.n	80031b8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d14b      	bne.n	800317c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e4:	4b32      	ldr	r3, [pc, #200]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a31      	ldr	r2, [pc, #196]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 80030ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fe ff1c 	bl	8001f2c <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f8:	f7fe ff18 	bl	8001f2c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e091      	b.n	800322e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310a:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69da      	ldr	r2, [r3, #28]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	019b      	lsls	r3, r3, #6
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	085b      	lsrs	r3, r3, #1
 800312e:	3b01      	subs	r3, #1
 8003130:	041b      	lsls	r3, r3, #16
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	061b      	lsls	r3, r3, #24
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	071b      	lsls	r3, r3, #28
 8003142:	491b      	ldr	r1, [pc, #108]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8003144:	4313      	orrs	r3, r2
 8003146:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003148:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a18      	ldr	r2, [pc, #96]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 800314e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003154:	f7fe feea 	bl	8001f2c <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800315c:	f7fe fee6 	bl	8001f2c <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e05f      	b.n	800322e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316e:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0x47c>
 800317a:	e057      	b.n	800322c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a0b      	ldr	r2, [pc, #44]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8003182:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fe fed0 	bl	8001f2c <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003190:	f7fe fecc 	bl	8001f2c <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e045      	b.n	800322e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a2:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x4b0>
 80031ae:	e03d      	b.n	800322c <HAL_RCC_OscConfig+0x54c>
 80031b0:	40023800 	.word	0x40023800
 80031b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80031b8:	4b1f      	ldr	r3, [pc, #124]	; (8003238 <HAL_RCC_OscConfig+0x558>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d030      	beq.n	8003228 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d129      	bne.n	8003228 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031de:	429a      	cmp	r2, r3
 80031e0:	d122      	bne.n	8003228 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031e8:	4013      	ands	r3, r2
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d119      	bne.n	8003228 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fe:	085b      	lsrs	r3, r3, #1
 8003200:	3b01      	subs	r3, #1
 8003202:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d10f      	bne.n	8003228 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003212:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003214:	429a      	cmp	r2, r3
 8003216:	d107      	bne.n	8003228 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003224:	429a      	cmp	r2, r3
 8003226:	d001      	beq.n	800322c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e000      	b.n	800322e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800

0800323c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0d0      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003254:	4b6a      	ldr	r3, [pc, #424]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d910      	bls.n	8003284 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003262:	4b67      	ldr	r3, [pc, #412]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 020f 	bic.w	r2, r3, #15
 800326a:	4965      	ldr	r1, [pc, #404]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	4313      	orrs	r3, r2
 8003270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003272:	4b63      	ldr	r3, [pc, #396]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d001      	beq.n	8003284 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0b8      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d020      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800329c:	4b59      	ldr	r3, [pc, #356]	; (8003404 <HAL_RCC_ClockConfig+0x1c8>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	4a58      	ldr	r2, [pc, #352]	; (8003404 <HAL_RCC_ClockConfig+0x1c8>)
 80032a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032b4:	4b53      	ldr	r3, [pc, #332]	; (8003404 <HAL_RCC_ClockConfig+0x1c8>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	4a52      	ldr	r2, [pc, #328]	; (8003404 <HAL_RCC_ClockConfig+0x1c8>)
 80032ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c0:	4b50      	ldr	r3, [pc, #320]	; (8003404 <HAL_RCC_ClockConfig+0x1c8>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	494d      	ldr	r1, [pc, #308]	; (8003404 <HAL_RCC_ClockConfig+0x1c8>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d040      	beq.n	8003360 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d107      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e6:	4b47      	ldr	r3, [pc, #284]	; (8003404 <HAL_RCC_ClockConfig+0x1c8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d115      	bne.n	800331e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e07f      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d107      	bne.n	800330e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fe:	4b41      	ldr	r3, [pc, #260]	; (8003404 <HAL_RCC_ClockConfig+0x1c8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d109      	bne.n	800331e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e073      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330e:	4b3d      	ldr	r3, [pc, #244]	; (8003404 <HAL_RCC_ClockConfig+0x1c8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e06b      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800331e:	4b39      	ldr	r3, [pc, #228]	; (8003404 <HAL_RCC_ClockConfig+0x1c8>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f023 0203 	bic.w	r2, r3, #3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	4936      	ldr	r1, [pc, #216]	; (8003404 <HAL_RCC_ClockConfig+0x1c8>)
 800332c:	4313      	orrs	r3, r2
 800332e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003330:	f7fe fdfc 	bl	8001f2c <HAL_GetTick>
 8003334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003336:	e00a      	b.n	800334e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003338:	f7fe fdf8 	bl	8001f2c <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f241 3288 	movw	r2, #5000	; 0x1388
 8003346:	4293      	cmp	r3, r2
 8003348:	d901      	bls.n	800334e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e053      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334e:	4b2d      	ldr	r3, [pc, #180]	; (8003404 <HAL_RCC_ClockConfig+0x1c8>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 020c 	and.w	r2, r3, #12
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	429a      	cmp	r2, r3
 800335e:	d1eb      	bne.n	8003338 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003360:	4b27      	ldr	r3, [pc, #156]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d210      	bcs.n	8003390 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336e:	4b24      	ldr	r3, [pc, #144]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f023 020f 	bic.w	r2, r3, #15
 8003376:	4922      	ldr	r1, [pc, #136]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	4313      	orrs	r3, r2
 800337c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800337e:	4b20      	ldr	r3, [pc, #128]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d001      	beq.n	8003390 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e032      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800339c:	4b19      	ldr	r3, [pc, #100]	; (8003404 <HAL_RCC_ClockConfig+0x1c8>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4916      	ldr	r1, [pc, #88]	; (8003404 <HAL_RCC_ClockConfig+0x1c8>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d009      	beq.n	80033ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033ba:	4b12      	ldr	r3, [pc, #72]	; (8003404 <HAL_RCC_ClockConfig+0x1c8>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	490e      	ldr	r1, [pc, #56]	; (8003404 <HAL_RCC_ClockConfig+0x1c8>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033ce:	f000 f821 	bl	8003414 <HAL_RCC_GetSysClockFreq>
 80033d2:	4602      	mov	r2, r0
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <HAL_RCC_ClockConfig+0x1c8>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	490a      	ldr	r1, [pc, #40]	; (8003408 <HAL_RCC_ClockConfig+0x1cc>)
 80033e0:	5ccb      	ldrb	r3, [r1, r3]
 80033e2:	fa22 f303 	lsr.w	r3, r2, r3
 80033e6:	4a09      	ldr	r2, [pc, #36]	; (800340c <HAL_RCC_ClockConfig+0x1d0>)
 80033e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033ea:	4b09      	ldr	r3, [pc, #36]	; (8003410 <HAL_RCC_ClockConfig+0x1d4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fe f9ce 	bl	8001790 <HAL_InitTick>

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40023c00 	.word	0x40023c00
 8003404:	40023800 	.word	0x40023800
 8003408:	080157c8 	.word	0x080157c8
 800340c:	20000004 	.word	0x20000004
 8003410:	20000008 	.word	0x20000008

08003414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003418:	b094      	sub	sp, #80	; 0x50
 800341a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	647b      	str	r3, [r7, #68]	; 0x44
 8003420:	2300      	movs	r3, #0
 8003422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003424:	2300      	movs	r3, #0
 8003426:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003428:	2300      	movs	r3, #0
 800342a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800342c:	4b79      	ldr	r3, [pc, #484]	; (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 030c 	and.w	r3, r3, #12
 8003434:	2b08      	cmp	r3, #8
 8003436:	d00d      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0x40>
 8003438:	2b08      	cmp	r3, #8
 800343a:	f200 80e1 	bhi.w	8003600 <HAL_RCC_GetSysClockFreq+0x1ec>
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0x34>
 8003442:	2b04      	cmp	r3, #4
 8003444:	d003      	beq.n	800344e <HAL_RCC_GetSysClockFreq+0x3a>
 8003446:	e0db      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003448:	4b73      	ldr	r3, [pc, #460]	; (8003618 <HAL_RCC_GetSysClockFreq+0x204>)
 800344a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800344c:	e0db      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800344e:	4b73      	ldr	r3, [pc, #460]	; (800361c <HAL_RCC_GetSysClockFreq+0x208>)
 8003450:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003452:	e0d8      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003454:	4b6f      	ldr	r3, [pc, #444]	; (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800345c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800345e:	4b6d      	ldr	r3, [pc, #436]	; (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d063      	beq.n	8003532 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800346a:	4b6a      	ldr	r3, [pc, #424]	; (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	099b      	lsrs	r3, r3, #6
 8003470:	2200      	movs	r2, #0
 8003472:	63bb      	str	r3, [r7, #56]	; 0x38
 8003474:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800347c:	633b      	str	r3, [r7, #48]	; 0x30
 800347e:	2300      	movs	r3, #0
 8003480:	637b      	str	r3, [r7, #52]	; 0x34
 8003482:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003486:	4622      	mov	r2, r4
 8003488:	462b      	mov	r3, r5
 800348a:	f04f 0000 	mov.w	r0, #0
 800348e:	f04f 0100 	mov.w	r1, #0
 8003492:	0159      	lsls	r1, r3, #5
 8003494:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003498:	0150      	lsls	r0, r2, #5
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4621      	mov	r1, r4
 80034a0:	1a51      	subs	r1, r2, r1
 80034a2:	6139      	str	r1, [r7, #16]
 80034a4:	4629      	mov	r1, r5
 80034a6:	eb63 0301 	sbc.w	r3, r3, r1
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034b8:	4659      	mov	r1, fp
 80034ba:	018b      	lsls	r3, r1, #6
 80034bc:	4651      	mov	r1, sl
 80034be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034c2:	4651      	mov	r1, sl
 80034c4:	018a      	lsls	r2, r1, #6
 80034c6:	4651      	mov	r1, sl
 80034c8:	ebb2 0801 	subs.w	r8, r2, r1
 80034cc:	4659      	mov	r1, fp
 80034ce:	eb63 0901 	sbc.w	r9, r3, r1
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034e6:	4690      	mov	r8, r2
 80034e8:	4699      	mov	r9, r3
 80034ea:	4623      	mov	r3, r4
 80034ec:	eb18 0303 	adds.w	r3, r8, r3
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	462b      	mov	r3, r5
 80034f4:	eb49 0303 	adc.w	r3, r9, r3
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003506:	4629      	mov	r1, r5
 8003508:	024b      	lsls	r3, r1, #9
 800350a:	4621      	mov	r1, r4
 800350c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003510:	4621      	mov	r1, r4
 8003512:	024a      	lsls	r2, r1, #9
 8003514:	4610      	mov	r0, r2
 8003516:	4619      	mov	r1, r3
 8003518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351a:	2200      	movs	r2, #0
 800351c:	62bb      	str	r3, [r7, #40]	; 0x28
 800351e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003520:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003524:	f7fc ff44 	bl	80003b0 <__aeabi_uldivmod>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4613      	mov	r3, r2
 800352e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003530:	e058      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003532:	4b38      	ldr	r3, [pc, #224]	; (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	099b      	lsrs	r3, r3, #6
 8003538:	2200      	movs	r2, #0
 800353a:	4618      	mov	r0, r3
 800353c:	4611      	mov	r1, r2
 800353e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003542:	623b      	str	r3, [r7, #32]
 8003544:	2300      	movs	r3, #0
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
 8003548:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800354c:	4642      	mov	r2, r8
 800354e:	464b      	mov	r3, r9
 8003550:	f04f 0000 	mov.w	r0, #0
 8003554:	f04f 0100 	mov.w	r1, #0
 8003558:	0159      	lsls	r1, r3, #5
 800355a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800355e:	0150      	lsls	r0, r2, #5
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	4641      	mov	r1, r8
 8003566:	ebb2 0a01 	subs.w	sl, r2, r1
 800356a:	4649      	mov	r1, r9
 800356c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800357c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003580:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003584:	ebb2 040a 	subs.w	r4, r2, sl
 8003588:	eb63 050b 	sbc.w	r5, r3, fp
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	00eb      	lsls	r3, r5, #3
 8003596:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800359a:	00e2      	lsls	r2, r4, #3
 800359c:	4614      	mov	r4, r2
 800359e:	461d      	mov	r5, r3
 80035a0:	4643      	mov	r3, r8
 80035a2:	18e3      	adds	r3, r4, r3
 80035a4:	603b      	str	r3, [r7, #0]
 80035a6:	464b      	mov	r3, r9
 80035a8:	eb45 0303 	adc.w	r3, r5, r3
 80035ac:	607b      	str	r3, [r7, #4]
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ba:	4629      	mov	r1, r5
 80035bc:	028b      	lsls	r3, r1, #10
 80035be:	4621      	mov	r1, r4
 80035c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035c4:	4621      	mov	r1, r4
 80035c6:	028a      	lsls	r2, r1, #10
 80035c8:	4610      	mov	r0, r2
 80035ca:	4619      	mov	r1, r3
 80035cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ce:	2200      	movs	r2, #0
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	61fa      	str	r2, [r7, #28]
 80035d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035d8:	f7fc feea 	bl	80003b0 <__aeabi_uldivmod>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4613      	mov	r3, r2
 80035e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	0c1b      	lsrs	r3, r3, #16
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	3301      	adds	r3, #1
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80035f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035fe:	e002      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_RCC_GetSysClockFreq+0x204>)
 8003602:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003608:	4618      	mov	r0, r3
 800360a:	3750      	adds	r7, #80	; 0x50
 800360c:	46bd      	mov	sp, r7
 800360e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800
 8003618:	00f42400 	.word	0x00f42400
 800361c:	007a1200 	.word	0x007a1200

08003620 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003624:	4b03      	ldr	r3, [pc, #12]	; (8003634 <HAL_RCC_GetHCLKFreq+0x14>)
 8003626:	681b      	ldr	r3, [r3, #0]
}
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	20000004 	.word	0x20000004

08003638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800363c:	f7ff fff0 	bl	8003620 <HAL_RCC_GetHCLKFreq>
 8003640:	4602      	mov	r2, r0
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	0a9b      	lsrs	r3, r3, #10
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	4903      	ldr	r1, [pc, #12]	; (800365c <HAL_RCC_GetPCLK1Freq+0x24>)
 800364e:	5ccb      	ldrb	r3, [r1, r3]
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40023800 	.word	0x40023800
 800365c:	080157d8 	.word	0x080157d8

08003660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003664:	f7ff ffdc 	bl	8003620 <HAL_RCC_GetHCLKFreq>
 8003668:	4602      	mov	r2, r0
 800366a:	4b05      	ldr	r3, [pc, #20]	; (8003680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	0b5b      	lsrs	r3, r3, #13
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	4903      	ldr	r1, [pc, #12]	; (8003684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003676:	5ccb      	ldrb	r3, [r1, r3]
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800367c:	4618      	mov	r0, r3
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40023800 	.word	0x40023800
 8003684:	080157d8 	.word	0x080157d8

08003688 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	220f      	movs	r2, #15
 8003696:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003698:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <HAL_RCC_GetClockConfig+0x5c>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 0203 	and.w	r2, r3, #3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036a4:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <HAL_RCC_GetClockConfig+0x5c>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <HAL_RCC_GetClockConfig+0x5c>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80036bc:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <HAL_RCC_GetClockConfig+0x5c>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	08db      	lsrs	r3, r3, #3
 80036c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <HAL_RCC_GetClockConfig+0x60>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 020f 	and.w	r2, r3, #15
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	601a      	str	r2, [r3, #0]
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40023800 	.word	0x40023800
 80036e8:	40023c00 	.word	0x40023c00

080036ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d012      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003714:	4b69      	ldr	r3, [pc, #420]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	4a68      	ldr	r2, [pc, #416]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800371e:	6093      	str	r3, [r2, #8]
 8003720:	4b66      	ldr	r3, [pc, #408]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003728:	4964      	ldr	r1, [pc, #400]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003736:	2301      	movs	r3, #1
 8003738:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d017      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003746:	4b5d      	ldr	r3, [pc, #372]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800374c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003754:	4959      	ldr	r1, [pc, #356]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003760:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003764:	d101      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003766:	2301      	movs	r3, #1
 8003768:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003772:	2301      	movs	r3, #1
 8003774:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d017      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003782:	4b4e      	ldr	r3, [pc, #312]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003788:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	494a      	ldr	r1, [pc, #296]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a0:	d101      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80037a2:	2301      	movs	r3, #1
 80037a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80037ae:	2301      	movs	r3, #1
 80037b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80037be:	2301      	movs	r3, #1
 80037c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 808b 	beq.w	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037d0:	4b3a      	ldr	r3, [pc, #232]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	4a39      	ldr	r2, [pc, #228]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037da:	6413      	str	r3, [r2, #64]	; 0x40
 80037dc:	4b37      	ldr	r3, [pc, #220]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e4:	60bb      	str	r3, [r7, #8]
 80037e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037e8:	4b35      	ldr	r3, [pc, #212]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a34      	ldr	r2, [pc, #208]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f4:	f7fe fb9a 	bl	8001f2c <HAL_GetTick>
 80037f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fc:	f7fe fb96 	bl	8001f2c <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b64      	cmp	r3, #100	; 0x64
 8003808:	d901      	bls.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e38f      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800380e:	4b2c      	ldr	r3, [pc, #176]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800381a:	4b28      	ldr	r3, [pc, #160]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003822:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d035      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	429a      	cmp	r2, r3
 8003836:	d02e      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003838:	4b20      	ldr	r3, [pc, #128]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003840:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003842:	4b1e      	ldr	r3, [pc, #120]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003846:	4a1d      	ldr	r2, [pc, #116]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800384c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800384e:	4b1b      	ldr	r3, [pc, #108]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003852:	4a1a      	ldr	r2, [pc, #104]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003858:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800385a:	4a18      	ldr	r2, [pc, #96]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003860:	4b16      	ldr	r3, [pc, #88]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b01      	cmp	r3, #1
 800386a:	d114      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386c:	f7fe fb5e 	bl	8001f2c <HAL_GetTick>
 8003870:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003872:	e00a      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003874:	f7fe fb5a 	bl	8001f2c <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e351      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388a:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0ee      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038a2:	d111      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038b0:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038b2:	400b      	ands	r3, r1
 80038b4:	4901      	ldr	r1, [pc, #4]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	608b      	str	r3, [r1, #8]
 80038ba:	e00b      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80038bc:	40023800 	.word	0x40023800
 80038c0:	40007000 	.word	0x40007000
 80038c4:	0ffffcff 	.word	0x0ffffcff
 80038c8:	4bac      	ldr	r3, [pc, #688]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4aab      	ldr	r2, [pc, #684]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038d2:	6093      	str	r3, [r2, #8]
 80038d4:	4ba9      	ldr	r3, [pc, #676]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e0:	49a6      	ldr	r1, [pc, #664]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d010      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038f2:	4ba2      	ldr	r3, [pc, #648]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f8:	4aa0      	ldr	r2, [pc, #640]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003902:	4b9e      	ldr	r3, [pc, #632]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003904:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	499b      	ldr	r1, [pc, #620]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003920:	4b96      	ldr	r3, [pc, #600]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003926:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800392e:	4993      	ldr	r1, [pc, #588]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003942:	4b8e      	ldr	r3, [pc, #568]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003948:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003950:	498a      	ldr	r1, [pc, #552]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003964:	4b85      	ldr	r3, [pc, #532]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003972:	4982      	ldr	r1, [pc, #520]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003986:	4b7d      	ldr	r3, [pc, #500]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003994:	4979      	ldr	r1, [pc, #484]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039a8:	4b74      	ldr	r3, [pc, #464]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ae:	f023 0203 	bic.w	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	4971      	ldr	r1, [pc, #452]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039ca:	4b6c      	ldr	r3, [pc, #432]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d0:	f023 020c 	bic.w	r2, r3, #12
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d8:	4968      	ldr	r1, [pc, #416]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039ec:	4b63      	ldr	r3, [pc, #396]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fa:	4960      	ldr	r1, [pc, #384]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a0e:	4b5b      	ldr	r3, [pc, #364]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a14:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1c:	4957      	ldr	r1, [pc, #348]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a30:	4b52      	ldr	r3, [pc, #328]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3e:	494f      	ldr	r1, [pc, #316]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a52:	4b4a      	ldr	r3, [pc, #296]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a60:	4946      	ldr	r1, [pc, #280]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a74:	4b41      	ldr	r3, [pc, #260]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a82:	493e      	ldr	r1, [pc, #248]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a96:	4b39      	ldr	r3, [pc, #228]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa4:	4935      	ldr	r1, [pc, #212]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ab8:	4b30      	ldr	r3, [pc, #192]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ac6:	492d      	ldr	r1, [pc, #180]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d011      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ada:	4b28      	ldr	r3, [pc, #160]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ae8:	4924      	ldr	r1, [pc, #144]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003af4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003af8:	d101      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003afa:	2301      	movs	r3, #1
 8003afc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b1a:	4b18      	ldr	r3, [pc, #96]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b20:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b28:	4914      	ldr	r1, [pc, #80]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00b      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b3c:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b42:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b4c:	490b      	ldr	r1, [pc, #44]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00f      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003b60:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b66:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b70:	4902      	ldr	r1, [pc, #8]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b78:	e002      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003b7a:	bf00      	nop
 8003b7c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00b      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b8c:	4b8a      	ldr	r3, [pc, #552]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b92:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9c:	4986      	ldr	r1, [pc, #536]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00b      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003bb0:	4b81      	ldr	r3, [pc, #516]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bc0:	497d      	ldr	r1, [pc, #500]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d006      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 80d6 	beq.w	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003bdc:	4b76      	ldr	r3, [pc, #472]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a75      	ldr	r2, [pc, #468]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003be2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be8:	f7fe f9a0 	bl	8001f2c <HAL_GetTick>
 8003bec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bf0:	f7fe f99c 	bl	8001f2c <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	; 0x64
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e195      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c02:	4b6d      	ldr	r3, [pc, #436]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d021      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d11d      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c22:	4b65      	ldr	r3, [pc, #404]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c28:	0c1b      	lsrs	r3, r3, #16
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c30:	4b61      	ldr	r3, [pc, #388]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c36:	0e1b      	lsrs	r3, r3, #24
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	019a      	lsls	r2, r3, #6
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	041b      	lsls	r3, r3, #16
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	061b      	lsls	r3, r3, #24
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	071b      	lsls	r3, r3, #28
 8003c56:	4958      	ldr	r1, [pc, #352]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d004      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c72:	d00a      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d02e      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c88:	d129      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c8a:	4b4b      	ldr	r3, [pc, #300]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c90:	0c1b      	lsrs	r3, r3, #16
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c98:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c9e:	0f1b      	lsrs	r3, r3, #28
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	019a      	lsls	r2, r3, #6
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	041b      	lsls	r3, r3, #16
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	061b      	lsls	r3, r3, #24
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	071b      	lsls	r3, r3, #28
 8003cbe:	493e      	ldr	r1, [pc, #248]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cc6:	4b3c      	ldr	r3, [pc, #240]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ccc:	f023 021f 	bic.w	r2, r3, #31
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	4938      	ldr	r1, [pc, #224]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d01d      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cea:	4b33      	ldr	r3, [pc, #204]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf0:	0e1b      	lsrs	r3, r3, #24
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cf8:	4b2f      	ldr	r3, [pc, #188]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cfe:	0f1b      	lsrs	r3, r3, #28
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	019a      	lsls	r2, r3, #6
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	041b      	lsls	r3, r3, #16
 8003d12:	431a      	orrs	r2, r3
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	061b      	lsls	r3, r3, #24
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	071b      	lsls	r3, r3, #28
 8003d1e:	4926      	ldr	r1, [pc, #152]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d011      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	019a      	lsls	r2, r3, #6
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	041b      	lsls	r3, r3, #16
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	061b      	lsls	r3, r3, #24
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	071b      	lsls	r3, r3, #28
 8003d4e:	491a      	ldr	r1, [pc, #104]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d56:	4b18      	ldr	r3, [pc, #96]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a17      	ldr	r2, [pc, #92]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d62:	f7fe f8e3 	bl	8001f2c <HAL_GetTick>
 8003d66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d68:	e008      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d6a:	f7fe f8df 	bl	8001f2c <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b64      	cmp	r3, #100	; 0x64
 8003d76:	d901      	bls.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e0d8      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d7c:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	f040 80ce 	bne.w	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d90:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a08      	ldr	r2, [pc, #32]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d9c:	f7fe f8c6 	bl	8001f2c <HAL_GetTick>
 8003da0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003da2:	e00b      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003da4:	f7fe f8c2 	bl	8001f2c <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b64      	cmp	r3, #100	; 0x64
 8003db0:	d904      	bls.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e0bb      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003dbc:	4b5e      	ldr	r3, [pc, #376]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc8:	d0ec      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d009      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d02e      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d12a      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003df2:	4b51      	ldr	r3, [pc, #324]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df8:	0c1b      	lsrs	r3, r3, #16
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e00:	4b4d      	ldr	r3, [pc, #308]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e06:	0f1b      	lsrs	r3, r3, #28
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	019a      	lsls	r2, r3, #6
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	041b      	lsls	r3, r3, #16
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	061b      	lsls	r3, r3, #24
 8003e20:	431a      	orrs	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	071b      	lsls	r3, r3, #28
 8003e26:	4944      	ldr	r1, [pc, #272]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e2e:	4b42      	ldr	r3, [pc, #264]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e34:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	493d      	ldr	r1, [pc, #244]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d022      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e5c:	d11d      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e5e:	4b36      	ldr	r3, [pc, #216]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e64:	0e1b      	lsrs	r3, r3, #24
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e6c:	4b32      	ldr	r3, [pc, #200]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	0f1b      	lsrs	r3, r3, #28
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	019a      	lsls	r2, r3, #6
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	041b      	lsls	r3, r3, #16
 8003e86:	431a      	orrs	r2, r3
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	061b      	lsls	r3, r3, #24
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	071b      	lsls	r3, r3, #28
 8003e92:	4929      	ldr	r1, [pc, #164]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d028      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ea6:	4b24      	ldr	r3, [pc, #144]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eac:	0e1b      	lsrs	r3, r3, #24
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003eb4:	4b20      	ldr	r3, [pc, #128]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eba:	0c1b      	lsrs	r3, r3, #16
 8003ebc:	f003 0303 	and.w	r3, r3, #3
 8003ec0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	019a      	lsls	r2, r3, #6
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	041b      	lsls	r3, r3, #16
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	061b      	lsls	r3, r3, #24
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	071b      	lsls	r3, r3, #28
 8003eda:	4917      	ldr	r1, [pc, #92]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ee2:	4b15      	ldr	r3, [pc, #84]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ee8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	4911      	ldr	r1, [pc, #68]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a0e      	ldr	r2, [pc, #56]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f04:	f7fe f812 	bl	8001f2c <HAL_GetTick>
 8003f08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f0c:	f7fe f80e 	bl	8001f2c <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b64      	cmp	r3, #100	; 0x64
 8003f18:	d901      	bls.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e007      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f1e:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f2a:	d1ef      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3720      	adds	r7, #32
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40023800 	.word	0x40023800

08003f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e049      	b.n	8003fe2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f841 	bl	8003fea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3304      	adds	r3, #4
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	f000 fc66 	bl	800484c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
	...

08004000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b01      	cmp	r3, #1
 8004012:	d001      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e054      	b.n	80040c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a26      	ldr	r2, [pc, #152]	; (80040d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d022      	beq.n	8004080 <HAL_TIM_Base_Start_IT+0x80>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004042:	d01d      	beq.n	8004080 <HAL_TIM_Base_Start_IT+0x80>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a22      	ldr	r2, [pc, #136]	; (80040d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d018      	beq.n	8004080 <HAL_TIM_Base_Start_IT+0x80>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a21      	ldr	r2, [pc, #132]	; (80040d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d013      	beq.n	8004080 <HAL_TIM_Base_Start_IT+0x80>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a1f      	ldr	r2, [pc, #124]	; (80040dc <HAL_TIM_Base_Start_IT+0xdc>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00e      	beq.n	8004080 <HAL_TIM_Base_Start_IT+0x80>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a1e      	ldr	r2, [pc, #120]	; (80040e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d009      	beq.n	8004080 <HAL_TIM_Base_Start_IT+0x80>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1c      	ldr	r2, [pc, #112]	; (80040e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d004      	beq.n	8004080 <HAL_TIM_Base_Start_IT+0x80>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1b      	ldr	r2, [pc, #108]	; (80040e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d115      	bne.n	80040ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	4b19      	ldr	r3, [pc, #100]	; (80040ec <HAL_TIM_Base_Start_IT+0xec>)
 8004088:	4013      	ands	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b06      	cmp	r3, #6
 8004090:	d015      	beq.n	80040be <HAL_TIM_Base_Start_IT+0xbe>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004098:	d011      	beq.n	80040be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040aa:	e008      	b.n	80040be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0201 	orr.w	r2, r2, #1
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	e000      	b.n	80040c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40010000 	.word	0x40010000
 80040d4:	40000400 	.word	0x40000400
 80040d8:	40000800 	.word	0x40000800
 80040dc:	40000c00 	.word	0x40000c00
 80040e0:	40010400 	.word	0x40010400
 80040e4:	40014000 	.word	0x40014000
 80040e8:	40001800 	.word	0x40001800
 80040ec:	00010007 	.word	0x00010007

080040f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e049      	b.n	8004196 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fd fd66 	bl	8001be8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3304      	adds	r3, #4
 800412c:	4619      	mov	r1, r3
 800412e:	4610      	mov	r0, r2
 8004130:	f000 fb8c 	bl	800484c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
	...

080041a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d109      	bne.n	80041c4 <HAL_TIM_PWM_Start+0x24>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	bf14      	ite	ne
 80041bc:	2301      	movne	r3, #1
 80041be:	2300      	moveq	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	e03c      	b.n	800423e <HAL_TIM_PWM_Start+0x9e>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d109      	bne.n	80041de <HAL_TIM_PWM_Start+0x3e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	bf14      	ite	ne
 80041d6:	2301      	movne	r3, #1
 80041d8:	2300      	moveq	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	e02f      	b.n	800423e <HAL_TIM_PWM_Start+0x9e>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d109      	bne.n	80041f8 <HAL_TIM_PWM_Start+0x58>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	bf14      	ite	ne
 80041f0:	2301      	movne	r3, #1
 80041f2:	2300      	moveq	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	e022      	b.n	800423e <HAL_TIM_PWM_Start+0x9e>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b0c      	cmp	r3, #12
 80041fc:	d109      	bne.n	8004212 <HAL_TIM_PWM_Start+0x72>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b01      	cmp	r3, #1
 8004208:	bf14      	ite	ne
 800420a:	2301      	movne	r3, #1
 800420c:	2300      	moveq	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	e015      	b.n	800423e <HAL_TIM_PWM_Start+0x9e>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b10      	cmp	r3, #16
 8004216:	d109      	bne.n	800422c <HAL_TIM_PWM_Start+0x8c>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	bf14      	ite	ne
 8004224:	2301      	movne	r3, #1
 8004226:	2300      	moveq	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	e008      	b.n	800423e <HAL_TIM_PWM_Start+0x9e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b01      	cmp	r3, #1
 8004236:	bf14      	ite	ne
 8004238:	2301      	movne	r3, #1
 800423a:	2300      	moveq	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e092      	b.n	800436c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d104      	bne.n	8004256 <HAL_TIM_PWM_Start+0xb6>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004254:	e023      	b.n	800429e <HAL_TIM_PWM_Start+0xfe>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b04      	cmp	r3, #4
 800425a:	d104      	bne.n	8004266 <HAL_TIM_PWM_Start+0xc6>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004264:	e01b      	b.n	800429e <HAL_TIM_PWM_Start+0xfe>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b08      	cmp	r3, #8
 800426a:	d104      	bne.n	8004276 <HAL_TIM_PWM_Start+0xd6>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004274:	e013      	b.n	800429e <HAL_TIM_PWM_Start+0xfe>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b0c      	cmp	r3, #12
 800427a:	d104      	bne.n	8004286 <HAL_TIM_PWM_Start+0xe6>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004284:	e00b      	b.n	800429e <HAL_TIM_PWM_Start+0xfe>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b10      	cmp	r3, #16
 800428a:	d104      	bne.n	8004296 <HAL_TIM_PWM_Start+0xf6>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004294:	e003      	b.n	800429e <HAL_TIM_PWM_Start+0xfe>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2202      	movs	r2, #2
 800429a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2201      	movs	r2, #1
 80042a4:	6839      	ldr	r1, [r7, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fdce 	bl	8004e48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a30      	ldr	r2, [pc, #192]	; (8004374 <HAL_TIM_PWM_Start+0x1d4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d004      	beq.n	80042c0 <HAL_TIM_PWM_Start+0x120>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a2f      	ldr	r2, [pc, #188]	; (8004378 <HAL_TIM_PWM_Start+0x1d8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d101      	bne.n	80042c4 <HAL_TIM_PWM_Start+0x124>
 80042c0:	2301      	movs	r3, #1
 80042c2:	e000      	b.n	80042c6 <HAL_TIM_PWM_Start+0x126>
 80042c4:	2300      	movs	r3, #0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d007      	beq.n	80042da <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a25      	ldr	r2, [pc, #148]	; (8004374 <HAL_TIM_PWM_Start+0x1d4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d022      	beq.n	800432a <HAL_TIM_PWM_Start+0x18a>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ec:	d01d      	beq.n	800432a <HAL_TIM_PWM_Start+0x18a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a22      	ldr	r2, [pc, #136]	; (800437c <HAL_TIM_PWM_Start+0x1dc>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d018      	beq.n	800432a <HAL_TIM_PWM_Start+0x18a>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a20      	ldr	r2, [pc, #128]	; (8004380 <HAL_TIM_PWM_Start+0x1e0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d013      	beq.n	800432a <HAL_TIM_PWM_Start+0x18a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1f      	ldr	r2, [pc, #124]	; (8004384 <HAL_TIM_PWM_Start+0x1e4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00e      	beq.n	800432a <HAL_TIM_PWM_Start+0x18a>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a19      	ldr	r2, [pc, #100]	; (8004378 <HAL_TIM_PWM_Start+0x1d8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d009      	beq.n	800432a <HAL_TIM_PWM_Start+0x18a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a1b      	ldr	r2, [pc, #108]	; (8004388 <HAL_TIM_PWM_Start+0x1e8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d004      	beq.n	800432a <HAL_TIM_PWM_Start+0x18a>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a19      	ldr	r2, [pc, #100]	; (800438c <HAL_TIM_PWM_Start+0x1ec>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d115      	bne.n	8004356 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	4b17      	ldr	r3, [pc, #92]	; (8004390 <HAL_TIM_PWM_Start+0x1f0>)
 8004332:	4013      	ands	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b06      	cmp	r3, #6
 800433a:	d015      	beq.n	8004368 <HAL_TIM_PWM_Start+0x1c8>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004342:	d011      	beq.n	8004368 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0201 	orr.w	r2, r2, #1
 8004352:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004354:	e008      	b.n	8004368 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 0201 	orr.w	r2, r2, #1
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	e000      	b.n	800436a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004368:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40010000 	.word	0x40010000
 8004378:	40010400 	.word	0x40010400
 800437c:	40000400 	.word	0x40000400
 8004380:	40000800 	.word	0x40000800
 8004384:	40000c00 	.word	0x40000c00
 8004388:	40014000 	.word	0x40014000
 800438c:	40001800 	.word	0x40001800
 8004390:	00010007 	.word	0x00010007

08004394 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d122      	bne.n	80043f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d11b      	bne.n	80043f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0202 	mvn.w	r2, #2
 80043c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fa1a 	bl	8004810 <HAL_TIM_IC_CaptureCallback>
 80043dc:	e005      	b.n	80043ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fa0c 	bl	80047fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fa1d 	bl	8004824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d122      	bne.n	8004444 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b04      	cmp	r3, #4
 800440a:	d11b      	bne.n	8004444 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0204 	mvn.w	r2, #4
 8004414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2202      	movs	r2, #2
 800441a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f9f0 	bl	8004810 <HAL_TIM_IC_CaptureCallback>
 8004430:	e005      	b.n	800443e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f9e2 	bl	80047fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f9f3 	bl	8004824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b08      	cmp	r3, #8
 8004450:	d122      	bne.n	8004498 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f003 0308 	and.w	r3, r3, #8
 800445c:	2b08      	cmp	r3, #8
 800445e:	d11b      	bne.n	8004498 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0208 	mvn.w	r2, #8
 8004468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2204      	movs	r2, #4
 800446e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f9c6 	bl	8004810 <HAL_TIM_IC_CaptureCallback>
 8004484:	e005      	b.n	8004492 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f9b8 	bl	80047fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f9c9 	bl	8004824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f003 0310 	and.w	r3, r3, #16
 80044a2:	2b10      	cmp	r3, #16
 80044a4:	d122      	bne.n	80044ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b10      	cmp	r3, #16
 80044b2:	d11b      	bne.n	80044ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0210 	mvn.w	r2, #16
 80044bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2208      	movs	r2, #8
 80044c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f99c 	bl	8004810 <HAL_TIM_IC_CaptureCallback>
 80044d8:	e005      	b.n	80044e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f98e 	bl	80047fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f99f 	bl	8004824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d10e      	bne.n	8004518 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b01      	cmp	r3, #1
 8004506:	d107      	bne.n	8004518 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f06f 0201 	mvn.w	r2, #1
 8004510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fc ff98 	bl	8001448 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004522:	2b80      	cmp	r3, #128	; 0x80
 8004524:	d10e      	bne.n	8004544 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004530:	2b80      	cmp	r3, #128	; 0x80
 8004532:	d107      	bne.n	8004544 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800453c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fdbe 	bl	80050c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004552:	d10e      	bne.n	8004572 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455e:	2b80      	cmp	r3, #128	; 0x80
 8004560:	d107      	bne.n	8004572 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800456a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 fdb1 	bl	80050d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457c:	2b40      	cmp	r3, #64	; 0x40
 800457e:	d10e      	bne.n	800459e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458a:	2b40      	cmp	r3, #64	; 0x40
 800458c:	d107      	bne.n	800459e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f94d 	bl	8004838 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	d10e      	bne.n	80045ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f003 0320 	and.w	r3, r3, #32
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	d107      	bne.n	80045ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f06f 0220 	mvn.w	r2, #32
 80045c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fd71 	bl	80050ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
	...

080045d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d101      	bne.n	80045f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045ee:	2302      	movs	r3, #2
 80045f0:	e0ff      	b.n	80047f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b14      	cmp	r3, #20
 80045fe:	f200 80f0 	bhi.w	80047e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004602:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004608:	0800465d 	.word	0x0800465d
 800460c:	080047e3 	.word	0x080047e3
 8004610:	080047e3 	.word	0x080047e3
 8004614:	080047e3 	.word	0x080047e3
 8004618:	0800469d 	.word	0x0800469d
 800461c:	080047e3 	.word	0x080047e3
 8004620:	080047e3 	.word	0x080047e3
 8004624:	080047e3 	.word	0x080047e3
 8004628:	080046df 	.word	0x080046df
 800462c:	080047e3 	.word	0x080047e3
 8004630:	080047e3 	.word	0x080047e3
 8004634:	080047e3 	.word	0x080047e3
 8004638:	0800471f 	.word	0x0800471f
 800463c:	080047e3 	.word	0x080047e3
 8004640:	080047e3 	.word	0x080047e3
 8004644:	080047e3 	.word	0x080047e3
 8004648:	08004761 	.word	0x08004761
 800464c:	080047e3 	.word	0x080047e3
 8004650:	080047e3 	.word	0x080047e3
 8004654:	080047e3 	.word	0x080047e3
 8004658:	080047a1 	.word	0x080047a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	4618      	mov	r0, r3
 8004664:	f000 f992 	bl	800498c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0208 	orr.w	r2, r2, #8
 8004676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699a      	ldr	r2, [r3, #24]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0204 	bic.w	r2, r2, #4
 8004686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6999      	ldr	r1, [r3, #24]
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	619a      	str	r2, [r3, #24]
      break;
 800469a:	e0a5      	b.n	80047e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 f9e4 	bl	8004a70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6999      	ldr	r1, [r3, #24]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	021a      	lsls	r2, r3, #8
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	619a      	str	r2, [r3, #24]
      break;
 80046dc:	e084      	b.n	80047e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fa3b 	bl	8004b60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69da      	ldr	r2, [r3, #28]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f042 0208 	orr.w	r2, r2, #8
 80046f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69da      	ldr	r2, [r3, #28]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0204 	bic.w	r2, r2, #4
 8004708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69d9      	ldr	r1, [r3, #28]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	61da      	str	r2, [r3, #28]
      break;
 800471c:	e064      	b.n	80047e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	4618      	mov	r0, r3
 8004726:	f000 fa91 	bl	8004c4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69da      	ldr	r2, [r3, #28]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69d9      	ldr	r1, [r3, #28]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	021a      	lsls	r2, r3, #8
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	61da      	str	r2, [r3, #28]
      break;
 800475e:	e043      	b.n	80047e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68b9      	ldr	r1, [r7, #8]
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fac8 	bl	8004cfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0208 	orr.w	r2, r2, #8
 800477a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0204 	bic.w	r2, r2, #4
 800478a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	691a      	ldr	r2, [r3, #16]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800479e:	e023      	b.n	80047e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68b9      	ldr	r1, [r7, #8]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fafa 	bl	8004da0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	021a      	lsls	r2, r3, #8
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80047e0:	e002      	b.n	80047e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	75fb      	strb	r3, [r7, #23]
      break;
 80047e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop

080047fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a40      	ldr	r2, [pc, #256]	; (8004960 <TIM_Base_SetConfig+0x114>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d013      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486a:	d00f      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a3d      	ldr	r2, [pc, #244]	; (8004964 <TIM_Base_SetConfig+0x118>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00b      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a3c      	ldr	r2, [pc, #240]	; (8004968 <TIM_Base_SetConfig+0x11c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a3b      	ldr	r2, [pc, #236]	; (800496c <TIM_Base_SetConfig+0x120>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a3a      	ldr	r2, [pc, #232]	; (8004970 <TIM_Base_SetConfig+0x124>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d108      	bne.n	800489e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a2f      	ldr	r2, [pc, #188]	; (8004960 <TIM_Base_SetConfig+0x114>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d02b      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ac:	d027      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a2c      	ldr	r2, [pc, #176]	; (8004964 <TIM_Base_SetConfig+0x118>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d023      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a2b      	ldr	r2, [pc, #172]	; (8004968 <TIM_Base_SetConfig+0x11c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d01f      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a2a      	ldr	r2, [pc, #168]	; (800496c <TIM_Base_SetConfig+0x120>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d01b      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a29      	ldr	r2, [pc, #164]	; (8004970 <TIM_Base_SetConfig+0x124>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d017      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a28      	ldr	r2, [pc, #160]	; (8004974 <TIM_Base_SetConfig+0x128>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d013      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a27      	ldr	r2, [pc, #156]	; (8004978 <TIM_Base_SetConfig+0x12c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00f      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a26      	ldr	r2, [pc, #152]	; (800497c <TIM_Base_SetConfig+0x130>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00b      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a25      	ldr	r2, [pc, #148]	; (8004980 <TIM_Base_SetConfig+0x134>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d007      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a24      	ldr	r2, [pc, #144]	; (8004984 <TIM_Base_SetConfig+0x138>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d003      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a23      	ldr	r2, [pc, #140]	; (8004988 <TIM_Base_SetConfig+0x13c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d108      	bne.n	8004910 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a0a      	ldr	r2, [pc, #40]	; (8004960 <TIM_Base_SetConfig+0x114>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d003      	beq.n	8004944 <TIM_Base_SetConfig+0xf8>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a0c      	ldr	r2, [pc, #48]	; (8004970 <TIM_Base_SetConfig+0x124>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d103      	bne.n	800494c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	615a      	str	r2, [r3, #20]
}
 8004952:	bf00      	nop
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40010000 	.word	0x40010000
 8004964:	40000400 	.word	0x40000400
 8004968:	40000800 	.word	0x40000800
 800496c:	40000c00 	.word	0x40000c00
 8004970:	40010400 	.word	0x40010400
 8004974:	40014000 	.word	0x40014000
 8004978:	40014400 	.word	0x40014400
 800497c:	40014800 	.word	0x40014800
 8004980:	40001800 	.word	0x40001800
 8004984:	40001c00 	.word	0x40001c00
 8004988:	40002000 	.word	0x40002000

0800498c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f023 0201 	bic.w	r2, r3, #1
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4b2b      	ldr	r3, [pc, #172]	; (8004a64 <TIM_OC1_SetConfig+0xd8>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0303 	bic.w	r3, r3, #3
 80049c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f023 0302 	bic.w	r3, r3, #2
 80049d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a21      	ldr	r2, [pc, #132]	; (8004a68 <TIM_OC1_SetConfig+0xdc>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d003      	beq.n	80049f0 <TIM_OC1_SetConfig+0x64>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a20      	ldr	r2, [pc, #128]	; (8004a6c <TIM_OC1_SetConfig+0xe0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d10c      	bne.n	8004a0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f023 0308 	bic.w	r3, r3, #8
 80049f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f023 0304 	bic.w	r3, r3, #4
 8004a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a16      	ldr	r2, [pc, #88]	; (8004a68 <TIM_OC1_SetConfig+0xdc>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d003      	beq.n	8004a1a <TIM_OC1_SetConfig+0x8e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a15      	ldr	r2, [pc, #84]	; (8004a6c <TIM_OC1_SetConfig+0xe0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d111      	bne.n	8004a3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	621a      	str	r2, [r3, #32]
}
 8004a58:	bf00      	nop
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	fffeff8f 	.word	0xfffeff8f
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40010400 	.word	0x40010400

08004a70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	f023 0210 	bic.w	r2, r3, #16
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4b2e      	ldr	r3, [pc, #184]	; (8004b54 <TIM_OC2_SetConfig+0xe4>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	021b      	lsls	r3, r3, #8
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f023 0320 	bic.w	r3, r3, #32
 8004aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a23      	ldr	r2, [pc, #140]	; (8004b58 <TIM_OC2_SetConfig+0xe8>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d003      	beq.n	8004ad8 <TIM_OC2_SetConfig+0x68>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a22      	ldr	r2, [pc, #136]	; (8004b5c <TIM_OC2_SetConfig+0xec>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d10d      	bne.n	8004af4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a18      	ldr	r2, [pc, #96]	; (8004b58 <TIM_OC2_SetConfig+0xe8>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d003      	beq.n	8004b04 <TIM_OC2_SetConfig+0x94>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a17      	ldr	r2, [pc, #92]	; (8004b5c <TIM_OC2_SetConfig+0xec>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d113      	bne.n	8004b2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	621a      	str	r2, [r3, #32]
}
 8004b46:	bf00      	nop
 8004b48:	371c      	adds	r7, #28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	feff8fff 	.word	0xfeff8fff
 8004b58:	40010000 	.word	0x40010000
 8004b5c:	40010400 	.word	0x40010400

08004b60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4b2d      	ldr	r3, [pc, #180]	; (8004c40 <TIM_OC3_SetConfig+0xe0>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0303 	bic.w	r3, r3, #3
 8004b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	021b      	lsls	r3, r3, #8
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a22      	ldr	r2, [pc, #136]	; (8004c44 <TIM_OC3_SetConfig+0xe4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d003      	beq.n	8004bc6 <TIM_OC3_SetConfig+0x66>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a21      	ldr	r2, [pc, #132]	; (8004c48 <TIM_OC3_SetConfig+0xe8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d10d      	bne.n	8004be2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	021b      	lsls	r3, r3, #8
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a17      	ldr	r2, [pc, #92]	; (8004c44 <TIM_OC3_SetConfig+0xe4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d003      	beq.n	8004bf2 <TIM_OC3_SetConfig+0x92>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a16      	ldr	r2, [pc, #88]	; (8004c48 <TIM_OC3_SetConfig+0xe8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d113      	bne.n	8004c1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	621a      	str	r2, [r3, #32]
}
 8004c34:	bf00      	nop
 8004c36:	371c      	adds	r7, #28
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	fffeff8f 	.word	0xfffeff8f
 8004c44:	40010000 	.word	0x40010000
 8004c48:	40010400 	.word	0x40010400

08004c4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4b1e      	ldr	r3, [pc, #120]	; (8004cf0 <TIM_OC4_SetConfig+0xa4>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	021b      	lsls	r3, r3, #8
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	031b      	lsls	r3, r3, #12
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a13      	ldr	r2, [pc, #76]	; (8004cf4 <TIM_OC4_SetConfig+0xa8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d003      	beq.n	8004cb4 <TIM_OC4_SetConfig+0x68>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a12      	ldr	r2, [pc, #72]	; (8004cf8 <TIM_OC4_SetConfig+0xac>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d109      	bne.n	8004cc8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	019b      	lsls	r3, r3, #6
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	621a      	str	r2, [r3, #32]
}
 8004ce2:	bf00      	nop
 8004ce4:	371c      	adds	r7, #28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	feff8fff 	.word	0xfeff8fff
 8004cf4:	40010000 	.word	0x40010000
 8004cf8:	40010400 	.word	0x40010400

08004cfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4b1b      	ldr	r3, [pc, #108]	; (8004d94 <TIM_OC5_SetConfig+0x98>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	041b      	lsls	r3, r3, #16
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a12      	ldr	r2, [pc, #72]	; (8004d98 <TIM_OC5_SetConfig+0x9c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d003      	beq.n	8004d5a <TIM_OC5_SetConfig+0x5e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a11      	ldr	r2, [pc, #68]	; (8004d9c <TIM_OC5_SetConfig+0xa0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d109      	bne.n	8004d6e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	021b      	lsls	r3, r3, #8
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	621a      	str	r2, [r3, #32]
}
 8004d88:	bf00      	nop
 8004d8a:	371c      	adds	r7, #28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	fffeff8f 	.word	0xfffeff8f
 8004d98:	40010000 	.word	0x40010000
 8004d9c:	40010400 	.word	0x40010400

08004da0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	4b1c      	ldr	r3, [pc, #112]	; (8004e3c <TIM_OC6_SetConfig+0x9c>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	021b      	lsls	r3, r3, #8
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	051b      	lsls	r3, r3, #20
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a13      	ldr	r2, [pc, #76]	; (8004e40 <TIM_OC6_SetConfig+0xa0>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <TIM_OC6_SetConfig+0x60>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a12      	ldr	r2, [pc, #72]	; (8004e44 <TIM_OC6_SetConfig+0xa4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d109      	bne.n	8004e14 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	029b      	lsls	r3, r3, #10
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	621a      	str	r2, [r3, #32]
}
 8004e2e:	bf00      	nop
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	feff8fff 	.word	0xfeff8fff
 8004e40:	40010000 	.word	0x40010000
 8004e44:	40010400 	.word	0x40010400

08004e48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f003 031f 	and.w	r3, r3, #31
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6a1a      	ldr	r2, [r3, #32]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	401a      	ands	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a1a      	ldr	r2, [r3, #32]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f003 031f 	and.w	r3, r3, #31
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e80:	431a      	orrs	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	621a      	str	r2, [r3, #32]
}
 8004e86:	bf00      	nop
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e06d      	b.n	8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a30      	ldr	r2, [pc, #192]	; (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d004      	beq.n	8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a2f      	ldr	r2, [pc, #188]	; (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d108      	bne.n	8004ef2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ee6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a20      	ldr	r2, [pc, #128]	; (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d022      	beq.n	8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1e:	d01d      	beq.n	8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a1d      	ldr	r2, [pc, #116]	; (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d018      	beq.n	8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a1c      	ldr	r2, [pc, #112]	; (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d013      	beq.n	8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a1a      	ldr	r2, [pc, #104]	; (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00e      	beq.n	8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a15      	ldr	r2, [pc, #84]	; (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d009      	beq.n	8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a16      	ldr	r2, [pc, #88]	; (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d004      	beq.n	8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a15      	ldr	r2, [pc, #84]	; (8004fac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d10c      	bne.n	8004f76 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	40010000 	.word	0x40010000
 8004f98:	40010400 	.word	0x40010400
 8004f9c:	40000400 	.word	0x40000400
 8004fa0:	40000800 	.word	0x40000800
 8004fa4:	40000c00 	.word	0x40000c00
 8004fa8:	40014000 	.word	0x40014000
 8004fac:	40001800 	.word	0x40001800

08004fb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d101      	bne.n	8004fcc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e065      	b.n	8005098 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4313      	orrs	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	4313      	orrs	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	041b      	lsls	r3, r3, #16
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a16      	ldr	r2, [pc, #88]	; (80050a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d004      	beq.n	800505a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a14      	ldr	r2, [pc, #80]	; (80050a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d115      	bne.n	8005086 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	051b      	lsls	r3, r3, #20
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	4313      	orrs	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	40010000 	.word	0x40010000
 80050a8:	40010400 	.word	0x40010400

080050ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e040      	b.n	800517c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7fc fdf4 	bl	8001cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2224      	movs	r2, #36	; 0x24
 8005114:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0201 	bic.w	r2, r2, #1
 8005124:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fd32 	bl	8005b90 <UART_SetConfig>
 800512c:	4603      	mov	r3, r0
 800512e:	2b01      	cmp	r3, #1
 8005130:	d101      	bne.n	8005136 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e022      	b.n	800517c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 ff8a 	bl	8006058 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005152:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689a      	ldr	r2, [r3, #8]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005162:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f042 0201 	orr.w	r2, r2, #1
 8005172:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f001 f811 	bl	800619c <UART_CheckIdleState>
 800517a:	4603      	mov	r3, r0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08a      	sub	sp, #40	; 0x28
 8005188:	af02      	add	r7, sp, #8
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	4613      	mov	r3, r2
 8005192:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005198:	2b20      	cmp	r3, #32
 800519a:	d171      	bne.n	8005280 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <HAL_UART_Transmit+0x24>
 80051a2:	88fb      	ldrh	r3, [r7, #6]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e06a      	b.n	8005282 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2221      	movs	r2, #33	; 0x21
 80051b8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051ba:	f7fc feb7 	bl	8001f2c <HAL_GetTick>
 80051be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	88fa      	ldrh	r2, [r7, #6]
 80051c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	88fa      	ldrh	r2, [r7, #6]
 80051cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d8:	d108      	bne.n	80051ec <HAL_UART_Transmit+0x68>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d104      	bne.n	80051ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	61bb      	str	r3, [r7, #24]
 80051ea:	e003      	b.n	80051f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051f0:	2300      	movs	r3, #0
 80051f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051f4:	e02c      	b.n	8005250 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2200      	movs	r2, #0
 80051fe:	2180      	movs	r1, #128	; 0x80
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f001 f818 	bl	8006236 <UART_WaitOnFlagUntilTimeout>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e038      	b.n	8005282 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10b      	bne.n	800522e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005224:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	3302      	adds	r3, #2
 800522a:	61bb      	str	r3, [r7, #24]
 800522c:	e007      	b.n	800523e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	781a      	ldrb	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	3301      	adds	r3, #1
 800523c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005244:	b29b      	uxth	r3, r3
 8005246:	3b01      	subs	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1cc      	bne.n	80051f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2200      	movs	r2, #0
 8005264:	2140      	movs	r1, #64	; 0x40
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 ffe5 	bl	8006236 <UART_WaitOnFlagUntilTimeout>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e005      	b.n	8005282 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800527c:	2300      	movs	r3, #0
 800527e:	e000      	b.n	8005282 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005280:	2302      	movs	r3, #2
  }
}
 8005282:	4618      	mov	r0, r3
 8005284:	3720      	adds	r7, #32
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08a      	sub	sp, #40	; 0x28
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	4613      	mov	r3, r2
 8005298:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800529e:	2b20      	cmp	r3, #32
 80052a0:	d165      	bne.n	800536e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <HAL_UART_Transmit_DMA+0x22>
 80052a8:	88fb      	ldrh	r3, [r7, #6]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e05e      	b.n	8005370 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	88fa      	ldrh	r2, [r7, #6]
 80052bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	88fa      	ldrh	r2, [r7, #6]
 80052c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2221      	movs	r2, #33	; 0x21
 80052d4:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d027      	beq.n	800532e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e2:	4a25      	ldr	r2, [pc, #148]	; (8005378 <HAL_UART_Transmit_DMA+0xec>)
 80052e4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ea:	4a24      	ldr	r2, [pc, #144]	; (800537c <HAL_UART_Transmit_DMA+0xf0>)
 80052ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f2:	4a23      	ldr	r2, [pc, #140]	; (8005380 <HAL_UART_Transmit_DMA+0xf4>)
 80052f4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fa:	2200      	movs	r2, #0
 80052fc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005306:	4619      	mov	r1, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3328      	adds	r3, #40	; 0x28
 800530e:	461a      	mov	r2, r3
 8005310:	88fb      	ldrh	r3, [r7, #6]
 8005312:	f7fc ffa7 	bl	8002264 <HAL_DMA_Start_IT>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d008      	beq.n	800532e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2210      	movs	r2, #16
 8005320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2220      	movs	r2, #32
 8005328:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e020      	b.n	8005370 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2240      	movs	r2, #64	; 0x40
 8005334:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3308      	adds	r3, #8
 800533c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	e853 3f00 	ldrex	r3, [r3]
 8005344:	613b      	str	r3, [r7, #16]
   return(result);
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3308      	adds	r3, #8
 8005354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005356:	623a      	str	r2, [r7, #32]
 8005358:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535a:	69f9      	ldr	r1, [r7, #28]
 800535c:	6a3a      	ldr	r2, [r7, #32]
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	61bb      	str	r3, [r7, #24]
   return(result);
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1e5      	bne.n	8005336 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	e000      	b.n	8005370 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800536e:	2302      	movs	r3, #2
  }
}
 8005370:	4618      	mov	r0, r3
 8005372:	3728      	adds	r7, #40	; 0x28
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	08006619 	.word	0x08006619
 800537c:	080066af 	.word	0x080066af
 8005380:	08006831 	.word	0x08006831

08005384 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	4613      	mov	r3, r2
 8005390:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005398:	2b20      	cmp	r3, #32
 800539a:	d132      	bne.n	8005402 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d002      	beq.n	80053a8 <HAL_UART_Receive_DMA+0x24>
 80053a2:	88fb      	ldrh	r3, [r7, #6]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e02b      	b.n	8005404 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d018      	beq.n	80053f2 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	613b      	str	r3, [r7, #16]
   return(result);
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053d4:	627b      	str	r3, [r7, #36]	; 0x24
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	623b      	str	r3, [r7, #32]
 80053e0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	69f9      	ldr	r1, [r7, #28]
 80053e4:	6a3a      	ldr	r2, [r7, #32]
 80053e6:	e841 2300 	strex	r3, r2, [r1]
 80053ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1e6      	bne.n	80053c0 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80053f2:	88fb      	ldrh	r3, [r7, #6]
 80053f4:	461a      	mov	r2, r3
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 ffe3 	bl	80063c4 <UART_Start_Receive_DMA>
 80053fe:	4603      	mov	r3, r0
 8005400:	e000      	b.n	8005404 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005402:	2302      	movs	r3, #2
  }
}
 8005404:	4618      	mov	r0, r3
 8005406:	3728      	adds	r7, #40	; 0x28
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b090      	sub	sp, #64	; 0x40
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005418:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005420:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542c:	2b80      	cmp	r3, #128	; 0x80
 800542e:	d139      	bne.n	80054a4 <HAL_UART_DMAStop+0x98>
 8005430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005432:	2b21      	cmp	r3, #33	; 0x21
 8005434:	d136      	bne.n	80054a4 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3308      	adds	r3, #8
 800543c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	e853 3f00 	ldrex	r3, [r3]
 8005444:	61fb      	str	r3, [r7, #28]
   return(result);
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800544c:	637b      	str	r3, [r7, #52]	; 0x34
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3308      	adds	r3, #8
 8005454:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005456:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005458:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800545c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800545e:	e841 2300 	strex	r3, r2, [r1]
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1e5      	bne.n	8005436 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546e:	2b00      	cmp	r3, #0
 8005470:	d015      	beq.n	800549e <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005476:	4618      	mov	r0, r3
 8005478:	f7fc ff54 	bl	8002324 <HAL_DMA_Abort>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00d      	beq.n	800549e <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005486:	4618      	mov	r0, r3
 8005488:	f7fd f968 	bl	800275c <HAL_DMA_GetError>
 800548c:	4603      	mov	r3, r0
 800548e:	2b20      	cmp	r3, #32
 8005490:	d105      	bne.n	800549e <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2210      	movs	r2, #16
 8005496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e044      	b.n	8005528 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f001 f830 	bl	8006504 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ae:	2b40      	cmp	r3, #64	; 0x40
 80054b0:	d139      	bne.n	8005526 <HAL_UART_DMAStop+0x11a>
 80054b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b4:	2b22      	cmp	r3, #34	; 0x22
 80054b6:	d136      	bne.n	8005526 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3308      	adds	r3, #8
 80054be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ce:	633b      	str	r3, [r7, #48]	; 0x30
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3308      	adds	r3, #8
 80054d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d8:	61ba      	str	r2, [r7, #24]
 80054da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	6979      	ldr	r1, [r7, #20]
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	613b      	str	r3, [r7, #16]
   return(result);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e5      	bne.n	80054b8 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d015      	beq.n	8005520 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fc ff13 	bl	8002324 <HAL_DMA_Abort>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00d      	beq.n	8005520 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005508:	4618      	mov	r0, r3
 800550a:	f7fd f927 	bl	800275c <HAL_DMA_GetError>
 800550e:	4603      	mov	r3, r0
 8005510:	2b20      	cmp	r3, #32
 8005512:	d105      	bne.n	8005520 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2210      	movs	r2, #16
 8005518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e003      	b.n	8005528 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f001 f815 	bl	8006550 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3740      	adds	r7, #64	; 0x40
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b0ba      	sub	sp, #232	; 0xe8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005556:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800555a:	f640 030f 	movw	r3, #2063	; 0x80f
 800555e:	4013      	ands	r3, r2
 8005560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005564:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005568:	2b00      	cmp	r3, #0
 800556a:	d115      	bne.n	8005598 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800556c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00f      	beq.n	8005598 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800557c:	f003 0320 	and.w	r3, r3, #32
 8005580:	2b00      	cmp	r3, #0
 8005582:	d009      	beq.n	8005598 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 82ac 	beq.w	8005ae6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	4798      	blx	r3
      }
      return;
 8005596:	e2a6      	b.n	8005ae6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005598:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 8117 	beq.w	80057d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80055a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80055ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80055b2:	4b85      	ldr	r3, [pc, #532]	; (80057c8 <HAL_UART_IRQHandler+0x298>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 810a 	beq.w	80057d0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d011      	beq.n	80055ec <HAL_UART_IRQHandler+0xbc>
 80055c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00b      	beq.n	80055ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2201      	movs	r2, #1
 80055da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055e2:	f043 0201 	orr.w	r2, r3, #1
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d011      	beq.n	800561c <HAL_UART_IRQHandler+0xec>
 80055f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00b      	beq.n	800561c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2202      	movs	r2, #2
 800560a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005612:	f043 0204 	orr.w	r2, r3, #4
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800561c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	d011      	beq.n	800564c <HAL_UART_IRQHandler+0x11c>
 8005628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00b      	beq.n	800564c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2204      	movs	r2, #4
 800563a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005642:	f043 0202 	orr.w	r2, r3, #2
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800564c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005650:	f003 0308 	and.w	r3, r3, #8
 8005654:	2b00      	cmp	r3, #0
 8005656:	d017      	beq.n	8005688 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	2b00      	cmp	r3, #0
 8005662:	d105      	bne.n	8005670 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005668:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00b      	beq.n	8005688 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2208      	movs	r2, #8
 8005676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800567e:	f043 0208 	orr.w	r2, r3, #8
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005690:	2b00      	cmp	r3, #0
 8005692:	d012      	beq.n	80056ba <HAL_UART_IRQHandler+0x18a>
 8005694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005698:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00c      	beq.n	80056ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056b0:	f043 0220 	orr.w	r2, r3, #32
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 8212 	beq.w	8005aea <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80056c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00d      	beq.n	80056ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80056d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005702:	2b40      	cmp	r3, #64	; 0x40
 8005704:	d005      	beq.n	8005712 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800570a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800570e:	2b00      	cmp	r3, #0
 8005710:	d04f      	beq.n	80057b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 ff1c 	bl	8006550 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005722:	2b40      	cmp	r3, #64	; 0x40
 8005724:	d141      	bne.n	80057aa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3308      	adds	r3, #8
 800572c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005730:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800573c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3308      	adds	r3, #8
 800574e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005752:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800575e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800576a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1d9      	bne.n	8005726 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005776:	2b00      	cmp	r3, #0
 8005778:	d013      	beq.n	80057a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800577e:	4a13      	ldr	r2, [pc, #76]	; (80057cc <HAL_UART_IRQHandler+0x29c>)
 8005780:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005786:	4618      	mov	r0, r3
 8005788:	f7fc fe3c 	bl	8002404 <HAL_DMA_Abort_IT>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d017      	beq.n	80057c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800579c:	4610      	mov	r0, r2
 800579e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a0:	e00f      	b.n	80057c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f9d4 	bl	8005b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a8:	e00b      	b.n	80057c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f9d0 	bl	8005b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b0:	e007      	b.n	80057c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f9cc 	bl	8005b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80057c0:	e193      	b.n	8005aea <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c2:	bf00      	nop
    return;
 80057c4:	e191      	b.n	8005aea <HAL_UART_IRQHandler+0x5ba>
 80057c6:	bf00      	nop
 80057c8:	04000120 	.word	0x04000120
 80057cc:	080068af 	.word	0x080068af

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	f040 814c 	bne.w	8005a72 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80057da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057de:	f003 0310 	and.w	r3, r3, #16
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 8145 	beq.w	8005a72 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80057e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ec:	f003 0310 	and.w	r3, r3, #16
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 813e 	beq.w	8005a72 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2210      	movs	r2, #16
 80057fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005808:	2b40      	cmp	r3, #64	; 0x40
 800580a:	f040 80b6 	bne.w	800597a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800581a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 8165 	beq.w	8005aee <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800582a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800582e:	429a      	cmp	r2, r3
 8005830:	f080 815d 	bcs.w	8005aee <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800583a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005848:	f000 8086 	beq.w	8005958 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005860:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005868:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	461a      	mov	r2, r3
 8005872:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005876:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800587a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005882:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005886:	e841 2300 	strex	r3, r2, [r1]
 800588a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800588e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1da      	bne.n	800584c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3308      	adds	r3, #8
 800589c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058a0:	e853 3f00 	ldrex	r3, [r3]
 80058a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058a8:	f023 0301 	bic.w	r3, r3, #1
 80058ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3308      	adds	r3, #8
 80058b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80058be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80058cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e1      	bne.n	8005896 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3308      	adds	r3, #8
 80058d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80058e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3308      	adds	r3, #8
 80058f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80058f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e3      	bne.n	80058d2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2220      	movs	r2, #32
 800590e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005920:	e853 3f00 	ldrex	r3, [r3]
 8005924:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005928:	f023 0310 	bic.w	r3, r3, #16
 800592c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800593a:	65bb      	str	r3, [r7, #88]	; 0x58
 800593c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005940:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e4      	bne.n	8005918 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005952:	4618      	mov	r0, r3
 8005954:	f7fc fce6 	bl	8002324 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800596a:	b29b      	uxth	r3, r3
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	b29b      	uxth	r3, r3
 8005970:	4619      	mov	r1, r3
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f8f6 	bl	8005b64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005978:	e0b9      	b.n	8005aee <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005986:	b29b      	uxth	r3, r3
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 80ab 	beq.w	8005af2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800599c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 80a6 	beq.w	8005af2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	461a      	mov	r2, r3
 80059c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059c8:	647b      	str	r3, [r7, #68]	; 0x44
 80059ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e4      	bne.n	80059a6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3308      	adds	r3, #8
 80059e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	e853 3f00 	ldrex	r3, [r3]
 80059ea:	623b      	str	r3, [r7, #32]
   return(result);
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	f023 0301 	bic.w	r3, r3, #1
 80059f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3308      	adds	r3, #8
 80059fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a00:	633a      	str	r2, [r7, #48]	; 0x30
 8005a02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a08:	e841 2300 	strex	r3, r2, [r1]
 8005a0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e3      	bne.n	80059dc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f023 0310 	bic.w	r3, r3, #16
 8005a3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	461a      	mov	r2, r3
 8005a46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a4a:	61fb      	str	r3, [r7, #28]
 8005a4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	69b9      	ldr	r1, [r7, #24]
 8005a50:	69fa      	ldr	r2, [r7, #28]
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	617b      	str	r3, [r7, #20]
   return(result);
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1e4      	bne.n	8005a28 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2202      	movs	r2, #2
 8005a62:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a68:	4619      	mov	r1, r3
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f87a 	bl	8005b64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a70:	e03f      	b.n	8005af2 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00e      	beq.n	8005a9c <HAL_UART_IRQHandler+0x56c>
 8005a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d008      	beq.n	8005a9c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f871 	bl	8005b7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a9a:	e02d      	b.n	8005af8 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00e      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d008      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d01c      	beq.n	8005af6 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	4798      	blx	r3
    }
    return;
 8005ac4:	e017      	b.n	8005af6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d012      	beq.n	8005af8 <HAL_UART_IRQHandler+0x5c8>
 8005ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00c      	beq.n	8005af8 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fefb 	bl	80068da <UART_EndTransmit_IT>
    return;
 8005ae4:	e008      	b.n	8005af8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005ae6:	bf00      	nop
 8005ae8:	e006      	b.n	8005af8 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005aea:	bf00      	nop
 8005aec:	e004      	b.n	8005af8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005aee:	bf00      	nop
 8005af0:	e002      	b.n	8005af8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005af2:	bf00      	nop
 8005af4:	e000      	b.n	8005af8 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005af6:	bf00      	nop
  }

}
 8005af8:	37e8      	adds	r7, #232	; 0xe8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop

08005b00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b088      	sub	sp, #32
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	4ba6      	ldr	r3, [pc, #664]	; (8005e54 <UART_SetConfig+0x2c4>)
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6812      	ldr	r2, [r2, #0]
 8005bc2:	6979      	ldr	r1, [r7, #20]
 8005bc4:	430b      	orrs	r3, r1
 8005bc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a94      	ldr	r2, [pc, #592]	; (8005e58 <UART_SetConfig+0x2c8>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d120      	bne.n	8005c4e <UART_SetConfig+0xbe>
 8005c0c:	4b93      	ldr	r3, [pc, #588]	; (8005e5c <UART_SetConfig+0x2cc>)
 8005c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	2b03      	cmp	r3, #3
 8005c18:	d816      	bhi.n	8005c48 <UART_SetConfig+0xb8>
 8005c1a:	a201      	add	r2, pc, #4	; (adr r2, 8005c20 <UART_SetConfig+0x90>)
 8005c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c20:	08005c31 	.word	0x08005c31
 8005c24:	08005c3d 	.word	0x08005c3d
 8005c28:	08005c37 	.word	0x08005c37
 8005c2c:	08005c43 	.word	0x08005c43
 8005c30:	2301      	movs	r3, #1
 8005c32:	77fb      	strb	r3, [r7, #31]
 8005c34:	e150      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005c36:	2302      	movs	r3, #2
 8005c38:	77fb      	strb	r3, [r7, #31]
 8005c3a:	e14d      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005c3c:	2304      	movs	r3, #4
 8005c3e:	77fb      	strb	r3, [r7, #31]
 8005c40:	e14a      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005c42:	2308      	movs	r3, #8
 8005c44:	77fb      	strb	r3, [r7, #31]
 8005c46:	e147      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005c48:	2310      	movs	r3, #16
 8005c4a:	77fb      	strb	r3, [r7, #31]
 8005c4c:	e144      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a83      	ldr	r2, [pc, #524]	; (8005e60 <UART_SetConfig+0x2d0>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d132      	bne.n	8005cbe <UART_SetConfig+0x12e>
 8005c58:	4b80      	ldr	r3, [pc, #512]	; (8005e5c <UART_SetConfig+0x2cc>)
 8005c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c5e:	f003 030c 	and.w	r3, r3, #12
 8005c62:	2b0c      	cmp	r3, #12
 8005c64:	d828      	bhi.n	8005cb8 <UART_SetConfig+0x128>
 8005c66:	a201      	add	r2, pc, #4	; (adr r2, 8005c6c <UART_SetConfig+0xdc>)
 8005c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6c:	08005ca1 	.word	0x08005ca1
 8005c70:	08005cb9 	.word	0x08005cb9
 8005c74:	08005cb9 	.word	0x08005cb9
 8005c78:	08005cb9 	.word	0x08005cb9
 8005c7c:	08005cad 	.word	0x08005cad
 8005c80:	08005cb9 	.word	0x08005cb9
 8005c84:	08005cb9 	.word	0x08005cb9
 8005c88:	08005cb9 	.word	0x08005cb9
 8005c8c:	08005ca7 	.word	0x08005ca7
 8005c90:	08005cb9 	.word	0x08005cb9
 8005c94:	08005cb9 	.word	0x08005cb9
 8005c98:	08005cb9 	.word	0x08005cb9
 8005c9c:	08005cb3 	.word	0x08005cb3
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	77fb      	strb	r3, [r7, #31]
 8005ca4:	e118      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	77fb      	strb	r3, [r7, #31]
 8005caa:	e115      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005cac:	2304      	movs	r3, #4
 8005cae:	77fb      	strb	r3, [r7, #31]
 8005cb0:	e112      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	77fb      	strb	r3, [r7, #31]
 8005cb6:	e10f      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005cb8:	2310      	movs	r3, #16
 8005cba:	77fb      	strb	r3, [r7, #31]
 8005cbc:	e10c      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a68      	ldr	r2, [pc, #416]	; (8005e64 <UART_SetConfig+0x2d4>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d120      	bne.n	8005d0a <UART_SetConfig+0x17a>
 8005cc8:	4b64      	ldr	r3, [pc, #400]	; (8005e5c <UART_SetConfig+0x2cc>)
 8005cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005cd2:	2b30      	cmp	r3, #48	; 0x30
 8005cd4:	d013      	beq.n	8005cfe <UART_SetConfig+0x16e>
 8005cd6:	2b30      	cmp	r3, #48	; 0x30
 8005cd8:	d814      	bhi.n	8005d04 <UART_SetConfig+0x174>
 8005cda:	2b20      	cmp	r3, #32
 8005cdc:	d009      	beq.n	8005cf2 <UART_SetConfig+0x162>
 8005cde:	2b20      	cmp	r3, #32
 8005ce0:	d810      	bhi.n	8005d04 <UART_SetConfig+0x174>
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d002      	beq.n	8005cec <UART_SetConfig+0x15c>
 8005ce6:	2b10      	cmp	r3, #16
 8005ce8:	d006      	beq.n	8005cf8 <UART_SetConfig+0x168>
 8005cea:	e00b      	b.n	8005d04 <UART_SetConfig+0x174>
 8005cec:	2300      	movs	r3, #0
 8005cee:	77fb      	strb	r3, [r7, #31]
 8005cf0:	e0f2      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	77fb      	strb	r3, [r7, #31]
 8005cf6:	e0ef      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005cf8:	2304      	movs	r3, #4
 8005cfa:	77fb      	strb	r3, [r7, #31]
 8005cfc:	e0ec      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005cfe:	2308      	movs	r3, #8
 8005d00:	77fb      	strb	r3, [r7, #31]
 8005d02:	e0e9      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005d04:	2310      	movs	r3, #16
 8005d06:	77fb      	strb	r3, [r7, #31]
 8005d08:	e0e6      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a56      	ldr	r2, [pc, #344]	; (8005e68 <UART_SetConfig+0x2d8>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d120      	bne.n	8005d56 <UART_SetConfig+0x1c6>
 8005d14:	4b51      	ldr	r3, [pc, #324]	; (8005e5c <UART_SetConfig+0x2cc>)
 8005d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d1e:	2bc0      	cmp	r3, #192	; 0xc0
 8005d20:	d013      	beq.n	8005d4a <UART_SetConfig+0x1ba>
 8005d22:	2bc0      	cmp	r3, #192	; 0xc0
 8005d24:	d814      	bhi.n	8005d50 <UART_SetConfig+0x1c0>
 8005d26:	2b80      	cmp	r3, #128	; 0x80
 8005d28:	d009      	beq.n	8005d3e <UART_SetConfig+0x1ae>
 8005d2a:	2b80      	cmp	r3, #128	; 0x80
 8005d2c:	d810      	bhi.n	8005d50 <UART_SetConfig+0x1c0>
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <UART_SetConfig+0x1a8>
 8005d32:	2b40      	cmp	r3, #64	; 0x40
 8005d34:	d006      	beq.n	8005d44 <UART_SetConfig+0x1b4>
 8005d36:	e00b      	b.n	8005d50 <UART_SetConfig+0x1c0>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	77fb      	strb	r3, [r7, #31]
 8005d3c:	e0cc      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	77fb      	strb	r3, [r7, #31]
 8005d42:	e0c9      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005d44:	2304      	movs	r3, #4
 8005d46:	77fb      	strb	r3, [r7, #31]
 8005d48:	e0c6      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005d4a:	2308      	movs	r3, #8
 8005d4c:	77fb      	strb	r3, [r7, #31]
 8005d4e:	e0c3      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005d50:	2310      	movs	r3, #16
 8005d52:	77fb      	strb	r3, [r7, #31]
 8005d54:	e0c0      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a44      	ldr	r2, [pc, #272]	; (8005e6c <UART_SetConfig+0x2dc>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d125      	bne.n	8005dac <UART_SetConfig+0x21c>
 8005d60:	4b3e      	ldr	r3, [pc, #248]	; (8005e5c <UART_SetConfig+0x2cc>)
 8005d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d6e:	d017      	beq.n	8005da0 <UART_SetConfig+0x210>
 8005d70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d74:	d817      	bhi.n	8005da6 <UART_SetConfig+0x216>
 8005d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d7a:	d00b      	beq.n	8005d94 <UART_SetConfig+0x204>
 8005d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d80:	d811      	bhi.n	8005da6 <UART_SetConfig+0x216>
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <UART_SetConfig+0x1fe>
 8005d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d8a:	d006      	beq.n	8005d9a <UART_SetConfig+0x20a>
 8005d8c:	e00b      	b.n	8005da6 <UART_SetConfig+0x216>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	77fb      	strb	r3, [r7, #31]
 8005d92:	e0a1      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005d94:	2302      	movs	r3, #2
 8005d96:	77fb      	strb	r3, [r7, #31]
 8005d98:	e09e      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005d9a:	2304      	movs	r3, #4
 8005d9c:	77fb      	strb	r3, [r7, #31]
 8005d9e:	e09b      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005da0:	2308      	movs	r3, #8
 8005da2:	77fb      	strb	r3, [r7, #31]
 8005da4:	e098      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005da6:	2310      	movs	r3, #16
 8005da8:	77fb      	strb	r3, [r7, #31]
 8005daa:	e095      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a2f      	ldr	r2, [pc, #188]	; (8005e70 <UART_SetConfig+0x2e0>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d125      	bne.n	8005e02 <UART_SetConfig+0x272>
 8005db6:	4b29      	ldr	r3, [pc, #164]	; (8005e5c <UART_SetConfig+0x2cc>)
 8005db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005dc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dc4:	d017      	beq.n	8005df6 <UART_SetConfig+0x266>
 8005dc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dca:	d817      	bhi.n	8005dfc <UART_SetConfig+0x26c>
 8005dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dd0:	d00b      	beq.n	8005dea <UART_SetConfig+0x25a>
 8005dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dd6:	d811      	bhi.n	8005dfc <UART_SetConfig+0x26c>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <UART_SetConfig+0x254>
 8005ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de0:	d006      	beq.n	8005df0 <UART_SetConfig+0x260>
 8005de2:	e00b      	b.n	8005dfc <UART_SetConfig+0x26c>
 8005de4:	2301      	movs	r3, #1
 8005de6:	77fb      	strb	r3, [r7, #31]
 8005de8:	e076      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005dea:	2302      	movs	r3, #2
 8005dec:	77fb      	strb	r3, [r7, #31]
 8005dee:	e073      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005df0:	2304      	movs	r3, #4
 8005df2:	77fb      	strb	r3, [r7, #31]
 8005df4:	e070      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005df6:	2308      	movs	r3, #8
 8005df8:	77fb      	strb	r3, [r7, #31]
 8005dfa:	e06d      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005dfc:	2310      	movs	r3, #16
 8005dfe:	77fb      	strb	r3, [r7, #31]
 8005e00:	e06a      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a1b      	ldr	r2, [pc, #108]	; (8005e74 <UART_SetConfig+0x2e4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d138      	bne.n	8005e7e <UART_SetConfig+0x2ee>
 8005e0c:	4b13      	ldr	r3, [pc, #76]	; (8005e5c <UART_SetConfig+0x2cc>)
 8005e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e12:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005e16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e1a:	d017      	beq.n	8005e4c <UART_SetConfig+0x2bc>
 8005e1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e20:	d82a      	bhi.n	8005e78 <UART_SetConfig+0x2e8>
 8005e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e26:	d00b      	beq.n	8005e40 <UART_SetConfig+0x2b0>
 8005e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e2c:	d824      	bhi.n	8005e78 <UART_SetConfig+0x2e8>
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <UART_SetConfig+0x2aa>
 8005e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e36:	d006      	beq.n	8005e46 <UART_SetConfig+0x2b6>
 8005e38:	e01e      	b.n	8005e78 <UART_SetConfig+0x2e8>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	77fb      	strb	r3, [r7, #31]
 8005e3e:	e04b      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005e40:	2302      	movs	r3, #2
 8005e42:	77fb      	strb	r3, [r7, #31]
 8005e44:	e048      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005e46:	2304      	movs	r3, #4
 8005e48:	77fb      	strb	r3, [r7, #31]
 8005e4a:	e045      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005e4c:	2308      	movs	r3, #8
 8005e4e:	77fb      	strb	r3, [r7, #31]
 8005e50:	e042      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005e52:	bf00      	nop
 8005e54:	efff69f3 	.word	0xefff69f3
 8005e58:	40011000 	.word	0x40011000
 8005e5c:	40023800 	.word	0x40023800
 8005e60:	40004400 	.word	0x40004400
 8005e64:	40004800 	.word	0x40004800
 8005e68:	40004c00 	.word	0x40004c00
 8005e6c:	40005000 	.word	0x40005000
 8005e70:	40011400 	.word	0x40011400
 8005e74:	40007800 	.word	0x40007800
 8005e78:	2310      	movs	r3, #16
 8005e7a:	77fb      	strb	r3, [r7, #31]
 8005e7c:	e02c      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a72      	ldr	r2, [pc, #456]	; (800604c <UART_SetConfig+0x4bc>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d125      	bne.n	8005ed4 <UART_SetConfig+0x344>
 8005e88:	4b71      	ldr	r3, [pc, #452]	; (8006050 <UART_SetConfig+0x4c0>)
 8005e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e96:	d017      	beq.n	8005ec8 <UART_SetConfig+0x338>
 8005e98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e9c:	d817      	bhi.n	8005ece <UART_SetConfig+0x33e>
 8005e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea2:	d00b      	beq.n	8005ebc <UART_SetConfig+0x32c>
 8005ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea8:	d811      	bhi.n	8005ece <UART_SetConfig+0x33e>
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <UART_SetConfig+0x326>
 8005eae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eb2:	d006      	beq.n	8005ec2 <UART_SetConfig+0x332>
 8005eb4:	e00b      	b.n	8005ece <UART_SetConfig+0x33e>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	77fb      	strb	r3, [r7, #31]
 8005eba:	e00d      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	77fb      	strb	r3, [r7, #31]
 8005ec0:	e00a      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005ec2:	2304      	movs	r3, #4
 8005ec4:	77fb      	strb	r3, [r7, #31]
 8005ec6:	e007      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005ec8:	2308      	movs	r3, #8
 8005eca:	77fb      	strb	r3, [r7, #31]
 8005ecc:	e004      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005ece:	2310      	movs	r3, #16
 8005ed0:	77fb      	strb	r3, [r7, #31]
 8005ed2:	e001      	b.n	8005ed8 <UART_SetConfig+0x348>
 8005ed4:	2310      	movs	r3, #16
 8005ed6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	69db      	ldr	r3, [r3, #28]
 8005edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee0:	d15b      	bne.n	8005f9a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005ee2:	7ffb      	ldrb	r3, [r7, #31]
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d828      	bhi.n	8005f3a <UART_SetConfig+0x3aa>
 8005ee8:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <UART_SetConfig+0x360>)
 8005eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eee:	bf00      	nop
 8005ef0:	08005f15 	.word	0x08005f15
 8005ef4:	08005f1d 	.word	0x08005f1d
 8005ef8:	08005f25 	.word	0x08005f25
 8005efc:	08005f3b 	.word	0x08005f3b
 8005f00:	08005f2b 	.word	0x08005f2b
 8005f04:	08005f3b 	.word	0x08005f3b
 8005f08:	08005f3b 	.word	0x08005f3b
 8005f0c:	08005f3b 	.word	0x08005f3b
 8005f10:	08005f33 	.word	0x08005f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f14:	f7fd fb90 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 8005f18:	61b8      	str	r0, [r7, #24]
        break;
 8005f1a:	e013      	b.n	8005f44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f1c:	f7fd fba0 	bl	8003660 <HAL_RCC_GetPCLK2Freq>
 8005f20:	61b8      	str	r0, [r7, #24]
        break;
 8005f22:	e00f      	b.n	8005f44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f24:	4b4b      	ldr	r3, [pc, #300]	; (8006054 <UART_SetConfig+0x4c4>)
 8005f26:	61bb      	str	r3, [r7, #24]
        break;
 8005f28:	e00c      	b.n	8005f44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f2a:	f7fd fa73 	bl	8003414 <HAL_RCC_GetSysClockFreq>
 8005f2e:	61b8      	str	r0, [r7, #24]
        break;
 8005f30:	e008      	b.n	8005f44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f36:	61bb      	str	r3, [r7, #24]
        break;
 8005f38:	e004      	b.n	8005f44 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	77bb      	strb	r3, [r7, #30]
        break;
 8005f42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d074      	beq.n	8006034 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	005a      	lsls	r2, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	085b      	lsrs	r3, r3, #1
 8005f54:	441a      	add	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	2b0f      	cmp	r3, #15
 8005f64:	d916      	bls.n	8005f94 <UART_SetConfig+0x404>
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f6c:	d212      	bcs.n	8005f94 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	f023 030f 	bic.w	r3, r3, #15
 8005f76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	085b      	lsrs	r3, r3, #1
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	89fb      	ldrh	r3, [r7, #14]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	89fa      	ldrh	r2, [r7, #14]
 8005f90:	60da      	str	r2, [r3, #12]
 8005f92:	e04f      	b.n	8006034 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	77bb      	strb	r3, [r7, #30]
 8005f98:	e04c      	b.n	8006034 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f9a:	7ffb      	ldrb	r3, [r7, #31]
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d828      	bhi.n	8005ff2 <UART_SetConfig+0x462>
 8005fa0:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <UART_SetConfig+0x418>)
 8005fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa6:	bf00      	nop
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005fd5 	.word	0x08005fd5
 8005fb0:	08005fdd 	.word	0x08005fdd
 8005fb4:	08005ff3 	.word	0x08005ff3
 8005fb8:	08005fe3 	.word	0x08005fe3
 8005fbc:	08005ff3 	.word	0x08005ff3
 8005fc0:	08005ff3 	.word	0x08005ff3
 8005fc4:	08005ff3 	.word	0x08005ff3
 8005fc8:	08005feb 	.word	0x08005feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fcc:	f7fd fb34 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 8005fd0:	61b8      	str	r0, [r7, #24]
        break;
 8005fd2:	e013      	b.n	8005ffc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fd4:	f7fd fb44 	bl	8003660 <HAL_RCC_GetPCLK2Freq>
 8005fd8:	61b8      	str	r0, [r7, #24]
        break;
 8005fda:	e00f      	b.n	8005ffc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fdc:	4b1d      	ldr	r3, [pc, #116]	; (8006054 <UART_SetConfig+0x4c4>)
 8005fde:	61bb      	str	r3, [r7, #24]
        break;
 8005fe0:	e00c      	b.n	8005ffc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fe2:	f7fd fa17 	bl	8003414 <HAL_RCC_GetSysClockFreq>
 8005fe6:	61b8      	str	r0, [r7, #24]
        break;
 8005fe8:	e008      	b.n	8005ffc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fee:	61bb      	str	r3, [r7, #24]
        break;
 8005ff0:	e004      	b.n	8005ffc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	77bb      	strb	r3, [r7, #30]
        break;
 8005ffa:	bf00      	nop
    }

    if (pclk != 0U)
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d018      	beq.n	8006034 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	085a      	lsrs	r2, r3, #1
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	441a      	add	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	fbb2 f3f3 	udiv	r3, r2, r3
 8006014:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	2b0f      	cmp	r3, #15
 800601a:	d909      	bls.n	8006030 <UART_SetConfig+0x4a0>
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006022:	d205      	bcs.n	8006030 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	b29a      	uxth	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	60da      	str	r2, [r3, #12]
 800602e:	e001      	b.n	8006034 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006040:	7fbb      	ldrb	r3, [r7, #30]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3720      	adds	r7, #32
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	40007c00 	.word	0x40007c00
 8006050:	40023800 	.word	0x40023800
 8006054:	00f42400 	.word	0x00f42400

08006058 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	f003 0304 	and.w	r3, r3, #4
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00a      	beq.n	80060c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	f003 0310 	and.w	r3, r3, #16
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01a      	beq.n	800616e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006156:	d10a      	bne.n	800616e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	605a      	str	r2, [r3, #4]
  }
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af02      	add	r7, sp, #8
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061ac:	f7fb febe 	bl	8001f2c <HAL_GetTick>
 80061b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0308 	and.w	r3, r3, #8
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d10e      	bne.n	80061de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f831 	bl	8006236 <UART_WaitOnFlagUntilTimeout>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e027      	b.n	800622e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d10e      	bne.n	800620a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f81b 	bl	8006236 <UART_WaitOnFlagUntilTimeout>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e011      	b.n	800622e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2220      	movs	r2, #32
 800620e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2220      	movs	r2, #32
 8006214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b09c      	sub	sp, #112	; 0x70
 800623a:	af00      	add	r7, sp, #0
 800623c:	60f8      	str	r0, [r7, #12]
 800623e:	60b9      	str	r1, [r7, #8]
 8006240:	603b      	str	r3, [r7, #0]
 8006242:	4613      	mov	r3, r2
 8006244:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006246:	e0a7      	b.n	8006398 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800624a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800624e:	f000 80a3 	beq.w	8006398 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006252:	f7fb fe6b 	bl	8001f2c <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800625e:	429a      	cmp	r2, r3
 8006260:	d302      	bcc.n	8006268 <UART_WaitOnFlagUntilTimeout+0x32>
 8006262:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006264:	2b00      	cmp	r3, #0
 8006266:	d13f      	bne.n	80062e8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006270:	e853 3f00 	ldrex	r3, [r3]
 8006274:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006278:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800627c:	667b      	str	r3, [r7, #100]	; 0x64
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006286:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006288:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800628c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800628e:	e841 2300 	strex	r3, r2, [r1]
 8006292:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1e6      	bne.n	8006268 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3308      	adds	r3, #8
 80062a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ac:	f023 0301 	bic.w	r3, r3, #1
 80062b0:	663b      	str	r3, [r7, #96]	; 0x60
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3308      	adds	r3, #8
 80062b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80062bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e5      	bne.n	800629a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2220      	movs	r2, #32
 80062d2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e068      	b.n	80063ba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d050      	beq.n	8006398 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006304:	d148      	bne.n	8006398 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800630e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	e853 3f00 	ldrex	r3, [r3]
 800631c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006324:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800632e:	637b      	str	r3, [r7, #52]	; 0x34
 8006330:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006332:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006336:	e841 2300 	strex	r3, r2, [r1]
 800633a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1e6      	bne.n	8006310 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3308      	adds	r3, #8
 8006348:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	613b      	str	r3, [r7, #16]
   return(result);
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f023 0301 	bic.w	r3, r3, #1
 8006358:	66bb      	str	r3, [r7, #104]	; 0x68
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3308      	adds	r3, #8
 8006360:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006362:	623a      	str	r2, [r7, #32]
 8006364:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006366:	69f9      	ldr	r1, [r7, #28]
 8006368:	6a3a      	ldr	r2, [r7, #32]
 800636a:	e841 2300 	strex	r3, r2, [r1]
 800636e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1e5      	bne.n	8006342 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2220      	movs	r2, #32
 800637a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2220      	movs	r2, #32
 8006380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2220      	movs	r2, #32
 8006388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e010      	b.n	80063ba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	69da      	ldr	r2, [r3, #28]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	4013      	ands	r3, r2
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	bf0c      	ite	eq
 80063a8:	2301      	moveq	r3, #1
 80063aa:	2300      	movne	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	461a      	mov	r2, r3
 80063b0:	79fb      	ldrb	r3, [r7, #7]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	f43f af48 	beq.w	8006248 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3770      	adds	r7, #112	; 0x70
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
	...

080063c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b096      	sub	sp, #88	; 0x58
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	4613      	mov	r3, r2
 80063d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	88fa      	ldrh	r2, [r7, #6]
 80063dc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2222      	movs	r2, #34	; 0x22
 80063ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d028      	beq.n	800644a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063fc:	4a3e      	ldr	r2, [pc, #248]	; (80064f8 <UART_Start_Receive_DMA+0x134>)
 80063fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006404:	4a3d      	ldr	r2, [pc, #244]	; (80064fc <UART_Start_Receive_DMA+0x138>)
 8006406:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800640c:	4a3c      	ldr	r2, [pc, #240]	; (8006500 <UART_Start_Receive_DMA+0x13c>)
 800640e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006414:	2200      	movs	r2, #0
 8006416:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	3324      	adds	r3, #36	; 0x24
 8006422:	4619      	mov	r1, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006428:	461a      	mov	r2, r3
 800642a:	88fb      	ldrh	r3, [r7, #6]
 800642c:	f7fb ff1a 	bl	8002264 <HAL_DMA_Start_IT>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d009      	beq.n	800644a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2210      	movs	r2, #16
 800643a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2220      	movs	r2, #32
 8006442:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e051      	b.n	80064ee <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d018      	beq.n	8006484 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800645a:	e853 3f00 	ldrex	r3, [r3]
 800645e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006466:	657b      	str	r3, [r7, #84]	; 0x54
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	461a      	mov	r2, r3
 800646e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006470:	64bb      	str	r3, [r7, #72]	; 0x48
 8006472:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006476:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006478:	e841 2300 	strex	r3, r2, [r1]
 800647c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800647e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1e6      	bne.n	8006452 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	3308      	adds	r3, #8
 800648a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648e:	e853 3f00 	ldrex	r3, [r3]
 8006492:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	f043 0301 	orr.w	r3, r3, #1
 800649a:	653b      	str	r3, [r7, #80]	; 0x50
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3308      	adds	r3, #8
 80064a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064a4:	637a      	str	r2, [r7, #52]	; 0x34
 80064a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064ac:	e841 2300 	strex	r3, r2, [r1]
 80064b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e5      	bne.n	8006484 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3308      	adds	r3, #8
 80064be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	e853 3f00 	ldrex	r3, [r3]
 80064c6:	613b      	str	r3, [r7, #16]
   return(result);
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3308      	adds	r3, #8
 80064d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064d8:	623a      	str	r2, [r7, #32]
 80064da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	69f9      	ldr	r1, [r7, #28]
 80064de:	6a3a      	ldr	r2, [r7, #32]
 80064e0:	e841 2300 	strex	r3, r2, [r1]
 80064e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e5      	bne.n	80064b8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3758      	adds	r7, #88	; 0x58
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	080066cb 	.word	0x080066cb
 80064fc:	080067f3 	.word	0x080067f3
 8006500:	08006831 	.word	0x08006831

08006504 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006504:	b480      	push	{r7}
 8006506:	b089      	sub	sp, #36	; 0x24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	60bb      	str	r3, [r7, #8]
   return(result);
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006520:	61fb      	str	r3, [r7, #28]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	61bb      	str	r3, [r7, #24]
 800652c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652e:	6979      	ldr	r1, [r7, #20]
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	e841 2300 	strex	r3, r2, [r1]
 8006536:	613b      	str	r3, [r7, #16]
   return(result);
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1e6      	bne.n	800650c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2220      	movs	r2, #32
 8006542:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006544:	bf00      	nop
 8006546:	3724      	adds	r7, #36	; 0x24
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006550:	b480      	push	{r7}
 8006552:	b095      	sub	sp, #84	; 0x54
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006560:	e853 3f00 	ldrex	r3, [r3]
 8006564:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800656c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006576:	643b      	str	r3, [r7, #64]	; 0x40
 8006578:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800657c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800657e:	e841 2300 	strex	r3, r2, [r1]
 8006582:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1e6      	bne.n	8006558 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3308      	adds	r3, #8
 8006590:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	e853 3f00 	ldrex	r3, [r3]
 8006598:	61fb      	str	r3, [r7, #28]
   return(result);
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	f023 0301 	bic.w	r3, r3, #1
 80065a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3308      	adds	r3, #8
 80065a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1e5      	bne.n	800658a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d118      	bne.n	80065f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	e853 3f00 	ldrex	r3, [r3]
 80065d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f023 0310 	bic.w	r3, r3, #16
 80065da:	647b      	str	r3, [r7, #68]	; 0x44
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	461a      	mov	r2, r3
 80065e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065e4:	61bb      	str	r3, [r7, #24]
 80065e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e8:	6979      	ldr	r1, [r7, #20]
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	e841 2300 	strex	r3, r2, [r1]
 80065f0:	613b      	str	r3, [r7, #16]
   return(result);
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1e6      	bne.n	80065c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2220      	movs	r2, #32
 80065fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800660c:	bf00      	nop
 800660e:	3754      	adds	r7, #84	; 0x54
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b090      	sub	sp, #64	; 0x40
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006624:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800662e:	d037      	beq.n	80066a0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8006630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006632:	2200      	movs	r2, #0
 8006634:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3308      	adds	r3, #8
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	e853 3f00 	ldrex	r3, [r3]
 8006646:	623b      	str	r3, [r7, #32]
   return(result);
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800664e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3308      	adds	r3, #8
 8006656:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006658:	633a      	str	r2, [r7, #48]	; 0x30
 800665a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800665e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006660:	e841 2300 	strex	r3, r2, [r1]
 8006664:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e5      	bne.n	8006638 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800666c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	60fb      	str	r3, [r7, #12]
   return(result);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006680:	637b      	str	r3, [r7, #52]	; 0x34
 8006682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	461a      	mov	r2, r3
 8006688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668a:	61fb      	str	r3, [r7, #28]
 800668c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668e:	69b9      	ldr	r1, [r7, #24]
 8006690:	69fa      	ldr	r2, [r7, #28]
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	617b      	str	r3, [r7, #20]
   return(result);
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1e6      	bne.n	800666c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800669e:	e002      	b.n	80066a6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80066a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80066a2:	f7ff fa2d 	bl	8005b00 <HAL_UART_TxCpltCallback>
}
 80066a6:	bf00      	nop
 80066a8:	3740      	adds	r7, #64	; 0x40
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b084      	sub	sp, #16
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f7ff fa29 	bl	8005b14 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066c2:	bf00      	nop
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b09c      	sub	sp, #112	; 0x70
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066e0:	d071      	beq.n	80067c6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80066e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e4:	2200      	movs	r2, #0
 80066e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f2:	e853 3f00 	ldrex	r3, [r3]
 80066f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	461a      	mov	r2, r3
 8006706:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006708:	65bb      	str	r3, [r7, #88]	; 0x58
 800670a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800670e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006710:	e841 2300 	strex	r3, r2, [r1]
 8006714:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e6      	bne.n	80066ea <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3308      	adds	r3, #8
 8006722:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006726:	e853 3f00 	ldrex	r3, [r3]
 800672a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800672c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672e:	f023 0301 	bic.w	r3, r3, #1
 8006732:	667b      	str	r3, [r7, #100]	; 0x64
 8006734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3308      	adds	r3, #8
 800673a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800673c:	647a      	str	r2, [r7, #68]	; 0x44
 800673e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006744:	e841 2300 	strex	r3, r2, [r1]
 8006748:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800674a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1e5      	bne.n	800671c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3308      	adds	r3, #8
 8006756:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	e853 3f00 	ldrex	r3, [r3]
 800675e:	623b      	str	r3, [r7, #32]
   return(result);
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006766:	663b      	str	r3, [r7, #96]	; 0x60
 8006768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3308      	adds	r3, #8
 800676e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006770:	633a      	str	r2, [r7, #48]	; 0x30
 8006772:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006778:	e841 2300 	strex	r3, r2, [r1]
 800677c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800677e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e5      	bne.n	8006750 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006786:	2220      	movs	r2, #32
 8006788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800678c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800678e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006790:	2b01      	cmp	r3, #1
 8006792:	d118      	bne.n	80067c6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	e853 3f00 	ldrex	r3, [r3]
 80067a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f023 0310 	bic.w	r3, r3, #16
 80067a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067b2:	61fb      	str	r3, [r7, #28]
 80067b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b6:	69b9      	ldr	r1, [r7, #24]
 80067b8:	69fa      	ldr	r2, [r7, #28]
 80067ba:	e841 2300 	strex	r3, r2, [r1]
 80067be:	617b      	str	r3, [r7, #20]
   return(result);
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1e6      	bne.n	8006794 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c8:	2200      	movs	r2, #0
 80067ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d107      	bne.n	80067e4 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80067da:	4619      	mov	r1, r3
 80067dc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80067de:	f7ff f9c1 	bl	8005b64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067e2:	e002      	b.n	80067ea <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80067e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80067e6:	f7ff f99f 	bl	8005b28 <HAL_UART_RxCpltCallback>
}
 80067ea:	bf00      	nop
 80067ec:	3770      	adds	r7, #112	; 0x70
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2201      	movs	r2, #1
 8006804:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800680a:	2b01      	cmp	r3, #1
 800680c:	d109      	bne.n	8006822 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006814:	085b      	lsrs	r3, r3, #1
 8006816:	b29b      	uxth	r3, r3
 8006818:	4619      	mov	r1, r3
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f7ff f9a2 	bl	8005b64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006820:	e002      	b.n	8006828 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f7ff f98a 	bl	8005b3c <HAL_UART_RxHalfCpltCallback>
}
 8006828:	bf00      	nop
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006842:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800684a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006856:	2b80      	cmp	r3, #128	; 0x80
 8006858:	d109      	bne.n	800686e <UART_DMAError+0x3e>
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	2b21      	cmp	r3, #33	; 0x21
 800685e:	d106      	bne.n	800686e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	2200      	movs	r2, #0
 8006864:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006868:	6978      	ldr	r0, [r7, #20]
 800686a:	f7ff fe4b 	bl	8006504 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006878:	2b40      	cmp	r3, #64	; 0x40
 800687a:	d109      	bne.n	8006890 <UART_DMAError+0x60>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b22      	cmp	r3, #34	; 0x22
 8006880:	d106      	bne.n	8006890 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2200      	movs	r2, #0
 8006886:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800688a:	6978      	ldr	r0, [r7, #20]
 800688c:	f7ff fe60 	bl	8006550 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006896:	f043 0210 	orr.w	r2, r3, #16
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068a0:	6978      	ldr	r0, [r7, #20]
 80068a2:	f7ff f955 	bl	8005b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068a6:	bf00      	nop
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b084      	sub	sp, #16
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f7ff f93f 	bl	8005b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068d2:	bf00      	nop
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b088      	sub	sp, #32
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	e853 3f00 	ldrex	r3, [r3]
 80068ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068f6:	61fb      	str	r3, [r7, #28]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	461a      	mov	r2, r3
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	61bb      	str	r3, [r7, #24]
 8006902:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006904:	6979      	ldr	r1, [r7, #20]
 8006906:	69ba      	ldr	r2, [r7, #24]
 8006908:	e841 2300 	strex	r3, r2, [r1]
 800690c:	613b      	str	r3, [r7, #16]
   return(result);
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1e6      	bne.n	80068e2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2220      	movs	r2, #32
 8006918:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7ff f8ed 	bl	8005b00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006926:	bf00      	nop
 8006928:	3720      	adds	r7, #32
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800692e:	b480      	push	{r7}
 8006930:	b085      	sub	sp, #20
 8006932:	af00      	add	r7, sp, #0
 8006934:	4603      	mov	r3, r0
 8006936:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006938:	2300      	movs	r3, #0
 800693a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800693c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006940:	2b84      	cmp	r3, #132	; 0x84
 8006942:	d005      	beq.n	8006950 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006944:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4413      	add	r3, r2
 800694c:	3303      	adds	r3, #3
 800694e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006950:	68fb      	ldr	r3, [r7, #12]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006962:	f000 faff 	bl	8006f64 <vTaskStartScheduler>
  
  return osOK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	bd80      	pop	{r7, pc}

0800696c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800696c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800696e:	b089      	sub	sp, #36	; 0x24
 8006970:	af04      	add	r7, sp, #16
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d020      	beq.n	80069c0 <osThreadCreate+0x54>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d01c      	beq.n	80069c0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685c      	ldr	r4, [r3, #4]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	691e      	ldr	r6, [r3, #16]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff ffc8 	bl	800692e <makeFreeRtosPriority>
 800699e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069a8:	9202      	str	r2, [sp, #8]
 80069aa:	9301      	str	r3, [sp, #4]
 80069ac:	9100      	str	r1, [sp, #0]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	4632      	mov	r2, r6
 80069b2:	4629      	mov	r1, r5
 80069b4:	4620      	mov	r0, r4
 80069b6:	f000 f8ed 	bl	8006b94 <xTaskCreateStatic>
 80069ba:	4603      	mov	r3, r0
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	e01c      	b.n	80069fa <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685c      	ldr	r4, [r3, #4]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069cc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7ff ffaa 	bl	800692e <makeFreeRtosPriority>
 80069da:	4602      	mov	r2, r0
 80069dc:	f107 030c 	add.w	r3, r7, #12
 80069e0:	9301      	str	r3, [sp, #4]
 80069e2:	9200      	str	r2, [sp, #0]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	4632      	mov	r2, r6
 80069e8:	4629      	mov	r1, r5
 80069ea:	4620      	mov	r0, r4
 80069ec:	f000 f935 	bl	8006c5a <xTaskCreate>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d001      	beq.n	80069fa <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80069f6:	2300      	movs	r3, #0
 80069f8:	e000      	b.n	80069fc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80069fa:	68fb      	ldr	r3, [r7, #12]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a04 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <osDelay+0x16>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	e000      	b.n	8006a1c <osDelay+0x18>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 fa6b 	bl	8006ef8 <vTaskDelay>
  
  return osOK;
 8006a22:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f103 0208 	add.w	r2, r3, #8
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f103 0208 	add.w	r2, r3, #8
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f103 0208 	add.w	r2, r3, #8
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a7a:	bf00      	nop
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a86:	b480      	push	{r7}
 8006a88:	b085      	sub	sp, #20
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	601a      	str	r2, [r3, #0]
}
 8006ac2:	bf00      	nop
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b085      	sub	sp, #20
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ae4:	d103      	bne.n	8006aee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	e00c      	b.n	8006b08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3308      	adds	r3, #8
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	e002      	b.n	8006afc <vListInsert+0x2e>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d2f6      	bcs.n	8006af6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	683a      	ldr	r2, [r7, #0]
 8006b22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	601a      	str	r2, [r3, #0]
}
 8006b34:	bf00      	nop
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	6892      	ldr	r2, [r2, #8]
 8006b56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6852      	ldr	r2, [r2, #4]
 8006b60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d103      	bne.n	8006b74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	1e5a      	subs	r2, r3, #1
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08e      	sub	sp, #56	; 0x38
 8006b98:	af04      	add	r7, sp, #16
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
 8006ba0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10c      	bne.n	8006bc2 <xTaskCreateStatic+0x2e>
	__asm volatile
 8006ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bac:	b672      	cpsid	i
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	b662      	cpsie	i
 8006bbc:	623b      	str	r3, [r7, #32]
}
 8006bbe:	bf00      	nop
 8006bc0:	e7fe      	b.n	8006bc0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10c      	bne.n	8006be2 <xTaskCreateStatic+0x4e>
	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	b672      	cpsid	i
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	b662      	cpsie	i
 8006bdc:	61fb      	str	r3, [r7, #28]
}
 8006bde:	bf00      	nop
 8006be0:	e7fe      	b.n	8006be0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006be2:	23a0      	movs	r3, #160	; 0xa0
 8006be4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	2ba0      	cmp	r3, #160	; 0xa0
 8006bea:	d00c      	beq.n	8006c06 <xTaskCreateStatic+0x72>
	__asm volatile
 8006bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf0:	b672      	cpsid	i
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	b662      	cpsie	i
 8006c00:	61bb      	str	r3, [r7, #24]
}
 8006c02:	bf00      	nop
 8006c04:	e7fe      	b.n	8006c04 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d01e      	beq.n	8006c4c <xTaskCreateStatic+0xb8>
 8006c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d01b      	beq.n	8006c4c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	2202      	movs	r2, #2
 8006c22:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c26:	2300      	movs	r3, #0
 8006c28:	9303      	str	r3, [sp, #12]
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	9302      	str	r3, [sp, #8]
 8006c2e:	f107 0314 	add.w	r3, r7, #20
 8006c32:	9301      	str	r3, [sp, #4]
 8006c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 f850 	bl	8006ce4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c46:	f000 f8ed 	bl	8006e24 <prvAddNewTaskToReadyList>
 8006c4a:	e001      	b.n	8006c50 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c50:	697b      	ldr	r3, [r7, #20]
	}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3728      	adds	r7, #40	; 0x28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b08c      	sub	sp, #48	; 0x30
 8006c5e:	af04      	add	r7, sp, #16
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	603b      	str	r3, [r7, #0]
 8006c66:	4613      	mov	r3, r2
 8006c68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c6a:	88fb      	ldrh	r3, [r7, #6]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 ff0c 	bl	8007a8c <pvPortMalloc>
 8006c74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00e      	beq.n	8006c9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c7c:	20a0      	movs	r0, #160	; 0xa0
 8006c7e:	f000 ff05 	bl	8007a8c <pvPortMalloc>
 8006c82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	631a      	str	r2, [r3, #48]	; 0x30
 8006c90:	e005      	b.n	8006c9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c92:	6978      	ldr	r0, [r7, #20]
 8006c94:	f000 ffc4 	bl	8007c20 <vPortFree>
 8006c98:	e001      	b.n	8006c9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d017      	beq.n	8006cd4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cac:	88fa      	ldrh	r2, [r7, #6]
 8006cae:	2300      	movs	r3, #0
 8006cb0:	9303      	str	r3, [sp, #12]
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	9302      	str	r3, [sp, #8]
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	9301      	str	r3, [sp, #4]
 8006cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	68b9      	ldr	r1, [r7, #8]
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 f80e 	bl	8006ce4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cc8:	69f8      	ldr	r0, [r7, #28]
 8006cca:	f000 f8ab 	bl	8006e24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	61bb      	str	r3, [r7, #24]
 8006cd2:	e002      	b.n	8006cda <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cd8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006cda:	69bb      	ldr	r3, [r7, #24]
	}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3720      	adds	r7, #32
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b088      	sub	sp, #32
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cf6:	6879      	ldr	r1, [r7, #4]
 8006cf8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006cfc:	440b      	add	r3, r1
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	f023 0307 	bic.w	r3, r3, #7
 8006d0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	f003 0307 	and.w	r3, r3, #7
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00c      	beq.n	8006d30 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1a:	b672      	cpsid	i
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	b662      	cpsie	i
 8006d2a:	617b      	str	r3, [r7, #20]
}
 8006d2c:	bf00      	nop
 8006d2e:	e7fe      	b.n	8006d2e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d01f      	beq.n	8006d76 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d36:	2300      	movs	r3, #0
 8006d38:	61fb      	str	r3, [r7, #28]
 8006d3a:	e012      	b.n	8006d62 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	4413      	add	r3, r2
 8006d42:	7819      	ldrb	r1, [r3, #0]
 8006d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	4413      	add	r3, r2
 8006d4a:	3334      	adds	r3, #52	; 0x34
 8006d4c:	460a      	mov	r2, r1
 8006d4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	4413      	add	r3, r2
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d006      	beq.n	8006d6a <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	61fb      	str	r3, [r7, #28]
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	2b0f      	cmp	r3, #15
 8006d66:	d9e9      	bls.n	8006d3c <prvInitialiseNewTask+0x58>
 8006d68:	e000      	b.n	8006d6c <prvInitialiseNewTask+0x88>
			{
				break;
 8006d6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d74:	e003      	b.n	8006d7e <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d80:	2b06      	cmp	r3, #6
 8006d82:	d901      	bls.n	8006d88 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d84:	2306      	movs	r3, #6
 8006d86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d92:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d96:	2200      	movs	r2, #0
 8006d98:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff fe64 	bl	8006a6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	3318      	adds	r3, #24
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7ff fe5f 	bl	8006a6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006db2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db6:	f1c3 0207 	rsb	r2, r3, #7
 8006dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dc2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	334c      	adds	r3, #76	; 0x4c
 8006dd8:	224c      	movs	r2, #76	; 0x4c
 8006dda:	2100      	movs	r1, #0
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f00d fce9 	bl	80147b4 <memset>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	4a0c      	ldr	r2, [pc, #48]	; (8006e18 <prvInitialiseNewTask+0x134>)
 8006de6:	651a      	str	r2, [r3, #80]	; 0x50
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	4a0c      	ldr	r2, [pc, #48]	; (8006e1c <prvInitialiseNewTask+0x138>)
 8006dec:	655a      	str	r2, [r3, #84]	; 0x54
 8006dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df0:	4a0b      	ldr	r2, [pc, #44]	; (8006e20 <prvInitialiseNewTask+0x13c>)
 8006df2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	68f9      	ldr	r1, [r7, #12]
 8006df8:	69b8      	ldr	r0, [r7, #24]
 8006dfa:	f000 fc55 	bl	80076a8 <pxPortInitialiseStack>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e02:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d002      	beq.n	8006e10 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e10:	bf00      	nop
 8006e12:	3720      	adds	r7, #32
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	20010e6c 	.word	0x20010e6c
 8006e1c:	20010ed4 	.word	0x20010ed4
 8006e20:	20010f3c 	.word	0x20010f3c

08006e24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e2c:	f000 fd46 	bl	80078bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e30:	4b2a      	ldr	r3, [pc, #168]	; (8006edc <prvAddNewTaskToReadyList+0xb8>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3301      	adds	r3, #1
 8006e36:	4a29      	ldr	r2, [pc, #164]	; (8006edc <prvAddNewTaskToReadyList+0xb8>)
 8006e38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e3a:	4b29      	ldr	r3, [pc, #164]	; (8006ee0 <prvAddNewTaskToReadyList+0xbc>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d109      	bne.n	8006e56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e42:	4a27      	ldr	r2, [pc, #156]	; (8006ee0 <prvAddNewTaskToReadyList+0xbc>)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e48:	4b24      	ldr	r3, [pc, #144]	; (8006edc <prvAddNewTaskToReadyList+0xb8>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d110      	bne.n	8006e72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e50:	f000 fb00 	bl	8007454 <prvInitialiseTaskLists>
 8006e54:	e00d      	b.n	8006e72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e56:	4b23      	ldr	r3, [pc, #140]	; (8006ee4 <prvAddNewTaskToReadyList+0xc0>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d109      	bne.n	8006e72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e5e:	4b20      	ldr	r3, [pc, #128]	; (8006ee0 <prvAddNewTaskToReadyList+0xbc>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d802      	bhi.n	8006e72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e6c:	4a1c      	ldr	r2, [pc, #112]	; (8006ee0 <prvAddNewTaskToReadyList+0xbc>)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e72:	4b1d      	ldr	r3, [pc, #116]	; (8006ee8 <prvAddNewTaskToReadyList+0xc4>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3301      	adds	r3, #1
 8006e78:	4a1b      	ldr	r2, [pc, #108]	; (8006ee8 <prvAddNewTaskToReadyList+0xc4>)
 8006e7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e80:	2201      	movs	r2, #1
 8006e82:	409a      	lsls	r2, r3
 8006e84:	4b19      	ldr	r3, [pc, #100]	; (8006eec <prvAddNewTaskToReadyList+0xc8>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	4a18      	ldr	r2, [pc, #96]	; (8006eec <prvAddNewTaskToReadyList+0xc8>)
 8006e8c:	6013      	str	r3, [r2, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e92:	4613      	mov	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4a15      	ldr	r2, [pc, #84]	; (8006ef0 <prvAddNewTaskToReadyList+0xcc>)
 8006e9c:	441a      	add	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	3304      	adds	r3, #4
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	f7ff fdee 	bl	8006a86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006eaa:	f000 fd3b 	bl	8007924 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006eae:	4b0d      	ldr	r3, [pc, #52]	; (8006ee4 <prvAddNewTaskToReadyList+0xc0>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00e      	beq.n	8006ed4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006eb6:	4b0a      	ldr	r3, [pc, #40]	; (8006ee0 <prvAddNewTaskToReadyList+0xbc>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d207      	bcs.n	8006ed4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ec4:	4b0b      	ldr	r3, [pc, #44]	; (8006ef4 <prvAddNewTaskToReadyList+0xd0>)
 8006ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ed4:	bf00      	nop
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	20008674 	.word	0x20008674
 8006ee0:	20008574 	.word	0x20008574
 8006ee4:	20008680 	.word	0x20008680
 8006ee8:	20008690 	.word	0x20008690
 8006eec:	2000867c 	.word	0x2000867c
 8006ef0:	20008578 	.word	0x20008578
 8006ef4:	e000ed04 	.word	0xe000ed04

08006ef8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f00:	2300      	movs	r3, #0
 8006f02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d019      	beq.n	8006f3e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f0a:	4b14      	ldr	r3, [pc, #80]	; (8006f5c <vTaskDelay+0x64>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00c      	beq.n	8006f2c <vTaskDelay+0x34>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	b672      	cpsid	i
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	b662      	cpsie	i
 8006f26:	60bb      	str	r3, [r7, #8]
}
 8006f28:	bf00      	nop
 8006f2a:	e7fe      	b.n	8006f2a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006f2c:	f000 f888 	bl	8007040 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f30:	2100      	movs	r1, #0
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fb52 	bl	80075dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f38:	f000 f890 	bl	800705c <xTaskResumeAll>
 8006f3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d107      	bne.n	8006f54 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006f44:	4b06      	ldr	r3, [pc, #24]	; (8006f60 <vTaskDelay+0x68>)
 8006f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f54:	bf00      	nop
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	2000869c 	.word	0x2000869c
 8006f60:	e000ed04 	.word	0xe000ed04

08006f64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b08a      	sub	sp, #40	; 0x28
 8006f68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f72:	463a      	mov	r2, r7
 8006f74:	1d39      	adds	r1, r7, #4
 8006f76:	f107 0308 	add.w	r3, r7, #8
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7f9 ff94 	bl	8000ea8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	9202      	str	r2, [sp, #8]
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	2300      	movs	r3, #0
 8006f90:	460a      	mov	r2, r1
 8006f92:	4923      	ldr	r1, [pc, #140]	; (8007020 <vTaskStartScheduler+0xbc>)
 8006f94:	4823      	ldr	r0, [pc, #140]	; (8007024 <vTaskStartScheduler+0xc0>)
 8006f96:	f7ff fdfd 	bl	8006b94 <xTaskCreateStatic>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	4a22      	ldr	r2, [pc, #136]	; (8007028 <vTaskStartScheduler+0xc4>)
 8006f9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006fa0:	4b21      	ldr	r3, [pc, #132]	; (8007028 <vTaskStartScheduler+0xc4>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d002      	beq.n	8006fae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	e001      	b.n	8006fb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d11d      	bne.n	8006ff4 <vTaskStartScheduler+0x90>
	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbc:	b672      	cpsid	i
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	b662      	cpsie	i
 8006fcc:	613b      	str	r3, [r7, #16]
}
 8006fce:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006fd0:	4b16      	ldr	r3, [pc, #88]	; (800702c <vTaskStartScheduler+0xc8>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	334c      	adds	r3, #76	; 0x4c
 8006fd6:	4a16      	ldr	r2, [pc, #88]	; (8007030 <vTaskStartScheduler+0xcc>)
 8006fd8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006fda:	4b16      	ldr	r3, [pc, #88]	; (8007034 <vTaskStartScheduler+0xd0>)
 8006fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fe0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006fe2:	4b15      	ldr	r3, [pc, #84]	; (8007038 <vTaskStartScheduler+0xd4>)
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006fe8:	4b14      	ldr	r3, [pc, #80]	; (800703c <vTaskStartScheduler+0xd8>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006fee:	f000 fbe7 	bl	80077c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ff2:	e010      	b.n	8007016 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ffa:	d10c      	bne.n	8007016 <vTaskStartScheduler+0xb2>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	b672      	cpsid	i
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	b662      	cpsie	i
 8007010:	60fb      	str	r3, [r7, #12]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <vTaskStartScheduler+0xb0>
}
 8007016:	bf00      	nop
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	080157a4 	.word	0x080157a4
 8007024:	08007425 	.word	0x08007425
 8007028:	20008698 	.word	0x20008698
 800702c:	20008574 	.word	0x20008574
 8007030:	20000254 	.word	0x20000254
 8007034:	20008694 	.word	0x20008694
 8007038:	20008680 	.word	0x20008680
 800703c:	20008678 	.word	0x20008678

08007040 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007040:	b480      	push	{r7}
 8007042:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007044:	4b04      	ldr	r3, [pc, #16]	; (8007058 <vTaskSuspendAll+0x18>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3301      	adds	r3, #1
 800704a:	4a03      	ldr	r2, [pc, #12]	; (8007058 <vTaskSuspendAll+0x18>)
 800704c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800704e:	bf00      	nop
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	2000869c 	.word	0x2000869c

0800705c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007062:	2300      	movs	r3, #0
 8007064:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007066:	2300      	movs	r3, #0
 8007068:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800706a:	4b42      	ldr	r3, [pc, #264]	; (8007174 <xTaskResumeAll+0x118>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10c      	bne.n	800708c <xTaskResumeAll+0x30>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007076:	b672      	cpsid	i
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	b662      	cpsie	i
 8007086:	603b      	str	r3, [r7, #0]
}
 8007088:	bf00      	nop
 800708a:	e7fe      	b.n	800708a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800708c:	f000 fc16 	bl	80078bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007090:	4b38      	ldr	r3, [pc, #224]	; (8007174 <xTaskResumeAll+0x118>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3b01      	subs	r3, #1
 8007096:	4a37      	ldr	r2, [pc, #220]	; (8007174 <xTaskResumeAll+0x118>)
 8007098:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800709a:	4b36      	ldr	r3, [pc, #216]	; (8007174 <xTaskResumeAll+0x118>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d161      	bne.n	8007166 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070a2:	4b35      	ldr	r3, [pc, #212]	; (8007178 <xTaskResumeAll+0x11c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d05d      	beq.n	8007166 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070aa:	e02e      	b.n	800710a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ac:	4b33      	ldr	r3, [pc, #204]	; (800717c <xTaskResumeAll+0x120>)
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3318      	adds	r3, #24
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7ff fd41 	bl	8006b40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3304      	adds	r3, #4
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7ff fd3c 	bl	8006b40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070cc:	2201      	movs	r2, #1
 80070ce:	409a      	lsls	r2, r3
 80070d0:	4b2b      	ldr	r3, [pc, #172]	; (8007180 <xTaskResumeAll+0x124>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	4a2a      	ldr	r2, [pc, #168]	; (8007180 <xTaskResumeAll+0x124>)
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070de:	4613      	mov	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4a27      	ldr	r2, [pc, #156]	; (8007184 <xTaskResumeAll+0x128>)
 80070e8:	441a      	add	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	3304      	adds	r3, #4
 80070ee:	4619      	mov	r1, r3
 80070f0:	4610      	mov	r0, r2
 80070f2:	f7ff fcc8 	bl	8006a86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fa:	4b23      	ldr	r3, [pc, #140]	; (8007188 <xTaskResumeAll+0x12c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007100:	429a      	cmp	r2, r3
 8007102:	d302      	bcc.n	800710a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007104:	4b21      	ldr	r3, [pc, #132]	; (800718c <xTaskResumeAll+0x130>)
 8007106:	2201      	movs	r2, #1
 8007108:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800710a:	4b1c      	ldr	r3, [pc, #112]	; (800717c <xTaskResumeAll+0x120>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1cc      	bne.n	80070ac <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007118:	f000 fa40 	bl	800759c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800711c:	4b1c      	ldr	r3, [pc, #112]	; (8007190 <xTaskResumeAll+0x134>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d010      	beq.n	800714a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007128:	f000 f836 	bl	8007198 <xTaskIncrementTick>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d002      	beq.n	8007138 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007132:	4b16      	ldr	r3, [pc, #88]	; (800718c <xTaskResumeAll+0x130>)
 8007134:	2201      	movs	r2, #1
 8007136:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	3b01      	subs	r3, #1
 800713c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1f1      	bne.n	8007128 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007144:	4b12      	ldr	r3, [pc, #72]	; (8007190 <xTaskResumeAll+0x134>)
 8007146:	2200      	movs	r2, #0
 8007148:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800714a:	4b10      	ldr	r3, [pc, #64]	; (800718c <xTaskResumeAll+0x130>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d009      	beq.n	8007166 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007152:	2301      	movs	r3, #1
 8007154:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007156:	4b0f      	ldr	r3, [pc, #60]	; (8007194 <xTaskResumeAll+0x138>)
 8007158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800715c:	601a      	str	r2, [r3, #0]
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007166:	f000 fbdd 	bl	8007924 <vPortExitCritical>

	return xAlreadyYielded;
 800716a:	68bb      	ldr	r3, [r7, #8]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	2000869c 	.word	0x2000869c
 8007178:	20008674 	.word	0x20008674
 800717c:	20008634 	.word	0x20008634
 8007180:	2000867c 	.word	0x2000867c
 8007184:	20008578 	.word	0x20008578
 8007188:	20008574 	.word	0x20008574
 800718c:	20008688 	.word	0x20008688
 8007190:	20008684 	.word	0x20008684
 8007194:	e000ed04 	.word	0xe000ed04

08007198 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800719e:	2300      	movs	r3, #0
 80071a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071a2:	4b4f      	ldr	r3, [pc, #316]	; (80072e0 <xTaskIncrementTick+0x148>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f040 808a 	bne.w	80072c0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80071ac:	4b4d      	ldr	r3, [pc, #308]	; (80072e4 <xTaskIncrementTick+0x14c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	3301      	adds	r3, #1
 80071b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80071b4:	4a4b      	ldr	r2, [pc, #300]	; (80072e4 <xTaskIncrementTick+0x14c>)
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d122      	bne.n	8007206 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80071c0:	4b49      	ldr	r3, [pc, #292]	; (80072e8 <xTaskIncrementTick+0x150>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00c      	beq.n	80071e4 <xTaskIncrementTick+0x4c>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ce:	b672      	cpsid	i
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	b662      	cpsie	i
 80071de:	603b      	str	r3, [r7, #0]
}
 80071e0:	bf00      	nop
 80071e2:	e7fe      	b.n	80071e2 <xTaskIncrementTick+0x4a>
 80071e4:	4b40      	ldr	r3, [pc, #256]	; (80072e8 <xTaskIncrementTick+0x150>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	60fb      	str	r3, [r7, #12]
 80071ea:	4b40      	ldr	r3, [pc, #256]	; (80072ec <xTaskIncrementTick+0x154>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a3e      	ldr	r2, [pc, #248]	; (80072e8 <xTaskIncrementTick+0x150>)
 80071f0:	6013      	str	r3, [r2, #0]
 80071f2:	4a3e      	ldr	r2, [pc, #248]	; (80072ec <xTaskIncrementTick+0x154>)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6013      	str	r3, [r2, #0]
 80071f8:	4b3d      	ldr	r3, [pc, #244]	; (80072f0 <xTaskIncrementTick+0x158>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3301      	adds	r3, #1
 80071fe:	4a3c      	ldr	r2, [pc, #240]	; (80072f0 <xTaskIncrementTick+0x158>)
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	f000 f9cb 	bl	800759c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007206:	4b3b      	ldr	r3, [pc, #236]	; (80072f4 <xTaskIncrementTick+0x15c>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	429a      	cmp	r2, r3
 800720e:	d348      	bcc.n	80072a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007210:	4b35      	ldr	r3, [pc, #212]	; (80072e8 <xTaskIncrementTick+0x150>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d104      	bne.n	8007224 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800721a:	4b36      	ldr	r3, [pc, #216]	; (80072f4 <xTaskIncrementTick+0x15c>)
 800721c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007220:	601a      	str	r2, [r3, #0]
					break;
 8007222:	e03e      	b.n	80072a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007224:	4b30      	ldr	r3, [pc, #192]	; (80072e8 <xTaskIncrementTick+0x150>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	429a      	cmp	r2, r3
 800723a:	d203      	bcs.n	8007244 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800723c:	4a2d      	ldr	r2, [pc, #180]	; (80072f4 <xTaskIncrementTick+0x15c>)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007242:	e02e      	b.n	80072a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	3304      	adds	r3, #4
 8007248:	4618      	mov	r0, r3
 800724a:	f7ff fc79 	bl	8006b40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007252:	2b00      	cmp	r3, #0
 8007254:	d004      	beq.n	8007260 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	3318      	adds	r3, #24
 800725a:	4618      	mov	r0, r3
 800725c:	f7ff fc70 	bl	8006b40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	2201      	movs	r2, #1
 8007266:	409a      	lsls	r2, r3
 8007268:	4b23      	ldr	r3, [pc, #140]	; (80072f8 <xTaskIncrementTick+0x160>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4313      	orrs	r3, r2
 800726e:	4a22      	ldr	r2, [pc, #136]	; (80072f8 <xTaskIncrementTick+0x160>)
 8007270:	6013      	str	r3, [r2, #0]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007276:	4613      	mov	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	4a1f      	ldr	r2, [pc, #124]	; (80072fc <xTaskIncrementTick+0x164>)
 8007280:	441a      	add	r2, r3
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	3304      	adds	r3, #4
 8007286:	4619      	mov	r1, r3
 8007288:	4610      	mov	r0, r2
 800728a:	f7ff fbfc 	bl	8006a86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007292:	4b1b      	ldr	r3, [pc, #108]	; (8007300 <xTaskIncrementTick+0x168>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007298:	429a      	cmp	r2, r3
 800729a:	d3b9      	bcc.n	8007210 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800729c:	2301      	movs	r3, #1
 800729e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072a0:	e7b6      	b.n	8007210 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80072a2:	4b17      	ldr	r3, [pc, #92]	; (8007300 <xTaskIncrementTick+0x168>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a8:	4914      	ldr	r1, [pc, #80]	; (80072fc <xTaskIncrementTick+0x164>)
 80072aa:	4613      	mov	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	440b      	add	r3, r1
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d907      	bls.n	80072ca <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80072ba:	2301      	movs	r3, #1
 80072bc:	617b      	str	r3, [r7, #20]
 80072be:	e004      	b.n	80072ca <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80072c0:	4b10      	ldr	r3, [pc, #64]	; (8007304 <xTaskIncrementTick+0x16c>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3301      	adds	r3, #1
 80072c6:	4a0f      	ldr	r2, [pc, #60]	; (8007304 <xTaskIncrementTick+0x16c>)
 80072c8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80072ca:	4b0f      	ldr	r3, [pc, #60]	; (8007308 <xTaskIncrementTick+0x170>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80072d2:	2301      	movs	r3, #1
 80072d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80072d6:	697b      	ldr	r3, [r7, #20]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	2000869c 	.word	0x2000869c
 80072e4:	20008678 	.word	0x20008678
 80072e8:	2000862c 	.word	0x2000862c
 80072ec:	20008630 	.word	0x20008630
 80072f0:	2000868c 	.word	0x2000868c
 80072f4:	20008694 	.word	0x20008694
 80072f8:	2000867c 	.word	0x2000867c
 80072fc:	20008578 	.word	0x20008578
 8007300:	20008574 	.word	0x20008574
 8007304:	20008684 	.word	0x20008684
 8007308:	20008688 	.word	0x20008688

0800730c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800730c:	b480      	push	{r7}
 800730e:	b087      	sub	sp, #28
 8007310:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007312:	4b2a      	ldr	r3, [pc, #168]	; (80073bc <vTaskSwitchContext+0xb0>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800731a:	4b29      	ldr	r3, [pc, #164]	; (80073c0 <vTaskSwitchContext+0xb4>)
 800731c:	2201      	movs	r2, #1
 800731e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007320:	e046      	b.n	80073b0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007322:	4b27      	ldr	r3, [pc, #156]	; (80073c0 <vTaskSwitchContext+0xb4>)
 8007324:	2200      	movs	r2, #0
 8007326:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007328:	4b26      	ldr	r3, [pc, #152]	; (80073c4 <vTaskSwitchContext+0xb8>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	fab3 f383 	clz	r3, r3
 8007334:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007336:	7afb      	ldrb	r3, [r7, #11]
 8007338:	f1c3 031f 	rsb	r3, r3, #31
 800733c:	617b      	str	r3, [r7, #20]
 800733e:	4922      	ldr	r1, [pc, #136]	; (80073c8 <vTaskSwitchContext+0xbc>)
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	4613      	mov	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4413      	add	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	440b      	add	r3, r1
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10c      	bne.n	800736c <vTaskSwitchContext+0x60>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	b672      	cpsid	i
 8007358:	f383 8811 	msr	BASEPRI, r3
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	b662      	cpsie	i
 8007366:	607b      	str	r3, [r7, #4]
}
 8007368:	bf00      	nop
 800736a:	e7fe      	b.n	800736a <vTaskSwitchContext+0x5e>
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	4613      	mov	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4413      	add	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4a14      	ldr	r2, [pc, #80]	; (80073c8 <vTaskSwitchContext+0xbc>)
 8007378:	4413      	add	r3, r2
 800737a:	613b      	str	r3, [r7, #16]
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	605a      	str	r2, [r3, #4]
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	3308      	adds	r3, #8
 800738e:	429a      	cmp	r2, r3
 8007390:	d104      	bne.n	800739c <vTaskSwitchContext+0x90>
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	685a      	ldr	r2, [r3, #4]
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	605a      	str	r2, [r3, #4]
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	4a0a      	ldr	r2, [pc, #40]	; (80073cc <vTaskSwitchContext+0xc0>)
 80073a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80073a6:	4b09      	ldr	r3, [pc, #36]	; (80073cc <vTaskSwitchContext+0xc0>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	334c      	adds	r3, #76	; 0x4c
 80073ac:	4a08      	ldr	r2, [pc, #32]	; (80073d0 <vTaskSwitchContext+0xc4>)
 80073ae:	6013      	str	r3, [r2, #0]
}
 80073b0:	bf00      	nop
 80073b2:	371c      	adds	r7, #28
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	2000869c 	.word	0x2000869c
 80073c0:	20008688 	.word	0x20008688
 80073c4:	2000867c 	.word	0x2000867c
 80073c8:	20008578 	.word	0x20008578
 80073cc:	20008574 	.word	0x20008574
 80073d0:	20000254 	.word	0x20000254

080073d4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10c      	bne.n	80073fc <vTaskSetTimeOutState+0x28>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	b672      	cpsid	i
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	b662      	cpsie	i
 80073f6:	60fb      	str	r3, [r7, #12]
}
 80073f8:	bf00      	nop
 80073fa:	e7fe      	b.n	80073fa <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 80073fc:	f000 fa5e 	bl	80078bc <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007400:	4b06      	ldr	r3, [pc, #24]	; (800741c <vTaskSetTimeOutState+0x48>)
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007408:	4b05      	ldr	r3, [pc, #20]	; (8007420 <vTaskSetTimeOutState+0x4c>)
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007410:	f000 fa88 	bl	8007924 <vPortExitCritical>
}
 8007414:	bf00      	nop
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	2000868c 	.word	0x2000868c
 8007420:	20008678 	.word	0x20008678

08007424 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800742c:	f000 f852 	bl	80074d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007430:	4b06      	ldr	r3, [pc, #24]	; (800744c <prvIdleTask+0x28>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d9f9      	bls.n	800742c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007438:	4b05      	ldr	r3, [pc, #20]	; (8007450 <prvIdleTask+0x2c>)
 800743a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800743e:	601a      	str	r2, [r3, #0]
 8007440:	f3bf 8f4f 	dsb	sy
 8007444:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007448:	e7f0      	b.n	800742c <prvIdleTask+0x8>
 800744a:	bf00      	nop
 800744c:	20008578 	.word	0x20008578
 8007450:	e000ed04 	.word	0xe000ed04

08007454 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800745a:	2300      	movs	r3, #0
 800745c:	607b      	str	r3, [r7, #4]
 800745e:	e00c      	b.n	800747a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	4613      	mov	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4a12      	ldr	r2, [pc, #72]	; (80074b4 <prvInitialiseTaskLists+0x60>)
 800746c:	4413      	add	r3, r2
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff fadc 	bl	8006a2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	3301      	adds	r3, #1
 8007478:	607b      	str	r3, [r7, #4]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2b06      	cmp	r3, #6
 800747e:	d9ef      	bls.n	8007460 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007480:	480d      	ldr	r0, [pc, #52]	; (80074b8 <prvInitialiseTaskLists+0x64>)
 8007482:	f7ff fad3 	bl	8006a2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007486:	480d      	ldr	r0, [pc, #52]	; (80074bc <prvInitialiseTaskLists+0x68>)
 8007488:	f7ff fad0 	bl	8006a2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800748c:	480c      	ldr	r0, [pc, #48]	; (80074c0 <prvInitialiseTaskLists+0x6c>)
 800748e:	f7ff facd 	bl	8006a2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007492:	480c      	ldr	r0, [pc, #48]	; (80074c4 <prvInitialiseTaskLists+0x70>)
 8007494:	f7ff faca 	bl	8006a2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007498:	480b      	ldr	r0, [pc, #44]	; (80074c8 <prvInitialiseTaskLists+0x74>)
 800749a:	f7ff fac7 	bl	8006a2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800749e:	4b0b      	ldr	r3, [pc, #44]	; (80074cc <prvInitialiseTaskLists+0x78>)
 80074a0:	4a05      	ldr	r2, [pc, #20]	; (80074b8 <prvInitialiseTaskLists+0x64>)
 80074a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074a4:	4b0a      	ldr	r3, [pc, #40]	; (80074d0 <prvInitialiseTaskLists+0x7c>)
 80074a6:	4a05      	ldr	r2, [pc, #20]	; (80074bc <prvInitialiseTaskLists+0x68>)
 80074a8:	601a      	str	r2, [r3, #0]
}
 80074aa:	bf00      	nop
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	20008578 	.word	0x20008578
 80074b8:	20008604 	.word	0x20008604
 80074bc:	20008618 	.word	0x20008618
 80074c0:	20008634 	.word	0x20008634
 80074c4:	20008648 	.word	0x20008648
 80074c8:	20008660 	.word	0x20008660
 80074cc:	2000862c 	.word	0x2000862c
 80074d0:	20008630 	.word	0x20008630

080074d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074da:	e019      	b.n	8007510 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074dc:	f000 f9ee 	bl	80078bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074e0:	4b10      	ldr	r3, [pc, #64]	; (8007524 <prvCheckTasksWaitingTermination+0x50>)
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3304      	adds	r3, #4
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7ff fb27 	bl	8006b40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074f2:	4b0d      	ldr	r3, [pc, #52]	; (8007528 <prvCheckTasksWaitingTermination+0x54>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3b01      	subs	r3, #1
 80074f8:	4a0b      	ldr	r2, [pc, #44]	; (8007528 <prvCheckTasksWaitingTermination+0x54>)
 80074fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074fc:	4b0b      	ldr	r3, [pc, #44]	; (800752c <prvCheckTasksWaitingTermination+0x58>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3b01      	subs	r3, #1
 8007502:	4a0a      	ldr	r2, [pc, #40]	; (800752c <prvCheckTasksWaitingTermination+0x58>)
 8007504:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007506:	f000 fa0d 	bl	8007924 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f810 	bl	8007530 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007510:	4b06      	ldr	r3, [pc, #24]	; (800752c <prvCheckTasksWaitingTermination+0x58>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e1      	bne.n	80074dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007518:	bf00      	nop
 800751a:	bf00      	nop
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	20008648 	.word	0x20008648
 8007528:	20008674 	.word	0x20008674
 800752c:	2000865c 	.word	0x2000865c

08007530 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	334c      	adds	r3, #76	; 0x4c
 800753c:	4618      	mov	r0, r3
 800753e:	f00d f987 	bl	8014850 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007548:	2b00      	cmp	r3, #0
 800754a:	d108      	bne.n	800755e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007550:	4618      	mov	r0, r3
 8007552:	f000 fb65 	bl	8007c20 <vPortFree>
				vPortFree( pxTCB );
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fb62 	bl	8007c20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800755c:	e01a      	b.n	8007594 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007564:	2b01      	cmp	r3, #1
 8007566:	d103      	bne.n	8007570 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fb59 	bl	8007c20 <vPortFree>
	}
 800756e:	e011      	b.n	8007594 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007576:	2b02      	cmp	r3, #2
 8007578:	d00c      	beq.n	8007594 <prvDeleteTCB+0x64>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757e:	b672      	cpsid	i
 8007580:	f383 8811 	msr	BASEPRI, r3
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	b662      	cpsie	i
 800758e:	60fb      	str	r3, [r7, #12]
}
 8007590:	bf00      	nop
 8007592:	e7fe      	b.n	8007592 <prvDeleteTCB+0x62>
	}
 8007594:	bf00      	nop
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075a2:	4b0c      	ldr	r3, [pc, #48]	; (80075d4 <prvResetNextTaskUnblockTime+0x38>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d104      	bne.n	80075b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80075ac:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <prvResetNextTaskUnblockTime+0x3c>)
 80075ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80075b4:	e008      	b.n	80075c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075b6:	4b07      	ldr	r3, [pc, #28]	; (80075d4 <prvResetNextTaskUnblockTime+0x38>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	4a04      	ldr	r2, [pc, #16]	; (80075d8 <prvResetNextTaskUnblockTime+0x3c>)
 80075c6:	6013      	str	r3, [r2, #0]
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	2000862c 	.word	0x2000862c
 80075d8:	20008694 	.word	0x20008694

080075dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075e6:	4b29      	ldr	r3, [pc, #164]	; (800768c <prvAddCurrentTaskToDelayedList+0xb0>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075ec:	4b28      	ldr	r3, [pc, #160]	; (8007690 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	3304      	adds	r3, #4
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7ff faa4 	bl	8006b40 <uxListRemove>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10b      	bne.n	8007616 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80075fe:	4b24      	ldr	r3, [pc, #144]	; (8007690 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007604:	2201      	movs	r2, #1
 8007606:	fa02 f303 	lsl.w	r3, r2, r3
 800760a:	43da      	mvns	r2, r3
 800760c:	4b21      	ldr	r3, [pc, #132]	; (8007694 <prvAddCurrentTaskToDelayedList+0xb8>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4013      	ands	r3, r2
 8007612:	4a20      	ldr	r2, [pc, #128]	; (8007694 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007614:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800761c:	d10a      	bne.n	8007634 <prvAddCurrentTaskToDelayedList+0x58>
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d007      	beq.n	8007634 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007624:	4b1a      	ldr	r3, [pc, #104]	; (8007690 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	3304      	adds	r3, #4
 800762a:	4619      	mov	r1, r3
 800762c:	481a      	ldr	r0, [pc, #104]	; (8007698 <prvAddCurrentTaskToDelayedList+0xbc>)
 800762e:	f7ff fa2a 	bl	8006a86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007632:	e026      	b.n	8007682 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4413      	add	r3, r2
 800763a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800763c:	4b14      	ldr	r3, [pc, #80]	; (8007690 <prvAddCurrentTaskToDelayedList+0xb4>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	429a      	cmp	r2, r3
 800764a:	d209      	bcs.n	8007660 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800764c:	4b13      	ldr	r3, [pc, #76]	; (800769c <prvAddCurrentTaskToDelayedList+0xc0>)
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	4b0f      	ldr	r3, [pc, #60]	; (8007690 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3304      	adds	r3, #4
 8007656:	4619      	mov	r1, r3
 8007658:	4610      	mov	r0, r2
 800765a:	f7ff fa38 	bl	8006ace <vListInsert>
}
 800765e:	e010      	b.n	8007682 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007660:	4b0f      	ldr	r3, [pc, #60]	; (80076a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	4b0a      	ldr	r3, [pc, #40]	; (8007690 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	3304      	adds	r3, #4
 800766a:	4619      	mov	r1, r3
 800766c:	4610      	mov	r0, r2
 800766e:	f7ff fa2e 	bl	8006ace <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007672:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	429a      	cmp	r2, r3
 800767a:	d202      	bcs.n	8007682 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800767c:	4a09      	ldr	r2, [pc, #36]	; (80076a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	6013      	str	r3, [r2, #0]
}
 8007682:	bf00      	nop
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	20008678 	.word	0x20008678
 8007690:	20008574 	.word	0x20008574
 8007694:	2000867c 	.word	0x2000867c
 8007698:	20008660 	.word	0x20008660
 800769c:	20008630 	.word	0x20008630
 80076a0:	2000862c 	.word	0x2000862c
 80076a4:	20008694 	.word	0x20008694

080076a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3b04      	subs	r3, #4
 80076b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80076c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	3b04      	subs	r3, #4
 80076c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f023 0201 	bic.w	r2, r3, #1
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3b04      	subs	r3, #4
 80076d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076d8:	4a0c      	ldr	r2, [pc, #48]	; (800770c <pxPortInitialiseStack+0x64>)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3b14      	subs	r3, #20
 80076e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	3b04      	subs	r3, #4
 80076ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f06f 0202 	mvn.w	r2, #2
 80076f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3b20      	subs	r3, #32
 80076fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076fe:	68fb      	ldr	r3, [r7, #12]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	08007711 	.word	0x08007711

08007710 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007716:	2300      	movs	r3, #0
 8007718:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800771a:	4b14      	ldr	r3, [pc, #80]	; (800776c <prvTaskExitError+0x5c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007722:	d00c      	beq.n	800773e <prvTaskExitError+0x2e>
	__asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007728:	b672      	cpsid	i
 800772a:	f383 8811 	msr	BASEPRI, r3
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f3bf 8f4f 	dsb	sy
 8007736:	b662      	cpsie	i
 8007738:	60fb      	str	r3, [r7, #12]
}
 800773a:	bf00      	nop
 800773c:	e7fe      	b.n	800773c <prvTaskExitError+0x2c>
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007742:	b672      	cpsid	i
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	b662      	cpsie	i
 8007752:	60bb      	str	r3, [r7, #8]
}
 8007754:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007756:	bf00      	nop
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0fc      	beq.n	8007758 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800775e:	bf00      	nop
 8007760:	bf00      	nop
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	20000010 	.word	0x20000010

08007770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007770:	4b07      	ldr	r3, [pc, #28]	; (8007790 <pxCurrentTCBConst2>)
 8007772:	6819      	ldr	r1, [r3, #0]
 8007774:	6808      	ldr	r0, [r1, #0]
 8007776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777a:	f380 8809 	msr	PSP, r0
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f04f 0000 	mov.w	r0, #0
 8007786:	f380 8811 	msr	BASEPRI, r0
 800778a:	4770      	bx	lr
 800778c:	f3af 8000 	nop.w

08007790 <pxCurrentTCBConst2>:
 8007790:	20008574 	.word	0x20008574
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007794:	bf00      	nop
 8007796:	bf00      	nop

08007798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007798:	4808      	ldr	r0, [pc, #32]	; (80077bc <prvPortStartFirstTask+0x24>)
 800779a:	6800      	ldr	r0, [r0, #0]
 800779c:	6800      	ldr	r0, [r0, #0]
 800779e:	f380 8808 	msr	MSP, r0
 80077a2:	f04f 0000 	mov.w	r0, #0
 80077a6:	f380 8814 	msr	CONTROL, r0
 80077aa:	b662      	cpsie	i
 80077ac:	b661      	cpsie	f
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	df00      	svc	0
 80077b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077ba:	bf00      	nop
 80077bc:	e000ed08 	.word	0xe000ed08

080077c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077c6:	4b37      	ldr	r3, [pc, #220]	; (80078a4 <xPortStartScheduler+0xe4>)
 80077c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	22ff      	movs	r2, #255	; 0xff
 80077d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077e0:	78fb      	ldrb	r3, [r7, #3]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	4b2f      	ldr	r3, [pc, #188]	; (80078a8 <xPortStartScheduler+0xe8>)
 80077ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077ee:	4b2f      	ldr	r3, [pc, #188]	; (80078ac <xPortStartScheduler+0xec>)
 80077f0:	2207      	movs	r2, #7
 80077f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077f4:	e009      	b.n	800780a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80077f6:	4b2d      	ldr	r3, [pc, #180]	; (80078ac <xPortStartScheduler+0xec>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	4a2b      	ldr	r2, [pc, #172]	; (80078ac <xPortStartScheduler+0xec>)
 80077fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007800:	78fb      	ldrb	r3, [r7, #3]
 8007802:	b2db      	uxtb	r3, r3
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	b2db      	uxtb	r3, r3
 8007808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800780a:	78fb      	ldrb	r3, [r7, #3]
 800780c:	b2db      	uxtb	r3, r3
 800780e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007812:	2b80      	cmp	r3, #128	; 0x80
 8007814:	d0ef      	beq.n	80077f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007816:	4b25      	ldr	r3, [pc, #148]	; (80078ac <xPortStartScheduler+0xec>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f1c3 0307 	rsb	r3, r3, #7
 800781e:	2b04      	cmp	r3, #4
 8007820:	d00c      	beq.n	800783c <xPortStartScheduler+0x7c>
	__asm volatile
 8007822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007826:	b672      	cpsid	i
 8007828:	f383 8811 	msr	BASEPRI, r3
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	b662      	cpsie	i
 8007836:	60bb      	str	r3, [r7, #8]
}
 8007838:	bf00      	nop
 800783a:	e7fe      	b.n	800783a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800783c:	4b1b      	ldr	r3, [pc, #108]	; (80078ac <xPortStartScheduler+0xec>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	021b      	lsls	r3, r3, #8
 8007842:	4a1a      	ldr	r2, [pc, #104]	; (80078ac <xPortStartScheduler+0xec>)
 8007844:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007846:	4b19      	ldr	r3, [pc, #100]	; (80078ac <xPortStartScheduler+0xec>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800784e:	4a17      	ldr	r2, [pc, #92]	; (80078ac <xPortStartScheduler+0xec>)
 8007850:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	b2da      	uxtb	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800785a:	4b15      	ldr	r3, [pc, #84]	; (80078b0 <xPortStartScheduler+0xf0>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a14      	ldr	r2, [pc, #80]	; (80078b0 <xPortStartScheduler+0xf0>)
 8007860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007864:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007866:	4b12      	ldr	r3, [pc, #72]	; (80078b0 <xPortStartScheduler+0xf0>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a11      	ldr	r2, [pc, #68]	; (80078b0 <xPortStartScheduler+0xf0>)
 800786c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007870:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007872:	f000 f8dd 	bl	8007a30 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007876:	4b0f      	ldr	r3, [pc, #60]	; (80078b4 <xPortStartScheduler+0xf4>)
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800787c:	f000 f8fc 	bl	8007a78 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007880:	4b0d      	ldr	r3, [pc, #52]	; (80078b8 <xPortStartScheduler+0xf8>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a0c      	ldr	r2, [pc, #48]	; (80078b8 <xPortStartScheduler+0xf8>)
 8007886:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800788a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800788c:	f7ff ff84 	bl	8007798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007890:	f7ff fd3c 	bl	800730c <vTaskSwitchContext>
	prvTaskExitError();
 8007894:	f7ff ff3c 	bl	8007710 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	e000e400 	.word	0xe000e400
 80078a8:	200086a0 	.word	0x200086a0
 80078ac:	200086a4 	.word	0x200086a4
 80078b0:	e000ed20 	.word	0xe000ed20
 80078b4:	20000010 	.word	0x20000010
 80078b8:	e000ef34 	.word	0xe000ef34

080078bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c6:	b672      	cpsid	i
 80078c8:	f383 8811 	msr	BASEPRI, r3
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	b662      	cpsie	i
 80078d6:	607b      	str	r3, [r7, #4]
}
 80078d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078da:	4b10      	ldr	r3, [pc, #64]	; (800791c <vPortEnterCritical+0x60>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3301      	adds	r3, #1
 80078e0:	4a0e      	ldr	r2, [pc, #56]	; (800791c <vPortEnterCritical+0x60>)
 80078e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80078e4:	4b0d      	ldr	r3, [pc, #52]	; (800791c <vPortEnterCritical+0x60>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d111      	bne.n	8007910 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80078ec:	4b0c      	ldr	r3, [pc, #48]	; (8007920 <vPortEnterCritical+0x64>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00c      	beq.n	8007910 <vPortEnterCritical+0x54>
	__asm volatile
 80078f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fa:	b672      	cpsid	i
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	b662      	cpsie	i
 800790a:	603b      	str	r3, [r7, #0]
}
 800790c:	bf00      	nop
 800790e:	e7fe      	b.n	800790e <vPortEnterCritical+0x52>
	}
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	20000010 	.word	0x20000010
 8007920:	e000ed04 	.word	0xe000ed04

08007924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800792a:	4b13      	ldr	r3, [pc, #76]	; (8007978 <vPortExitCritical+0x54>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10c      	bne.n	800794c <vPortExitCritical+0x28>
	__asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	b672      	cpsid	i
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	b662      	cpsie	i
 8007946:	607b      	str	r3, [r7, #4]
}
 8007948:	bf00      	nop
 800794a:	e7fe      	b.n	800794a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800794c:	4b0a      	ldr	r3, [pc, #40]	; (8007978 <vPortExitCritical+0x54>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3b01      	subs	r3, #1
 8007952:	4a09      	ldr	r2, [pc, #36]	; (8007978 <vPortExitCritical+0x54>)
 8007954:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007956:	4b08      	ldr	r3, [pc, #32]	; (8007978 <vPortExitCritical+0x54>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d105      	bne.n	800796a <vPortExitCritical+0x46>
 800795e:	2300      	movs	r3, #0
 8007960:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007968:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800796a:	bf00      	nop
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	20000010 	.word	0x20000010
 800797c:	00000000 	.word	0x00000000

08007980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007980:	f3ef 8009 	mrs	r0, PSP
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	4b15      	ldr	r3, [pc, #84]	; (80079e0 <pxCurrentTCBConst>)
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	f01e 0f10 	tst.w	lr, #16
 8007990:	bf08      	it	eq
 8007992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799a:	6010      	str	r0, [r2, #0]
 800799c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80079a4:	b672      	cpsid	i
 80079a6:	f380 8811 	msr	BASEPRI, r0
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	b662      	cpsie	i
 80079b4:	f7ff fcaa 	bl	800730c <vTaskSwitchContext>
 80079b8:	f04f 0000 	mov.w	r0, #0
 80079bc:	f380 8811 	msr	BASEPRI, r0
 80079c0:	bc09      	pop	{r0, r3}
 80079c2:	6819      	ldr	r1, [r3, #0]
 80079c4:	6808      	ldr	r0, [r1, #0]
 80079c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ca:	f01e 0f10 	tst.w	lr, #16
 80079ce:	bf08      	it	eq
 80079d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079d4:	f380 8809 	msr	PSP, r0
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop

080079e0 <pxCurrentTCBConst>:
 80079e0:	20008574 	.word	0x20008574
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80079e4:	bf00      	nop
 80079e6:	bf00      	nop

080079e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f2:	b672      	cpsid	i
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	b662      	cpsie	i
 8007a02:	607b      	str	r3, [r7, #4]
}
 8007a04:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a06:	f7ff fbc7 	bl	8007198 <xTaskIncrementTick>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d003      	beq.n	8007a18 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a10:	4b06      	ldr	r3, [pc, #24]	; (8007a2c <SysTick_Handler+0x44>)
 8007a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a16:	601a      	str	r2, [r3, #0]
 8007a18:	2300      	movs	r3, #0
 8007a1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	f383 8811 	msr	BASEPRI, r3
}
 8007a22:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a24:	bf00      	nop
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	e000ed04 	.word	0xe000ed04

08007a30 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a30:	b480      	push	{r7}
 8007a32:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a34:	4b0b      	ldr	r3, [pc, #44]	; (8007a64 <vPortSetupTimerInterrupt+0x34>)
 8007a36:	2200      	movs	r2, #0
 8007a38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a3a:	4b0b      	ldr	r3, [pc, #44]	; (8007a68 <vPortSetupTimerInterrupt+0x38>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a40:	4b0a      	ldr	r3, [pc, #40]	; (8007a6c <vPortSetupTimerInterrupt+0x3c>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a0a      	ldr	r2, [pc, #40]	; (8007a70 <vPortSetupTimerInterrupt+0x40>)
 8007a46:	fba2 2303 	umull	r2, r3, r2, r3
 8007a4a:	099b      	lsrs	r3, r3, #6
 8007a4c:	4a09      	ldr	r2, [pc, #36]	; (8007a74 <vPortSetupTimerInterrupt+0x44>)
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a52:	4b04      	ldr	r3, [pc, #16]	; (8007a64 <vPortSetupTimerInterrupt+0x34>)
 8007a54:	2207      	movs	r2, #7
 8007a56:	601a      	str	r2, [r3, #0]
}
 8007a58:	bf00      	nop
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	e000e010 	.word	0xe000e010
 8007a68:	e000e018 	.word	0xe000e018
 8007a6c:	20000004 	.word	0x20000004
 8007a70:	10624dd3 	.word	0x10624dd3
 8007a74:	e000e014 	.word	0xe000e014

08007a78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a78:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a88 <vPortEnableVFP+0x10>
 8007a7c:	6801      	ldr	r1, [r0, #0]
 8007a7e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007a82:	6001      	str	r1, [r0, #0]
 8007a84:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a86:	bf00      	nop
 8007a88:	e000ed88 	.word	0xe000ed88

08007a8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b08a      	sub	sp, #40	; 0x28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a94:	2300      	movs	r3, #0
 8007a96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a98:	f7ff fad2 	bl	8007040 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a9c:	4b5b      	ldr	r3, [pc, #364]	; (8007c0c <pvPortMalloc+0x180>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007aa4:	f000 f91a 	bl	8007cdc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007aa8:	4b59      	ldr	r3, [pc, #356]	; (8007c10 <pvPortMalloc+0x184>)
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4013      	ands	r3, r2
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f040 8092 	bne.w	8007bda <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d01f      	beq.n	8007afc <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007abc:	2208      	movs	r2, #8
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f003 0307 	and.w	r3, r3, #7
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d016      	beq.n	8007afc <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f023 0307 	bic.w	r3, r3, #7
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f003 0307 	and.w	r3, r3, #7
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00c      	beq.n	8007afc <pvPortMalloc+0x70>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	b672      	cpsid	i
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	b662      	cpsie	i
 8007af6:	617b      	str	r3, [r7, #20]
}
 8007af8:	bf00      	nop
 8007afa:	e7fe      	b.n	8007afa <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d06b      	beq.n	8007bda <pvPortMalloc+0x14e>
 8007b02:	4b44      	ldr	r3, [pc, #272]	; (8007c14 <pvPortMalloc+0x188>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d866      	bhi.n	8007bda <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b0c:	4b42      	ldr	r3, [pc, #264]	; (8007c18 <pvPortMalloc+0x18c>)
 8007b0e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b10:	4b41      	ldr	r3, [pc, #260]	; (8007c18 <pvPortMalloc+0x18c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b16:	e004      	b.n	8007b22 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d903      	bls.n	8007b34 <pvPortMalloc+0xa8>
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1f1      	bne.n	8007b18 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b34:	4b35      	ldr	r3, [pc, #212]	; (8007c0c <pvPortMalloc+0x180>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d04d      	beq.n	8007bda <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2208      	movs	r2, #8
 8007b44:	4413      	add	r3, r2
 8007b46:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	685a      	ldr	r2, [r3, #4]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	1ad2      	subs	r2, r2, r3
 8007b58:	2308      	movs	r3, #8
 8007b5a:	005b      	lsls	r3, r3, #1
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d921      	bls.n	8007ba4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4413      	add	r3, r2
 8007b66:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	f003 0307 	and.w	r3, r3, #7
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00c      	beq.n	8007b8c <pvPortMalloc+0x100>
	__asm volatile
 8007b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b76:	b672      	cpsid	i
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	b662      	cpsie	i
 8007b86:	613b      	str	r3, [r7, #16]
}
 8007b88:	bf00      	nop
 8007b8a:	e7fe      	b.n	8007b8a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	1ad2      	subs	r2, r2, r3
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b9e:	69b8      	ldr	r0, [r7, #24]
 8007ba0:	f000 f8fe 	bl	8007da0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ba4:	4b1b      	ldr	r3, [pc, #108]	; (8007c14 <pvPortMalloc+0x188>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	4a19      	ldr	r2, [pc, #100]	; (8007c14 <pvPortMalloc+0x188>)
 8007bb0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007bb2:	4b18      	ldr	r3, [pc, #96]	; (8007c14 <pvPortMalloc+0x188>)
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	4b19      	ldr	r3, [pc, #100]	; (8007c1c <pvPortMalloc+0x190>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d203      	bcs.n	8007bc6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007bbe:	4b15      	ldr	r3, [pc, #84]	; (8007c14 <pvPortMalloc+0x188>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a16      	ldr	r2, [pc, #88]	; (8007c1c <pvPortMalloc+0x190>)
 8007bc4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	685a      	ldr	r2, [r3, #4]
 8007bca:	4b11      	ldr	r3, [pc, #68]	; (8007c10 <pvPortMalloc+0x184>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007bda:	f7ff fa3f 	bl	800705c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	f003 0307 	and.w	r3, r3, #7
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00c      	beq.n	8007c02 <pvPortMalloc+0x176>
	__asm volatile
 8007be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bec:	b672      	cpsid	i
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	b662      	cpsie	i
 8007bfc:	60fb      	str	r3, [r7, #12]
}
 8007bfe:	bf00      	nop
 8007c00:	e7fe      	b.n	8007c00 <pvPortMalloc+0x174>
	return pvReturn;
 8007c02:	69fb      	ldr	r3, [r7, #28]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3728      	adds	r7, #40	; 0x28
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	2000c2b0 	.word	0x2000c2b0
 8007c10:	2000c2bc 	.word	0x2000c2bc
 8007c14:	2000c2b4 	.word	0x2000c2b4
 8007c18:	2000c2a8 	.word	0x2000c2a8
 8007c1c:	2000c2b8 	.word	0x2000c2b8

08007c20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d04c      	beq.n	8007ccc <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c32:	2308      	movs	r3, #8
 8007c34:	425b      	negs	r3, r3
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	4413      	add	r3, r2
 8007c3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	685a      	ldr	r2, [r3, #4]
 8007c44:	4b23      	ldr	r3, [pc, #140]	; (8007cd4 <vPortFree+0xb4>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4013      	ands	r3, r2
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10c      	bne.n	8007c68 <vPortFree+0x48>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	b672      	cpsid	i
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	b662      	cpsie	i
 8007c62:	60fb      	str	r3, [r7, #12]
}
 8007c64:	bf00      	nop
 8007c66:	e7fe      	b.n	8007c66 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00c      	beq.n	8007c8a <vPortFree+0x6a>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c74:	b672      	cpsid	i
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	b662      	cpsie	i
 8007c84:	60bb      	str	r3, [r7, #8]
}
 8007c86:	bf00      	nop
 8007c88:	e7fe      	b.n	8007c88 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	4b11      	ldr	r3, [pc, #68]	; (8007cd4 <vPortFree+0xb4>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4013      	ands	r3, r2
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d019      	beq.n	8007ccc <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d115      	bne.n	8007ccc <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	685a      	ldr	r2, [r3, #4]
 8007ca4:	4b0b      	ldr	r3, [pc, #44]	; (8007cd4 <vPortFree+0xb4>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	43db      	mvns	r3, r3
 8007caa:	401a      	ands	r2, r3
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007cb0:	f7ff f9c6 	bl	8007040 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	685a      	ldr	r2, [r3, #4]
 8007cb8:	4b07      	ldr	r3, [pc, #28]	; (8007cd8 <vPortFree+0xb8>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	4a06      	ldr	r2, [pc, #24]	; (8007cd8 <vPortFree+0xb8>)
 8007cc0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007cc2:	6938      	ldr	r0, [r7, #16]
 8007cc4:	f000 f86c 	bl	8007da0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007cc8:	f7ff f9c8 	bl	800705c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ccc:	bf00      	nop
 8007cce:	3718      	adds	r7, #24
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	2000c2bc 	.word	0x2000c2bc
 8007cd8:	2000c2b4 	.word	0x2000c2b4

08007cdc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ce2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007ce6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ce8:	4b27      	ldr	r3, [pc, #156]	; (8007d88 <prvHeapInit+0xac>)
 8007cea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f003 0307 	and.w	r3, r3, #7
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00c      	beq.n	8007d10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	3307      	adds	r3, #7
 8007cfa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f023 0307 	bic.w	r3, r3, #7
 8007d02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	4a1f      	ldr	r2, [pc, #124]	; (8007d88 <prvHeapInit+0xac>)
 8007d0c:	4413      	add	r3, r2
 8007d0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d14:	4a1d      	ldr	r2, [pc, #116]	; (8007d8c <prvHeapInit+0xb0>)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d1a:	4b1c      	ldr	r3, [pc, #112]	; (8007d8c <prvHeapInit+0xb0>)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	4413      	add	r3, r2
 8007d26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d28:	2208      	movs	r2, #8
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	1a9b      	subs	r3, r3, r2
 8007d2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f023 0307 	bic.w	r3, r3, #7
 8007d36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4a15      	ldr	r2, [pc, #84]	; (8007d90 <prvHeapInit+0xb4>)
 8007d3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d3e:	4b14      	ldr	r3, [pc, #80]	; (8007d90 <prvHeapInit+0xb4>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2200      	movs	r2, #0
 8007d44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d46:	4b12      	ldr	r3, [pc, #72]	; (8007d90 <prvHeapInit+0xb4>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	1ad2      	subs	r2, r2, r3
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d5c:	4b0c      	ldr	r3, [pc, #48]	; (8007d90 <prvHeapInit+0xb4>)
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	4a0a      	ldr	r2, [pc, #40]	; (8007d94 <prvHeapInit+0xb8>)
 8007d6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	4a09      	ldr	r2, [pc, #36]	; (8007d98 <prvHeapInit+0xbc>)
 8007d72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d74:	4b09      	ldr	r3, [pc, #36]	; (8007d9c <prvHeapInit+0xc0>)
 8007d76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d7a:	601a      	str	r2, [r3, #0]
}
 8007d7c:	bf00      	nop
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	200086a8 	.word	0x200086a8
 8007d8c:	2000c2a8 	.word	0x2000c2a8
 8007d90:	2000c2b0 	.word	0x2000c2b0
 8007d94:	2000c2b8 	.word	0x2000c2b8
 8007d98:	2000c2b4 	.word	0x2000c2b4
 8007d9c:	2000c2bc 	.word	0x2000c2bc

08007da0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007da8:	4b28      	ldr	r3, [pc, #160]	; (8007e4c <prvInsertBlockIntoFreeList+0xac>)
 8007daa:	60fb      	str	r3, [r7, #12]
 8007dac:	e002      	b.n	8007db4 <prvInsertBlockIntoFreeList+0x14>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d8f7      	bhi.n	8007dae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	4413      	add	r3, r2
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d108      	bne.n	8007de2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	441a      	add	r2, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	441a      	add	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d118      	bne.n	8007e28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	4b15      	ldr	r3, [pc, #84]	; (8007e50 <prvInsertBlockIntoFreeList+0xb0>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d00d      	beq.n	8007e1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685a      	ldr	r2, [r3, #4]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	441a      	add	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	e008      	b.n	8007e30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e1e:	4b0c      	ldr	r3, [pc, #48]	; (8007e50 <prvInsertBlockIntoFreeList+0xb0>)
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	e003      	b.n	8007e30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d002      	beq.n	8007e3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e3e:	bf00      	nop
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	2000c2a8 	.word	0x2000c2a8
 8007e50:	2000c2b0 	.word	0x2000c2b0

08007e54 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 8007e54:	4b04      	ldr	r3, [pc, #16]	; (8007e68 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	b10a      	cbz	r2, 8007e5e <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xa>
 8007e5a:	4803      	ldr	r0, [pc, #12]	; (8007e68 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 8007e5c:	4770      	bx	lr
 8007e5e:	4a03      	ldr	r2, [pc, #12]	; (8007e6c <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x18>)
 8007e60:	4801      	ldr	r0, [pc, #4]	; (8007e68 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 8007e62:	6812      	ldr	r2, [r2, #0]
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	4770      	bx	lr
 8007e68:	2000001c 	.word	0x2000001c
 8007e6c:	200001f4 	.word	0x200001f4

08007e70 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 8007e70:	4b04      	ldr	r3, [pc, #16]	; (8007e84 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 8007e72:	4805      	ldr	r0, [pc, #20]	; (8007e88 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4905      	ldr	r1, [pc, #20]	; (8007e8c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x1c>)
 8007e78:	4a05      	ldr	r2, [pc, #20]	; (8007e90 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x20>)
 8007e7a:	6003      	str	r3, [r0, #0]
 8007e7c:	600b      	str	r3, [r1, #0]
 8007e7e:	6013      	str	r3, [r2, #0]
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	200001f4 	.word	0x200001f4
 8007e88:	20000038 	.word	0x20000038
 8007e8c:	20000044 	.word	0x20000044
 8007e90:	2000001c 	.word	0x2000001c

08007e94 <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_init_function>:
 8007e94:	f004 bbfe 	b.w	800c694 <custom_test_msgs__srv__AddThreeInts_Request__init>

08007e98 <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_fini_function>:
 8007e98:	f004 bc00 	b.w	800c69c <custom_test_msgs__srv__AddThreeInts_Request__fini>

08007e9c <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_init_function>:
 8007e9c:	f004 bc00 	b.w	800c6a0 <custom_test_msgs__srv__AddThreeInts_Response__init>

08007ea0 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_fini_function>:
 8007ea0:	f004 bc02 	b.w	800c6a8 <custom_test_msgs__srv__AddThreeInts_Response__fini>

08007ea4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 8007ea4:	4b04      	ldr	r3, [pc, #16]	; (8007eb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	b10a      	cbz	r2, 8007eae <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0xa>
 8007eaa:	4803      	ldr	r0, [pc, #12]	; (8007eb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 8007eac:	4770      	bx	lr
 8007eae:	4a03      	ldr	r2, [pc, #12]	; (8007ebc <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 8007eb0:	4801      	ldr	r0, [pc, #4]	; (8007eb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 8007eb2:	6812      	ldr	r2, [r2, #0]
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	4770      	bx	lr
 8007eb8:	20000104 	.word	0x20000104
 8007ebc:	200001f8 	.word	0x200001f8

08007ec0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 8007ec0:	4b04      	ldr	r3, [pc, #16]	; (8007ed4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	b10a      	cbz	r2, 8007eca <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0xa>
 8007ec6:	4803      	ldr	r0, [pc, #12]	; (8007ed4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 8007ec8:	4770      	bx	lr
 8007eca:	4a03      	ldr	r2, [pc, #12]	; (8007ed8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x18>)
 8007ecc:	4801      	ldr	r0, [pc, #4]	; (8007ed4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 8007ece:	6812      	ldr	r2, [r2, #0]
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	4770      	bx	lr
 8007ed4:	2000014c 	.word	0x2000014c
 8007ed8:	200001f8 	.word	0x200001f8

08007edc <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 8007edc:	4b13      	ldr	r3, [pc, #76]	; (8007f2c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	b132      	cbz	r2, 8007ef0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	689a      	ldr	r2, [r3, #8]
 8007ee6:	b152      	cbz	r2, 8007efe <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x22>
 8007ee8:	68da      	ldr	r2, [r3, #12]
 8007eea:	b182      	cbz	r2, 8007f0e <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x32>
 8007eec:	480f      	ldr	r0, [pc, #60]	; (8007f2c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8007eee:	4770      	bx	lr
 8007ef0:	4a0f      	ldr	r2, [pc, #60]	; (8007f30 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 8007ef2:	6812      	ldr	r2, [r2, #0]
 8007ef4:	601a      	str	r2, [r3, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	689a      	ldr	r2, [r3, #8]
 8007efa:	2a00      	cmp	r2, #0
 8007efc:	d1f4      	bne.n	8007ee8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xc>
 8007efe:	4a0d      	ldr	r2, [pc, #52]	; (8007f34 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x58>)
 8007f00:	6811      	ldr	r1, [r2, #0]
 8007f02:	b179      	cbz	r1, 8007f24 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x48>
 8007f04:	6852      	ldr	r2, [r2, #4]
 8007f06:	609a      	str	r2, [r3, #8]
 8007f08:	68da      	ldr	r2, [r3, #12]
 8007f0a:	2a00      	cmp	r2, #0
 8007f0c:	d1ee      	bne.n	8007eec <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x10>
 8007f0e:	4a0a      	ldr	r2, [pc, #40]	; (8007f38 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x5c>)
 8007f10:	6811      	ldr	r1, [r2, #0]
 8007f12:	b119      	cbz	r1, 8007f1c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x40>
 8007f14:	6852      	ldr	r2, [r2, #4]
 8007f16:	4805      	ldr	r0, [pc, #20]	; (8007f2c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8007f18:	60da      	str	r2, [r3, #12]
 8007f1a:	4770      	bx	lr
 8007f1c:	4904      	ldr	r1, [pc, #16]	; (8007f30 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 8007f1e:	6809      	ldr	r1, [r1, #0]
 8007f20:	6011      	str	r1, [r2, #0]
 8007f22:	e7f7      	b.n	8007f14 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x38>
 8007f24:	4902      	ldr	r1, [pc, #8]	; (8007f30 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 8007f26:	6809      	ldr	r1, [r1, #0]
 8007f28:	6011      	str	r1, [r2, #0]
 8007f2a:	e7eb      	b.n	8007f04 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x28>
 8007f2c:	20000168 	.word	0x20000168
 8007f30:	200001f8 	.word	0x200001f8
 8007f34:	20000104 	.word	0x20000104
 8007f38:	2000014c 	.word	0x2000014c

08007f3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 8007f3c:	4800      	ldr	r0, [pc, #0]	; (8007f40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x4>)
 8007f3e:	4770      	bx	lr
 8007f40:	20000190 	.word	0x20000190

08007f44 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 8007f44:	4800      	ldr	r0, [pc, #0]	; (8007f48 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x4>)
 8007f46:	4770      	bx	lr
 8007f48:	2000019c 	.word	0x2000019c

08007f4c <_AddThreeInts_Response__max_serialized_size>:
 8007f4c:	2108      	movs	r1, #8
 8007f4e:	2000      	movs	r0, #0
 8007f50:	b508      	push	{r3, lr}
 8007f52:	f001 fa0b 	bl	800936c <ucdr_alignment>
 8007f56:	3008      	adds	r0, #8
 8007f58:	bd08      	pop	{r3, pc}
 8007f5a:	bf00      	nop

08007f5c <_AddThreeInts_Response__cdr_deserialize>:
 8007f5c:	b109      	cbz	r1, 8007f62 <_AddThreeInts_Response__cdr_deserialize+0x6>
 8007f5e:	f001 b8e7 	b.w	8009130 <ucdr_deserialize_int64_t>
 8007f62:	4608      	mov	r0, r1
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop

08007f68 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request>:
 8007f68:	b1b8      	cbz	r0, 8007f9a <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request+0x32>
 8007f6a:	b538      	push	{r3, r4, r5, lr}
 8007f6c:	460d      	mov	r5, r1
 8007f6e:	2108      	movs	r1, #8
 8007f70:	4628      	mov	r0, r5
 8007f72:	f001 f9fb 	bl	800936c <ucdr_alignment>
 8007f76:	f105 0308 	add.w	r3, r5, #8
 8007f7a:	2108      	movs	r1, #8
 8007f7c:	f1c5 0508 	rsb	r5, r5, #8
 8007f80:	181c      	adds	r4, r3, r0
 8007f82:	4620      	mov	r0, r4
 8007f84:	f001 f9f2 	bl	800936c <ucdr_alignment>
 8007f88:	2108      	movs	r1, #8
 8007f8a:	4408      	add	r0, r1
 8007f8c:	4404      	add	r4, r0
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f001 f9ec 	bl	800936c <ucdr_alignment>
 8007f94:	4428      	add	r0, r5
 8007f96:	4420      	add	r0, r4
 8007f98:	bd38      	pop	{r3, r4, r5, pc}
 8007f9a:	4770      	bx	lr

08007f9c <_AddThreeInts_Response__get_serialized_size>:
 8007f9c:	b130      	cbz	r0, 8007fac <_AddThreeInts_Response__get_serialized_size+0x10>
 8007f9e:	2108      	movs	r1, #8
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	b508      	push	{r3, lr}
 8007fa4:	f001 f9e2 	bl	800936c <ucdr_alignment>
 8007fa8:	3008      	adds	r0, #8
 8007faa:	bd08      	pop	{r3, pc}
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop

08007fb0 <_AddThreeInts_Request__cdr_deserialize>:
 8007fb0:	b538      	push	{r3, r4, r5, lr}
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	b171      	cbz	r1, 8007fd4 <_AddThreeInts_Request__cdr_deserialize+0x24>
 8007fb6:	4605      	mov	r5, r0
 8007fb8:	f001 f8ba 	bl	8009130 <ucdr_deserialize_int64_t>
 8007fbc:	f104 0108 	add.w	r1, r4, #8
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	f001 f8b5 	bl	8009130 <ucdr_deserialize_int64_t>
 8007fc6:	f104 0110 	add.w	r1, r4, #16
 8007fca:	4628      	mov	r0, r5
 8007fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fd0:	f001 b8ae 	b.w	8009130 <ucdr_deserialize_int64_t>
 8007fd4:	4608      	mov	r0, r1
 8007fd6:	bd38      	pop	{r3, r4, r5, pc}

08007fd8 <_AddThreeInts_Request__cdr_serialize>:
 8007fd8:	b198      	cbz	r0, 8008002 <_AddThreeInts_Request__cdr_serialize+0x2a>
 8007fda:	b570      	push	{r4, r5, r6, lr}
 8007fdc:	460d      	mov	r5, r1
 8007fde:	4604      	mov	r4, r0
 8007fe0:	e9d0 2300 	ldrd	r2, r3, [r0]
 8007fe4:	4608      	mov	r0, r1
 8007fe6:	f000 ffd3 	bl	8008f90 <ucdr_serialize_int64_t>
 8007fea:	4628      	mov	r0, r5
 8007fec:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007ff0:	f000 ffce 	bl	8008f90 <ucdr_serialize_int64_t>
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8007ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ffe:	f000 bfc7 	b.w	8008f90 <ucdr_serialize_int64_t>
 8008002:	4770      	bx	lr

08008004 <_AddThreeInts_Response__cdr_serialize>:
 8008004:	b120      	cbz	r0, 8008010 <_AddThreeInts_Response__cdr_serialize+0xc>
 8008006:	e9d0 2300 	ldrd	r2, r3, [r0]
 800800a:	4608      	mov	r0, r1
 800800c:	f000 bfc0 	b.w	8008f90 <ucdr_serialize_int64_t>
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop

08008014 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response>:
 8008014:	b138      	cbz	r0, 8008026 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response+0x12>
 8008016:	b508      	push	{r3, lr}
 8008018:	460b      	mov	r3, r1
 800801a:	2108      	movs	r1, #8
 800801c:	4618      	mov	r0, r3
 800801e:	f001 f9a5 	bl	800936c <ucdr_alignment>
 8008022:	3008      	adds	r0, #8
 8008024:	bd08      	pop	{r3, pc}
 8008026:	4770      	bx	lr

08008028 <_AddThreeInts_Request__get_serialized_size>:
 8008028:	b190      	cbz	r0, 8008050 <_AddThreeInts_Request__get_serialized_size+0x28>
 800802a:	2108      	movs	r1, #8
 800802c:	2000      	movs	r0, #0
 800802e:	b510      	push	{r4, lr}
 8008030:	f001 f99c 	bl	800936c <ucdr_alignment>
 8008034:	2108      	movs	r1, #8
 8008036:	1844      	adds	r4, r0, r1
 8008038:	4620      	mov	r0, r4
 800803a:	f001 f997 	bl	800936c <ucdr_alignment>
 800803e:	2108      	movs	r1, #8
 8008040:	4408      	add	r0, r1
 8008042:	4404      	add	r4, r0
 8008044:	4620      	mov	r0, r4
 8008046:	f001 f991 	bl	800936c <ucdr_alignment>
 800804a:	3008      	adds	r0, #8
 800804c:	4420      	add	r0, r4
 800804e:	bd10      	pop	{r4, pc}
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop

08008054 <_AddThreeInts_Request__max_serialized_size>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	2108      	movs	r1, #8
 8008058:	2000      	movs	r0, #0
 800805a:	f001 f987 	bl	800936c <ucdr_alignment>
 800805e:	2108      	movs	r1, #8
 8008060:	1845      	adds	r5, r0, r1
 8008062:	4628      	mov	r0, r5
 8008064:	f001 f982 	bl	800936c <ucdr_alignment>
 8008068:	2108      	movs	r1, #8
 800806a:	1844      	adds	r4, r0, r1
 800806c:	442c      	add	r4, r5
 800806e:	4620      	mov	r0, r4
 8008070:	f001 f97c 	bl	800936c <ucdr_alignment>
 8008074:	3008      	adds	r0, #8
 8008076:	4420      	add	r0, r4
 8008078:	bd38      	pop	{r3, r4, r5, pc}
 800807a:	bf00      	nop

0800807c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 800807c:	4800      	ldr	r0, [pc, #0]	; (8008080 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x4>)
 800807e:	4770      	bx	lr
 8008080:	20000184 	.word	0x20000184

08008084 <ucdr_serialize_bool>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	460d      	mov	r5, r1
 8008088:	2101      	movs	r1, #1
 800808a:	4604      	mov	r4, r0
 800808c:	f001 f922 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 8008090:	b148      	cbz	r0, 80080a6 <ucdr_serialize_bool+0x22>
 8008092:	68a3      	ldr	r3, [r4, #8]
 8008094:	2101      	movs	r1, #1
 8008096:	701d      	strb	r5, [r3, #0]
 8008098:	68a2      	ldr	r2, [r4, #8]
 800809a:	6923      	ldr	r3, [r4, #16]
 800809c:	440a      	add	r2, r1
 800809e:	7561      	strb	r1, [r4, #21]
 80080a0:	440b      	add	r3, r1
 80080a2:	60a2      	str	r2, [r4, #8]
 80080a4:	6123      	str	r3, [r4, #16]
 80080a6:	7da0      	ldrb	r0, [r4, #22]
 80080a8:	f080 0001 	eor.w	r0, r0, #1
 80080ac:	bd38      	pop	{r3, r4, r5, pc}
 80080ae:	bf00      	nop

080080b0 <ucdr_deserialize_bool>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	460d      	mov	r5, r1
 80080b4:	2101      	movs	r1, #1
 80080b6:	4604      	mov	r4, r0
 80080b8:	f001 f90c 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 80080bc:	b160      	cbz	r0, 80080d8 <ucdr_deserialize_bool+0x28>
 80080be:	68a2      	ldr	r2, [r4, #8]
 80080c0:	2101      	movs	r1, #1
 80080c2:	6923      	ldr	r3, [r4, #16]
 80080c4:	f812 0b01 	ldrb.w	r0, [r2], #1
 80080c8:	440b      	add	r3, r1
 80080ca:	3800      	subs	r0, #0
 80080cc:	bf18      	it	ne
 80080ce:	2001      	movne	r0, #1
 80080d0:	7028      	strb	r0, [r5, #0]
 80080d2:	60a2      	str	r2, [r4, #8]
 80080d4:	6123      	str	r3, [r4, #16]
 80080d6:	7561      	strb	r1, [r4, #21]
 80080d8:	7da0      	ldrb	r0, [r4, #22]
 80080da:	f080 0001 	eor.w	r0, r0, #1
 80080de:	bd38      	pop	{r3, r4, r5, pc}

080080e0 <ucdr_serialize_uint8_t>:
 80080e0:	b538      	push	{r3, r4, r5, lr}
 80080e2:	460d      	mov	r5, r1
 80080e4:	2101      	movs	r1, #1
 80080e6:	4604      	mov	r4, r0
 80080e8:	f001 f8f4 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 80080ec:	b148      	cbz	r0, 8008102 <ucdr_serialize_uint8_t+0x22>
 80080ee:	68a3      	ldr	r3, [r4, #8]
 80080f0:	2101      	movs	r1, #1
 80080f2:	701d      	strb	r5, [r3, #0]
 80080f4:	68a2      	ldr	r2, [r4, #8]
 80080f6:	6923      	ldr	r3, [r4, #16]
 80080f8:	440a      	add	r2, r1
 80080fa:	7561      	strb	r1, [r4, #21]
 80080fc:	440b      	add	r3, r1
 80080fe:	60a2      	str	r2, [r4, #8]
 8008100:	6123      	str	r3, [r4, #16]
 8008102:	7da0      	ldrb	r0, [r4, #22]
 8008104:	f080 0001 	eor.w	r0, r0, #1
 8008108:	bd38      	pop	{r3, r4, r5, pc}
 800810a:	bf00      	nop

0800810c <ucdr_deserialize_uint8_t>:
 800810c:	b538      	push	{r3, r4, r5, lr}
 800810e:	460d      	mov	r5, r1
 8008110:	2101      	movs	r1, #1
 8008112:	4604      	mov	r4, r0
 8008114:	f001 f8de 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 8008118:	b150      	cbz	r0, 8008130 <ucdr_deserialize_uint8_t+0x24>
 800811a:	68a3      	ldr	r3, [r4, #8]
 800811c:	2101      	movs	r1, #1
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	702b      	strb	r3, [r5, #0]
 8008122:	68a2      	ldr	r2, [r4, #8]
 8008124:	6923      	ldr	r3, [r4, #16]
 8008126:	440a      	add	r2, r1
 8008128:	7561      	strb	r1, [r4, #21]
 800812a:	440b      	add	r3, r1
 800812c:	60a2      	str	r2, [r4, #8]
 800812e:	6123      	str	r3, [r4, #16]
 8008130:	7da0      	ldrb	r0, [r4, #22]
 8008132:	f080 0001 	eor.w	r0, r0, #1
 8008136:	bd38      	pop	{r3, r4, r5, pc}

08008138 <ucdr_serialize_uint16_t>:
 8008138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800813c:	460b      	mov	r3, r1
 800813e:	b082      	sub	sp, #8
 8008140:	4604      	mov	r4, r0
 8008142:	2102      	movs	r1, #2
 8008144:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008148:	f001 f918 	bl	800937c <ucdr_buffer_alignment>
 800814c:	4601      	mov	r1, r0
 800814e:	4620      	mov	r0, r4
 8008150:	7d67      	ldrb	r7, [r4, #21]
 8008152:	f001 f95b 	bl	800940c <ucdr_advance_buffer>
 8008156:	2102      	movs	r1, #2
 8008158:	4620      	mov	r0, r4
 800815a:	f001 f8af 	bl	80092bc <ucdr_check_buffer_available_for>
 800815e:	bb78      	cbnz	r0, 80081c0 <ucdr_serialize_uint16_t+0x88>
 8008160:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008164:	42ab      	cmp	r3, r5
 8008166:	d926      	bls.n	80081b6 <ucdr_serialize_uint16_t+0x7e>
 8008168:	1b5e      	subs	r6, r3, r5
 800816a:	60a3      	str	r3, [r4, #8]
 800816c:	6923      	ldr	r3, [r4, #16]
 800816e:	4620      	mov	r0, r4
 8008170:	f1c6 0802 	rsb	r8, r6, #2
 8008174:	4433      	add	r3, r6
 8008176:	4641      	mov	r1, r8
 8008178:	6123      	str	r3, [r4, #16]
 800817a:	f001 f8ab 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 800817e:	2800      	cmp	r0, #0
 8008180:	d03b      	beq.n	80081fa <ucdr_serialize_uint16_t+0xc2>
 8008182:	7d23      	ldrb	r3, [r4, #20]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d04a      	beq.n	800821e <ucdr_serialize_uint16_t+0xe6>
 8008188:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800818c:	702b      	strb	r3, [r5, #0]
 800818e:	2e00      	cmp	r6, #0
 8008190:	d040      	beq.n	8008214 <ucdr_serialize_uint16_t+0xdc>
 8008192:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008196:	706b      	strb	r3, [r5, #1]
 8008198:	6923      	ldr	r3, [r4, #16]
 800819a:	2102      	movs	r1, #2
 800819c:	68a2      	ldr	r2, [r4, #8]
 800819e:	3302      	adds	r3, #2
 80081a0:	7da0      	ldrb	r0, [r4, #22]
 80081a2:	4442      	add	r2, r8
 80081a4:	7561      	strb	r1, [r4, #21]
 80081a6:	1b9e      	subs	r6, r3, r6
 80081a8:	f080 0001 	eor.w	r0, r0, #1
 80081ac:	60a2      	str	r2, [r4, #8]
 80081ae:	6126      	str	r6, [r4, #16]
 80081b0:	b002      	add	sp, #8
 80081b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b6:	2102      	movs	r1, #2
 80081b8:	4620      	mov	r0, r4
 80081ba:	f001 f88b 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 80081be:	b190      	cbz	r0, 80081e6 <ucdr_serialize_uint16_t+0xae>
 80081c0:	7d23      	ldrb	r3, [r4, #20]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	68a3      	ldr	r3, [r4, #8]
 80081c6:	d014      	beq.n	80081f2 <ucdr_serialize_uint16_t+0xba>
 80081c8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80081cc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80081d0:	7019      	strb	r1, [r3, #0]
 80081d2:	68a3      	ldr	r3, [r4, #8]
 80081d4:	705a      	strb	r2, [r3, #1]
 80081d6:	2102      	movs	r1, #2
 80081d8:	68a2      	ldr	r2, [r4, #8]
 80081da:	6923      	ldr	r3, [r4, #16]
 80081dc:	440a      	add	r2, r1
 80081de:	7561      	strb	r1, [r4, #21]
 80081e0:	440b      	add	r3, r1
 80081e2:	60a2      	str	r2, [r4, #8]
 80081e4:	6123      	str	r3, [r4, #16]
 80081e6:	7da0      	ldrb	r0, [r4, #22]
 80081e8:	f080 0001 	eor.w	r0, r0, #1
 80081ec:	b002      	add	sp, #8
 80081ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081f2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80081f6:	801a      	strh	r2, [r3, #0]
 80081f8:	e7ed      	b.n	80081d6 <ucdr_serialize_uint16_t+0x9e>
 80081fa:	68a2      	ldr	r2, [r4, #8]
 80081fc:	6923      	ldr	r3, [r4, #16]
 80081fe:	7da0      	ldrb	r0, [r4, #22]
 8008200:	1b92      	subs	r2, r2, r6
 8008202:	1b9b      	subs	r3, r3, r6
 8008204:	7567      	strb	r7, [r4, #21]
 8008206:	f080 0001 	eor.w	r0, r0, #1
 800820a:	60a2      	str	r2, [r4, #8]
 800820c:	6123      	str	r3, [r4, #16]
 800820e:	b002      	add	sp, #8
 8008210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008214:	68a3      	ldr	r3, [r4, #8]
 8008216:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800821a:	701a      	strb	r2, [r3, #0]
 800821c:	e7bc      	b.n	8008198 <ucdr_serialize_uint16_t+0x60>
 800821e:	4628      	mov	r0, r5
 8008220:	f10d 0506 	add.w	r5, sp, #6
 8008224:	4632      	mov	r2, r6
 8008226:	4629      	mov	r1, r5
 8008228:	f00c fbe3 	bl	80149f2 <memcpy>
 800822c:	4642      	mov	r2, r8
 800822e:	19a9      	adds	r1, r5, r6
 8008230:	68a0      	ldr	r0, [r4, #8]
 8008232:	f00c fbde 	bl	80149f2 <memcpy>
 8008236:	e7af      	b.n	8008198 <ucdr_serialize_uint16_t+0x60>

08008238 <ucdr_serialize_endian_uint16_t>:
 8008238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800823c:	4604      	mov	r4, r0
 800823e:	b083      	sub	sp, #12
 8008240:	460d      	mov	r5, r1
 8008242:	2102      	movs	r1, #2
 8008244:	f8ad 2006 	strh.w	r2, [sp, #6]
 8008248:	f001 f898 	bl	800937c <ucdr_buffer_alignment>
 800824c:	4601      	mov	r1, r0
 800824e:	4620      	mov	r0, r4
 8008250:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008254:	f001 f8da 	bl	800940c <ucdr_advance_buffer>
 8008258:	2102      	movs	r1, #2
 800825a:	4620      	mov	r0, r4
 800825c:	f001 f82e 	bl	80092bc <ucdr_check_buffer_available_for>
 8008260:	bb70      	cbnz	r0, 80082c0 <ucdr_serialize_endian_uint16_t+0x88>
 8008262:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008266:	42be      	cmp	r6, r7
 8008268:	d925      	bls.n	80082b6 <ucdr_serialize_endian_uint16_t+0x7e>
 800826a:	6923      	ldr	r3, [r4, #16]
 800826c:	4620      	mov	r0, r4
 800826e:	60a6      	str	r6, [r4, #8]
 8008270:	1bf6      	subs	r6, r6, r7
 8008272:	4433      	add	r3, r6
 8008274:	f1c6 0902 	rsb	r9, r6, #2
 8008278:	6123      	str	r3, [r4, #16]
 800827a:	4649      	mov	r1, r9
 800827c:	f001 f82a 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 8008280:	2800      	cmp	r0, #0
 8008282:	d039      	beq.n	80082f8 <ucdr_serialize_endian_uint16_t+0xc0>
 8008284:	2d01      	cmp	r5, #1
 8008286:	d04a      	beq.n	800831e <ucdr_serialize_endian_uint16_t+0xe6>
 8008288:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800828c:	703b      	strb	r3, [r7, #0]
 800828e:	2e00      	cmp	r6, #0
 8008290:	d040      	beq.n	8008314 <ucdr_serialize_endian_uint16_t+0xdc>
 8008292:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008296:	707b      	strb	r3, [r7, #1]
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	2102      	movs	r1, #2
 800829c:	68a2      	ldr	r2, [r4, #8]
 800829e:	7da0      	ldrb	r0, [r4, #22]
 80082a0:	3302      	adds	r3, #2
 80082a2:	444a      	add	r2, r9
 80082a4:	7561      	strb	r1, [r4, #21]
 80082a6:	1b9b      	subs	r3, r3, r6
 80082a8:	f080 0001 	eor.w	r0, r0, #1
 80082ac:	60a2      	str	r2, [r4, #8]
 80082ae:	6123      	str	r3, [r4, #16]
 80082b0:	b003      	add	sp, #12
 80082b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082b6:	2102      	movs	r1, #2
 80082b8:	4620      	mov	r0, r4
 80082ba:	f001 f80b 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 80082be:	b188      	cbz	r0, 80082e4 <ucdr_serialize_endian_uint16_t+0xac>
 80082c0:	2d01      	cmp	r5, #1
 80082c2:	68a3      	ldr	r3, [r4, #8]
 80082c4:	d014      	beq.n	80082f0 <ucdr_serialize_endian_uint16_t+0xb8>
 80082c6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80082ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80082ce:	7019      	strb	r1, [r3, #0]
 80082d0:	68a3      	ldr	r3, [r4, #8]
 80082d2:	705a      	strb	r2, [r3, #1]
 80082d4:	2102      	movs	r1, #2
 80082d6:	68a2      	ldr	r2, [r4, #8]
 80082d8:	6923      	ldr	r3, [r4, #16]
 80082da:	440a      	add	r2, r1
 80082dc:	7561      	strb	r1, [r4, #21]
 80082de:	440b      	add	r3, r1
 80082e0:	60a2      	str	r2, [r4, #8]
 80082e2:	6123      	str	r3, [r4, #16]
 80082e4:	7da0      	ldrb	r0, [r4, #22]
 80082e6:	f080 0001 	eor.w	r0, r0, #1
 80082ea:	b003      	add	sp, #12
 80082ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082f0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80082f4:	801a      	strh	r2, [r3, #0]
 80082f6:	e7ed      	b.n	80082d4 <ucdr_serialize_endian_uint16_t+0x9c>
 80082f8:	68a2      	ldr	r2, [r4, #8]
 80082fa:	6923      	ldr	r3, [r4, #16]
 80082fc:	7da0      	ldrb	r0, [r4, #22]
 80082fe:	1b92      	subs	r2, r2, r6
 8008300:	1b9b      	subs	r3, r3, r6
 8008302:	f884 8015 	strb.w	r8, [r4, #21]
 8008306:	f080 0001 	eor.w	r0, r0, #1
 800830a:	60a2      	str	r2, [r4, #8]
 800830c:	6123      	str	r3, [r4, #16]
 800830e:	b003      	add	sp, #12
 8008310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008314:	68a3      	ldr	r3, [r4, #8]
 8008316:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800831a:	701a      	strb	r2, [r3, #0]
 800831c:	e7bc      	b.n	8008298 <ucdr_serialize_endian_uint16_t+0x60>
 800831e:	f10d 0506 	add.w	r5, sp, #6
 8008322:	4632      	mov	r2, r6
 8008324:	4638      	mov	r0, r7
 8008326:	4629      	mov	r1, r5
 8008328:	f00c fb63 	bl	80149f2 <memcpy>
 800832c:	464a      	mov	r2, r9
 800832e:	19a9      	adds	r1, r5, r6
 8008330:	68a0      	ldr	r0, [r4, #8]
 8008332:	f00c fb5e 	bl	80149f2 <memcpy>
 8008336:	e7af      	b.n	8008298 <ucdr_serialize_endian_uint16_t+0x60>

08008338 <ucdr_deserialize_uint16_t>:
 8008338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800833c:	4604      	mov	r4, r0
 800833e:	460d      	mov	r5, r1
 8008340:	2102      	movs	r1, #2
 8008342:	f001 f81b 	bl	800937c <ucdr_buffer_alignment>
 8008346:	4601      	mov	r1, r0
 8008348:	4620      	mov	r0, r4
 800834a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800834e:	f001 f85d 	bl	800940c <ucdr_advance_buffer>
 8008352:	2102      	movs	r1, #2
 8008354:	4620      	mov	r0, r4
 8008356:	f000 ffb1 	bl	80092bc <ucdr_check_buffer_available_for>
 800835a:	bb60      	cbnz	r0, 80083b6 <ucdr_deserialize_uint16_t+0x7e>
 800835c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008360:	42be      	cmp	r6, r7
 8008362:	d923      	bls.n	80083ac <ucdr_deserialize_uint16_t+0x74>
 8008364:	6923      	ldr	r3, [r4, #16]
 8008366:	4620      	mov	r0, r4
 8008368:	60a6      	str	r6, [r4, #8]
 800836a:	1bf6      	subs	r6, r6, r7
 800836c:	4433      	add	r3, r6
 800836e:	f1c6 0902 	rsb	r9, r6, #2
 8008372:	6123      	str	r3, [r4, #16]
 8008374:	4649      	mov	r1, r9
 8008376:	f000 ffad 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 800837a:	2800      	cmp	r0, #0
 800837c:	d034      	beq.n	80083e8 <ucdr_deserialize_uint16_t+0xb0>
 800837e:	7d23      	ldrb	r3, [r4, #20]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d042      	beq.n	800840a <ucdr_deserialize_uint16_t+0xd2>
 8008384:	787b      	ldrb	r3, [r7, #1]
 8008386:	702b      	strb	r3, [r5, #0]
 8008388:	2e00      	cmp	r6, #0
 800838a:	d03a      	beq.n	8008402 <ucdr_deserialize_uint16_t+0xca>
 800838c:	783b      	ldrb	r3, [r7, #0]
 800838e:	706b      	strb	r3, [r5, #1]
 8008390:	6923      	ldr	r3, [r4, #16]
 8008392:	2102      	movs	r1, #2
 8008394:	68a2      	ldr	r2, [r4, #8]
 8008396:	3302      	adds	r3, #2
 8008398:	7da0      	ldrb	r0, [r4, #22]
 800839a:	444a      	add	r2, r9
 800839c:	7561      	strb	r1, [r4, #21]
 800839e:	1b9b      	subs	r3, r3, r6
 80083a0:	f080 0001 	eor.w	r0, r0, #1
 80083a4:	60a2      	str	r2, [r4, #8]
 80083a6:	6123      	str	r3, [r4, #16]
 80083a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ac:	2102      	movs	r1, #2
 80083ae:	4620      	mov	r0, r4
 80083b0:	f000 ff90 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 80083b4:	b180      	cbz	r0, 80083d8 <ucdr_deserialize_uint16_t+0xa0>
 80083b6:	7d23      	ldrb	r3, [r4, #20]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	68a3      	ldr	r3, [r4, #8]
 80083bc:	d011      	beq.n	80083e2 <ucdr_deserialize_uint16_t+0xaa>
 80083be:	785b      	ldrb	r3, [r3, #1]
 80083c0:	702b      	strb	r3, [r5, #0]
 80083c2:	68a3      	ldr	r3, [r4, #8]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	706b      	strb	r3, [r5, #1]
 80083c8:	2102      	movs	r1, #2
 80083ca:	68a2      	ldr	r2, [r4, #8]
 80083cc:	6923      	ldr	r3, [r4, #16]
 80083ce:	440a      	add	r2, r1
 80083d0:	7561      	strb	r1, [r4, #21]
 80083d2:	440b      	add	r3, r1
 80083d4:	60a2      	str	r2, [r4, #8]
 80083d6:	6123      	str	r3, [r4, #16]
 80083d8:	7da0      	ldrb	r0, [r4, #22]
 80083da:	f080 0001 	eor.w	r0, r0, #1
 80083de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083e2:	881b      	ldrh	r3, [r3, #0]
 80083e4:	802b      	strh	r3, [r5, #0]
 80083e6:	e7ef      	b.n	80083c8 <ucdr_deserialize_uint16_t+0x90>
 80083e8:	68a2      	ldr	r2, [r4, #8]
 80083ea:	6923      	ldr	r3, [r4, #16]
 80083ec:	1b92      	subs	r2, r2, r6
 80083ee:	7da0      	ldrb	r0, [r4, #22]
 80083f0:	1b9b      	subs	r3, r3, r6
 80083f2:	f884 8015 	strb.w	r8, [r4, #21]
 80083f6:	f080 0001 	eor.w	r0, r0, #1
 80083fa:	60a2      	str	r2, [r4, #8]
 80083fc:	6123      	str	r3, [r4, #16]
 80083fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008402:	68a3      	ldr	r3, [r4, #8]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	706b      	strb	r3, [r5, #1]
 8008408:	e7c2      	b.n	8008390 <ucdr_deserialize_uint16_t+0x58>
 800840a:	4639      	mov	r1, r7
 800840c:	4632      	mov	r2, r6
 800840e:	4628      	mov	r0, r5
 8008410:	f00c faef 	bl	80149f2 <memcpy>
 8008414:	464a      	mov	r2, r9
 8008416:	19a8      	adds	r0, r5, r6
 8008418:	68a1      	ldr	r1, [r4, #8]
 800841a:	f00c faea 	bl	80149f2 <memcpy>
 800841e:	e7b7      	b.n	8008390 <ucdr_deserialize_uint16_t+0x58>

08008420 <ucdr_deserialize_endian_uint16_t>:
 8008420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008424:	4604      	mov	r4, r0
 8008426:	460e      	mov	r6, r1
 8008428:	2102      	movs	r1, #2
 800842a:	4615      	mov	r5, r2
 800842c:	f000 ffa6 	bl	800937c <ucdr_buffer_alignment>
 8008430:	4601      	mov	r1, r0
 8008432:	4620      	mov	r0, r4
 8008434:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008438:	f000 ffe8 	bl	800940c <ucdr_advance_buffer>
 800843c:	2102      	movs	r1, #2
 800843e:	4620      	mov	r0, r4
 8008440:	f000 ff3c 	bl	80092bc <ucdr_check_buffer_available_for>
 8008444:	bb70      	cbnz	r0, 80084a4 <ucdr_deserialize_endian_uint16_t+0x84>
 8008446:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800844a:	454f      	cmp	r7, r9
 800844c:	d925      	bls.n	800849a <ucdr_deserialize_endian_uint16_t+0x7a>
 800844e:	6923      	ldr	r3, [r4, #16]
 8008450:	4620      	mov	r0, r4
 8008452:	60a7      	str	r7, [r4, #8]
 8008454:	eba7 0709 	sub.w	r7, r7, r9
 8008458:	443b      	add	r3, r7
 800845a:	f1c7 0a02 	rsb	sl, r7, #2
 800845e:	6123      	str	r3, [r4, #16]
 8008460:	4651      	mov	r1, sl
 8008462:	f000 ff37 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 8008466:	2800      	cmp	r0, #0
 8008468:	d034      	beq.n	80084d4 <ucdr_deserialize_endian_uint16_t+0xb4>
 800846a:	2e01      	cmp	r6, #1
 800846c:	d043      	beq.n	80084f6 <ucdr_deserialize_endian_uint16_t+0xd6>
 800846e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8008472:	702b      	strb	r3, [r5, #0]
 8008474:	2f00      	cmp	r7, #0
 8008476:	d03a      	beq.n	80084ee <ucdr_deserialize_endian_uint16_t+0xce>
 8008478:	f899 3000 	ldrb.w	r3, [r9]
 800847c:	706b      	strb	r3, [r5, #1]
 800847e:	6923      	ldr	r3, [r4, #16]
 8008480:	2102      	movs	r1, #2
 8008482:	68a2      	ldr	r2, [r4, #8]
 8008484:	3302      	adds	r3, #2
 8008486:	7da0      	ldrb	r0, [r4, #22]
 8008488:	4452      	add	r2, sl
 800848a:	7561      	strb	r1, [r4, #21]
 800848c:	1bdb      	subs	r3, r3, r7
 800848e:	f080 0001 	eor.w	r0, r0, #1
 8008492:	60a2      	str	r2, [r4, #8]
 8008494:	6123      	str	r3, [r4, #16]
 8008496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800849a:	2102      	movs	r1, #2
 800849c:	4620      	mov	r0, r4
 800849e:	f000 ff19 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 80084a2:	b178      	cbz	r0, 80084c4 <ucdr_deserialize_endian_uint16_t+0xa4>
 80084a4:	2e01      	cmp	r6, #1
 80084a6:	68a3      	ldr	r3, [r4, #8]
 80084a8:	d011      	beq.n	80084ce <ucdr_deserialize_endian_uint16_t+0xae>
 80084aa:	785b      	ldrb	r3, [r3, #1]
 80084ac:	702b      	strb	r3, [r5, #0]
 80084ae:	68a3      	ldr	r3, [r4, #8]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	706b      	strb	r3, [r5, #1]
 80084b4:	2102      	movs	r1, #2
 80084b6:	68a2      	ldr	r2, [r4, #8]
 80084b8:	6923      	ldr	r3, [r4, #16]
 80084ba:	440a      	add	r2, r1
 80084bc:	7561      	strb	r1, [r4, #21]
 80084be:	440b      	add	r3, r1
 80084c0:	60a2      	str	r2, [r4, #8]
 80084c2:	6123      	str	r3, [r4, #16]
 80084c4:	7da0      	ldrb	r0, [r4, #22]
 80084c6:	f080 0001 	eor.w	r0, r0, #1
 80084ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ce:	881b      	ldrh	r3, [r3, #0]
 80084d0:	802b      	strh	r3, [r5, #0]
 80084d2:	e7ef      	b.n	80084b4 <ucdr_deserialize_endian_uint16_t+0x94>
 80084d4:	68a2      	ldr	r2, [r4, #8]
 80084d6:	6923      	ldr	r3, [r4, #16]
 80084d8:	1bd2      	subs	r2, r2, r7
 80084da:	7da0      	ldrb	r0, [r4, #22]
 80084dc:	1bdb      	subs	r3, r3, r7
 80084de:	f884 8015 	strb.w	r8, [r4, #21]
 80084e2:	f080 0001 	eor.w	r0, r0, #1
 80084e6:	60a2      	str	r2, [r4, #8]
 80084e8:	6123      	str	r3, [r4, #16]
 80084ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ee:	68a3      	ldr	r3, [r4, #8]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	706b      	strb	r3, [r5, #1]
 80084f4:	e7c3      	b.n	800847e <ucdr_deserialize_endian_uint16_t+0x5e>
 80084f6:	4649      	mov	r1, r9
 80084f8:	463a      	mov	r2, r7
 80084fa:	4628      	mov	r0, r5
 80084fc:	f00c fa79 	bl	80149f2 <memcpy>
 8008500:	4652      	mov	r2, sl
 8008502:	19e8      	adds	r0, r5, r7
 8008504:	68a1      	ldr	r1, [r4, #8]
 8008506:	f00c fa74 	bl	80149f2 <memcpy>
 800850a:	e7b8      	b.n	800847e <ucdr_deserialize_endian_uint16_t+0x5e>

0800850c <ucdr_serialize_uint32_t>:
 800850c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008510:	b082      	sub	sp, #8
 8008512:	4604      	mov	r4, r0
 8008514:	9101      	str	r1, [sp, #4]
 8008516:	2104      	movs	r1, #4
 8008518:	f000 ff30 	bl	800937c <ucdr_buffer_alignment>
 800851c:	4601      	mov	r1, r0
 800851e:	4620      	mov	r0, r4
 8008520:	7d67      	ldrb	r7, [r4, #21]
 8008522:	f000 ff73 	bl	800940c <ucdr_advance_buffer>
 8008526:	2104      	movs	r1, #4
 8008528:	4620      	mov	r0, r4
 800852a:	f000 fec7 	bl	80092bc <ucdr_check_buffer_available_for>
 800852e:	2800      	cmp	r0, #0
 8008530:	d139      	bne.n	80085a6 <ucdr_serialize_uint32_t+0x9a>
 8008532:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008536:	42ab      	cmp	r3, r5
 8008538:	d930      	bls.n	800859c <ucdr_serialize_uint32_t+0x90>
 800853a:	1b5e      	subs	r6, r3, r5
 800853c:	60a3      	str	r3, [r4, #8]
 800853e:	6923      	ldr	r3, [r4, #16]
 8008540:	4620      	mov	r0, r4
 8008542:	f1c6 0804 	rsb	r8, r6, #4
 8008546:	4433      	add	r3, r6
 8008548:	4641      	mov	r1, r8
 800854a:	6123      	str	r3, [r4, #16]
 800854c:	f000 fec2 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 8008550:	2800      	cmp	r0, #0
 8008552:	d04c      	beq.n	80085ee <ucdr_serialize_uint32_t+0xe2>
 8008554:	7d23      	ldrb	r3, [r4, #20]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d063      	beq.n	8008622 <ucdr_serialize_uint32_t+0x116>
 800855a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800855e:	702b      	strb	r3, [r5, #0]
 8008560:	2e00      	cmp	r6, #0
 8008562:	d051      	beq.n	8008608 <ucdr_serialize_uint32_t+0xfc>
 8008564:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008568:	2e01      	cmp	r6, #1
 800856a:	706b      	strb	r3, [r5, #1]
 800856c:	d050      	beq.n	8008610 <ucdr_serialize_uint32_t+0x104>
 800856e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008572:	2e02      	cmp	r6, #2
 8008574:	70ab      	strb	r3, [r5, #2]
 8008576:	d04f      	beq.n	8008618 <ucdr_serialize_uint32_t+0x10c>
 8008578:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800857c:	70eb      	strb	r3, [r5, #3]
 800857e:	6923      	ldr	r3, [r4, #16]
 8008580:	2104      	movs	r1, #4
 8008582:	68a2      	ldr	r2, [r4, #8]
 8008584:	3304      	adds	r3, #4
 8008586:	7da0      	ldrb	r0, [r4, #22]
 8008588:	4442      	add	r2, r8
 800858a:	7561      	strb	r1, [r4, #21]
 800858c:	1b9e      	subs	r6, r3, r6
 800858e:	f080 0001 	eor.w	r0, r0, #1
 8008592:	60a2      	str	r2, [r4, #8]
 8008594:	6126      	str	r6, [r4, #16]
 8008596:	b002      	add	sp, #8
 8008598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800859c:	2104      	movs	r1, #4
 800859e:	4620      	mov	r0, r4
 80085a0:	f000 fe98 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 80085a4:	b1d0      	cbz	r0, 80085dc <ucdr_serialize_uint32_t+0xd0>
 80085a6:	7d23      	ldrb	r3, [r4, #20]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	68a3      	ldr	r3, [r4, #8]
 80085ac:	d01c      	beq.n	80085e8 <ucdr_serialize_uint32_t+0xdc>
 80085ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80085b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80085b6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80085ba:	7018      	strb	r0, [r3, #0]
 80085bc:	68a3      	ldr	r3, [r4, #8]
 80085be:	705a      	strb	r2, [r3, #1]
 80085c0:	68a3      	ldr	r3, [r4, #8]
 80085c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80085c6:	7099      	strb	r1, [r3, #2]
 80085c8:	68a3      	ldr	r3, [r4, #8]
 80085ca:	70da      	strb	r2, [r3, #3]
 80085cc:	2104      	movs	r1, #4
 80085ce:	68a2      	ldr	r2, [r4, #8]
 80085d0:	6923      	ldr	r3, [r4, #16]
 80085d2:	440a      	add	r2, r1
 80085d4:	7561      	strb	r1, [r4, #21]
 80085d6:	440b      	add	r3, r1
 80085d8:	60a2      	str	r2, [r4, #8]
 80085da:	6123      	str	r3, [r4, #16]
 80085dc:	7da0      	ldrb	r0, [r4, #22]
 80085de:	f080 0001 	eor.w	r0, r0, #1
 80085e2:	b002      	add	sp, #8
 80085e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085e8:	9a01      	ldr	r2, [sp, #4]
 80085ea:	601a      	str	r2, [r3, #0]
 80085ec:	e7ee      	b.n	80085cc <ucdr_serialize_uint32_t+0xc0>
 80085ee:	68a2      	ldr	r2, [r4, #8]
 80085f0:	6923      	ldr	r3, [r4, #16]
 80085f2:	7da0      	ldrb	r0, [r4, #22]
 80085f4:	1b92      	subs	r2, r2, r6
 80085f6:	1b9b      	subs	r3, r3, r6
 80085f8:	7567      	strb	r7, [r4, #21]
 80085fa:	f080 0001 	eor.w	r0, r0, #1
 80085fe:	60a2      	str	r2, [r4, #8]
 8008600:	6123      	str	r3, [r4, #16]
 8008602:	b002      	add	sp, #8
 8008604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008608:	68a3      	ldr	r3, [r4, #8]
 800860a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800860e:	701a      	strb	r2, [r3, #0]
 8008610:	68a3      	ldr	r3, [r4, #8]
 8008612:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008616:	701a      	strb	r2, [r3, #0]
 8008618:	68a3      	ldr	r3, [r4, #8]
 800861a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800861e:	701a      	strb	r2, [r3, #0]
 8008620:	e7ad      	b.n	800857e <ucdr_serialize_uint32_t+0x72>
 8008622:	4628      	mov	r0, r5
 8008624:	ad01      	add	r5, sp, #4
 8008626:	4632      	mov	r2, r6
 8008628:	4629      	mov	r1, r5
 800862a:	f00c f9e2 	bl	80149f2 <memcpy>
 800862e:	4642      	mov	r2, r8
 8008630:	19a9      	adds	r1, r5, r6
 8008632:	68a0      	ldr	r0, [r4, #8]
 8008634:	f00c f9dd 	bl	80149f2 <memcpy>
 8008638:	e7a1      	b.n	800857e <ucdr_serialize_uint32_t+0x72>
 800863a:	bf00      	nop

0800863c <ucdr_serialize_endian_uint32_t>:
 800863c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008640:	4604      	mov	r4, r0
 8008642:	b083      	sub	sp, #12
 8008644:	460d      	mov	r5, r1
 8008646:	2104      	movs	r1, #4
 8008648:	9201      	str	r2, [sp, #4]
 800864a:	f000 fe97 	bl	800937c <ucdr_buffer_alignment>
 800864e:	4601      	mov	r1, r0
 8008650:	4620      	mov	r0, r4
 8008652:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008656:	f000 fed9 	bl	800940c <ucdr_advance_buffer>
 800865a:	2104      	movs	r1, #4
 800865c:	4620      	mov	r0, r4
 800865e:	f000 fe2d 	bl	80092bc <ucdr_check_buffer_available_for>
 8008662:	2800      	cmp	r0, #0
 8008664:	d138      	bne.n	80086d8 <ucdr_serialize_endian_uint32_t+0x9c>
 8008666:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800866a:	42b7      	cmp	r7, r6
 800866c:	d92f      	bls.n	80086ce <ucdr_serialize_endian_uint32_t+0x92>
 800866e:	6923      	ldr	r3, [r4, #16]
 8008670:	4620      	mov	r0, r4
 8008672:	60a7      	str	r7, [r4, #8]
 8008674:	1bbf      	subs	r7, r7, r6
 8008676:	443b      	add	r3, r7
 8008678:	f1c7 0904 	rsb	r9, r7, #4
 800867c:	6123      	str	r3, [r4, #16]
 800867e:	4649      	mov	r1, r9
 8008680:	f000 fe28 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 8008684:	2800      	cmp	r0, #0
 8008686:	d04a      	beq.n	800871e <ucdr_serialize_endian_uint32_t+0xe2>
 8008688:	2d01      	cmp	r5, #1
 800868a:	d063      	beq.n	8008754 <ucdr_serialize_endian_uint32_t+0x118>
 800868c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008690:	7033      	strb	r3, [r6, #0]
 8008692:	2f00      	cmp	r7, #0
 8008694:	d051      	beq.n	800873a <ucdr_serialize_endian_uint32_t+0xfe>
 8008696:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800869a:	2f01      	cmp	r7, #1
 800869c:	7073      	strb	r3, [r6, #1]
 800869e:	d050      	beq.n	8008742 <ucdr_serialize_endian_uint32_t+0x106>
 80086a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80086a4:	2f02      	cmp	r7, #2
 80086a6:	70b3      	strb	r3, [r6, #2]
 80086a8:	d04f      	beq.n	800874a <ucdr_serialize_endian_uint32_t+0x10e>
 80086aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80086ae:	70f3      	strb	r3, [r6, #3]
 80086b0:	6923      	ldr	r3, [r4, #16]
 80086b2:	2104      	movs	r1, #4
 80086b4:	68a2      	ldr	r2, [r4, #8]
 80086b6:	7da0      	ldrb	r0, [r4, #22]
 80086b8:	3304      	adds	r3, #4
 80086ba:	444a      	add	r2, r9
 80086bc:	7561      	strb	r1, [r4, #21]
 80086be:	1bdb      	subs	r3, r3, r7
 80086c0:	f080 0001 	eor.w	r0, r0, #1
 80086c4:	60a2      	str	r2, [r4, #8]
 80086c6:	6123      	str	r3, [r4, #16]
 80086c8:	b003      	add	sp, #12
 80086ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086ce:	2104      	movs	r1, #4
 80086d0:	4620      	mov	r0, r4
 80086d2:	f000 fdff 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 80086d6:	b1c8      	cbz	r0, 800870c <ucdr_serialize_endian_uint32_t+0xd0>
 80086d8:	2d01      	cmp	r5, #1
 80086da:	68a3      	ldr	r3, [r4, #8]
 80086dc:	d01c      	beq.n	8008718 <ucdr_serialize_endian_uint32_t+0xdc>
 80086de:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80086e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80086e6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80086ea:	7018      	strb	r0, [r3, #0]
 80086ec:	68a3      	ldr	r3, [r4, #8]
 80086ee:	705a      	strb	r2, [r3, #1]
 80086f0:	68a3      	ldr	r3, [r4, #8]
 80086f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80086f6:	7099      	strb	r1, [r3, #2]
 80086f8:	68a3      	ldr	r3, [r4, #8]
 80086fa:	70da      	strb	r2, [r3, #3]
 80086fc:	2104      	movs	r1, #4
 80086fe:	68a2      	ldr	r2, [r4, #8]
 8008700:	6923      	ldr	r3, [r4, #16]
 8008702:	440a      	add	r2, r1
 8008704:	7561      	strb	r1, [r4, #21]
 8008706:	440b      	add	r3, r1
 8008708:	60a2      	str	r2, [r4, #8]
 800870a:	6123      	str	r3, [r4, #16]
 800870c:	7da0      	ldrb	r0, [r4, #22]
 800870e:	f080 0001 	eor.w	r0, r0, #1
 8008712:	b003      	add	sp, #12
 8008714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008718:	9a01      	ldr	r2, [sp, #4]
 800871a:	601a      	str	r2, [r3, #0]
 800871c:	e7ee      	b.n	80086fc <ucdr_serialize_endian_uint32_t+0xc0>
 800871e:	68a2      	ldr	r2, [r4, #8]
 8008720:	6923      	ldr	r3, [r4, #16]
 8008722:	7da0      	ldrb	r0, [r4, #22]
 8008724:	1bd2      	subs	r2, r2, r7
 8008726:	1bdb      	subs	r3, r3, r7
 8008728:	f884 8015 	strb.w	r8, [r4, #21]
 800872c:	f080 0001 	eor.w	r0, r0, #1
 8008730:	60a2      	str	r2, [r4, #8]
 8008732:	6123      	str	r3, [r4, #16]
 8008734:	b003      	add	sp, #12
 8008736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800873a:	68a3      	ldr	r3, [r4, #8]
 800873c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008740:	701a      	strb	r2, [r3, #0]
 8008742:	68a3      	ldr	r3, [r4, #8]
 8008744:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008748:	701a      	strb	r2, [r3, #0]
 800874a:	68a3      	ldr	r3, [r4, #8]
 800874c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008750:	701a      	strb	r2, [r3, #0]
 8008752:	e7ad      	b.n	80086b0 <ucdr_serialize_endian_uint32_t+0x74>
 8008754:	ad01      	add	r5, sp, #4
 8008756:	463a      	mov	r2, r7
 8008758:	4630      	mov	r0, r6
 800875a:	4629      	mov	r1, r5
 800875c:	f00c f949 	bl	80149f2 <memcpy>
 8008760:	464a      	mov	r2, r9
 8008762:	19e9      	adds	r1, r5, r7
 8008764:	68a0      	ldr	r0, [r4, #8]
 8008766:	f00c f944 	bl	80149f2 <memcpy>
 800876a:	e7a1      	b.n	80086b0 <ucdr_serialize_endian_uint32_t+0x74>

0800876c <ucdr_deserialize_uint32_t>:
 800876c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008770:	4604      	mov	r4, r0
 8008772:	460d      	mov	r5, r1
 8008774:	2104      	movs	r1, #4
 8008776:	f000 fe01 	bl	800937c <ucdr_buffer_alignment>
 800877a:	4601      	mov	r1, r0
 800877c:	4620      	mov	r0, r4
 800877e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008782:	f000 fe43 	bl	800940c <ucdr_advance_buffer>
 8008786:	2104      	movs	r1, #4
 8008788:	4620      	mov	r0, r4
 800878a:	f000 fd97 	bl	80092bc <ucdr_check_buffer_available_for>
 800878e:	2800      	cmp	r0, #0
 8008790:	d138      	bne.n	8008804 <ucdr_deserialize_uint32_t+0x98>
 8008792:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008796:	42b7      	cmp	r7, r6
 8008798:	d92f      	bls.n	80087fa <ucdr_deserialize_uint32_t+0x8e>
 800879a:	6923      	ldr	r3, [r4, #16]
 800879c:	4620      	mov	r0, r4
 800879e:	60a7      	str	r7, [r4, #8]
 80087a0:	1bbf      	subs	r7, r7, r6
 80087a2:	443b      	add	r3, r7
 80087a4:	f1c7 0904 	rsb	r9, r7, #4
 80087a8:	6123      	str	r3, [r4, #16]
 80087aa:	4649      	mov	r1, r9
 80087ac:	f000 fd92 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d046      	beq.n	8008842 <ucdr_deserialize_uint32_t+0xd6>
 80087b4:	7d23      	ldrb	r3, [r4, #20]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d05c      	beq.n	8008874 <ucdr_deserialize_uint32_t+0x108>
 80087ba:	78f3      	ldrb	r3, [r6, #3]
 80087bc:	702b      	strb	r3, [r5, #0]
 80087be:	2f00      	cmp	r7, #0
 80087c0:	d04c      	beq.n	800885c <ucdr_deserialize_uint32_t+0xf0>
 80087c2:	78b3      	ldrb	r3, [r6, #2]
 80087c4:	2f01      	cmp	r7, #1
 80087c6:	706b      	strb	r3, [r5, #1]
 80087c8:	f105 0302 	add.w	r3, r5, #2
 80087cc:	d04a      	beq.n	8008864 <ucdr_deserialize_uint32_t+0xf8>
 80087ce:	7873      	ldrb	r3, [r6, #1]
 80087d0:	2f02      	cmp	r7, #2
 80087d2:	70ab      	strb	r3, [r5, #2]
 80087d4:	f105 0303 	add.w	r3, r5, #3
 80087d8:	d048      	beq.n	800886c <ucdr_deserialize_uint32_t+0x100>
 80087da:	7833      	ldrb	r3, [r6, #0]
 80087dc:	70eb      	strb	r3, [r5, #3]
 80087de:	6923      	ldr	r3, [r4, #16]
 80087e0:	2104      	movs	r1, #4
 80087e2:	68a2      	ldr	r2, [r4, #8]
 80087e4:	3304      	adds	r3, #4
 80087e6:	7da0      	ldrb	r0, [r4, #22]
 80087e8:	444a      	add	r2, r9
 80087ea:	7561      	strb	r1, [r4, #21]
 80087ec:	1bdb      	subs	r3, r3, r7
 80087ee:	f080 0001 	eor.w	r0, r0, #1
 80087f2:	60a2      	str	r2, [r4, #8]
 80087f4:	6123      	str	r3, [r4, #16]
 80087f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087fa:	2104      	movs	r1, #4
 80087fc:	4620      	mov	r0, r4
 80087fe:	f000 fd69 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 8008802:	b1b0      	cbz	r0, 8008832 <ucdr_deserialize_uint32_t+0xc6>
 8008804:	7d23      	ldrb	r3, [r4, #20]
 8008806:	2b01      	cmp	r3, #1
 8008808:	68a3      	ldr	r3, [r4, #8]
 800880a:	d017      	beq.n	800883c <ucdr_deserialize_uint32_t+0xd0>
 800880c:	78db      	ldrb	r3, [r3, #3]
 800880e:	702b      	strb	r3, [r5, #0]
 8008810:	68a3      	ldr	r3, [r4, #8]
 8008812:	789b      	ldrb	r3, [r3, #2]
 8008814:	706b      	strb	r3, [r5, #1]
 8008816:	68a3      	ldr	r3, [r4, #8]
 8008818:	785b      	ldrb	r3, [r3, #1]
 800881a:	70ab      	strb	r3, [r5, #2]
 800881c:	68a3      	ldr	r3, [r4, #8]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	70eb      	strb	r3, [r5, #3]
 8008822:	2104      	movs	r1, #4
 8008824:	68a2      	ldr	r2, [r4, #8]
 8008826:	6923      	ldr	r3, [r4, #16]
 8008828:	440a      	add	r2, r1
 800882a:	7561      	strb	r1, [r4, #21]
 800882c:	440b      	add	r3, r1
 800882e:	60a2      	str	r2, [r4, #8]
 8008830:	6123      	str	r3, [r4, #16]
 8008832:	7da0      	ldrb	r0, [r4, #22]
 8008834:	f080 0001 	eor.w	r0, r0, #1
 8008838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	602b      	str	r3, [r5, #0]
 8008840:	e7ef      	b.n	8008822 <ucdr_deserialize_uint32_t+0xb6>
 8008842:	68a2      	ldr	r2, [r4, #8]
 8008844:	6923      	ldr	r3, [r4, #16]
 8008846:	1bd2      	subs	r2, r2, r7
 8008848:	7da0      	ldrb	r0, [r4, #22]
 800884a:	1bdb      	subs	r3, r3, r7
 800884c:	f884 8015 	strb.w	r8, [r4, #21]
 8008850:	f080 0001 	eor.w	r0, r0, #1
 8008854:	60a2      	str	r2, [r4, #8]
 8008856:	6123      	str	r3, [r4, #16]
 8008858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800885c:	68a3      	ldr	r3, [r4, #8]
 800885e:	789b      	ldrb	r3, [r3, #2]
 8008860:	706b      	strb	r3, [r5, #1]
 8008862:	1cab      	adds	r3, r5, #2
 8008864:	68a2      	ldr	r2, [r4, #8]
 8008866:	7852      	ldrb	r2, [r2, #1]
 8008868:	f803 2b01 	strb.w	r2, [r3], #1
 800886c:	68a2      	ldr	r2, [r4, #8]
 800886e:	7812      	ldrb	r2, [r2, #0]
 8008870:	701a      	strb	r2, [r3, #0]
 8008872:	e7b4      	b.n	80087de <ucdr_deserialize_uint32_t+0x72>
 8008874:	4631      	mov	r1, r6
 8008876:	463a      	mov	r2, r7
 8008878:	4628      	mov	r0, r5
 800887a:	f00c f8ba 	bl	80149f2 <memcpy>
 800887e:	464a      	mov	r2, r9
 8008880:	19e8      	adds	r0, r5, r7
 8008882:	68a1      	ldr	r1, [r4, #8]
 8008884:	f00c f8b5 	bl	80149f2 <memcpy>
 8008888:	e7a9      	b.n	80087de <ucdr_deserialize_uint32_t+0x72>
 800888a:	bf00      	nop

0800888c <ucdr_deserialize_endian_uint32_t>:
 800888c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008890:	4604      	mov	r4, r0
 8008892:	460e      	mov	r6, r1
 8008894:	2104      	movs	r1, #4
 8008896:	4615      	mov	r5, r2
 8008898:	f000 fd70 	bl	800937c <ucdr_buffer_alignment>
 800889c:	4601      	mov	r1, r0
 800889e:	4620      	mov	r0, r4
 80088a0:	f894 8015 	ldrb.w	r8, [r4, #21]
 80088a4:	f000 fdb2 	bl	800940c <ucdr_advance_buffer>
 80088a8:	2104      	movs	r1, #4
 80088aa:	4620      	mov	r0, r4
 80088ac:	f000 fd06 	bl	80092bc <ucdr_check_buffer_available_for>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d13c      	bne.n	800892e <ucdr_deserialize_endian_uint32_t+0xa2>
 80088b4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80088b8:	42bb      	cmp	r3, r7
 80088ba:	d933      	bls.n	8008924 <ucdr_deserialize_endian_uint32_t+0x98>
 80088bc:	eba3 0907 	sub.w	r9, r3, r7
 80088c0:	60a3      	str	r3, [r4, #8]
 80088c2:	6923      	ldr	r3, [r4, #16]
 80088c4:	4620      	mov	r0, r4
 80088c6:	f1c9 0a04 	rsb	sl, r9, #4
 80088ca:	444b      	add	r3, r9
 80088cc:	4651      	mov	r1, sl
 80088ce:	6123      	str	r3, [r4, #16]
 80088d0:	f000 fd00 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d048      	beq.n	800896a <ucdr_deserialize_endian_uint32_t+0xde>
 80088d8:	2e01      	cmp	r6, #1
 80088da:	d061      	beq.n	80089a0 <ucdr_deserialize_endian_uint32_t+0x114>
 80088dc:	78fb      	ldrb	r3, [r7, #3]
 80088de:	702b      	strb	r3, [r5, #0]
 80088e0:	f1b9 0f00 	cmp.w	r9, #0
 80088e4:	d050      	beq.n	8008988 <ucdr_deserialize_endian_uint32_t+0xfc>
 80088e6:	78bb      	ldrb	r3, [r7, #2]
 80088e8:	f1b9 0f01 	cmp.w	r9, #1
 80088ec:	706b      	strb	r3, [r5, #1]
 80088ee:	f105 0302 	add.w	r3, r5, #2
 80088f2:	d04d      	beq.n	8008990 <ucdr_deserialize_endian_uint32_t+0x104>
 80088f4:	787b      	ldrb	r3, [r7, #1]
 80088f6:	f1b9 0f02 	cmp.w	r9, #2
 80088fa:	70ab      	strb	r3, [r5, #2]
 80088fc:	f105 0303 	add.w	r3, r5, #3
 8008900:	d04a      	beq.n	8008998 <ucdr_deserialize_endian_uint32_t+0x10c>
 8008902:	783b      	ldrb	r3, [r7, #0]
 8008904:	70eb      	strb	r3, [r5, #3]
 8008906:	6923      	ldr	r3, [r4, #16]
 8008908:	2104      	movs	r1, #4
 800890a:	68a2      	ldr	r2, [r4, #8]
 800890c:	3304      	adds	r3, #4
 800890e:	7da0      	ldrb	r0, [r4, #22]
 8008910:	4452      	add	r2, sl
 8008912:	7561      	strb	r1, [r4, #21]
 8008914:	eba3 0309 	sub.w	r3, r3, r9
 8008918:	f080 0001 	eor.w	r0, r0, #1
 800891c:	60a2      	str	r2, [r4, #8]
 800891e:	6123      	str	r3, [r4, #16]
 8008920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008924:	2104      	movs	r1, #4
 8008926:	4620      	mov	r0, r4
 8008928:	f000 fcd4 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 800892c:	b1a8      	cbz	r0, 800895a <ucdr_deserialize_endian_uint32_t+0xce>
 800892e:	2e01      	cmp	r6, #1
 8008930:	68a3      	ldr	r3, [r4, #8]
 8008932:	d017      	beq.n	8008964 <ucdr_deserialize_endian_uint32_t+0xd8>
 8008934:	78db      	ldrb	r3, [r3, #3]
 8008936:	702b      	strb	r3, [r5, #0]
 8008938:	68a3      	ldr	r3, [r4, #8]
 800893a:	789b      	ldrb	r3, [r3, #2]
 800893c:	706b      	strb	r3, [r5, #1]
 800893e:	68a3      	ldr	r3, [r4, #8]
 8008940:	785b      	ldrb	r3, [r3, #1]
 8008942:	70ab      	strb	r3, [r5, #2]
 8008944:	68a3      	ldr	r3, [r4, #8]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	70eb      	strb	r3, [r5, #3]
 800894a:	2104      	movs	r1, #4
 800894c:	68a2      	ldr	r2, [r4, #8]
 800894e:	6923      	ldr	r3, [r4, #16]
 8008950:	440a      	add	r2, r1
 8008952:	7561      	strb	r1, [r4, #21]
 8008954:	440b      	add	r3, r1
 8008956:	60a2      	str	r2, [r4, #8]
 8008958:	6123      	str	r3, [r4, #16]
 800895a:	7da0      	ldrb	r0, [r4, #22]
 800895c:	f080 0001 	eor.w	r0, r0, #1
 8008960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	602b      	str	r3, [r5, #0]
 8008968:	e7ef      	b.n	800894a <ucdr_deserialize_endian_uint32_t+0xbe>
 800896a:	68a2      	ldr	r2, [r4, #8]
 800896c:	6923      	ldr	r3, [r4, #16]
 800896e:	eba2 0209 	sub.w	r2, r2, r9
 8008972:	7da0      	ldrb	r0, [r4, #22]
 8008974:	eba3 0309 	sub.w	r3, r3, r9
 8008978:	f884 8015 	strb.w	r8, [r4, #21]
 800897c:	f080 0001 	eor.w	r0, r0, #1
 8008980:	60a2      	str	r2, [r4, #8]
 8008982:	6123      	str	r3, [r4, #16]
 8008984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008988:	68a3      	ldr	r3, [r4, #8]
 800898a:	789b      	ldrb	r3, [r3, #2]
 800898c:	706b      	strb	r3, [r5, #1]
 800898e:	1cab      	adds	r3, r5, #2
 8008990:	68a2      	ldr	r2, [r4, #8]
 8008992:	7852      	ldrb	r2, [r2, #1]
 8008994:	f803 2b01 	strb.w	r2, [r3], #1
 8008998:	68a2      	ldr	r2, [r4, #8]
 800899a:	7812      	ldrb	r2, [r2, #0]
 800899c:	701a      	strb	r2, [r3, #0]
 800899e:	e7b2      	b.n	8008906 <ucdr_deserialize_endian_uint32_t+0x7a>
 80089a0:	4639      	mov	r1, r7
 80089a2:	464a      	mov	r2, r9
 80089a4:	4628      	mov	r0, r5
 80089a6:	f00c f824 	bl	80149f2 <memcpy>
 80089aa:	4652      	mov	r2, sl
 80089ac:	eb05 0009 	add.w	r0, r5, r9
 80089b0:	68a1      	ldr	r1, [r4, #8]
 80089b2:	f00c f81e 	bl	80149f2 <memcpy>
 80089b6:	e7a6      	b.n	8008906 <ucdr_deserialize_endian_uint32_t+0x7a>

080089b8 <ucdr_serialize_uint64_t>:
 80089b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089bc:	4604      	mov	r4, r0
 80089be:	b082      	sub	sp, #8
 80089c0:	2108      	movs	r1, #8
 80089c2:	e9cd 2300 	strd	r2, r3, [sp]
 80089c6:	f000 fcd9 	bl	800937c <ucdr_buffer_alignment>
 80089ca:	4601      	mov	r1, r0
 80089cc:	4620      	mov	r0, r4
 80089ce:	7d67      	ldrb	r7, [r4, #21]
 80089d0:	f000 fd1c 	bl	800940c <ucdr_advance_buffer>
 80089d4:	2108      	movs	r1, #8
 80089d6:	4620      	mov	r0, r4
 80089d8:	f000 fc70 	bl	80092bc <ucdr_check_buffer_available_for>
 80089dc:	2800      	cmp	r0, #0
 80089de:	d14e      	bne.n	8008a7e <ucdr_serialize_uint64_t+0xc6>
 80089e0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80089e4:	42ab      	cmp	r3, r5
 80089e6:	d945      	bls.n	8008a74 <ucdr_serialize_uint64_t+0xbc>
 80089e8:	1b5e      	subs	r6, r3, r5
 80089ea:	60a3      	str	r3, [r4, #8]
 80089ec:	6923      	ldr	r3, [r4, #16]
 80089ee:	4620      	mov	r0, r4
 80089f0:	f1c6 0808 	rsb	r8, r6, #8
 80089f4:	4433      	add	r3, r6
 80089f6:	4641      	mov	r1, r8
 80089f8:	6123      	str	r3, [r4, #16]
 80089fa:	f000 fc6b 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	d074      	beq.n	8008aec <ucdr_serialize_uint64_t+0x134>
 8008a02:	7d23      	ldrb	r3, [r4, #20]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	f000 809b 	beq.w	8008b40 <ucdr_serialize_uint64_t+0x188>
 8008a0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008a0e:	702b      	strb	r3, [r5, #0]
 8008a10:	2e00      	cmp	r6, #0
 8008a12:	d078      	beq.n	8008b06 <ucdr_serialize_uint64_t+0x14e>
 8008a14:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008a18:	2e01      	cmp	r6, #1
 8008a1a:	706b      	strb	r3, [r5, #1]
 8008a1c:	d077      	beq.n	8008b0e <ucdr_serialize_uint64_t+0x156>
 8008a1e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008a22:	2e02      	cmp	r6, #2
 8008a24:	70ab      	strb	r3, [r5, #2]
 8008a26:	d076      	beq.n	8008b16 <ucdr_serialize_uint64_t+0x15e>
 8008a28:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008a2c:	2e03      	cmp	r6, #3
 8008a2e:	70eb      	strb	r3, [r5, #3]
 8008a30:	d075      	beq.n	8008b1e <ucdr_serialize_uint64_t+0x166>
 8008a32:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008a36:	2e04      	cmp	r6, #4
 8008a38:	712b      	strb	r3, [r5, #4]
 8008a3a:	d074      	beq.n	8008b26 <ucdr_serialize_uint64_t+0x16e>
 8008a3c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8008a40:	2e05      	cmp	r6, #5
 8008a42:	716b      	strb	r3, [r5, #5]
 8008a44:	d073      	beq.n	8008b2e <ucdr_serialize_uint64_t+0x176>
 8008a46:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8008a4a:	2e06      	cmp	r6, #6
 8008a4c:	71ab      	strb	r3, [r5, #6]
 8008a4e:	d072      	beq.n	8008b36 <ucdr_serialize_uint64_t+0x17e>
 8008a50:	f89d 3000 	ldrb.w	r3, [sp]
 8008a54:	71eb      	strb	r3, [r5, #7]
 8008a56:	6923      	ldr	r3, [r4, #16]
 8008a58:	2108      	movs	r1, #8
 8008a5a:	68a2      	ldr	r2, [r4, #8]
 8008a5c:	3308      	adds	r3, #8
 8008a5e:	7da0      	ldrb	r0, [r4, #22]
 8008a60:	4442      	add	r2, r8
 8008a62:	7561      	strb	r1, [r4, #21]
 8008a64:	1b9e      	subs	r6, r3, r6
 8008a66:	f080 0001 	eor.w	r0, r0, #1
 8008a6a:	60a2      	str	r2, [r4, #8]
 8008a6c:	6126      	str	r6, [r4, #16]
 8008a6e:	b002      	add	sp, #8
 8008a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a74:	2108      	movs	r1, #8
 8008a76:	4620      	mov	r0, r4
 8008a78:	f000 fc2c 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 8008a7c:	b350      	cbz	r0, 8008ad4 <ucdr_serialize_uint64_t+0x11c>
 8008a7e:	7d23      	ldrb	r3, [r4, #20]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d02d      	beq.n	8008ae0 <ucdr_serialize_uint64_t+0x128>
 8008a84:	68a3      	ldr	r3, [r4, #8]
 8008a86:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8008a8a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008a8e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8008a92:	7018      	strb	r0, [r3, #0]
 8008a94:	68a3      	ldr	r3, [r4, #8]
 8008a96:	705a      	strb	r2, [r3, #1]
 8008a98:	68a3      	ldr	r3, [r4, #8]
 8008a9a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008a9e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8008aa2:	7099      	strb	r1, [r3, #2]
 8008aa4:	68a3      	ldr	r3, [r4, #8]
 8008aa6:	70da      	strb	r2, [r3, #3]
 8008aa8:	68a3      	ldr	r3, [r4, #8]
 8008aaa:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008aae:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8008ab2:	7118      	strb	r0, [r3, #4]
 8008ab4:	68a3      	ldr	r3, [r4, #8]
 8008ab6:	715a      	strb	r2, [r3, #5]
 8008ab8:	68a3      	ldr	r3, [r4, #8]
 8008aba:	f89d 2000 	ldrb.w	r2, [sp]
 8008abe:	7199      	strb	r1, [r3, #6]
 8008ac0:	68a3      	ldr	r3, [r4, #8]
 8008ac2:	71da      	strb	r2, [r3, #7]
 8008ac4:	2108      	movs	r1, #8
 8008ac6:	68a2      	ldr	r2, [r4, #8]
 8008ac8:	6923      	ldr	r3, [r4, #16]
 8008aca:	440a      	add	r2, r1
 8008acc:	7561      	strb	r1, [r4, #21]
 8008ace:	440b      	add	r3, r1
 8008ad0:	60a2      	str	r2, [r4, #8]
 8008ad2:	6123      	str	r3, [r4, #16]
 8008ad4:	7da0      	ldrb	r0, [r4, #22]
 8008ad6:	f080 0001 	eor.w	r0, r0, #1
 8008ada:	b002      	add	sp, #8
 8008adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae0:	466b      	mov	r3, sp
 8008ae2:	68a2      	ldr	r2, [r4, #8]
 8008ae4:	cb03      	ldmia	r3!, {r0, r1}
 8008ae6:	6010      	str	r0, [r2, #0]
 8008ae8:	6051      	str	r1, [r2, #4]
 8008aea:	e7eb      	b.n	8008ac4 <ucdr_serialize_uint64_t+0x10c>
 8008aec:	68a2      	ldr	r2, [r4, #8]
 8008aee:	6923      	ldr	r3, [r4, #16]
 8008af0:	7da0      	ldrb	r0, [r4, #22]
 8008af2:	1b92      	subs	r2, r2, r6
 8008af4:	1b9b      	subs	r3, r3, r6
 8008af6:	7567      	strb	r7, [r4, #21]
 8008af8:	f080 0001 	eor.w	r0, r0, #1
 8008afc:	60a2      	str	r2, [r4, #8]
 8008afe:	6123      	str	r3, [r4, #16]
 8008b00:	b002      	add	sp, #8
 8008b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b06:	68a3      	ldr	r3, [r4, #8]
 8008b08:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008b0c:	701a      	strb	r2, [r3, #0]
 8008b0e:	68a3      	ldr	r3, [r4, #8]
 8008b10:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008b14:	701a      	strb	r2, [r3, #0]
 8008b16:	68a3      	ldr	r3, [r4, #8]
 8008b18:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008b1c:	701a      	strb	r2, [r3, #0]
 8008b1e:	68a3      	ldr	r3, [r4, #8]
 8008b20:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008b24:	701a      	strb	r2, [r3, #0]
 8008b26:	68a3      	ldr	r3, [r4, #8]
 8008b28:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008b2c:	701a      	strb	r2, [r3, #0]
 8008b2e:	68a3      	ldr	r3, [r4, #8]
 8008b30:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008b34:	701a      	strb	r2, [r3, #0]
 8008b36:	68a3      	ldr	r3, [r4, #8]
 8008b38:	f89d 2000 	ldrb.w	r2, [sp]
 8008b3c:	701a      	strb	r2, [r3, #0]
 8008b3e:	e78a      	b.n	8008a56 <ucdr_serialize_uint64_t+0x9e>
 8008b40:	4628      	mov	r0, r5
 8008b42:	466d      	mov	r5, sp
 8008b44:	4632      	mov	r2, r6
 8008b46:	4629      	mov	r1, r5
 8008b48:	f00b ff53 	bl	80149f2 <memcpy>
 8008b4c:	4642      	mov	r2, r8
 8008b4e:	19a9      	adds	r1, r5, r6
 8008b50:	68a0      	ldr	r0, [r4, #8]
 8008b52:	f00b ff4e 	bl	80149f2 <memcpy>
 8008b56:	e77e      	b.n	8008a56 <ucdr_serialize_uint64_t+0x9e>

08008b58 <ucdr_serialize_int16_t>:
 8008b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	b082      	sub	sp, #8
 8008b60:	4604      	mov	r4, r0
 8008b62:	2102      	movs	r1, #2
 8008b64:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008b68:	f000 fc08 	bl	800937c <ucdr_buffer_alignment>
 8008b6c:	4601      	mov	r1, r0
 8008b6e:	4620      	mov	r0, r4
 8008b70:	7d67      	ldrb	r7, [r4, #21]
 8008b72:	f000 fc4b 	bl	800940c <ucdr_advance_buffer>
 8008b76:	2102      	movs	r1, #2
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f000 fb9f 	bl	80092bc <ucdr_check_buffer_available_for>
 8008b7e:	bb78      	cbnz	r0, 8008be0 <ucdr_serialize_int16_t+0x88>
 8008b80:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008b84:	42ab      	cmp	r3, r5
 8008b86:	d926      	bls.n	8008bd6 <ucdr_serialize_int16_t+0x7e>
 8008b88:	1b5e      	subs	r6, r3, r5
 8008b8a:	60a3      	str	r3, [r4, #8]
 8008b8c:	6923      	ldr	r3, [r4, #16]
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f1c6 0802 	rsb	r8, r6, #2
 8008b94:	4433      	add	r3, r6
 8008b96:	4641      	mov	r1, r8
 8008b98:	6123      	str	r3, [r4, #16]
 8008b9a:	f000 fb9b 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	d03b      	beq.n	8008c1a <ucdr_serialize_int16_t+0xc2>
 8008ba2:	7d23      	ldrb	r3, [r4, #20]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d04a      	beq.n	8008c3e <ucdr_serialize_int16_t+0xe6>
 8008ba8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008bac:	702b      	strb	r3, [r5, #0]
 8008bae:	2e00      	cmp	r6, #0
 8008bb0:	d040      	beq.n	8008c34 <ucdr_serialize_int16_t+0xdc>
 8008bb2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008bb6:	706b      	strb	r3, [r5, #1]
 8008bb8:	6923      	ldr	r3, [r4, #16]
 8008bba:	2102      	movs	r1, #2
 8008bbc:	68a2      	ldr	r2, [r4, #8]
 8008bbe:	3302      	adds	r3, #2
 8008bc0:	7da0      	ldrb	r0, [r4, #22]
 8008bc2:	4442      	add	r2, r8
 8008bc4:	7561      	strb	r1, [r4, #21]
 8008bc6:	1b9e      	subs	r6, r3, r6
 8008bc8:	f080 0001 	eor.w	r0, r0, #1
 8008bcc:	60a2      	str	r2, [r4, #8]
 8008bce:	6126      	str	r6, [r4, #16]
 8008bd0:	b002      	add	sp, #8
 8008bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bd6:	2102      	movs	r1, #2
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f000 fb7b 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 8008bde:	b190      	cbz	r0, 8008c06 <ucdr_serialize_int16_t+0xae>
 8008be0:	7d23      	ldrb	r3, [r4, #20]
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	68a3      	ldr	r3, [r4, #8]
 8008be6:	d014      	beq.n	8008c12 <ucdr_serialize_int16_t+0xba>
 8008be8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008bec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008bf0:	7019      	strb	r1, [r3, #0]
 8008bf2:	68a3      	ldr	r3, [r4, #8]
 8008bf4:	705a      	strb	r2, [r3, #1]
 8008bf6:	2102      	movs	r1, #2
 8008bf8:	68a2      	ldr	r2, [r4, #8]
 8008bfa:	6923      	ldr	r3, [r4, #16]
 8008bfc:	440a      	add	r2, r1
 8008bfe:	7561      	strb	r1, [r4, #21]
 8008c00:	440b      	add	r3, r1
 8008c02:	60a2      	str	r2, [r4, #8]
 8008c04:	6123      	str	r3, [r4, #16]
 8008c06:	7da0      	ldrb	r0, [r4, #22]
 8008c08:	f080 0001 	eor.w	r0, r0, #1
 8008c0c:	b002      	add	sp, #8
 8008c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c12:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008c16:	801a      	strh	r2, [r3, #0]
 8008c18:	e7ed      	b.n	8008bf6 <ucdr_serialize_int16_t+0x9e>
 8008c1a:	68a2      	ldr	r2, [r4, #8]
 8008c1c:	6923      	ldr	r3, [r4, #16]
 8008c1e:	7da0      	ldrb	r0, [r4, #22]
 8008c20:	1b92      	subs	r2, r2, r6
 8008c22:	1b9b      	subs	r3, r3, r6
 8008c24:	7567      	strb	r7, [r4, #21]
 8008c26:	f080 0001 	eor.w	r0, r0, #1
 8008c2a:	60a2      	str	r2, [r4, #8]
 8008c2c:	6123      	str	r3, [r4, #16]
 8008c2e:	b002      	add	sp, #8
 8008c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c34:	68a3      	ldr	r3, [r4, #8]
 8008c36:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008c3a:	701a      	strb	r2, [r3, #0]
 8008c3c:	e7bc      	b.n	8008bb8 <ucdr_serialize_int16_t+0x60>
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f10d 0506 	add.w	r5, sp, #6
 8008c44:	4632      	mov	r2, r6
 8008c46:	4629      	mov	r1, r5
 8008c48:	f00b fed3 	bl	80149f2 <memcpy>
 8008c4c:	4642      	mov	r2, r8
 8008c4e:	19a9      	adds	r1, r5, r6
 8008c50:	68a0      	ldr	r0, [r4, #8]
 8008c52:	f00b fece 	bl	80149f2 <memcpy>
 8008c56:	e7af      	b.n	8008bb8 <ucdr_serialize_int16_t+0x60>

08008c58 <ucdr_deserialize_int16_t>:
 8008c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	460d      	mov	r5, r1
 8008c60:	2102      	movs	r1, #2
 8008c62:	f000 fb8b 	bl	800937c <ucdr_buffer_alignment>
 8008c66:	4601      	mov	r1, r0
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008c6e:	f000 fbcd 	bl	800940c <ucdr_advance_buffer>
 8008c72:	2102      	movs	r1, #2
 8008c74:	4620      	mov	r0, r4
 8008c76:	f000 fb21 	bl	80092bc <ucdr_check_buffer_available_for>
 8008c7a:	bb60      	cbnz	r0, 8008cd6 <ucdr_deserialize_int16_t+0x7e>
 8008c7c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008c80:	42be      	cmp	r6, r7
 8008c82:	d923      	bls.n	8008ccc <ucdr_deserialize_int16_t+0x74>
 8008c84:	6923      	ldr	r3, [r4, #16]
 8008c86:	4620      	mov	r0, r4
 8008c88:	60a6      	str	r6, [r4, #8]
 8008c8a:	1bf6      	subs	r6, r6, r7
 8008c8c:	4433      	add	r3, r6
 8008c8e:	f1c6 0902 	rsb	r9, r6, #2
 8008c92:	6123      	str	r3, [r4, #16]
 8008c94:	4649      	mov	r1, r9
 8008c96:	f000 fb1d 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	d034      	beq.n	8008d08 <ucdr_deserialize_int16_t+0xb0>
 8008c9e:	7d23      	ldrb	r3, [r4, #20]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d042      	beq.n	8008d2a <ucdr_deserialize_int16_t+0xd2>
 8008ca4:	787b      	ldrb	r3, [r7, #1]
 8008ca6:	702b      	strb	r3, [r5, #0]
 8008ca8:	2e00      	cmp	r6, #0
 8008caa:	d03a      	beq.n	8008d22 <ucdr_deserialize_int16_t+0xca>
 8008cac:	783b      	ldrb	r3, [r7, #0]
 8008cae:	706b      	strb	r3, [r5, #1]
 8008cb0:	6923      	ldr	r3, [r4, #16]
 8008cb2:	2102      	movs	r1, #2
 8008cb4:	68a2      	ldr	r2, [r4, #8]
 8008cb6:	3302      	adds	r3, #2
 8008cb8:	7da0      	ldrb	r0, [r4, #22]
 8008cba:	444a      	add	r2, r9
 8008cbc:	7561      	strb	r1, [r4, #21]
 8008cbe:	1b9b      	subs	r3, r3, r6
 8008cc0:	f080 0001 	eor.w	r0, r0, #1
 8008cc4:	60a2      	str	r2, [r4, #8]
 8008cc6:	6123      	str	r3, [r4, #16]
 8008cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ccc:	2102      	movs	r1, #2
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f000 fb00 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 8008cd4:	b180      	cbz	r0, 8008cf8 <ucdr_deserialize_int16_t+0xa0>
 8008cd6:	7d23      	ldrb	r3, [r4, #20]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	68a3      	ldr	r3, [r4, #8]
 8008cdc:	d011      	beq.n	8008d02 <ucdr_deserialize_int16_t+0xaa>
 8008cde:	785b      	ldrb	r3, [r3, #1]
 8008ce0:	702b      	strb	r3, [r5, #0]
 8008ce2:	68a3      	ldr	r3, [r4, #8]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	706b      	strb	r3, [r5, #1]
 8008ce8:	2102      	movs	r1, #2
 8008cea:	68a2      	ldr	r2, [r4, #8]
 8008cec:	6923      	ldr	r3, [r4, #16]
 8008cee:	440a      	add	r2, r1
 8008cf0:	7561      	strb	r1, [r4, #21]
 8008cf2:	440b      	add	r3, r1
 8008cf4:	60a2      	str	r2, [r4, #8]
 8008cf6:	6123      	str	r3, [r4, #16]
 8008cf8:	7da0      	ldrb	r0, [r4, #22]
 8008cfa:	f080 0001 	eor.w	r0, r0, #1
 8008cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d02:	881b      	ldrh	r3, [r3, #0]
 8008d04:	802b      	strh	r3, [r5, #0]
 8008d06:	e7ef      	b.n	8008ce8 <ucdr_deserialize_int16_t+0x90>
 8008d08:	68a2      	ldr	r2, [r4, #8]
 8008d0a:	6923      	ldr	r3, [r4, #16]
 8008d0c:	1b92      	subs	r2, r2, r6
 8008d0e:	7da0      	ldrb	r0, [r4, #22]
 8008d10:	1b9b      	subs	r3, r3, r6
 8008d12:	f884 8015 	strb.w	r8, [r4, #21]
 8008d16:	f080 0001 	eor.w	r0, r0, #1
 8008d1a:	60a2      	str	r2, [r4, #8]
 8008d1c:	6123      	str	r3, [r4, #16]
 8008d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d22:	68a3      	ldr	r3, [r4, #8]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	706b      	strb	r3, [r5, #1]
 8008d28:	e7c2      	b.n	8008cb0 <ucdr_deserialize_int16_t+0x58>
 8008d2a:	4639      	mov	r1, r7
 8008d2c:	4632      	mov	r2, r6
 8008d2e:	4628      	mov	r0, r5
 8008d30:	f00b fe5f 	bl	80149f2 <memcpy>
 8008d34:	464a      	mov	r2, r9
 8008d36:	19a8      	adds	r0, r5, r6
 8008d38:	68a1      	ldr	r1, [r4, #8]
 8008d3a:	f00b fe5a 	bl	80149f2 <memcpy>
 8008d3e:	e7b7      	b.n	8008cb0 <ucdr_deserialize_int16_t+0x58>

08008d40 <ucdr_serialize_int32_t>:
 8008d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d44:	b082      	sub	sp, #8
 8008d46:	4604      	mov	r4, r0
 8008d48:	9101      	str	r1, [sp, #4]
 8008d4a:	2104      	movs	r1, #4
 8008d4c:	f000 fb16 	bl	800937c <ucdr_buffer_alignment>
 8008d50:	4601      	mov	r1, r0
 8008d52:	4620      	mov	r0, r4
 8008d54:	7d67      	ldrb	r7, [r4, #21]
 8008d56:	f000 fb59 	bl	800940c <ucdr_advance_buffer>
 8008d5a:	2104      	movs	r1, #4
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f000 faad 	bl	80092bc <ucdr_check_buffer_available_for>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d139      	bne.n	8008dda <ucdr_serialize_int32_t+0x9a>
 8008d66:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008d6a:	42ab      	cmp	r3, r5
 8008d6c:	d930      	bls.n	8008dd0 <ucdr_serialize_int32_t+0x90>
 8008d6e:	1b5e      	subs	r6, r3, r5
 8008d70:	60a3      	str	r3, [r4, #8]
 8008d72:	6923      	ldr	r3, [r4, #16]
 8008d74:	4620      	mov	r0, r4
 8008d76:	f1c6 0804 	rsb	r8, r6, #4
 8008d7a:	4433      	add	r3, r6
 8008d7c:	4641      	mov	r1, r8
 8008d7e:	6123      	str	r3, [r4, #16]
 8008d80:	f000 faa8 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 8008d84:	2800      	cmp	r0, #0
 8008d86:	d04c      	beq.n	8008e22 <ucdr_serialize_int32_t+0xe2>
 8008d88:	7d23      	ldrb	r3, [r4, #20]
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d063      	beq.n	8008e56 <ucdr_serialize_int32_t+0x116>
 8008d8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008d92:	702b      	strb	r3, [r5, #0]
 8008d94:	2e00      	cmp	r6, #0
 8008d96:	d051      	beq.n	8008e3c <ucdr_serialize_int32_t+0xfc>
 8008d98:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008d9c:	2e01      	cmp	r6, #1
 8008d9e:	706b      	strb	r3, [r5, #1]
 8008da0:	d050      	beq.n	8008e44 <ucdr_serialize_int32_t+0x104>
 8008da2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008da6:	2e02      	cmp	r6, #2
 8008da8:	70ab      	strb	r3, [r5, #2]
 8008daa:	d04f      	beq.n	8008e4c <ucdr_serialize_int32_t+0x10c>
 8008dac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008db0:	70eb      	strb	r3, [r5, #3]
 8008db2:	6923      	ldr	r3, [r4, #16]
 8008db4:	2104      	movs	r1, #4
 8008db6:	68a2      	ldr	r2, [r4, #8]
 8008db8:	3304      	adds	r3, #4
 8008dba:	7da0      	ldrb	r0, [r4, #22]
 8008dbc:	4442      	add	r2, r8
 8008dbe:	7561      	strb	r1, [r4, #21]
 8008dc0:	1b9e      	subs	r6, r3, r6
 8008dc2:	f080 0001 	eor.w	r0, r0, #1
 8008dc6:	60a2      	str	r2, [r4, #8]
 8008dc8:	6126      	str	r6, [r4, #16]
 8008dca:	b002      	add	sp, #8
 8008dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dd0:	2104      	movs	r1, #4
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f000 fa7e 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 8008dd8:	b1d0      	cbz	r0, 8008e10 <ucdr_serialize_int32_t+0xd0>
 8008dda:	7d23      	ldrb	r3, [r4, #20]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	68a3      	ldr	r3, [r4, #8]
 8008de0:	d01c      	beq.n	8008e1c <ucdr_serialize_int32_t+0xdc>
 8008de2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8008de6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008dea:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8008dee:	7018      	strb	r0, [r3, #0]
 8008df0:	68a3      	ldr	r3, [r4, #8]
 8008df2:	705a      	strb	r2, [r3, #1]
 8008df4:	68a3      	ldr	r3, [r4, #8]
 8008df6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008dfa:	7099      	strb	r1, [r3, #2]
 8008dfc:	68a3      	ldr	r3, [r4, #8]
 8008dfe:	70da      	strb	r2, [r3, #3]
 8008e00:	2104      	movs	r1, #4
 8008e02:	68a2      	ldr	r2, [r4, #8]
 8008e04:	6923      	ldr	r3, [r4, #16]
 8008e06:	440a      	add	r2, r1
 8008e08:	7561      	strb	r1, [r4, #21]
 8008e0a:	440b      	add	r3, r1
 8008e0c:	60a2      	str	r2, [r4, #8]
 8008e0e:	6123      	str	r3, [r4, #16]
 8008e10:	7da0      	ldrb	r0, [r4, #22]
 8008e12:	f080 0001 	eor.w	r0, r0, #1
 8008e16:	b002      	add	sp, #8
 8008e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e1c:	9a01      	ldr	r2, [sp, #4]
 8008e1e:	601a      	str	r2, [r3, #0]
 8008e20:	e7ee      	b.n	8008e00 <ucdr_serialize_int32_t+0xc0>
 8008e22:	68a2      	ldr	r2, [r4, #8]
 8008e24:	6923      	ldr	r3, [r4, #16]
 8008e26:	7da0      	ldrb	r0, [r4, #22]
 8008e28:	1b92      	subs	r2, r2, r6
 8008e2a:	1b9b      	subs	r3, r3, r6
 8008e2c:	7567      	strb	r7, [r4, #21]
 8008e2e:	f080 0001 	eor.w	r0, r0, #1
 8008e32:	60a2      	str	r2, [r4, #8]
 8008e34:	6123      	str	r3, [r4, #16]
 8008e36:	b002      	add	sp, #8
 8008e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e3c:	68a3      	ldr	r3, [r4, #8]
 8008e3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008e42:	701a      	strb	r2, [r3, #0]
 8008e44:	68a3      	ldr	r3, [r4, #8]
 8008e46:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008e4a:	701a      	strb	r2, [r3, #0]
 8008e4c:	68a3      	ldr	r3, [r4, #8]
 8008e4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008e52:	701a      	strb	r2, [r3, #0]
 8008e54:	e7ad      	b.n	8008db2 <ucdr_serialize_int32_t+0x72>
 8008e56:	4628      	mov	r0, r5
 8008e58:	ad01      	add	r5, sp, #4
 8008e5a:	4632      	mov	r2, r6
 8008e5c:	4629      	mov	r1, r5
 8008e5e:	f00b fdc8 	bl	80149f2 <memcpy>
 8008e62:	4642      	mov	r2, r8
 8008e64:	19a9      	adds	r1, r5, r6
 8008e66:	68a0      	ldr	r0, [r4, #8]
 8008e68:	f00b fdc3 	bl	80149f2 <memcpy>
 8008e6c:	e7a1      	b.n	8008db2 <ucdr_serialize_int32_t+0x72>
 8008e6e:	bf00      	nop

08008e70 <ucdr_deserialize_int32_t>:
 8008e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e74:	4604      	mov	r4, r0
 8008e76:	460d      	mov	r5, r1
 8008e78:	2104      	movs	r1, #4
 8008e7a:	f000 fa7f 	bl	800937c <ucdr_buffer_alignment>
 8008e7e:	4601      	mov	r1, r0
 8008e80:	4620      	mov	r0, r4
 8008e82:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008e86:	f000 fac1 	bl	800940c <ucdr_advance_buffer>
 8008e8a:	2104      	movs	r1, #4
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	f000 fa15 	bl	80092bc <ucdr_check_buffer_available_for>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	d138      	bne.n	8008f08 <ucdr_deserialize_int32_t+0x98>
 8008e96:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008e9a:	42b7      	cmp	r7, r6
 8008e9c:	d92f      	bls.n	8008efe <ucdr_deserialize_int32_t+0x8e>
 8008e9e:	6923      	ldr	r3, [r4, #16]
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	60a7      	str	r7, [r4, #8]
 8008ea4:	1bbf      	subs	r7, r7, r6
 8008ea6:	443b      	add	r3, r7
 8008ea8:	f1c7 0904 	rsb	r9, r7, #4
 8008eac:	6123      	str	r3, [r4, #16]
 8008eae:	4649      	mov	r1, r9
 8008eb0:	f000 fa10 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	d046      	beq.n	8008f46 <ucdr_deserialize_int32_t+0xd6>
 8008eb8:	7d23      	ldrb	r3, [r4, #20]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d05c      	beq.n	8008f78 <ucdr_deserialize_int32_t+0x108>
 8008ebe:	78f3      	ldrb	r3, [r6, #3]
 8008ec0:	702b      	strb	r3, [r5, #0]
 8008ec2:	2f00      	cmp	r7, #0
 8008ec4:	d04c      	beq.n	8008f60 <ucdr_deserialize_int32_t+0xf0>
 8008ec6:	78b3      	ldrb	r3, [r6, #2]
 8008ec8:	2f01      	cmp	r7, #1
 8008eca:	706b      	strb	r3, [r5, #1]
 8008ecc:	f105 0302 	add.w	r3, r5, #2
 8008ed0:	d04a      	beq.n	8008f68 <ucdr_deserialize_int32_t+0xf8>
 8008ed2:	7873      	ldrb	r3, [r6, #1]
 8008ed4:	2f02      	cmp	r7, #2
 8008ed6:	70ab      	strb	r3, [r5, #2]
 8008ed8:	f105 0303 	add.w	r3, r5, #3
 8008edc:	d048      	beq.n	8008f70 <ucdr_deserialize_int32_t+0x100>
 8008ede:	7833      	ldrb	r3, [r6, #0]
 8008ee0:	70eb      	strb	r3, [r5, #3]
 8008ee2:	6923      	ldr	r3, [r4, #16]
 8008ee4:	2104      	movs	r1, #4
 8008ee6:	68a2      	ldr	r2, [r4, #8]
 8008ee8:	3304      	adds	r3, #4
 8008eea:	7da0      	ldrb	r0, [r4, #22]
 8008eec:	444a      	add	r2, r9
 8008eee:	7561      	strb	r1, [r4, #21]
 8008ef0:	1bdb      	subs	r3, r3, r7
 8008ef2:	f080 0001 	eor.w	r0, r0, #1
 8008ef6:	60a2      	str	r2, [r4, #8]
 8008ef8:	6123      	str	r3, [r4, #16]
 8008efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008efe:	2104      	movs	r1, #4
 8008f00:	4620      	mov	r0, r4
 8008f02:	f000 f9e7 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 8008f06:	b1b0      	cbz	r0, 8008f36 <ucdr_deserialize_int32_t+0xc6>
 8008f08:	7d23      	ldrb	r3, [r4, #20]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	68a3      	ldr	r3, [r4, #8]
 8008f0e:	d017      	beq.n	8008f40 <ucdr_deserialize_int32_t+0xd0>
 8008f10:	78db      	ldrb	r3, [r3, #3]
 8008f12:	702b      	strb	r3, [r5, #0]
 8008f14:	68a3      	ldr	r3, [r4, #8]
 8008f16:	789b      	ldrb	r3, [r3, #2]
 8008f18:	706b      	strb	r3, [r5, #1]
 8008f1a:	68a3      	ldr	r3, [r4, #8]
 8008f1c:	785b      	ldrb	r3, [r3, #1]
 8008f1e:	70ab      	strb	r3, [r5, #2]
 8008f20:	68a3      	ldr	r3, [r4, #8]
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	70eb      	strb	r3, [r5, #3]
 8008f26:	2104      	movs	r1, #4
 8008f28:	68a2      	ldr	r2, [r4, #8]
 8008f2a:	6923      	ldr	r3, [r4, #16]
 8008f2c:	440a      	add	r2, r1
 8008f2e:	7561      	strb	r1, [r4, #21]
 8008f30:	440b      	add	r3, r1
 8008f32:	60a2      	str	r2, [r4, #8]
 8008f34:	6123      	str	r3, [r4, #16]
 8008f36:	7da0      	ldrb	r0, [r4, #22]
 8008f38:	f080 0001 	eor.w	r0, r0, #1
 8008f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	602b      	str	r3, [r5, #0]
 8008f44:	e7ef      	b.n	8008f26 <ucdr_deserialize_int32_t+0xb6>
 8008f46:	68a2      	ldr	r2, [r4, #8]
 8008f48:	6923      	ldr	r3, [r4, #16]
 8008f4a:	1bd2      	subs	r2, r2, r7
 8008f4c:	7da0      	ldrb	r0, [r4, #22]
 8008f4e:	1bdb      	subs	r3, r3, r7
 8008f50:	f884 8015 	strb.w	r8, [r4, #21]
 8008f54:	f080 0001 	eor.w	r0, r0, #1
 8008f58:	60a2      	str	r2, [r4, #8]
 8008f5a:	6123      	str	r3, [r4, #16]
 8008f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f60:	68a3      	ldr	r3, [r4, #8]
 8008f62:	789b      	ldrb	r3, [r3, #2]
 8008f64:	706b      	strb	r3, [r5, #1]
 8008f66:	1cab      	adds	r3, r5, #2
 8008f68:	68a2      	ldr	r2, [r4, #8]
 8008f6a:	7852      	ldrb	r2, [r2, #1]
 8008f6c:	f803 2b01 	strb.w	r2, [r3], #1
 8008f70:	68a2      	ldr	r2, [r4, #8]
 8008f72:	7812      	ldrb	r2, [r2, #0]
 8008f74:	701a      	strb	r2, [r3, #0]
 8008f76:	e7b4      	b.n	8008ee2 <ucdr_deserialize_int32_t+0x72>
 8008f78:	4631      	mov	r1, r6
 8008f7a:	463a      	mov	r2, r7
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	f00b fd38 	bl	80149f2 <memcpy>
 8008f82:	464a      	mov	r2, r9
 8008f84:	19e8      	adds	r0, r5, r7
 8008f86:	68a1      	ldr	r1, [r4, #8]
 8008f88:	f00b fd33 	bl	80149f2 <memcpy>
 8008f8c:	e7a9      	b.n	8008ee2 <ucdr_deserialize_int32_t+0x72>
 8008f8e:	bf00      	nop

08008f90 <ucdr_serialize_int64_t>:
 8008f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f94:	4604      	mov	r4, r0
 8008f96:	b082      	sub	sp, #8
 8008f98:	2108      	movs	r1, #8
 8008f9a:	e9cd 2300 	strd	r2, r3, [sp]
 8008f9e:	f000 f9ed 	bl	800937c <ucdr_buffer_alignment>
 8008fa2:	4601      	mov	r1, r0
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	7d67      	ldrb	r7, [r4, #21]
 8008fa8:	f000 fa30 	bl	800940c <ucdr_advance_buffer>
 8008fac:	2108      	movs	r1, #8
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f000 f984 	bl	80092bc <ucdr_check_buffer_available_for>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d14e      	bne.n	8009056 <ucdr_serialize_int64_t+0xc6>
 8008fb8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008fbc:	42ab      	cmp	r3, r5
 8008fbe:	d945      	bls.n	800904c <ucdr_serialize_int64_t+0xbc>
 8008fc0:	1b5e      	subs	r6, r3, r5
 8008fc2:	60a3      	str	r3, [r4, #8]
 8008fc4:	6923      	ldr	r3, [r4, #16]
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f1c6 0808 	rsb	r8, r6, #8
 8008fcc:	4433      	add	r3, r6
 8008fce:	4641      	mov	r1, r8
 8008fd0:	6123      	str	r3, [r4, #16]
 8008fd2:	f000 f97f 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	d074      	beq.n	80090c4 <ucdr_serialize_int64_t+0x134>
 8008fda:	7d23      	ldrb	r3, [r4, #20]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	f000 809b 	beq.w	8009118 <ucdr_serialize_int64_t+0x188>
 8008fe2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008fe6:	702b      	strb	r3, [r5, #0]
 8008fe8:	2e00      	cmp	r6, #0
 8008fea:	d078      	beq.n	80090de <ucdr_serialize_int64_t+0x14e>
 8008fec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008ff0:	2e01      	cmp	r6, #1
 8008ff2:	706b      	strb	r3, [r5, #1]
 8008ff4:	d077      	beq.n	80090e6 <ucdr_serialize_int64_t+0x156>
 8008ff6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008ffa:	2e02      	cmp	r6, #2
 8008ffc:	70ab      	strb	r3, [r5, #2]
 8008ffe:	d076      	beq.n	80090ee <ucdr_serialize_int64_t+0x15e>
 8009000:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009004:	2e03      	cmp	r6, #3
 8009006:	70eb      	strb	r3, [r5, #3]
 8009008:	d075      	beq.n	80090f6 <ucdr_serialize_int64_t+0x166>
 800900a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800900e:	2e04      	cmp	r6, #4
 8009010:	712b      	strb	r3, [r5, #4]
 8009012:	d074      	beq.n	80090fe <ucdr_serialize_int64_t+0x16e>
 8009014:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8009018:	2e05      	cmp	r6, #5
 800901a:	716b      	strb	r3, [r5, #5]
 800901c:	d073      	beq.n	8009106 <ucdr_serialize_int64_t+0x176>
 800901e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8009022:	2e06      	cmp	r6, #6
 8009024:	71ab      	strb	r3, [r5, #6]
 8009026:	d072      	beq.n	800910e <ucdr_serialize_int64_t+0x17e>
 8009028:	f89d 3000 	ldrb.w	r3, [sp]
 800902c:	71eb      	strb	r3, [r5, #7]
 800902e:	6923      	ldr	r3, [r4, #16]
 8009030:	2108      	movs	r1, #8
 8009032:	68a2      	ldr	r2, [r4, #8]
 8009034:	3308      	adds	r3, #8
 8009036:	7da0      	ldrb	r0, [r4, #22]
 8009038:	4442      	add	r2, r8
 800903a:	7561      	strb	r1, [r4, #21]
 800903c:	1b9e      	subs	r6, r3, r6
 800903e:	f080 0001 	eor.w	r0, r0, #1
 8009042:	60a2      	str	r2, [r4, #8]
 8009044:	6126      	str	r6, [r4, #16]
 8009046:	b002      	add	sp, #8
 8009048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800904c:	2108      	movs	r1, #8
 800904e:	4620      	mov	r0, r4
 8009050:	f000 f940 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 8009054:	b350      	cbz	r0, 80090ac <ucdr_serialize_int64_t+0x11c>
 8009056:	7d23      	ldrb	r3, [r4, #20]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d02d      	beq.n	80090b8 <ucdr_serialize_int64_t+0x128>
 800905c:	68a3      	ldr	r3, [r4, #8]
 800905e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8009062:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009066:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800906a:	7018      	strb	r0, [r3, #0]
 800906c:	68a3      	ldr	r3, [r4, #8]
 800906e:	705a      	strb	r2, [r3, #1]
 8009070:	68a3      	ldr	r3, [r4, #8]
 8009072:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009076:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800907a:	7099      	strb	r1, [r3, #2]
 800907c:	68a3      	ldr	r3, [r4, #8]
 800907e:	70da      	strb	r2, [r3, #3]
 8009080:	68a3      	ldr	r3, [r4, #8]
 8009082:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009086:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800908a:	7118      	strb	r0, [r3, #4]
 800908c:	68a3      	ldr	r3, [r4, #8]
 800908e:	715a      	strb	r2, [r3, #5]
 8009090:	68a3      	ldr	r3, [r4, #8]
 8009092:	f89d 2000 	ldrb.w	r2, [sp]
 8009096:	7199      	strb	r1, [r3, #6]
 8009098:	68a3      	ldr	r3, [r4, #8]
 800909a:	71da      	strb	r2, [r3, #7]
 800909c:	2108      	movs	r1, #8
 800909e:	68a2      	ldr	r2, [r4, #8]
 80090a0:	6923      	ldr	r3, [r4, #16]
 80090a2:	440a      	add	r2, r1
 80090a4:	7561      	strb	r1, [r4, #21]
 80090a6:	440b      	add	r3, r1
 80090a8:	60a2      	str	r2, [r4, #8]
 80090aa:	6123      	str	r3, [r4, #16]
 80090ac:	7da0      	ldrb	r0, [r4, #22]
 80090ae:	f080 0001 	eor.w	r0, r0, #1
 80090b2:	b002      	add	sp, #8
 80090b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090b8:	466b      	mov	r3, sp
 80090ba:	68a2      	ldr	r2, [r4, #8]
 80090bc:	cb03      	ldmia	r3!, {r0, r1}
 80090be:	6010      	str	r0, [r2, #0]
 80090c0:	6051      	str	r1, [r2, #4]
 80090c2:	e7eb      	b.n	800909c <ucdr_serialize_int64_t+0x10c>
 80090c4:	68a2      	ldr	r2, [r4, #8]
 80090c6:	6923      	ldr	r3, [r4, #16]
 80090c8:	7da0      	ldrb	r0, [r4, #22]
 80090ca:	1b92      	subs	r2, r2, r6
 80090cc:	1b9b      	subs	r3, r3, r6
 80090ce:	7567      	strb	r7, [r4, #21]
 80090d0:	f080 0001 	eor.w	r0, r0, #1
 80090d4:	60a2      	str	r2, [r4, #8]
 80090d6:	6123      	str	r3, [r4, #16]
 80090d8:	b002      	add	sp, #8
 80090da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090de:	68a3      	ldr	r3, [r4, #8]
 80090e0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80090e4:	701a      	strb	r2, [r3, #0]
 80090e6:	68a3      	ldr	r3, [r4, #8]
 80090e8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80090ec:	701a      	strb	r2, [r3, #0]
 80090ee:	68a3      	ldr	r3, [r4, #8]
 80090f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80090f4:	701a      	strb	r2, [r3, #0]
 80090f6:	68a3      	ldr	r3, [r4, #8]
 80090f8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80090fc:	701a      	strb	r2, [r3, #0]
 80090fe:	68a3      	ldr	r3, [r4, #8]
 8009100:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009104:	701a      	strb	r2, [r3, #0]
 8009106:	68a3      	ldr	r3, [r4, #8]
 8009108:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800910c:	701a      	strb	r2, [r3, #0]
 800910e:	68a3      	ldr	r3, [r4, #8]
 8009110:	f89d 2000 	ldrb.w	r2, [sp]
 8009114:	701a      	strb	r2, [r3, #0]
 8009116:	e78a      	b.n	800902e <ucdr_serialize_int64_t+0x9e>
 8009118:	4628      	mov	r0, r5
 800911a:	466d      	mov	r5, sp
 800911c:	4632      	mov	r2, r6
 800911e:	4629      	mov	r1, r5
 8009120:	f00b fc67 	bl	80149f2 <memcpy>
 8009124:	4642      	mov	r2, r8
 8009126:	19a9      	adds	r1, r5, r6
 8009128:	68a0      	ldr	r0, [r4, #8]
 800912a:	f00b fc62 	bl	80149f2 <memcpy>
 800912e:	e77e      	b.n	800902e <ucdr_serialize_int64_t+0x9e>

08009130 <ucdr_deserialize_int64_t>:
 8009130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009134:	4604      	mov	r4, r0
 8009136:	460d      	mov	r5, r1
 8009138:	2108      	movs	r1, #8
 800913a:	f000 f91f 	bl	800937c <ucdr_buffer_alignment>
 800913e:	4601      	mov	r1, r0
 8009140:	4620      	mov	r0, r4
 8009142:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009146:	f000 f961 	bl	800940c <ucdr_advance_buffer>
 800914a:	2108      	movs	r1, #8
 800914c:	4620      	mov	r0, r4
 800914e:	f000 f8b5 	bl	80092bc <ucdr_check_buffer_available_for>
 8009152:	2800      	cmp	r0, #0
 8009154:	d151      	bne.n	80091fa <ucdr_deserialize_int64_t+0xca>
 8009156:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800915a:	42be      	cmp	r6, r7
 800915c:	d948      	bls.n	80091f0 <ucdr_deserialize_int64_t+0xc0>
 800915e:	6923      	ldr	r3, [r4, #16]
 8009160:	4620      	mov	r0, r4
 8009162:	60a6      	str	r6, [r4, #8]
 8009164:	1bf6      	subs	r6, r6, r7
 8009166:	4433      	add	r3, r6
 8009168:	f1c6 0908 	rsb	r9, r6, #8
 800916c:	6123      	str	r3, [r4, #16]
 800916e:	4649      	mov	r1, r9
 8009170:	f000 f8b0 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 8009174:	2800      	cmp	r0, #0
 8009176:	d06d      	beq.n	8009254 <ucdr_deserialize_int64_t+0x124>
 8009178:	7d23      	ldrb	r3, [r4, #20]
 800917a:	2b01      	cmp	r3, #1
 800917c:	f000 8093 	beq.w	80092a6 <ucdr_deserialize_int64_t+0x176>
 8009180:	79fb      	ldrb	r3, [r7, #7]
 8009182:	702b      	strb	r3, [r5, #0]
 8009184:	2e00      	cmp	r6, #0
 8009186:	d072      	beq.n	800926e <ucdr_deserialize_int64_t+0x13e>
 8009188:	79bb      	ldrb	r3, [r7, #6]
 800918a:	2e01      	cmp	r6, #1
 800918c:	706b      	strb	r3, [r5, #1]
 800918e:	f105 0302 	add.w	r3, r5, #2
 8009192:	d070      	beq.n	8009276 <ucdr_deserialize_int64_t+0x146>
 8009194:	797b      	ldrb	r3, [r7, #5]
 8009196:	2e02      	cmp	r6, #2
 8009198:	70ab      	strb	r3, [r5, #2]
 800919a:	f105 0303 	add.w	r3, r5, #3
 800919e:	d06e      	beq.n	800927e <ucdr_deserialize_int64_t+0x14e>
 80091a0:	793b      	ldrb	r3, [r7, #4]
 80091a2:	2e03      	cmp	r6, #3
 80091a4:	70eb      	strb	r3, [r5, #3]
 80091a6:	f105 0304 	add.w	r3, r5, #4
 80091aa:	d06c      	beq.n	8009286 <ucdr_deserialize_int64_t+0x156>
 80091ac:	78fb      	ldrb	r3, [r7, #3]
 80091ae:	2e04      	cmp	r6, #4
 80091b0:	712b      	strb	r3, [r5, #4]
 80091b2:	f105 0305 	add.w	r3, r5, #5
 80091b6:	d06a      	beq.n	800928e <ucdr_deserialize_int64_t+0x15e>
 80091b8:	78bb      	ldrb	r3, [r7, #2]
 80091ba:	2e05      	cmp	r6, #5
 80091bc:	716b      	strb	r3, [r5, #5]
 80091be:	f105 0306 	add.w	r3, r5, #6
 80091c2:	d068      	beq.n	8009296 <ucdr_deserialize_int64_t+0x166>
 80091c4:	787b      	ldrb	r3, [r7, #1]
 80091c6:	2e06      	cmp	r6, #6
 80091c8:	71ab      	strb	r3, [r5, #6]
 80091ca:	f105 0307 	add.w	r3, r5, #7
 80091ce:	d066      	beq.n	800929e <ucdr_deserialize_int64_t+0x16e>
 80091d0:	783b      	ldrb	r3, [r7, #0]
 80091d2:	71eb      	strb	r3, [r5, #7]
 80091d4:	6923      	ldr	r3, [r4, #16]
 80091d6:	2108      	movs	r1, #8
 80091d8:	68a2      	ldr	r2, [r4, #8]
 80091da:	3308      	adds	r3, #8
 80091dc:	7da0      	ldrb	r0, [r4, #22]
 80091de:	444a      	add	r2, r9
 80091e0:	7561      	strb	r1, [r4, #21]
 80091e2:	1b9e      	subs	r6, r3, r6
 80091e4:	f080 0001 	eor.w	r0, r0, #1
 80091e8:	60a2      	str	r2, [r4, #8]
 80091ea:	6126      	str	r6, [r4, #16]
 80091ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091f0:	2108      	movs	r1, #8
 80091f2:	4620      	mov	r0, r4
 80091f4:	f000 f86e 	bl	80092d4 <ucdr_check_final_buffer_behavior>
 80091f8:	b310      	cbz	r0, 8009240 <ucdr_deserialize_int64_t+0x110>
 80091fa:	7d23      	ldrb	r3, [r4, #20]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	68a3      	ldr	r3, [r4, #8]
 8009200:	d023      	beq.n	800924a <ucdr_deserialize_int64_t+0x11a>
 8009202:	79db      	ldrb	r3, [r3, #7]
 8009204:	702b      	strb	r3, [r5, #0]
 8009206:	68a3      	ldr	r3, [r4, #8]
 8009208:	799b      	ldrb	r3, [r3, #6]
 800920a:	706b      	strb	r3, [r5, #1]
 800920c:	68a3      	ldr	r3, [r4, #8]
 800920e:	795b      	ldrb	r3, [r3, #5]
 8009210:	70ab      	strb	r3, [r5, #2]
 8009212:	68a3      	ldr	r3, [r4, #8]
 8009214:	791b      	ldrb	r3, [r3, #4]
 8009216:	70eb      	strb	r3, [r5, #3]
 8009218:	68a3      	ldr	r3, [r4, #8]
 800921a:	78db      	ldrb	r3, [r3, #3]
 800921c:	712b      	strb	r3, [r5, #4]
 800921e:	68a3      	ldr	r3, [r4, #8]
 8009220:	789b      	ldrb	r3, [r3, #2]
 8009222:	716b      	strb	r3, [r5, #5]
 8009224:	68a3      	ldr	r3, [r4, #8]
 8009226:	785b      	ldrb	r3, [r3, #1]
 8009228:	71ab      	strb	r3, [r5, #6]
 800922a:	68a3      	ldr	r3, [r4, #8]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	71eb      	strb	r3, [r5, #7]
 8009230:	2108      	movs	r1, #8
 8009232:	68a2      	ldr	r2, [r4, #8]
 8009234:	6923      	ldr	r3, [r4, #16]
 8009236:	440a      	add	r2, r1
 8009238:	7561      	strb	r1, [r4, #21]
 800923a:	440b      	add	r3, r1
 800923c:	60a2      	str	r2, [r4, #8]
 800923e:	6123      	str	r3, [r4, #16]
 8009240:	7da0      	ldrb	r0, [r4, #22]
 8009242:	f080 0001 	eor.w	r0, r0, #1
 8009246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	602a      	str	r2, [r5, #0]
 8009250:	606b      	str	r3, [r5, #4]
 8009252:	e7ed      	b.n	8009230 <ucdr_deserialize_int64_t+0x100>
 8009254:	68a2      	ldr	r2, [r4, #8]
 8009256:	6923      	ldr	r3, [r4, #16]
 8009258:	1b92      	subs	r2, r2, r6
 800925a:	7da0      	ldrb	r0, [r4, #22]
 800925c:	1b9b      	subs	r3, r3, r6
 800925e:	f884 8015 	strb.w	r8, [r4, #21]
 8009262:	f080 0001 	eor.w	r0, r0, #1
 8009266:	60a2      	str	r2, [r4, #8]
 8009268:	6123      	str	r3, [r4, #16]
 800926a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800926e:	68a3      	ldr	r3, [r4, #8]
 8009270:	799b      	ldrb	r3, [r3, #6]
 8009272:	706b      	strb	r3, [r5, #1]
 8009274:	1cab      	adds	r3, r5, #2
 8009276:	68a2      	ldr	r2, [r4, #8]
 8009278:	7952      	ldrb	r2, [r2, #5]
 800927a:	f803 2b01 	strb.w	r2, [r3], #1
 800927e:	68a2      	ldr	r2, [r4, #8]
 8009280:	7912      	ldrb	r2, [r2, #4]
 8009282:	f803 2b01 	strb.w	r2, [r3], #1
 8009286:	68a2      	ldr	r2, [r4, #8]
 8009288:	78d2      	ldrb	r2, [r2, #3]
 800928a:	f803 2b01 	strb.w	r2, [r3], #1
 800928e:	68a2      	ldr	r2, [r4, #8]
 8009290:	7892      	ldrb	r2, [r2, #2]
 8009292:	f803 2b01 	strb.w	r2, [r3], #1
 8009296:	68a2      	ldr	r2, [r4, #8]
 8009298:	7852      	ldrb	r2, [r2, #1]
 800929a:	f803 2b01 	strb.w	r2, [r3], #1
 800929e:	68a2      	ldr	r2, [r4, #8]
 80092a0:	7812      	ldrb	r2, [r2, #0]
 80092a2:	701a      	strb	r2, [r3, #0]
 80092a4:	e796      	b.n	80091d4 <ucdr_deserialize_int64_t+0xa4>
 80092a6:	4639      	mov	r1, r7
 80092a8:	4632      	mov	r2, r6
 80092aa:	4628      	mov	r0, r5
 80092ac:	f00b fba1 	bl	80149f2 <memcpy>
 80092b0:	464a      	mov	r2, r9
 80092b2:	19a8      	adds	r0, r5, r6
 80092b4:	68a1      	ldr	r1, [r4, #8]
 80092b6:	f00b fb9c 	bl	80149f2 <memcpy>
 80092ba:	e78b      	b.n	80091d4 <ucdr_deserialize_int64_t+0xa4>

080092bc <ucdr_check_buffer_available_for>:
 80092bc:	7d83      	ldrb	r3, [r0, #22]
 80092be:	b93b      	cbnz	r3, 80092d0 <ucdr_check_buffer_available_for+0x14>
 80092c0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80092c4:	4419      	add	r1, r3
 80092c6:	4288      	cmp	r0, r1
 80092c8:	bf34      	ite	cc
 80092ca:	2000      	movcc	r0, #0
 80092cc:	2001      	movcs	r0, #1
 80092ce:	4770      	bx	lr
 80092d0:	2000      	movs	r0, #0
 80092d2:	4770      	bx	lr

080092d4 <ucdr_check_final_buffer_behavior>:
 80092d4:	7d83      	ldrb	r3, [r0, #22]
 80092d6:	b943      	cbnz	r3, 80092ea <ucdr_check_final_buffer_behavior+0x16>
 80092d8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80092dc:	b510      	push	{r4, lr}
 80092de:	4291      	cmp	r1, r2
 80092e0:	4604      	mov	r4, r0
 80092e2:	d205      	bcs.n	80092f0 <ucdr_check_final_buffer_behavior+0x1c>
 80092e4:	2301      	movs	r3, #1
 80092e6:	4618      	mov	r0, r3
 80092e8:	bd10      	pop	{r4, pc}
 80092ea:	2300      	movs	r3, #0
 80092ec:	4618      	mov	r0, r3
 80092ee:	4770      	bx	lr
 80092f0:	6982      	ldr	r2, [r0, #24]
 80092f2:	b13a      	cbz	r2, 8009304 <ucdr_check_final_buffer_behavior+0x30>
 80092f4:	69c1      	ldr	r1, [r0, #28]
 80092f6:	4790      	blx	r2
 80092f8:	f080 0301 	eor.w	r3, r0, #1
 80092fc:	75a0      	strb	r0, [r4, #22]
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	4618      	mov	r0, r3
 8009302:	bd10      	pop	{r4, pc}
 8009304:	2001      	movs	r0, #1
 8009306:	75a0      	strb	r0, [r4, #22]
 8009308:	e7fa      	b.n	8009300 <ucdr_check_final_buffer_behavior+0x2c>
 800930a:	bf00      	nop

0800930c <ucdr_set_on_full_buffer_callback>:
 800930c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop

08009314 <ucdr_init_buffer_origin_offset_endian>:
 8009314:	b410      	push	{r4}
 8009316:	9c01      	ldr	r4, [sp, #4]
 8009318:	440a      	add	r2, r1
 800931a:	6001      	str	r1, [r0, #0]
 800931c:	6042      	str	r2, [r0, #4]
 800931e:	190a      	adds	r2, r1, r4
 8009320:	441c      	add	r4, r3
 8009322:	6082      	str	r2, [r0, #8]
 8009324:	2200      	movs	r2, #0
 8009326:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800932a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800932e:	7542      	strb	r2, [r0, #21]
 8009330:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009334:	7582      	strb	r2, [r0, #22]
 8009336:	7503      	strb	r3, [r0, #20]
 8009338:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop

08009340 <ucdr_init_buffer_origin_offset>:
 8009340:	b510      	push	{r4, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	9c04      	ldr	r4, [sp, #16]
 8009346:	9400      	str	r4, [sp, #0]
 8009348:	2401      	movs	r4, #1
 800934a:	9401      	str	r4, [sp, #4]
 800934c:	f7ff ffe2 	bl	8009314 <ucdr_init_buffer_origin_offset_endian>
 8009350:	b002      	add	sp, #8
 8009352:	bd10      	pop	{r4, pc}

08009354 <ucdr_init_buffer_origin>:
 8009354:	b510      	push	{r4, lr}
 8009356:	2400      	movs	r4, #0
 8009358:	b082      	sub	sp, #8
 800935a:	9400      	str	r4, [sp, #0]
 800935c:	f7ff fff0 	bl	8009340 <ucdr_init_buffer_origin_offset>
 8009360:	b002      	add	sp, #8
 8009362:	bd10      	pop	{r4, pc}

08009364 <ucdr_init_buffer>:
 8009364:	2300      	movs	r3, #0
 8009366:	f7ff bff5 	b.w	8009354 <ucdr_init_buffer_origin>
 800936a:	bf00      	nop

0800936c <ucdr_alignment>:
 800936c:	fbb0 f2f1 	udiv	r2, r0, r1
 8009370:	fb02 0011 	mls	r0, r2, r1, r0
 8009374:	1e4b      	subs	r3, r1, #1
 8009376:	1a08      	subs	r0, r1, r0
 8009378:	4018      	ands	r0, r3
 800937a:	4770      	bx	lr

0800937c <ucdr_buffer_alignment>:
 800937c:	7d43      	ldrb	r3, [r0, #21]
 800937e:	428b      	cmp	r3, r1
 8009380:	d209      	bcs.n	8009396 <ucdr_buffer_alignment+0x1a>
 8009382:	6903      	ldr	r3, [r0, #16]
 8009384:	1e4a      	subs	r2, r1, #1
 8009386:	fbb3 f0f1 	udiv	r0, r3, r1
 800938a:	fb01 3010 	mls	r0, r1, r0, r3
 800938e:	1a09      	subs	r1, r1, r0
 8009390:	ea01 0002 	and.w	r0, r1, r2
 8009394:	4770      	bx	lr
 8009396:	2000      	movs	r0, #0
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop

0800939c <ucdr_align_to>:
 800939c:	b538      	push	{r3, r4, r5, lr}
 800939e:	4604      	mov	r4, r0
 80093a0:	460d      	mov	r5, r1
 80093a2:	f7ff ffeb 	bl	800937c <ucdr_buffer_alignment>
 80093a6:	68a3      	ldr	r3, [r4, #8]
 80093a8:	7565      	strb	r5, [r4, #21]
 80093aa:	181a      	adds	r2, r3, r0
 80093ac:	6923      	ldr	r3, [r4, #16]
 80093ae:	4418      	add	r0, r3
 80093b0:	6863      	ldr	r3, [r4, #4]
 80093b2:	4293      	cmp	r3, r2
 80093b4:	6120      	str	r0, [r4, #16]
 80093b6:	bf28      	it	cs
 80093b8:	4613      	movcs	r3, r2
 80093ba:	60a3      	str	r3, [r4, #8]
 80093bc:	bd38      	pop	{r3, r4, r5, pc}
 80093be:	bf00      	nop

080093c0 <ucdr_buffer_length>:
 80093c0:	6882      	ldr	r2, [r0, #8]
 80093c2:	6800      	ldr	r0, [r0, #0]
 80093c4:	1a10      	subs	r0, r2, r0
 80093c6:	4770      	bx	lr

080093c8 <ucdr_buffer_remaining>:
 80093c8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80093cc:	1a10      	subs	r0, r2, r0
 80093ce:	4770      	bx	lr

080093d0 <ucdr_check_final_buffer_behavior_array>:
 80093d0:	b538      	push	{r3, r4, r5, lr}
 80093d2:	7d83      	ldrb	r3, [r0, #22]
 80093d4:	b9a3      	cbnz	r3, 8009400 <ucdr_check_final_buffer_behavior_array+0x30>
 80093d6:	4604      	mov	r4, r0
 80093d8:	460d      	mov	r5, r1
 80093da:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d300      	bcc.n	80093e4 <ucdr_check_final_buffer_behavior_array+0x14>
 80093e2:	b931      	cbnz	r1, 80093f2 <ucdr_check_final_buffer_behavior_array+0x22>
 80093e4:	4620      	mov	r0, r4
 80093e6:	f7ff ffef 	bl	80093c8 <ucdr_buffer_remaining>
 80093ea:	42a8      	cmp	r0, r5
 80093ec:	bf28      	it	cs
 80093ee:	4628      	movcs	r0, r5
 80093f0:	bd38      	pop	{r3, r4, r5, pc}
 80093f2:	6983      	ldr	r3, [r0, #24]
 80093f4:	b133      	cbz	r3, 8009404 <ucdr_check_final_buffer_behavior_array+0x34>
 80093f6:	69c1      	ldr	r1, [r0, #28]
 80093f8:	4798      	blx	r3
 80093fa:	75a0      	strb	r0, [r4, #22]
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d0f1      	beq.n	80093e4 <ucdr_check_final_buffer_behavior_array+0x14>
 8009400:	2000      	movs	r0, #0
 8009402:	bd38      	pop	{r3, r4, r5, pc}
 8009404:	2301      	movs	r3, #1
 8009406:	7583      	strb	r3, [r0, #22]
 8009408:	e7fa      	b.n	8009400 <ucdr_check_final_buffer_behavior_array+0x30>
 800940a:	bf00      	nop

0800940c <ucdr_advance_buffer>:
 800940c:	b538      	push	{r3, r4, r5, lr}
 800940e:	4604      	mov	r4, r0
 8009410:	460d      	mov	r5, r1
 8009412:	f7ff ff53 	bl	80092bc <ucdr_check_buffer_available_for>
 8009416:	b178      	cbz	r0, 8009438 <ucdr_advance_buffer+0x2c>
 8009418:	6923      	ldr	r3, [r4, #16]
 800941a:	68a2      	ldr	r2, [r4, #8]
 800941c:	442b      	add	r3, r5
 800941e:	442a      	add	r2, r5
 8009420:	6123      	str	r3, [r4, #16]
 8009422:	2301      	movs	r3, #1
 8009424:	60a2      	str	r2, [r4, #8]
 8009426:	7563      	strb	r3, [r4, #21]
 8009428:	bd38      	pop	{r3, r4, r5, pc}
 800942a:	68a2      	ldr	r2, [r4, #8]
 800942c:	1a2d      	subs	r5, r5, r0
 800942e:	6923      	ldr	r3, [r4, #16]
 8009430:	4402      	add	r2, r0
 8009432:	4418      	add	r0, r3
 8009434:	60a2      	str	r2, [r4, #8]
 8009436:	6120      	str	r0, [r4, #16]
 8009438:	4629      	mov	r1, r5
 800943a:	2201      	movs	r2, #1
 800943c:	4620      	mov	r0, r4
 800943e:	f7ff ffc7 	bl	80093d0 <ucdr_check_final_buffer_behavior_array>
 8009442:	2800      	cmp	r0, #0
 8009444:	d1f1      	bne.n	800942a <ucdr_advance_buffer+0x1e>
 8009446:	2301      	movs	r3, #1
 8009448:	7563      	strb	r3, [r4, #21]
 800944a:	bd38      	pop	{r3, r4, r5, pc}

0800944c <rcl_get_zero_initialized_init_options>:
 800944c:	2000      	movs	r0, #0
 800944e:	4770      	bx	lr

08009450 <rcl_init_options_init>:
 8009450:	b084      	sub	sp, #16
 8009452:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009454:	b097      	sub	sp, #92	; 0x5c
 8009456:	ae1d      	add	r6, sp, #116	; 0x74
 8009458:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800945c:	2800      	cmp	r0, #0
 800945e:	d058      	beq.n	8009512 <rcl_init_options_init+0xc2>
 8009460:	6803      	ldr	r3, [r0, #0]
 8009462:	4605      	mov	r5, r0
 8009464:	b133      	cbz	r3, 8009474 <rcl_init_options_init+0x24>
 8009466:	2464      	movs	r4, #100	; 0x64
 8009468:	4620      	mov	r0, r4
 800946a:	b017      	add	sp, #92	; 0x5c
 800946c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009470:	b004      	add	sp, #16
 8009472:	4770      	bx	lr
 8009474:	4630      	mov	r0, r6
 8009476:	f001 fae5 	bl	800aa44 <rcutils_allocator_is_valid>
 800947a:	2800      	cmp	r0, #0
 800947c:	d049      	beq.n	8009512 <rcl_init_options_init+0xc2>
 800947e:	46b4      	mov	ip, r6
 8009480:	ac11      	add	r4, sp, #68	; 0x44
 8009482:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009488:	f8dc 3000 	ldr.w	r3, [ip]
 800948c:	2050      	movs	r0, #80	; 0x50
 800948e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009494:	4798      	blx	r3
 8009496:	4604      	mov	r4, r0
 8009498:	6028      	str	r0, [r5, #0]
 800949a:	2800      	cmp	r0, #0
 800949c:	d03b      	beq.n	8009516 <rcl_init_options_init+0xc6>
 800949e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80094a2:	4686      	mov	lr, r0
 80094a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80094a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80094ac:	f8dc 3000 	ldr.w	r3, [ip]
 80094b0:	a802      	add	r0, sp, #8
 80094b2:	f8ce 3000 	str.w	r3, [lr]
 80094b6:	f001 fce3 	bl	800ae80 <rmw_get_zero_initialized_init_options>
 80094ba:	f10d 0e08 	add.w	lr, sp, #8
 80094be:	f104 0c18 	add.w	ip, r4, #24
 80094c2:	682f      	ldr	r7, [r5, #0]
 80094c4:	ac20      	add	r4, sp, #128	; 0x80
 80094c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80094ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80094ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80094d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80094d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80094da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80094de:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80094e2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80094e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80094ea:	e88d 0003 	stmia.w	sp, {r0, r1}
 80094ee:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80094f2:	f107 0018 	add.w	r0, r7, #24
 80094f6:	f001 fdbf 	bl	800b078 <rmw_init_options_init>
 80094fa:	4604      	mov	r4, r0
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d0b3      	beq.n	8009468 <rcl_init_options_init+0x18>
 8009500:	9921      	ldr	r1, [sp, #132]	; 0x84
 8009502:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009504:	6828      	ldr	r0, [r5, #0]
 8009506:	4798      	blx	r3
 8009508:	4620      	mov	r0, r4
 800950a:	f006 f9b3 	bl	800f874 <rcl_convert_rmw_ret_to_rcl_ret>
 800950e:	4604      	mov	r4, r0
 8009510:	e7aa      	b.n	8009468 <rcl_init_options_init+0x18>
 8009512:	240b      	movs	r4, #11
 8009514:	e7a8      	b.n	8009468 <rcl_init_options_init+0x18>
 8009516:	240a      	movs	r4, #10
 8009518:	e7a6      	b.n	8009468 <rcl_init_options_init+0x18>
 800951a:	bf00      	nop

0800951c <rcl_init_options_fini>:
 800951c:	b530      	push	{r4, r5, lr}
 800951e:	b087      	sub	sp, #28
 8009520:	b1f0      	cbz	r0, 8009560 <rcl_init_options_fini+0x44>
 8009522:	6803      	ldr	r3, [r0, #0]
 8009524:	4604      	mov	r4, r0
 8009526:	b1db      	cbz	r3, 8009560 <rcl_init_options_fini+0x44>
 8009528:	469c      	mov	ip, r3
 800952a:	f10d 0e04 	add.w	lr, sp, #4
 800952e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009532:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009536:	f8dc 3000 	ldr.w	r3, [ip]
 800953a:	a801      	add	r0, sp, #4
 800953c:	f8ce 3000 	str.w	r3, [lr]
 8009540:	f001 fa80 	bl	800aa44 <rcutils_allocator_is_valid>
 8009544:	b160      	cbz	r0, 8009560 <rcl_init_options_fini+0x44>
 8009546:	6820      	ldr	r0, [r4, #0]
 8009548:	3018      	adds	r0, #24
 800954a:	f001 fe4f 	bl	800b1ec <rmw_init_options_fini>
 800954e:	4605      	mov	r5, r0
 8009550:	b950      	cbnz	r0, 8009568 <rcl_init_options_fini+0x4c>
 8009552:	6820      	ldr	r0, [r4, #0]
 8009554:	9b02      	ldr	r3, [sp, #8]
 8009556:	9905      	ldr	r1, [sp, #20]
 8009558:	4798      	blx	r3
 800955a:	4628      	mov	r0, r5
 800955c:	b007      	add	sp, #28
 800955e:	bd30      	pop	{r4, r5, pc}
 8009560:	250b      	movs	r5, #11
 8009562:	4628      	mov	r0, r5
 8009564:	b007      	add	sp, #28
 8009566:	bd30      	pop	{r4, r5, pc}
 8009568:	f006 f984 	bl	800f874 <rcl_convert_rmw_ret_to_rcl_ret>
 800956c:	4605      	mov	r5, r0
 800956e:	e7f8      	b.n	8009562 <rcl_init_options_fini+0x46>

08009570 <rcl_init_options_copy>:
 8009570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009574:	b094      	sub	sp, #80	; 0x50
 8009576:	2800      	cmp	r0, #0
 8009578:	d05b      	beq.n	8009632 <rcl_init_options_copy+0xc2>
 800957a:	4604      	mov	r4, r0
 800957c:	6800      	ldr	r0, [r0, #0]
 800957e:	2800      	cmp	r0, #0
 8009580:	d057      	beq.n	8009632 <rcl_init_options_copy+0xc2>
 8009582:	460e      	mov	r6, r1
 8009584:	f001 fa5e 	bl	800aa44 <rcutils_allocator_is_valid>
 8009588:	2e00      	cmp	r6, #0
 800958a:	d052      	beq.n	8009632 <rcl_init_options_copy+0xc2>
 800958c:	f080 0001 	eor.w	r0, r0, #1
 8009590:	b2c0      	uxtb	r0, r0
 8009592:	2800      	cmp	r0, #0
 8009594:	d14d      	bne.n	8009632 <rcl_init_options_copy+0xc2>
 8009596:	6833      	ldr	r3, [r6, #0]
 8009598:	b123      	cbz	r3, 80095a4 <rcl_init_options_copy+0x34>
 800959a:	2464      	movs	r4, #100	; 0x64
 800959c:	4620      	mov	r0, r4
 800959e:	b014      	add	sp, #80	; 0x50
 80095a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a4:	6827      	ldr	r7, [r4, #0]
 80095a6:	ad0f      	add	r5, sp, #60	; 0x3c
 80095a8:	46bc      	mov	ip, r7
 80095aa:	f8d7 8000 	ldr.w	r8, [r7]
 80095ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80095b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095b4:	f8dc 3000 	ldr.w	r3, [ip]
 80095b8:	2050      	movs	r0, #80	; 0x50
 80095ba:	4619      	mov	r1, r3
 80095bc:	602b      	str	r3, [r5, #0]
 80095be:	47c0      	blx	r8
 80095c0:	4605      	mov	r5, r0
 80095c2:	6030      	str	r0, [r6, #0]
 80095c4:	b3d0      	cbz	r0, 800963c <rcl_init_options_copy+0xcc>
 80095c6:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 80095ca:	4686      	mov	lr, r0
 80095cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80095d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80095d4:	f8dc 3000 	ldr.w	r3, [ip]
 80095d8:	4668      	mov	r0, sp
 80095da:	f8ce 3000 	str.w	r3, [lr]
 80095de:	f001 fc4f 	bl	800ae80 <rmw_get_zero_initialized_init_options>
 80095e2:	46ee      	mov	lr, sp
 80095e4:	f105 0c18 	add.w	ip, r5, #24
 80095e8:	6824      	ldr	r4, [r4, #0]
 80095ea:	6835      	ldr	r5, [r6, #0]
 80095ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80095f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80095f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80095f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80095fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009600:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009604:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8009608:	e88c 0003 	stmia.w	ip, {r0, r1}
 800960c:	f104 0018 	add.w	r0, r4, #24
 8009610:	f105 0118 	add.w	r1, r5, #24
 8009614:	f001 fd98 	bl	800b148 <rmw_init_options_copy>
 8009618:	4604      	mov	r4, r0
 800961a:	2800      	cmp	r0, #0
 800961c:	d0be      	beq.n	800959c <rcl_init_options_copy+0x2c>
 800961e:	f001 fa37 	bl	800aa90 <rcutils_get_error_string>
 8009622:	f001 fa4d 	bl	800aac0 <rcutils_reset_error>
 8009626:	4630      	mov	r0, r6
 8009628:	f7ff ff78 	bl	800951c <rcl_init_options_fini>
 800962c:	b140      	cbz	r0, 8009640 <rcl_init_options_copy+0xd0>
 800962e:	4604      	mov	r4, r0
 8009630:	e7b4      	b.n	800959c <rcl_init_options_copy+0x2c>
 8009632:	240b      	movs	r4, #11
 8009634:	4620      	mov	r0, r4
 8009636:	b014      	add	sp, #80	; 0x50
 8009638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800963c:	240a      	movs	r4, #10
 800963e:	e7ad      	b.n	800959c <rcl_init_options_copy+0x2c>
 8009640:	4620      	mov	r0, r4
 8009642:	b014      	add	sp, #80	; 0x50
 8009644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009648:	f006 b914 	b.w	800f874 <rcl_convert_rmw_ret_to_rcl_ret>

0800964c <rcl_init_options_set_domain_id>:
 800964c:	b120      	cbz	r0, 8009658 <rcl_init_options_set_domain_id+0xc>
 800964e:	6803      	ldr	r3, [r0, #0]
 8009650:	b113      	cbz	r3, 8009658 <rcl_init_options_set_domain_id+0xc>
 8009652:	2000      	movs	r0, #0
 8009654:	6259      	str	r1, [r3, #36]	; 0x24
 8009656:	4770      	bx	lr
 8009658:	200b      	movs	r0, #11
 800965a:	4770      	bx	lr

0800965c <rcl_get_zero_initialized_node>:
 800965c:	4a03      	ldr	r2, [pc, #12]	; (800966c <rcl_get_zero_initialized_node+0x10>)
 800965e:	4603      	mov	r3, r0
 8009660:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009664:	e883 0003 	stmia.w	r3, {r0, r1}
 8009668:	4618      	mov	r0, r3
 800966a:	4770      	bx	lr
 800966c:	08015be0 	.word	0x08015be0

08009670 <rcl_node_init>:
 8009670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009674:	b0a9      	sub	sp, #164	; 0xa4
 8009676:	4604      	mov	r4, r0
 8009678:	460e      	mov	r6, r1
 800967a:	4615      	mov	r5, r2
 800967c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 8009680:	a823      	add	r0, sp, #140	; 0x8c
 8009682:	461f      	mov	r7, r3
 8009684:	f006 fa06 	bl	800fa94 <rcl_guard_condition_get_default_options>
 8009688:	f1b8 0f00 	cmp.w	r8, #0
 800968c:	f000 80f3 	beq.w	8009876 <rcl_node_init+0x206>
 8009690:	4640      	mov	r0, r8
 8009692:	f001 f9d7 	bl	800aa44 <rcutils_allocator_is_valid>
 8009696:	2d00      	cmp	r5, #0
 8009698:	bf18      	it	ne
 800969a:	2c00      	cmpne	r4, #0
 800969c:	f080 0001 	eor.w	r0, r0, #1
 80096a0:	bf0c      	ite	eq
 80096a2:	f04f 0c01 	moveq.w	ip, #1
 80096a6:	f04f 0c00 	movne.w	ip, #0
 80096aa:	2e00      	cmp	r6, #0
 80096ac:	bf08      	it	eq
 80096ae:	f04c 0c01 	orreq.w	ip, ip, #1
 80096b2:	ea4c 0c00 	orr.w	ip, ip, r0
 80096b6:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 80096ba:	f040 80dc 	bne.w	8009876 <rcl_node_init+0x206>
 80096be:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80096c2:	f1ba 0f00 	cmp.w	sl, #0
 80096c6:	f040 80fc 	bne.w	80098c2 <rcl_node_init+0x252>
 80096ca:	2f00      	cmp	r7, #0
 80096cc:	f000 80d3 	beq.w	8009876 <rcl_node_init+0x206>
 80096d0:	4638      	mov	r0, r7
 80096d2:	f006 f8ed 	bl	800f8b0 <rcl_context_is_valid>
 80096d6:	4683      	mov	fp, r0
 80096d8:	2800      	cmp	r0, #0
 80096da:	f000 80d2 	beq.w	8009882 <rcl_node_init+0x212>
 80096de:	4652      	mov	r2, sl
 80096e0:	4630      	mov	r0, r6
 80096e2:	a922      	add	r1, sp, #136	; 0x88
 80096e4:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 80096e8:	f001 fc50 	bl	800af8c <rmw_validate_node_name>
 80096ec:	4682      	mov	sl, r0
 80096ee:	2800      	cmp	r0, #0
 80096f0:	f040 80c3 	bne.w	800987a <rcl_node_init+0x20a>
 80096f4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80096f6:	2800      	cmp	r0, #0
 80096f8:	f040 80f1 	bne.w	80098de <rcl_node_init+0x26e>
 80096fc:	4628      	mov	r0, r5
 80096fe:	f7f6 fda9 	bl	8000254 <strlen>
 8009702:	2800      	cmp	r0, #0
 8009704:	f040 80c0 	bne.w	8009888 <rcl_node_init+0x218>
 8009708:	4d79      	ldr	r5, [pc, #484]	; (80098f0 <rcl_node_init+0x280>)
 800970a:	a922      	add	r1, sp, #136	; 0x88
 800970c:	2200      	movs	r2, #0
 800970e:	4628      	mov	r0, r5
 8009710:	f001 fc1e 	bl	800af50 <rmw_validate_namespace>
 8009714:	4682      	mov	sl, r0
 8009716:	2800      	cmp	r0, #0
 8009718:	f040 80af 	bne.w	800987a <rcl_node_init+0x20a>
 800971c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800971e:	2800      	cmp	r0, #0
 8009720:	f040 80d5 	bne.w	80098ce <rcl_node_init+0x25e>
 8009724:	f8d8 3000 	ldr.w	r3, [r8]
 8009728:	2078      	movs	r0, #120	; 0x78
 800972a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800972e:	4798      	blx	r3
 8009730:	4682      	mov	sl, r0
 8009732:	6060      	str	r0, [r4, #4]
 8009734:	2800      	cmp	r0, #0
 8009736:	f000 80cf 	beq.w	80098d8 <rcl_node_init+0x268>
 800973a:	2200      	movs	r2, #0
 800973c:	2300      	movs	r3, #0
 800973e:	a808      	add	r0, sp, #32
 8009740:	e9ca 231a 	strd	r2, r3, [sl, #104]	; 0x68
 8009744:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 8009748:	f000 f902 	bl	8009950 <rcl_node_get_default_options>
 800974c:	a908      	add	r1, sp, #32
 800974e:	4650      	mov	r0, sl
 8009750:	2268      	movs	r2, #104	; 0x68
 8009752:	f00b f94e 	bl	80149f2 <memcpy>
 8009756:	6861      	ldr	r1, [r4, #4]
 8009758:	4640      	mov	r0, r8
 800975a:	6027      	str	r7, [r4, #0]
 800975c:	f000 f906 	bl	800996c <rcl_node_options_copy>
 8009760:	2800      	cmp	r0, #0
 8009762:	d158      	bne.n	8009816 <rcl_node_init+0x1a6>
 8009764:	4628      	mov	r0, r5
 8009766:	f7f6 fd75 	bl	8000254 <strlen>
 800976a:	4428      	add	r0, r5
 800976c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8009770:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8009774:	2b2f      	cmp	r3, #47	; 0x2f
 8009776:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	bf0c      	ite	eq
 800977e:	4b5d      	ldreq	r3, [pc, #372]	; (80098f4 <rcl_node_init+0x284>)
 8009780:	4b5d      	ldrne	r3, [pc, #372]	; (80098f8 <rcl_node_init+0x288>)
 8009782:	9302      	str	r3, [sp, #8]
 8009784:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800978e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8009792:	f001 f9b1 	bl	800aaf8 <rcutils_format_string_limit>
 8009796:	6823      	ldr	r3, [r4, #0]
 8009798:	f8ca 0074 	str.w	r0, [sl, #116]	; 0x74
 800979c:	4631      	mov	r1, r6
 800979e:	6818      	ldr	r0, [r3, #0]
 80097a0:	462a      	mov	r2, r5
 80097a2:	6866      	ldr	r6, [r4, #4]
 80097a4:	3028      	adds	r0, #40	; 0x28
 80097a6:	f001 ff4d 	bl	800b644 <rmw_create_node>
 80097aa:	6863      	ldr	r3, [r4, #4]
 80097ac:	66b0      	str	r0, [r6, #104]	; 0x68
 80097ae:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80097b0:	2800      	cmp	r0, #0
 80097b2:	d032      	beq.n	800981a <rcl_node_init+0x1aa>
 80097b4:	f001 ffd6 	bl	800b764 <rmw_node_get_graph_guard_condition>
 80097b8:	4682      	mov	sl, r0
 80097ba:	b360      	cbz	r0, 8009816 <rcl_node_init+0x1a6>
 80097bc:	f8d8 3000 	ldr.w	r3, [r8]
 80097c0:	2008      	movs	r0, #8
 80097c2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80097c6:	6866      	ldr	r6, [r4, #4]
 80097c8:	4798      	blx	r3
 80097ca:	6863      	ldr	r3, [r4, #4]
 80097cc:	66f0      	str	r0, [r6, #108]	; 0x6c
 80097ce:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 80097d2:	f1bb 0f00 	cmp.w	fp, #0
 80097d6:	d020      	beq.n	800981a <rcl_node_init+0x1aa>
 80097d8:	a806      	add	r0, sp, #24
 80097da:	ae23      	add	r6, sp, #140	; 0x8c
 80097dc:	f006 f8ce 	bl	800f97c <rcl_get_zero_initialized_guard_condition>
 80097e0:	a806      	add	r0, sp, #24
 80097e2:	6863      	ldr	r3, [r4, #4]
 80097e4:	46c4      	mov	ip, r8
 80097e6:	c803      	ldmia	r0, {r0, r1}
 80097e8:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 80097ec:	e88b 0003 	stmia.w	fp, {r0, r1}
 80097f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80097f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80097f6:	f8dc 3000 	ldr.w	r3, [ip]
 80097fa:	6033      	str	r3, [r6, #0]
 80097fc:	ab28      	add	r3, sp, #160	; 0xa0
 80097fe:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8009802:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009806:	4651      	mov	r1, sl
 8009808:	463a      	mov	r2, r7
 800980a:	4670      	mov	r0, lr
 800980c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800980e:	f006 f8bf 	bl	800f990 <rcl_guard_condition_init_from_rmw>
 8009812:	4682      	mov	sl, r0
 8009814:	b328      	cbz	r0, 8009862 <rcl_node_init+0x1f2>
 8009816:	6863      	ldr	r3, [r4, #4]
 8009818:	b1f3      	cbz	r3, 8009858 <rcl_node_init+0x1e8>
 800981a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800981c:	b128      	cbz	r0, 800982a <rcl_node_init+0x1ba>
 800981e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009822:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8009826:	4798      	blx	r3
 8009828:	6863      	ldr	r3, [r4, #4]
 800982a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800982c:	b110      	cbz	r0, 8009834 <rcl_node_init+0x1c4>
 800982e:	f001 ff1b 	bl	800b668 <rmw_destroy_node>
 8009832:	6863      	ldr	r3, [r4, #4]
 8009834:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8009836:	b148      	cbz	r0, 800984c <rcl_node_init+0x1dc>
 8009838:	f006 f906 	bl	800fa48 <rcl_guard_condition_fini>
 800983c:	6863      	ldr	r3, [r4, #4]
 800983e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8009842:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8009844:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009848:	4798      	blx	r3
 800984a:	6863      	ldr	r3, [r4, #4]
 800984c:	4618      	mov	r0, r3
 800984e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8009852:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009856:	4798      	blx	r3
 8009858:	2300      	movs	r3, #0
 800985a:	f04f 0a01 	mov.w	sl, #1
 800985e:	e9c4 3300 	strd	r3, r3, [r4]
 8009862:	f1b9 0f00 	cmp.w	r9, #0
 8009866:	d008      	beq.n	800987a <rcl_node_init+0x20a>
 8009868:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800986c:	4628      	mov	r0, r5
 800986e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8009872:	4798      	blx	r3
 8009874:	e001      	b.n	800987a <rcl_node_init+0x20a>
 8009876:	f04f 0a0b 	mov.w	sl, #11
 800987a:	4650      	mov	r0, sl
 800987c:	b029      	add	sp, #164	; 0xa4
 800987e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009882:	f04f 0a65 	mov.w	sl, #101	; 0x65
 8009886:	e7f8      	b.n	800987a <rcl_node_init+0x20a>
 8009888:	782b      	ldrb	r3, [r5, #0]
 800988a:	2b2f      	cmp	r3, #47	; 0x2f
 800988c:	f43f af3d 	beq.w	800970a <rcl_node_init+0x9a>
 8009890:	9503      	str	r5, [sp, #12]
 8009892:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	4b18      	ldr	r3, [pc, #96]	; (80098fc <rcl_node_init+0x28c>)
 800989a:	9302      	str	r3, [sp, #8]
 800989c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80098a0:	9301      	str	r3, [sp, #4]
 80098a2:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80098a6:	f001 f927 	bl	800aaf8 <rcutils_format_string_limit>
 80098aa:	4605      	mov	r5, r0
 80098ac:	b1e0      	cbz	r0, 80098e8 <rcl_node_init+0x278>
 80098ae:	2200      	movs	r2, #0
 80098b0:	a922      	add	r1, sp, #136	; 0x88
 80098b2:	9222      	str	r2, [sp, #136]	; 0x88
 80098b4:	f001 fb4c 	bl	800af50 <rmw_validate_namespace>
 80098b8:	4682      	mov	sl, r0
 80098ba:	2800      	cmp	r0, #0
 80098bc:	d1d4      	bne.n	8009868 <rcl_node_init+0x1f8>
 80098be:	46d9      	mov	r9, fp
 80098c0:	e72c      	b.n	800971c <rcl_node_init+0xac>
 80098c2:	f04f 0a64 	mov.w	sl, #100	; 0x64
 80098c6:	4650      	mov	r0, sl
 80098c8:	b029      	add	sp, #164	; 0xa4
 80098ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ce:	f04f 0aca 	mov.w	sl, #202	; 0xca
 80098d2:	f001 fb4f 	bl	800af74 <rmw_namespace_validation_result_string>
 80098d6:	e7c4      	b.n	8009862 <rcl_node_init+0x1f2>
 80098d8:	f04f 0a0a 	mov.w	sl, #10
 80098dc:	e7c1      	b.n	8009862 <rcl_node_init+0x1f2>
 80098de:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 80098e2:	f001 fba7 	bl	800b034 <rmw_node_name_validation_result_string>
 80098e6:	e7c8      	b.n	800987a <rcl_node_init+0x20a>
 80098e8:	f04f 0a0a 	mov.w	sl, #10
 80098ec:	e7c5      	b.n	800987a <rcl_node_init+0x20a>
 80098ee:	bf00      	nop
 80098f0:	08015bc8 	.word	0x08015bc8
 80098f4:	08015bd0 	.word	0x08015bd0
 80098f8:	08015bd8 	.word	0x08015bd8
 80098fc:	08015bcc 	.word	0x08015bcc

08009900 <rcl_node_is_valid>:
 8009900:	b130      	cbz	r0, 8009910 <rcl_node_is_valid+0x10>
 8009902:	6843      	ldr	r3, [r0, #4]
 8009904:	b123      	cbz	r3, 8009910 <rcl_node_is_valid+0x10>
 8009906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009908:	b113      	cbz	r3, 8009910 <rcl_node_is_valid+0x10>
 800990a:	6800      	ldr	r0, [r0, #0]
 800990c:	f005 bfd0 	b.w	800f8b0 <rcl_context_is_valid>
 8009910:	2000      	movs	r0, #0
 8009912:	4770      	bx	lr

08009914 <rcl_node_get_name>:
 8009914:	b120      	cbz	r0, 8009920 <rcl_node_get_name+0xc>
 8009916:	6840      	ldr	r0, [r0, #4]
 8009918:	b110      	cbz	r0, 8009920 <rcl_node_get_name+0xc>
 800991a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800991c:	b100      	cbz	r0, 8009920 <rcl_node_get_name+0xc>
 800991e:	6880      	ldr	r0, [r0, #8]
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop

08009924 <rcl_node_get_namespace>:
 8009924:	b120      	cbz	r0, 8009930 <rcl_node_get_namespace+0xc>
 8009926:	6840      	ldr	r0, [r0, #4]
 8009928:	b110      	cbz	r0, 8009930 <rcl_node_get_namespace+0xc>
 800992a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800992c:	b100      	cbz	r0, 8009930 <rcl_node_get_namespace+0xc>
 800992e:	68c0      	ldr	r0, [r0, #12]
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop

08009934 <rcl_node_get_options>:
 8009934:	b128      	cbz	r0, 8009942 <rcl_node_get_options+0xe>
 8009936:	6840      	ldr	r0, [r0, #4]
 8009938:	b118      	cbz	r0, 8009942 <rcl_node_get_options+0xe>
 800993a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800993c:	2b00      	cmp	r3, #0
 800993e:	bf08      	it	eq
 8009940:	2000      	moveq	r0, #0
 8009942:	4770      	bx	lr

08009944 <rcl_node_get_rmw_handle>:
 8009944:	b110      	cbz	r0, 800994c <rcl_node_get_rmw_handle+0x8>
 8009946:	6840      	ldr	r0, [r0, #4]
 8009948:	b100      	cbz	r0, 800994c <rcl_node_get_rmw_handle+0x8>
 800994a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop

08009950 <rcl_node_get_default_options>:
 8009950:	b510      	push	{r4, lr}
 8009952:	4604      	mov	r4, r0
 8009954:	2268      	movs	r2, #104	; 0x68
 8009956:	2100      	movs	r1, #0
 8009958:	f00a ff2c 	bl	80147b4 <memset>
 800995c:	4620      	mov	r0, r4
 800995e:	f001 f863 	bl	800aa28 <rcutils_get_default_allocator>
 8009962:	2301      	movs	r3, #1
 8009964:	4620      	mov	r0, r4
 8009966:	7523      	strb	r3, [r4, #20]
 8009968:	bd10      	pop	{r4, pc}
 800996a:	bf00      	nop

0800996c <rcl_node_options_copy>:
 800996c:	2800      	cmp	r0, #0
 800996e:	bf18      	it	ne
 8009970:	4288      	cmpne	r0, r1
 8009972:	d01b      	beq.n	80099ac <rcl_node_options_copy+0x40>
 8009974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009976:	fab1 f681 	clz	r6, r1
 800997a:	460c      	mov	r4, r1
 800997c:	0976      	lsrs	r6, r6, #5
 800997e:	b199      	cbz	r1, 80099a8 <rcl_node_options_copy+0x3c>
 8009980:	4605      	mov	r5, r0
 8009982:	8a87      	ldrh	r7, [r0, #20]
 8009984:	4684      	mov	ip, r0
 8009986:	468e      	mov	lr, r1
 8009988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800998a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800998e:	682b      	ldr	r3, [r5, #0]
 8009990:	2250      	movs	r2, #80	; 0x50
 8009992:	f10c 0118 	add.w	r1, ip, #24
 8009996:	f104 0018 	add.w	r0, r4, #24
 800999a:	f8ce 3000 	str.w	r3, [lr]
 800999e:	82a7      	strh	r7, [r4, #20]
 80099a0:	f00b f827 	bl	80149f2 <memcpy>
 80099a4:	4630      	mov	r0, r6
 80099a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099a8:	200b      	movs	r0, #11
 80099aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099ac:	200b      	movs	r0, #11
 80099ae:	4770      	bx	lr

080099b0 <rcl_get_zero_initialized_service>:
 80099b0:	4b01      	ldr	r3, [pc, #4]	; (80099b8 <rcl_get_zero_initialized_service+0x8>)
 80099b2:	6818      	ldr	r0, [r3, #0]
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	08015be8 	.word	0x08015be8

080099bc <rcl_service_init>:
 80099bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c0:	b088      	sub	sp, #32
 80099c2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80099c4:	b1ff      	cbz	r7, 8009a06 <rcl_service_init+0x4a>
 80099c6:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 80099ca:	4605      	mov	r5, r0
 80099cc:	460e      	mov	r6, r1
 80099ce:	4691      	mov	r9, r2
 80099d0:	4650      	mov	r0, sl
 80099d2:	4698      	mov	r8, r3
 80099d4:	f001 f836 	bl	800aa44 <rcutils_allocator_is_valid>
 80099d8:	f080 0401 	eor.w	r4, r0, #1
 80099dc:	b2e4      	uxtb	r4, r4
 80099de:	b994      	cbnz	r4, 8009a06 <rcl_service_init+0x4a>
 80099e0:	b18d      	cbz	r5, 8009a06 <rcl_service_init+0x4a>
 80099e2:	4630      	mov	r0, r6
 80099e4:	f7ff ff8c 	bl	8009900 <rcl_node_is_valid>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d05d      	beq.n	8009aa8 <rcl_service_init+0xec>
 80099ec:	f1b8 0f00 	cmp.w	r8, #0
 80099f0:	d009      	beq.n	8009a06 <rcl_service_init+0x4a>
 80099f2:	f1b9 0f00 	cmp.w	r9, #0
 80099f6:	d006      	beq.n	8009a06 <rcl_service_init+0x4a>
 80099f8:	682b      	ldr	r3, [r5, #0]
 80099fa:	b14b      	cbz	r3, 8009a10 <rcl_service_init+0x54>
 80099fc:	2464      	movs	r4, #100	; 0x64
 80099fe:	4620      	mov	r0, r4
 8009a00:	b008      	add	sp, #32
 8009a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a06:	240b      	movs	r4, #11
 8009a08:	4620      	mov	r0, r4
 8009a0a:	b008      	add	sp, #32
 8009a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a10:	aa07      	add	r2, sp, #28
 8009a12:	9304      	str	r3, [sp, #16]
 8009a14:	9307      	str	r3, [sp, #28]
 8009a16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009a1a:	9205      	str	r2, [sp, #20]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	9203      	str	r2, [sp, #12]
 8009a20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009a24:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009a28:	4641      	mov	r1, r8
 8009a2a:	4630      	mov	r0, r6
 8009a2c:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8009a30:	f006 f97a 	bl	800fd28 <rcl_node_resolve_name>
 8009a34:	2800      	cmp	r0, #0
 8009a36:	d146      	bne.n	8009ac6 <rcl_service_init+0x10a>
 8009a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a3a:	f44f 7088 	mov.w	r0, #272	; 0x110
 8009a3e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009a40:	4798      	blx	r3
 8009a42:	6028      	str	r0, [r5, #0]
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d046      	beq.n	8009ad6 <rcl_service_init+0x11a>
 8009a48:	4630      	mov	r0, r6
 8009a4a:	f7ff ff7b 	bl	8009944 <rcl_node_get_rmw_handle>
 8009a4e:	463b      	mov	r3, r7
 8009a50:	4649      	mov	r1, r9
 8009a52:	9a07      	ldr	r2, [sp, #28]
 8009a54:	682c      	ldr	r4, [r5, #0]
 8009a56:	f002 f82f 	bl	800bab8 <rmw_create_service>
 8009a5a:	682b      	ldr	r3, [r5, #0]
 8009a5c:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 8009a60:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8009a64:	b338      	cbz	r0, 8009ab6 <rcl_service_init+0xfa>
 8009a66:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8009a6a:	f002 f957 	bl	800bd1c <rmw_service_request_subscription_get_actual_qos>
 8009a6e:	bb00      	cbnz	r0, 8009ab2 <rcl_service_init+0xf6>
 8009a70:	682b      	ldr	r3, [r5, #0]
 8009a72:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8009a76:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8009a7a:	f002 f93b 	bl	800bcf4 <rmw_service_response_publisher_get_actual_qos>
 8009a7e:	4604      	mov	r4, r0
 8009a80:	b9b8      	cbnz	r0, 8009ab2 <rcl_service_init+0xf6>
 8009a82:	6828      	ldr	r0, [r5, #0]
 8009a84:	2268      	movs	r2, #104	; 0x68
 8009a86:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8009a8a:	4639      	mov	r1, r7
 8009a8c:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8009a90:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 8009a94:	f00a ffad 	bl	80149f2 <memcpy>
 8009a98:	9807      	ldr	r0, [sp, #28]
 8009a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a9c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009a9e:	4798      	blx	r3
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	b008      	add	sp, #32
 8009aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa8:	24c8      	movs	r4, #200	; 0xc8
 8009aaa:	4620      	mov	r0, r4
 8009aac:	b008      	add	sp, #32
 8009aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ab2:	682b      	ldr	r3, [r5, #0]
 8009ab4:	b16b      	cbz	r3, 8009ad2 <rcl_service_init+0x116>
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009aba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009abc:	2401      	movs	r4, #1
 8009abe:	4790      	blx	r2
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	602b      	str	r3, [r5, #0]
 8009ac4:	e7e8      	b.n	8009a98 <rcl_service_init+0xdc>
 8009ac6:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d905      	bls.n	8009ada <rcl_service_init+0x11e>
 8009ace:	280a      	cmp	r0, #10
 8009ad0:	d001      	beq.n	8009ad6 <rcl_service_init+0x11a>
 8009ad2:	2401      	movs	r4, #1
 8009ad4:	e7e0      	b.n	8009a98 <rcl_service_init+0xdc>
 8009ad6:	240a      	movs	r4, #10
 8009ad8:	e7de      	b.n	8009a98 <rcl_service_init+0xdc>
 8009ada:	2468      	movs	r4, #104	; 0x68
 8009adc:	e7dc      	b.n	8009a98 <rcl_service_init+0xdc>
 8009ade:	bf00      	nop

08009ae0 <rcl_service_get_default_options>:
 8009ae0:	b530      	push	{r4, r5, lr}
 8009ae2:	4d0f      	ldr	r5, [pc, #60]	; (8009b20 <rcl_service_get_default_options+0x40>)
 8009ae4:	b087      	sub	sp, #28
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	2250      	movs	r2, #80	; 0x50
 8009aea:	490e      	ldr	r1, [pc, #56]	; (8009b24 <rcl_service_get_default_options+0x44>)
 8009aec:	4628      	mov	r0, r5
 8009aee:	f00a ff80 	bl	80149f2 <memcpy>
 8009af2:	4668      	mov	r0, sp
 8009af4:	f000 ff98 	bl	800aa28 <rcutils_get_default_allocator>
 8009af8:	46ec      	mov	ip, sp
 8009afa:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8009afe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009b02:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009b06:	f8dc 3000 	ldr.w	r3, [ip]
 8009b0a:	2268      	movs	r2, #104	; 0x68
 8009b0c:	4629      	mov	r1, r5
 8009b0e:	4620      	mov	r0, r4
 8009b10:	f8ce 3000 	str.w	r3, [lr]
 8009b14:	f00a ff6d 	bl	80149f2 <memcpy>
 8009b18:	4620      	mov	r0, r4
 8009b1a:	b007      	add	sp, #28
 8009b1c:	bd30      	pop	{r4, r5, pc}
 8009b1e:	bf00      	nop
 8009b20:	2000c2c0 	.word	0x2000c2c0
 8009b24:	08015bf0 	.word	0x08015bf0

08009b28 <rcl_service_get_rmw_handle>:
 8009b28:	b118      	cbz	r0, 8009b32 <rcl_service_get_rmw_handle+0xa>
 8009b2a:	6800      	ldr	r0, [r0, #0]
 8009b2c:	b108      	cbz	r0, 8009b32 <rcl_service_get_rmw_handle+0xa>
 8009b2e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8009b32:	4770      	bx	lr

08009b34 <rcl_take_request>:
 8009b34:	b570      	push	{r4, r5, r6, lr}
 8009b36:	468e      	mov	lr, r1
 8009b38:	b08c      	sub	sp, #48	; 0x30
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	4616      	mov	r6, r2
 8009b3e:	f10d 0c18 	add.w	ip, sp, #24
 8009b42:	4605      	mov	r5, r0
 8009b44:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009b48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009b4c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8009b50:	e88c 0003 	stmia.w	ip, {r0, r1}
 8009b54:	b30d      	cbz	r5, 8009b9a <rcl_take_request+0x66>
 8009b56:	682b      	ldr	r3, [r5, #0]
 8009b58:	b1fb      	cbz	r3, 8009b9a <rcl_take_request+0x66>
 8009b5a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8009b5e:	b1e0      	cbz	r0, 8009b9a <rcl_take_request+0x66>
 8009b60:	b336      	cbz	r6, 8009bb0 <rcl_take_request+0x7c>
 8009b62:	2300      	movs	r3, #0
 8009b64:	4632      	mov	r2, r6
 8009b66:	a902      	add	r1, sp, #8
 8009b68:	f88d 3007 	strb.w	r3, [sp, #7]
 8009b6c:	f10d 0307 	add.w	r3, sp, #7
 8009b70:	f001 fea0 	bl	800b8b4 <rmw_take_request>
 8009b74:	4605      	mov	r5, r0
 8009b76:	b198      	cbz	r0, 8009ba0 <rcl_take_request+0x6c>
 8009b78:	280a      	cmp	r0, #10
 8009b7a:	bf18      	it	ne
 8009b7c:	2501      	movne	r5, #1
 8009b7e:	f10d 0e18 	add.w	lr, sp, #24
 8009b82:	46a4      	mov	ip, r4
 8009b84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009b88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009b8c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8009b90:	e88c 0003 	stmia.w	ip, {r0, r1}
 8009b94:	4628      	mov	r0, r5
 8009b96:	b00c      	add	sp, #48	; 0x30
 8009b98:	bd70      	pop	{r4, r5, r6, pc}
 8009b9a:	f44f 7516 	mov.w	r5, #600	; 0x258
 8009b9e:	e7ee      	b.n	8009b7e <rcl_take_request+0x4a>
 8009ba0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009ba4:	f240 2359 	movw	r3, #601	; 0x259
 8009ba8:	2a00      	cmp	r2, #0
 8009baa:	bf08      	it	eq
 8009bac:	461d      	moveq	r5, r3
 8009bae:	e7e6      	b.n	8009b7e <rcl_take_request+0x4a>
 8009bb0:	250b      	movs	r5, #11
 8009bb2:	e7e4      	b.n	8009b7e <rcl_take_request+0x4a>

08009bb4 <rcl_send_response>:
 8009bb4:	b170      	cbz	r0, 8009bd4 <rcl_send_response+0x20>
 8009bb6:	6800      	ldr	r0, [r0, #0]
 8009bb8:	b160      	cbz	r0, 8009bd4 <rcl_send_response+0x20>
 8009bba:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8009bbe:	b148      	cbz	r0, 8009bd4 <rcl_send_response+0x20>
 8009bc0:	b169      	cbz	r1, 8009bde <rcl_send_response+0x2a>
 8009bc2:	b510      	push	{r4, lr}
 8009bc4:	b14a      	cbz	r2, 8009bda <rcl_send_response+0x26>
 8009bc6:	f001 fed3 	bl	800b970 <rmw_send_response>
 8009bca:	b110      	cbz	r0, 8009bd2 <rcl_send_response+0x1e>
 8009bcc:	2802      	cmp	r0, #2
 8009bce:	bf18      	it	ne
 8009bd0:	2001      	movne	r0, #1
 8009bd2:	bd10      	pop	{r4, pc}
 8009bd4:	f44f 7016 	mov.w	r0, #600	; 0x258
 8009bd8:	4770      	bx	lr
 8009bda:	200b      	movs	r0, #11
 8009bdc:	bd10      	pop	{r4, pc}
 8009bde:	200b      	movs	r0, #11
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop

08009be4 <rcl_service_is_valid>:
 8009be4:	b130      	cbz	r0, 8009bf4 <rcl_service_is_valid+0x10>
 8009be6:	6800      	ldr	r0, [r0, #0]
 8009be8:	b120      	cbz	r0, 8009bf4 <rcl_service_is_valid+0x10>
 8009bea:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8009bee:	3800      	subs	r0, #0
 8009bf0:	bf18      	it	ne
 8009bf2:	2001      	movne	r0, #1
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop

08009bf8 <_rclc_check_for_new_data>:
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	d046      	beq.n	8009c8a <_rclc_check_for_new_data+0x92>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	b530      	push	{r4, r5, lr}
 8009c00:	7802      	ldrb	r2, [r0, #0]
 8009c02:	b085      	sub	sp, #20
 8009c04:	2a0a      	cmp	r2, #10
 8009c06:	d842      	bhi.n	8009c8e <_rclc_check_for_new_data+0x96>
 8009c08:	e8df f002 	tbb	[pc, r2]
 8009c0c:	14181212 	.word	0x14181212
 8009c10:	06060614 	.word	0x06060614
 8009c14:	2e1a      	.short	0x2e1a
 8009c16:	16          	.byte	0x16
 8009c17:	00          	.byte	0x00
 8009c18:	6a0a      	ldr	r2, [r1, #32]
 8009c1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009c22:	1a12      	subs	r2, r2, r0
 8009c24:	bf18      	it	ne
 8009c26:	2201      	movne	r2, #1
 8009c28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009c2c:	b005      	add	sp, #20
 8009c2e:	bd30      	pop	{r4, r5, pc}
 8009c30:	680a      	ldr	r2, [r1, #0]
 8009c32:	e7f2      	b.n	8009c1a <_rclc_check_for_new_data+0x22>
 8009c34:	698a      	ldr	r2, [r1, #24]
 8009c36:	e7f0      	b.n	8009c1a <_rclc_check_for_new_data+0x22>
 8009c38:	688a      	ldr	r2, [r1, #8]
 8009c3a:	e7ee      	b.n	8009c1a <_rclc_check_for_new_data+0x22>
 8009c3c:	690a      	ldr	r2, [r1, #16]
 8009c3e:	e7ec      	b.n	8009c1a <_rclc_check_for_new_data+0x22>
 8009c40:	685c      	ldr	r4, [r3, #4]
 8009c42:	4608      	mov	r0, r1
 8009c44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c50:	f104 0110 	add.w	r1, r4, #16
 8009c54:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009c58:	9500      	str	r5, [sp, #0]
 8009c5a:	f104 0341 	add.w	r3, r4, #65	; 0x41
 8009c5e:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8009c62:	f007 fc31 	bl	80114c8 <rcl_action_client_wait_set_get_entities_ready>
 8009c66:	e7e1      	b.n	8009c2c <_rclc_check_for_new_data+0x34>
 8009c68:	685c      	ldr	r4, [r3, #4]
 8009c6a:	4608      	mov	r0, r1
 8009c6c:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8009c70:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8009c74:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8009c78:	e9cd 2100 	strd	r2, r1, [sp]
 8009c7c:	f104 0220 	add.w	r2, r4, #32
 8009c80:	f104 0110 	add.w	r1, r4, #16
 8009c84:	f007 fe38 	bl	80118f8 <rcl_action_server_wait_set_get_entities_ready>
 8009c88:	e7d0      	b.n	8009c2c <_rclc_check_for_new_data+0x34>
 8009c8a:	200b      	movs	r0, #11
 8009c8c:	4770      	bx	lr
 8009c8e:	2001      	movs	r0, #1
 8009c90:	e7cc      	b.n	8009c2c <_rclc_check_for_new_data+0x34>
 8009c92:	bf00      	nop

08009c94 <_rclc_take_new_data>:
 8009c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c96:	b09b      	sub	sp, #108	; 0x6c
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	f000 8088 	beq.w	8009dae <_rclc_take_new_data+0x11a>
 8009c9e:	7803      	ldrb	r3, [r0, #0]
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	2b0a      	cmp	r3, #10
 8009ca4:	f200 8167 	bhi.w	8009f76 <_rclc_take_new_data+0x2e2>
 8009ca8:	e8df f003 	tbb	[pc, r3]
 8009cac:	44152d2d 	.word	0x44152d2d
 8009cb0:	19191944 	.word	0x19191944
 8009cb4:	065a      	.short	0x065a
 8009cb6:	15          	.byte	0x15
 8009cb7:	00          	.byte	0x00
 8009cb8:	6840      	ldr	r0, [r0, #4]
 8009cba:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f040 80b2 	bne.w	8009e28 <_rclc_take_new_data+0x194>
 8009cc4:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f040 80e4 	bne.w	8009e96 <_rclc_take_new_data+0x202>
 8009cce:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d16f      	bne.n	8009db6 <_rclc_take_new_data+0x122>
 8009cd6:	2500      	movs	r5, #0
 8009cd8:	4628      	mov	r0, r5
 8009cda:	b01b      	add	sp, #108	; 0x6c
 8009cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cde:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009ce0:	6a0b      	ldr	r3, [r1, #32]
 8009ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d0f5      	beq.n	8009cd6 <_rclc_take_new_data+0x42>
 8009cea:	6882      	ldr	r2, [r0, #8]
 8009cec:	f100 0110 	add.w	r1, r0, #16
 8009cf0:	6840      	ldr	r0, [r0, #4]
 8009cf2:	f7ff ff1f 	bl	8009b34 <rcl_take_request>
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	d0ec      	beq.n	8009cd6 <_rclc_take_new_data+0x42>
 8009cfc:	f240 2359 	movw	r3, #601	; 0x259
 8009d00:	4298      	cmp	r0, r3
 8009d02:	d013      	beq.n	8009d2c <_rclc_take_new_data+0x98>
 8009d04:	e029      	b.n	8009d5a <_rclc_take_new_data+0xc6>
 8009d06:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009d08:	680b      	ldr	r3, [r1, #0]
 8009d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d0e1      	beq.n	8009cd6 <_rclc_take_new_data+0x42>
 8009d12:	2300      	movs	r3, #0
 8009d14:	aa0a      	add	r2, sp, #40	; 0x28
 8009d16:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8009d1a:	f006 f9d9 	bl	80100d0 <rcl_take>
 8009d1e:	4605      	mov	r5, r0
 8009d20:	2800      	cmp	r0, #0
 8009d22:	d0d9      	beq.n	8009cd8 <_rclc_take_new_data+0x44>
 8009d24:	f240 1391 	movw	r3, #401	; 0x191
 8009d28:	4298      	cmp	r0, r3
 8009d2a:	d116      	bne.n	8009d5a <_rclc_take_new_data+0xc6>
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8009d32:	e7d1      	b.n	8009cd8 <_rclc_take_new_data+0x44>
 8009d34:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009d36:	698b      	ldr	r3, [r1, #24]
 8009d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d0ca      	beq.n	8009cd6 <_rclc_take_new_data+0x42>
 8009d40:	6882      	ldr	r2, [r0, #8]
 8009d42:	f100 0110 	add.w	r1, r0, #16
 8009d46:	6840      	ldr	r0, [r0, #4]
 8009d48:	f005 fd42 	bl	800f7d0 <rcl_take_response>
 8009d4c:	4605      	mov	r5, r0
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	d0c1      	beq.n	8009cd6 <_rclc_take_new_data+0x42>
 8009d52:	f240 13f5 	movw	r3, #501	; 0x1f5
 8009d56:	4298      	cmp	r0, r3
 8009d58:	d0be      	beq.n	8009cd8 <_rclc_take_new_data+0x44>
 8009d5a:	f000 feb1 	bl	800aac0 <rcutils_reset_error>
 8009d5e:	e7bb      	b.n	8009cd8 <_rclc_take_new_data+0x44>
 8009d60:	6840      	ldr	r0, [r0, #4]
 8009d62:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d17d      	bne.n	8009e66 <_rclc_take_new_data+0x1d2>
 8009d6a:	69c3      	ldr	r3, [r0, #28]
 8009d6c:	b11b      	cbz	r3, 8009d76 <_rclc_take_new_data+0xe2>
 8009d6e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d144      	bne.n	8009e00 <_rclc_take_new_data+0x16c>
 8009d76:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f040 80ac 	bne.w	8009ed8 <_rclc_take_new_data+0x244>
 8009d80:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d0a6      	beq.n	8009cd6 <_rclc_take_new_data+0x42>
 8009d88:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009d8a:	a90a      	add	r1, sp, #40	; 0x28
 8009d8c:	3010      	adds	r0, #16
 8009d8e:	f007 fa73 	bl	8011278 <rcl_action_take_result_response>
 8009d92:	4605      	mov	r5, r0
 8009d94:	2800      	cmp	r0, #0
 8009d96:	d1e0      	bne.n	8009d5a <_rclc_take_new_data+0xc6>
 8009d98:	6860      	ldr	r0, [r4, #4]
 8009d9a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009d9e:	f007 fedb 	bl	8011b58 <rclc_action_find_handle_by_result_request_sequence_number>
 8009da2:	2800      	cmp	r0, #0
 8009da4:	d098      	beq.n	8009cd8 <_rclc_take_new_data+0x44>
 8009da6:	2301      	movs	r3, #1
 8009da8:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 8009dac:	e794      	b.n	8009cd8 <_rclc_take_new_data+0x44>
 8009dae:	250b      	movs	r5, #11
 8009db0:	4628      	mov	r0, r5
 8009db2:	b01b      	add	sp, #108	; 0x6c
 8009db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009db6:	ae04      	add	r6, sp, #16
 8009db8:	3010      	adds	r0, #16
 8009dba:	aa0a      	add	r2, sp, #40	; 0x28
 8009dbc:	4631      	mov	r1, r6
 8009dbe:	f007 fccf 	bl	8011760 <rcl_action_take_cancel_request>
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	d1c8      	bne.n	8009d5a <_rclc_take_new_data+0xc6>
 8009dc8:	a90a      	add	r1, sp, #40	; 0x28
 8009dca:	6860      	ldr	r0, [r4, #4]
 8009dcc:	f007 fe84 	bl	8011ad8 <rclc_action_find_goal_handle_by_uuid>
 8009dd0:	4607      	mov	r7, r0
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	f000 80bb 	beq.w	8009f4e <_rclc_take_new_data+0x2ba>
 8009dd8:	2101      	movs	r1, #1
 8009dda:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8009dde:	f007 fe05 	bl	80119ec <rcl_action_transition_goal_state>
 8009de2:	2803      	cmp	r0, #3
 8009de4:	4684      	mov	ip, r0
 8009de6:	f040 80a7 	bne.w	8009f38 <_rclc_take_new_data+0x2a4>
 8009dea:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8009dee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009df2:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009df6:	e884 0003 	stmia.w	r4, {r0, r1}
 8009dfa:	f887 c008 	strb.w	ip, [r7, #8]
 8009dfe:	e76b      	b.n	8009cd8 <_rclc_take_new_data+0x44>
 8009e00:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009e02:	3010      	adds	r0, #16
 8009e04:	f007 fab8 	bl	8011378 <rcl_action_take_feedback>
 8009e08:	4605      	mov	r5, r0
 8009e0a:	2800      	cmp	r0, #0
 8009e0c:	d1a5      	bne.n	8009d5a <_rclc_take_new_data+0xc6>
 8009e0e:	6860      	ldr	r0, [r4, #4]
 8009e10:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009e12:	f007 fe61 	bl	8011ad8 <rclc_action_find_goal_handle_by_uuid>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	f000 80a3 	beq.w	8009f64 <_rclc_take_new_data+0x2d0>
 8009e1e:	2201      	movs	r2, #1
 8009e20:	6860      	ldr	r0, [r4, #4]
 8009e22:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8009e26:	e7a6      	b.n	8009d76 <_rclc_take_new_data+0xe2>
 8009e28:	f007 fe30 	bl	8011a8c <rclc_action_take_goal_handle>
 8009e2c:	4606      	mov	r6, r0
 8009e2e:	6860      	ldr	r0, [r4, #4]
 8009e30:	2e00      	cmp	r6, #0
 8009e32:	f43f af47 	beq.w	8009cc4 <_rclc_take_new_data+0x30>
 8009e36:	6070      	str	r0, [r6, #4]
 8009e38:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8009e3c:	69f2      	ldr	r2, [r6, #28]
 8009e3e:	3010      	adds	r0, #16
 8009e40:	f007 fbd8 	bl	80115f4 <rcl_action_take_goal_request>
 8009e44:	4605      	mov	r5, r0
 8009e46:	2800      	cmp	r0, #0
 8009e48:	f040 808e 	bne.w	8009f68 <_rclc_take_new_data+0x2d4>
 8009e4c:	69f7      	ldr	r7, [r6, #28]
 8009e4e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009e50:	7235      	strb	r5, [r6, #8]
 8009e52:	f8c6 0009 	str.w	r0, [r6, #9]
 8009e56:	f8c6 100d 	str.w	r1, [r6, #13]
 8009e5a:	6860      	ldr	r0, [r4, #4]
 8009e5c:	f8c6 2011 	str.w	r2, [r6, #17]
 8009e60:	f8c6 3015 	str.w	r3, [r6, #21]
 8009e64:	e72e      	b.n	8009cc4 <_rclc_take_new_data+0x30>
 8009e66:	aa04      	add	r2, sp, #16
 8009e68:	a90a      	add	r1, sp, #40	; 0x28
 8009e6a:	3010      	adds	r0, #16
 8009e6c:	f007 f98c 	bl	8011188 <rcl_action_take_goal_response>
 8009e70:	4605      	mov	r5, r0
 8009e72:	2800      	cmp	r0, #0
 8009e74:	f47f af71 	bne.w	8009d5a <_rclc_take_new_data+0xc6>
 8009e78:	6860      	ldr	r0, [r4, #4]
 8009e7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009e7e:	f007 fe59 	bl	8011b34 <rclc_action_find_handle_by_goal_request_sequence_number>
 8009e82:	b130      	cbz	r0, 8009e92 <_rclc_take_new_data+0x1fe>
 8009e84:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8009e8e:	f880 2020 	strb.w	r2, [r0, #32]
 8009e92:	6860      	ldr	r0, [r4, #4]
 8009e94:	e769      	b.n	8009d6a <_rclc_take_new_data+0xd6>
 8009e96:	3010      	adds	r0, #16
 8009e98:	aa04      	add	r2, sp, #16
 8009e9a:	a90a      	add	r1, sp, #40	; 0x28
 8009e9c:	f007 fc20 	bl	80116e0 <rcl_action_take_result_request>
 8009ea0:	4605      	mov	r5, r0
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	f47f af59 	bne.w	8009d5a <_rclc_take_new_data+0xc6>
 8009ea8:	a904      	add	r1, sp, #16
 8009eaa:	6860      	ldr	r0, [r4, #4]
 8009eac:	f007 fe14 	bl	8011ad8 <rclc_action_find_goal_handle_by_uuid>
 8009eb0:	4607      	mov	r7, r0
 8009eb2:	b160      	cbz	r0, 8009ece <_rclc_take_new_data+0x23a>
 8009eb4:	ad0a      	add	r5, sp, #40	; 0x28
 8009eb6:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8009eba:	f04f 0c02 	mov.w	ip, #2
 8009ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ec0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009ec2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009ec6:	e886 0003 	stmia.w	r6, {r0, r1}
 8009eca:	f887 c008 	strb.w	ip, [r7, #8]
 8009ece:	6860      	ldr	r0, [r4, #4]
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 8009ed6:	e6fa      	b.n	8009cce <_rclc_take_new_data+0x3a>
 8009ed8:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8009edc:	a90a      	add	r1, sp, #40	; 0x28
 8009ede:	3010      	adds	r0, #16
 8009ee0:	f007 fa0a 	bl	80112f8 <rcl_action_take_cancel_response>
 8009ee4:	4605      	mov	r5, r0
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	f47f af37 	bne.w	8009d5a <_rclc_take_new_data+0xc6>
 8009eec:	6860      	ldr	r0, [r4, #4]
 8009eee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009ef2:	f007 fe43 	bl	8011b7c <rclc_action_find_handle_by_cancel_request_sequence_number>
 8009ef6:	4606      	mov	r6, r0
 8009ef8:	6860      	ldr	r0, [r4, #4]
 8009efa:	2e00      	cmp	r6, #0
 8009efc:	f43f af40 	beq.w	8009d80 <_rclc_take_new_data+0xec>
 8009f00:	2701      	movs	r7, #1
 8009f02:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009f04:	84b7      	strh	r7, [r6, #36]	; 0x24
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f43f af3a 	beq.w	8009d80 <_rclc_take_new_data+0xec>
 8009f0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009f0e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8009f12:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009f16:	f007 fddf 	bl	8011ad8 <rclc_action_find_goal_handle_by_uuid>
 8009f1a:	b138      	cbz	r0, 8009f2c <_rclc_take_new_data+0x298>
 8009f1c:	6860      	ldr	r0, [r4, #4]
 8009f1e:	3501      	adds	r5, #1
 8009f20:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 8009f24:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009f26:	42ab      	cmp	r3, r5
 8009f28:	d8f0      	bhi.n	8009f0c <_rclc_take_new_data+0x278>
 8009f2a:	e729      	b.n	8009d80 <_rclc_take_new_data+0xec>
 8009f2c:	6860      	ldr	r0, [r4, #4]
 8009f2e:	3501      	adds	r5, #1
 8009f30:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009f32:	42ab      	cmp	r3, r5
 8009f34:	d8ea      	bhi.n	8009f0c <_rclc_take_new_data+0x278>
 8009f36:	e723      	b.n	8009d80 <_rclc_take_new_data+0xec>
 8009f38:	ab06      	add	r3, sp, #24
 8009f3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009f3c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009f40:	2103      	movs	r1, #3
 8009f42:	6860      	ldr	r0, [r4, #4]
 8009f44:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009f48:	f007 fe8e 	bl	8011c68 <rclc_action_server_goal_cancel_reject>
 8009f4c:	e6c4      	b.n	8009cd8 <_rclc_take_new_data+0x44>
 8009f4e:	ab06      	add	r3, sp, #24
 8009f50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009f52:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009f56:	2102      	movs	r1, #2
 8009f58:	6860      	ldr	r0, [r4, #4]
 8009f5a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009f5e:	f007 fe83 	bl	8011c68 <rclc_action_server_goal_cancel_reject>
 8009f62:	e6b9      	b.n	8009cd8 <_rclc_take_new_data+0x44>
 8009f64:	6860      	ldr	r0, [r4, #4]
 8009f66:	e706      	b.n	8009d76 <_rclc_take_new_data+0xe2>
 8009f68:	4631      	mov	r1, r6
 8009f6a:	6860      	ldr	r0, [r4, #4]
 8009f6c:	f007 fd9e 	bl	8011aac <rclc_action_remove_used_goal_handle>
 8009f70:	f000 fda6 	bl	800aac0 <rcutils_reset_error>
 8009f74:	e6b0      	b.n	8009cd8 <_rclc_take_new_data+0x44>
 8009f76:	2501      	movs	r5, #1
 8009f78:	e6ae      	b.n	8009cd8 <_rclc_take_new_data+0x44>
 8009f7a:	bf00      	nop

08009f7c <_rclc_execute.part.0>:
 8009f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f7e:	7803      	ldrb	r3, [r0, #0]
 8009f80:	b085      	sub	sp, #20
 8009f82:	4604      	mov	r4, r0
 8009f84:	2b0a      	cmp	r3, #10
 8009f86:	f200 8139 	bhi.w	800a1fc <_rclc_execute.part.0+0x280>
 8009f8a:	e8df f003 	tbb	[pc, r3]
 8009f8e:	4268      	.short	0x4268
 8009f90:	06a75b4d 	.word	0x06a75b4d
 8009f94:	721d0606 	.word	0x721d0606
 8009f98:	62          	.byte	0x62
 8009f99:	00          	.byte	0x00
 8009f9a:	2b06      	cmp	r3, #6
 8009f9c:	f000 8126 	beq.w	800a1ec <_rclc_execute.part.0+0x270>
 8009fa0:	2b07      	cmp	r3, #7
 8009fa2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009fa4:	f040 811c 	bne.w	800a1e0 <_rclc_execute.part.0+0x264>
 8009fa8:	f104 0510 	add.w	r5, r4, #16
 8009fac:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 8009fb0:	6880      	ldr	r0, [r0, #8]
 8009fb2:	4798      	blx	r3
 8009fb4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	6860      	ldr	r0, [r4, #4]
 8009fba:	f7ff fdfb 	bl	8009bb4 <rcl_send_response>
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	b378      	cbz	r0, 800a022 <_rclc_execute.part.0+0xa6>
 8009fc2:	f000 fd7d 	bl	800aac0 <rcutils_reset_error>
 8009fc6:	e02c      	b.n	800a022 <_rclc_execute.part.0+0xa6>
 8009fc8:	6840      	ldr	r0, [r0, #4]
 8009fca:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f000 808e 	beq.w	800a0f0 <_rclc_execute.part.0+0x174>
 8009fd4:	2600      	movs	r6, #0
 8009fd6:	2701      	movs	r7, #1
 8009fd8:	e004      	b.n	8009fe4 <_rclc_execute.part.0+0x68>
 8009fda:	f007 fd31 	bl	8011a40 <rclc_action_send_result_request>
 8009fde:	b998      	cbnz	r0, 800a008 <_rclc_execute.part.0+0x8c>
 8009fe0:	722f      	strb	r7, [r5, #8]
 8009fe2:	6860      	ldr	r0, [r4, #4]
 8009fe4:	f007 fddc 	bl	8011ba0 <rclc_action_find_first_handle_with_goal_response>
 8009fe8:	4605      	mov	r5, r0
 8009fea:	2800      	cmp	r0, #0
 8009fec:	d07f      	beq.n	800a0ee <_rclc_execute.part.0+0x172>
 8009fee:	6863      	ldr	r3, [r4, #4]
 8009ff0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009ff2:	699b      	ldr	r3, [r3, #24]
 8009ff4:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 8009ff8:	f885 6020 	strb.w	r6, [r5, #32]
 8009ffc:	4798      	blx	r3
 8009ffe:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800a002:	4628      	mov	r0, r5
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1e8      	bne.n	8009fda <_rclc_execute.part.0+0x5e>
 800a008:	6860      	ldr	r0, [r4, #4]
 800a00a:	4629      	mov	r1, r5
 800a00c:	f007 fd4e 	bl	8011aac <rclc_action_remove_used_goal_handle>
 800a010:	e7e7      	b.n	8009fe2 <_rclc_execute.part.0+0x66>
 800a012:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800a016:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800a01a:	b100      	cbz	r0, 800a01e <_rclc_execute.part.0+0xa2>
 800a01c:	68a0      	ldr	r0, [r4, #8]
 800a01e:	2400      	movs	r4, #0
 800a020:	4798      	blx	r3
 800a022:	4620      	mov	r0, r4
 800a024:	b005      	add	sp, #20
 800a026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a028:	6840      	ldr	r0, [r0, #4]
 800a02a:	f006 f965 	bl	80102f8 <rcl_timer_call>
 800a02e:	f240 3321 	movw	r3, #801	; 0x321
 800a032:	4604      	mov	r4, r0
 800a034:	4298      	cmp	r0, r3
 800a036:	d001      	beq.n	800a03c <_rclc_execute.part.0+0xc0>
 800a038:	2800      	cmp	r0, #0
 800a03a:	d1c2      	bne.n	8009fc2 <_rclc_execute.part.0+0x46>
 800a03c:	2400      	movs	r4, #0
 800a03e:	4620      	mov	r0, r4
 800a040:	b005      	add	sp, #20
 800a042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a044:	2400      	movs	r4, #0
 800a046:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a048:	6880      	ldr	r0, [r0, #8]
 800a04a:	4798      	blx	r3
 800a04c:	4620      	mov	r0, r4
 800a04e:	b005      	add	sp, #20
 800a050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a052:	2400      	movs	r4, #0
 800a054:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a056:	4798      	blx	r3
 800a058:	4620      	mov	r0, r4
 800a05a:	b005      	add	sp, #20
 800a05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a05e:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800a062:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a064:	b100      	cbz	r0, 800a068 <_rclc_execute.part.0+0xec>
 800a066:	68a0      	ldr	r0, [r4, #8]
 800a068:	2400      	movs	r4, #0
 800a06a:	4798      	blx	r3
 800a06c:	4620      	mov	r0, r4
 800a06e:	b005      	add	sp, #20
 800a070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a072:	6840      	ldr	r0, [r0, #4]
 800a074:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800a078:	bb3b      	cbnz	r3, 800a0ca <_rclc_execute.part.0+0x14e>
 800a07a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d07d      	beq.n	800a17e <_rclc_execute.part.0+0x202>
 800a082:	f640 0634 	movw	r6, #2100	; 0x834
 800a086:	2701      	movs	r7, #1
 800a088:	e007      	b.n	800a09a <_rclc_execute.part.0+0x11e>
 800a08a:	4628      	mov	r0, r5
 800a08c:	f007 fda0 	bl	8011bd0 <rclc_action_server_response_goal_request>
 800a090:	4629      	mov	r1, r5
 800a092:	6860      	ldr	r0, [r4, #4]
 800a094:	f007 fd0a 	bl	8011aac <rclc_action_remove_used_goal_handle>
 800a098:	6860      	ldr	r0, [r4, #4]
 800a09a:	2100      	movs	r1, #0
 800a09c:	f007 fd32 	bl	8011b04 <rclc_action_find_first_handle_by_status>
 800a0a0:	4605      	mov	r5, r0
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	d068      	beq.n	800a178 <_rclc_execute.part.0+0x1fc>
 800a0a6:	6863      	ldr	r3, [r4, #4]
 800a0a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a0aa:	699b      	ldr	r3, [r3, #24]
 800a0ac:	4798      	blx	r3
 800a0ae:	42b0      	cmp	r0, r6
 800a0b0:	f04f 0100 	mov.w	r1, #0
 800a0b4:	d1e9      	bne.n	800a08a <_rclc_execute.part.0+0x10e>
 800a0b6:	2101      	movs	r1, #1
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	f007 fd89 	bl	8011bd0 <rclc_action_server_response_goal_request>
 800a0be:	722f      	strb	r7, [r5, #8]
 800a0c0:	e7ea      	b.n	800a098 <_rclc_execute.part.0+0x11c>
 800a0c2:	6848      	ldr	r0, [r1, #4]
 800a0c4:	f007 fcf2 	bl	8011aac <rclc_action_remove_used_goal_handle>
 800a0c8:	6860      	ldr	r0, [r4, #4]
 800a0ca:	f007 fd27 	bl	8011b1c <rclc_action_find_first_terminated_handle>
 800a0ce:	4601      	mov	r1, r0
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	d1f6      	bne.n	800a0c2 <_rclc_execute.part.0+0x146>
 800a0d4:	6860      	ldr	r0, [r4, #4]
 800a0d6:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800a0da:	e7ce      	b.n	800a07a <_rclc_execute.part.0+0xfe>
 800a0dc:	2400      	movs	r4, #0
 800a0de:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a0e0:	f100 0110 	add.w	r1, r0, #16
 800a0e4:	6880      	ldr	r0, [r0, #8]
 800a0e6:	4798      	blx	r3
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	b005      	add	sp, #20
 800a0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ee:	6860      	ldr	r0, [r4, #4]
 800a0f0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a0f4:	b18b      	cbz	r3, 800a11a <_rclc_execute.part.0+0x19e>
 800a0f6:	68c5      	ldr	r5, [r0, #12]
 800a0f8:	b32d      	cbz	r5, 800a146 <_rclc_execute.part.0+0x1ca>
 800a0fa:	2600      	movs	r6, #0
 800a0fc:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800a100:	b143      	cbz	r3, 800a114 <_rclc_execute.part.0+0x198>
 800a102:	69c3      	ldr	r3, [r0, #28]
 800a104:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800a108:	b123      	cbz	r3, 800a114 <_rclc_execute.part.0+0x198>
 800a10a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a10c:	4628      	mov	r0, r5
 800a10e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a110:	4798      	blx	r3
 800a112:	6860      	ldr	r0, [r4, #4]
 800a114:	682d      	ldr	r5, [r5, #0]
 800a116:	2d00      	cmp	r5, #0
 800a118:	d1f0      	bne.n	800a0fc <_rclc_execute.part.0+0x180>
 800a11a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800a11e:	b193      	cbz	r3, 800a146 <_rclc_execute.part.0+0x1ca>
 800a120:	68c5      	ldr	r5, [r0, #12]
 800a122:	b185      	cbz	r5, 800a146 <_rclc_execute.part.0+0x1ca>
 800a124:	2600      	movs	r6, #0
 800a126:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800a12a:	b14b      	cbz	r3, 800a140 <_rclc_execute.part.0+0x1c4>
 800a12c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a12e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800a132:	b12b      	cbz	r3, 800a140 <_rclc_execute.part.0+0x1c4>
 800a134:	4628      	mov	r0, r5
 800a136:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800a13a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a13c:	4798      	blx	r3
 800a13e:	6860      	ldr	r0, [r4, #4]
 800a140:	682d      	ldr	r5, [r5, #0]
 800a142:	2d00      	cmp	r5, #0
 800a144:	d1ef      	bne.n	800a126 <_rclc_execute.part.0+0x1aa>
 800a146:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f43f af76 	beq.w	800a03c <_rclc_execute.part.0+0xc0>
 800a150:	2700      	movs	r7, #0
 800a152:	e00b      	b.n	800a16c <_rclc_execute.part.0+0x1f0>
 800a154:	6863      	ldr	r3, [r4, #4]
 800a156:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a158:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a15a:	6a1e      	ldr	r6, [r3, #32]
 800a15c:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800a160:	47b0      	blx	r6
 800a162:	6860      	ldr	r0, [r4, #4]
 800a164:	4629      	mov	r1, r5
 800a166:	f007 fca1 	bl	8011aac <rclc_action_remove_used_goal_handle>
 800a16a:	6860      	ldr	r0, [r4, #4]
 800a16c:	f007 fd24 	bl	8011bb8 <rclc_action_find_first_handle_with_result_response>
 800a170:	4605      	mov	r5, r0
 800a172:	2800      	cmp	r0, #0
 800a174:	d1ee      	bne.n	800a154 <_rclc_execute.part.0+0x1d8>
 800a176:	e761      	b.n	800a03c <_rclc_execute.part.0+0xc0>
 800a178:	6860      	ldr	r0, [r4, #4]
 800a17a:	f880 5020 	strb.w	r5, [r0, #32]
 800a17e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800a182:	2b00      	cmp	r3, #0
 800a184:	f43f af5a 	beq.w	800a03c <_rclc_execute.part.0+0xc0>
 800a188:	68c5      	ldr	r5, [r0, #12]
 800a18a:	b1b5      	cbz	r5, 800a1ba <_rclc_execute.part.0+0x23e>
 800a18c:	2602      	movs	r6, #2
 800a18e:	e001      	b.n	800a194 <_rclc_execute.part.0+0x218>
 800a190:	682d      	ldr	r5, [r5, #0]
 800a192:	b195      	cbz	r5, 800a1ba <_rclc_execute.part.0+0x23e>
 800a194:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800a198:	2b03      	cmp	r3, #3
 800a19a:	d1f9      	bne.n	800a190 <_rclc_execute.part.0+0x214>
 800a19c:	69c3      	ldr	r3, [r0, #28]
 800a19e:	4628      	mov	r0, r5
 800a1a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a1a2:	4798      	blx	r3
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800a1b0:	b143      	cbz	r3, 800a1c4 <_rclc_execute.part.0+0x248>
 800a1b2:	f007 fd2d 	bl	8011c10 <rclc_action_server_goal_cancel_accept>
 800a1b6:	6860      	ldr	r0, [r4, #4]
 800a1b8:	e7ea      	b.n	800a190 <_rclc_execute.part.0+0x214>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	461c      	mov	r4, r3
 800a1be:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800a1c2:	e72e      	b.n	800a022 <_rclc_execute.part.0+0xa6>
 800a1c4:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800a1c6:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800a1ca:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a1ce:	2101      	movs	r1, #1
 800a1d0:	6860      	ldr	r0, [r4, #4]
 800a1d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1d6:	f007 fd47 	bl	8011c68 <rclc_action_server_goal_cancel_reject>
 800a1da:	722e      	strb	r6, [r5, #8]
 800a1dc:	6860      	ldr	r0, [r4, #4]
 800a1de:	e7d7      	b.n	800a190 <_rclc_execute.part.0+0x214>
 800a1e0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a1e2:	f104 0510 	add.w	r5, r4, #16
 800a1e6:	6880      	ldr	r0, [r0, #8]
 800a1e8:	4798      	blx	r3
 800a1ea:	e6e3      	b.n	8009fb4 <_rclc_execute.part.0+0x38>
 800a1ec:	f100 0510 	add.w	r5, r0, #16
 800a1f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a1f2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a1f4:	4629      	mov	r1, r5
 800a1f6:	6880      	ldr	r0, [r0, #8]
 800a1f8:	4798      	blx	r3
 800a1fa:	e6db      	b.n	8009fb4 <_rclc_execute.part.0+0x38>
 800a1fc:	2401      	movs	r4, #1
 800a1fe:	e710      	b.n	800a022 <_rclc_execute.part.0+0xa6>

0800a200 <rclc_executor_trigger_any>:
 800a200:	2800      	cmp	r0, #0
 800a202:	d03d      	beq.n	800a280 <rclc_executor_trigger_any+0x80>
 800a204:	2900      	cmp	r1, #0
 800a206:	d03c      	beq.n	800a282 <rclc_executor_trigger_any+0x82>
 800a208:	4603      	mov	r3, r0
 800a20a:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800a20e:	2200      	movs	r2, #0
 800a210:	2800      	cmp	r0, #0
 800a212:	d035      	beq.n	800a280 <rclc_executor_trigger_any+0x80>
 800a214:	b430      	push	{r4, r5}
 800a216:	f893 c000 	ldrb.w	ip, [r3]
 800a21a:	f1bc 0f08 	cmp.w	ip, #8
 800a21e:	d11d      	bne.n	800a25c <rclc_executor_trigger_any+0x5c>
 800a220:	685c      	ldr	r4, [r3, #4]
 800a222:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800a224:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800a228:	d105      	bne.n	800a236 <rclc_executor_trigger_any+0x36>
 800a22a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800a22e:	b910      	cbnz	r0, 800a236 <rclc_executor_trigger_any+0x36>
 800a230:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800a234:	b128      	cbz	r0, 800a242 <rclc_executor_trigger_any+0x42>
 800a236:	bc30      	pop	{r4, r5}
 800a238:	4770      	bx	lr
 800a23a:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800a23e:	2800      	cmp	r0, #0
 800a240:	d1f9      	bne.n	800a236 <rclc_executor_trigger_any+0x36>
 800a242:	3201      	adds	r2, #1
 800a244:	3340      	adds	r3, #64	; 0x40
 800a246:	4291      	cmp	r1, r2
 800a248:	d017      	beq.n	800a27a <rclc_executor_trigger_any+0x7a>
 800a24a:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800a24e:	2800      	cmp	r0, #0
 800a250:	d0f1      	beq.n	800a236 <rclc_executor_trigger_any+0x36>
 800a252:	f893 c000 	ldrb.w	ip, [r3]
 800a256:	f1bc 0f08 	cmp.w	ip, #8
 800a25a:	d0e1      	beq.n	800a220 <rclc_executor_trigger_any+0x20>
 800a25c:	f1bc 0f09 	cmp.w	ip, #9
 800a260:	d1eb      	bne.n	800a23a <rclc_executor_trigger_any+0x3a>
 800a262:	685c      	ldr	r4, [r3, #4]
 800a264:	6a25      	ldr	r5, [r4, #32]
 800a266:	2d00      	cmp	r5, #0
 800a268:	d1e5      	bne.n	800a236 <rclc_executor_trigger_any+0x36>
 800a26a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800a26e:	2800      	cmp	r0, #0
 800a270:	d1e1      	bne.n	800a236 <rclc_executor_trigger_any+0x36>
 800a272:	3201      	adds	r2, #1
 800a274:	3340      	adds	r3, #64	; 0x40
 800a276:	4291      	cmp	r1, r2
 800a278:	d1e7      	bne.n	800a24a <rclc_executor_trigger_any+0x4a>
 800a27a:	2000      	movs	r0, #0
 800a27c:	bc30      	pop	{r4, r5}
 800a27e:	4770      	bx	lr
 800a280:	4770      	bx	lr
 800a282:	4608      	mov	r0, r1
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop

0800a288 <rclc_executor_get_zero_initialized_executor>:
 800a288:	b510      	push	{r4, lr}
 800a28a:	4604      	mov	r4, r0
 800a28c:	2288      	movs	r2, #136	; 0x88
 800a28e:	4902      	ldr	r1, [pc, #8]	; (800a298 <rclc_executor_get_zero_initialized_executor+0x10>)
 800a290:	f00a fbaf 	bl	80149f2 <memcpy>
 800a294:	4620      	mov	r0, r4
 800a296:	bd10      	pop	{r4, pc}
 800a298:	08015c40 	.word	0x08015c40
 800a29c:	00000000 	.word	0x00000000

0800a2a0 <rclc_executor_init>:
 800a2a0:	2900      	cmp	r1, #0
 800a2a2:	d06a      	beq.n	800a37a <rclc_executor_init+0xda>
 800a2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a8:	4605      	mov	r5, r0
 800a2aa:	b0b0      	sub	sp, #192	; 0xc0
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d05c      	beq.n	800a36a <rclc_executor_init+0xca>
 800a2b0:	4616      	mov	r6, r2
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	4688      	mov	r8, r1
 800a2b6:	461f      	mov	r7, r3
 800a2b8:	f000 fbc4 	bl	800aa44 <rcutils_allocator_is_valid>
 800a2bc:	2e00      	cmp	r6, #0
 800a2be:	d054      	beq.n	800a36a <rclc_executor_init+0xca>
 800a2c0:	f080 0401 	eor.w	r4, r0, #1
 800a2c4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800a2c8:	d14f      	bne.n	800a36a <rclc_executor_init+0xca>
 800a2ca:	2288      	movs	r2, #136	; 0x88
 800a2cc:	4930      	ldr	r1, [pc, #192]	; (800a390 <rclc_executor_init+0xf0>)
 800a2ce:	a80e      	add	r0, sp, #56	; 0x38
 800a2d0:	f00a fb8f 	bl	80149f2 <memcpy>
 800a2d4:	a90e      	add	r1, sp, #56	; 0x38
 800a2d6:	2288      	movs	r2, #136	; 0x88
 800a2d8:	4628      	mov	r0, r5
 800a2da:	f00a fb8a 	bl	80149f2 <memcpy>
 800a2de:	4668      	mov	r0, sp
 800a2e0:	f8c5 8000 	str.w	r8, [r5]
 800a2e4:	60ae      	str	r6, [r5, #8]
 800a2e6:	f006 f97d 	bl	80105e4 <rcl_get_zero_initialized_wait_set>
 800a2ea:	46ec      	mov	ip, sp
 800a2ec:	f105 0e14 	add.w	lr, r5, #20
 800a2f0:	f8d7 8000 	ldr.w	r8, [r7]
 800a2f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a2f8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a2fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a300:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a304:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a308:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800a388 <rclc_executor_init+0xe8>
 800a30c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a310:	f8dc 3000 	ldr.w	r3, [ip]
 800a314:	01b0      	lsls	r0, r6, #6
 800a316:	6939      	ldr	r1, [r7, #16]
 800a318:	f8ce 3000 	str.w	r3, [lr]
 800a31c:	612f      	str	r7, [r5, #16]
 800a31e:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 800a322:	47c0      	blx	r8
 800a324:	6068      	str	r0, [r5, #4]
 800a326:	b908      	cbnz	r0, 800a32c <rclc_executor_init+0x8c>
 800a328:	e029      	b.n	800a37e <rclc_executor_init+0xde>
 800a32a:	6868      	ldr	r0, [r5, #4]
 800a32c:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800a330:	3401      	adds	r4, #1
 800a332:	4631      	mov	r1, r6
 800a334:	f000 fa80 	bl	800a838 <rclc_executor_handle_init>
 800a338:	42a6      	cmp	r6, r4
 800a33a:	d8f6      	bhi.n	800a32a <rclc_executor_init+0x8a>
 800a33c:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800a340:	f000 fa70 	bl	800a824 <rclc_executor_handle_counters_zero_init>
 800a344:	4a13      	ldr	r2, [pc, #76]	; (800a394 <rclc_executor_init+0xf4>)
 800a346:	2300      	movs	r3, #0
 800a348:	6868      	ldr	r0, [r5, #4]
 800a34a:	e9c5 231e 	strd	r2, r3, [r5, #120]	; 0x78
 800a34e:	b168      	cbz	r0, 800a36c <rclc_executor_init+0xcc>
 800a350:	68ab      	ldr	r3, [r5, #8]
 800a352:	b173      	cbz	r3, 800a372 <rclc_executor_init+0xd2>
 800a354:	692a      	ldr	r2, [r5, #16]
 800a356:	fab2 f382 	clz	r3, r2
 800a35a:	095b      	lsrs	r3, r3, #5
 800a35c:	b14a      	cbz	r2, 800a372 <rclc_executor_init+0xd2>
 800a35e:	4618      	mov	r0, r3
 800a360:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
 800a364:	b030      	add	sp, #192	; 0xc0
 800a366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a36a:	200b      	movs	r0, #11
 800a36c:	b030      	add	sp, #192	; 0xc0
 800a36e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a372:	2000      	movs	r0, #0
 800a374:	b030      	add	sp, #192	; 0xc0
 800a376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a37a:	200b      	movs	r0, #11
 800a37c:	4770      	bx	lr
 800a37e:	200a      	movs	r0, #10
 800a380:	e7f4      	b.n	800a36c <rclc_executor_init+0xcc>
 800a382:	bf00      	nop
 800a384:	f3af 8000 	nop.w
 800a388:	3b9aca00 	.word	0x3b9aca00
 800a38c:	00000000 	.word	0x00000000
 800a390:	08015c40 	.word	0x08015c40
 800a394:	0800a201 	.word	0x0800a201

0800a398 <rclc_executor_add_service>:
 800a398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39a:	9d06      	ldr	r5, [sp, #24]
 800a39c:	4604      	mov	r4, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	bf18      	it	ne
 800a3a2:	2d00      	cmpne	r5, #0
 800a3a4:	bf0c      	ite	eq
 800a3a6:	2001      	moveq	r0, #1
 800a3a8:	2000      	movne	r0, #0
 800a3aa:	2a00      	cmp	r2, #0
 800a3ac:	bf08      	it	eq
 800a3ae:	f040 0001 	orreq.w	r0, r0, #1
 800a3b2:	2900      	cmp	r1, #0
 800a3b4:	bf08      	it	eq
 800a3b6:	f040 0001 	orreq.w	r0, r0, #1
 800a3ba:	bb40      	cbnz	r0, 800a40e <rclc_executor_add_service+0x76>
 800a3bc:	fab4 f684 	clz	r6, r4
 800a3c0:	0976      	lsrs	r6, r6, #5
 800a3c2:	b324      	cbz	r4, 800a40e <rclc_executor_add_service+0x76>
 800a3c4:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 800a3c8:	42b8      	cmp	r0, r7
 800a3ca:	d301      	bcc.n	800a3d0 <rclc_executor_add_service+0x38>
 800a3cc:	2001      	movs	r0, #1
 800a3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3d0:	6867      	ldr	r7, [r4, #4]
 800a3d2:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800a3d6:	f100 0c01 	add.w	ip, r0, #1
 800a3da:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 800a3de:	6283      	str	r3, [r0, #40]	; 0x28
 800a3e0:	2305      	movs	r3, #5
 800a3e2:	6305      	str	r5, [r0, #48]	; 0x30
 800a3e4:	f104 0514 	add.w	r5, r4, #20
 800a3e8:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800a3ec:	f827 300e 	strh.w	r3, [r7, lr]
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	62c6      	str	r6, [r0, #44]	; 0x2c
 800a3f4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	f8c4 c00c 	str.w	ip, [r4, #12]
 800a3fe:	f006 f905 	bl	801060c <rcl_wait_set_is_valid>
 800a402:	b930      	cbnz	r0, 800a412 <rclc_executor_add_service+0x7a>
 800a404:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a406:	2000      	movs	r0, #0
 800a408:	3301      	adds	r3, #1
 800a40a:	6563      	str	r3, [r4, #84]	; 0x54
 800a40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a40e:	200b      	movs	r0, #11
 800a410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a412:	4628      	mov	r0, r5
 800a414:	f006 f900 	bl	8010618 <rcl_wait_set_fini>
 800a418:	2800      	cmp	r0, #0
 800a41a:	d0f3      	beq.n	800a404 <rclc_executor_add_service+0x6c>
 800a41c:	e7d7      	b.n	800a3ce <rclc_executor_add_service+0x36>
 800a41e:	bf00      	nop

0800a420 <rclc_executor_prepare>:
 800a420:	2800      	cmp	r0, #0
 800a422:	d044      	beq.n	800a4ae <rclc_executor_prepare+0x8e>
 800a424:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a426:	f100 0514 	add.w	r5, r0, #20
 800a42a:	b09b      	sub	sp, #108	; 0x6c
 800a42c:	4604      	mov	r4, r0
 800a42e:	4628      	mov	r0, r5
 800a430:	f006 f8ec 	bl	801060c <rcl_wait_set_is_valid>
 800a434:	b110      	cbz	r0, 800a43c <rclc_executor_prepare+0x1c>
 800a436:	2000      	movs	r0, #0
 800a438:	b01b      	add	sp, #108	; 0x6c
 800a43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a43c:	4628      	mov	r0, r5
 800a43e:	f006 f8eb 	bl	8010618 <rcl_wait_set_fini>
 800a442:	2800      	cmp	r0, #0
 800a444:	d130      	bne.n	800a4a8 <rclc_executor_prepare+0x88>
 800a446:	a80c      	add	r0, sp, #48	; 0x30
 800a448:	ae04      	add	r6, sp, #16
 800a44a:	f006 f8cb 	bl	80105e4 <rcl_get_zero_initialized_wait_set>
 800a44e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800a452:	46ae      	mov	lr, r5
 800a454:	6927      	ldr	r7, [r4, #16]
 800a456:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a45a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a45e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a462:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a466:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a46a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a46e:	f8dc 3000 	ldr.w	r3, [ip]
 800a472:	f8ce 3000 	str.w	r3, [lr]
 800a476:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a478:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	4628      	mov	r0, r5
 800a47e:	6822      	ldr	r2, [r4, #0]
 800a480:	6033      	str	r3, [r6, #0]
 800a482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a484:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a486:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800a48a:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 800a48e:	e9cd 2100 	strd	r2, r1, [sp]
 800a492:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800a494:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a496:	f006 fbbf 	bl	8010c18 <rcl_wait_set_init>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d0cc      	beq.n	800a438 <rclc_executor_prepare+0x18>
 800a49e:	900b      	str	r0, [sp, #44]	; 0x2c
 800a4a0:	f000 fb0e 	bl	800aac0 <rcutils_reset_error>
 800a4a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a4a6:	e7c7      	b.n	800a438 <rclc_executor_prepare+0x18>
 800a4a8:	f000 fb0a 	bl	800aac0 <rcutils_reset_error>
 800a4ac:	e7cb      	b.n	800a446 <rclc_executor_prepare+0x26>
 800a4ae:	200b      	movs	r0, #11
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop

0800a4b4 <rclc_executor_spin_some.part.0>:
 800a4b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	4691      	mov	r9, r2
 800a4bc:	4698      	mov	r8, r3
 800a4be:	f7ff ffaf 	bl	800a420 <rclc_executor_prepare>
 800a4c2:	f105 0614 	add.w	r6, r5, #20
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	f006 f972 	bl	80107b0 <rcl_wait_set_clear>
 800a4cc:	4607      	mov	r7, r0
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	f040 80a8 	bne.w	800a624 <rclc_executor_spin_some.part.0+0x170>
 800a4d4:	68ab      	ldr	r3, [r5, #8]
 800a4d6:	b30b      	cbz	r3, 800a51c <rclc_executor_spin_some.part.0+0x68>
 800a4d8:	4604      	mov	r4, r0
 800a4da:	6869      	ldr	r1, [r5, #4]
 800a4dc:	01a2      	lsls	r2, r4, #6
 800a4de:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800a4e2:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800a4e6:	b1cb      	cbz	r3, 800a51c <rclc_executor_spin_some.part.0+0x68>
 800a4e8:	5c8b      	ldrb	r3, [r1, r2]
 800a4ea:	2b0a      	cmp	r3, #10
 800a4ec:	f200 80de 	bhi.w	800a6ac <rclc_executor_spin_some.part.0+0x1f8>
 800a4f0:	e8df f003 	tbb	[pc, r3]
 800a4f4:	8da99d9d 	.word	0x8da99d9d
 800a4f8:	0606068d 	.word	0x0606068d
 800a4fc:	c1ce      	.short	0xc1ce
 800a4fe:	b5          	.byte	0xb5
 800a4ff:	00          	.byte	0x00
 800a500:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a504:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a508:	4630      	mov	r0, r6
 800a50a:	f006 fca1 	bl	8010e50 <rcl_wait_set_add_service>
 800a50e:	2800      	cmp	r0, #0
 800a510:	f040 8087 	bne.w	800a622 <rclc_executor_spin_some.part.0+0x16e>
 800a514:	3401      	adds	r4, #1
 800a516:	68ab      	ldr	r3, [r5, #8]
 800a518:	429c      	cmp	r4, r3
 800a51a:	d3de      	bcc.n	800a4da <rclc_executor_spin_some.part.0+0x26>
 800a51c:	4643      	mov	r3, r8
 800a51e:	464a      	mov	r2, r9
 800a520:	4630      	mov	r0, r6
 800a522:	f006 fcc1 	bl	8010ea8 <rcl_wait>
 800a526:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f000 80c6 	beq.w	800a6bc <rclc_executor_spin_some.part.0+0x208>
 800a530:	2b01      	cmp	r3, #1
 800a532:	f040 80bb 	bne.w	800a6ac <rclc_executor_spin_some.part.0+0x1f8>
 800a536:	68ab      	ldr	r3, [r5, #8]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f000 8159 	beq.w	800a7f0 <rclc_executor_spin_some.part.0+0x33c>
 800a53e:	2400      	movs	r4, #0
 800a540:	f240 1991 	movw	r9, #401	; 0x191
 800a544:	46a0      	mov	r8, r4
 800a546:	e00a      	b.n	800a55e <rclc_executor_spin_some.part.0+0xaa>
 800a548:	f7ff fb56 	bl	8009bf8 <_rclc_check_for_new_data>
 800a54c:	4604      	mov	r4, r0
 800a54e:	b110      	cbz	r0, 800a556 <rclc_executor_spin_some.part.0+0xa2>
 800a550:	4548      	cmp	r0, r9
 800a552:	f040 80b1 	bne.w	800a6b8 <rclc_executor_spin_some.part.0+0x204>
 800a556:	68ab      	ldr	r3, [r5, #8]
 800a558:	4598      	cmp	r8, r3
 800a55a:	f080 8126 	bcs.w	800a7aa <rclc_executor_spin_some.part.0+0x2f6>
 800a55e:	686a      	ldr	r2, [r5, #4]
 800a560:	4631      	mov	r1, r6
 800a562:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a566:	f108 0801 	add.w	r8, r8, #1
 800a56a:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800a56e:	f1bc 0f00 	cmp.w	ip, #0
 800a572:	d1e9      	bne.n	800a548 <rclc_executor_spin_some.part.0+0x94>
 800a574:	4619      	mov	r1, r3
 800a576:	4610      	mov	r0, r2
 800a578:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 800a57c:	4798      	blx	r3
 800a57e:	2800      	cmp	r0, #0
 800a580:	f000 809a 	beq.w	800a6b8 <rclc_executor_spin_some.part.0+0x204>
 800a584:	68ab      	ldr	r3, [r5, #8]
 800a586:	2b00      	cmp	r3, #0
 800a588:	f000 8096 	beq.w	800a6b8 <rclc_executor_spin_some.part.0+0x204>
 800a58c:	f04f 0800 	mov.w	r8, #0
 800a590:	f240 1991 	movw	r9, #401	; 0x191
 800a594:	e009      	b.n	800a5aa <rclc_executor_spin_some.part.0+0xf6>
 800a596:	f7ff fb7d 	bl	8009c94 <_rclc_take_new_data>
 800a59a:	4604      	mov	r4, r0
 800a59c:	b110      	cbz	r0, 800a5a4 <rclc_executor_spin_some.part.0+0xf0>
 800a59e:	4548      	cmp	r0, r9
 800a5a0:	f040 808a 	bne.w	800a6b8 <rclc_executor_spin_some.part.0+0x204>
 800a5a4:	68ab      	ldr	r3, [r5, #8]
 800a5a6:	4598      	cmp	r8, r3
 800a5a8:	d209      	bcs.n	800a5be <rclc_executor_spin_some.part.0+0x10a>
 800a5aa:	6868      	ldr	r0, [r5, #4]
 800a5ac:	4631      	mov	r1, r6
 800a5ae:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a5b2:	f108 0801 	add.w	r8, r8, #1
 800a5b6:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800a5ba:	2a00      	cmp	r2, #0
 800a5bc:	d1eb      	bne.n	800a596 <rclc_executor_spin_some.part.0+0xe2>
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d07a      	beq.n	800a6b8 <rclc_executor_spin_some.part.0+0x204>
 800a5c2:	2600      	movs	r6, #0
 800a5c4:	e00e      	b.n	800a5e4 <rclc_executor_spin_some.part.0+0x130>
 800a5c6:	f812 200c 	ldrb.w	r2, [r2, ip]
 800a5ca:	2a08      	cmp	r2, #8
 800a5cc:	f000 80fc 	beq.w	800a7c8 <rclc_executor_spin_some.part.0+0x314>
 800a5d0:	2a09      	cmp	r2, #9
 800a5d2:	f000 80ee 	beq.w	800a7b2 <rclc_executor_spin_some.part.0+0x2fe>
 800a5d6:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800a5da:	b98a      	cbnz	r2, 800a600 <rclc_executor_spin_some.part.0+0x14c>
 800a5dc:	3601      	adds	r6, #1
 800a5de:	429e      	cmp	r6, r3
 800a5e0:	d267      	bcs.n	800a6b2 <rclc_executor_spin_some.part.0+0x1fe>
 800a5e2:	2400      	movs	r4, #0
 800a5e4:	686a      	ldr	r2, [r5, #4]
 800a5e6:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800a5ea:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800a5ee:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800a5f2:	2900      	cmp	r1, #0
 800a5f4:	d060      	beq.n	800a6b8 <rclc_executor_spin_some.part.0+0x204>
 800a5f6:	7841      	ldrb	r1, [r0, #1]
 800a5f8:	2900      	cmp	r1, #0
 800a5fa:	d0e4      	beq.n	800a5c6 <rclc_executor_spin_some.part.0+0x112>
 800a5fc:	2901      	cmp	r1, #1
 800a5fe:	d1ed      	bne.n	800a5dc <rclc_executor_spin_some.part.0+0x128>
 800a600:	f7ff fcbc 	bl	8009f7c <_rclc_execute.part.0>
 800a604:	2800      	cmp	r0, #0
 800a606:	f040 80b5 	bne.w	800a774 <rclc_executor_spin_some.part.0+0x2c0>
 800a60a:	68ab      	ldr	r3, [r5, #8]
 800a60c:	e7e6      	b.n	800a5dc <rclc_executor_spin_some.part.0+0x128>
 800a60e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a612:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a616:	4630      	mov	r0, r6
 800a618:	f006 fbee 	bl	8010df8 <rcl_wait_set_add_client>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	f43f af79 	beq.w	800a514 <rclc_executor_spin_some.part.0+0x60>
 800a622:	4607      	mov	r7, r0
 800a624:	f000 fa4c 	bl	800aac0 <rcutils_reset_error>
 800a628:	4638      	mov	r0, r7
 800a62a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a62e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a632:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a636:	4630      	mov	r0, r6
 800a638:	f006 f88e 	bl	8010758 <rcl_wait_set_add_subscription>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	f43f af69 	beq.w	800a514 <rclc_executor_spin_some.part.0+0x60>
 800a642:	4607      	mov	r7, r0
 800a644:	e7ee      	b.n	800a624 <rclc_executor_spin_some.part.0+0x170>
 800a646:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a64a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a64e:	4630      	mov	r0, r6
 800a650:	f006 fba2 	bl	8010d98 <rcl_wait_set_add_timer>
 800a654:	2800      	cmp	r0, #0
 800a656:	f43f af5d 	beq.w	800a514 <rclc_executor_spin_some.part.0+0x60>
 800a65a:	4607      	mov	r7, r0
 800a65c:	e7e2      	b.n	800a624 <rclc_executor_spin_some.part.0+0x170>
 800a65e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a662:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a666:	4630      	mov	r0, r6
 800a668:	f006 fb6a 	bl	8010d40 <rcl_wait_set_add_guard_condition>
 800a66c:	2800      	cmp	r0, #0
 800a66e:	f43f af51 	beq.w	800a514 <rclc_executor_spin_some.part.0+0x60>
 800a672:	4607      	mov	r7, r0
 800a674:	e7d6      	b.n	800a624 <rclc_executor_spin_some.part.0+0x170>
 800a676:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a67a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a67e:	4630      	mov	r0, r6
 800a680:	3110      	adds	r1, #16
 800a682:	f007 f8e5 	bl	8011850 <rcl_action_wait_set_add_action_server>
 800a686:	2800      	cmp	r0, #0
 800a688:	f43f af44 	beq.w	800a514 <rclc_executor_spin_some.part.0+0x60>
 800a68c:	4607      	mov	r7, r0
 800a68e:	e7c9      	b.n	800a624 <rclc_executor_spin_some.part.0+0x170>
 800a690:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a694:	2300      	movs	r3, #0
 800a696:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a69a:	4630      	mov	r0, r6
 800a69c:	3110      	adds	r1, #16
 800a69e:	f006 feaf 	bl	8011400 <rcl_action_wait_set_add_action_client>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	f43f af36 	beq.w	800a514 <rclc_executor_spin_some.part.0+0x60>
 800a6a8:	4607      	mov	r7, r0
 800a6aa:	e7bb      	b.n	800a624 <rclc_executor_spin_some.part.0+0x170>
 800a6ac:	2701      	movs	r7, #1
 800a6ae:	f000 fa07 	bl	800aac0 <rcutils_reset_error>
 800a6b2:	4638      	mov	r0, r7
 800a6b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b8:	4627      	mov	r7, r4
 800a6ba:	e7fa      	b.n	800a6b2 <rclc_executor_spin_some.part.0+0x1fe>
 800a6bc:	68ab      	ldr	r3, [r5, #8]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f000 8093 	beq.w	800a7ea <rclc_executor_spin_some.part.0+0x336>
 800a6c4:	2400      	movs	r4, #0
 800a6c6:	f240 1991 	movw	r9, #401	; 0x191
 800a6ca:	46a0      	mov	r8, r4
 800a6cc:	e008      	b.n	800a6e0 <rclc_executor_spin_some.part.0+0x22c>
 800a6ce:	f7ff fa93 	bl	8009bf8 <_rclc_check_for_new_data>
 800a6d2:	4604      	mov	r4, r0
 800a6d4:	b108      	cbz	r0, 800a6da <rclc_executor_spin_some.part.0+0x226>
 800a6d6:	4548      	cmp	r0, r9
 800a6d8:	d1ee      	bne.n	800a6b8 <rclc_executor_spin_some.part.0+0x204>
 800a6da:	68ab      	ldr	r3, [r5, #8]
 800a6dc:	4598      	cmp	r8, r3
 800a6de:	d266      	bcs.n	800a7ae <rclc_executor_spin_some.part.0+0x2fa>
 800a6e0:	686a      	ldr	r2, [r5, #4]
 800a6e2:	4631      	mov	r1, r6
 800a6e4:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a6e8:	f108 0801 	add.w	r8, r8, #1
 800a6ec:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800a6f0:	f1bc 0f00 	cmp.w	ip, #0
 800a6f4:	d1eb      	bne.n	800a6ce <rclc_executor_spin_some.part.0+0x21a>
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 800a6fe:	4798      	blx	r3
 800a700:	2800      	cmp	r0, #0
 800a702:	d0d9      	beq.n	800a6b8 <rclc_executor_spin_some.part.0+0x204>
 800a704:	68ab      	ldr	r3, [r5, #8]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d0d6      	beq.n	800a6b8 <rclc_executor_spin_some.part.0+0x204>
 800a70a:	f04f 0a00 	mov.w	sl, #0
 800a70e:	f240 1891 	movw	r8, #401	; 0x191
 800a712:	f240 2959 	movw	r9, #601	; 0x259
 800a716:	e00e      	b.n	800a736 <rclc_executor_spin_some.part.0+0x282>
 800a718:	f813 300b 	ldrb.w	r3, [r3, fp]
 800a71c:	2b08      	cmp	r3, #8
 800a71e:	d034      	beq.n	800a78a <rclc_executor_spin_some.part.0+0x2d6>
 800a720:	2b09      	cmp	r3, #9
 800a722:	d029      	beq.n	800a778 <rclc_executor_spin_some.part.0+0x2c4>
 800a724:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800a728:	bb03      	cbnz	r3, 800a76c <rclc_executor_spin_some.part.0+0x2b8>
 800a72a:	f10a 0a01 	add.w	sl, sl, #1
 800a72e:	68ab      	ldr	r3, [r5, #8]
 800a730:	459a      	cmp	sl, r3
 800a732:	d2be      	bcs.n	800a6b2 <rclc_executor_spin_some.part.0+0x1fe>
 800a734:	2400      	movs	r4, #0
 800a736:	6868      	ldr	r0, [r5, #4]
 800a738:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800a73c:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800a740:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800a744:	2b00      	cmp	r3, #0
 800a746:	d0b7      	beq.n	800a6b8 <rclc_executor_spin_some.part.0+0x204>
 800a748:	4631      	mov	r1, r6
 800a74a:	f7ff faa3 	bl	8009c94 <_rclc_take_new_data>
 800a74e:	2800      	cmp	r0, #0
 800a750:	bf18      	it	ne
 800a752:	4540      	cmpne	r0, r8
 800a754:	d001      	beq.n	800a75a <rclc_executor_spin_some.part.0+0x2a6>
 800a756:	4548      	cmp	r0, r9
 800a758:	d10c      	bne.n	800a774 <rclc_executor_spin_some.part.0+0x2c0>
 800a75a:	686b      	ldr	r3, [r5, #4]
 800a75c:	eb13 000b 	adds.w	r0, r3, fp
 800a760:	d021      	beq.n	800a7a6 <rclc_executor_spin_some.part.0+0x2f2>
 800a762:	7842      	ldrb	r2, [r0, #1]
 800a764:	2a00      	cmp	r2, #0
 800a766:	d0d7      	beq.n	800a718 <rclc_executor_spin_some.part.0+0x264>
 800a768:	2a01      	cmp	r2, #1
 800a76a:	d1de      	bne.n	800a72a <rclc_executor_spin_some.part.0+0x276>
 800a76c:	f7ff fc06 	bl	8009f7c <_rclc_execute.part.0>
 800a770:	2800      	cmp	r0, #0
 800a772:	d0da      	beq.n	800a72a <rclc_executor_spin_some.part.0+0x276>
 800a774:	4607      	mov	r7, r0
 800a776:	e79c      	b.n	800a6b2 <rclc_executor_spin_some.part.0+0x1fe>
 800a778:	6843      	ldr	r3, [r0, #4]
 800a77a:	6a1a      	ldr	r2, [r3, #32]
 800a77c:	2a00      	cmp	r2, #0
 800a77e:	d1f5      	bne.n	800a76c <rclc_executor_spin_some.part.0+0x2b8>
 800a780:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a784:	2b00      	cmp	r3, #0
 800a786:	d0d0      	beq.n	800a72a <rclc_executor_spin_some.part.0+0x276>
 800a788:	e7f0      	b.n	800a76c <rclc_executor_spin_some.part.0+0x2b8>
 800a78a:	6843      	ldr	r3, [r0, #4]
 800a78c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a78e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800a792:	d1eb      	bne.n	800a76c <rclc_executor_spin_some.part.0+0x2b8>
 800a794:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a798:	2a00      	cmp	r2, #0
 800a79a:	d1e7      	bne.n	800a76c <rclc_executor_spin_some.part.0+0x2b8>
 800a79c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d0c2      	beq.n	800a72a <rclc_executor_spin_some.part.0+0x276>
 800a7a4:	e7e2      	b.n	800a76c <rclc_executor_spin_some.part.0+0x2b8>
 800a7a6:	270b      	movs	r7, #11
 800a7a8:	e783      	b.n	800a6b2 <rclc_executor_spin_some.part.0+0x1fe>
 800a7aa:	686a      	ldr	r2, [r5, #4]
 800a7ac:	e6e2      	b.n	800a574 <rclc_executor_spin_some.part.0+0xc0>
 800a7ae:	686a      	ldr	r2, [r5, #4]
 800a7b0:	e7a1      	b.n	800a6f6 <rclc_executor_spin_some.part.0+0x242>
 800a7b2:	6842      	ldr	r2, [r0, #4]
 800a7b4:	6a11      	ldr	r1, [r2, #32]
 800a7b6:	2900      	cmp	r1, #0
 800a7b8:	f47f af22 	bne.w	800a600 <rclc_executor_spin_some.part.0+0x14c>
 800a7bc:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800a7c0:	2a00      	cmp	r2, #0
 800a7c2:	f43f af0b 	beq.w	800a5dc <rclc_executor_spin_some.part.0+0x128>
 800a7c6:	e71b      	b.n	800a600 <rclc_executor_spin_some.part.0+0x14c>
 800a7c8:	6842      	ldr	r2, [r0, #4]
 800a7ca:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800a7cc:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800a7d0:	f47f af16 	bne.w	800a600 <rclc_executor_spin_some.part.0+0x14c>
 800a7d4:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800a7d8:	2900      	cmp	r1, #0
 800a7da:	f47f af11 	bne.w	800a600 <rclc_executor_spin_some.part.0+0x14c>
 800a7de:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800a7e2:	2a00      	cmp	r2, #0
 800a7e4:	f43f aefa 	beq.w	800a5dc <rclc_executor_spin_some.part.0+0x128>
 800a7e8:	e70a      	b.n	800a600 <rclc_executor_spin_some.part.0+0x14c>
 800a7ea:	686a      	ldr	r2, [r5, #4]
 800a7ec:	461c      	mov	r4, r3
 800a7ee:	e782      	b.n	800a6f6 <rclc_executor_spin_some.part.0+0x242>
 800a7f0:	686a      	ldr	r2, [r5, #4]
 800a7f2:	461c      	mov	r4, r3
 800a7f4:	e6be      	b.n	800a574 <rclc_executor_spin_some.part.0+0xc0>
 800a7f6:	bf00      	nop

0800a7f8 <rclc_executor_spin_some>:
 800a7f8:	b190      	cbz	r0, 800a820 <rclc_executor_spin_some+0x28>
 800a7fa:	b570      	push	{r4, r5, r6, lr}
 800a7fc:	4604      	mov	r4, r0
 800a7fe:	6800      	ldr	r0, [r0, #0]
 800a800:	4616      	mov	r6, r2
 800a802:	461d      	mov	r5, r3
 800a804:	f005 f854 	bl	800f8b0 <rcl_context_is_valid>
 800a808:	b130      	cbz	r0, 800a818 <rclc_executor_spin_some+0x20>
 800a80a:	4632      	mov	r2, r6
 800a80c:	462b      	mov	r3, r5
 800a80e:	4620      	mov	r0, r4
 800a810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a814:	f7ff be4e 	b.w	800a4b4 <rclc_executor_spin_some.part.0>
 800a818:	f000 f952 	bl	800aac0 <rcutils_reset_error>
 800a81c:	2001      	movs	r0, #1
 800a81e:	bd70      	pop	{r4, r5, r6, pc}
 800a820:	200b      	movs	r0, #11
 800a822:	4770      	bx	lr

0800a824 <rclc_executor_handle_counters_zero_init>:
 800a824:	b130      	cbz	r0, 800a834 <rclc_executor_handle_counters_zero_init+0x10>
 800a826:	2220      	movs	r2, #32
 800a828:	2100      	movs	r1, #0
 800a82a:	b508      	push	{r3, lr}
 800a82c:	f009 ffc2 	bl	80147b4 <memset>
 800a830:	2000      	movs	r0, #0
 800a832:	bd08      	pop	{r3, pc}
 800a834:	200b      	movs	r0, #11
 800a836:	4770      	bx	lr

0800a838 <rclc_executor_handle_init>:
 800a838:	4603      	mov	r3, r0
 800a83a:	b178      	cbz	r0, 800a85c <rclc_executor_handle_init+0x24>
 800a83c:	2200      	movs	r2, #0
 800a83e:	f04f 0c0b 	mov.w	ip, #11
 800a842:	6341      	str	r1, [r0, #52]	; 0x34
 800a844:	4610      	mov	r0, r2
 800a846:	f8a3 c000 	strh.w	ip, [r3]
 800a84a:	631a      	str	r2, [r3, #48]	; 0x30
 800a84c:	871a      	strh	r2, [r3, #56]	; 0x38
 800a84e:	ed9f 7b04 	vldr	d7, [pc, #16]	; 800a860 <rclc_executor_handle_init+0x28>
 800a852:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800a856:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 800a85a:	4770      	bx	lr
 800a85c:	200b      	movs	r0, #11
 800a85e:	4770      	bx	lr
	...

0800a868 <rclc_support_init_with_options>:
 800a868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a86c:	b083      	sub	sp, #12
 800a86e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a870:	2b00      	cmp	r3, #0
 800a872:	bf18      	it	ne
 800a874:	2f00      	cmpne	r7, #0
 800a876:	d027      	beq.n	800a8c8 <rclc_support_init_with_options+0x60>
 800a878:	4604      	mov	r4, r0
 800a87a:	b328      	cbz	r0, 800a8c8 <rclc_support_init_with_options+0x60>
 800a87c:	46e9      	mov	r9, sp
 800a87e:	461d      	mov	r5, r3
 800a880:	460e      	mov	r6, r1
 800a882:	4690      	mov	r8, r2
 800a884:	4648      	mov	r0, r9
 800a886:	f005 f809 	bl	800f89c <rcl_get_zero_initialized_context>
 800a88a:	462a      	mov	r2, r5
 800a88c:	4623      	mov	r3, r4
 800a88e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800a892:	e884 0003 	stmia.w	r4, {r0, r1}
 800a896:	4641      	mov	r1, r8
 800a898:	4630      	mov	r0, r6
 800a89a:	f005 f91d 	bl	800fad8 <rcl_init>
 800a89e:	4605      	mov	r5, r0
 800a8a0:	b960      	cbnz	r0, 800a8bc <rclc_support_init_with_options+0x54>
 800a8a2:	463a      	mov	r2, r7
 800a8a4:	f104 010c 	add.w	r1, r4, #12
 800a8a8:	2003      	movs	r0, #3
 800a8aa:	60a7      	str	r7, [r4, #8]
 800a8ac:	f005 fc90 	bl	80101d0 <rcl_clock_init>
 800a8b0:	4605      	mov	r5, r0
 800a8b2:	b918      	cbnz	r0, 800a8bc <rclc_support_init_with_options+0x54>
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	b003      	add	sp, #12
 800a8b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8bc:	f000 f900 	bl	800aac0 <rcutils_reset_error>
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	b003      	add	sp, #12
 800a8c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8c8:	250b      	movs	r5, #11
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	b003      	add	sp, #12
 800a8ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8d2:	bf00      	nop

0800a8d4 <rclc_node_init_with_options>:
 800a8d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8d8:	b087      	sub	sp, #28
 800a8da:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a8dc:	2e00      	cmp	r6, #0
 800a8de:	bf18      	it	ne
 800a8e0:	2b00      	cmpne	r3, #0
 800a8e2:	bf0c      	ite	eq
 800a8e4:	f04f 0c01 	moveq.w	ip, #1
 800a8e8:	f04f 0c00 	movne.w	ip, #0
 800a8ec:	2a00      	cmp	r2, #0
 800a8ee:	bf08      	it	eq
 800a8f0:	f04c 0c01 	orreq.w	ip, ip, #1
 800a8f4:	2900      	cmp	r1, #0
 800a8f6:	bf08      	it	eq
 800a8f8:	f04c 0c01 	orreq.w	ip, ip, #1
 800a8fc:	f1bc 0f00 	cmp.w	ip, #0
 800a900:	d118      	bne.n	800a934 <rclc_node_init_with_options+0x60>
 800a902:	4604      	mov	r4, r0
 800a904:	b1b0      	cbz	r0, 800a934 <rclc_node_init_with_options+0x60>
 800a906:	f10d 0910 	add.w	r9, sp, #16
 800a90a:	460d      	mov	r5, r1
 800a90c:	4698      	mov	r8, r3
 800a90e:	4617      	mov	r7, r2
 800a910:	4648      	mov	r0, r9
 800a912:	f7fe fea3 	bl	800965c <rcl_get_zero_initialized_node>
 800a916:	9600      	str	r6, [sp, #0]
 800a918:	4643      	mov	r3, r8
 800a91a:	463a      	mov	r2, r7
 800a91c:	e899 0003 	ldmia.w	r9, {r0, r1}
 800a920:	e884 0003 	stmia.w	r4, {r0, r1}
 800a924:	4629      	mov	r1, r5
 800a926:	4620      	mov	r0, r4
 800a928:	f7fe fea2 	bl	8009670 <rcl_node_init>
 800a92c:	b930      	cbnz	r0, 800a93c <rclc_node_init_with_options+0x68>
 800a92e:	b007      	add	sp, #28
 800a930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a934:	200b      	movs	r0, #11
 800a936:	b007      	add	sp, #28
 800a938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a93c:	9003      	str	r0, [sp, #12]
 800a93e:	f000 f8bf 	bl	800aac0 <rcutils_reset_error>
 800a942:	9803      	ldr	r0, [sp, #12]
 800a944:	b007      	add	sp, #28
 800a946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a94a:	bf00      	nop

0800a94c <rclc_service_init_default>:
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	bf18      	it	ne
 800a950:	2a00      	cmpne	r2, #0
 800a952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a956:	4616      	mov	r6, r2
 800a958:	bf0c      	ite	eq
 800a95a:	2201      	moveq	r2, #1
 800a95c:	2200      	movne	r2, #0
 800a95e:	b09e      	sub	sp, #120	; 0x78
 800a960:	2900      	cmp	r1, #0
 800a962:	bf08      	it	eq
 800a964:	f042 0201 	orreq.w	r2, r2, #1
 800a968:	bb1a      	cbnz	r2, 800a9b2 <rclc_service_init_default+0x66>
 800a96a:	4604      	mov	r4, r0
 800a96c:	b308      	cbz	r0, 800a9b2 <rclc_service_init_default+0x66>
 800a96e:	f10d 0810 	add.w	r8, sp, #16
 800a972:	461f      	mov	r7, r3
 800a974:	460d      	mov	r5, r1
 800a976:	f7ff f81b 	bl	80099b0 <rcl_get_zero_initialized_service>
 800a97a:	6020      	str	r0, [r4, #0]
 800a97c:	4640      	mov	r0, r8
 800a97e:	f7ff f8af 	bl	8009ae0 <rcl_service_get_default_options>
 800a982:	2250      	movs	r2, #80	; 0x50
 800a984:	490d      	ldr	r1, [pc, #52]	; (800a9bc <rclc_service_init_default+0x70>)
 800a986:	4640      	mov	r0, r8
 800a988:	f00a f833 	bl	80149f2 <memcpy>
 800a98c:	463b      	mov	r3, r7
 800a98e:	4632      	mov	r2, r6
 800a990:	4629      	mov	r1, r5
 800a992:	4620      	mov	r0, r4
 800a994:	f8cd 8000 	str.w	r8, [sp]
 800a998:	f7ff f810 	bl	80099bc <rcl_service_init>
 800a99c:	b910      	cbnz	r0, 800a9a4 <rclc_service_init_default+0x58>
 800a99e:	b01e      	add	sp, #120	; 0x78
 800a9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9a4:	9003      	str	r0, [sp, #12]
 800a9a6:	f000 f88b 	bl	800aac0 <rcutils_reset_error>
 800a9aa:	9803      	ldr	r0, [sp, #12]
 800a9ac:	b01e      	add	sp, #120	; 0x78
 800a9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9b2:	200b      	movs	r0, #11
 800a9b4:	b01e      	add	sp, #120	; 0x78
 800a9b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9ba:	bf00      	nop
 800a9bc:	08015cc8 	.word	0x08015cc8

0800a9c0 <__default_zero_allocate>:
 800a9c0:	f009 b968 	b.w	8013c94 <calloc>

0800a9c4 <__default_reallocate>:
 800a9c4:	f009 baf4 	b.w	8013fb0 <realloc>

0800a9c8 <__default_deallocate>:
 800a9c8:	f009 b9d2 	b.w	8013d70 <free>

0800a9cc <__default_allocate>:
 800a9cc:	f009 b9c8 	b.w	8013d60 <malloc>

0800a9d0 <rcutils_get_zero_initialized_allocator>:
 800a9d0:	b510      	push	{r4, lr}
 800a9d2:	4c05      	ldr	r4, [pc, #20]	; (800a9e8 <rcutils_get_zero_initialized_allocator+0x18>)
 800a9d4:	4686      	mov	lr, r0
 800a9d6:	4684      	mov	ip, r0
 800a9d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a9da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a9de:	6823      	ldr	r3, [r4, #0]
 800a9e0:	4670      	mov	r0, lr
 800a9e2:	f8cc 3000 	str.w	r3, [ip]
 800a9e6:	bd10      	pop	{r4, pc}
 800a9e8:	08015d18 	.word	0x08015d18

0800a9ec <rcutils_set_default_allocator>:
 800a9ec:	b1a8      	cbz	r0, 800aa1a <rcutils_set_default_allocator+0x2e>
 800a9ee:	6802      	ldr	r2, [r0, #0]
 800a9f0:	b1a2      	cbz	r2, 800aa1c <rcutils_set_default_allocator+0x30>
 800a9f2:	6841      	ldr	r1, [r0, #4]
 800a9f4:	b1a1      	cbz	r1, 800aa20 <rcutils_set_default_allocator+0x34>
 800a9f6:	b410      	push	{r4}
 800a9f8:	68c4      	ldr	r4, [r0, #12]
 800a9fa:	b164      	cbz	r4, 800aa16 <rcutils_set_default_allocator+0x2a>
 800a9fc:	6880      	ldr	r0, [r0, #8]
 800a9fe:	b138      	cbz	r0, 800aa10 <rcutils_set_default_allocator+0x24>
 800aa00:	4b08      	ldr	r3, [pc, #32]	; (800aa24 <rcutils_set_default_allocator+0x38>)
 800aa02:	601a      	str	r2, [r3, #0]
 800aa04:	2200      	movs	r2, #0
 800aa06:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800aa0a:	2001      	movs	r0, #1
 800aa0c:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800aa10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa14:	4770      	bx	lr
 800aa16:	4620      	mov	r0, r4
 800aa18:	e7fa      	b.n	800aa10 <rcutils_set_default_allocator+0x24>
 800aa1a:	4770      	bx	lr
 800aa1c:	4610      	mov	r0, r2
 800aa1e:	4770      	bx	lr
 800aa20:	4608      	mov	r0, r1
 800aa22:	4770      	bx	lr
 800aa24:	200001e0 	.word	0x200001e0

0800aa28 <rcutils_get_default_allocator>:
 800aa28:	b510      	push	{r4, lr}
 800aa2a:	4c05      	ldr	r4, [pc, #20]	; (800aa40 <rcutils_get_default_allocator+0x18>)
 800aa2c:	4686      	mov	lr, r0
 800aa2e:	4684      	mov	ip, r0
 800aa30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aa36:	6823      	ldr	r3, [r4, #0]
 800aa38:	4670      	mov	r0, lr
 800aa3a:	f8cc 3000 	str.w	r3, [ip]
 800aa3e:	bd10      	pop	{r4, pc}
 800aa40:	200001e0 	.word	0x200001e0

0800aa44 <rcutils_allocator_is_valid>:
 800aa44:	b158      	cbz	r0, 800aa5e <rcutils_allocator_is_valid+0x1a>
 800aa46:	6803      	ldr	r3, [r0, #0]
 800aa48:	b143      	cbz	r3, 800aa5c <rcutils_allocator_is_valid+0x18>
 800aa4a:	6843      	ldr	r3, [r0, #4]
 800aa4c:	b133      	cbz	r3, 800aa5c <rcutils_allocator_is_valid+0x18>
 800aa4e:	68c3      	ldr	r3, [r0, #12]
 800aa50:	b123      	cbz	r3, 800aa5c <rcutils_allocator_is_valid+0x18>
 800aa52:	6880      	ldr	r0, [r0, #8]
 800aa54:	3800      	subs	r0, #0
 800aa56:	bf18      	it	ne
 800aa58:	2001      	movne	r0, #1
 800aa5a:	4770      	bx	lr
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	4770      	bx	lr

0800aa60 <rcutils_get_env>:
 800aa60:	b168      	cbz	r0, 800aa7e <rcutils_get_env+0x1e>
 800aa62:	b510      	push	{r4, lr}
 800aa64:	460c      	mov	r4, r1
 800aa66:	b129      	cbz	r1, 800aa74 <rcutils_get_env+0x14>
 800aa68:	f009 f932 	bl	8013cd0 <getenv>
 800aa6c:	b120      	cbz	r0, 800aa78 <rcutils_get_env+0x18>
 800aa6e:	6020      	str	r0, [r4, #0]
 800aa70:	2000      	movs	r0, #0
 800aa72:	bd10      	pop	{r4, pc}
 800aa74:	4803      	ldr	r0, [pc, #12]	; (800aa84 <rcutils_get_env+0x24>)
 800aa76:	bd10      	pop	{r4, pc}
 800aa78:	4b03      	ldr	r3, [pc, #12]	; (800aa88 <rcutils_get_env+0x28>)
 800aa7a:	6023      	str	r3, [r4, #0]
 800aa7c:	bd10      	pop	{r4, pc}
 800aa7e:	4803      	ldr	r0, [pc, #12]	; (800aa8c <rcutils_get_env+0x2c>)
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	08015d48 	.word	0x08015d48
 800aa88:	08015e6c 	.word	0x08015e6c
 800aa8c:	08015d2c 	.word	0x08015d2c

0800aa90 <rcutils_get_error_string>:
 800aa90:	4b06      	ldr	r3, [pc, #24]	; (800aaac <rcutils_get_error_string+0x1c>)
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	b13b      	cbz	r3, 800aaa6 <rcutils_get_error_string+0x16>
 800aa96:	4b06      	ldr	r3, [pc, #24]	; (800aab0 <rcutils_get_error_string+0x20>)
 800aa98:	781a      	ldrb	r2, [r3, #0]
 800aa9a:	b90a      	cbnz	r2, 800aaa0 <rcutils_get_error_string+0x10>
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	701a      	strb	r2, [r3, #0]
 800aaa0:	4b04      	ldr	r3, [pc, #16]	; (800aab4 <rcutils_get_error_string+0x24>)
 800aaa2:	7818      	ldrb	r0, [r3, #0]
 800aaa4:	4770      	bx	lr
 800aaa6:	4b04      	ldr	r3, [pc, #16]	; (800aab8 <rcutils_get_error_string+0x28>)
 800aaa8:	7818      	ldrb	r0, [r3, #0]
 800aaaa:	4770      	bx	lr
 800aaac:	2000c328 	.word	0x2000c328
 800aab0:	2000c341 	.word	0x2000c341
 800aab4:	2000c340 	.word	0x2000c340
 800aab8:	08015988 	.word	0x08015988
 800aabc:	00000000 	.word	0x00000000

0800aac0 <rcutils_reset_error>:
 800aac0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800aae0 <rcutils_reset_error+0x20>
 800aac4:	2300      	movs	r3, #0
 800aac6:	4a08      	ldr	r2, [pc, #32]	; (800aae8 <rcutils_reset_error+0x28>)
 800aac8:	4808      	ldr	r0, [pc, #32]	; (800aaec <rcutils_reset_error+0x2c>)
 800aaca:	8013      	strh	r3, [r2, #0]
 800aacc:	4908      	ldr	r1, [pc, #32]	; (800aaf0 <rcutils_reset_error+0x30>)
 800aace:	7003      	strb	r3, [r0, #0]
 800aad0:	700b      	strb	r3, [r1, #0]
 800aad2:	ed82 7b02 	vstr	d7, [r2, #8]
 800aad6:	4a07      	ldr	r2, [pc, #28]	; (800aaf4 <rcutils_reset_error+0x34>)
 800aad8:	7013      	strb	r3, [r2, #0]
 800aada:	4770      	bx	lr
 800aadc:	f3af 8000 	nop.w
	...
 800aae8:	2000c330 	.word	0x2000c330
 800aaec:	2000c341 	.word	0x2000c341
 800aaf0:	2000c340 	.word	0x2000c340
 800aaf4:	2000c328 	.word	0x2000c328

0800aaf8 <rcutils_format_string_limit>:
 800aaf8:	b40f      	push	{r0, r1, r2, r3}
 800aafa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aafc:	b083      	sub	sp, #12
 800aafe:	ac08      	add	r4, sp, #32
 800ab00:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ab02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ab06:	b326      	cbz	r6, 800ab52 <rcutils_format_string_limit+0x5a>
 800ab08:	a808      	add	r0, sp, #32
 800ab0a:	f7ff ff9b 	bl	800aa44 <rcutils_allocator_is_valid>
 800ab0e:	b300      	cbz	r0, 800ab52 <rcutils_format_string_limit+0x5a>
 800ab10:	2100      	movs	r1, #0
 800ab12:	ab0f      	add	r3, sp, #60	; 0x3c
 800ab14:	4632      	mov	r2, r6
 800ab16:	4608      	mov	r0, r1
 800ab18:	e9cd 3300 	strd	r3, r3, [sp]
 800ab1c:	f000 f906 	bl	800ad2c <rcutils_vsnprintf>
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	4605      	mov	r5, r0
 800ab24:	d015      	beq.n	800ab52 <rcutils_format_string_limit+0x5a>
 800ab26:	1c47      	adds	r7, r0, #1
 800ab28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab2a:	429f      	cmp	r7, r3
 800ab2c:	d901      	bls.n	800ab32 <rcutils_format_string_limit+0x3a>
 800ab2e:	1e5d      	subs	r5, r3, #1
 800ab30:	461f      	mov	r7, r3
 800ab32:	9b08      	ldr	r3, [sp, #32]
 800ab34:	4638      	mov	r0, r7
 800ab36:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ab38:	4798      	blx	r3
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	b148      	cbz	r0, 800ab52 <rcutils_format_string_limit+0x5a>
 800ab3e:	4632      	mov	r2, r6
 800ab40:	4639      	mov	r1, r7
 800ab42:	9b01      	ldr	r3, [sp, #4]
 800ab44:	f000 f8f2 	bl	800ad2c <rcutils_vsnprintf>
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	db09      	blt.n	800ab60 <rcutils_format_string_limit+0x68>
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	5563      	strb	r3, [r4, r5]
 800ab50:	e000      	b.n	800ab54 <rcutils_format_string_limit+0x5c>
 800ab52:	2400      	movs	r4, #0
 800ab54:	4620      	mov	r0, r4
 800ab56:	b003      	add	sp, #12
 800ab58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ab5c:	b004      	add	sp, #16
 800ab5e:	4770      	bx	lr
 800ab60:	4620      	mov	r0, r4
 800ab62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab64:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ab66:	2400      	movs	r4, #0
 800ab68:	4798      	blx	r3
 800ab6a:	e7f3      	b.n	800ab54 <rcutils_format_string_limit+0x5c>

0800ab6c <rcutils_repl_str>:
 800ab6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab70:	ed2d 8b02 	vpush	{d8}
 800ab74:	b087      	sub	sp, #28
 800ab76:	2600      	movs	r6, #0
 800ab78:	4680      	mov	r8, r0
 800ab7a:	468a      	mov	sl, r1
 800ab7c:	9000      	str	r0, [sp, #0]
 800ab7e:	4608      	mov	r0, r1
 800ab80:	ee08 2a10 	vmov	s16, r2
 800ab84:	4699      	mov	r9, r3
 800ab86:	2510      	movs	r5, #16
 800ab88:	f7f5 fb64 	bl	8000254 <strlen>
 800ab8c:	4637      	mov	r7, r6
 800ab8e:	46b3      	mov	fp, r6
 800ab90:	9001      	str	r0, [sp, #4]
 800ab92:	e01e      	b.n	800abd2 <rcutils_repl_str+0x66>
 800ab94:	f10b 0b01 	add.w	fp, fp, #1
 800ab98:	9b01      	ldr	r3, [sp, #4]
 800ab9a:	455e      	cmp	r6, fp
 800ab9c:	eb04 0803 	add.w	r8, r4, r3
 800aba0:	d211      	bcs.n	800abc6 <rcutils_repl_str+0x5a>
 800aba2:	442e      	add	r6, r5
 800aba4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800aba8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800abac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abb0:	00b1      	lsls	r1, r6, #2
 800abb2:	4798      	blx	r3
 800abb4:	2800      	cmp	r0, #0
 800abb6:	f000 8088 	beq.w	800acca <rcutils_repl_str+0x15e>
 800abba:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800abbe:	4607      	mov	r7, r0
 800abc0:	bf28      	it	cs
 800abc2:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 800abc6:	9a00      	ldr	r2, [sp, #0]
 800abc8:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 800abcc:	1aa4      	subs	r4, r4, r2
 800abce:	f843 4c04 	str.w	r4, [r3, #-4]
 800abd2:	4651      	mov	r1, sl
 800abd4:	4640      	mov	r0, r8
 800abd6:	f009 fe14 	bl	8014802 <strstr>
 800abda:	4604      	mov	r4, r0
 800abdc:	4638      	mov	r0, r7
 800abde:	2c00      	cmp	r4, #0
 800abe0:	d1d8      	bne.n	800ab94 <rcutils_repl_str+0x28>
 800abe2:	4640      	mov	r0, r8
 800abe4:	f7f5 fb36 	bl	8000254 <strlen>
 800abe8:	9b00      	ldr	r3, [sp, #0]
 800abea:	eba8 0803 	sub.w	r8, r8, r3
 800abee:	eb08 0400 	add.w	r4, r8, r0
 800abf2:	9402      	str	r4, [sp, #8]
 800abf4:	f1bb 0f00 	cmp.w	fp, #0
 800abf8:	d045      	beq.n	800ac86 <rcutils_repl_str+0x11a>
 800abfa:	ee18 0a10 	vmov	r0, s16
 800abfe:	f7f5 fb29 	bl	8000254 <strlen>
 800ac02:	9a01      	ldr	r2, [sp, #4]
 800ac04:	4606      	mov	r6, r0
 800ac06:	f8d9 3000 	ldr.w	r3, [r9]
 800ac0a:	1a82      	subs	r2, r0, r2
 800ac0c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800ac10:	fb0b 4202 	mla	r2, fp, r2, r4
 800ac14:	1c50      	adds	r0, r2, #1
 800ac16:	9205      	str	r2, [sp, #20]
 800ac18:	4798      	blx	r3
 800ac1a:	4682      	mov	sl, r0
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	d054      	beq.n	800acca <rcutils_repl_str+0x15e>
 800ac20:	683a      	ldr	r2, [r7, #0]
 800ac22:	463d      	mov	r5, r7
 800ac24:	9900      	ldr	r1, [sp, #0]
 800ac26:	2401      	movs	r4, #1
 800ac28:	f009 fee3 	bl	80149f2 <memcpy>
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 800ac32:	eb0a 0803 	add.w	r8, sl, r3
 800ac36:	ee18 7a10 	vmov	r7, s16
 800ac3a:	f8dd a000 	ldr.w	sl, [sp]
 800ac3e:	f8cd 9000 	str.w	r9, [sp]
 800ac42:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ac46:	4632      	mov	r2, r6
 800ac48:	4639      	mov	r1, r7
 800ac4a:	4640      	mov	r0, r8
 800ac4c:	44b0      	add	r8, r6
 800ac4e:	f009 fed0 	bl	80149f2 <memcpy>
 800ac52:	f855 2b04 	ldr.w	r2, [r5], #4
 800ac56:	45a3      	cmp	fp, r4
 800ac58:	444a      	add	r2, r9
 800ac5a:	eb0a 0102 	add.w	r1, sl, r2
 800ac5e:	d02a      	beq.n	800acb6 <rcutils_repl_str+0x14a>
 800ac60:	6828      	ldr	r0, [r5, #0]
 800ac62:	1a82      	subs	r2, r0, r2
 800ac64:	4640      	mov	r0, r8
 800ac66:	4490      	add	r8, r2
 800ac68:	f009 fec3 	bl	80149f2 <memcpy>
 800ac6c:	1c62      	adds	r2, r4, #1
 800ac6e:	45a3      	cmp	fp, r4
 800ac70:	4614      	mov	r4, r2
 800ac72:	d8e8      	bhi.n	800ac46 <rcutils_repl_str+0xda>
 800ac74:	f8dd 9000 	ldr.w	r9, [sp]
 800ac78:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	9a05      	ldr	r2, [sp, #20]
 800ac80:	f80a 3002 	strb.w	r3, [sl, r2]
 800ac84:	e00b      	b.n	800ac9e <rcutils_repl_str+0x132>
 800ac86:	4620      	mov	r0, r4
 800ac88:	f8d9 3000 	ldr.w	r3, [r9]
 800ac8c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800ac90:	3001      	adds	r0, #1
 800ac92:	4798      	blx	r3
 800ac94:	4682      	mov	sl, r0
 800ac96:	b110      	cbz	r0, 800ac9e <rcutils_repl_str+0x132>
 800ac98:	9900      	ldr	r1, [sp, #0]
 800ac9a:	f009 fea2 	bl	80149e2 <strcpy>
 800ac9e:	4638      	mov	r0, r7
 800aca0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800aca4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800aca8:	4798      	blx	r3
 800acaa:	4650      	mov	r0, sl
 800acac:	b007      	add	sp, #28
 800acae:	ecbd 8b02 	vpop	{d8}
 800acb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acb6:	9b02      	ldr	r3, [sp, #8]
 800acb8:	4640      	mov	r0, r8
 800acba:	f8dd 9000 	ldr.w	r9, [sp]
 800acbe:	1a9a      	subs	r2, r3, r2
 800acc0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 800acc4:	f009 fe95 	bl	80149f2 <memcpy>
 800acc8:	e7d8      	b.n	800ac7c <rcutils_repl_str+0x110>
 800acca:	f04f 0a00 	mov.w	sl, #0
 800acce:	e7e6      	b.n	800ac9e <rcutils_repl_str+0x132>

0800acd0 <rcutils_snprintf>:
 800acd0:	b40c      	push	{r2, r3}
 800acd2:	b530      	push	{r4, r5, lr}
 800acd4:	b083      	sub	sp, #12
 800acd6:	ab06      	add	r3, sp, #24
 800acd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800acdc:	9301      	str	r3, [sp, #4]
 800acde:	b1e2      	cbz	r2, 800ad1a <rcutils_snprintf+0x4a>
 800ace0:	fab0 f480 	clz	r4, r0
 800ace4:	fab1 f581 	clz	r5, r1
 800ace8:	ea50 0c01 	orrs.w	ip, r0, r1
 800acec:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800acf0:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800acf4:	d008      	beq.n	800ad08 <rcutils_snprintf+0x38>
 800acf6:	b984      	cbnz	r4, 800ad1a <rcutils_snprintf+0x4a>
 800acf8:	b97d      	cbnz	r5, 800ad1a <rcutils_snprintf+0x4a>
 800acfa:	f009 fc8d 	bl	8014618 <vsniprintf>
 800acfe:	b003      	add	sp, #12
 800ad00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad04:	b002      	add	sp, #8
 800ad06:	4770      	bx	lr
 800ad08:	4661      	mov	r1, ip
 800ad0a:	4660      	mov	r0, ip
 800ad0c:	f009 fc84 	bl	8014618 <vsniprintf>
 800ad10:	b003      	add	sp, #12
 800ad12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad16:	b002      	add	sp, #8
 800ad18:	4770      	bx	lr
 800ad1a:	f009 fe35 	bl	8014988 <__errno>
 800ad1e:	2216      	movs	r2, #22
 800ad20:	4603      	mov	r3, r0
 800ad22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad26:	601a      	str	r2, [r3, #0]
 800ad28:	e7e9      	b.n	800acfe <rcutils_snprintf+0x2e>
 800ad2a:	bf00      	nop

0800ad2c <rcutils_vsnprintf>:
 800ad2c:	b570      	push	{r4, r5, r6, lr}
 800ad2e:	b1b2      	cbz	r2, 800ad5e <rcutils_vsnprintf+0x32>
 800ad30:	fab0 f480 	clz	r4, r0
 800ad34:	fab1 f581 	clz	r5, r1
 800ad38:	ea50 0c01 	orrs.w	ip, r0, r1
 800ad3c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800ad40:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800ad44:	d005      	beq.n	800ad52 <rcutils_vsnprintf+0x26>
 800ad46:	b954      	cbnz	r4, 800ad5e <rcutils_vsnprintf+0x32>
 800ad48:	b94d      	cbnz	r5, 800ad5e <rcutils_vsnprintf+0x32>
 800ad4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad4e:	f009 bc63 	b.w	8014618 <vsniprintf>
 800ad52:	4661      	mov	r1, ip
 800ad54:	4660      	mov	r0, ip
 800ad56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad5a:	f009 bc5d 	b.w	8014618 <vsniprintf>
 800ad5e:	f009 fe13 	bl	8014988 <__errno>
 800ad62:	2316      	movs	r3, #22
 800ad64:	6003      	str	r3, [r0, #0]
 800ad66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad6a:	bd70      	pop	{r4, r5, r6, pc}

0800ad6c <rcutils_strdup>:
 800ad6c:	b084      	sub	sp, #16
 800ad6e:	b570      	push	{r4, r5, r6, lr}
 800ad70:	b082      	sub	sp, #8
 800ad72:	4605      	mov	r5, r0
 800ad74:	ac07      	add	r4, sp, #28
 800ad76:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800ad7a:	b1b0      	cbz	r0, 800adaa <rcutils_strdup+0x3e>
 800ad7c:	f7f5 fa6a 	bl	8000254 <strlen>
 800ad80:	1c42      	adds	r2, r0, #1
 800ad82:	9b07      	ldr	r3, [sp, #28]
 800ad84:	4606      	mov	r6, r0
 800ad86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad88:	4610      	mov	r0, r2
 800ad8a:	9201      	str	r2, [sp, #4]
 800ad8c:	4798      	blx	r3
 800ad8e:	4604      	mov	r4, r0
 800ad90:	b128      	cbz	r0, 800ad9e <rcutils_strdup+0x32>
 800ad92:	9a01      	ldr	r2, [sp, #4]
 800ad94:	4629      	mov	r1, r5
 800ad96:	f009 fe2c 	bl	80149f2 <memcpy>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	55a3      	strb	r3, [r4, r6]
 800ad9e:	4620      	mov	r0, r4
 800ada0:	b002      	add	sp, #8
 800ada2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ada6:	b004      	add	sp, #16
 800ada8:	4770      	bx	lr
 800adaa:	4604      	mov	r4, r0
 800adac:	e7f7      	b.n	800ad9e <rcutils_strdup+0x32>
 800adae:	bf00      	nop

0800adb0 <rcutils_strndup>:
 800adb0:	b082      	sub	sp, #8
 800adb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb4:	ac06      	add	r4, sp, #24
 800adb6:	4605      	mov	r5, r0
 800adb8:	e884 000c 	stmia.w	r4, {r2, r3}
 800adbc:	b188      	cbz	r0, 800ade2 <rcutils_strndup+0x32>
 800adbe:	1c4f      	adds	r7, r1, #1
 800adc0:	460e      	mov	r6, r1
 800adc2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800adc4:	4638      	mov	r0, r7
 800adc6:	4790      	blx	r2
 800adc8:	4604      	mov	r4, r0
 800adca:	b128      	cbz	r0, 800add8 <rcutils_strndup+0x28>
 800adcc:	463a      	mov	r2, r7
 800adce:	4629      	mov	r1, r5
 800add0:	f009 fe0f 	bl	80149f2 <memcpy>
 800add4:	2300      	movs	r3, #0
 800add6:	55a3      	strb	r3, [r4, r6]
 800add8:	4620      	mov	r0, r4
 800adda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800adde:	b002      	add	sp, #8
 800ade0:	4770      	bx	lr
 800ade2:	4604      	mov	r4, r0
 800ade4:	e7f8      	b.n	800add8 <rcutils_strndup+0x28>
 800ade6:	bf00      	nop

0800ade8 <rcutils_system_time_now>:
 800ade8:	b300      	cbz	r0, 800ae2c <rcutils_system_time_now+0x44>
 800adea:	b570      	push	{r4, r5, r6, lr}
 800adec:	b084      	sub	sp, #16
 800adee:	4604      	mov	r4, r0
 800adf0:	2001      	movs	r0, #1
 800adf2:	4669      	mov	r1, sp
 800adf4:	f7f6 fc2c 	bl	8001650 <clock_gettime>
 800adf8:	e9dd 3100 	ldrd	r3, r1, [sp]
 800adfc:	2900      	cmp	r1, #0
 800adfe:	db12      	blt.n	800ae26 <rcutils_system_time_now+0x3e>
 800ae00:	ea53 0201 	orrs.w	r2, r3, r1
 800ae04:	9d02      	ldr	r5, [sp, #8]
 800ae06:	d101      	bne.n	800ae0c <rcutils_system_time_now+0x24>
 800ae08:	2d00      	cmp	r5, #0
 800ae0a:	db0c      	blt.n	800ae26 <rcutils_system_time_now+0x3e>
 800ae0c:	4e08      	ldr	r6, [pc, #32]	; (800ae30 <rcutils_system_time_now+0x48>)
 800ae0e:	2000      	movs	r0, #0
 800ae10:	fba3 3206 	umull	r3, r2, r3, r6
 800ae14:	195b      	adds	r3, r3, r5
 800ae16:	fb06 2201 	mla	r2, r6, r1, r2
 800ae1a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800ae1e:	e9c4 3200 	strd	r3, r2, [r4]
 800ae22:	b004      	add	sp, #16
 800ae24:	bd70      	pop	{r4, r5, r6, pc}
 800ae26:	2002      	movs	r0, #2
 800ae28:	b004      	add	sp, #16
 800ae2a:	bd70      	pop	{r4, r5, r6, pc}
 800ae2c:	200b      	movs	r0, #11
 800ae2e:	4770      	bx	lr
 800ae30:	3b9aca00 	.word	0x3b9aca00

0800ae34 <rcutils_steady_time_now>:
 800ae34:	b300      	cbz	r0, 800ae78 <rcutils_steady_time_now+0x44>
 800ae36:	b570      	push	{r4, r5, r6, lr}
 800ae38:	b084      	sub	sp, #16
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	4669      	mov	r1, sp
 800ae40:	f7f6 fc06 	bl	8001650 <clock_gettime>
 800ae44:	e9dd 3100 	ldrd	r3, r1, [sp]
 800ae48:	2900      	cmp	r1, #0
 800ae4a:	db12      	blt.n	800ae72 <rcutils_steady_time_now+0x3e>
 800ae4c:	ea53 0201 	orrs.w	r2, r3, r1
 800ae50:	9d02      	ldr	r5, [sp, #8]
 800ae52:	d101      	bne.n	800ae58 <rcutils_steady_time_now+0x24>
 800ae54:	2d00      	cmp	r5, #0
 800ae56:	db0c      	blt.n	800ae72 <rcutils_steady_time_now+0x3e>
 800ae58:	4e08      	ldr	r6, [pc, #32]	; (800ae7c <rcutils_steady_time_now+0x48>)
 800ae5a:	2000      	movs	r0, #0
 800ae5c:	fba3 3206 	umull	r3, r2, r3, r6
 800ae60:	195b      	adds	r3, r3, r5
 800ae62:	fb06 2201 	mla	r2, r6, r1, r2
 800ae66:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800ae6a:	e9c4 3200 	strd	r3, r2, [r4]
 800ae6e:	b004      	add	sp, #16
 800ae70:	bd70      	pop	{r4, r5, r6, pc}
 800ae72:	2002      	movs	r0, #2
 800ae74:	b004      	add	sp, #16
 800ae76:	bd70      	pop	{r4, r5, r6, pc}
 800ae78:	200b      	movs	r0, #11
 800ae7a:	4770      	bx	lr
 800ae7c:	3b9aca00 	.word	0x3b9aca00

0800ae80 <rmw_get_zero_initialized_init_options>:
 800ae80:	b510      	push	{r4, lr}
 800ae82:	4604      	mov	r4, r0
 800ae84:	2238      	movs	r2, #56	; 0x38
 800ae86:	2100      	movs	r1, #0
 800ae88:	f009 fc94 	bl	80147b4 <memset>
 800ae8c:	f104 0010 	add.w	r0, r4, #16
 800ae90:	f000 f806 	bl	800aea0 <rmw_get_default_security_options>
 800ae94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae98:	4620      	mov	r0, r4
 800ae9a:	60e3      	str	r3, [r4, #12]
 800ae9c:	bd10      	pop	{r4, pc}
 800ae9e:	bf00      	nop

0800aea0 <rmw_get_default_security_options>:
 800aea0:	2200      	movs	r2, #0
 800aea2:	7002      	strb	r2, [r0, #0]
 800aea4:	6042      	str	r2, [r0, #4]
 800aea6:	4770      	bx	lr

0800aea8 <rmw_validate_namespace_with_size>:
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	d043      	beq.n	800af34 <rmw_validate_namespace_with_size+0x8c>
 800aeac:	b570      	push	{r4, r5, r6, lr}
 800aeae:	4614      	mov	r4, r2
 800aeb0:	b0c2      	sub	sp, #264	; 0x108
 800aeb2:	b32a      	cbz	r2, 800af00 <rmw_validate_namespace_with_size+0x58>
 800aeb4:	2901      	cmp	r1, #1
 800aeb6:	460d      	mov	r5, r1
 800aeb8:	461e      	mov	r6, r3
 800aeba:	d102      	bne.n	800aec2 <rmw_validate_namespace_with_size+0x1a>
 800aebc:	7803      	ldrb	r3, [r0, #0]
 800aebe:	2b2f      	cmp	r3, #47	; 0x2f
 800aec0:	d012      	beq.n	800aee8 <rmw_validate_namespace_with_size+0x40>
 800aec2:	aa01      	add	r2, sp, #4
 800aec4:	4669      	mov	r1, sp
 800aec6:	f007 f977 	bl	80121b8 <rmw_validate_full_topic_name>
 800aeca:	b980      	cbnz	r0, 800aeee <rmw_validate_namespace_with_size+0x46>
 800aecc:	9a00      	ldr	r2, [sp, #0]
 800aece:	b14a      	cbz	r2, 800aee4 <rmw_validate_namespace_with_size+0x3c>
 800aed0:	2a07      	cmp	r2, #7
 800aed2:	d007      	beq.n	800aee4 <rmw_validate_namespace_with_size+0x3c>
 800aed4:	1e53      	subs	r3, r2, #1
 800aed6:	2b05      	cmp	r3, #5
 800aed8:	d82e      	bhi.n	800af38 <rmw_validate_namespace_with_size+0x90>
 800aeda:	e8df f003 	tbb	[pc, r3]
 800aede:	1f1c      	.short	0x1f1c
 800aee0:	14282522 	.word	0x14282522
 800aee4:	2df5      	cmp	r5, #245	; 0xf5
 800aee6:	d804      	bhi.n	800aef2 <rmw_validate_namespace_with_size+0x4a>
 800aee8:	2300      	movs	r3, #0
 800aeea:	4618      	mov	r0, r3
 800aeec:	6023      	str	r3, [r4, #0]
 800aeee:	b042      	add	sp, #264	; 0x108
 800aef0:	bd70      	pop	{r4, r5, r6, pc}
 800aef2:	2307      	movs	r3, #7
 800aef4:	6023      	str	r3, [r4, #0]
 800aef6:	2e00      	cmp	r6, #0
 800aef8:	d0f9      	beq.n	800aeee <rmw_validate_namespace_with_size+0x46>
 800aefa:	23f4      	movs	r3, #244	; 0xf4
 800aefc:	6033      	str	r3, [r6, #0]
 800aefe:	e7f6      	b.n	800aeee <rmw_validate_namespace_with_size+0x46>
 800af00:	200b      	movs	r0, #11
 800af02:	b042      	add	sp, #264	; 0x108
 800af04:	bd70      	pop	{r4, r5, r6, pc}
 800af06:	2306      	movs	r3, #6
 800af08:	6023      	str	r3, [r4, #0]
 800af0a:	2e00      	cmp	r6, #0
 800af0c:	d0ef      	beq.n	800aeee <rmw_validate_namespace_with_size+0x46>
 800af0e:	9b01      	ldr	r3, [sp, #4]
 800af10:	6033      	str	r3, [r6, #0]
 800af12:	b042      	add	sp, #264	; 0x108
 800af14:	bd70      	pop	{r4, r5, r6, pc}
 800af16:	2301      	movs	r3, #1
 800af18:	6023      	str	r3, [r4, #0]
 800af1a:	e7f6      	b.n	800af0a <rmw_validate_namespace_with_size+0x62>
 800af1c:	2302      	movs	r3, #2
 800af1e:	6023      	str	r3, [r4, #0]
 800af20:	e7f3      	b.n	800af0a <rmw_validate_namespace_with_size+0x62>
 800af22:	2303      	movs	r3, #3
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	e7f0      	b.n	800af0a <rmw_validate_namespace_with_size+0x62>
 800af28:	2304      	movs	r3, #4
 800af2a:	6023      	str	r3, [r4, #0]
 800af2c:	e7ed      	b.n	800af0a <rmw_validate_namespace_with_size+0x62>
 800af2e:	2305      	movs	r3, #5
 800af30:	6023      	str	r3, [r4, #0]
 800af32:	e7ea      	b.n	800af0a <rmw_validate_namespace_with_size+0x62>
 800af34:	200b      	movs	r0, #11
 800af36:	4770      	bx	lr
 800af38:	4613      	mov	r3, r2
 800af3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800af3e:	4a03      	ldr	r2, [pc, #12]	; (800af4c <rmw_validate_namespace_with_size+0xa4>)
 800af40:	a802      	add	r0, sp, #8
 800af42:	f7ff fec5 	bl	800acd0 <rcutils_snprintf>
 800af46:	2001      	movs	r0, #1
 800af48:	e7d1      	b.n	800aeee <rmw_validate_namespace_with_size+0x46>
 800af4a:	bf00      	nop
 800af4c:	08015d64 	.word	0x08015d64

0800af50 <rmw_validate_namespace>:
 800af50:	b168      	cbz	r0, 800af6e <rmw_validate_namespace+0x1e>
 800af52:	b570      	push	{r4, r5, r6, lr}
 800af54:	460d      	mov	r5, r1
 800af56:	4616      	mov	r6, r2
 800af58:	4604      	mov	r4, r0
 800af5a:	f7f5 f97b 	bl	8000254 <strlen>
 800af5e:	4633      	mov	r3, r6
 800af60:	4601      	mov	r1, r0
 800af62:	462a      	mov	r2, r5
 800af64:	4620      	mov	r0, r4
 800af66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af6a:	f7ff bf9d 	b.w	800aea8 <rmw_validate_namespace_with_size>
 800af6e:	200b      	movs	r0, #11
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop

0800af74 <rmw_namespace_validation_result_string>:
 800af74:	2807      	cmp	r0, #7
 800af76:	d803      	bhi.n	800af80 <rmw_namespace_validation_result_string+0xc>
 800af78:	4b02      	ldr	r3, [pc, #8]	; (800af84 <rmw_namespace_validation_result_string+0x10>)
 800af7a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800af7e:	4770      	bx	lr
 800af80:	4801      	ldr	r0, [pc, #4]	; (800af88 <rmw_namespace_validation_result_string+0x14>)
 800af82:	4770      	bx	lr
 800af84:	08015f5c 	.word	0x08015f5c
 800af88:	08015db4 	.word	0x08015db4

0800af8c <rmw_validate_node_name>:
 800af8c:	2800      	cmp	r0, #0
 800af8e:	d042      	beq.n	800b016 <rmw_validate_node_name+0x8a>
 800af90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af94:	460d      	mov	r5, r1
 800af96:	2900      	cmp	r1, #0
 800af98:	d03f      	beq.n	800b01a <rmw_validate_node_name+0x8e>
 800af9a:	4604      	mov	r4, r0
 800af9c:	4616      	mov	r6, r2
 800af9e:	f7f5 f959 	bl	8000254 <strlen>
 800afa2:	b310      	cbz	r0, 800afea <rmw_validate_node_name+0x5e>
 800afa4:	1e63      	subs	r3, r4, #1
 800afa6:	f1c4 0101 	rsb	r1, r4, #1
 800afaa:	eb03 0800 	add.w	r8, r3, r0
 800afae:	18cf      	adds	r7, r1, r3
 800afb0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800afb4:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 800afb8:	f02e 0c20 	bic.w	ip, lr, #32
 800afbc:	2a09      	cmp	r2, #9
 800afbe:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 800afc2:	d905      	bls.n	800afd0 <rmw_validate_node_name+0x44>
 800afc4:	f1bc 0f19 	cmp.w	ip, #25
 800afc8:	d902      	bls.n	800afd0 <rmw_validate_node_name+0x44>
 800afca:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800afce:	d114      	bne.n	800affa <rmw_validate_node_name+0x6e>
 800afd0:	4598      	cmp	r8, r3
 800afd2:	d1ec      	bne.n	800afae <rmw_validate_node_name+0x22>
 800afd4:	7822      	ldrb	r2, [r4, #0]
 800afd6:	4b16      	ldr	r3, [pc, #88]	; (800b030 <rmw_validate_node_name+0xa4>)
 800afd8:	5cd3      	ldrb	r3, [r2, r3]
 800afda:	f013 0304 	ands.w	r3, r3, #4
 800afde:	d113      	bne.n	800b008 <rmw_validate_node_name+0x7c>
 800afe0:	28ff      	cmp	r0, #255	; 0xff
 800afe2:	d81c      	bhi.n	800b01e <rmw_validate_node_name+0x92>
 800afe4:	4618      	mov	r0, r3
 800afe6:	602b      	str	r3, [r5, #0]
 800afe8:	e00c      	b.n	800b004 <rmw_validate_node_name+0x78>
 800afea:	2301      	movs	r3, #1
 800afec:	602b      	str	r3, [r5, #0]
 800afee:	b17e      	cbz	r6, 800b010 <rmw_validate_node_name+0x84>
 800aff0:	2300      	movs	r3, #0
 800aff2:	4618      	mov	r0, r3
 800aff4:	6033      	str	r3, [r6, #0]
 800aff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800affa:	2302      	movs	r3, #2
 800affc:	602b      	str	r3, [r5, #0]
 800affe:	b13e      	cbz	r6, 800b010 <rmw_validate_node_name+0x84>
 800b000:	2000      	movs	r0, #0
 800b002:	6037      	str	r7, [r6, #0]
 800b004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b008:	2303      	movs	r3, #3
 800b00a:	602b      	str	r3, [r5, #0]
 800b00c:	2e00      	cmp	r6, #0
 800b00e:	d1ef      	bne.n	800aff0 <rmw_validate_node_name+0x64>
 800b010:	2000      	movs	r0, #0
 800b012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b016:	200b      	movs	r0, #11
 800b018:	4770      	bx	lr
 800b01a:	200b      	movs	r0, #11
 800b01c:	e7f2      	b.n	800b004 <rmw_validate_node_name+0x78>
 800b01e:	2204      	movs	r2, #4
 800b020:	602a      	str	r2, [r5, #0]
 800b022:	2e00      	cmp	r6, #0
 800b024:	d0f4      	beq.n	800b010 <rmw_validate_node_name+0x84>
 800b026:	22fe      	movs	r2, #254	; 0xfe
 800b028:	4618      	mov	r0, r3
 800b02a:	6032      	str	r2, [r6, #0]
 800b02c:	e7ea      	b.n	800b004 <rmw_validate_node_name+0x78>
 800b02e:	bf00      	nop
 800b030:	08016570 	.word	0x08016570

0800b034 <rmw_node_name_validation_result_string>:
 800b034:	2804      	cmp	r0, #4
 800b036:	d803      	bhi.n	800b040 <rmw_node_name_validation_result_string+0xc>
 800b038:	4b02      	ldr	r3, [pc, #8]	; (800b044 <rmw_node_name_validation_result_string+0x10>)
 800b03a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b03e:	4770      	bx	lr
 800b040:	4801      	ldr	r0, [pc, #4]	; (800b048 <rmw_node_name_validation_result_string+0x14>)
 800b042:	4770      	bx	lr
 800b044:	08016068 	.word	0x08016068
 800b048:	08015f7c 	.word	0x08015f7c

0800b04c <rmw_uros_set_custom_transport>:
 800b04c:	b470      	push	{r4, r5, r6}
 800b04e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800b052:	b162      	cbz	r2, 800b06e <rmw_uros_set_custom_transport+0x22>
 800b054:	b15b      	cbz	r3, 800b06e <rmw_uros_set_custom_transport+0x22>
 800b056:	b155      	cbz	r5, 800b06e <rmw_uros_set_custom_transport+0x22>
 800b058:	b14e      	cbz	r6, 800b06e <rmw_uros_set_custom_transport+0x22>
 800b05a:	4c06      	ldr	r4, [pc, #24]	; (800b074 <rmw_uros_set_custom_transport+0x28>)
 800b05c:	7020      	strb	r0, [r4, #0]
 800b05e:	2000      	movs	r0, #0
 800b060:	6166      	str	r6, [r4, #20]
 800b062:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b066:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b06a:	bc70      	pop	{r4, r5, r6}
 800b06c:	4770      	bx	lr
 800b06e:	200b      	movs	r0, #11
 800b070:	bc70      	pop	{r4, r5, r6}
 800b072:	4770      	bx	lr
 800b074:	2000c344 	.word	0x2000c344

0800b078 <rmw_init_options_init>:
 800b078:	b084      	sub	sp, #16
 800b07a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b07c:	b083      	sub	sp, #12
 800b07e:	ad09      	add	r5, sp, #36	; 0x24
 800b080:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800b084:	b130      	cbz	r0, 800b094 <rmw_init_options_init+0x1c>
 800b086:	4604      	mov	r4, r0
 800b088:	4628      	mov	r0, r5
 800b08a:	f7ff fcdb 	bl	800aa44 <rcutils_allocator_is_valid>
 800b08e:	b108      	cbz	r0, 800b094 <rmw_init_options_init+0x1c>
 800b090:	68a6      	ldr	r6, [r4, #8]
 800b092:	b12e      	cbz	r6, 800b0a0 <rmw_init_options_init+0x28>
 800b094:	200b      	movs	r0, #11
 800b096:	b003      	add	sp, #12
 800b098:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b09c:	b004      	add	sp, #16
 800b09e:	4770      	bx	lr
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	f104 0c20 	add.w	ip, r4, #32
 800b0a8:	f8df e098 	ldr.w	lr, [pc, #152]	; 800b144 <rmw_init_options_init+0xcc>
 800b0ac:	466f      	mov	r7, sp
 800b0ae:	e9c4 2300 	strd	r2, r3, [r4]
 800b0b2:	4b20      	ldr	r3, [pc, #128]	; (800b134 <rmw_init_options_init+0xbc>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	60a3      	str	r3, [r4, #8]
 800b0b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b0be:	682b      	ldr	r3, [r5, #0]
 800b0c0:	4638      	mov	r0, r7
 800b0c2:	f8cc 3000 	str.w	r3, [ip]
 800b0c6:	f8c4 e01c 	str.w	lr, [r4, #28]
 800b0ca:	60e6      	str	r6, [r4, #12]
 800b0cc:	f7ff fee8 	bl	800aea0 <rmw_get_default_security_options>
 800b0d0:	f104 0310 	add.w	r3, r4, #16
 800b0d4:	2203      	movs	r2, #3
 800b0d6:	e897 0003 	ldmia.w	r7, {r0, r1}
 800b0da:	e883 0003 	stmia.w	r3, {r0, r1}
 800b0de:	4816      	ldr	r0, [pc, #88]	; (800b138 <rmw_init_options_init+0xc0>)
 800b0e0:	4916      	ldr	r1, [pc, #88]	; (800b13c <rmw_init_options_init+0xc4>)
 800b0e2:	7626      	strb	r6, [r4, #24]
 800b0e4:	f000 ffa8 	bl	800c038 <rmw_uxrce_init_init_options_impl_memory>
 800b0e8:	4813      	ldr	r0, [pc, #76]	; (800b138 <rmw_init_options_init+0xc0>)
 800b0ea:	f007 f9c9 	bl	8012480 <get_memory>
 800b0ee:	b1f0      	cbz	r0, 800b12e <rmw_init_options_init+0xb6>
 800b0f0:	4a13      	ldr	r2, [pc, #76]	; (800b140 <rmw_init_options_init+0xc8>)
 800b0f2:	6883      	ldr	r3, [r0, #8]
 800b0f4:	6851      	ldr	r1, [r2, #4]
 800b0f6:	6363      	str	r3, [r4, #52]	; 0x34
 800b0f8:	7810      	ldrb	r0, [r2, #0]
 800b0fa:	6159      	str	r1, [r3, #20]
 800b0fc:	68d1      	ldr	r1, [r2, #12]
 800b0fe:	7418      	strb	r0, [r3, #16]
 800b100:	61d9      	str	r1, [r3, #28]
 800b102:	6911      	ldr	r1, [r2, #16]
 800b104:	6219      	str	r1, [r3, #32]
 800b106:	6951      	ldr	r1, [r2, #20]
 800b108:	6892      	ldr	r2, [r2, #8]
 800b10a:	6259      	str	r1, [r3, #36]	; 0x24
 800b10c:	619a      	str	r2, [r3, #24]
 800b10e:	f003 fc59 	bl	800e9c4 <uxr_nanos>
 800b112:	f008 fee1 	bl	8013ed8 <srand>
 800b116:	f008 ff0d 	bl	8013f34 <rand>
 800b11a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b11c:	6298      	str	r0, [r3, #40]	; 0x28
 800b11e:	2800      	cmp	r0, #0
 800b120:	d0f9      	beq.n	800b116 <rmw_init_options_init+0x9e>
 800b122:	2000      	movs	r0, #0
 800b124:	b003      	add	sp, #12
 800b126:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b12a:	b004      	add	sp, #16
 800b12c:	4770      	bx	lr
 800b12e:	2001      	movs	r0, #1
 800b130:	e7b1      	b.n	800b096 <rmw_init_options_init+0x1e>
 800b132:	bf00      	nop
 800b134:	080164c8 	.word	0x080164c8
 800b138:	20010d9c 	.word	0x20010d9c
 800b13c:	2000c638 	.word	0x2000c638
 800b140:	2000c344 	.word	0x2000c344
 800b144:	08015bc8 	.word	0x08015bc8

0800b148 <rmw_init_options_copy>:
 800b148:	2800      	cmp	r0, #0
 800b14a:	d047      	beq.n	800b1dc <rmw_init_options_copy+0x94>
 800b14c:	b570      	push	{r4, r5, r6, lr}
 800b14e:	460d      	mov	r5, r1
 800b150:	b149      	cbz	r1, 800b166 <rmw_init_options_copy+0x1e>
 800b152:	4604      	mov	r4, r0
 800b154:	6880      	ldr	r0, [r0, #8]
 800b156:	b120      	cbz	r0, 800b162 <rmw_init_options_copy+0x1a>
 800b158:	4b22      	ldr	r3, [pc, #136]	; (800b1e4 <rmw_init_options_copy+0x9c>)
 800b15a:	6819      	ldr	r1, [r3, #0]
 800b15c:	f7f5 f870 	bl	8000240 <strcmp>
 800b160:	bba8      	cbnz	r0, 800b1ce <rmw_init_options_copy+0x86>
 800b162:	68ab      	ldr	r3, [r5, #8]
 800b164:	b11b      	cbz	r3, 800b16e <rmw_init_options_copy+0x26>
 800b166:	f04f 0c0b 	mov.w	ip, #11
 800b16a:	4660      	mov	r0, ip
 800b16c:	bd70      	pop	{r4, r5, r6, pc}
 800b16e:	4623      	mov	r3, r4
 800b170:	462a      	mov	r2, r5
 800b172:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b176:	f8d3 e000 	ldr.w	lr, [r3]
 800b17a:	3310      	adds	r3, #16
 800b17c:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 800b180:	3210      	adds	r2, #16
 800b182:	f853 0c08 	ldr.w	r0, [r3, #-8]
 800b186:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800b18a:	42b3      	cmp	r3, r6
 800b18c:	f842 ec10 	str.w	lr, [r2, #-16]
 800b190:	f842 cc0c 	str.w	ip, [r2, #-12]
 800b194:	f842 0c08 	str.w	r0, [r2, #-8]
 800b198:	f842 1c04 	str.w	r1, [r2, #-4]
 800b19c:	d1eb      	bne.n	800b176 <rmw_init_options_copy+0x2e>
 800b19e:	6819      	ldr	r1, [r3, #0]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	4811      	ldr	r0, [pc, #68]	; (800b1e8 <rmw_init_options_copy+0xa0>)
 800b1a4:	6011      	str	r1, [r2, #0]
 800b1a6:	6053      	str	r3, [r2, #4]
 800b1a8:	f007 f96a 	bl	8012480 <get_memory>
 800b1ac:	b198      	cbz	r0, 800b1d6 <rmw_init_options_copy+0x8e>
 800b1ae:	6883      	ldr	r3, [r0, #8]
 800b1b0:	f04f 0c00 	mov.w	ip, #0
 800b1b4:	636b      	str	r3, [r5, #52]	; 0x34
 800b1b6:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800b1b8:	f103 0410 	add.w	r4, r3, #16
 800b1bc:	3510      	adds	r5, #16
 800b1be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b1c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b1c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b1c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b1ca:	4660      	mov	r0, ip
 800b1cc:	bd70      	pop	{r4, r5, r6, pc}
 800b1ce:	f04f 0c0c 	mov.w	ip, #12
 800b1d2:	4660      	mov	r0, ip
 800b1d4:	bd70      	pop	{r4, r5, r6, pc}
 800b1d6:	f04f 0c01 	mov.w	ip, #1
 800b1da:	e7c6      	b.n	800b16a <rmw_init_options_copy+0x22>
 800b1dc:	f04f 0c0b 	mov.w	ip, #11
 800b1e0:	4660      	mov	r0, ip
 800b1e2:	4770      	bx	lr
 800b1e4:	080164c8 	.word	0x080164c8
 800b1e8:	20010d9c 	.word	0x20010d9c

0800b1ec <rmw_init_options_fini>:
 800b1ec:	b510      	push	{r4, lr}
 800b1ee:	b08e      	sub	sp, #56	; 0x38
 800b1f0:	b388      	cbz	r0, 800b256 <rmw_init_options_fini+0x6a>
 800b1f2:	4604      	mov	r4, r0
 800b1f4:	3020      	adds	r0, #32
 800b1f6:	f7ff fc25 	bl	800aa44 <rcutils_allocator_is_valid>
 800b1fa:	b360      	cbz	r0, 800b256 <rmw_init_options_fini+0x6a>
 800b1fc:	68a0      	ldr	r0, [r4, #8]
 800b1fe:	b120      	cbz	r0, 800b20a <rmw_init_options_fini+0x1e>
 800b200:	4b1a      	ldr	r3, [pc, #104]	; (800b26c <rmw_init_options_fini+0x80>)
 800b202:	6819      	ldr	r1, [r3, #0]
 800b204:	f7f5 f81c 	bl	8000240 <strcmp>
 800b208:	bb68      	cbnz	r0, 800b266 <rmw_init_options_fini+0x7a>
 800b20a:	4b19      	ldr	r3, [pc, #100]	; (800b270 <rmw_init_options_fini+0x84>)
 800b20c:	6819      	ldr	r1, [r3, #0]
 800b20e:	b331      	cbz	r1, 800b25e <rmw_init_options_fini+0x72>
 800b210:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b212:	e001      	b.n	800b218 <rmw_init_options_fini+0x2c>
 800b214:	6849      	ldr	r1, [r1, #4]
 800b216:	b311      	cbz	r1, 800b25e <rmw_init_options_fini+0x72>
 800b218:	688b      	ldr	r3, [r1, #8]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d1fa      	bne.n	800b214 <rmw_init_options_fini+0x28>
 800b21e:	4814      	ldr	r0, [pc, #80]	; (800b270 <rmw_init_options_fini+0x84>)
 800b220:	f007 f93e 	bl	80124a0 <put_memory>
 800b224:	4668      	mov	r0, sp
 800b226:	f7ff fe2b 	bl	800ae80 <rmw_get_zero_initialized_init_options>
 800b22a:	46ee      	mov	lr, sp
 800b22c:	46a4      	mov	ip, r4
 800b22e:	2400      	movs	r4, #0
 800b230:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b234:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b238:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b23c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b240:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b244:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b248:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800b24c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b250:	4620      	mov	r0, r4
 800b252:	b00e      	add	sp, #56	; 0x38
 800b254:	bd10      	pop	{r4, pc}
 800b256:	240b      	movs	r4, #11
 800b258:	4620      	mov	r0, r4
 800b25a:	b00e      	add	sp, #56	; 0x38
 800b25c:	bd10      	pop	{r4, pc}
 800b25e:	2401      	movs	r4, #1
 800b260:	4620      	mov	r0, r4
 800b262:	b00e      	add	sp, #56	; 0x38
 800b264:	bd10      	pop	{r4, pc}
 800b266:	240c      	movs	r4, #12
 800b268:	e7f2      	b.n	800b250 <rmw_init_options_fini+0x64>
 800b26a:	bf00      	nop
 800b26c:	080164c8 	.word	0x080164c8
 800b270:	20010d9c 	.word	0x20010d9c

0800b274 <rmw_init>:
 800b274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b278:	b083      	sub	sp, #12
 800b27a:	2800      	cmp	r0, #0
 800b27c:	f000 80d3 	beq.w	800b426 <rmw_init+0x1b2>
 800b280:	460e      	mov	r6, r1
 800b282:	2900      	cmp	r1, #0
 800b284:	f000 80cf 	beq.w	800b426 <rmw_init+0x1b2>
 800b288:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b28a:	4605      	mov	r5, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f000 80ca 	beq.w	800b426 <rmw_init+0x1b2>
 800b292:	4b78      	ldr	r3, [pc, #480]	; (800b474 <rmw_init+0x200>)
 800b294:	6880      	ldr	r0, [r0, #8]
 800b296:	681f      	ldr	r7, [r3, #0]
 800b298:	b128      	cbz	r0, 800b2a6 <rmw_init+0x32>
 800b29a:	4639      	mov	r1, r7
 800b29c:	f7f4 ffd0 	bl	8000240 <strcmp>
 800b2a0:	2800      	cmp	r0, #0
 800b2a2:	f040 80ca 	bne.w	800b43a <rmw_init+0x1c6>
 800b2a6:	4c74      	ldr	r4, [pc, #464]	; (800b478 <rmw_init+0x204>)
 800b2a8:	f04f 0800 	mov.w	r8, #0
 800b2ac:	4973      	ldr	r1, [pc, #460]	; (800b47c <rmw_init+0x208>)
 800b2ae:	4874      	ldr	r0, [pc, #464]	; (800b480 <rmw_init+0x20c>)
 800b2b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b2b4:	60b7      	str	r7, [r6, #8]
 800b2b6:	e9c6 2300 	strd	r2, r3, [r6]
 800b2ba:	68eb      	ldr	r3, [r5, #12]
 800b2bc:	2201      	movs	r2, #1
 800b2be:	64b3      	str	r3, [r6, #72]	; 0x48
 800b2c0:	f000 fe5a 	bl	800bf78 <rmw_uxrce_init_session_memory>
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	2204      	movs	r2, #4
 800b2c8:	496e      	ldr	r1, [pc, #440]	; (800b484 <rmw_init+0x210>)
 800b2ca:	f000 fe95 	bl	800bff8 <rmw_uxrce_init_static_input_buffer_memory>
 800b2ce:	486c      	ldr	r0, [pc, #432]	; (800b480 <rmw_init+0x20c>)
 800b2d0:	f884 800d 	strb.w	r8, [r4, #13]
 800b2d4:	f007 f8d4 	bl	8012480 <get_memory>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	f000 80a9 	beq.w	800b430 <rmw_init+0x1bc>
 800b2de:	6884      	ldr	r4, [r0, #8]
 800b2e0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800b2e2:	f104 0910 	add.w	r9, r4, #16
 800b2e6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800b2e8:	f890 c010 	ldrb.w	ip, [r0, #16]
 800b2ec:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800b2f0:	9101      	str	r1, [sp, #4]
 800b2f2:	4661      	mov	r1, ip
 800b2f4:	6a00      	ldr	r0, [r0, #32]
 800b2f6:	9000      	str	r0, [sp, #0]
 800b2f8:	4648      	mov	r0, r9
 800b2fa:	f001 fb0b 	bl	800c914 <uxr_set_custom_transport_callbacks>
 800b2fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b302:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800b306:	4960      	ldr	r1, [pc, #384]	; (800b488 <rmw_init+0x214>)
 800b308:	4860      	ldr	r0, [pc, #384]	; (800b48c <rmw_init+0x218>)
 800b30a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 800b30e:	f504 725e 	add.w	r2, r4, #888	; 0x378
 800b312:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 800b316:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 800b31a:	2201      	movs	r2, #1
 800b31c:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 800b320:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 800b324:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 800b328:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 800b32c:	64f4      	str	r4, [r6, #76]	; 0x4c
 800b32e:	f000 fe03 	bl	800bf38 <rmw_uxrce_init_node_memory>
 800b332:	2205      	movs	r2, #5
 800b334:	4956      	ldr	r1, [pc, #344]	; (800b490 <rmw_init+0x21c>)
 800b336:	4857      	ldr	r0, [pc, #348]	; (800b494 <rmw_init+0x220>)
 800b338:	f000 fdde 	bl	800bef8 <rmw_uxrce_init_subscription_memory>
 800b33c:	220a      	movs	r2, #10
 800b33e:	4956      	ldr	r1, [pc, #344]	; (800b498 <rmw_init+0x224>)
 800b340:	4856      	ldr	r0, [pc, #344]	; (800b49c <rmw_init+0x228>)
 800b342:	f000 fdb9 	bl	800beb8 <rmw_uxrce_init_publisher_memory>
 800b346:	2201      	movs	r2, #1
 800b348:	4955      	ldr	r1, [pc, #340]	; (800b4a0 <rmw_init+0x22c>)
 800b34a:	4856      	ldr	r0, [pc, #344]	; (800b4a4 <rmw_init+0x230>)
 800b34c:	f000 fd74 	bl	800be38 <rmw_uxrce_init_service_memory>
 800b350:	2201      	movs	r2, #1
 800b352:	4955      	ldr	r1, [pc, #340]	; (800b4a8 <rmw_init+0x234>)
 800b354:	4855      	ldr	r0, [pc, #340]	; (800b4ac <rmw_init+0x238>)
 800b356:	f000 fd8f 	bl	800be78 <rmw_uxrce_init_client_memory>
 800b35a:	220f      	movs	r2, #15
 800b35c:	4954      	ldr	r1, [pc, #336]	; (800b4b0 <rmw_init+0x23c>)
 800b35e:	4855      	ldr	r0, [pc, #340]	; (800b4b4 <rmw_init+0x240>)
 800b360:	f000 fe2a 	bl	800bfb8 <rmw_uxrce_init_topic_memory>
 800b364:	2203      	movs	r2, #3
 800b366:	4954      	ldr	r1, [pc, #336]	; (800b4b8 <rmw_init+0x244>)
 800b368:	4854      	ldr	r0, [pc, #336]	; (800b4bc <rmw_init+0x248>)
 800b36a:	f000 fe65 	bl	800c038 <rmw_uxrce_init_init_options_impl_memory>
 800b36e:	2204      	movs	r2, #4
 800b370:	4953      	ldr	r1, [pc, #332]	; (800b4c0 <rmw_init+0x24c>)
 800b372:	4854      	ldr	r0, [pc, #336]	; (800b4c4 <rmw_init+0x250>)
 800b374:	f000 fe80 	bl	800c078 <rmw_uxrce_init_wait_set_memory>
 800b378:	4953      	ldr	r1, [pc, #332]	; (800b4c8 <rmw_init+0x254>)
 800b37a:	4854      	ldr	r0, [pc, #336]	; (800b4cc <rmw_init+0x258>)
 800b37c:	2204      	movs	r2, #4
 800b37e:	f000 fe9b 	bl	800c0b8 <rmw_uxrce_init_guard_condition_memory>
 800b382:	4642      	mov	r2, r8
 800b384:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800b386:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800b388:	f000 fd3e 	bl	800be08 <rmw_uxrce_transport_init>
 800b38c:	4607      	mov	r7, r0
 800b38e:	2800      	cmp	r0, #0
 800b390:	d158      	bne.n	800b444 <rmw_init+0x1d0>
 800b392:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b394:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 800b398:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800b39c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b39e:	4628      	mov	r0, r5
 800b3a0:	f001 fcea 	bl	800cd78 <uxr_init_session>
 800b3a4:	4622      	mov	r2, r4
 800b3a6:	494a      	ldr	r1, [pc, #296]	; (800b4d0 <rmw_init+0x25c>)
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	f001 fd09 	bl	800cdc0 <uxr_set_topic_callback>
 800b3ae:	463a      	mov	r2, r7
 800b3b0:	4948      	ldr	r1, [pc, #288]	; (800b4d4 <rmw_init+0x260>)
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	f001 fd00 	bl	800cdb8 <uxr_set_status_callback>
 800b3b8:	463a      	mov	r2, r7
 800b3ba:	4947      	ldr	r1, [pc, #284]	; (800b4d8 <rmw_init+0x264>)
 800b3bc:	4628      	mov	r0, r5
 800b3be:	f001 fd03 	bl	800cdc8 <uxr_set_request_callback>
 800b3c2:	463a      	mov	r2, r7
 800b3c4:	4945      	ldr	r1, [pc, #276]	; (800b4dc <rmw_init+0x268>)
 800b3c6:	4628      	mov	r0, r5
 800b3c8:	f001 fd02 	bl	800cdd0 <uxr_set_reply_callback>
 800b3cc:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800b3d0:	2304      	movs	r3, #4
 800b3d2:	f504 7165 	add.w	r1, r4, #916	; 0x394
 800b3d6:	0092      	lsls	r2, r2, #2
 800b3d8:	4628      	mov	r0, r5
 800b3da:	f001 fd39 	bl	800ce50 <uxr_create_input_reliable_stream>
 800b3de:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800b3e2:	2304      	movs	r3, #4
 800b3e4:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 800b3e8:	0092      	lsls	r2, r2, #2
 800b3ea:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	f001 fd04 	bl	800cdfc <uxr_create_output_reliable_stream>
 800b3f4:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	f001 fd23 	bl	800ce44 <uxr_create_input_best_effort_stream>
 800b3fe:	f241 3194 	movw	r1, #5012	; 0x1394
 800b402:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 800b406:	4628      	mov	r0, r5
 800b408:	4421      	add	r1, r4
 800b40a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800b40e:	f001 fce3 	bl	800cdd8 <uxr_create_output_best_effort_stream>
 800b412:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 800b416:	4628      	mov	r0, r5
 800b418:	f002 fa6c 	bl	800d8f4 <uxr_create_session>
 800b41c:	b1f8      	cbz	r0, 800b45e <rmw_init+0x1ea>
 800b41e:	4638      	mov	r0, r7
 800b420:	b003      	add	sp, #12
 800b422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b426:	270b      	movs	r7, #11
 800b428:	4638      	mov	r0, r7
 800b42a:	b003      	add	sp, #12
 800b42c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b430:	2701      	movs	r7, #1
 800b432:	4638      	mov	r0, r7
 800b434:	b003      	add	sp, #12
 800b436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b43a:	270c      	movs	r7, #12
 800b43c:	4638      	mov	r0, r7
 800b43e:	b003      	add	sp, #12
 800b440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b444:	4648      	mov	r0, r9
 800b446:	f001 faa3 	bl	800c990 <uxr_close_custom_transport>
 800b44a:	4621      	mov	r1, r4
 800b44c:	480c      	ldr	r0, [pc, #48]	; (800b480 <rmw_init+0x20c>)
 800b44e:	f007 f827 	bl	80124a0 <put_memory>
 800b452:	4638      	mov	r0, r7
 800b454:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 800b458:	b003      	add	sp, #12
 800b45a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b45e:	4648      	mov	r0, r9
 800b460:	f001 fa96 	bl	800c990 <uxr_close_custom_transport>
 800b464:	4621      	mov	r1, r4
 800b466:	4806      	ldr	r0, [pc, #24]	; (800b480 <rmw_init+0x20c>)
 800b468:	f007 f81a 	bl	80124a0 <put_memory>
 800b46c:	64f7      	str	r7, [r6, #76]	; 0x4c
 800b46e:	2701      	movs	r7, #1
 800b470:	e7d5      	b.n	800b41e <rmw_init+0x1aa>
 800b472:	bf00      	nop
 800b474:	080164c8 	.word	0x080164c8
 800b478:	20010dec 	.word	0x20010dec
 800b47c:	2000d098 	.word	0x2000d098
 800b480:	20010ddc 	.word	0x20010ddc
 800b484:	2000e640 	.word	0x2000e640
 800b488:	2000c6bc 	.word	0x2000c6bc
 800b48c:	20010dac 	.word	0x20010dac
 800b490:	20010740 	.word	0x20010740
 800b494:	20010dfc 	.word	0x20010dfc
 800b498:	2000c760 	.word	0x2000c760
 800b49c:	20010dbc 	.word	0x20010dbc
 800b4a0:	2000cfd0 	.word	0x2000cfd0
 800b4a4:	20010dcc 	.word	0x20010dcc
 800b4a8:	2000c4f0 	.word	0x2000c4f0
 800b4ac:	2000c4dc 	.word	0x2000c4dc
 800b4b0:	20010b78 	.word	0x20010b78
 800b4b4:	20010e0c 	.word	0x20010e0c
 800b4b8:	2000c638 	.word	0x2000c638
 800b4bc:	20010d9c 	.word	0x20010d9c
 800b4c0:	20010d1c 	.word	0x20010d1c
 800b4c4:	20010e1c 	.word	0x20010e1c
 800b4c8:	2000c5b8 	.word	0x2000c5b8
 800b4cc:	20010d8c 	.word	0x20010d8c
 800b4d0:	080122b9 	.word	0x080122b9
 800b4d4:	080122b1 	.word	0x080122b1
 800b4d8:	08012351 	.word	0x08012351
 800b4dc:	080123ed 	.word	0x080123ed

0800b4e0 <rmw_context_fini>:
 800b4e0:	4b17      	ldr	r3, [pc, #92]	; (800b540 <rmw_context_fini+0x60>)
 800b4e2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800b4e4:	b570      	push	{r4, r5, r6, lr}
 800b4e6:	681c      	ldr	r4, [r3, #0]
 800b4e8:	4605      	mov	r5, r0
 800b4ea:	b334      	cbz	r4, 800b53a <rmw_context_fini+0x5a>
 800b4ec:	2600      	movs	r6, #0
 800b4ee:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800b4f2:	6902      	ldr	r2, [r0, #16]
 800b4f4:	428a      	cmp	r2, r1
 800b4f6:	d018      	beq.n	800b52a <rmw_context_fini+0x4a>
 800b4f8:	2c00      	cmp	r4, #0
 800b4fa:	d1f8      	bne.n	800b4ee <rmw_context_fini+0xe>
 800b4fc:	b189      	cbz	r1, 800b522 <rmw_context_fini+0x42>
 800b4fe:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 800b502:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 800b506:	789b      	ldrb	r3, [r3, #2]
 800b508:	2b01      	cmp	r3, #1
 800b50a:	bf14      	ite	ne
 800b50c:	210a      	movne	r1, #10
 800b50e:	2100      	moveq	r1, #0
 800b510:	f002 f9c8 	bl	800d8a4 <uxr_delete_session_retries>
 800b514:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800b516:	f000 fdef 	bl	800c0f8 <rmw_uxrce_fini_session_memory>
 800b51a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800b51c:	3010      	adds	r0, #16
 800b51e:	f001 fa37 	bl	800c990 <uxr_close_custom_transport>
 800b522:	2300      	movs	r3, #0
 800b524:	4630      	mov	r0, r6
 800b526:	64eb      	str	r3, [r5, #76]	; 0x4c
 800b528:	bd70      	pop	{r4, r5, r6, pc}
 800b52a:	3018      	adds	r0, #24
 800b52c:	f000 f89c 	bl	800b668 <rmw_destroy_node>
 800b530:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800b532:	4606      	mov	r6, r0
 800b534:	2c00      	cmp	r4, #0
 800b536:	d1da      	bne.n	800b4ee <rmw_context_fini+0xe>
 800b538:	e7e0      	b.n	800b4fc <rmw_context_fini+0x1c>
 800b53a:	4626      	mov	r6, r4
 800b53c:	e7de      	b.n	800b4fc <rmw_context_fini+0x1c>
 800b53e:	bf00      	nop
 800b540:	20010dac 	.word	0x20010dac

0800b544 <create_node>:
 800b544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b548:	b083      	sub	sp, #12
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d064      	beq.n	800b618 <create_node+0xd4>
 800b54e:	4606      	mov	r6, r0
 800b550:	4838      	ldr	r0, [pc, #224]	; (800b634 <create_node+0xf0>)
 800b552:	460f      	mov	r7, r1
 800b554:	4690      	mov	r8, r2
 800b556:	461d      	mov	r5, r3
 800b558:	f006 ff92 	bl	8012480 <get_memory>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d05b      	beq.n	800b618 <create_node+0xd4>
 800b560:	6884      	ldr	r4, [r0, #8]
 800b562:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800b564:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800b568:	f104 0518 	add.w	r5, r4, #24
 800b56c:	6123      	str	r3, [r4, #16]
 800b56e:	f006 ffef 	bl	8012550 <rmw_get_implementation_identifier>
 800b572:	f8c4 9020 	str.w	r9, [r4, #32]
 800b576:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800b57a:	4630      	mov	r0, r6
 800b57c:	f7f4 fe6a 	bl	8000254 <strlen>
 800b580:	1c42      	adds	r2, r0, #1
 800b582:	2a3c      	cmp	r2, #60	; 0x3c
 800b584:	d840      	bhi.n	800b608 <create_node+0xc4>
 800b586:	4648      	mov	r0, r9
 800b588:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800b58c:	4631      	mov	r1, r6
 800b58e:	f009 fa30 	bl	80149f2 <memcpy>
 800b592:	4638      	mov	r0, r7
 800b594:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800b598:	f7f4 fe5c 	bl	8000254 <strlen>
 800b59c:	1c42      	adds	r2, r0, #1
 800b59e:	2a3c      	cmp	r2, #60	; 0x3c
 800b5a0:	d832      	bhi.n	800b608 <create_node+0xc4>
 800b5a2:	4639      	mov	r1, r7
 800b5a4:	4648      	mov	r0, r9
 800b5a6:	f009 fa24 	bl	80149f2 <memcpy>
 800b5aa:	6923      	ldr	r3, [r4, #16]
 800b5ac:	2101      	movs	r1, #1
 800b5ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5b2:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 800b5b6:	1842      	adds	r2, r0, r1
 800b5b8:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 800b5bc:	f001 f9ec 	bl	800c998 <uxr_object_id>
 800b5c0:	6160      	str	r0, [r4, #20]
 800b5c2:	783b      	ldrb	r3, [r7, #0]
 800b5c4:	2b2f      	cmp	r3, #47	; 0x2f
 800b5c6:	d12c      	bne.n	800b622 <create_node+0xde>
 800b5c8:	787b      	ldrb	r3, [r7, #1]
 800b5ca:	bb53      	cbnz	r3, 800b622 <create_node+0xde>
 800b5cc:	4633      	mov	r3, r6
 800b5ce:	4a1a      	ldr	r2, [pc, #104]	; (800b638 <create_node+0xf4>)
 800b5d0:	213c      	movs	r1, #60	; 0x3c
 800b5d2:	481a      	ldr	r0, [pc, #104]	; (800b63c <create_node+0xf8>)
 800b5d4:	f008 ff7e 	bl	80144d4 <sniprintf>
 800b5d8:	6920      	ldr	r0, [r4, #16]
 800b5da:	2106      	movs	r1, #6
 800b5dc:	fa1f f388 	uxth.w	r3, r8
 800b5e0:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800b5e4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b5e8:	9101      	str	r1, [sp, #4]
 800b5ea:	4914      	ldr	r1, [pc, #80]	; (800b63c <create_node+0xf8>)
 800b5ec:	9100      	str	r1, [sp, #0]
 800b5ee:	6811      	ldr	r1, [r2, #0]
 800b5f0:	6962      	ldr	r2, [r4, #20]
 800b5f2:	f001 f8a7 	bl	800c744 <uxr_buffer_create_participant_bin>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	6920      	ldr	r0, [r4, #16]
 800b5fa:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800b5fe:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800b602:	f000 fefb 	bl	800c3fc <run_xrce_session>
 800b606:	b918      	cbnz	r0, 800b610 <create_node+0xcc>
 800b608:	4628      	mov	r0, r5
 800b60a:	2500      	movs	r5, #0
 800b60c:	f000 fd7a 	bl	800c104 <rmw_uxrce_fini_node_memory>
 800b610:	4628      	mov	r0, r5
 800b612:	b003      	add	sp, #12
 800b614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b618:	2500      	movs	r5, #0
 800b61a:	4628      	mov	r0, r5
 800b61c:	b003      	add	sp, #12
 800b61e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b622:	463b      	mov	r3, r7
 800b624:	4a06      	ldr	r2, [pc, #24]	; (800b640 <create_node+0xfc>)
 800b626:	213c      	movs	r1, #60	; 0x3c
 800b628:	9600      	str	r6, [sp, #0]
 800b62a:	4804      	ldr	r0, [pc, #16]	; (800b63c <create_node+0xf8>)
 800b62c:	f008 ff52 	bl	80144d4 <sniprintf>
 800b630:	e7d2      	b.n	800b5d8 <create_node+0x94>
 800b632:	bf00      	nop
 800b634:	20010dac 	.word	0x20010dac
 800b638:	0801608c 	.word	0x0801608c
 800b63c:	2000c360 	.word	0x2000c360
 800b640:	08015bd8 	.word	0x08015bd8

0800b644 <rmw_create_node>:
 800b644:	468c      	mov	ip, r1
 800b646:	4611      	mov	r1, r2
 800b648:	f1bc 0f00 	cmp.w	ip, #0
 800b64c:	d00a      	beq.n	800b664 <rmw_create_node+0x20>
 800b64e:	f89c 3000 	ldrb.w	r3, [ip]
 800b652:	b13b      	cbz	r3, 800b664 <rmw_create_node+0x20>
 800b654:	b132      	cbz	r2, 800b664 <rmw_create_node+0x20>
 800b656:	7813      	ldrb	r3, [r2, #0]
 800b658:	b123      	cbz	r3, 800b664 <rmw_create_node+0x20>
 800b65a:	4603      	mov	r3, r0
 800b65c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800b65e:	4660      	mov	r0, ip
 800b660:	f7ff bf70 	b.w	800b544 <create_node>
 800b664:	2000      	movs	r0, #0
 800b666:	4770      	bx	lr

0800b668 <rmw_destroy_node>:
 800b668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b66a:	b328      	cbz	r0, 800b6b8 <rmw_destroy_node+0x50>
 800b66c:	4607      	mov	r7, r0
 800b66e:	6800      	ldr	r0, [r0, #0]
 800b670:	b120      	cbz	r0, 800b67c <rmw_destroy_node+0x14>
 800b672:	4b37      	ldr	r3, [pc, #220]	; (800b750 <rmw_destroy_node+0xe8>)
 800b674:	6819      	ldr	r1, [r3, #0]
 800b676:	f7f4 fde3 	bl	8000240 <strcmp>
 800b67a:	b9e8      	cbnz	r0, 800b6b8 <rmw_destroy_node+0x50>
 800b67c:	687d      	ldr	r5, [r7, #4]
 800b67e:	b1dd      	cbz	r5, 800b6b8 <rmw_destroy_node+0x50>
 800b680:	4b34      	ldr	r3, [pc, #208]	; (800b754 <rmw_destroy_node+0xec>)
 800b682:	681c      	ldr	r4, [r3, #0]
 800b684:	2c00      	cmp	r4, #0
 800b686:	d060      	beq.n	800b74a <rmw_destroy_node+0xe2>
 800b688:	2600      	movs	r6, #0
 800b68a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b68e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800b692:	429d      	cmp	r5, r3
 800b694:	d013      	beq.n	800b6be <rmw_destroy_node+0x56>
 800b696:	2c00      	cmp	r4, #0
 800b698:	d1f7      	bne.n	800b68a <rmw_destroy_node+0x22>
 800b69a:	4b2f      	ldr	r3, [pc, #188]	; (800b758 <rmw_destroy_node+0xf0>)
 800b69c:	681c      	ldr	r4, [r3, #0]
 800b69e:	b1c4      	cbz	r4, 800b6d2 <rmw_destroy_node+0x6a>
 800b6a0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b6a4:	6a0b      	ldr	r3, [r1, #32]
 800b6a6:	429d      	cmp	r5, r3
 800b6a8:	d1f9      	bne.n	800b69e <rmw_destroy_node+0x36>
 800b6aa:	317c      	adds	r1, #124	; 0x7c
 800b6ac:	4638      	mov	r0, r7
 800b6ae:	f000 fb49 	bl	800bd44 <rmw_destroy_subscription>
 800b6b2:	2801      	cmp	r0, #1
 800b6b4:	4606      	mov	r6, r0
 800b6b6:	d1f2      	bne.n	800b69e <rmw_destroy_node+0x36>
 800b6b8:	2601      	movs	r6, #1
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6be:	3184      	adds	r1, #132	; 0x84
 800b6c0:	4638      	mov	r0, r7
 800b6c2:	f000 f855 	bl	800b770 <rmw_destroy_publisher>
 800b6c6:	2801      	cmp	r0, #1
 800b6c8:	4606      	mov	r6, r0
 800b6ca:	d0f5      	beq.n	800b6b8 <rmw_destroy_node+0x50>
 800b6cc:	2c00      	cmp	r4, #0
 800b6ce:	d1dc      	bne.n	800b68a <rmw_destroy_node+0x22>
 800b6d0:	e7e3      	b.n	800b69a <rmw_destroy_node+0x32>
 800b6d2:	4b22      	ldr	r3, [pc, #136]	; (800b75c <rmw_destroy_node+0xf4>)
 800b6d4:	681c      	ldr	r4, [r3, #0]
 800b6d6:	b16c      	cbz	r4, 800b6f4 <rmw_destroy_node+0x8c>
 800b6d8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b6dc:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800b6de:	429d      	cmp	r5, r3
 800b6e0:	d1f9      	bne.n	800b6d6 <rmw_destroy_node+0x6e>
 800b6e2:	317c      	adds	r1, #124	; 0x7c
 800b6e4:	4638      	mov	r0, r7
 800b6e6:	f000 fac1 	bl	800bc6c <rmw_destroy_service>
 800b6ea:	2801      	cmp	r0, #1
 800b6ec:	4606      	mov	r6, r0
 800b6ee:	d0e3      	beq.n	800b6b8 <rmw_destroy_node+0x50>
 800b6f0:	2c00      	cmp	r4, #0
 800b6f2:	d1f1      	bne.n	800b6d8 <rmw_destroy_node+0x70>
 800b6f4:	4b1a      	ldr	r3, [pc, #104]	; (800b760 <rmw_destroy_node+0xf8>)
 800b6f6:	681c      	ldr	r4, [r3, #0]
 800b6f8:	b16c      	cbz	r4, 800b716 <rmw_destroy_node+0xae>
 800b6fa:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b6fe:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800b700:	429d      	cmp	r5, r3
 800b702:	d1f9      	bne.n	800b6f8 <rmw_destroy_node+0x90>
 800b704:	317c      	adds	r1, #124	; 0x7c
 800b706:	4638      	mov	r0, r7
 800b708:	f006 fede 	bl	80124c8 <rmw_destroy_client>
 800b70c:	2801      	cmp	r0, #1
 800b70e:	4606      	mov	r6, r0
 800b710:	d0d2      	beq.n	800b6b8 <rmw_destroy_node+0x50>
 800b712:	2c00      	cmp	r4, #0
 800b714:	d1f1      	bne.n	800b6fa <rmw_destroy_node+0x92>
 800b716:	6928      	ldr	r0, [r5, #16]
 800b718:	696a      	ldr	r2, [r5, #20]
 800b71a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800b71e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b722:	6819      	ldr	r1, [r3, #0]
 800b724:	f000 ffc2 	bl	800c6ac <uxr_buffer_delete_entity>
 800b728:	4602      	mov	r2, r0
 800b72a:	6928      	ldr	r0, [r5, #16]
 800b72c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800b730:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800b734:	f000 fe62 	bl	800c3fc <run_xrce_session>
 800b738:	4603      	mov	r3, r0
 800b73a:	4638      	mov	r0, r7
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	bf08      	it	eq
 800b740:	2602      	moveq	r6, #2
 800b742:	f000 fcdf 	bl	800c104 <rmw_uxrce_fini_node_memory>
 800b746:	4630      	mov	r0, r6
 800b748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b74a:	4626      	mov	r6, r4
 800b74c:	e7a5      	b.n	800b69a <rmw_destroy_node+0x32>
 800b74e:	bf00      	nop
 800b750:	080164c8 	.word	0x080164c8
 800b754:	20010dbc 	.word	0x20010dbc
 800b758:	20010dfc 	.word	0x20010dfc
 800b75c:	20010dcc 	.word	0x20010dcc
 800b760:	2000c4dc 	.word	0x2000c4dc

0800b764 <rmw_node_get_graph_guard_condition>:
 800b764:	6843      	ldr	r3, [r0, #4]
 800b766:	6918      	ldr	r0, [r3, #16]
 800b768:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop

0800b770 <rmw_destroy_publisher>:
 800b770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b774:	b128      	cbz	r0, 800b782 <rmw_destroy_publisher+0x12>
 800b776:	4604      	mov	r4, r0
 800b778:	6800      	ldr	r0, [r0, #0]
 800b77a:	460d      	mov	r5, r1
 800b77c:	f000 ff0a 	bl	800c594 <is_uxrce_rmw_identifier_valid>
 800b780:	b918      	cbnz	r0, 800b78a <rmw_destroy_publisher+0x1a>
 800b782:	2401      	movs	r4, #1
 800b784:	4620      	mov	r0, r4
 800b786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b78a:	6863      	ldr	r3, [r4, #4]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d0f8      	beq.n	800b782 <rmw_destroy_publisher+0x12>
 800b790:	fab5 f485 	clz	r4, r5
 800b794:	0964      	lsrs	r4, r4, #5
 800b796:	2d00      	cmp	r5, #0
 800b798:	d0f3      	beq.n	800b782 <rmw_destroy_publisher+0x12>
 800b79a:	6828      	ldr	r0, [r5, #0]
 800b79c:	f000 fefa 	bl	800c594 <is_uxrce_rmw_identifier_valid>
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d0ee      	beq.n	800b782 <rmw_destroy_publisher+0x12>
 800b7a4:	686e      	ldr	r6, [r5, #4]
 800b7a6:	2e00      	cmp	r6, #0
 800b7a8:	d0eb      	beq.n	800b782 <rmw_destroy_publisher+0x12>
 800b7aa:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800b7ac:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 800b7b0:	f006 fefe 	bl	80125b0 <destroy_topic>
 800b7b4:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800b7b8:	6972      	ldr	r2, [r6, #20]
 800b7ba:	6918      	ldr	r0, [r3, #16]
 800b7bc:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800b7c0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b7c4:	6819      	ldr	r1, [r3, #0]
 800b7c6:	f000 ff71 	bl	800c6ac <uxr_buffer_delete_entity>
 800b7ca:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800b7ce:	4680      	mov	r8, r0
 800b7d0:	6932      	ldr	r2, [r6, #16]
 800b7d2:	6918      	ldr	r0, [r3, #16]
 800b7d4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800b7d8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b7dc:	6819      	ldr	r1, [r3, #0]
 800b7de:	f000 ff65 	bl	800c6ac <uxr_buffer_delete_entity>
 800b7e2:	4606      	mov	r6, r0
 800b7e4:	6938      	ldr	r0, [r7, #16]
 800b7e6:	4642      	mov	r2, r8
 800b7e8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800b7ec:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800b7f0:	f000 fe04 	bl	800c3fc <run_xrce_session>
 800b7f4:	693f      	ldr	r7, [r7, #16]
 800b7f6:	4632      	mov	r2, r6
 800b7f8:	4606      	mov	r6, r0
 800b7fa:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800b7fe:	4638      	mov	r0, r7
 800b800:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800b804:	f000 fdfa 	bl	800c3fc <run_xrce_session>
 800b808:	b126      	cbz	r6, 800b814 <rmw_destroy_publisher+0xa4>
 800b80a:	b118      	cbz	r0, 800b814 <rmw_destroy_publisher+0xa4>
 800b80c:	4628      	mov	r0, r5
 800b80e:	f000 fc91 	bl	800c134 <rmw_uxrce_fini_publisher_memory>
 800b812:	e7b7      	b.n	800b784 <rmw_destroy_publisher+0x14>
 800b814:	2402      	movs	r4, #2
 800b816:	e7f9      	b.n	800b80c <rmw_destroy_publisher+0x9c>

0800b818 <rmw_send_request>:
 800b818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b81c:	4604      	mov	r4, r0
 800b81e:	6800      	ldr	r0, [r0, #0]
 800b820:	b08b      	sub	sp, #44	; 0x2c
 800b822:	460e      	mov	r6, r1
 800b824:	4615      	mov	r5, r2
 800b826:	b128      	cbz	r0, 800b834 <rmw_send_request+0x1c>
 800b828:	4b21      	ldr	r3, [pc, #132]	; (800b8b0 <rmw_send_request+0x98>)
 800b82a:	6819      	ldr	r1, [r3, #0]
 800b82c:	f7f4 fd08 	bl	8000240 <strcmp>
 800b830:	2800      	cmp	r0, #0
 800b832:	d139      	bne.n	800b8a8 <rmw_send_request+0x90>
 800b834:	6864      	ldr	r4, [r4, #4]
 800b836:	2700      	movs	r7, #0
 800b838:	6963      	ldr	r3, [r4, #20]
 800b83a:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	4798      	blx	r3
 800b842:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800b846:	4630      	mov	r0, r6
 800b848:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b84c:	4798      	blx	r3
 800b84e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b852:	9000      	str	r0, [sp, #0]
 800b854:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800b858:	6922      	ldr	r2, [r4, #16]
 800b85a:	ab02      	add	r3, sp, #8
 800b85c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800b85e:	f003 f8c7 	bl	800e9f0 <uxr_prepare_output_stream>
 800b862:	e9c5 0700 	strd	r0, r7, [r5]
 800b866:	b198      	cbz	r0, 800b890 <rmw_send_request+0x78>
 800b868:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800b86c:	a902      	add	r1, sp, #8
 800b86e:	4630      	mov	r0, r6
 800b870:	4798      	blx	r3
 800b872:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 800b876:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d00c      	beq.n	800b898 <rmw_send_request+0x80>
 800b87e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800b880:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b884:	f001 fec4 	bl	800d610 <uxr_run_session_until_confirm_delivery>
 800b888:	4638      	mov	r0, r7
 800b88a:	b00b      	add	sp, #44	; 0x2c
 800b88c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b890:	2001      	movs	r0, #1
 800b892:	b00b      	add	sp, #44	; 0x2c
 800b894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b898:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b89c:	f001 fafe 	bl	800ce9c <uxr_flash_output_streams>
 800b8a0:	4638      	mov	r0, r7
 800b8a2:	b00b      	add	sp, #44	; 0x2c
 800b8a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8a8:	200c      	movs	r0, #12
 800b8aa:	b00b      	add	sp, #44	; 0x2c
 800b8ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8b0:	080164c8 	.word	0x080164c8

0800b8b4 <rmw_take_request>:
 800b8b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8b8:	4605      	mov	r5, r0
 800b8ba:	6800      	ldr	r0, [r0, #0]
 800b8bc:	b089      	sub	sp, #36	; 0x24
 800b8be:	460c      	mov	r4, r1
 800b8c0:	4690      	mov	r8, r2
 800b8c2:	461e      	mov	r6, r3
 800b8c4:	b128      	cbz	r0, 800b8d2 <rmw_take_request+0x1e>
 800b8c6:	4b28      	ldr	r3, [pc, #160]	; (800b968 <rmw_take_request+0xb4>)
 800b8c8:	6819      	ldr	r1, [r3, #0]
 800b8ca:	f7f4 fcb9 	bl	8000240 <strcmp>
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	d146      	bne.n	800b960 <rmw_take_request+0xac>
 800b8d2:	b10e      	cbz	r6, 800b8d8 <rmw_take_request+0x24>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	7033      	strb	r3, [r6, #0]
 800b8d8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800b8dc:	f000 fd10 	bl	800c300 <rmw_uxrce_clean_expired_static_input_buffer>
 800b8e0:	4648      	mov	r0, r9
 800b8e2:	f000 fce5 	bl	800c2b0 <rmw_uxrce_find_static_input_buffer_by_owner>
 800b8e6:	4607      	mov	r7, r0
 800b8e8:	b3b0      	cbz	r0, 800b958 <rmw_take_request+0xa4>
 800b8ea:	6885      	ldr	r5, [r0, #8]
 800b8ec:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 800b8f0:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 800b8f4:	e9c4 3208 	strd	r3, r2, [r4, #32]
 800b8f8:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 800b8fc:	7423      	strb	r3, [r4, #16]
 800b8fe:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 800b902:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 800b906:	f8a4 2011 	strh.w	r2, [r4, #17]
 800b90a:	74e3      	strb	r3, [r4, #19]
 800b90c:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 800b910:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 800b914:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 800b918:	6161      	str	r1, [r4, #20]
 800b91a:	61a2      	str	r2, [r4, #24]
 800b91c:	61e3      	str	r3, [r4, #28]
 800b91e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b922:	689b      	ldr	r3, [r3, #8]
 800b924:	4798      	blx	r3
 800b926:	6844      	ldr	r4, [r0, #4]
 800b928:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 800b92c:	f105 0110 	add.w	r1, r5, #16
 800b930:	4668      	mov	r0, sp
 800b932:	f7fd fd17 	bl	8009364 <ucdr_init_buffer>
 800b936:	4641      	mov	r1, r8
 800b938:	68e3      	ldr	r3, [r4, #12]
 800b93a:	4668      	mov	r0, sp
 800b93c:	4798      	blx	r3
 800b93e:	4639      	mov	r1, r7
 800b940:	4604      	mov	r4, r0
 800b942:	480a      	ldr	r0, [pc, #40]	; (800b96c <rmw_take_request+0xb8>)
 800b944:	f006 fdac 	bl	80124a0 <put_memory>
 800b948:	b106      	cbz	r6, 800b94c <rmw_take_request+0x98>
 800b94a:	7034      	strb	r4, [r6, #0]
 800b94c:	f084 0001 	eor.w	r0, r4, #1
 800b950:	b2c0      	uxtb	r0, r0
 800b952:	b009      	add	sp, #36	; 0x24
 800b954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b958:	2001      	movs	r0, #1
 800b95a:	b009      	add	sp, #36	; 0x24
 800b95c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b960:	200c      	movs	r0, #12
 800b962:	b009      	add	sp, #36	; 0x24
 800b964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b968:	080164c8 	.word	0x080164c8
 800b96c:	20010dec 	.word	0x20010dec

0800b970 <rmw_send_response>:
 800b970:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b972:	4605      	mov	r5, r0
 800b974:	6800      	ldr	r0, [r0, #0]
 800b976:	b091      	sub	sp, #68	; 0x44
 800b978:	460c      	mov	r4, r1
 800b97a:	4616      	mov	r6, r2
 800b97c:	b128      	cbz	r0, 800b98a <rmw_send_response+0x1a>
 800b97e:	4b29      	ldr	r3, [pc, #164]	; (800ba24 <rmw_send_response+0xb4>)
 800b980:	6819      	ldr	r1, [r3, #0]
 800b982:	f7f4 fc5d 	bl	8000240 <strcmp>
 800b986:	2800      	cmp	r0, #0
 800b988:	d141      	bne.n	800ba0e <rmw_send_response+0x9e>
 800b98a:	686d      	ldr	r5, [r5, #4]
 800b98c:	68a1      	ldr	r1, [r4, #8]
 800b98e:	6860      	ldr	r0, [r4, #4]
 800b990:	6faf      	ldr	r7, [r5, #120]	; 0x78
 800b992:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800b996:	9307      	str	r3, [sp, #28]
 800b998:	4623      	mov	r3, r4
 800b99a:	9206      	str	r2, [sp, #24]
 800b99c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9a0:	789b      	ldrb	r3, [r3, #2]
 800b9a2:	f88d 2017 	strb.w	r2, [sp, #23]
 800b9a6:	f88d 3016 	strb.w	r3, [sp, #22]
 800b9aa:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 800b9ae:	68e2      	ldr	r2, [r4, #12]
 800b9b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b9b4:	ab02      	add	r3, sp, #8
 800b9b6:	696c      	ldr	r4, [r5, #20]
 800b9b8:	c307      	stmia	r3!, {r0, r1, r2}
 800b9ba:	68e3      	ldr	r3, [r4, #12]
 800b9bc:	4798      	blx	r3
 800b9be:	6844      	ldr	r4, [r0, #4]
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	6923      	ldr	r3, [r4, #16]
 800b9c4:	4798      	blx	r3
 800b9c6:	f100 0318 	add.w	r3, r0, #24
 800b9ca:	6938      	ldr	r0, [r7, #16]
 800b9cc:	9300      	str	r3, [sp, #0]
 800b9ce:	ab08      	add	r3, sp, #32
 800b9d0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b9d4:	692a      	ldr	r2, [r5, #16]
 800b9d6:	6f29      	ldr	r1, [r5, #112]	; 0x70
 800b9d8:	f003 f80a 	bl	800e9f0 <uxr_prepare_output_stream>
 800b9dc:	b910      	cbnz	r0, 800b9e4 <rmw_send_response+0x74>
 800b9de:	2001      	movs	r0, #1
 800b9e0:	b011      	add	sp, #68	; 0x44
 800b9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9e4:	a902      	add	r1, sp, #8
 800b9e6:	a808      	add	r0, sp, #32
 800b9e8:	f003 fe62 	bl	800f6b0 <uxr_serialize_SampleIdentity>
 800b9ec:	68a3      	ldr	r3, [r4, #8]
 800b9ee:	a908      	add	r1, sp, #32
 800b9f0:	4630      	mov	r0, r6
 800b9f2:	4798      	blx	r3
 800b9f4:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 800b9f8:	6938      	ldr	r0, [r7, #16]
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d00a      	beq.n	800ba14 <rmw_send_response+0xa4>
 800b9fe:	6f69      	ldr	r1, [r5, #116]	; 0x74
 800ba00:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ba04:	f001 fe04 	bl	800d610 <uxr_run_session_until_confirm_delivery>
 800ba08:	2000      	movs	r0, #0
 800ba0a:	b011      	add	sp, #68	; 0x44
 800ba0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba0e:	200c      	movs	r0, #12
 800ba10:	b011      	add	sp, #68	; 0x44
 800ba12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba14:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ba18:	f001 fa40 	bl	800ce9c <uxr_flash_output_streams>
 800ba1c:	2000      	movs	r0, #0
 800ba1e:	b011      	add	sp, #68	; 0x44
 800ba20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba22:	bf00      	nop
 800ba24:	080164c8 	.word	0x080164c8

0800ba28 <rmw_take_response>:
 800ba28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba2c:	4604      	mov	r4, r0
 800ba2e:	6800      	ldr	r0, [r0, #0]
 800ba30:	b088      	sub	sp, #32
 800ba32:	460f      	mov	r7, r1
 800ba34:	4690      	mov	r8, r2
 800ba36:	461d      	mov	r5, r3
 800ba38:	b120      	cbz	r0, 800ba44 <rmw_take_response+0x1c>
 800ba3a:	4b1d      	ldr	r3, [pc, #116]	; (800bab0 <rmw_take_response+0x88>)
 800ba3c:	6819      	ldr	r1, [r3, #0]
 800ba3e:	f7f4 fbff 	bl	8000240 <strcmp>
 800ba42:	bb68      	cbnz	r0, 800baa0 <rmw_take_response+0x78>
 800ba44:	b10d      	cbz	r5, 800ba4a <rmw_take_response+0x22>
 800ba46:	2300      	movs	r3, #0
 800ba48:	702b      	strb	r3, [r5, #0]
 800ba4a:	6864      	ldr	r4, [r4, #4]
 800ba4c:	f000 fc58 	bl	800c300 <rmw_uxrce_clean_expired_static_input_buffer>
 800ba50:	4620      	mov	r0, r4
 800ba52:	f000 fc2d 	bl	800c2b0 <rmw_uxrce_find_static_input_buffer_by_owner>
 800ba56:	4606      	mov	r6, r0
 800ba58:	b330      	cbz	r0, 800baa8 <rmw_take_response+0x80>
 800ba5a:	6963      	ldr	r3, [r4, #20]
 800ba5c:	6884      	ldr	r4, [r0, #8]
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 800ba64:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 800ba68:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800ba6c:	4798      	blx	r3
 800ba6e:	6847      	ldr	r7, [r0, #4]
 800ba70:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 800ba74:	f104 0110 	add.w	r1, r4, #16
 800ba78:	4668      	mov	r0, sp
 800ba7a:	f7fd fc73 	bl	8009364 <ucdr_init_buffer>
 800ba7e:	4641      	mov	r1, r8
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	4668      	mov	r0, sp
 800ba84:	4798      	blx	r3
 800ba86:	4631      	mov	r1, r6
 800ba88:	4604      	mov	r4, r0
 800ba8a:	480a      	ldr	r0, [pc, #40]	; (800bab4 <rmw_take_response+0x8c>)
 800ba8c:	f006 fd08 	bl	80124a0 <put_memory>
 800ba90:	b105      	cbz	r5, 800ba94 <rmw_take_response+0x6c>
 800ba92:	702c      	strb	r4, [r5, #0]
 800ba94:	f084 0001 	eor.w	r0, r4, #1
 800ba98:	b2c0      	uxtb	r0, r0
 800ba9a:	b008      	add	sp, #32
 800ba9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa0:	200c      	movs	r0, #12
 800baa2:	b008      	add	sp, #32
 800baa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa8:	2001      	movs	r0, #1
 800baaa:	b008      	add	sp, #32
 800baac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bab0:	080164c8 	.word	0x080164c8
 800bab4:	20010dec 	.word	0x20010dec

0800bab8 <rmw_create_service>:
 800bab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800babc:	b091      	sub	sp, #68	; 0x44
 800babe:	2900      	cmp	r1, #0
 800bac0:	f000 80bb 	beq.w	800bc3a <rmw_create_service+0x182>
 800bac4:	4606      	mov	r6, r0
 800bac6:	2800      	cmp	r0, #0
 800bac8:	f000 80b7 	beq.w	800bc3a <rmw_create_service+0x182>
 800bacc:	4614      	mov	r4, r2
 800bace:	6800      	ldr	r0, [r0, #0]
 800bad0:	4689      	mov	r9, r1
 800bad2:	461d      	mov	r5, r3
 800bad4:	f000 fd5e 	bl	800c594 <is_uxrce_rmw_identifier_valid>
 800bad8:	2c00      	cmp	r4, #0
 800bada:	f000 80ae 	beq.w	800bc3a <rmw_create_service+0x182>
 800bade:	f080 0001 	eor.w	r0, r0, #1
 800bae2:	b2c0      	uxtb	r0, r0
 800bae4:	2800      	cmp	r0, #0
 800bae6:	f040 80a8 	bne.w	800bc3a <rmw_create_service+0x182>
 800baea:	7823      	ldrb	r3, [r4, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	f000 80a4 	beq.w	800bc3a <rmw_create_service+0x182>
 800baf2:	2d00      	cmp	r5, #0
 800baf4:	f000 80a1 	beq.w	800bc3a <rmw_create_service+0x182>
 800baf8:	4856      	ldr	r0, [pc, #344]	; (800bc54 <rmw_create_service+0x19c>)
 800bafa:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800bafe:	f006 fcbf 	bl	8012480 <get_memory>
 800bb02:	4606      	mov	r6, r0
 800bb04:	2800      	cmp	r0, #0
 800bb06:	f000 8099 	beq.w	800bc3c <rmw_create_service+0x184>
 800bb0a:	6887      	ldr	r7, [r0, #8]
 800bb0c:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 800bb10:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 800bb14:	f006 fd1c 	bl	8012550 <rmw_get_implementation_identifier>
 800bb18:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bb1a:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800bb1e:	4620      	mov	r0, r4
 800bb20:	f7f4 fb98 	bl	8000254 <strlen>
 800bb24:	1c42      	adds	r2, r0, #1
 800bb26:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 800bb2a:	2a3c      	cmp	r2, #60	; 0x3c
 800bb2c:	f200 808a 	bhi.w	800bc44 <rmw_create_service+0x18c>
 800bb30:	4621      	mov	r1, r4
 800bb32:	4650      	mov	r0, sl
 800bb34:	f008 ff5d 	bl	80149f2 <memcpy>
 800bb38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bb3c:	4629      	mov	r1, r5
 800bb3e:	2250      	movs	r2, #80	; 0x50
 800bb40:	f107 0020 	add.w	r0, r7, #32
 800bb44:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 800bb48:	677b      	str	r3, [r7, #116]	; 0x74
 800bb4a:	f008 ff52 	bl	80149f2 <memcpy>
 800bb4e:	4648      	mov	r0, r9
 800bb50:	4941      	ldr	r1, [pc, #260]	; (800bc58 <rmw_create_service+0x1a0>)
 800bb52:	f000 fd37 	bl	800c5c4 <get_service_typesupport_handle>
 800bb56:	2800      	cmp	r0, #0
 800bb58:	d074      	beq.n	800bc44 <rmw_create_service+0x18c>
 800bb5a:	6843      	ldr	r3, [r0, #4]
 800bb5c:	617b      	str	r3, [r7, #20]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d070      	beq.n	800bc44 <rmw_create_service+0x18c>
 800bb62:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bb66:	2108      	movs	r1, #8
 800bb68:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 800bc60 <rmw_create_service+0x1a8>
 800bb6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb70:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 800bc64 <rmw_create_service+0x1ac>
 800bb74:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 800bb78:	1c42      	adds	r2, r0, #1
 800bb7a:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 800bb7e:	f000 ff0b 	bl	800c998 <uxr_object_id>
 800bb82:	2364      	movs	r3, #100	; 0x64
 800bb84:	6138      	str	r0, [r7, #16]
 800bb86:	4652      	mov	r2, sl
 800bb88:	4649      	mov	r1, r9
 800bb8a:	6978      	ldr	r0, [r7, #20]
 800bb8c:	f000 fc9c 	bl	800c4c8 <generate_service_types>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d057      	beq.n	800bc44 <rmw_create_service+0x18c>
 800bb94:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 800bc68 <rmw_create_service+0x1b0>
 800bb98:	233c      	movs	r3, #60	; 0x3c
 800bb9a:	4a30      	ldr	r2, [pc, #192]	; (800bc5c <rmw_create_service+0x1a4>)
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	4659      	mov	r1, fp
 800bba0:	f000 fc60 	bl	800c464 <generate_service_topics>
 800bba4:	2800      	cmp	r0, #0
 800bba6:	d04d      	beq.n	800bc44 <rmw_create_service+0x18c>
 800bba8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bbac:	a80c      	add	r0, sp, #48	; 0x30
 800bbae:	4629      	mov	r1, r5
 800bbb0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800bbb4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bbb8:	f000 fc3c 	bl	800c434 <convert_qos_profile>
 800bbbc:	4a27      	ldr	r2, [pc, #156]	; (800bc5c <rmw_create_service+0x1a4>)
 800bbbe:	a80c      	add	r0, sp, #48	; 0x30
 800bbc0:	9400      	str	r4, [sp, #0]
 800bbc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbc4:	e9cd b203 	strd	fp, r2, [sp, #12]
 800bbc8:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 800bbcc:	c803      	ldmia	r0, {r0, r1}
 800bbce:	9a08      	ldr	r2, [sp, #32]
 800bbd0:	9005      	str	r0, [sp, #20]
 800bbd2:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800bbd6:	2306      	movs	r3, #6
 800bbd8:	f8ad 1018 	strh.w	r1, [sp, #24]
 800bbdc:	9307      	str	r3, [sp, #28]
 800bbde:	6811      	ldr	r1, [r2, #0]
 800bbe0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800bbe4:	693a      	ldr	r2, [r7, #16]
 800bbe6:	f000 fddf 	bl	800c7a8 <uxr_buffer_create_replier_bin>
 800bbea:	4602      	mov	r2, r0
 800bbec:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800bbf0:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800bbf4:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800bbf8:	f000 fc00 	bl	800c3fc <run_xrce_session>
 800bbfc:	b310      	cbz	r0, 800bc44 <rmw_create_service+0x18c>
 800bbfe:	7a2b      	ldrb	r3, [r5, #8]
 800bc00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc04:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	920e      	str	r2, [sp, #56]	; 0x38
 800bc0c:	f04f 0200 	mov.w	r2, #0
 800bc10:	920f      	str	r2, [sp, #60]	; 0x3c
 800bc12:	bf0c      	ite	eq
 800bc14:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 800bc18:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 800bc1c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bc20:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc22:	ab0e      	add	r3, sp, #56	; 0x38
 800bc24:	673a      	str	r2, [r7, #112]	; 0x70
 800bc26:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 800bc2a:	9300      	str	r3, [sp, #0]
 800bc2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc2e:	6811      	ldr	r1, [r2, #0]
 800bc30:	693a      	ldr	r2, [r7, #16]
 800bc32:	f000 fee1 	bl	800c9f8 <uxr_buffer_request_data>
 800bc36:	8338      	strh	r0, [r7, #24]
 800bc38:	e000      	b.n	800bc3c <rmw_create_service+0x184>
 800bc3a:	2600      	movs	r6, #0
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	b011      	add	sp, #68	; 0x44
 800bc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc44:	4630      	mov	r0, r6
 800bc46:	2600      	movs	r6, #0
 800bc48:	f000 faa0 	bl	800c18c <rmw_uxrce_fini_service_memory>
 800bc4c:	4630      	mov	r0, r6
 800bc4e:	b011      	add	sp, #68	; 0x44
 800bc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc54:	20010dcc 	.word	0x20010dcc
 800bc58:	080158f4 	.word	0x080158f4
 800bc5c:	2000c43c 	.word	0x2000c43c
 800bc60:	2000c478 	.word	0x2000c478
 800bc64:	2000c3d8 	.word	0x2000c3d8
 800bc68:	2000c39c 	.word	0x2000c39c

0800bc6c <rmw_destroy_service>:
 800bc6c:	b570      	push	{r4, r5, r6, lr}
 800bc6e:	b128      	cbz	r0, 800bc7c <rmw_destroy_service+0x10>
 800bc70:	4604      	mov	r4, r0
 800bc72:	6800      	ldr	r0, [r0, #0]
 800bc74:	460d      	mov	r5, r1
 800bc76:	f000 fc8d 	bl	800c594 <is_uxrce_rmw_identifier_valid>
 800bc7a:	b910      	cbnz	r0, 800bc82 <rmw_destroy_service+0x16>
 800bc7c:	2401      	movs	r4, #1
 800bc7e:	4620      	mov	r0, r4
 800bc80:	bd70      	pop	{r4, r5, r6, pc}
 800bc82:	6863      	ldr	r3, [r4, #4]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d0f9      	beq.n	800bc7c <rmw_destroy_service+0x10>
 800bc88:	2d00      	cmp	r5, #0
 800bc8a:	d0f7      	beq.n	800bc7c <rmw_destroy_service+0x10>
 800bc8c:	6828      	ldr	r0, [r5, #0]
 800bc8e:	f000 fc81 	bl	800c594 <is_uxrce_rmw_identifier_valid>
 800bc92:	2800      	cmp	r0, #0
 800bc94:	d0f2      	beq.n	800bc7c <rmw_destroy_service+0x10>
 800bc96:	686e      	ldr	r6, [r5, #4]
 800bc98:	2e00      	cmp	r6, #0
 800bc9a:	d0ef      	beq.n	800bc7c <rmw_destroy_service+0x10>
 800bc9c:	6864      	ldr	r4, [r4, #4]
 800bc9e:	6932      	ldr	r2, [r6, #16]
 800bca0:	6920      	ldr	r0, [r4, #16]
 800bca2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800bca6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bcaa:	6819      	ldr	r1, [r3, #0]
 800bcac:	f000 fede 	bl	800ca6c <uxr_buffer_cancel_data>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	6920      	ldr	r0, [r4, #16]
 800bcb4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800bcb8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800bcbc:	f000 fb9e 	bl	800c3fc <run_xrce_session>
 800bcc0:	6920      	ldr	r0, [r4, #16]
 800bcc2:	6932      	ldr	r2, [r6, #16]
 800bcc4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800bcc8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bccc:	6819      	ldr	r1, [r3, #0]
 800bcce:	f000 fced 	bl	800c6ac <uxr_buffer_delete_entity>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	6920      	ldr	r0, [r4, #16]
 800bcd6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800bcda:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800bcde:	f000 fb8d 	bl	800c3fc <run_xrce_session>
 800bce2:	4603      	mov	r3, r0
 800bce4:	4628      	mov	r0, r5
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	bf14      	ite	ne
 800bcea:	2400      	movne	r4, #0
 800bcec:	2402      	moveq	r4, #2
 800bcee:	f000 fa4d 	bl	800c18c <rmw_uxrce_fini_service_memory>
 800bcf2:	e7c4      	b.n	800bc7e <rmw_destroy_service+0x12>

0800bcf4 <rmw_service_response_publisher_get_actual_qos>:
 800bcf4:	b181      	cbz	r1, 800bd18 <rmw_service_response_publisher_get_actual_qos+0x24>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	b510      	push	{r4, lr}
 800bcfa:	fab0 f480 	clz	r4, r0
 800bcfe:	0964      	lsrs	r4, r4, #5
 800bd00:	b140      	cbz	r0, 800bd14 <rmw_service_response_publisher_get_actual_qos+0x20>
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	4608      	mov	r0, r1
 800bd06:	2250      	movs	r2, #80	; 0x50
 800bd08:	f103 0120 	add.w	r1, r3, #32
 800bd0c:	f008 fe71 	bl	80149f2 <memcpy>
 800bd10:	4620      	mov	r0, r4
 800bd12:	bd10      	pop	{r4, pc}
 800bd14:	200b      	movs	r0, #11
 800bd16:	bd10      	pop	{r4, pc}
 800bd18:	200b      	movs	r0, #11
 800bd1a:	4770      	bx	lr

0800bd1c <rmw_service_request_subscription_get_actual_qos>:
 800bd1c:	b178      	cbz	r0, 800bd3e <rmw_service_request_subscription_get_actual_qos+0x22>
 800bd1e:	b510      	push	{r4, lr}
 800bd20:	fab1 f481 	clz	r4, r1
 800bd24:	0964      	lsrs	r4, r4, #5
 800bd26:	b141      	cbz	r1, 800bd3a <rmw_service_request_subscription_get_actual_qos+0x1e>
 800bd28:	6843      	ldr	r3, [r0, #4]
 800bd2a:	2250      	movs	r2, #80	; 0x50
 800bd2c:	4608      	mov	r0, r1
 800bd2e:	f103 0120 	add.w	r1, r3, #32
 800bd32:	f008 fe5e 	bl	80149f2 <memcpy>
 800bd36:	4620      	mov	r0, r4
 800bd38:	bd10      	pop	{r4, pc}
 800bd3a:	200b      	movs	r0, #11
 800bd3c:	bd10      	pop	{r4, pc}
 800bd3e:	200b      	movs	r0, #11
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop

0800bd44 <rmw_destroy_subscription>:
 800bd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd48:	b128      	cbz	r0, 800bd56 <rmw_destroy_subscription+0x12>
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	6800      	ldr	r0, [r0, #0]
 800bd4e:	460d      	mov	r5, r1
 800bd50:	f000 fc20 	bl	800c594 <is_uxrce_rmw_identifier_valid>
 800bd54:	b918      	cbnz	r0, 800bd5e <rmw_destroy_subscription+0x1a>
 800bd56:	2401      	movs	r4, #1
 800bd58:	4620      	mov	r0, r4
 800bd5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd5e:	6863      	ldr	r3, [r4, #4]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d0f8      	beq.n	800bd56 <rmw_destroy_subscription+0x12>
 800bd64:	fab5 f485 	clz	r4, r5
 800bd68:	0964      	lsrs	r4, r4, #5
 800bd6a:	2d00      	cmp	r5, #0
 800bd6c:	d0f3      	beq.n	800bd56 <rmw_destroy_subscription+0x12>
 800bd6e:	6828      	ldr	r0, [r5, #0]
 800bd70:	f000 fc10 	bl	800c594 <is_uxrce_rmw_identifier_valid>
 800bd74:	2800      	cmp	r0, #0
 800bd76:	d0ee      	beq.n	800bd56 <rmw_destroy_subscription+0x12>
 800bd78:	686e      	ldr	r6, [r5, #4]
 800bd7a:	2e00      	cmp	r6, #0
 800bd7c:	d0eb      	beq.n	800bd56 <rmw_destroy_subscription+0x12>
 800bd7e:	6a37      	ldr	r7, [r6, #32]
 800bd80:	6972      	ldr	r2, [r6, #20]
 800bd82:	6938      	ldr	r0, [r7, #16]
 800bd84:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800bd88:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bd8c:	6819      	ldr	r1, [r3, #0]
 800bd8e:	f000 fe6d 	bl	800ca6c <uxr_buffer_cancel_data>
 800bd92:	4602      	mov	r2, r0
 800bd94:	6938      	ldr	r0, [r7, #16]
 800bd96:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800bd9a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800bd9e:	f000 fb2d 	bl	800c3fc <run_xrce_session>
 800bda2:	69f0      	ldr	r0, [r6, #28]
 800bda4:	f006 fc04 	bl	80125b0 <destroy_topic>
 800bda8:	6a33      	ldr	r3, [r6, #32]
 800bdaa:	6972      	ldr	r2, [r6, #20]
 800bdac:	6918      	ldr	r0, [r3, #16]
 800bdae:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800bdb2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bdb6:	6819      	ldr	r1, [r3, #0]
 800bdb8:	f000 fc78 	bl	800c6ac <uxr_buffer_delete_entity>
 800bdbc:	6a33      	ldr	r3, [r6, #32]
 800bdbe:	4680      	mov	r8, r0
 800bdc0:	6932      	ldr	r2, [r6, #16]
 800bdc2:	6918      	ldr	r0, [r3, #16]
 800bdc4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800bdc8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bdcc:	6819      	ldr	r1, [r3, #0]
 800bdce:	f000 fc6d 	bl	800c6ac <uxr_buffer_delete_entity>
 800bdd2:	4606      	mov	r6, r0
 800bdd4:	6938      	ldr	r0, [r7, #16]
 800bdd6:	4642      	mov	r2, r8
 800bdd8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800bddc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800bde0:	f000 fb0c 	bl	800c3fc <run_xrce_session>
 800bde4:	693f      	ldr	r7, [r7, #16]
 800bde6:	4632      	mov	r2, r6
 800bde8:	4606      	mov	r6, r0
 800bdea:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800bdee:	4638      	mov	r0, r7
 800bdf0:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800bdf4:	f000 fb02 	bl	800c3fc <run_xrce_session>
 800bdf8:	b126      	cbz	r6, 800be04 <rmw_destroy_subscription+0xc0>
 800bdfa:	b118      	cbz	r0, 800be04 <rmw_destroy_subscription+0xc0>
 800bdfc:	4628      	mov	r0, r5
 800bdfe:	f000 f9af 	bl	800c160 <rmw_uxrce_fini_subscription_memory>
 800be02:	e7a9      	b.n	800bd58 <rmw_destroy_subscription+0x14>
 800be04:	2402      	movs	r4, #2
 800be06:	e7f9      	b.n	800bdfc <rmw_destroy_subscription+0xb8>

0800be08 <rmw_uxrce_transport_init>:
 800be08:	b508      	push	{r3, lr}
 800be0a:	b108      	cbz	r0, 800be10 <rmw_uxrce_transport_init+0x8>
 800be0c:	f100 0210 	add.w	r2, r0, #16
 800be10:	b139      	cbz	r1, 800be22 <rmw_uxrce_transport_init+0x1a>
 800be12:	6949      	ldr	r1, [r1, #20]
 800be14:	4610      	mov	r0, r2
 800be16:	f000 fd87 	bl	800c928 <uxr_init_custom_transport>
 800be1a:	f080 0001 	eor.w	r0, r0, #1
 800be1e:	b2c0      	uxtb	r0, r0
 800be20:	bd08      	pop	{r3, pc}
 800be22:	4b04      	ldr	r3, [pc, #16]	; (800be34 <rmw_uxrce_transport_init+0x2c>)
 800be24:	4610      	mov	r0, r2
 800be26:	6859      	ldr	r1, [r3, #4]
 800be28:	f000 fd7e 	bl	800c928 <uxr_init_custom_transport>
 800be2c:	f080 0001 	eor.w	r0, r0, #1
 800be30:	b2c0      	uxtb	r0, r0
 800be32:	bd08      	pop	{r3, pc}
 800be34:	2000c344 	.word	0x2000c344

0800be38 <rmw_uxrce_init_service_memory>:
 800be38:	b1e2      	cbz	r2, 800be74 <rmw_uxrce_init_service_memory+0x3c>
 800be3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be3e:	7b05      	ldrb	r5, [r0, #12]
 800be40:	4606      	mov	r6, r0
 800be42:	b9ad      	cbnz	r5, 800be70 <rmw_uxrce_init_service_memory+0x38>
 800be44:	23c8      	movs	r3, #200	; 0xc8
 800be46:	4617      	mov	r7, r2
 800be48:	460c      	mov	r4, r1
 800be4a:	46a8      	mov	r8, r5
 800be4c:	6083      	str	r3, [r0, #8]
 800be4e:	f240 1301 	movw	r3, #257	; 0x101
 800be52:	e9c0 5500 	strd	r5, r5, [r0]
 800be56:	8183      	strh	r3, [r0, #12]
 800be58:	3501      	adds	r5, #1
 800be5a:	4621      	mov	r1, r4
 800be5c:	4630      	mov	r0, r6
 800be5e:	f006 fb1f 	bl	80124a0 <put_memory>
 800be62:	42af      	cmp	r7, r5
 800be64:	60a4      	str	r4, [r4, #8]
 800be66:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800be6a:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800be6e:	d1f3      	bne.n	800be58 <rmw_uxrce_init_service_memory+0x20>
 800be70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be74:	4770      	bx	lr
 800be76:	bf00      	nop

0800be78 <rmw_uxrce_init_client_memory>:
 800be78:	b1e2      	cbz	r2, 800beb4 <rmw_uxrce_init_client_memory+0x3c>
 800be7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be7e:	7b05      	ldrb	r5, [r0, #12]
 800be80:	4606      	mov	r6, r0
 800be82:	b9ad      	cbnz	r5, 800beb0 <rmw_uxrce_init_client_memory+0x38>
 800be84:	23c8      	movs	r3, #200	; 0xc8
 800be86:	4617      	mov	r7, r2
 800be88:	460c      	mov	r4, r1
 800be8a:	46a8      	mov	r8, r5
 800be8c:	6083      	str	r3, [r0, #8]
 800be8e:	f240 1301 	movw	r3, #257	; 0x101
 800be92:	e9c0 5500 	strd	r5, r5, [r0]
 800be96:	8183      	strh	r3, [r0, #12]
 800be98:	3501      	adds	r5, #1
 800be9a:	4621      	mov	r1, r4
 800be9c:	4630      	mov	r0, r6
 800be9e:	f006 faff 	bl	80124a0 <put_memory>
 800bea2:	42af      	cmp	r7, r5
 800bea4:	60a4      	str	r4, [r4, #8]
 800bea6:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800beaa:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800beae:	d1f3      	bne.n	800be98 <rmw_uxrce_init_client_memory+0x20>
 800beb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beb4:	4770      	bx	lr
 800beb6:	bf00      	nop

0800beb8 <rmw_uxrce_init_publisher_memory>:
 800beb8:	b1e2      	cbz	r2, 800bef4 <rmw_uxrce_init_publisher_memory+0x3c>
 800beba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bebe:	7b05      	ldrb	r5, [r0, #12]
 800bec0:	4606      	mov	r6, r0
 800bec2:	b9ad      	cbnz	r5, 800bef0 <rmw_uxrce_init_publisher_memory+0x38>
 800bec4:	23d8      	movs	r3, #216	; 0xd8
 800bec6:	4617      	mov	r7, r2
 800bec8:	460c      	mov	r4, r1
 800beca:	46a8      	mov	r8, r5
 800becc:	6083      	str	r3, [r0, #8]
 800bece:	f240 1301 	movw	r3, #257	; 0x101
 800bed2:	e9c0 5500 	strd	r5, r5, [r0]
 800bed6:	8183      	strh	r3, [r0, #12]
 800bed8:	3501      	adds	r5, #1
 800beda:	4621      	mov	r1, r4
 800bedc:	4630      	mov	r0, r6
 800bede:	f006 fadf 	bl	80124a0 <put_memory>
 800bee2:	42af      	cmp	r7, r5
 800bee4:	60a4      	str	r4, [r4, #8]
 800bee6:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800beea:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800beee:	d1f3      	bne.n	800bed8 <rmw_uxrce_init_publisher_memory+0x20>
 800bef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bef4:	4770      	bx	lr
 800bef6:	bf00      	nop

0800bef8 <rmw_uxrce_init_subscription_memory>:
 800bef8:	b1e2      	cbz	r2, 800bf34 <rmw_uxrce_init_subscription_memory+0x3c>
 800befa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800befe:	7b05      	ldrb	r5, [r0, #12]
 800bf00:	4606      	mov	r6, r0
 800bf02:	b9ad      	cbnz	r5, 800bf30 <rmw_uxrce_init_subscription_memory+0x38>
 800bf04:	23d8      	movs	r3, #216	; 0xd8
 800bf06:	4617      	mov	r7, r2
 800bf08:	460c      	mov	r4, r1
 800bf0a:	46a8      	mov	r8, r5
 800bf0c:	6083      	str	r3, [r0, #8]
 800bf0e:	f240 1301 	movw	r3, #257	; 0x101
 800bf12:	e9c0 5500 	strd	r5, r5, [r0]
 800bf16:	8183      	strh	r3, [r0, #12]
 800bf18:	3501      	adds	r5, #1
 800bf1a:	4621      	mov	r1, r4
 800bf1c:	4630      	mov	r0, r6
 800bf1e:	f006 fabf 	bl	80124a0 <put_memory>
 800bf22:	42af      	cmp	r7, r5
 800bf24:	60a4      	str	r4, [r4, #8]
 800bf26:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800bf2a:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800bf2e:	d1f3      	bne.n	800bf18 <rmw_uxrce_init_subscription_memory+0x20>
 800bf30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf34:	4770      	bx	lr
 800bf36:	bf00      	nop

0800bf38 <rmw_uxrce_init_node_memory>:
 800bf38:	b1e2      	cbz	r2, 800bf74 <rmw_uxrce_init_node_memory+0x3c>
 800bf3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf3e:	7b05      	ldrb	r5, [r0, #12]
 800bf40:	4606      	mov	r6, r0
 800bf42:	b9ad      	cbnz	r5, 800bf70 <rmw_uxrce_init_node_memory+0x38>
 800bf44:	23a4      	movs	r3, #164	; 0xa4
 800bf46:	4617      	mov	r7, r2
 800bf48:	460c      	mov	r4, r1
 800bf4a:	46a8      	mov	r8, r5
 800bf4c:	6083      	str	r3, [r0, #8]
 800bf4e:	f240 1301 	movw	r3, #257	; 0x101
 800bf52:	e9c0 5500 	strd	r5, r5, [r0]
 800bf56:	8183      	strh	r3, [r0, #12]
 800bf58:	3501      	adds	r5, #1
 800bf5a:	4621      	mov	r1, r4
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	f006 fa9f 	bl	80124a0 <put_memory>
 800bf62:	42af      	cmp	r7, r5
 800bf64:	60a4      	str	r4, [r4, #8]
 800bf66:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800bf6a:	f804 8c98 	strb.w	r8, [r4, #-152]
 800bf6e:	d1f3      	bne.n	800bf58 <rmw_uxrce_init_node_memory+0x20>
 800bf70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf74:	4770      	bx	lr
 800bf76:	bf00      	nop

0800bf78 <rmw_uxrce_init_session_memory>:
 800bf78:	b1ea      	cbz	r2, 800bfb6 <rmw_uxrce_init_session_memory+0x3e>
 800bf7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf7e:	7b05      	ldrb	r5, [r0, #12]
 800bf80:	4606      	mov	r6, r0
 800bf82:	b9b5      	cbnz	r5, 800bfb2 <rmw_uxrce_init_session_memory+0x3a>
 800bf84:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800bf88:	f240 1301 	movw	r3, #257	; 0x101
 800bf8c:	4617      	mov	r7, r2
 800bf8e:	460c      	mov	r4, r1
 800bf90:	46a9      	mov	r9, r5
 800bf92:	f8c0 8008 	str.w	r8, [r0, #8]
 800bf96:	8183      	strh	r3, [r0, #12]
 800bf98:	e9c0 5500 	strd	r5, r5, [r0]
 800bf9c:	3501      	adds	r5, #1
 800bf9e:	4621      	mov	r1, r4
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	f006 fa7d 	bl	80124a0 <put_memory>
 800bfa6:	42af      	cmp	r7, r5
 800bfa8:	60a4      	str	r4, [r4, #8]
 800bfaa:	f884 900c 	strb.w	r9, [r4, #12]
 800bfae:	4444      	add	r4, r8
 800bfb0:	d1f4      	bne.n	800bf9c <rmw_uxrce_init_session_memory+0x24>
 800bfb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfb6:	4770      	bx	lr

0800bfb8 <rmw_uxrce_init_topic_memory>:
 800bfb8:	b1e2      	cbz	r2, 800bff4 <rmw_uxrce_init_topic_memory+0x3c>
 800bfba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfbe:	7b05      	ldrb	r5, [r0, #12]
 800bfc0:	4606      	mov	r6, r0
 800bfc2:	b9ad      	cbnz	r5, 800bff0 <rmw_uxrce_init_topic_memory+0x38>
 800bfc4:	231c      	movs	r3, #28
 800bfc6:	4617      	mov	r7, r2
 800bfc8:	460c      	mov	r4, r1
 800bfca:	46a8      	mov	r8, r5
 800bfcc:	6083      	str	r3, [r0, #8]
 800bfce:	f240 1301 	movw	r3, #257	; 0x101
 800bfd2:	e9c0 5500 	strd	r5, r5, [r0]
 800bfd6:	8183      	strh	r3, [r0, #12]
 800bfd8:	3501      	adds	r5, #1
 800bfda:	4621      	mov	r1, r4
 800bfdc:	4630      	mov	r0, r6
 800bfde:	f006 fa5f 	bl	80124a0 <put_memory>
 800bfe2:	42af      	cmp	r7, r5
 800bfe4:	60a4      	str	r4, [r4, #8]
 800bfe6:	f104 041c 	add.w	r4, r4, #28
 800bfea:	f804 8c10 	strb.w	r8, [r4, #-16]
 800bfee:	d1f3      	bne.n	800bfd8 <rmw_uxrce_init_topic_memory+0x20>
 800bff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bff4:	4770      	bx	lr
 800bff6:	bf00      	nop

0800bff8 <rmw_uxrce_init_static_input_buffer_memory>:
 800bff8:	b1ea      	cbz	r2, 800c036 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800bffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bffe:	7b05      	ldrb	r5, [r0, #12]
 800c000:	4606      	mov	r6, r0
 800c002:	b9b5      	cbnz	r5, 800c032 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800c004:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800c008:	4617      	mov	r7, r2
 800c00a:	460c      	mov	r4, r1
 800c00c:	46a8      	mov	r8, r5
 800c00e:	6083      	str	r3, [r0, #8]
 800c010:	f240 1301 	movw	r3, #257	; 0x101
 800c014:	e9c0 5500 	strd	r5, r5, [r0]
 800c018:	8183      	strh	r3, [r0, #12]
 800c01a:	3501      	adds	r5, #1
 800c01c:	4621      	mov	r1, r4
 800c01e:	4630      	mov	r0, r6
 800c020:	f006 fa3e 	bl	80124a0 <put_memory>
 800c024:	42af      	cmp	r7, r5
 800c026:	60a4      	str	r4, [r4, #8]
 800c028:	f884 800c 	strb.w	r8, [r4, #12]
 800c02c:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800c030:	d1f3      	bne.n	800c01a <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800c032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c036:	4770      	bx	lr

0800c038 <rmw_uxrce_init_init_options_impl_memory>:
 800c038:	b1e2      	cbz	r2, 800c074 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800c03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c03e:	7b05      	ldrb	r5, [r0, #12]
 800c040:	4606      	mov	r6, r0
 800c042:	b9ad      	cbnz	r5, 800c070 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800c044:	232c      	movs	r3, #44	; 0x2c
 800c046:	4617      	mov	r7, r2
 800c048:	460c      	mov	r4, r1
 800c04a:	46a8      	mov	r8, r5
 800c04c:	6083      	str	r3, [r0, #8]
 800c04e:	f240 1301 	movw	r3, #257	; 0x101
 800c052:	e9c0 5500 	strd	r5, r5, [r0]
 800c056:	8183      	strh	r3, [r0, #12]
 800c058:	3501      	adds	r5, #1
 800c05a:	4621      	mov	r1, r4
 800c05c:	4630      	mov	r0, r6
 800c05e:	f006 fa1f 	bl	80124a0 <put_memory>
 800c062:	42af      	cmp	r7, r5
 800c064:	60a4      	str	r4, [r4, #8]
 800c066:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800c06a:	f804 8c20 	strb.w	r8, [r4, #-32]
 800c06e:	d1f3      	bne.n	800c058 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800c070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c074:	4770      	bx	lr
 800c076:	bf00      	nop

0800c078 <rmw_uxrce_init_wait_set_memory>:
 800c078:	b1e2      	cbz	r2, 800c0b4 <rmw_uxrce_init_wait_set_memory+0x3c>
 800c07a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c07e:	7b05      	ldrb	r5, [r0, #12]
 800c080:	4606      	mov	r6, r0
 800c082:	b9ad      	cbnz	r5, 800c0b0 <rmw_uxrce_init_wait_set_memory+0x38>
 800c084:	231c      	movs	r3, #28
 800c086:	4617      	mov	r7, r2
 800c088:	460c      	mov	r4, r1
 800c08a:	46a8      	mov	r8, r5
 800c08c:	6083      	str	r3, [r0, #8]
 800c08e:	f240 1301 	movw	r3, #257	; 0x101
 800c092:	e9c0 5500 	strd	r5, r5, [r0]
 800c096:	8183      	strh	r3, [r0, #12]
 800c098:	3501      	adds	r5, #1
 800c09a:	4621      	mov	r1, r4
 800c09c:	4630      	mov	r0, r6
 800c09e:	f006 f9ff 	bl	80124a0 <put_memory>
 800c0a2:	42af      	cmp	r7, r5
 800c0a4:	60a4      	str	r4, [r4, #8]
 800c0a6:	f104 041c 	add.w	r4, r4, #28
 800c0aa:	f804 8c10 	strb.w	r8, [r4, #-16]
 800c0ae:	d1f3      	bne.n	800c098 <rmw_uxrce_init_wait_set_memory+0x20>
 800c0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b4:	4770      	bx	lr
 800c0b6:	bf00      	nop

0800c0b8 <rmw_uxrce_init_guard_condition_memory>:
 800c0b8:	b1e2      	cbz	r2, 800c0f4 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800c0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0be:	7b05      	ldrb	r5, [r0, #12]
 800c0c0:	4606      	mov	r6, r0
 800c0c2:	b9ad      	cbnz	r5, 800c0f0 <rmw_uxrce_init_guard_condition_memory+0x38>
 800c0c4:	2320      	movs	r3, #32
 800c0c6:	4617      	mov	r7, r2
 800c0c8:	460c      	mov	r4, r1
 800c0ca:	46a8      	mov	r8, r5
 800c0cc:	6083      	str	r3, [r0, #8]
 800c0ce:	f240 1301 	movw	r3, #257	; 0x101
 800c0d2:	e9c0 5500 	strd	r5, r5, [r0]
 800c0d6:	8183      	strh	r3, [r0, #12]
 800c0d8:	3501      	adds	r5, #1
 800c0da:	4621      	mov	r1, r4
 800c0dc:	4630      	mov	r0, r6
 800c0de:	f006 f9df 	bl	80124a0 <put_memory>
 800c0e2:	42af      	cmp	r7, r5
 800c0e4:	60a4      	str	r4, [r4, #8]
 800c0e6:	f104 0420 	add.w	r4, r4, #32
 800c0ea:	f804 8c14 	strb.w	r8, [r4, #-20]
 800c0ee:	d1f3      	bne.n	800c0d8 <rmw_uxrce_init_guard_condition_memory+0x20>
 800c0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0f4:	4770      	bx	lr
 800c0f6:	bf00      	nop

0800c0f8 <rmw_uxrce_fini_session_memory>:
 800c0f8:	4601      	mov	r1, r0
 800c0fa:	4801      	ldr	r0, [pc, #4]	; (800c100 <rmw_uxrce_fini_session_memory+0x8>)
 800c0fc:	f006 b9d0 	b.w	80124a0 <put_memory>
 800c100:	20010ddc 	.word	0x20010ddc

0800c104 <rmw_uxrce_fini_node_memory>:
 800c104:	b538      	push	{r3, r4, r5, lr}
 800c106:	4604      	mov	r4, r0
 800c108:	6800      	ldr	r0, [r0, #0]
 800c10a:	b128      	cbz	r0, 800c118 <rmw_uxrce_fini_node_memory+0x14>
 800c10c:	4b07      	ldr	r3, [pc, #28]	; (800c12c <rmw_uxrce_fini_node_memory+0x28>)
 800c10e:	6819      	ldr	r1, [r3, #0]
 800c110:	f7f4 f896 	bl	8000240 <strcmp>
 800c114:	b940      	cbnz	r0, 800c128 <rmw_uxrce_fini_node_memory+0x24>
 800c116:	6020      	str	r0, [r4, #0]
 800c118:	6861      	ldr	r1, [r4, #4]
 800c11a:	b129      	cbz	r1, 800c128 <rmw_uxrce_fini_node_memory+0x24>
 800c11c:	2500      	movs	r5, #0
 800c11e:	4804      	ldr	r0, [pc, #16]	; (800c130 <rmw_uxrce_fini_node_memory+0x2c>)
 800c120:	610d      	str	r5, [r1, #16]
 800c122:	f006 f9bd 	bl	80124a0 <put_memory>
 800c126:	6065      	str	r5, [r4, #4]
 800c128:	bd38      	pop	{r3, r4, r5, pc}
 800c12a:	bf00      	nop
 800c12c:	080164c8 	.word	0x080164c8
 800c130:	20010dac 	.word	0x20010dac

0800c134 <rmw_uxrce_fini_publisher_memory>:
 800c134:	b510      	push	{r4, lr}
 800c136:	4604      	mov	r4, r0
 800c138:	6800      	ldr	r0, [r0, #0]
 800c13a:	b128      	cbz	r0, 800c148 <rmw_uxrce_fini_publisher_memory+0x14>
 800c13c:	4b06      	ldr	r3, [pc, #24]	; (800c158 <rmw_uxrce_fini_publisher_memory+0x24>)
 800c13e:	6819      	ldr	r1, [r3, #0]
 800c140:	f7f4 f87e 	bl	8000240 <strcmp>
 800c144:	b938      	cbnz	r0, 800c156 <rmw_uxrce_fini_publisher_memory+0x22>
 800c146:	6020      	str	r0, [r4, #0]
 800c148:	6861      	ldr	r1, [r4, #4]
 800c14a:	b121      	cbz	r1, 800c156 <rmw_uxrce_fini_publisher_memory+0x22>
 800c14c:	4803      	ldr	r0, [pc, #12]	; (800c15c <rmw_uxrce_fini_publisher_memory+0x28>)
 800c14e:	f006 f9a7 	bl	80124a0 <put_memory>
 800c152:	2300      	movs	r3, #0
 800c154:	6063      	str	r3, [r4, #4]
 800c156:	bd10      	pop	{r4, pc}
 800c158:	080164c8 	.word	0x080164c8
 800c15c:	20010dbc 	.word	0x20010dbc

0800c160 <rmw_uxrce_fini_subscription_memory>:
 800c160:	b510      	push	{r4, lr}
 800c162:	4604      	mov	r4, r0
 800c164:	6800      	ldr	r0, [r0, #0]
 800c166:	b128      	cbz	r0, 800c174 <rmw_uxrce_fini_subscription_memory+0x14>
 800c168:	4b06      	ldr	r3, [pc, #24]	; (800c184 <rmw_uxrce_fini_subscription_memory+0x24>)
 800c16a:	6819      	ldr	r1, [r3, #0]
 800c16c:	f7f4 f868 	bl	8000240 <strcmp>
 800c170:	b938      	cbnz	r0, 800c182 <rmw_uxrce_fini_subscription_memory+0x22>
 800c172:	6020      	str	r0, [r4, #0]
 800c174:	6861      	ldr	r1, [r4, #4]
 800c176:	b121      	cbz	r1, 800c182 <rmw_uxrce_fini_subscription_memory+0x22>
 800c178:	4803      	ldr	r0, [pc, #12]	; (800c188 <rmw_uxrce_fini_subscription_memory+0x28>)
 800c17a:	f006 f991 	bl	80124a0 <put_memory>
 800c17e:	2300      	movs	r3, #0
 800c180:	6063      	str	r3, [r4, #4]
 800c182:	bd10      	pop	{r4, pc}
 800c184:	080164c8 	.word	0x080164c8
 800c188:	20010dfc 	.word	0x20010dfc

0800c18c <rmw_uxrce_fini_service_memory>:
 800c18c:	b510      	push	{r4, lr}
 800c18e:	4604      	mov	r4, r0
 800c190:	6800      	ldr	r0, [r0, #0]
 800c192:	b128      	cbz	r0, 800c1a0 <rmw_uxrce_fini_service_memory+0x14>
 800c194:	4b06      	ldr	r3, [pc, #24]	; (800c1b0 <rmw_uxrce_fini_service_memory+0x24>)
 800c196:	6819      	ldr	r1, [r3, #0]
 800c198:	f7f4 f852 	bl	8000240 <strcmp>
 800c19c:	b938      	cbnz	r0, 800c1ae <rmw_uxrce_fini_service_memory+0x22>
 800c19e:	6020      	str	r0, [r4, #0]
 800c1a0:	6861      	ldr	r1, [r4, #4]
 800c1a2:	b121      	cbz	r1, 800c1ae <rmw_uxrce_fini_service_memory+0x22>
 800c1a4:	4803      	ldr	r0, [pc, #12]	; (800c1b4 <rmw_uxrce_fini_service_memory+0x28>)
 800c1a6:	f006 f97b 	bl	80124a0 <put_memory>
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	6063      	str	r3, [r4, #4]
 800c1ae:	bd10      	pop	{r4, pc}
 800c1b0:	080164c8 	.word	0x080164c8
 800c1b4:	20010dcc 	.word	0x20010dcc

0800c1b8 <rmw_uxrce_fini_client_memory>:
 800c1b8:	b510      	push	{r4, lr}
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	6800      	ldr	r0, [r0, #0]
 800c1be:	b128      	cbz	r0, 800c1cc <rmw_uxrce_fini_client_memory+0x14>
 800c1c0:	4b06      	ldr	r3, [pc, #24]	; (800c1dc <rmw_uxrce_fini_client_memory+0x24>)
 800c1c2:	6819      	ldr	r1, [r3, #0]
 800c1c4:	f7f4 f83c 	bl	8000240 <strcmp>
 800c1c8:	b938      	cbnz	r0, 800c1da <rmw_uxrce_fini_client_memory+0x22>
 800c1ca:	6020      	str	r0, [r4, #0]
 800c1cc:	6861      	ldr	r1, [r4, #4]
 800c1ce:	b121      	cbz	r1, 800c1da <rmw_uxrce_fini_client_memory+0x22>
 800c1d0:	4803      	ldr	r0, [pc, #12]	; (800c1e0 <rmw_uxrce_fini_client_memory+0x28>)
 800c1d2:	f006 f965 	bl	80124a0 <put_memory>
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	6063      	str	r3, [r4, #4]
 800c1da:	bd10      	pop	{r4, pc}
 800c1dc:	080164c8 	.word	0x080164c8
 800c1e0:	2000c4dc 	.word	0x2000c4dc

0800c1e4 <rmw_uxrce_fini_topic_memory>:
 800c1e4:	b510      	push	{r4, lr}
 800c1e6:	4604      	mov	r4, r0
 800c1e8:	4803      	ldr	r0, [pc, #12]	; (800c1f8 <rmw_uxrce_fini_topic_memory+0x14>)
 800c1ea:	4621      	mov	r1, r4
 800c1ec:	f006 f958 	bl	80124a0 <put_memory>
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	61a3      	str	r3, [r4, #24]
 800c1f4:	bd10      	pop	{r4, pc}
 800c1f6:	bf00      	nop
 800c1f8:	20010e0c 	.word	0x20010e0c

0800c1fc <rmw_uxrce_get_static_input_buffer_for_entity>:
 800c1fc:	b082      	sub	sp, #8
 800c1fe:	492b      	ldr	r1, [pc, #172]	; (800c2ac <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800c200:	b530      	push	{r4, r5, lr}
 800c202:	680d      	ldr	r5, [r1, #0]
 800c204:	ac03      	add	r4, sp, #12
 800c206:	e884 000c 	stmia.w	r4, {r2, r3}
 800c20a:	461c      	mov	r4, r3
 800c20c:	2d00      	cmp	r5, #0
 800c20e:	d04b      	beq.n	800c2a8 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800c210:	462b      	mov	r3, r5
 800c212:	2100      	movs	r1, #0
 800c214:	689a      	ldr	r2, [r3, #8]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800c21c:	4290      	cmp	r0, r2
 800c21e:	bf08      	it	eq
 800c220:	3101      	addeq	r1, #1
 800c222:	2b00      	cmp	r3, #0
 800c224:	d1f6      	bne.n	800c214 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800c226:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800c22a:	2b02      	cmp	r3, #2
 800c22c:	d029      	beq.n	800c282 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c22e:	d820      	bhi.n	800c272 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800c230:	428c      	cmp	r4, r1
 800c232:	d828      	bhi.n	800c286 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800c234:	fab4 f284 	clz	r2, r4
 800c238:	0952      	lsrs	r2, r2, #5
 800c23a:	b324      	cbz	r4, 800c286 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800c23c:	b1dd      	cbz	r5, 800c276 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800c23e:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c242:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800c246:	e001      	b.n	800c24c <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800c248:	686d      	ldr	r5, [r5, #4]
 800c24a:	b1ad      	cbz	r5, 800c278 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800c24c:	68ab      	ldr	r3, [r5, #8]
 800c24e:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 800c252:	4288      	cmp	r0, r1
 800c254:	d1f8      	bne.n	800c248 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800c256:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 800c25a:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800c25e:	4561      	cmp	r1, ip
 800c260:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800c264:	eb73 0e04 	sbcs.w	lr, r3, r4
 800c268:	daee      	bge.n	800c248 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800c26a:	468c      	mov	ip, r1
 800c26c:	461c      	mov	r4, r3
 800c26e:	462a      	mov	r2, r5
 800c270:	e7ea      	b.n	800c248 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800c272:	2b03      	cmp	r3, #3
 800c274:	d0dc      	beq.n	800c230 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800c276:	2200      	movs	r2, #0
 800c278:	4610      	mov	r0, r2
 800c27a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c27e:	b002      	add	sp, #8
 800c280:	4770      	bx	lr
 800c282:	428c      	cmp	r4, r1
 800c284:	d905      	bls.n	800c292 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800c286:	4809      	ldr	r0, [pc, #36]	; (800c2ac <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800c288:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c28c:	b002      	add	sp, #8
 800c28e:	f006 b8f7 	b.w	8012480 <get_memory>
 800c292:	fab4 f284 	clz	r2, r4
 800c296:	0952      	lsrs	r2, r2, #5
 800c298:	2c00      	cmp	r4, #0
 800c29a:	d1ed      	bne.n	800c278 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800c29c:	4803      	ldr	r0, [pc, #12]	; (800c2ac <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800c29e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2a2:	b002      	add	sp, #8
 800c2a4:	f006 b8ec 	b.w	8012480 <get_memory>
 800c2a8:	4629      	mov	r1, r5
 800c2aa:	e7bc      	b.n	800c226 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800c2ac:	20010dec 	.word	0x20010dec

0800c2b0 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800c2b0:	4b12      	ldr	r3, [pc, #72]	; (800c2fc <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	b530      	push	{r4, r5, lr}
 800c2b6:	b1f3      	cbz	r3, 800c2f6 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800c2b8:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800c2bc:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800c2c0:	2400      	movs	r4, #0
 800c2c2:	e001      	b.n	800c2c8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	b1a3      	cbz	r3, 800c2f2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800c2c8:	689a      	ldr	r2, [r3, #8]
 800c2ca:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800c2ce:	4288      	cmp	r0, r1
 800c2d0:	d1f8      	bne.n	800c2c4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800c2d2:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 800c2d6:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 800c2da:	4571      	cmp	r1, lr
 800c2dc:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800c2e0:	eb72 050c 	sbcs.w	r5, r2, ip
 800c2e4:	daee      	bge.n	800c2c4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800c2e6:	461c      	mov	r4, r3
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	468e      	mov	lr, r1
 800c2ec:	4694      	mov	ip, r2
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d1ea      	bne.n	800c2c8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	bd30      	pop	{r4, r5, pc}
 800c2f6:	461c      	mov	r4, r3
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	bd30      	pop	{r4, r5, pc}
 800c2fc:	20010dec 	.word	0x20010dec

0800c300 <rmw_uxrce_clean_expired_static_input_buffer>:
 800c300:	4b3d      	ldr	r3, [pc, #244]	; (800c3f8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c302:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c306:	681f      	ldr	r7, [r3, #0]
 800c308:	ed2d 8b06 	vpush	{d8-d10}
 800c30c:	b08d      	sub	sp, #52	; 0x34
 800c30e:	f006 fb47 	bl	80129a0 <rmw_uros_epoch_nanos>
 800c312:	2f00      	cmp	r7, #0
 800c314:	d05d      	beq.n	800c3d2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c316:	46b8      	mov	r8, r7
 800c318:	4681      	mov	r9, r0
 800c31a:	468a      	mov	sl, r1
 800c31c:	ac04      	add	r4, sp, #16
 800c31e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c322:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800c326:	2b04      	cmp	r3, #4
 800c328:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 800c3e0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800c32c:	ed9f ab2e 	vldr	d10, [pc, #184]	; 800c3e8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800c330:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 800c3f0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800c334:	d03f      	beq.n	800c3b6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800c336:	2b05      	cmp	r3, #5
 800c338:	d044      	beq.n	800c3c4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800c33a:	2b03      	cmp	r3, #3
 800c33c:	d03b      	beq.n	800c3b6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800c33e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c342:	ed8d ab06 	vstr	d10, [sp, #24]
 800c346:	ab08      	add	r3, sp, #32
 800c348:	ed8d 8b08 	vstr	d8, [sp, #32]
 800c34c:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800c350:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c352:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c356:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c35a:	f005 fe9d 	bl	8012098 <rmw_time_equal>
 800c35e:	b118      	cbz	r0, 800c368 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800c360:	ed8d 9b04 	vstr	d9, [sp, #16]
 800c364:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c368:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 800c36c:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800c370:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800c374:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800c378:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c37c:	f005 fee2 	bl	8012144 <rmw_time_total_nsec>
 800c380:	1830      	adds	r0, r6, r0
 800c382:	eb47 0101 	adc.w	r1, r7, r1
 800c386:	4548      	cmp	r0, r9
 800c388:	eb71 030a 	sbcs.w	r3, r1, sl
 800c38c:	db05      	blt.n	800c39a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800c38e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800c392:	4591      	cmp	r9, r2
 800c394:	eb7a 0303 	sbcs.w	r3, sl, r3
 800c398:	da03      	bge.n	800c3a2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800c39a:	4641      	mov	r1, r8
 800c39c:	4816      	ldr	r0, [pc, #88]	; (800c3f8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c39e:	f006 f87f 	bl	80124a0 <put_memory>
 800c3a2:	f1bb 0f00 	cmp.w	fp, #0
 800c3a6:	d014      	beq.n	800c3d2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c3a8:	46d8      	mov	r8, fp
 800c3aa:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c3ae:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800c3b2:	2b04      	cmp	r3, #4
 800c3b4:	d1bf      	bne.n	800c336 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800c3b6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800c3ba:	3340      	adds	r3, #64	; 0x40
 800c3bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c3be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c3c2:	e7c0      	b.n	800c346 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c3c4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800c3c8:	3348      	adds	r3, #72	; 0x48
 800c3ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c3cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c3d0:	e7b9      	b.n	800c346 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c3d2:	b00d      	add	sp, #52	; 0x34
 800c3d4:	ecbd 8b06 	vpop	{d8-d10}
 800c3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3dc:	f3af 8000 	nop.w
	...
 800c3e8:	00000001 	.word	0x00000001
 800c3ec:	00000000 	.word	0x00000000
 800c3f0:	0000001e 	.word	0x0000001e
 800c3f4:	00000000 	.word	0x00000000
 800c3f8:	20010dec 	.word	0x20010dec

0800c3fc <run_xrce_session>:
 800c3fc:	b510      	push	{r4, lr}
 800c3fe:	788c      	ldrb	r4, [r1, #2]
 800c400:	b086      	sub	sp, #24
 800c402:	2c01      	cmp	r4, #1
 800c404:	f8ad 200e 	strh.w	r2, [sp, #14]
 800c408:	d00c      	beq.n	800c424 <run_xrce_session+0x28>
 800c40a:	2401      	movs	r4, #1
 800c40c:	4619      	mov	r1, r3
 800c40e:	f10d 020e 	add.w	r2, sp, #14
 800c412:	f10d 0317 	add.w	r3, sp, #23
 800c416:	9400      	str	r4, [sp, #0]
 800c418:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c41c:	f001 f91c 	bl	800d658 <uxr_run_session_until_all_status>
 800c420:	b006      	add	sp, #24
 800c422:	bd10      	pop	{r4, pc}
 800c424:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c428:	f000 fd38 	bl	800ce9c <uxr_flash_output_streams>
 800c42c:	4620      	mov	r0, r4
 800c42e:	b006      	add	sp, #24
 800c430:	bd10      	pop	{r4, pc}
 800c432:	bf00      	nop

0800c434 <convert_qos_profile>:
 800c434:	7a4a      	ldrb	r2, [r1, #9]
 800c436:	f891 c008 	ldrb.w	ip, [r1, #8]
 800c43a:	2a02      	cmp	r2, #2
 800c43c:	bf18      	it	ne
 800c43e:	2200      	movne	r2, #0
 800c440:	7002      	strb	r2, [r0, #0]
 800c442:	f1ac 0202 	sub.w	r2, ip, #2
 800c446:	fab2 f282 	clz	r2, r2
 800c44a:	0952      	lsrs	r2, r2, #5
 800c44c:	7042      	strb	r2, [r0, #1]
 800c44e:	780a      	ldrb	r2, [r1, #0]
 800c450:	8889      	ldrh	r1, [r1, #4]
 800c452:	f1a2 0202 	sub.w	r2, r2, #2
 800c456:	8081      	strh	r1, [r0, #4]
 800c458:	fab2 f282 	clz	r2, r2
 800c45c:	0952      	lsrs	r2, r2, #5
 800c45e:	7082      	strb	r2, [r0, #2]
 800c460:	4770      	bx	lr
 800c462:	bf00      	nop

0800c464 <generate_service_topics>:
 800c464:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c466:	461d      	mov	r5, r3
 800c468:	b083      	sub	sp, #12
 800c46a:	4606      	mov	r6, r0
 800c46c:	4c11      	ldr	r4, [pc, #68]	; (800c4b4 <generate_service_topics+0x50>)
 800c46e:	4608      	mov	r0, r1
 800c470:	4b11      	ldr	r3, [pc, #68]	; (800c4b8 <generate_service_topics+0x54>)
 800c472:	4617      	mov	r7, r2
 800c474:	4629      	mov	r1, r5
 800c476:	4a11      	ldr	r2, [pc, #68]	; (800c4bc <generate_service_topics+0x58>)
 800c478:	9401      	str	r4, [sp, #4]
 800c47a:	9600      	str	r6, [sp, #0]
 800c47c:	f008 f82a 	bl	80144d4 <sniprintf>
 800c480:	4a0f      	ldr	r2, [pc, #60]	; (800c4c0 <generate_service_topics+0x5c>)
 800c482:	4604      	mov	r4, r0
 800c484:	4b0f      	ldr	r3, [pc, #60]	; (800c4c4 <generate_service_topics+0x60>)
 800c486:	9201      	str	r2, [sp, #4]
 800c488:	4638      	mov	r0, r7
 800c48a:	4a0c      	ldr	r2, [pc, #48]	; (800c4bc <generate_service_topics+0x58>)
 800c48c:	4629      	mov	r1, r5
 800c48e:	9600      	str	r6, [sp, #0]
 800c490:	f008 f820 	bl	80144d4 <sniprintf>
 800c494:	2c00      	cmp	r4, #0
 800c496:	bfa8      	it	ge
 800c498:	42a5      	cmpge	r5, r4
 800c49a:	bfcc      	ite	gt
 800c49c:	2401      	movgt	r4, #1
 800c49e:	2400      	movle	r4, #0
 800c4a0:	dd05      	ble.n	800c4ae <generate_service_topics+0x4a>
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	bfa8      	it	ge
 800c4a6:	4285      	cmpge	r5, r0
 800c4a8:	bfcc      	ite	gt
 800c4aa:	2401      	movgt	r4, #1
 800c4ac:	2400      	movle	r4, #0
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	b003      	add	sp, #12
 800c4b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4b4:	080160a8 	.word	0x080160a8
 800c4b8:	080160a4 	.word	0x080160a4
 800c4bc:	08016088 	.word	0x08016088
 800c4c0:	0801609c 	.word	0x0801609c
 800c4c4:	08016098 	.word	0x08016098

0800c4c8 <generate_service_types>:
 800c4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4cc:	4606      	mov	r6, r0
 800c4ce:	b087      	sub	sp, #28
 800c4d0:	461c      	mov	r4, r3
 800c4d2:	6883      	ldr	r3, [r0, #8]
 800c4d4:	460d      	mov	r5, r1
 800c4d6:	4617      	mov	r7, r2
 800c4d8:	4798      	blx	r3
 800c4da:	68f3      	ldr	r3, [r6, #12]
 800c4dc:	4606      	mov	r6, r0
 800c4de:	4798      	blx	r3
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800c4e6:	6872      	ldr	r2, [r6, #4]
 800c4e8:	702b      	strb	r3, [r5, #0]
 800c4ea:	6813      	ldr	r3, [r2, #0]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d03f      	beq.n	800c570 <generate_service_types+0xa8>
 800c4f0:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c584 <generate_service_types+0xbc>
 800c4f4:	4649      	mov	r1, r9
 800c4f6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800c58c <generate_service_types+0xc4>
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	f8df a090 	ldr.w	sl, [pc, #144]	; 800c590 <generate_service_types+0xc8>
 800c500:	f8cd 8014 	str.w	r8, [sp, #20]
 800c504:	6852      	ldr	r2, [r2, #4]
 800c506:	9100      	str	r1, [sp, #0]
 800c508:	4621      	mov	r1, r4
 800c50a:	f8cd 8008 	str.w	r8, [sp, #8]
 800c50e:	f8cd a004 	str.w	sl, [sp, #4]
 800c512:	e9cd 9203 	strd	r9, r2, [sp, #12]
 800c516:	4a1a      	ldr	r2, [pc, #104]	; (800c580 <generate_service_types+0xb8>)
 800c518:	f007 ffdc 	bl	80144d4 <sniprintf>
 800c51c:	2300      	movs	r3, #0
 800c51e:	42a0      	cmp	r0, r4
 800c520:	ea6f 0600 	mvn.w	r6, r0
 800c524:	703b      	strb	r3, [r7, #0]
 800c526:	f8db 3000 	ldr.w	r3, [fp]
 800c52a:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 800c52e:	bfac      	ite	ge
 800c530:	2500      	movge	r5, #0
 800c532:	2501      	movlt	r5, #1
 800c534:	b30b      	cbz	r3, 800c57a <generate_service_types+0xb2>
 800c536:	4a13      	ldr	r2, [pc, #76]	; (800c584 <generate_service_types+0xbc>)
 800c538:	f8cd 8014 	str.w	r8, [sp, #20]
 800c53c:	402e      	ands	r6, r5
 800c53e:	f8db 1004 	ldr.w	r1, [fp, #4]
 800c542:	4638      	mov	r0, r7
 800c544:	9104      	str	r1, [sp, #16]
 800c546:	4621      	mov	r1, r4
 800c548:	e9cd 2a00 	strd	r2, sl, [sp]
 800c54c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c550:	4a0b      	ldr	r2, [pc, #44]	; (800c580 <generate_service_types+0xb8>)
 800c552:	f007 ffbf 	bl	80144d4 <sniprintf>
 800c556:	2800      	cmp	r0, #0
 800c558:	bfb4      	ite	lt
 800c55a:	2600      	movlt	r6, #0
 800c55c:	f006 0601 	andge.w	r6, r6, #1
 800c560:	42a0      	cmp	r0, r4
 800c562:	bfac      	ite	ge
 800c564:	2000      	movge	r0, #0
 800c566:	f006 0001 	andlt.w	r0, r6, #1
 800c56a:	b007      	add	sp, #28
 800c56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c570:	4b05      	ldr	r3, [pc, #20]	; (800c588 <generate_service_types+0xc0>)
 800c572:	f8df 9010 	ldr.w	r9, [pc, #16]	; 800c584 <generate_service_types+0xbc>
 800c576:	4619      	mov	r1, r3
 800c578:	e7bd      	b.n	800c4f6 <generate_service_types+0x2e>
 800c57a:	4b03      	ldr	r3, [pc, #12]	; (800c588 <generate_service_types+0xc0>)
 800c57c:	461a      	mov	r2, r3
 800c57e:	e7db      	b.n	800c538 <generate_service_types+0x70>
 800c580:	08016080 	.word	0x08016080
 800c584:	0801607c 	.word	0x0801607c
 800c588:	08015e6c 	.word	0x08015e6c
 800c58c:	08016090 	.word	0x08016090
 800c590:	08016094 	.word	0x08016094

0800c594 <is_uxrce_rmw_identifier_valid>:
 800c594:	b510      	push	{r4, lr}
 800c596:	4604      	mov	r4, r0
 800c598:	b140      	cbz	r0, 800c5ac <is_uxrce_rmw_identifier_valid+0x18>
 800c59a:	f005 ffd9 	bl	8012550 <rmw_get_implementation_identifier>
 800c59e:	4601      	mov	r1, r0
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	f7f3 fe4d 	bl	8000240 <strcmp>
 800c5a6:	fab0 f080 	clz	r0, r0
 800c5aa:	0940      	lsrs	r0, r0, #5
 800c5ac:	bd10      	pop	{r4, pc}
 800c5ae:	bf00      	nop

0800c5b0 <get_message_typesupport_handle_function>:
 800c5b0:	b510      	push	{r4, lr}
 800c5b2:	4604      	mov	r4, r0
 800c5b4:	6800      	ldr	r0, [r0, #0]
 800c5b6:	f7f3 fe43 	bl	8000240 <strcmp>
 800c5ba:	2800      	cmp	r0, #0
 800c5bc:	bf0c      	ite	eq
 800c5be:	4620      	moveq	r0, r4
 800c5c0:	2000      	movne	r0, #0
 800c5c2:	bd10      	pop	{r4, pc}

0800c5c4 <get_service_typesupport_handle>:
 800c5c4:	6883      	ldr	r3, [r0, #8]
 800c5c6:	4718      	bx	r3

0800c5c8 <get_service_typesupport_handle_function>:
 800c5c8:	b510      	push	{r4, lr}
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	6800      	ldr	r0, [r0, #0]
 800c5ce:	f7f3 fe37 	bl	8000240 <strcmp>
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	bf0c      	ite	eq
 800c5d6:	4620      	moveq	r0, r4
 800c5d8:	2000      	movne	r0, #0
 800c5da:	bd10      	pop	{r4, pc}

0800c5dc <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800c5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5e0:	6805      	ldr	r5, [r0, #0]
 800c5e2:	4604      	mov	r4, r0
 800c5e4:	460e      	mov	r6, r1
 800c5e6:	4628      	mov	r0, r5
 800c5e8:	f7f3 fe2a 	bl	8000240 <strcmp>
 800c5ec:	b1c8      	cbz	r0, 800c622 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800c5ee:	4b11      	ldr	r3, [pc, #68]	; (800c634 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	429d      	cmp	r5, r3
 800c5f4:	d112      	bne.n	800c61c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800c5f6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800c5fa:	f8d8 4000 	ldr.w	r4, [r8]
 800c5fe:	b16c      	cbz	r4, 800c61c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800c600:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c604:	2700      	movs	r7, #0
 800c606:	3d04      	subs	r5, #4
 800c608:	4631      	mov	r1, r6
 800c60a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800c60e:	f7f3 fe17 	bl	8000240 <strcmp>
 800c612:	00bb      	lsls	r3, r7, #2
 800c614:	b140      	cbz	r0, 800c628 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800c616:	3701      	adds	r7, #1
 800c618:	42bc      	cmp	r4, r7
 800c61a:	d1f5      	bne.n	800c608 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800c61c:	2000      	movs	r0, #0
 800c61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c622:	4620      	mov	r0, r4
 800c624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c628:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c62c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c630:	58d3      	ldr	r3, [r2, r3]
 800c632:	4718      	bx	r3
 800c634:	200001f4 	.word	0x200001f4

0800c638 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800c638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c63c:	6805      	ldr	r5, [r0, #0]
 800c63e:	4604      	mov	r4, r0
 800c640:	460e      	mov	r6, r1
 800c642:	4628      	mov	r0, r5
 800c644:	f7f3 fdfc 	bl	8000240 <strcmp>
 800c648:	b1c8      	cbz	r0, 800c67e <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800c64a:	4b11      	ldr	r3, [pc, #68]	; (800c690 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	429d      	cmp	r5, r3
 800c650:	d112      	bne.n	800c678 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800c652:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800c656:	f8d8 4000 	ldr.w	r4, [r8]
 800c65a:	b16c      	cbz	r4, 800c678 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800c65c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c660:	2700      	movs	r7, #0
 800c662:	3d04      	subs	r5, #4
 800c664:	4631      	mov	r1, r6
 800c666:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800c66a:	f7f3 fde9 	bl	8000240 <strcmp>
 800c66e:	00bb      	lsls	r3, r7, #2
 800c670:	b140      	cbz	r0, 800c684 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800c672:	3701      	adds	r7, #1
 800c674:	42bc      	cmp	r4, r7
 800c676:	d1f5      	bne.n	800c664 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800c678:	2000      	movs	r0, #0
 800c67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c67e:	4620      	mov	r0, r4
 800c680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c684:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c68c:	58d3      	ldr	r3, [r2, r3]
 800c68e:	4718      	bx	r3
 800c690:	200001f4 	.word	0x200001f4

0800c694 <custom_test_msgs__srv__AddThreeInts_Request__init>:
 800c694:	3800      	subs	r0, #0
 800c696:	bf18      	it	ne
 800c698:	2001      	movne	r0, #1
 800c69a:	4770      	bx	lr

0800c69c <custom_test_msgs__srv__AddThreeInts_Request__fini>:
 800c69c:	4770      	bx	lr
 800c69e:	bf00      	nop

0800c6a0 <custom_test_msgs__srv__AddThreeInts_Response__init>:
 800c6a0:	3800      	subs	r0, #0
 800c6a2:	bf18      	it	ne
 800c6a4:	2001      	movne	r0, #1
 800c6a6:	4770      	bx	lr

0800c6a8 <custom_test_msgs__srv__AddThreeInts_Response__fini>:
 800c6a8:	4770      	bx	lr
 800c6aa:	bf00      	nop

0800c6ac <uxr_buffer_delete_entity>:
 800c6ac:	b510      	push	{r4, lr}
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	b08e      	sub	sp, #56	; 0x38
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	9103      	str	r1, [sp, #12]
 800c6b6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c6ba:	2303      	movs	r3, #3
 800c6bc:	2204      	movs	r2, #4
 800c6be:	9300      	str	r3, [sp, #0]
 800c6c0:	ab06      	add	r3, sp, #24
 800c6c2:	f001 f9f5 	bl	800dab0 <uxr_prepare_stream_to_write_submessage>
 800c6c6:	b918      	cbnz	r0, 800c6d0 <uxr_buffer_delete_entity+0x24>
 800c6c8:	4604      	mov	r4, r0
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	b00e      	add	sp, #56	; 0x38
 800c6ce:	bd10      	pop	{r4, pc}
 800c6d0:	9902      	ldr	r1, [sp, #8]
 800c6d2:	aa05      	add	r2, sp, #20
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	f001 fb27 	bl	800dd28 <uxr_init_base_object_request>
 800c6da:	4604      	mov	r4, r0
 800c6dc:	a905      	add	r1, sp, #20
 800c6de:	a806      	add	r0, sp, #24
 800c6e0:	f002 fe96 	bl	800f410 <uxr_serialize_DELETE_Payload>
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	b00e      	add	sp, #56	; 0x38
 800c6e8:	bd10      	pop	{r4, pc}
 800c6ea:	bf00      	nop

0800c6ec <uxr_common_create_entity>:
 800c6ec:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c6f0:	b510      	push	{r4, lr}
 800c6f2:	f1bc 0f01 	cmp.w	ip, #1
 800c6f6:	b08c      	sub	sp, #48	; 0x30
 800c6f8:	4604      	mov	r4, r0
 800c6fa:	9202      	str	r2, [sp, #8]
 800c6fc:	bf0c      	ite	eq
 800c6fe:	f003 0201 	andeq.w	r2, r3, #1
 800c702:	2200      	movne	r2, #0
 800c704:	330e      	adds	r3, #14
 800c706:	9103      	str	r1, [sp, #12]
 800c708:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800c70c:	441a      	add	r2, r3
 800c70e:	ab04      	add	r3, sp, #16
 800c710:	9101      	str	r1, [sp, #4]
 800c712:	2101      	movs	r1, #1
 800c714:	b292      	uxth	r2, r2
 800c716:	9100      	str	r1, [sp, #0]
 800c718:	9903      	ldr	r1, [sp, #12]
 800c71a:	f001 f9c9 	bl	800dab0 <uxr_prepare_stream_to_write_submessage>
 800c71e:	b918      	cbnz	r0, 800c728 <uxr_common_create_entity+0x3c>
 800c720:	4604      	mov	r4, r0
 800c722:	4620      	mov	r0, r4
 800c724:	b00c      	add	sp, #48	; 0x30
 800c726:	bd10      	pop	{r4, pc}
 800c728:	9902      	ldr	r1, [sp, #8]
 800c72a:	4620      	mov	r0, r4
 800c72c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c72e:	f001 fafb 	bl	800dd28 <uxr_init_base_object_request>
 800c732:	4604      	mov	r4, r0
 800c734:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c736:	a804      	add	r0, sp, #16
 800c738:	f002 fdc4 	bl	800f2c4 <uxr_serialize_CREATE_Payload>
 800c73c:	4620      	mov	r0, r4
 800c73e:	b00c      	add	sp, #48	; 0x30
 800c740:	bd10      	pop	{r4, pc}
 800c742:	bf00      	nop

0800c744 <uxr_buffer_create_participant_bin>:
 800c744:	b570      	push	{r4, r5, r6, lr}
 800c746:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800c74a:	4605      	mov	r5, r0
 800c74c:	ac11      	add	r4, sp, #68	; 0x44
 800c74e:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800c752:	2303      	movs	r3, #3
 800c754:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800c758:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c75c:	7223      	strb	r3, [r4, #8]
 800c75e:	2300      	movs	r3, #0
 800c760:	2201      	movs	r2, #1
 800c762:	f88d 3014 	strb.w	r3, [sp, #20]
 800c766:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 800c768:	7122      	strb	r2, [r4, #4]
 800c76a:	b1cb      	cbz	r3, 800c7a0 <uxr_buffer_create_participant_bin+0x5c>
 800c76c:	f88d 201c 	strb.w	r2, [sp, #28]
 800c770:	9308      	str	r3, [sp, #32]
 800c772:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c776:	a915      	add	r1, sp, #84	; 0x54
 800c778:	a809      	add	r0, sp, #36	; 0x24
 800c77a:	f7fc fdf3 	bl	8009364 <ucdr_init_buffer>
 800c77e:	a905      	add	r1, sp, #20
 800c780:	a809      	add	r0, sp, #36	; 0x24
 800c782:	f002 fb97 	bl	800eeb4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800c786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c788:	9600      	str	r6, [sp, #0]
 800c78a:	4628      	mov	r0, r5
 800c78c:	9401      	str	r4, [sp, #4]
 800c78e:	60e3      	str	r3, [r4, #12]
 800c790:	b29b      	uxth	r3, r3
 800c792:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c796:	f7ff ffa9 	bl	800c6ec <uxr_common_create_entity>
 800c79a:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800c79e:	bd70      	pop	{r4, r5, r6, pc}
 800c7a0:	f88d 301c 	strb.w	r3, [sp, #28]
 800c7a4:	e7e5      	b.n	800c772 <uxr_buffer_create_participant_bin+0x2e>
 800c7a6:	bf00      	nop

0800c7a8 <uxr_buffer_create_replier_bin>:
 800c7a8:	b570      	push	{r4, r5, r6, lr}
 800c7aa:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800c7ae:	4605      	mov	r5, r0
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	9105      	str	r1, [sp, #20]
 800c7b4:	a999      	add	r1, sp, #612	; 0x264
 800c7b6:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 800c7ba:	ac15      	add	r4, sp, #84	; 0x54
 800c7bc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c7c0:	2308      	movs	r3, #8
 800c7c2:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 800c7c6:	f000 f909 	bl	800c9dc <uxr_object_id_to_raw>
 800c7ca:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 800c7cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7d0:	a919      	add	r1, sp, #100	; 0x64
 800c7d2:	a80d      	add	r0, sp, #52	; 0x34
 800c7d4:	9306      	str	r3, [sp, #24]
 800c7d6:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 800c7d8:	9307      	str	r3, [sp, #28]
 800c7da:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 800c7dc:	9308      	str	r3, [sp, #32]
 800c7de:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c7e0:	930c      	str	r3, [sp, #48]	; 0x30
 800c7e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c7e4:	930a      	str	r3, [sp, #40]	; 0x28
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800c7ec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800c7f0:	2303      	movs	r3, #3
 800c7f2:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 800c7f6:	f7fc fdb5 	bl	8009364 <ucdr_init_buffer>
 800c7fa:	a906      	add	r1, sp, #24
 800c7fc:	a80d      	add	r0, sp, #52	; 0x34
 800c7fe:	f002 fb7b 	bl	800eef8 <uxr_serialize_OBJK_Replier_Binary>
 800c802:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c804:	4628      	mov	r0, r5
 800c806:	9600      	str	r6, [sp, #0]
 800c808:	9318      	str	r3, [sp, #96]	; 0x60
 800c80a:	b29b      	uxth	r3, r3
 800c80c:	9401      	str	r4, [sp, #4]
 800c80e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c812:	f7ff ff6b 	bl	800c6ec <uxr_common_create_entity>
 800c816:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 800c81a:	bd70      	pop	{r4, r5, r6, pc}

0800c81c <get_custom_error>:
 800c81c:	4b01      	ldr	r3, [pc, #4]	; (800c824 <get_custom_error+0x8>)
 800c81e:	7818      	ldrb	r0, [r3, #0]
 800c820:	4770      	bx	lr
 800c822:	bf00      	nop
 800c824:	20010e2c 	.word	0x20010e2c

0800c828 <recv_custom_msg>:
 800c828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c82c:	4693      	mov	fp, r2
 800c82e:	b089      	sub	sp, #36	; 0x24
 800c830:	2200      	movs	r2, #0
 800c832:	4604      	mov	r4, r0
 800c834:	468a      	mov	sl, r1
 800c836:	9305      	str	r3, [sp, #20]
 800c838:	f88d 201e 	strb.w	r2, [sp, #30]
 800c83c:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 800c840:	b322      	cbz	r2, 800c88c <recv_custom_msg+0x64>
 800c842:	f200 2902 	addw	r9, r0, #514	; 0x202
 800c846:	f10d 081f 	add.w	r8, sp, #31
 800c84a:	af05      	add	r7, sp, #20
 800c84c:	f10d 061e 	add.w	r6, sp, #30
 800c850:	f44f 7500 	mov.w	r5, #512	; 0x200
 800c854:	e002      	b.n	800c85c <recv_custom_msg+0x34>
 800c856:	9b05      	ldr	r3, [sp, #20]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	dd0f      	ble.n	800c87c <recv_custom_msg+0x54>
 800c85c:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 800c860:	4623      	mov	r3, r4
 800c862:	4622      	mov	r2, r4
 800c864:	4648      	mov	r0, r9
 800c866:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800c86a:	e9cd 5600 	strd	r5, r6, [sp]
 800c86e:	f001 fc71 	bl	800e154 <uxr_read_framed_msg>
 800c872:	2800      	cmp	r0, #0
 800c874:	d0ef      	beq.n	800c856 <recv_custom_msg+0x2e>
 800c876:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800c87a:	b1b3      	cbz	r3, 800c8aa <recv_custom_msg+0x82>
 800c87c:	4b0f      	ldr	r3, [pc, #60]	; (800c8bc <recv_custom_msg+0x94>)
 800c87e:	2000      	movs	r0, #0
 800c880:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800c884:	701a      	strb	r2, [r3, #0]
 800c886:	b009      	add	sp, #36	; 0x24
 800c888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c88c:	f10d 021f 	add.w	r2, sp, #31
 800c890:	4601      	mov	r1, r0
 800c892:	9200      	str	r2, [sp, #0]
 800c894:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c898:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 800c89c:	47a8      	blx	r5
 800c89e:	2800      	cmp	r0, #0
 800c8a0:	d0ec      	beq.n	800c87c <recv_custom_msg+0x54>
 800c8a2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d1e8      	bne.n	800c87c <recv_custom_msg+0x54>
 800c8aa:	f8cb 0000 	str.w	r0, [fp]
 800c8ae:	2001      	movs	r0, #1
 800c8b0:	f8ca 4000 	str.w	r4, [sl]
 800c8b4:	b009      	add	sp, #36	; 0x24
 800c8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ba:	bf00      	nop
 800c8bc:	20010e2c 	.word	0x20010e2c

0800c8c0 <send_custom_msg>:
 800c8c0:	b530      	push	{r4, r5, lr}
 800c8c2:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 800c8c6:	b087      	sub	sp, #28
 800c8c8:	4614      	mov	r4, r2
 800c8ca:	b995      	cbnz	r5, 800c8f2 <send_custom_msg+0x32>
 800c8cc:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 800c8d0:	f10d 0317 	add.w	r3, sp, #23
 800c8d4:	47a8      	blx	r5
 800c8d6:	1e03      	subs	r3, r0, #0
 800c8d8:	bf18      	it	ne
 800c8da:	2301      	movne	r3, #1
 800c8dc:	42a0      	cmp	r0, r4
 800c8de:	bf18      	it	ne
 800c8e0:	2300      	movne	r3, #0
 800c8e2:	b91b      	cbnz	r3, 800c8ec <send_custom_msg+0x2c>
 800c8e4:	4a0a      	ldr	r2, [pc, #40]	; (800c910 <send_custom_msg+0x50>)
 800c8e6:	f89d 1017 	ldrb.w	r1, [sp, #23]
 800c8ea:	7011      	strb	r1, [r2, #0]
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	b007      	add	sp, #28
 800c8f0:	bd30      	pop	{r4, r5, pc}
 800c8f2:	460b      	mov	r3, r1
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	f10d 0117 	add.w	r1, sp, #23
 800c8fa:	9400      	str	r4, [sp, #0]
 800c8fc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c900:	4602      	mov	r2, r0
 800c902:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 800c906:	f200 2002 	addw	r0, r0, #514	; 0x202
 800c90a:	f001 fa45 	bl	800dd98 <uxr_write_framed_msg>
 800c90e:	e7e2      	b.n	800c8d6 <send_custom_msg+0x16>
 800c910:	20010e2c 	.word	0x20010e2c

0800c914 <uxr_set_custom_transport_callbacks>:
 800c914:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 800c918:	9901      	ldr	r1, [sp, #4]
 800c91a:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 800c91e:	9b00      	ldr	r3, [sp, #0]
 800c920:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop

0800c928 <uxr_init_custom_transport>:
 800c928:	b538      	push	{r3, r4, r5, lr}
 800c92a:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 800c92e:	b303      	cbz	r3, 800c972 <uxr_init_custom_transport+0x4a>
 800c930:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800c934:	4604      	mov	r4, r0
 800c936:	b1e2      	cbz	r2, 800c972 <uxr_init_custom_transport+0x4a>
 800c938:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800c93c:	b1ca      	cbz	r2, 800c972 <uxr_init_custom_transport+0x4a>
 800c93e:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 800c942:	b1b2      	cbz	r2, 800c972 <uxr_init_custom_transport+0x4a>
 800c944:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 800c948:	4798      	blx	r3
 800c94a:	4605      	mov	r5, r0
 800c94c:	b188      	cbz	r0, 800c972 <uxr_init_custom_transport+0x4a>
 800c94e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800c952:	b98b      	cbnz	r3, 800c978 <uxr_init_custom_transport+0x50>
 800c954:	4b0b      	ldr	r3, [pc, #44]	; (800c984 <uxr_init_custom_transport+0x5c>)
 800c956:	4628      	mov	r0, r5
 800c958:	490b      	ldr	r1, [pc, #44]	; (800c988 <uxr_init_custom_transport+0x60>)
 800c95a:	4a0c      	ldr	r2, [pc, #48]	; (800c98c <uxr_init_custom_transport+0x64>)
 800c95c:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 800c960:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c964:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 800c968:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 800c96c:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 800c970:	bd38      	pop	{r3, r4, r5, pc}
 800c972:	2500      	movs	r5, #0
 800c974:	4628      	mov	r0, r5
 800c976:	bd38      	pop	{r3, r4, r5, pc}
 800c978:	2100      	movs	r1, #0
 800c97a:	f204 2002 	addw	r0, r4, #514	; 0x202
 800c97e:	f001 fa05 	bl	800dd8c <uxr_init_framing_io>
 800c982:	e7e7      	b.n	800c954 <uxr_init_custom_transport+0x2c>
 800c984:	0800c829 	.word	0x0800c829
 800c988:	0800c8c1 	.word	0x0800c8c1
 800c98c:	0800c81d 	.word	0x0800c81d

0800c990 <uxr_close_custom_transport>:
 800c990:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800c994:	4718      	bx	r3
 800c996:	bf00      	nop

0800c998 <uxr_object_id>:
 800c998:	b082      	sub	sp, #8
 800c99a:	2300      	movs	r3, #0
 800c99c:	f88d 1006 	strb.w	r1, [sp, #6]
 800c9a0:	f360 030f 	bfi	r3, r0, #0, #16
 800c9a4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c9a8:	f362 431f 	bfi	r3, r2, #16, #16
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	b002      	add	sp, #8
 800c9b0:	4770      	bx	lr
 800c9b2:	bf00      	nop

0800c9b4 <uxr_object_id_from_raw>:
 800c9b4:	7843      	ldrb	r3, [r0, #1]
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	7801      	ldrb	r1, [r0, #0]
 800c9ba:	2000      	movs	r0, #0
 800c9bc:	091a      	lsrs	r2, r3, #4
 800c9be:	f003 030f 	and.w	r3, r3, #15
 800c9c2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c9c6:	f88d 3006 	strb.w	r3, [sp, #6]
 800c9ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c9ce:	f362 000f 	bfi	r0, r2, #0, #16
 800c9d2:	f363 401f 	bfi	r0, r3, #16, #16
 800c9d6:	b002      	add	sp, #8
 800c9d8:	4770      	bx	lr
 800c9da:	bf00      	nop

0800c9dc <uxr_object_id_to_raw>:
 800c9dc:	4602      	mov	r2, r0
 800c9de:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800c9e8:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800c9ec:	f881 c000 	strb.w	ip, [r1]
 800c9f0:	7048      	strb	r0, [r1, #1]
 800c9f2:	b002      	add	sp, #8
 800c9f4:	4770      	bx	lr
 800c9f6:	bf00      	nop

0800c9f8 <uxr_buffer_request_data>:
 800c9f8:	b530      	push	{r4, r5, lr}
 800c9fa:	b095      	sub	sp, #84	; 0x54
 800c9fc:	4604      	mov	r4, r0
 800c9fe:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800ca00:	9303      	str	r3, [sp, #12]
 800ca02:	2d00      	cmp	r5, #0
 800ca04:	f88d 301c 	strb.w	r3, [sp, #28]
 800ca08:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800ca0c:	f04f 0200 	mov.w	r2, #0
 800ca10:	bf14      	ite	ne
 800ca12:	2101      	movne	r1, #1
 800ca14:	4611      	moveq	r1, r2
 800ca16:	f88d 201d 	strb.w	r2, [sp, #29]
 800ca1a:	f88d 201e 	strb.w	r2, [sp, #30]
 800ca1e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800ca22:	d021      	beq.n	800ca68 <uxr_buffer_request_data+0x70>
 800ca24:	686b      	ldr	r3, [r5, #4]
 800ca26:	2210      	movs	r2, #16
 800ca28:	6829      	ldr	r1, [r5, #0]
 800ca2a:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 800ca2e:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 800ca32:	2308      	movs	r3, #8
 800ca34:	2100      	movs	r1, #0
 800ca36:	4620      	mov	r0, r4
 800ca38:	e9cd 3100 	strd	r3, r1, [sp]
 800ca3c:	ab0c      	add	r3, sp, #48	; 0x30
 800ca3e:	9905      	ldr	r1, [sp, #20]
 800ca40:	f001 f836 	bl	800dab0 <uxr_prepare_stream_to_write_submessage>
 800ca44:	b918      	cbnz	r0, 800ca4e <uxr_buffer_request_data+0x56>
 800ca46:	4604      	mov	r4, r0
 800ca48:	4620      	mov	r0, r4
 800ca4a:	b015      	add	sp, #84	; 0x54
 800ca4c:	bd30      	pop	{r4, r5, pc}
 800ca4e:	9904      	ldr	r1, [sp, #16]
 800ca50:	aa06      	add	r2, sp, #24
 800ca52:	4620      	mov	r0, r4
 800ca54:	f001 f968 	bl	800dd28 <uxr_init_base_object_request>
 800ca58:	4604      	mov	r4, r0
 800ca5a:	a906      	add	r1, sp, #24
 800ca5c:	a80c      	add	r0, sp, #48	; 0x30
 800ca5e:	f002 fd81 	bl	800f564 <uxr_serialize_READ_DATA_Payload>
 800ca62:	4620      	mov	r0, r4
 800ca64:	b015      	add	sp, #84	; 0x54
 800ca66:	bd30      	pop	{r4, r5, pc}
 800ca68:	2208      	movs	r2, #8
 800ca6a:	e7e2      	b.n	800ca32 <uxr_buffer_request_data+0x3a>

0800ca6c <uxr_buffer_cancel_data>:
 800ca6c:	b510      	push	{r4, lr}
 800ca6e:	2300      	movs	r3, #0
 800ca70:	b094      	sub	sp, #80	; 0x50
 800ca72:	4604      	mov	r4, r0
 800ca74:	9205      	str	r2, [sp, #20]
 800ca76:	9301      	str	r3, [sp, #4]
 800ca78:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ca7c:	f88d 301e 	strb.w	r3, [sp, #30]
 800ca80:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 800ca84:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 800ca88:	2308      	movs	r3, #8
 800ca8a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800ca8e:	2201      	movs	r2, #1
 800ca90:	9300      	str	r3, [sp, #0]
 800ca92:	ab0c      	add	r3, sp, #48	; 0x30
 800ca94:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 800ca98:	2210      	movs	r2, #16
 800ca9a:	f001 f809 	bl	800dab0 <uxr_prepare_stream_to_write_submessage>
 800ca9e:	b918      	cbnz	r0, 800caa8 <uxr_buffer_cancel_data+0x3c>
 800caa0:	4604      	mov	r4, r0
 800caa2:	4620      	mov	r0, r4
 800caa4:	b014      	add	sp, #80	; 0x50
 800caa6:	bd10      	pop	{r4, pc}
 800caa8:	9905      	ldr	r1, [sp, #20]
 800caaa:	aa06      	add	r2, sp, #24
 800caac:	4620      	mov	r0, r4
 800caae:	f001 f93b 	bl	800dd28 <uxr_init_base_object_request>
 800cab2:	4604      	mov	r4, r0
 800cab4:	a906      	add	r1, sp, #24
 800cab6:	a80c      	add	r0, sp, #48	; 0x30
 800cab8:	f002 fd54 	bl	800f564 <uxr_serialize_READ_DATA_Payload>
 800cabc:	4620      	mov	r0, r4
 800cabe:	b014      	add	sp, #80	; 0x50
 800cac0:	bd10      	pop	{r4, pc}
 800cac2:	bf00      	nop

0800cac4 <read_submessage_format>:
 800cac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cac8:	b095      	sub	sp, #84	; 0x54
 800caca:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 800cace:	b113      	cbz	r3, 800cad6 <read_submessage_format+0x12>
 800cad0:	b015      	add	sp, #84	; 0x54
 800cad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cad6:	4606      	mov	r6, r0
 800cad8:	981c      	ldr	r0, [sp, #112]	; 0x70
 800cada:	460c      	mov	r4, r1
 800cadc:	4615      	mov	r5, r2
 800cade:	9004      	str	r0, [sp, #16]
 800cae0:	4699      	mov	r9, r3
 800cae2:	981d      	ldr	r0, [sp, #116]	; 0x74
 800cae4:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 800cae8:	9005      	str	r0, [sp, #20]
 800caea:	a80c      	add	r0, sp, #48	; 0x30
 800caec:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800caf0:	1a52      	subs	r2, r2, r1
 800caf2:	f7fc fc37 	bl	8009364 <ucdr_init_buffer>
 800caf6:	a80c      	add	r0, sp, #48	; 0x30
 800caf8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800cafc:	f7fc fc06 	bl	800930c <ucdr_set_on_full_buffer_callback>
 800cb00:	69e2      	ldr	r2, [r4, #28]
 800cb02:	b19a      	cbz	r2, 800cb2c <read_submessage_format+0x68>
 800cb04:	f1b8 0f07 	cmp.w	r8, #7
 800cb08:	f882 9014 	strb.w	r9, [r2, #20]
 800cb0c:	d040      	beq.n	800cb90 <read_submessage_format+0xcc>
 800cb0e:	f1b8 0f08 	cmp.w	r8, #8
 800cb12:	d02e      	beq.n	800cb72 <read_submessage_format+0xae>
 800cb14:	f1b8 0f06 	cmp.w	r8, #6
 800cb18:	d011      	beq.n	800cb3e <read_submessage_format+0x7a>
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	7513      	strb	r3, [r2, #20]
 800cb1e:	4629      	mov	r1, r5
 800cb20:	4620      	mov	r0, r4
 800cb22:	f7fc fc73 	bl	800940c <ucdr_advance_buffer>
 800cb26:	b015      	add	sp, #84	; 0x54
 800cb28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb2c:	f1b8 0f07 	cmp.w	r8, #7
 800cb30:	d02e      	beq.n	800cb90 <read_submessage_format+0xcc>
 800cb32:	f1b8 0f08 	cmp.w	r8, #8
 800cb36:	d01c      	beq.n	800cb72 <read_submessage_format+0xae>
 800cb38:	f1b8 0f06 	cmp.w	r8, #6
 800cb3c:	d1ef      	bne.n	800cb1e <read_submessage_format+0x5a>
 800cb3e:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 800cb42:	f1b8 0f00 	cmp.w	r8, #0
 800cb46:	d011      	beq.n	800cb6c <read_submessage_format+0xa8>
 800cb48:	ab0c      	add	r3, sp, #48	; 0x30
 800cb4a:	9501      	str	r5, [sp, #4]
 800cb4c:	463a      	mov	r2, r7
 800cb4e:	4630      	mov	r0, r6
 800cb50:	9300      	str	r3, [sp, #0]
 800cb52:	2306      	movs	r3, #6
 800cb54:	f88d 3016 	strb.w	r3, [sp, #22]
 800cb58:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 800cb5c:	9302      	str	r3, [sp, #8]
 800cb5e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800cb62:	47c0      	blx	r8
 800cb64:	2301      	movs	r3, #1
 800cb66:	69e2      	ldr	r2, [r4, #28]
 800cb68:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 800cb6c:	2a00      	cmp	r2, #0
 800cb6e:	d1d4      	bne.n	800cb1a <read_submessage_format+0x56>
 800cb70:	e7d5      	b.n	800cb1e <read_submessage_format+0x5a>
 800cb72:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d0f8      	beq.n	800cb6c <read_submessage_format+0xa8>
 800cb7a:	a80c      	add	r0, sp, #48	; 0x30
 800cb7c:	a906      	add	r1, sp, #24
 800cb7e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800cb82:	f002 fdbb 	bl	800f6fc <uxr_deserialize_SampleIdentity>
 800cb86:	b9a0      	cbnz	r0, 800cbb2 <read_submessage_format+0xee>
 800cb88:	69e2      	ldr	r2, [r4, #28]
 800cb8a:	2a00      	cmp	r2, #0
 800cb8c:	d1c5      	bne.n	800cb1a <read_submessage_format+0x56>
 800cb8e:	e7c6      	b.n	800cb1e <read_submessage_format+0x5a>
 800cb90:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 800cb94:	b13b      	cbz	r3, 800cba6 <read_submessage_format+0xe2>
 800cb96:	a906      	add	r1, sp, #24
 800cb98:	a80c      	add	r0, sp, #48	; 0x30
 800cb9a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800cb9e:	f002 fa81 	bl	800f0a4 <uxr_deserialize_BaseObjectRequest>
 800cba2:	bb60      	cbnz	r0, 800cbfe <read_submessage_format+0x13a>
 800cba4:	69e2      	ldr	r2, [r4, #28]
 800cba6:	68a3      	ldr	r3, [r4, #8]
 800cba8:	442b      	add	r3, r5
 800cbaa:	60a3      	str	r3, [r4, #8]
 800cbac:	2a00      	cmp	r2, #0
 800cbae:	d1b4      	bne.n	800cb1a <read_submessage_format+0x56>
 800cbb0:	e7b5      	b.n	800cb1e <read_submessage_format+0x5a>
 800cbb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cbb4:	a80c      	add	r0, sp, #48	; 0x30
 800cbb6:	eba8 0803 	sub.w	r8, r8, r3
 800cbba:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800cbbe:	44a8      	add	r8, r5
 800cbc0:	1a52      	subs	r2, r2, r1
 800cbc2:	f7fc fbcf 	bl	8009364 <ucdr_init_buffer>
 800cbc6:	a80c      	add	r0, sp, #48	; 0x30
 800cbc8:	fa1f f888 	uxth.w	r8, r8
 800cbcc:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800cbd0:	f7fc fb9c 	bl	800930c <ucdr_set_on_full_buffer_callback>
 800cbd4:	ab0c      	add	r3, sp, #48	; 0x30
 800cbd6:	2108      	movs	r1, #8
 800cbd8:	f8cd 8004 	str.w	r8, [sp, #4]
 800cbdc:	9300      	str	r3, [sp, #0]
 800cbde:	463a      	mov	r2, r7
 800cbe0:	f88d 1016 	strb.w	r1, [sp, #22]
 800cbe4:	ab06      	add	r3, sp, #24
 800cbe6:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 800cbea:	4630      	mov	r0, r6
 800cbec:	9102      	str	r1, [sp, #8]
 800cbee:	9905      	ldr	r1, [sp, #20]
 800cbf0:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 800cbf4:	47b8      	blx	r7
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 800cbfc:	e7c4      	b.n	800cb88 <read_submessage_format+0xc4>
 800cbfe:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800cc02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc04:	a80c      	add	r0, sp, #48	; 0x30
 800cc06:	1a52      	subs	r2, r2, r1
 800cc08:	eba8 0803 	sub.w	r8, r8, r3
 800cc0c:	f7fc fbaa 	bl	8009364 <ucdr_init_buffer>
 800cc10:	a80c      	add	r0, sp, #48	; 0x30
 800cc12:	44a8      	add	r8, r5
 800cc14:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800cc18:	f7fc fb78 	bl	800930c <ucdr_set_on_full_buffer_callback>
 800cc1c:	ab0c      	add	r3, sp, #48	; 0x30
 800cc1e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800cc22:	fa1f f888 	uxth.w	r8, r8
 800cc26:	9300      	str	r3, [sp, #0]
 800cc28:	463a      	mov	r2, r7
 800cc2a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800cc2e:	4630      	mov	r0, r6
 800cc30:	f8cd 8004 	str.w	r8, [sp, #4]
 800cc34:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800cc38:	2107      	movs	r1, #7
 800cc3a:	f88d 1016 	strb.w	r1, [sp, #22]
 800cc3e:	b29b      	uxth	r3, r3
 800cc40:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 800cc44:	9102      	str	r1, [sp, #8]
 800cc46:	9905      	ldr	r1, [sp, #20]
 800cc48:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 800cc4c:	47b8      	blx	r7
 800cc4e:	2301      	movs	r3, #1
 800cc50:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 800cc54:	e7a6      	b.n	800cba4 <read_submessage_format+0xe0>
 800cc56:	bf00      	nop

0800cc58 <on_get_fragmentation_info>:
 800cc58:	b500      	push	{lr}
 800cc5a:	b08b      	sub	sp, #44	; 0x2c
 800cc5c:	4601      	mov	r1, r0
 800cc5e:	2204      	movs	r2, #4
 800cc60:	a802      	add	r0, sp, #8
 800cc62:	f7fc fb7f 	bl	8009364 <ucdr_init_buffer>
 800cc66:	f10d 0305 	add.w	r3, sp, #5
 800cc6a:	f10d 0206 	add.w	r2, sp, #6
 800cc6e:	a901      	add	r1, sp, #4
 800cc70:	a802      	add	r0, sp, #8
 800cc72:	f001 fe5f 	bl	800e934 <uxr_read_submessage_header>
 800cc76:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cc7a:	2b0d      	cmp	r3, #13
 800cc7c:	d003      	beq.n	800cc86 <on_get_fragmentation_info+0x2e>
 800cc7e:	2000      	movs	r0, #0
 800cc80:	b00b      	add	sp, #44	; 0x2c
 800cc82:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc86:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cc8a:	f013 0f02 	tst.w	r3, #2
 800cc8e:	bf14      	ite	ne
 800cc90:	2002      	movne	r0, #2
 800cc92:	2001      	moveq	r0, #1
 800cc94:	b00b      	add	sp, #44	; 0x2c
 800cc96:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc9a:	bf00      	nop

0800cc9c <read_submessage_get_info>:
 800cc9c:	b570      	push	{r4, r5, r6, lr}
 800cc9e:	2500      	movs	r5, #0
 800cca0:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800cca4:	460e      	mov	r6, r1
 800cca6:	4604      	mov	r4, r0
 800cca8:	f44f 7224 	mov.w	r2, #656	; 0x290
 800ccac:	4629      	mov	r1, r5
 800ccae:	a810      	add	r0, sp, #64	; 0x40
 800ccb0:	9503      	str	r5, [sp, #12]
 800ccb2:	9504      	str	r5, [sp, #16]
 800ccb4:	f007 fd7e 	bl	80147b4 <memset>
 800ccb8:	a903      	add	r1, sp, #12
 800ccba:	4630      	mov	r0, r6
 800ccbc:	f002 fb92 	bl	800f3e4 <uxr_deserialize_GET_INFO_Payload>
 800ccc0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800ccca:	f001 f825 	bl	800dd18 <uxr_session_header_offset>
 800ccce:	462b      	mov	r3, r5
 800ccd0:	220c      	movs	r2, #12
 800ccd2:	a905      	add	r1, sp, #20
 800ccd4:	9000      	str	r0, [sp, #0]
 800ccd6:	a808      	add	r0, sp, #32
 800ccd8:	f7fc fb32 	bl	8009340 <ucdr_init_buffer_origin_offset>
 800ccdc:	a910      	add	r1, sp, #64	; 0x40
 800ccde:	a808      	add	r0, sp, #32
 800cce0:	f002 fbf4 	bl	800f4cc <uxr_serialize_INFO_Payload>
 800cce4:	9b08      	ldr	r3, [sp, #32]
 800cce6:	462a      	mov	r2, r5
 800cce8:	4629      	mov	r1, r5
 800ccea:	4620      	mov	r0, r4
 800ccec:	f000 ffc0 	bl	800dc70 <uxr_stamp_session_header>
 800ccf0:	a808      	add	r0, sp, #32
 800ccf2:	f7fc fb65 	bl	80093c0 <ucdr_buffer_length>
 800ccf6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	a905      	add	r1, sp, #20
 800ccfc:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cd00:	47a0      	blx	r4
 800cd02:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800cd06:	bd70      	pop	{r4, r5, r6, pc}

0800cd08 <write_submessage_acknack.isra.0>:
 800cd08:	b570      	push	{r4, r5, r6, lr}
 800cd0a:	b092      	sub	sp, #72	; 0x48
 800cd0c:	4605      	mov	r5, r0
 800cd0e:	460e      	mov	r6, r1
 800cd10:	4614      	mov	r4, r2
 800cd12:	f001 f801 	bl	800dd18 <uxr_session_header_offset>
 800cd16:	a905      	add	r1, sp, #20
 800cd18:	9000      	str	r0, [sp, #0]
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	a80a      	add	r0, sp, #40	; 0x28
 800cd1e:	2211      	movs	r2, #17
 800cd20:	f7fc fb0e 	bl	8009340 <ucdr_init_buffer_origin_offset>
 800cd24:	2218      	movs	r2, #24
 800cd26:	2300      	movs	r3, #0
 800cd28:	210a      	movs	r1, #10
 800cd2a:	fb02 5404 	mla	r4, r2, r4, r5
 800cd2e:	a80a      	add	r0, sp, #40	; 0x28
 800cd30:	2205      	movs	r2, #5
 800cd32:	3450      	adds	r4, #80	; 0x50
 800cd34:	f001 fde4 	bl	800e900 <uxr_buffer_submessage_header>
 800cd38:	a903      	add	r1, sp, #12
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	f006 f97a 	bl	8013034 <uxr_compute_acknack>
 800cd40:	ba40      	rev16	r0, r0
 800cd42:	a903      	add	r1, sp, #12
 800cd44:	f88d 6010 	strb.w	r6, [sp, #16]
 800cd48:	f8ad 000e 	strh.w	r0, [sp, #14]
 800cd4c:	a80a      	add	r0, sp, #40	; 0x28
 800cd4e:	f002 fc2f 	bl	800f5b0 <uxr_serialize_ACKNACK_Payload>
 800cd52:	2200      	movs	r2, #0
 800cd54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd56:	4628      	mov	r0, r5
 800cd58:	4611      	mov	r1, r2
 800cd5a:	f000 ff89 	bl	800dc70 <uxr_stamp_session_header>
 800cd5e:	a80a      	add	r0, sp, #40	; 0x28
 800cd60:	f7fc fb2e 	bl	80093c0 <ucdr_buffer_length>
 800cd64:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800cd66:	4602      	mov	r2, r0
 800cd68:	a905      	add	r1, sp, #20
 800cd6a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cd6e:	47a0      	blx	r4
 800cd70:	b012      	add	sp, #72	; 0x48
 800cd72:	bd70      	pop	{r4, r5, r6, pc}
 800cd74:	0000      	movs	r0, r0
	...

0800cd78 <uxr_init_session>:
 800cd78:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800cdb0 <uxr_init_session+0x38>
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	b510      	push	{r4, lr}
 800cd80:	4604      	mov	r4, r0
 800cd82:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800cd86:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800cd8a:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800cd8e:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800cd92:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800cd96:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800cd9a:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800cd9e:	2181      	movs	r1, #129	; 0x81
 800cda0:	f000 feca 	bl	800db38 <uxr_init_session_info>
 800cda4:	f104 0008 	add.w	r0, r4, #8
 800cda8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdac:	f001 bcc4 	b.w	800e738 <uxr_init_stream_storage>
	...

0800cdb8 <uxr_set_status_callback>:
 800cdb8:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800cdbc:	4770      	bx	lr
 800cdbe:	bf00      	nop

0800cdc0 <uxr_set_topic_callback>:
 800cdc0:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800cdc4:	4770      	bx	lr
 800cdc6:	bf00      	nop

0800cdc8 <uxr_set_request_callback>:
 800cdc8:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800cdcc:	4770      	bx	lr
 800cdce:	bf00      	nop

0800cdd0 <uxr_set_reply_callback>:
 800cdd0:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800cdd4:	4770      	bx	lr
 800cdd6:	bf00      	nop

0800cdd8 <uxr_create_output_best_effort_stream>:
 800cdd8:	b510      	push	{r4, lr}
 800cdda:	4604      	mov	r4, r0
 800cddc:	b084      	sub	sp, #16
 800cdde:	e9cd 2100 	strd	r2, r1, [sp]
 800cde2:	f000 ff99 	bl	800dd18 <uxr_session_header_offset>
 800cde6:	4603      	mov	r3, r0
 800cde8:	f104 0008 	add.w	r0, r4, #8
 800cdec:	e9dd 2100 	ldrd	r2, r1, [sp]
 800cdf0:	b004      	add	sp, #16
 800cdf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdf6:	f001 bce5 	b.w	800e7c4 <uxr_add_output_best_effort_buffer>
 800cdfa:	bf00      	nop

0800cdfc <uxr_create_output_reliable_stream>:
 800cdfc:	b530      	push	{r4, r5, lr}
 800cdfe:	b089      	sub	sp, #36	; 0x24
 800ce00:	4604      	mov	r4, r0
 800ce02:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800ce06:	9303      	str	r3, [sp, #12]
 800ce08:	f000 ff86 	bl	800dd18 <uxr_session_header_offset>
 800ce0c:	4605      	mov	r5, r0
 800ce0e:	9905      	ldr	r1, [sp, #20]
 800ce10:	f104 0008 	add.w	r0, r4, #8
 800ce14:	9500      	str	r5, [sp, #0]
 800ce16:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800ce1a:	f001 fce7 	bl	800e7ec <uxr_add_output_reliable_buffer>
 800ce1e:	2200      	movs	r2, #0
 800ce20:	fa5f fc80 	uxtb.w	ip, r0
 800ce24:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800ce28:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800ce2c:	0e03      	lsrs	r3, r0, #24
 800ce2e:	f36c 0207 	bfi	r2, ip, #0, #8
 800ce32:	f364 220f 	bfi	r2, r4, #8, #8
 800ce36:	f361 4217 	bfi	r2, r1, #16, #8
 800ce3a:	f363 621f 	bfi	r2, r3, #24, #8
 800ce3e:	4610      	mov	r0, r2
 800ce40:	b009      	add	sp, #36	; 0x24
 800ce42:	bd30      	pop	{r4, r5, pc}

0800ce44 <uxr_create_input_best_effort_stream>:
 800ce44:	b082      	sub	sp, #8
 800ce46:	3008      	adds	r0, #8
 800ce48:	b002      	add	sp, #8
 800ce4a:	f001 bce9 	b.w	800e820 <uxr_add_input_best_effort_buffer>
 800ce4e:	bf00      	nop

0800ce50 <uxr_create_input_reliable_stream>:
 800ce50:	b510      	push	{r4, lr}
 800ce52:	4c0c      	ldr	r4, [pc, #48]	; (800ce84 <uxr_create_input_reliable_stream+0x34>)
 800ce54:	b084      	sub	sp, #16
 800ce56:	3008      	adds	r0, #8
 800ce58:	9400      	str	r4, [sp, #0]
 800ce5a:	f001 fcf7 	bl	800e84c <uxr_add_input_reliable_buffer>
 800ce5e:	2200      	movs	r2, #0
 800ce60:	fa5f fe80 	uxtb.w	lr, r0
 800ce64:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 800ce68:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800ce6c:	0e03      	lsrs	r3, r0, #24
 800ce6e:	f36e 0207 	bfi	r2, lr, #0, #8
 800ce72:	f36c 220f 	bfi	r2, ip, #8, #8
 800ce76:	f361 4217 	bfi	r2, r1, #16, #8
 800ce7a:	f363 621f 	bfi	r2, r3, #24, #8
 800ce7e:	4610      	mov	r0, r2
 800ce80:	b004      	add	sp, #16
 800ce82:	bd10      	pop	{r4, pc}
 800ce84:	0800cc59 	.word	0x0800cc59

0800ce88 <uxr_epoch_nanos>:
 800ce88:	b510      	push	{r4, lr}
 800ce8a:	4604      	mov	r4, r0
 800ce8c:	f001 fd9a 	bl	800e9c4 <uxr_nanos>
 800ce90:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800ce94:	1ac0      	subs	r0, r0, r3
 800ce96:	eb61 0102 	sbc.w	r1, r1, r2
 800ce9a:	bd10      	pop	{r4, pc}

0800ce9c <uxr_flash_output_streams>:
 800ce9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cea0:	7e03      	ldrb	r3, [r0, #24]
 800cea2:	b084      	sub	sp, #16
 800cea4:	4604      	mov	r4, r0
 800cea6:	b1fb      	cbz	r3, 800cee8 <uxr_flash_output_streams+0x4c>
 800cea8:	f04f 0900 	mov.w	r9, #0
 800ceac:	f10d 0802 	add.w	r8, sp, #2
 800ceb0:	af03      	add	r7, sp, #12
 800ceb2:	ae02      	add	r6, sp, #8
 800ceb4:	4648      	mov	r0, r9
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800cebc:	4611      	mov	r1, r2
 800cebe:	3508      	adds	r5, #8
 800cec0:	f001 fbe0 	bl	800e684 <uxr_stream_id>
 800cec4:	4684      	mov	ip, r0
 800cec6:	4643      	mov	r3, r8
 800cec8:	463a      	mov	r2, r7
 800ceca:	4631      	mov	r1, r6
 800cecc:	4628      	mov	r0, r5
 800cece:	f8cd c004 	str.w	ip, [sp, #4]
 800ced2:	f006 f939 	bl	8013148 <uxr_prepare_best_effort_buffer_to_send>
 800ced6:	2800      	cmp	r0, #0
 800ced8:	d13d      	bne.n	800cf56 <uxr_flash_output_streams+0xba>
 800ceda:	f109 0901 	add.w	r9, r9, #1
 800cede:	7e23      	ldrb	r3, [r4, #24]
 800cee0:	fa5f f089 	uxtb.w	r0, r9
 800cee4:	4283      	cmp	r3, r0
 800cee6:	d8e6      	bhi.n	800ceb6 <uxr_flash_output_streams+0x1a>
 800cee8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800ceec:	b383      	cbz	r3, 800cf50 <uxr_flash_output_streams+0xb4>
 800ceee:	f04f 0900 	mov.w	r9, #0
 800cef2:	f10d 0802 	add.w	r8, sp, #2
 800cef6:	af03      	add	r7, sp, #12
 800cef8:	ae02      	add	r6, sp, #8
 800cefa:	4648      	mov	r0, r9
 800cefc:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800cf00:	2201      	movs	r2, #1
 800cf02:	2102      	movs	r1, #2
 800cf04:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800cf08:	f001 fbbc 	bl	800e684 <uxr_stream_id>
 800cf0c:	9001      	str	r0, [sp, #4]
 800cf0e:	3520      	adds	r5, #32
 800cf10:	e00c      	b.n	800cf2c <uxr_flash_output_streams+0x90>
 800cf12:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800cf16:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800cf1a:	9b02      	ldr	r3, [sp, #8]
 800cf1c:	f000 fea8 	bl	800dc70 <uxr_stamp_session_header>
 800cf20:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cf22:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800cf26:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800cf2a:	47d0      	blx	sl
 800cf2c:	4643      	mov	r3, r8
 800cf2e:	463a      	mov	r2, r7
 800cf30:	4631      	mov	r1, r6
 800cf32:	4628      	mov	r0, r5
 800cf34:	f006 fb2c 	bl	8013590 <uxr_prepare_next_reliable_buffer_to_send>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d1e8      	bne.n	800cf12 <uxr_flash_output_streams+0x76>
 800cf40:	f109 0901 	add.w	r9, r9, #1
 800cf44:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800cf48:	fa5f f089 	uxtb.w	r0, r9
 800cf4c:	4283      	cmp	r3, r0
 800cf4e:	d8d5      	bhi.n	800cefc <uxr_flash_output_streams+0x60>
 800cf50:	b004      	add	sp, #16
 800cf52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf56:	9b02      	ldr	r3, [sp, #8]
 800cf58:	4620      	mov	r0, r4
 800cf5a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800cf5e:	f109 0901 	add.w	r9, r9, #1
 800cf62:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800cf66:	f000 fe83 	bl	800dc70 <uxr_stamp_session_header>
 800cf6a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cf6c:	9a03      	ldr	r2, [sp, #12]
 800cf6e:	685d      	ldr	r5, [r3, #4]
 800cf70:	6818      	ldr	r0, [r3, #0]
 800cf72:	9902      	ldr	r1, [sp, #8]
 800cf74:	47a8      	blx	r5
 800cf76:	7e23      	ldrb	r3, [r4, #24]
 800cf78:	fa5f f089 	uxtb.w	r0, r9
 800cf7c:	4283      	cmp	r3, r0
 800cf7e:	d89a      	bhi.n	800ceb6 <uxr_flash_output_streams+0x1a>
 800cf80:	e7b2      	b.n	800cee8 <uxr_flash_output_streams+0x4c>
 800cf82:	bf00      	nop

0800cf84 <read_submessage_info>:
 800cf84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf88:	460d      	mov	r5, r1
 800cf8a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800cf8e:	4606      	mov	r6, r0
 800cf90:	4669      	mov	r1, sp
 800cf92:	4628      	mov	r0, r5
 800cf94:	f002 f938 	bl	800f208 <uxr_deserialize_BaseObjectReply>
 800cf98:	4604      	mov	r4, r0
 800cf9a:	a902      	add	r1, sp, #8
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	f89d 7005 	ldrb.w	r7, [sp, #5]
 800cfa2:	f7fb f885 	bl	80080b0 <ucdr_deserialize_bool>
 800cfa6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cfaa:	4004      	ands	r4, r0
 800cfac:	b2e4      	uxtb	r4, r4
 800cfae:	b95b      	cbnz	r3, 800cfc8 <read_submessage_info+0x44>
 800cfb0:	a987      	add	r1, sp, #540	; 0x21c
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	f7fb f87c 	bl	80080b0 <ucdr_deserialize_bool>
 800cfb8:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800cfbc:	4680      	mov	r8, r0
 800cfbe:	b94b      	cbnz	r3, 800cfd4 <read_submessage_info+0x50>
 800cfc0:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800cfc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfc8:	a903      	add	r1, sp, #12
 800cfca:	4628      	mov	r0, r5
 800cfcc:	f001 ffc8 	bl	800ef60 <uxr_deserialize_ObjectVariant>
 800cfd0:	4004      	ands	r4, r0
 800cfd2:	e7ed      	b.n	800cfb0 <read_submessage_info+0x2c>
 800cfd4:	a988      	add	r1, sp, #544	; 0x220
 800cfd6:	4628      	mov	r0, r5
 800cfd8:	f7fb f898 	bl	800810c <ucdr_deserialize_uint8_t>
 800cfdc:	ea14 0f08 	tst.w	r4, r8
 800cfe0:	d0ee      	beq.n	800cfc0 <read_submessage_info+0x3c>
 800cfe2:	2800      	cmp	r0, #0
 800cfe4:	d0ec      	beq.n	800cfc0 <read_submessage_info+0x3c>
 800cfe6:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800cfea:	2b0d      	cmp	r3, #13
 800cfec:	d1e8      	bne.n	800cfc0 <read_submessage_info+0x3c>
 800cfee:	a98a      	add	r1, sp, #552	; 0x228
 800cff0:	4628      	mov	r0, r5
 800cff2:	f7fb fe31 	bl	8008c58 <ucdr_deserialize_int16_t>
 800cff6:	b138      	cbz	r0, 800d008 <read_submessage_info+0x84>
 800cff8:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	dd06      	ble.n	800d00e <read_submessage_info+0x8a>
 800d000:	2f00      	cmp	r7, #0
 800d002:	bf14      	ite	ne
 800d004:	2001      	movne	r0, #1
 800d006:	2002      	moveq	r0, #2
 800d008:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 800d00c:	e7d8      	b.n	800cfc0 <read_submessage_info+0x3c>
 800d00e:	2000      	movs	r0, #0
 800d010:	e7fa      	b.n	800d008 <read_submessage_info+0x84>
 800d012:	bf00      	nop

0800d014 <read_submessage_list>:
 800d014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d018:	4604      	mov	r4, r0
 800d01a:	b097      	sub	sp, #92	; 0x5c
 800d01c:	460d      	mov	r5, r1
 800d01e:	4ec1      	ldr	r6, [pc, #772]	; (800d324 <read_submessage_list+0x310>)
 800d020:	9209      	str	r2, [sp, #36]	; 0x24
 800d022:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800d026:	aa0c      	add	r2, sp, #48	; 0x30
 800d028:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800d02c:	4628      	mov	r0, r5
 800d02e:	f001 fc81 	bl	800e934 <uxr_read_submessage_header>
 800d032:	2800      	cmp	r0, #0
 800d034:	f000 8142 	beq.w	800d2bc <read_submessage_list+0x2a8>
 800d038:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800d03c:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800d040:	3b02      	subs	r3, #2
 800d042:	2b0d      	cmp	r3, #13
 800d044:	d8ed      	bhi.n	800d022 <read_submessage_list+0xe>
 800d046:	a101      	add	r1, pc, #4	; (adr r1, 800d04c <read_submessage_list+0x38>)
 800d048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d04c:	0800d2b3 	.word	0x0800d2b3
 800d050:	0800d023 	.word	0x0800d023
 800d054:	0800d2a3 	.word	0x0800d2a3
 800d058:	0800d241 	.word	0x0800d241
 800d05c:	0800d237 	.word	0x0800d237
 800d060:	0800d023 	.word	0x0800d023
 800d064:	0800d023 	.word	0x0800d023
 800d068:	0800d18d 	.word	0x0800d18d
 800d06c:	0800d11f 	.word	0x0800d11f
 800d070:	0800d0df 	.word	0x0800d0df
 800d074:	0800d023 	.word	0x0800d023
 800d078:	0800d023 	.word	0x0800d023
 800d07c:	0800d023 	.word	0x0800d023
 800d080:	0800d085 	.word	0x0800d085
 800d084:	a910      	add	r1, sp, #64	; 0x40
 800d086:	4628      	mov	r0, r5
 800d088:	f002 fae6 	bl	800f658 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800d08c:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 800d090:	f1b8 0f00 	cmp.w	r8, #0
 800d094:	f000 811a 	beq.w	800d2cc <read_submessage_list+0x2b8>
 800d098:	f001 fc94 	bl	800e9c4 <uxr_nanos>
 800d09c:	4602      	mov	r2, r0
 800d09e:	460b      	mov	r3, r1
 800d0a0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800d0a4:	2100      	movs	r1, #0
 800d0a6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d0a8:	9006      	str	r0, [sp, #24]
 800d0aa:	468c      	mov	ip, r1
 800d0ac:	9815      	ldr	r0, [sp, #84]	; 0x54
 800d0ae:	fbc7 0c06 	smlal	r0, ip, r7, r6
 800d0b2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800d0b4:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 800d0b8:	468c      	mov	ip, r1
 800d0ba:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d0bc:	fbc7 0c06 	smlal	r0, ip, r7, r6
 800d0c0:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 800d0c4:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 800d0c8:	fbc7 0106 	smlal	r0, r1, r7, r6
 800d0cc:	e9cd 0100 	strd	r0, r1, [sp]
 800d0d0:	4620      	mov	r0, r4
 800d0d2:	47c0      	blx	r8
 800d0d4:	f04f 0301 	mov.w	r3, #1
 800d0d8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800d0dc:	e7a1      	b.n	800d022 <read_submessage_list+0xe>
 800d0de:	a910      	add	r1, sp, #64	; 0x40
 800d0e0:	4628      	mov	r0, r5
 800d0e2:	f002 faa5 	bl	800f630 <uxr_deserialize_HEARTBEAT_Payload>
 800d0e6:	2100      	movs	r1, #0
 800d0e8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800d0ec:	f001 faf8 	bl	800e6e0 <uxr_stream_id_from_raw>
 800d0f0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 800d0f4:	900f      	str	r0, [sp, #60]	; 0x3c
 800d0f6:	f104 0008 	add.w	r0, r4, #8
 800d0fa:	4641      	mov	r1, r8
 800d0fc:	f001 fbde 	bl	800e8bc <uxr_get_input_reliable_stream>
 800d100:	2800      	cmp	r0, #0
 800d102:	d08e      	beq.n	800d022 <read_submessage_list+0xe>
 800d104:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800d108:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800d10c:	f005 ff86 	bl	801301c <uxr_process_heartbeat>
 800d110:	4642      	mov	r2, r8
 800d112:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800d116:	4620      	mov	r0, r4
 800d118:	f7ff fdf6 	bl	800cd08 <write_submessage_acknack.isra.0>
 800d11c:	e781      	b.n	800d022 <read_submessage_list+0xe>
 800d11e:	a910      	add	r1, sp, #64	; 0x40
 800d120:	4628      	mov	r0, r5
 800d122:	f002 fa5d 	bl	800f5e0 <uxr_deserialize_ACKNACK_Payload>
 800d126:	2100      	movs	r1, #0
 800d128:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800d12c:	f001 fad8 	bl	800e6e0 <uxr_stream_id_from_raw>
 800d130:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d134:	900d      	str	r0, [sp, #52]	; 0x34
 800d136:	f104 0008 	add.w	r0, r4, #8
 800d13a:	f001 fba9 	bl	800e890 <uxr_get_output_reliable_stream>
 800d13e:	4680      	mov	r8, r0
 800d140:	2800      	cmp	r0, #0
 800d142:	f43f af6e 	beq.w	800d022 <read_submessage_list+0xe>
 800d146:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800d14a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800d14e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800d152:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800d156:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800d15a:	b289      	uxth	r1, r1
 800d15c:	f006 fac0 	bl	80136e0 <uxr_process_acknack>
 800d160:	4640      	mov	r0, r8
 800d162:	f006 fa81 	bl	8013668 <uxr_begin_output_nack_buffer_it>
 800d166:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800d16a:	e005      	b.n	800d178 <read_submessage_list+0x164>
 800d16c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d16e:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 800d172:	e9d3 0900 	ldrd	r0, r9, [r3]
 800d176:	47c8      	blx	r9
 800d178:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800d17c:	aa0f      	add	r2, sp, #60	; 0x3c
 800d17e:	4651      	mov	r1, sl
 800d180:	4640      	mov	r0, r8
 800d182:	f006 fa73 	bl	801366c <uxr_next_reliable_nack_buffer_to_send>
 800d186:	2800      	cmp	r0, #0
 800d188:	d1f0      	bne.n	800d16c <read_submessage_list+0x158>
 800d18a:	e74a      	b.n	800d022 <read_submessage_list+0xe>
 800d18c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800d190:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800d194:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 800d198:	4628      	mov	r0, r5
 800d19a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800d19e:	4651      	mov	r1, sl
 800d1a0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800d1a4:	f1a8 0804 	sub.w	r8, r8, #4
 800d1a8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800d1ac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800d1b0:	fa1f f888 	uxth.w	r8, r8
 800d1b4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d1b8:	f009 090e 	and.w	r9, r9, #14
 800d1bc:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800d1c0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800d1c4:	f001 ff6e 	bl	800f0a4 <uxr_deserialize_BaseObjectRequest>
 800d1c8:	4650      	mov	r0, sl
 800d1ca:	a90f      	add	r1, sp, #60	; 0x3c
 800d1cc:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800d1d0:	f000 fdca 	bl	800dd68 <uxr_parse_base_object_request>
 800d1d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d1d6:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800d1da:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800d1de:	9110      	str	r1, [sp, #64]	; 0x40
 800d1e0:	f1bb 0f00 	cmp.w	fp, #0
 800d1e4:	d006      	beq.n	800d1f4 <read_submessage_list+0x1e0>
 800d1e6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d1ea:	4652      	mov	r2, sl
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	9300      	str	r3, [sp, #0]
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	47d8      	blx	fp
 800d1f4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800d1f6:	b182      	cbz	r2, 800d21a <read_submessage_list+0x206>
 800d1f8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800d1fa:	f04f 0c00 	mov.w	ip, #0
 800d1fe:	3902      	subs	r1, #2
 800d200:	e003      	b.n	800d20a <read_submessage_list+0x1f6>
 800d202:	f10c 0c01 	add.w	ip, ip, #1
 800d206:	4594      	cmp	ip, r2
 800d208:	d007      	beq.n	800d21a <read_submessage_list+0x206>
 800d20a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 800d20e:	4553      	cmp	r3, sl
 800d210:	d1f7      	bne.n	800d202 <read_submessage_list+0x1ee>
 800d212:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d214:	2200      	movs	r2, #0
 800d216:	f803 200c 	strb.w	r2, [r3, ip]
 800d21a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800d21e:	464b      	mov	r3, r9
 800d220:	4642      	mov	r2, r8
 800d222:	4620      	mov	r0, r4
 800d224:	9102      	str	r1, [sp, #8]
 800d226:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d228:	9101      	str	r1, [sp, #4]
 800d22a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d22c:	9100      	str	r1, [sp, #0]
 800d22e:	4629      	mov	r1, r5
 800d230:	f7ff fc48 	bl	800cac4 <read_submessage_format>
 800d234:	e6f5      	b.n	800d022 <read_submessage_list+0xe>
 800d236:	4629      	mov	r1, r5
 800d238:	4620      	mov	r0, r4
 800d23a:	f7ff fea3 	bl	800cf84 <read_submessage_info>
 800d23e:	e6f0      	b.n	800d022 <read_submessage_list+0xe>
 800d240:	2a00      	cmp	r2, #0
 800d242:	d03e      	beq.n	800d2c2 <read_submessage_list+0x2ae>
 800d244:	a910      	add	r1, sp, #64	; 0x40
 800d246:	4628      	mov	r0, r5
 800d248:	f002 f922 	bl	800f490 <uxr_deserialize_STATUS_Payload>
 800d24c:	a90e      	add	r1, sp, #56	; 0x38
 800d24e:	aa0d      	add	r2, sp, #52	; 0x34
 800d250:	a810      	add	r0, sp, #64	; 0x40
 800d252:	f000 fd89 	bl	800dd68 <uxr_parse_base_object_request>
 800d256:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d258:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800d25c:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800d260:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 800d264:	910f      	str	r1, [sp, #60]	; 0x3c
 800d266:	f1ba 0f00 	cmp.w	sl, #0
 800d26a:	d006      	beq.n	800d27a <read_submessage_list+0x266>
 800d26c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d270:	4642      	mov	r2, r8
 800d272:	4620      	mov	r0, r4
 800d274:	9300      	str	r3, [sp, #0]
 800d276:	464b      	mov	r3, r9
 800d278:	47d0      	blx	sl
 800d27a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800d27c:	2a00      	cmp	r2, #0
 800d27e:	f43f aed0 	beq.w	800d022 <read_submessage_list+0xe>
 800d282:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800d284:	2100      	movs	r1, #0
 800d286:	3802      	subs	r0, #2
 800d288:	e003      	b.n	800d292 <read_submessage_list+0x27e>
 800d28a:	3101      	adds	r1, #1
 800d28c:	4291      	cmp	r1, r2
 800d28e:	f43f aec8 	beq.w	800d022 <read_submessage_list+0xe>
 800d292:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d296:	4543      	cmp	r3, r8
 800d298:	d1f7      	bne.n	800d28a <read_submessage_list+0x276>
 800d29a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d29c:	f803 9001 	strb.w	r9, [r3, r1]
 800d2a0:	e6bf      	b.n	800d022 <read_submessage_list+0xe>
 800d2a2:	2a00      	cmp	r2, #0
 800d2a4:	f47f aebd 	bne.w	800d022 <read_submessage_list+0xe>
 800d2a8:	4629      	mov	r1, r5
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	f000 fca0 	bl	800dbf0 <uxr_read_create_session_status>
 800d2b0:	e6b7      	b.n	800d022 <read_submessage_list+0xe>
 800d2b2:	4629      	mov	r1, r5
 800d2b4:	4620      	mov	r0, r4
 800d2b6:	f7ff fcf1 	bl	800cc9c <read_submessage_get_info>
 800d2ba:	e6b2      	b.n	800d022 <read_submessage_list+0xe>
 800d2bc:	b017      	add	sp, #92	; 0x5c
 800d2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2c2:	4629      	mov	r1, r5
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	f000 fca1 	bl	800dc0c <uxr_read_delete_session_status>
 800d2ca:	e6aa      	b.n	800d022 <read_submessage_list+0xe>
 800d2cc:	f001 fb7a 	bl	800e9c4 <uxr_nanos>
 800d2d0:	4642      	mov	r2, r8
 800d2d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d2d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2d6:	fbc7 3206 	smlal	r3, r2, r7, r6
 800d2da:	1818      	adds	r0, r3, r0
 800d2dc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800d2de:	eb42 0101 	adc.w	r1, r2, r1
 800d2e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d2e4:	4642      	mov	r2, r8
 800d2e6:	fbc7 3206 	smlal	r3, r2, r7, r6
 800d2ea:	469c      	mov	ip, r3
 800d2ec:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 800d2f0:	fbc3 7806 	smlal	r7, r8, r3, r6
 800d2f4:	4643      	mov	r3, r8
 800d2f6:	eb1c 0c07 	adds.w	ip, ip, r7
 800d2fa:	eb42 0203 	adc.w	r2, r2, r3
 800d2fe:	ebb0 030c 	subs.w	r3, r0, ip
 800d302:	eb61 0202 	sbc.w	r2, r1, r2
 800d306:	2a00      	cmp	r2, #0
 800d308:	db08      	blt.n	800d31c <read_submessage_list+0x308>
 800d30a:	085b      	lsrs	r3, r3, #1
 800d30c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800d310:	1052      	asrs	r2, r2, #1
 800d312:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800d316:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 800d31a:	e6db      	b.n	800d0d4 <read_submessage_list+0xc0>
 800d31c:	3301      	adds	r3, #1
 800d31e:	f142 0200 	adc.w	r2, r2, #0
 800d322:	e7f2      	b.n	800d30a <read_submessage_list+0x2f6>
 800d324:	3b9aca00 	.word	0x3b9aca00

0800d328 <listen_message_reliably>:
 800d328:	1e0b      	subs	r3, r1, #0
 800d32a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d32e:	bfb8      	it	lt
 800d330:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800d334:	b09d      	sub	sp, #116	; 0x74
 800d336:	4680      	mov	r8, r0
 800d338:	9305      	str	r3, [sp, #20]
 800d33a:	f001 fb27 	bl	800e98c <uxr_millis>
 800d33e:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800d342:	4681      	mov	r9, r0
 800d344:	2a00      	cmp	r2, #0
 800d346:	f000 809a 	beq.w	800d47e <listen_message_reliably+0x156>
 800d34a:	2600      	movs	r6, #0
 800d34c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d350:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800d354:	460f      	mov	r7, r1
 800d356:	4630      	mov	r0, r6
 800d358:	9303      	str	r3, [sp, #12]
 800d35a:	e00e      	b.n	800d37a <listen_message_reliably+0x52>
 800d35c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d35e:	3601      	adds	r6, #1
 800d360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d362:	455a      	cmp	r2, fp
 800d364:	9903      	ldr	r1, [sp, #12]
 800d366:	b2f0      	uxtb	r0, r6
 800d368:	eb73 0101 	sbcs.w	r1, r3, r1
 800d36c:	da01      	bge.n	800d372 <listen_message_reliably+0x4a>
 800d36e:	4693      	mov	fp, r2
 800d370:	9303      	str	r3, [sp, #12]
 800d372:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800d376:	4283      	cmp	r3, r0
 800d378:	d95f      	bls.n	800d43a <listen_message_reliably+0x112>
 800d37a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800d37e:	2102      	movs	r1, #2
 800d380:	2201      	movs	r2, #1
 800d382:	00e4      	lsls	r4, r4, #3
 800d384:	f001 f97e 	bl	800e684 <uxr_stream_id>
 800d388:	4601      	mov	r1, r0
 800d38a:	f104 0520 	add.w	r5, r4, #32
 800d38e:	463b      	mov	r3, r7
 800d390:	464a      	mov	r2, r9
 800d392:	9109      	str	r1, [sp, #36]	; 0x24
 800d394:	4445      	add	r5, r8
 800d396:	4628      	mov	r0, r5
 800d398:	f006 f93a 	bl	8013610 <uxr_update_output_stream_heartbeat_timestamp>
 800d39c:	eb08 0304 	add.w	r3, r8, r4
 800d3a0:	2800      	cmp	r0, #0
 800d3a2:	d0db      	beq.n	800d35c <listen_message_reliably+0x34>
 800d3a4:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800d3a8:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800d3ac:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d3b0:	4640      	mov	r0, r8
 800d3b2:	3501      	adds	r5, #1
 800d3b4:	4444      	add	r4, r8
 800d3b6:	9304      	str	r3, [sp, #16]
 800d3b8:	f000 fcae 	bl	800dd18 <uxr_session_header_offset>
 800d3bc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	2211      	movs	r2, #17
 800d3c4:	a90c      	add	r1, sp, #48	; 0x30
 800d3c6:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800d3ca:	9000      	str	r0, [sp, #0]
 800d3cc:	4650      	mov	r0, sl
 800d3ce:	3601      	adds	r6, #1
 800d3d0:	f7fb ffb6 	bl	8009340 <ucdr_init_buffer_origin_offset>
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	2205      	movs	r2, #5
 800d3d8:	210b      	movs	r1, #11
 800d3da:	4650      	mov	r0, sl
 800d3dc:	f001 fa90 	bl	800e900 <uxr_buffer_submessage_header>
 800d3e0:	2101      	movs	r1, #1
 800d3e2:	8968      	ldrh	r0, [r5, #10]
 800d3e4:	f006 f9b6 	bl	8013754 <uxr_seq_num_add>
 800d3e8:	892b      	ldrh	r3, [r5, #8]
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	a90a      	add	r1, sp, #40	; 0x28
 800d3ee:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800d3f2:	4650      	mov	r0, sl
 800d3f4:	9b04      	ldr	r3, [sp, #16]
 800d3f6:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800d3fa:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800d3fe:	f002 f903 	bl	800f608 <uxr_serialize_HEARTBEAT_Payload>
 800d402:	2200      	movs	r2, #0
 800d404:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d406:	4640      	mov	r0, r8
 800d408:	4611      	mov	r1, r2
 800d40a:	f000 fc31 	bl	800dc70 <uxr_stamp_session_header>
 800d40e:	4650      	mov	r0, sl
 800d410:	f7fb ffd6 	bl	80093c0 <ucdr_buffer_length>
 800d414:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800d418:	4602      	mov	r2, r0
 800d41a:	a90c      	add	r1, sp, #48	; 0x30
 800d41c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d420:	47a8      	blx	r5
 800d422:	9903      	ldr	r1, [sp, #12]
 800d424:	b2f0      	uxtb	r0, r6
 800d426:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800d42a:	455a      	cmp	r2, fp
 800d42c:	eb73 0101 	sbcs.w	r1, r3, r1
 800d430:	db9d      	blt.n	800d36e <listen_message_reliably+0x46>
 800d432:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800d436:	4283      	cmp	r3, r0
 800d438:	d89f      	bhi.n	800d37a <listen_message_reliably+0x52>
 800d43a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d43e:	9a03      	ldr	r2, [sp, #12]
 800d440:	429a      	cmp	r2, r3
 800d442:	bf08      	it	eq
 800d444:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800d448:	d019      	beq.n	800d47e <listen_message_reliably+0x156>
 800d44a:	ebab 0309 	sub.w	r3, fp, r9
 800d44e:	2b00      	cmp	r3, #0
 800d450:	9d05      	ldr	r5, [sp, #20]
 800d452:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 800d456:	aa08      	add	r2, sp, #32
 800d458:	bf08      	it	eq
 800d45a:	2301      	moveq	r3, #1
 800d45c:	a907      	add	r1, sp, #28
 800d45e:	6884      	ldr	r4, [r0, #8]
 800d460:	429d      	cmp	r5, r3
 800d462:	6800      	ldr	r0, [r0, #0]
 800d464:	bfa8      	it	ge
 800d466:	461d      	movge	r5, r3
 800d468:	462b      	mov	r3, r5
 800d46a:	47a0      	blx	r4
 800d46c:	b948      	cbnz	r0, 800d482 <listen_message_reliably+0x15a>
 800d46e:	9b05      	ldr	r3, [sp, #20]
 800d470:	1b5b      	subs	r3, r3, r5
 800d472:	2b00      	cmp	r3, #0
 800d474:	9305      	str	r3, [sp, #20]
 800d476:	f73f af60 	bgt.w	800d33a <listen_message_reliably+0x12>
 800d47a:	4604      	mov	r4, r0
 800d47c:	e012      	b.n	800d4a4 <listen_message_reliably+0x17c>
 800d47e:	9b05      	ldr	r3, [sp, #20]
 800d480:	e7e5      	b.n	800d44e <listen_message_reliably+0x126>
 800d482:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d486:	4604      	mov	r4, r0
 800d488:	2500      	movs	r5, #0
 800d48a:	a80c      	add	r0, sp, #48	; 0x30
 800d48c:	f7fb ff6a 	bl	8009364 <ucdr_init_buffer>
 800d490:	f10d 031a 	add.w	r3, sp, #26
 800d494:	aa06      	add	r2, sp, #24
 800d496:	a90c      	add	r1, sp, #48	; 0x30
 800d498:	4640      	mov	r0, r8
 800d49a:	f88d 5018 	strb.w	r5, [sp, #24]
 800d49e:	f000 fbfb 	bl	800dc98 <uxr_read_session_header>
 800d4a2:	b918      	cbnz	r0, 800d4ac <listen_message_reliably+0x184>
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	b01d      	add	sp, #116	; 0x74
 800d4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ac:	4629      	mov	r1, r5
 800d4ae:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d4b2:	f001 f915 	bl	800e6e0 <uxr_stream_id_from_raw>
 800d4b6:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800d4ba:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800d4be:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800d4c2:	2e01      	cmp	r6, #1
 800d4c4:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800d4c8:	d04b      	beq.n	800d562 <listen_message_reliably+0x23a>
 800d4ca:	2e02      	cmp	r6, #2
 800d4cc:	d00f      	beq.n	800d4ee <listen_message_reliably+0x1c6>
 800d4ce:	2e00      	cmp	r6, #0
 800d4d0:	d1e8      	bne.n	800d4a4 <listen_message_reliably+0x17c>
 800d4d2:	4631      	mov	r1, r6
 800d4d4:	4630      	mov	r0, r6
 800d4d6:	f001 f903 	bl	800e6e0 <uxr_stream_id_from_raw>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	a90c      	add	r1, sp, #48	; 0x30
 800d4de:	4640      	mov	r0, r8
 800d4e0:	920a      	str	r2, [sp, #40]	; 0x28
 800d4e2:	f7ff fd97 	bl	800d014 <read_submessage_list>
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	b01d      	add	sp, #116	; 0x74
 800d4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ee:	4629      	mov	r1, r5
 800d4f0:	f108 0008 	add.w	r0, r8, #8
 800d4f4:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800d4f8:	f001 f9e0 	bl	800e8bc <uxr_get_input_reliable_stream>
 800d4fc:	4607      	mov	r7, r0
 800d4fe:	b338      	cbz	r0, 800d550 <listen_message_reliably+0x228>
 800d500:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d502:	a80c      	add	r0, sp, #48	; 0x30
 800d504:	9203      	str	r2, [sp, #12]
 800d506:	f7fb ff5f 	bl	80093c8 <ucdr_buffer_remaining>
 800d50a:	4603      	mov	r3, r0
 800d50c:	f10d 0019 	add.w	r0, sp, #25
 800d510:	9a03      	ldr	r2, [sp, #12]
 800d512:	4651      	mov	r1, sl
 800d514:	9000      	str	r0, [sp, #0]
 800d516:	4638      	mov	r0, r7
 800d518:	f005 fc84 	bl	8012e24 <uxr_receive_reliable_message>
 800d51c:	b1c0      	cbz	r0, 800d550 <listen_message_reliably+0x228>
 800d51e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d522:	b393      	cbz	r3, 800d58a <listen_message_reliably+0x262>
 800d524:	ae14      	add	r6, sp, #80	; 0x50
 800d526:	f04f 0a02 	mov.w	sl, #2
 800d52a:	e00a      	b.n	800d542 <listen_message_reliably+0x21a>
 800d52c:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800d530:	4631      	mov	r1, r6
 800d532:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800d536:	4640      	mov	r0, r8
 800d538:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800d53c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d53e:	f7ff fd69 	bl	800d014 <read_submessage_list>
 800d542:	2204      	movs	r2, #4
 800d544:	4631      	mov	r1, r6
 800d546:	4638      	mov	r0, r7
 800d548:	f005 fcee 	bl	8012f28 <uxr_next_input_reliable_buffer_available>
 800d54c:	2800      	cmp	r0, #0
 800d54e:	d1ed      	bne.n	800d52c <listen_message_reliably+0x204>
 800d550:	4640      	mov	r0, r8
 800d552:	462a      	mov	r2, r5
 800d554:	4649      	mov	r1, r9
 800d556:	f7ff fbd7 	bl	800cd08 <write_submessage_acknack.isra.0>
 800d55a:	4620      	mov	r0, r4
 800d55c:	b01d      	add	sp, #116	; 0x74
 800d55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d562:	4629      	mov	r1, r5
 800d564:	f108 0008 	add.w	r0, r8, #8
 800d568:	f001 f99e 	bl	800e8a8 <uxr_get_input_best_effort_stream>
 800d56c:	2800      	cmp	r0, #0
 800d56e:	d099      	beq.n	800d4a4 <listen_message_reliably+0x17c>
 800d570:	4651      	mov	r1, sl
 800d572:	f005 fbcd 	bl	8012d10 <uxr_receive_best_effort_message>
 800d576:	2800      	cmp	r0, #0
 800d578:	d094      	beq.n	800d4a4 <listen_message_reliably+0x17c>
 800d57a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800d57e:	a90c      	add	r1, sp, #48	; 0x30
 800d580:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d582:	4640      	mov	r0, r8
 800d584:	f7ff fd46 	bl	800d014 <read_submessage_list>
 800d588:	e78c      	b.n	800d4a4 <listen_message_reliably+0x17c>
 800d58a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800d58e:	a90c      	add	r1, sp, #48	; 0x30
 800d590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d592:	4640      	mov	r0, r8
 800d594:	f7ff fd3e 	bl	800d014 <read_submessage_list>
 800d598:	e7c4      	b.n	800d524 <listen_message_reliably+0x1fc>
 800d59a:	bf00      	nop

0800d59c <uxr_run_session_timeout>:
 800d59c:	b570      	push	{r4, r5, r6, lr}
 800d59e:	4604      	mov	r4, r0
 800d5a0:	460d      	mov	r5, r1
 800d5a2:	f001 f9f3 	bl	800e98c <uxr_millis>
 800d5a6:	4606      	mov	r6, r0
 800d5a8:	4620      	mov	r0, r4
 800d5aa:	f7ff fc77 	bl	800ce9c <uxr_flash_output_streams>
 800d5ae:	4629      	mov	r1, r5
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	f7ff feb9 	bl	800d328 <listen_message_reliably>
 800d5b6:	f001 f9e9 	bl	800e98c <uxr_millis>
 800d5ba:	1b83      	subs	r3, r0, r6
 800d5bc:	1ae9      	subs	r1, r5, r3
 800d5be:	2900      	cmp	r1, #0
 800d5c0:	dcf6      	bgt.n	800d5b0 <uxr_run_session_timeout+0x14>
 800d5c2:	f104 0008 	add.w	r0, r4, #8
 800d5c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d5ca:	f001 b983 	b.w	800e8d4 <uxr_output_streams_confirmed>
 800d5ce:	bf00      	nop

0800d5d0 <uxr_run_session_until_data>:
 800d5d0:	b570      	push	{r4, r5, r6, lr}
 800d5d2:	4604      	mov	r4, r0
 800d5d4:	460d      	mov	r5, r1
 800d5d6:	f001 f9d9 	bl	800e98c <uxr_millis>
 800d5da:	4606      	mov	r6, r0
 800d5dc:	4620      	mov	r0, r4
 800d5de:	f7ff fc5d 	bl	800ce9c <uxr_flash_output_streams>
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	4629      	mov	r1, r5
 800d5e6:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800d5ea:	e005      	b.n	800d5f8 <uxr_run_session_until_data+0x28>
 800d5ec:	f001 f9ce 	bl	800e98c <uxr_millis>
 800d5f0:	1b83      	subs	r3, r0, r6
 800d5f2:	1ae9      	subs	r1, r5, r3
 800d5f4:	2900      	cmp	r1, #0
 800d5f6:	dd07      	ble.n	800d608 <uxr_run_session_until_data+0x38>
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f7ff fe95 	bl	800d328 <listen_message_reliably>
 800d5fe:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800d602:	2800      	cmp	r0, #0
 800d604:	d0f2      	beq.n	800d5ec <uxr_run_session_until_data+0x1c>
 800d606:	bd70      	pop	{r4, r5, r6, pc}
 800d608:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800d60c:	bd70      	pop	{r4, r5, r6, pc}
 800d60e:	bf00      	nop

0800d610 <uxr_run_session_until_confirm_delivery>:
 800d610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d614:	4606      	mov	r6, r0
 800d616:	460d      	mov	r5, r1
 800d618:	f001 f9b8 	bl	800e98c <uxr_millis>
 800d61c:	4607      	mov	r7, r0
 800d61e:	4630      	mov	r0, r6
 800d620:	f106 0808 	add.w	r8, r6, #8
 800d624:	f7ff fc3a 	bl	800ce9c <uxr_flash_output_streams>
 800d628:	2d00      	cmp	r5, #0
 800d62a:	db10      	blt.n	800d64e <uxr_run_session_until_confirm_delivery+0x3e>
 800d62c:	462c      	mov	r4, r5
 800d62e:	e006      	b.n	800d63e <uxr_run_session_until_confirm_delivery+0x2e>
 800d630:	f7ff fe7a 	bl	800d328 <listen_message_reliably>
 800d634:	f001 f9aa 	bl	800e98c <uxr_millis>
 800d638:	1bc3      	subs	r3, r0, r7
 800d63a:	1aec      	subs	r4, r5, r3
 800d63c:	d407      	bmi.n	800d64e <uxr_run_session_until_confirm_delivery+0x3e>
 800d63e:	4640      	mov	r0, r8
 800d640:	f001 f948 	bl	800e8d4 <uxr_output_streams_confirmed>
 800d644:	4603      	mov	r3, r0
 800d646:	4621      	mov	r1, r4
 800d648:	4630      	mov	r0, r6
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d0f0      	beq.n	800d630 <uxr_run_session_until_confirm_delivery+0x20>
 800d64e:	4640      	mov	r0, r8
 800d650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d654:	f001 b93e 	b.w	800e8d4 <uxr_output_streams_confirmed>

0800d658 <uxr_run_session_until_all_status>:
 800d658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d65c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800d660:	4606      	mov	r6, r0
 800d662:	4688      	mov	r8, r1
 800d664:	4692      	mov	sl, r2
 800d666:	461f      	mov	r7, r3
 800d668:	f7ff fc18 	bl	800ce9c <uxr_flash_output_streams>
 800d66c:	f1bb 0f00 	cmp.w	fp, #0
 800d670:	d004      	beq.n	800d67c <uxr_run_session_until_all_status+0x24>
 800d672:	465a      	mov	r2, fp
 800d674:	21ff      	movs	r1, #255	; 0xff
 800d676:	4638      	mov	r0, r7
 800d678:	f007 f89c 	bl	80147b4 <memset>
 800d67c:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 800d680:	1e7d      	subs	r5, r7, #1
 800d682:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 800d686:	f001 f981 	bl	800e98c <uxr_millis>
 800d68a:	4641      	mov	r1, r8
 800d68c:	4681      	mov	r9, r0
 800d68e:	4630      	mov	r0, r6
 800d690:	f7ff fe4a 	bl	800d328 <listen_message_reliably>
 800d694:	f001 f97a 	bl	800e98c <uxr_millis>
 800d698:	eba0 0009 	sub.w	r0, r0, r9
 800d69c:	eba8 0100 	sub.w	r1, r8, r0
 800d6a0:	f1bb 0f00 	cmp.w	fp, #0
 800d6a4:	d029      	beq.n	800d6fa <uxr_run_session_until_all_status+0xa2>
 800d6a6:	46ae      	mov	lr, r5
 800d6a8:	f04f 0c00 	mov.w	ip, #0
 800d6ac:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800d6b0:	2cff      	cmp	r4, #255	; 0xff
 800d6b2:	d015      	beq.n	800d6e0 <uxr_run_session_until_all_status+0x88>
 800d6b4:	f10c 0c01 	add.w	ip, ip, #1
 800d6b8:	45e3      	cmp	fp, ip
 800d6ba:	d8f7      	bhi.n	800d6ac <uxr_run_session_until_all_status+0x54>
 800d6bc:	2300      	movs	r3, #0
 800d6be:	67f3      	str	r3, [r6, #124]	; 0x7c
 800d6c0:	e000      	b.n	800d6c4 <uxr_run_session_until_all_status+0x6c>
 800d6c2:	b158      	cbz	r0, 800d6dc <uxr_run_session_until_all_status+0x84>
 800d6c4:	462b      	mov	r3, r5
 800d6c6:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800d6ca:	3302      	adds	r3, #2
 800d6cc:	2801      	cmp	r0, #1
 800d6ce:	eba3 0307 	sub.w	r3, r3, r7
 800d6d2:	bf8c      	ite	hi
 800d6d4:	2000      	movhi	r0, #0
 800d6d6:	2001      	movls	r0, #1
 800d6d8:	459b      	cmp	fp, r3
 800d6da:	d8f2      	bhi.n	800d6c2 <uxr_run_session_until_all_status+0x6a>
 800d6dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6e0:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 800d6e4:	f10c 0c01 	add.w	ip, ip, #1
 800d6e8:	45dc      	cmp	ip, fp
 800d6ea:	d201      	bcs.n	800d6f0 <uxr_run_session_until_all_status+0x98>
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d0dd      	beq.n	800d6ac <uxr_run_session_until_all_status+0x54>
 800d6f0:	2900      	cmp	r1, #0
 800d6f2:	dde3      	ble.n	800d6bc <uxr_run_session_until_all_status+0x64>
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d1ca      	bne.n	800d68e <uxr_run_session_until_all_status+0x36>
 800d6f8:	e7e0      	b.n	800d6bc <uxr_run_session_until_all_status+0x64>
 800d6fa:	2001      	movs	r0, #1
 800d6fc:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 800d700:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d704 <wait_session_status>:
 800d704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d708:	4604      	mov	r4, r0
 800d70a:	b09d      	sub	sp, #116	; 0x74
 800d70c:	20ff      	movs	r0, #255	; 0xff
 800d70e:	9303      	str	r3, [sp, #12]
 800d710:	7160      	strb	r0, [r4, #5]
 800d712:	2b00      	cmp	r3, #0
 800d714:	f000 80b6 	beq.w	800d884 <wait_session_status+0x180>
 800d718:	4689      	mov	r9, r1
 800d71a:	4692      	mov	sl, r2
 800d71c:	f04f 0b00 	mov.w	fp, #0
 800d720:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d722:	4652      	mov	r2, sl
 800d724:	4649      	mov	r1, r9
 800d726:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d72a:	47a8      	blx	r5
 800d72c:	f001 f92e 	bl	800e98c <uxr_millis>
 800d730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d734:	4605      	mov	r5, r0
 800d736:	e009      	b.n	800d74c <wait_session_status+0x48>
 800d738:	f001 f928 	bl	800e98c <uxr_millis>
 800d73c:	1b40      	subs	r0, r0, r5
 800d73e:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800d742:	2b00      	cmp	r3, #0
 800d744:	dd40      	ble.n	800d7c8 <wait_session_status+0xc4>
 800d746:	7960      	ldrb	r0, [r4, #5]
 800d748:	28ff      	cmp	r0, #255	; 0xff
 800d74a:	d145      	bne.n	800d7d8 <wait_session_status+0xd4>
 800d74c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800d74e:	a908      	add	r1, sp, #32
 800d750:	6896      	ldr	r6, [r2, #8]
 800d752:	6810      	ldr	r0, [r2, #0]
 800d754:	aa09      	add	r2, sp, #36	; 0x24
 800d756:	47b0      	blx	r6
 800d758:	2800      	cmp	r0, #0
 800d75a:	d0ed      	beq.n	800d738 <wait_session_status+0x34>
 800d75c:	a80c      	add	r0, sp, #48	; 0x30
 800d75e:	2600      	movs	r6, #0
 800d760:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800d764:	f7fb fdfe 	bl	8009364 <ucdr_init_buffer>
 800d768:	f10d 031e 	add.w	r3, sp, #30
 800d76c:	aa07      	add	r2, sp, #28
 800d76e:	a90c      	add	r1, sp, #48	; 0x30
 800d770:	4620      	mov	r0, r4
 800d772:	f88d 601c 	strb.w	r6, [sp, #28]
 800d776:	f000 fa8f 	bl	800dc98 <uxr_read_session_header>
 800d77a:	2800      	cmp	r0, #0
 800d77c:	d0dc      	beq.n	800d738 <wait_session_status+0x34>
 800d77e:	4631      	mov	r1, r6
 800d780:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800d784:	f000 ffac 	bl	800e6e0 <uxr_stream_id_from_raw>
 800d788:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800d78c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d790:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d794:	2f01      	cmp	r7, #1
 800d796:	9302      	str	r3, [sp, #8]
 800d798:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800d79c:	d05c      	beq.n	800d858 <wait_session_status+0x154>
 800d79e:	2f02      	cmp	r7, #2
 800d7a0:	d020      	beq.n	800d7e4 <wait_session_status+0xe0>
 800d7a2:	2f00      	cmp	r7, #0
 800d7a4:	d1c8      	bne.n	800d738 <wait_session_status+0x34>
 800d7a6:	4639      	mov	r1, r7
 800d7a8:	4638      	mov	r0, r7
 800d7aa:	f000 ff99 	bl	800e6e0 <uxr_stream_id_from_raw>
 800d7ae:	a90c      	add	r1, sp, #48	; 0x30
 800d7b0:	4602      	mov	r2, r0
 800d7b2:	900b      	str	r0, [sp, #44]	; 0x2c
 800d7b4:	4620      	mov	r0, r4
 800d7b6:	f7ff fc2d 	bl	800d014 <read_submessage_list>
 800d7ba:	f001 f8e7 	bl	800e98c <uxr_millis>
 800d7be:	1b40      	subs	r0, r0, r5
 800d7c0:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	dcbe      	bgt.n	800d746 <wait_session_status+0x42>
 800d7c8:	f10b 0b01 	add.w	fp, fp, #1
 800d7cc:	9b03      	ldr	r3, [sp, #12]
 800d7ce:	7960      	ldrb	r0, [r4, #5]
 800d7d0:	455b      	cmp	r3, fp
 800d7d2:	d001      	beq.n	800d7d8 <wait_session_status+0xd4>
 800d7d4:	28ff      	cmp	r0, #255	; 0xff
 800d7d6:	d0a3      	beq.n	800d720 <wait_session_status+0x1c>
 800d7d8:	38ff      	subs	r0, #255	; 0xff
 800d7da:	bf18      	it	ne
 800d7dc:	2001      	movne	r0, #1
 800d7de:	b01d      	add	sp, #116	; 0x74
 800d7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7e4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800d7e8:	4631      	mov	r1, r6
 800d7ea:	f104 0008 	add.w	r0, r4, #8
 800d7ee:	9304      	str	r3, [sp, #16]
 800d7f0:	f001 f864 	bl	800e8bc <uxr_get_input_reliable_stream>
 800d7f4:	4680      	mov	r8, r0
 800d7f6:	b348      	cbz	r0, 800d84c <wait_session_status+0x148>
 800d7f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7fa:	a80c      	add	r0, sp, #48	; 0x30
 800d7fc:	9205      	str	r2, [sp, #20]
 800d7fe:	f7fb fde3 	bl	80093c8 <ucdr_buffer_remaining>
 800d802:	4603      	mov	r3, r0
 800d804:	f10d 001d 	add.w	r0, sp, #29
 800d808:	9a05      	ldr	r2, [sp, #20]
 800d80a:	9000      	str	r0, [sp, #0]
 800d80c:	4640      	mov	r0, r8
 800d80e:	9902      	ldr	r1, [sp, #8]
 800d810:	f005 fb08 	bl	8012e24 <uxr_receive_reliable_message>
 800d814:	b1d0      	cbz	r0, 800d84c <wait_session_status+0x148>
 800d816:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d03a      	beq.n	800d894 <wait_session_status+0x190>
 800d81e:	9f04      	ldr	r7, [sp, #16]
 800d820:	e00a      	b.n	800d838 <wait_session_status+0x134>
 800d822:	f04f 0302 	mov.w	r3, #2
 800d826:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800d82a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800d82e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800d832:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d834:	f7ff fbee 	bl	800d014 <read_submessage_list>
 800d838:	a914      	add	r1, sp, #80	; 0x50
 800d83a:	2204      	movs	r2, #4
 800d83c:	4640      	mov	r0, r8
 800d83e:	f005 fb73 	bl	8012f28 <uxr_next_input_reliable_buffer_available>
 800d842:	4603      	mov	r3, r0
 800d844:	a914      	add	r1, sp, #80	; 0x50
 800d846:	4620      	mov	r0, r4
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d1ea      	bne.n	800d822 <wait_session_status+0x11e>
 800d84c:	4632      	mov	r2, r6
 800d84e:	9904      	ldr	r1, [sp, #16]
 800d850:	4620      	mov	r0, r4
 800d852:	f7ff fa59 	bl	800cd08 <write_submessage_acknack.isra.0>
 800d856:	e76f      	b.n	800d738 <wait_session_status+0x34>
 800d858:	4631      	mov	r1, r6
 800d85a:	f104 0008 	add.w	r0, r4, #8
 800d85e:	f001 f823 	bl	800e8a8 <uxr_get_input_best_effort_stream>
 800d862:	2800      	cmp	r0, #0
 800d864:	f43f af68 	beq.w	800d738 <wait_session_status+0x34>
 800d868:	9902      	ldr	r1, [sp, #8]
 800d86a:	f005 fa51 	bl	8012d10 <uxr_receive_best_effort_message>
 800d86e:	2800      	cmp	r0, #0
 800d870:	f43f af62 	beq.w	800d738 <wait_session_status+0x34>
 800d874:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800d878:	a90c      	add	r1, sp, #48	; 0x30
 800d87a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d87c:	4620      	mov	r0, r4
 800d87e:	f7ff fbc9 	bl	800d014 <read_submessage_list>
 800d882:	e759      	b.n	800d738 <wait_session_status+0x34>
 800d884:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d886:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d88a:	47a0      	blx	r4
 800d88c:	2001      	movs	r0, #1
 800d88e:	b01d      	add	sp, #116	; 0x74
 800d890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d894:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800d898:	a90c      	add	r1, sp, #48	; 0x30
 800d89a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d89c:	4620      	mov	r0, r4
 800d89e:	f7ff fbb9 	bl	800d014 <read_submessage_list>
 800d8a2:	e7bc      	b.n	800d81e <wait_session_status+0x11a>

0800d8a4 <uxr_delete_session_retries>:
 800d8a4:	b530      	push	{r4, r5, lr}
 800d8a6:	b08f      	sub	sp, #60	; 0x3c
 800d8a8:	4604      	mov	r4, r0
 800d8aa:	460d      	mov	r5, r1
 800d8ac:	f000 fa34 	bl	800dd18 <uxr_session_header_offset>
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	2210      	movs	r2, #16
 800d8b4:	a902      	add	r1, sp, #8
 800d8b6:	9000      	str	r0, [sp, #0]
 800d8b8:	a806      	add	r0, sp, #24
 800d8ba:	f7fb fd41 	bl	8009340 <ucdr_init_buffer_origin_offset>
 800d8be:	a906      	add	r1, sp, #24
 800d8c0:	4620      	mov	r0, r4
 800d8c2:	f000 f979 	bl	800dbb8 <uxr_buffer_delete_session>
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	9b06      	ldr	r3, [sp, #24]
 800d8ca:	4620      	mov	r0, r4
 800d8cc:	4611      	mov	r1, r2
 800d8ce:	f000 f9cf 	bl	800dc70 <uxr_stamp_session_header>
 800d8d2:	a806      	add	r0, sp, #24
 800d8d4:	f7fb fd74 	bl	80093c0 <ucdr_buffer_length>
 800d8d8:	462b      	mov	r3, r5
 800d8da:	4602      	mov	r2, r0
 800d8dc:	a902      	add	r1, sp, #8
 800d8de:	4620      	mov	r0, r4
 800d8e0:	f7ff ff10 	bl	800d704 <wait_session_status>
 800d8e4:	b118      	cbz	r0, 800d8ee <uxr_delete_session_retries+0x4a>
 800d8e6:	7960      	ldrb	r0, [r4, #5]
 800d8e8:	fab0 f080 	clz	r0, r0
 800d8ec:	0940      	lsrs	r0, r0, #5
 800d8ee:	b00f      	add	sp, #60	; 0x3c
 800d8f0:	bd30      	pop	{r4, r5, pc}
 800d8f2:	bf00      	nop

0800d8f4 <uxr_create_session>:
 800d8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f8:	f100 0b08 	add.w	fp, r0, #8
 800d8fc:	4604      	mov	r4, r0
 800d8fe:	b0ab      	sub	sp, #172	; 0xac
 800d900:	4658      	mov	r0, fp
 800d902:	465e      	mov	r6, fp
 800d904:	f000 ff22 	bl	800e74c <uxr_reset_stream_storage>
 800d908:	4620      	mov	r0, r4
 800d90a:	f000 fa05 	bl	800dd18 <uxr_session_header_offset>
 800d90e:	2300      	movs	r3, #0
 800d910:	221c      	movs	r2, #28
 800d912:	a90b      	add	r1, sp, #44	; 0x2c
 800d914:	9000      	str	r0, [sp, #0]
 800d916:	a812      	add	r0, sp, #72	; 0x48
 800d918:	f7fb fd12 	bl	8009340 <ucdr_init_buffer_origin_offset>
 800d91c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d91e:	a912      	add	r1, sp, #72	; 0x48
 800d920:	4620      	mov	r0, r4
 800d922:	8a1a      	ldrh	r2, [r3, #16]
 800d924:	3a04      	subs	r2, #4
 800d926:	b292      	uxth	r2, r2
 800d928:	f000 f91c 	bl	800db64 <uxr_buffer_create_session>
 800d92c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d92e:	4620      	mov	r0, r4
 800d930:	f000 f98a 	bl	800dc48 <uxr_stamp_create_session_header>
 800d934:	a812      	add	r0, sp, #72	; 0x48
 800d936:	f7fb fd43 	bl	80093c0 <ucdr_buffer_length>
 800d93a:	23ff      	movs	r3, #255	; 0xff
 800d93c:	4681      	mov	r9, r0
 800d93e:	7163      	strb	r3, [r4, #5]
 800d940:	230a      	movs	r3, #10
 800d942:	9303      	str	r3, [sp, #12]
 800d944:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d946:	464a      	mov	r2, r9
 800d948:	a90b      	add	r1, sp, #44	; 0x2c
 800d94a:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d94e:	47a8      	blx	r5
 800d950:	f001 f81c 	bl	800e98c <uxr_millis>
 800d954:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d958:	4605      	mov	r5, r0
 800d95a:	e009      	b.n	800d970 <uxr_create_session+0x7c>
 800d95c:	f001 f816 	bl	800e98c <uxr_millis>
 800d960:	1b40      	subs	r0, r0, r5
 800d962:	7962      	ldrb	r2, [r4, #5]
 800d964:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800d968:	2b00      	cmp	r3, #0
 800d96a:	dd38      	ble.n	800d9de <uxr_create_session+0xea>
 800d96c:	2aff      	cmp	r2, #255	; 0xff
 800d96e:	d13c      	bne.n	800d9ea <uxr_create_session+0xf6>
 800d970:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800d972:	a907      	add	r1, sp, #28
 800d974:	6897      	ldr	r7, [r2, #8]
 800d976:	6810      	ldr	r0, [r2, #0]
 800d978:	aa08      	add	r2, sp, #32
 800d97a:	47b8      	blx	r7
 800d97c:	2800      	cmp	r0, #0
 800d97e:	d0ed      	beq.n	800d95c <uxr_create_session+0x68>
 800d980:	a81a      	add	r0, sp, #104	; 0x68
 800d982:	2700      	movs	r7, #0
 800d984:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d988:	f7fb fcec 	bl	8009364 <ucdr_init_buffer>
 800d98c:	f10d 031a 	add.w	r3, sp, #26
 800d990:	aa06      	add	r2, sp, #24
 800d992:	a91a      	add	r1, sp, #104	; 0x68
 800d994:	4620      	mov	r0, r4
 800d996:	f88d 7018 	strb.w	r7, [sp, #24]
 800d99a:	f000 f97d 	bl	800dc98 <uxr_read_session_header>
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	d0dc      	beq.n	800d95c <uxr_create_session+0x68>
 800d9a2:	4639      	mov	r1, r7
 800d9a4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d9a8:	f000 fe9a 	bl	800e6e0 <uxr_stream_id_from_raw>
 800d9ac:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800d9b0:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 800d9b4:	f3c0 2807 	ubfx	r8, r0, #8, #8
 800d9b8:	2f01      	cmp	r7, #1
 800d9ba:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800d9be:	d053      	beq.n	800da68 <uxr_create_session+0x174>
 800d9c0:	2f02      	cmp	r7, #2
 800d9c2:	d018      	beq.n	800d9f6 <uxr_create_session+0x102>
 800d9c4:	2f00      	cmp	r7, #0
 800d9c6:	d1c9      	bne.n	800d95c <uxr_create_session+0x68>
 800d9c8:	4639      	mov	r1, r7
 800d9ca:	4638      	mov	r0, r7
 800d9cc:	f000 fe88 	bl	800e6e0 <uxr_stream_id_from_raw>
 800d9d0:	a91a      	add	r1, sp, #104	; 0x68
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	900a      	str	r0, [sp, #40]	; 0x28
 800d9d6:	4620      	mov	r0, r4
 800d9d8:	f7ff fb1c 	bl	800d014 <read_submessage_list>
 800d9dc:	e7be      	b.n	800d95c <uxr_create_session+0x68>
 800d9de:	9b03      	ldr	r3, [sp, #12]
 800d9e0:	3b01      	subs	r3, #1
 800d9e2:	9303      	str	r3, [sp, #12]
 800d9e4:	d001      	beq.n	800d9ea <uxr_create_session+0xf6>
 800d9e6:	2aff      	cmp	r2, #255	; 0xff
 800d9e8:	d0ac      	beq.n	800d944 <uxr_create_session+0x50>
 800d9ea:	2a00      	cmp	r2, #0
 800d9ec:	d051      	beq.n	800da92 <uxr_create_session+0x19e>
 800d9ee:	2000      	movs	r0, #0
 800d9f0:	b02b      	add	sp, #172	; 0xac
 800d9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9f6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d9fa:	4641      	mov	r1, r8
 800d9fc:	4630      	mov	r0, r6
 800d9fe:	9304      	str	r3, [sp, #16]
 800da00:	f000 ff5c 	bl	800e8bc <uxr_get_input_reliable_stream>
 800da04:	4682      	mov	sl, r0
 800da06:	b348      	cbz	r0, 800da5c <uxr_create_session+0x168>
 800da08:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800da0a:	a81a      	add	r0, sp, #104	; 0x68
 800da0c:	9205      	str	r2, [sp, #20]
 800da0e:	f7fb fcdb 	bl	80093c8 <ucdr_buffer_remaining>
 800da12:	4603      	mov	r3, r0
 800da14:	f10d 0019 	add.w	r0, sp, #25
 800da18:	9a05      	ldr	r2, [sp, #20]
 800da1a:	4659      	mov	r1, fp
 800da1c:	9000      	str	r0, [sp, #0]
 800da1e:	4650      	mov	r0, sl
 800da20:	f005 fa00 	bl	8012e24 <uxr_receive_reliable_message>
 800da24:	b1d0      	cbz	r0, 800da5c <uxr_create_session+0x168>
 800da26:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d038      	beq.n	800daa0 <uxr_create_session+0x1ac>
 800da2e:	9f04      	ldr	r7, [sp, #16]
 800da30:	e00a      	b.n	800da48 <uxr_create_session+0x154>
 800da32:	f04f 0302 	mov.w	r3, #2
 800da36:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 800da3a:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 800da3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da44:	f7ff fae6 	bl	800d014 <read_submessage_list>
 800da48:	a922      	add	r1, sp, #136	; 0x88
 800da4a:	2204      	movs	r2, #4
 800da4c:	4650      	mov	r0, sl
 800da4e:	f005 fa6b 	bl	8012f28 <uxr_next_input_reliable_buffer_available>
 800da52:	4603      	mov	r3, r0
 800da54:	a922      	add	r1, sp, #136	; 0x88
 800da56:	4620      	mov	r0, r4
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d1ea      	bne.n	800da32 <uxr_create_session+0x13e>
 800da5c:	4642      	mov	r2, r8
 800da5e:	9904      	ldr	r1, [sp, #16]
 800da60:	4620      	mov	r0, r4
 800da62:	f7ff f951 	bl	800cd08 <write_submessage_acknack.isra.0>
 800da66:	e779      	b.n	800d95c <uxr_create_session+0x68>
 800da68:	4641      	mov	r1, r8
 800da6a:	4630      	mov	r0, r6
 800da6c:	f000 ff1c 	bl	800e8a8 <uxr_get_input_best_effort_stream>
 800da70:	2800      	cmp	r0, #0
 800da72:	f43f af73 	beq.w	800d95c <uxr_create_session+0x68>
 800da76:	4659      	mov	r1, fp
 800da78:	f005 f94a 	bl	8012d10 <uxr_receive_best_effort_message>
 800da7c:	2800      	cmp	r0, #0
 800da7e:	f43f af6d 	beq.w	800d95c <uxr_create_session+0x68>
 800da82:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 800da86:	a91a      	add	r1, sp, #104	; 0x68
 800da88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da8a:	4620      	mov	r0, r4
 800da8c:	f7ff fac2 	bl	800d014 <read_submessage_list>
 800da90:	e764      	b.n	800d95c <uxr_create_session+0x68>
 800da92:	4630      	mov	r0, r6
 800da94:	f000 fe5a 	bl	800e74c <uxr_reset_stream_storage>
 800da98:	2001      	movs	r0, #1
 800da9a:	b02b      	add	sp, #172	; 0xac
 800da9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daa0:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 800daa4:	a91a      	add	r1, sp, #104	; 0x68
 800daa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800daa8:	4620      	mov	r0, r4
 800daaa:	f7ff fab3 	bl	800d014 <read_submessage_list>
 800daae:	e7be      	b.n	800da2e <uxr_create_session+0x13a>

0800dab0 <uxr_prepare_stream_to_write_submessage>:
 800dab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dab4:	b082      	sub	sp, #8
 800dab6:	4604      	mov	r4, r0
 800dab8:	4610      	mov	r0, r2
 800daba:	4615      	mov	r5, r2
 800dabc:	461e      	mov	r6, r3
 800dabe:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 800dac2:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800dac6:	f105 0904 	add.w	r9, r5, #4
 800daca:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800dace:	9101      	str	r1, [sp, #4]
 800dad0:	f000 ff56 	bl	800e980 <uxr_submessage_padding>
 800dad4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dad8:	4481      	add	r9, r0
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d01d      	beq.n	800db1a <uxr_prepare_stream_to_write_submessage+0x6a>
 800dade:	2b02      	cmp	r3, #2
 800dae0:	d116      	bne.n	800db10 <uxr_prepare_stream_to_write_submessage+0x60>
 800dae2:	f104 0008 	add.w	r0, r4, #8
 800dae6:	4651      	mov	r1, sl
 800dae8:	f000 fed2 	bl	800e890 <uxr_get_output_reliable_stream>
 800daec:	4604      	mov	r4, r0
 800daee:	b158      	cbz	r0, 800db08 <uxr_prepare_stream_to_write_submessage+0x58>
 800daf0:	4649      	mov	r1, r9
 800daf2:	4632      	mov	r2, r6
 800daf4:	f005 fbde 	bl	80132b4 <uxr_prepare_reliable_buffer_to_write>
 800daf8:	4604      	mov	r4, r0
 800dafa:	b12c      	cbz	r4, 800db08 <uxr_prepare_stream_to_write_submessage+0x58>
 800dafc:	4643      	mov	r3, r8
 800dafe:	b2aa      	uxth	r2, r5
 800db00:	4639      	mov	r1, r7
 800db02:	4630      	mov	r0, r6
 800db04:	f000 fefc 	bl	800e900 <uxr_buffer_submessage_header>
 800db08:	4620      	mov	r0, r4
 800db0a:	b002      	add	sp, #8
 800db0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db10:	2400      	movs	r4, #0
 800db12:	4620      	mov	r0, r4
 800db14:	b002      	add	sp, #8
 800db16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db1a:	f104 0008 	add.w	r0, r4, #8
 800db1e:	4651      	mov	r1, sl
 800db20:	f000 feae 	bl	800e880 <uxr_get_output_best_effort_stream>
 800db24:	4604      	mov	r4, r0
 800db26:	2800      	cmp	r0, #0
 800db28:	d0ee      	beq.n	800db08 <uxr_prepare_stream_to_write_submessage+0x58>
 800db2a:	4649      	mov	r1, r9
 800db2c:	4632      	mov	r2, r6
 800db2e:	f005 faeb 	bl	8013108 <uxr_prepare_best_effort_buffer_to_write>
 800db32:	4604      	mov	r4, r0
 800db34:	e7e1      	b.n	800dafa <uxr_prepare_stream_to_write_submessage+0x4a>
 800db36:	bf00      	nop

0800db38 <uxr_init_session_info>:
 800db38:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 800db3c:	23ff      	movs	r3, #255	; 0xff
 800db3e:	7102      	strb	r2, [r0, #4]
 800db40:	f880 c001 	strb.w	ip, [r0, #1]
 800db44:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800db48:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800db4c:	7001      	strb	r1, [r0, #0]
 800db4e:	f880 c002 	strb.w	ip, [r0, #2]
 800db52:	7143      	strb	r3, [r0, #5]
 800db54:	70c2      	strb	r2, [r0, #3]
 800db56:	b500      	push	{lr}
 800db58:	f04f 0e09 	mov.w	lr, #9
 800db5c:	f8a0 e006 	strh.w	lr, [r0, #6]
 800db60:	f85d fb04 	ldr.w	pc, [sp], #4

0800db64 <uxr_buffer_create_session>:
 800db64:	b530      	push	{r4, r5, lr}
 800db66:	2300      	movs	r3, #0
 800db68:	b089      	sub	sp, #36	; 0x24
 800db6a:	4d12      	ldr	r5, [pc, #72]	; (800dbb4 <uxr_buffer_create_session+0x50>)
 800db6c:	460c      	mov	r4, r1
 800db6e:	9307      	str	r3, [sp, #28]
 800db70:	4619      	mov	r1, r3
 800db72:	f8ad 201c 	strh.w	r2, [sp, #28]
 800db76:	2201      	movs	r2, #1
 800db78:	9301      	str	r3, [sp, #4]
 800db7a:	80c2      	strh	r2, [r0, #6]
 800db7c:	f88d 2004 	strb.w	r2, [sp, #4]
 800db80:	682a      	ldr	r2, [r5, #0]
 800db82:	9303      	str	r3, [sp, #12]
 800db84:	9200      	str	r2, [sp, #0]
 800db86:	88aa      	ldrh	r2, [r5, #4]
 800db88:	9306      	str	r3, [sp, #24]
 800db8a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800db8e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800db92:	9202      	str	r2, [sp, #8]
 800db94:	7802      	ldrb	r2, [r0, #0]
 800db96:	4620      	mov	r0, r4
 800db98:	f88d 200c 	strb.w	r2, [sp, #12]
 800db9c:	2210      	movs	r2, #16
 800db9e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800dba2:	f000 fead 	bl	800e900 <uxr_buffer_submessage_header>
 800dba6:	4669      	mov	r1, sp
 800dba8:	4620      	mov	r0, r4
 800dbaa:	f001 fb89 	bl	800f2c0 <uxr_serialize_CREATE_CLIENT_Payload>
 800dbae:	b009      	add	sp, #36	; 0x24
 800dbb0:	bd30      	pop	{r4, r5, pc}
 800dbb2:	bf00      	nop
 800dbb4:	080157ac 	.word	0x080157ac

0800dbb8 <uxr_buffer_delete_session>:
 800dbb8:	4a0c      	ldr	r2, [pc, #48]	; (800dbec <uxr_buffer_delete_session+0x34>)
 800dbba:	2302      	movs	r3, #2
 800dbbc:	f44f 7c00 	mov.w	ip, #512	; 0x200
 800dbc0:	b510      	push	{r4, lr}
 800dbc2:	460c      	mov	r4, r1
 800dbc4:	b082      	sub	sp, #8
 800dbc6:	8911      	ldrh	r1, [r2, #8]
 800dbc8:	2204      	movs	r2, #4
 800dbca:	80c3      	strh	r3, [r0, #6]
 800dbcc:	2300      	movs	r3, #0
 800dbce:	f8ad 1006 	strh.w	r1, [sp, #6]
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	2103      	movs	r1, #3
 800dbd6:	f8ad c004 	strh.w	ip, [sp, #4]
 800dbda:	f000 fe91 	bl	800e900 <uxr_buffer_submessage_header>
 800dbde:	a901      	add	r1, sp, #4
 800dbe0:	4620      	mov	r0, r4
 800dbe2:	f001 fc15 	bl	800f410 <uxr_serialize_DELETE_Payload>
 800dbe6:	b002      	add	sp, #8
 800dbe8:	bd10      	pop	{r4, pc}
 800dbea:	bf00      	nop
 800dbec:	080157ac 	.word	0x080157ac

0800dbf0 <uxr_read_create_session_status>:
 800dbf0:	b510      	push	{r4, lr}
 800dbf2:	460b      	mov	r3, r1
 800dbf4:	b088      	sub	sp, #32
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	a901      	add	r1, sp, #4
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f001 fc18 	bl	800f430 <uxr_deserialize_STATUS_AGENT_Payload>
 800dc00:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dc04:	7163      	strb	r3, [r4, #5]
 800dc06:	b008      	add	sp, #32
 800dc08:	bd10      	pop	{r4, pc}
 800dc0a:	bf00      	nop

0800dc0c <uxr_read_delete_session_status>:
 800dc0c:	b510      	push	{r4, lr}
 800dc0e:	b084      	sub	sp, #16
 800dc10:	4604      	mov	r4, r0
 800dc12:	4608      	mov	r0, r1
 800dc14:	a902      	add	r1, sp, #8
 800dc16:	f001 fc3b 	bl	800f490 <uxr_deserialize_STATUS_Payload>
 800dc1a:	88e3      	ldrh	r3, [r4, #6]
 800dc1c:	2b02      	cmp	r3, #2
 800dc1e:	d001      	beq.n	800dc24 <uxr_read_delete_session_status+0x18>
 800dc20:	b004      	add	sp, #16
 800dc22:	bd10      	pop	{r4, pc}
 800dc24:	f10d 000a 	add.w	r0, sp, #10
 800dc28:	f7fe fec4 	bl	800c9b4 <uxr_object_id_from_raw>
 800dc2c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800dc30:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800dc34:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800dc38:	b29b      	uxth	r3, r3
 800dc3a:	2b02      	cmp	r3, #2
 800dc3c:	d1f0      	bne.n	800dc20 <uxr_read_delete_session_status+0x14>
 800dc3e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800dc42:	7163      	strb	r3, [r4, #5]
 800dc44:	e7ec      	b.n	800dc20 <uxr_read_delete_session_status+0x14>
 800dc46:	bf00      	nop

0800dc48 <uxr_stamp_create_session_header>:
 800dc48:	b510      	push	{r4, lr}
 800dc4a:	2208      	movs	r2, #8
 800dc4c:	b08a      	sub	sp, #40	; 0x28
 800dc4e:	4604      	mov	r4, r0
 800dc50:	eb0d 0002 	add.w	r0, sp, r2
 800dc54:	f7fb fb86 	bl	8009364 <ucdr_init_buffer>
 800dc58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	a802      	add	r0, sp, #8
 800dc60:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800dc64:	9400      	str	r4, [sp, #0]
 800dc66:	461a      	mov	r2, r3
 800dc68:	f000 fef2 	bl	800ea50 <uxr_serialize_message_header>
 800dc6c:	b00a      	add	sp, #40	; 0x28
 800dc6e:	bd10      	pop	{r4, pc}

0800dc70 <uxr_stamp_session_header>:
 800dc70:	b530      	push	{r4, r5, lr}
 800dc72:	b08d      	sub	sp, #52	; 0x34
 800dc74:	4604      	mov	r4, r0
 800dc76:	460d      	mov	r5, r1
 800dc78:	4619      	mov	r1, r3
 800dc7a:	a804      	add	r0, sp, #16
 800dc7c:	9203      	str	r2, [sp, #12]
 800dc7e:	2208      	movs	r2, #8
 800dc80:	f7fb fb70 	bl	8009364 <ucdr_init_buffer>
 800dc84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc88:	9b03      	ldr	r3, [sp, #12]
 800dc8a:	462a      	mov	r2, r5
 800dc8c:	a804      	add	r0, sp, #16
 800dc8e:	9400      	str	r4, [sp, #0]
 800dc90:	f000 fede 	bl	800ea50 <uxr_serialize_message_header>
 800dc94:	b00d      	add	sp, #52	; 0x34
 800dc96:	bd30      	pop	{r4, r5, pc}

0800dc98 <uxr_read_session_header>:
 800dc98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc9c:	4607      	mov	r7, r0
 800dc9e:	b084      	sub	sp, #16
 800dca0:	4608      	mov	r0, r1
 800dca2:	460c      	mov	r4, r1
 800dca4:	4615      	mov	r5, r2
 800dca6:	461e      	mov	r6, r3
 800dca8:	f7fb fb8e 	bl	80093c8 <ucdr_buffer_remaining>
 800dcac:	2808      	cmp	r0, #8
 800dcae:	d803      	bhi.n	800dcb8 <uxr_read_session_header+0x20>
 800dcb0:	2000      	movs	r0, #0
 800dcb2:	b004      	add	sp, #16
 800dcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcb8:	f10d 080c 	add.w	r8, sp, #12
 800dcbc:	4633      	mov	r3, r6
 800dcbe:	462a      	mov	r2, r5
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	f10d 010b 	add.w	r1, sp, #11
 800dcc6:	f8cd 8000 	str.w	r8, [sp]
 800dcca:	f000 fedf 	bl	800ea8c <uxr_deserialize_message_header>
 800dcce:	783a      	ldrb	r2, [r7, #0]
 800dcd0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d1eb      	bne.n	800dcb0 <uxr_read_session_header+0x18>
 800dcd8:	061b      	lsls	r3, r3, #24
 800dcda:	d41b      	bmi.n	800dd14 <uxr_read_session_header+0x7c>
 800dcdc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800dce0:	787b      	ldrb	r3, [r7, #1]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d003      	beq.n	800dcee <uxr_read_session_header+0x56>
 800dce6:	2001      	movs	r0, #1
 800dce8:	f080 0001 	eor.w	r0, r0, #1
 800dcec:	e7e1      	b.n	800dcb2 <uxr_read_session_header+0x1a>
 800dcee:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800dcf2:	1cb8      	adds	r0, r7, #2
 800dcf4:	78bb      	ldrb	r3, [r7, #2]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d1f5      	bne.n	800dce6 <uxr_read_session_header+0x4e>
 800dcfa:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800dcfe:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d1ef      	bne.n	800dce6 <uxr_read_session_header+0x4e>
 800dd06:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800dd0a:	7843      	ldrb	r3, [r0, #1]
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d1ea      	bne.n	800dce6 <uxr_read_session_header+0x4e>
 800dd10:	2000      	movs	r0, #0
 800dd12:	e7e9      	b.n	800dce8 <uxr_read_session_header+0x50>
 800dd14:	2001      	movs	r0, #1
 800dd16:	e7cc      	b.n	800dcb2 <uxr_read_session_header+0x1a>

0800dd18 <uxr_session_header_offset>:
 800dd18:	f990 3000 	ldrsb.w	r3, [r0]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	bfac      	ite	ge
 800dd20:	2008      	movge	r0, #8
 800dd22:	2004      	movlt	r0, #4
 800dd24:	4770      	bx	lr
 800dd26:	bf00      	nop

0800dd28 <uxr_init_base_object_request>:
 800dd28:	b510      	push	{r4, lr}
 800dd2a:	b082      	sub	sp, #8
 800dd2c:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800dd30:	9101      	str	r1, [sp, #4]
 800dd32:	88c3      	ldrh	r3, [r0, #6]
 800dd34:	f1a3 010a 	sub.w	r1, r3, #10
 800dd38:	b289      	uxth	r1, r1
 800dd3a:	42a1      	cmp	r1, r4
 800dd3c:	d80f      	bhi.n	800dd5e <uxr_init_base_object_request+0x36>
 800dd3e:	3301      	adds	r3, #1
 800dd40:	b29c      	uxth	r4, r3
 800dd42:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	80c4      	strh	r4, [r0, #6]
 800dd4a:	1c91      	adds	r1, r2, #2
 800dd4c:	9801      	ldr	r0, [sp, #4]
 800dd4e:	f882 c000 	strb.w	ip, [r2]
 800dd52:	7053      	strb	r3, [r2, #1]
 800dd54:	f7fe fe42 	bl	800c9dc <uxr_object_id_to_raw>
 800dd58:	4620      	mov	r0, r4
 800dd5a:	b002      	add	sp, #8
 800dd5c:	bd10      	pop	{r4, pc}
 800dd5e:	230a      	movs	r3, #10
 800dd60:	f04f 0c00 	mov.w	ip, #0
 800dd64:	461c      	mov	r4, r3
 800dd66:	e7ef      	b.n	800dd48 <uxr_init_base_object_request+0x20>

0800dd68 <uxr_parse_base_object_request>:
 800dd68:	b570      	push	{r4, r5, r6, lr}
 800dd6a:	4604      	mov	r4, r0
 800dd6c:	3002      	adds	r0, #2
 800dd6e:	460d      	mov	r5, r1
 800dd70:	4616      	mov	r6, r2
 800dd72:	f7fe fe1f 	bl	800c9b4 <uxr_object_id_from_raw>
 800dd76:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800dd7a:	8028      	strh	r0, [r5, #0]
 800dd7c:	806b      	strh	r3, [r5, #2]
 800dd7e:	7822      	ldrb	r2, [r4, #0]
 800dd80:	7863      	ldrb	r3, [r4, #1]
 800dd82:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800dd86:	8033      	strh	r3, [r6, #0]
 800dd88:	bd70      	pop	{r4, r5, r6, pc}
 800dd8a:	bf00      	nop

0800dd8c <uxr_init_framing_io>:
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	7041      	strb	r1, [r0, #1]
 800dd90:	7003      	strb	r3, [r0, #0]
 800dd92:	8583      	strh	r3, [r0, #44]	; 0x2c
 800dd94:	4770      	bx	lr
 800dd96:	bf00      	nop

0800dd98 <uxr_write_framed_msg>:
 800dd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd9c:	4617      	mov	r7, r2
 800dd9e:	7842      	ldrb	r2, [r0, #1]
 800dda0:	460e      	mov	r6, r1
 800dda2:	b083      	sub	sp, #12
 800dda4:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 800dda8:	469b      	mov	fp, r3
 800ddaa:	237e      	movs	r3, #126	; 0x7e
 800ddac:	4604      	mov	r4, r0
 800ddae:	2901      	cmp	r1, #1
 800ddb0:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800ddb4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800ddb8:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 800ddbc:	f240 8115 	bls.w	800dfea <uxr_write_framed_msg+0x252>
 800ddc0:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 800ddc4:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 800ddc8:	2202      	movs	r2, #2
 800ddca:	2901      	cmp	r1, #1
 800ddcc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800ddd0:	d952      	bls.n	800de78 <uxr_write_framed_msg+0xe0>
 800ddd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddd4:	2103      	movs	r1, #3
 800ddd6:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 800ddda:	b2dd      	uxtb	r5, r3
 800dddc:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 800dde0:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 800dde4:	2a01      	cmp	r2, #1
 800dde6:	d95c      	bls.n	800dea2 <uxr_write_framed_msg+0x10a>
 800dde8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddea:	1862      	adds	r2, r4, r1
 800ddec:	3101      	adds	r1, #1
 800ddee:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800ddf2:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 800ddf6:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 800ddfa:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 800ddfe:	2a01      	cmp	r2, #1
 800de00:	d961      	bls.n	800dec6 <uxr_write_framed_msg+0x12e>
 800de02:	1c4a      	adds	r2, r1, #1
 800de04:	4421      	add	r1, r4
 800de06:	b2d2      	uxtb	r2, r2
 800de08:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 800de0c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800de10:	2b00      	cmp	r3, #0
 800de12:	d06a      	beq.n	800deea <uxr_write_framed_msg+0x152>
 800de14:	f04f 0800 	mov.w	r8, #0
 800de18:	46c1      	mov	r9, r8
 800de1a:	e016      	b.n	800de4a <uxr_write_framed_msg+0xb2>
 800de1c:	2a29      	cmp	r2, #41	; 0x29
 800de1e:	d868      	bhi.n	800def2 <uxr_write_framed_msg+0x15a>
 800de20:	18a0      	adds	r0, r4, r2
 800de22:	3201      	adds	r2, #1
 800de24:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800de28:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800de2c:	ea88 0101 	eor.w	r1, r8, r1
 800de30:	4b7d      	ldr	r3, [pc, #500]	; (800e028 <uxr_write_framed_msg+0x290>)
 800de32:	f109 0901 	add.w	r9, r9, #1
 800de36:	b2c9      	uxtb	r1, r1
 800de38:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 800de3c:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 800de40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de42:	454b      	cmp	r3, r9
 800de44:	d969      	bls.n	800df1a <uxr_write_framed_msg+0x182>
 800de46:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800de4a:	f81b 1009 	ldrb.w	r1, [fp, r9]
 800de4e:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 800de52:	2801      	cmp	r0, #1
 800de54:	d8e2      	bhi.n	800de1c <uxr_write_framed_msg+0x84>
 800de56:	1c50      	adds	r0, r2, #1
 800de58:	b2c0      	uxtb	r0, r0
 800de5a:	2829      	cmp	r0, #41	; 0x29
 800de5c:	d849      	bhi.n	800def2 <uxr_write_framed_msg+0x15a>
 800de5e:	18a0      	adds	r0, r4, r2
 800de60:	f04f 037d 	mov.w	r3, #125	; 0x7d
 800de64:	3202      	adds	r2, #2
 800de66:	f081 0520 	eor.w	r5, r1, #32
 800de6a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800de6e:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 800de72:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800de76:	e7d9      	b.n	800de2c <uxr_write_framed_msg+0x94>
 800de78:	2104      	movs	r1, #4
 800de7a:	f04f 0c03 	mov.w	ip, #3
 800de7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de80:	4422      	add	r2, r4
 800de82:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 800de86:	44a4      	add	ip, r4
 800de88:	b2dd      	uxtb	r5, r3
 800de8a:	f080 0020 	eor.w	r0, r0, #32
 800de8e:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 800de92:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 800de96:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 800de9a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 800de9e:	2a01      	cmp	r2, #1
 800dea0:	d8a2      	bhi.n	800dde8 <uxr_write_framed_msg+0x50>
 800dea2:	1862      	adds	r2, r4, r1
 800dea4:	207d      	movs	r0, #125	; 0x7d
 800dea6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dea8:	f085 0520 	eor.w	r5, r5, #32
 800deac:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 800deb0:	3102      	adds	r1, #2
 800deb2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800deb6:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 800deba:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 800debe:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 800dec2:	2a01      	cmp	r2, #1
 800dec4:	d89d      	bhi.n	800de02 <uxr_write_framed_msg+0x6a>
 800dec6:	1c4d      	adds	r5, r1, #1
 800dec8:	1c8a      	adds	r2, r1, #2
 800deca:	f080 0020 	eor.w	r0, r0, #32
 800dece:	4421      	add	r1, r4
 800ded0:	fa54 f585 	uxtab	r5, r4, r5
 800ded4:	b2d2      	uxtb	r2, r2
 800ded6:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 800deda:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 800dede:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 800dee2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d194      	bne.n	800de14 <uxr_write_framed_msg+0x7c>
 800deea:	4619      	mov	r1, r3
 800deec:	f8ad 3004 	strh.w	r3, [sp, #4]
 800def0:	e019      	b.n	800df26 <uxr_write_framed_msg+0x18e>
 800def2:	2500      	movs	r5, #0
 800def4:	e000      	b.n	800def8 <uxr_write_framed_msg+0x160>
 800def6:	b160      	cbz	r0, 800df12 <uxr_write_framed_msg+0x17a>
 800def8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800defc:	1b52      	subs	r2, r2, r5
 800defe:	4653      	mov	r3, sl
 800df00:	4638      	mov	r0, r7
 800df02:	4421      	add	r1, r4
 800df04:	47b0      	blx	r6
 800df06:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800df0a:	4405      	add	r5, r0
 800df0c:	4295      	cmp	r5, r2
 800df0e:	d3f2      	bcc.n	800def6 <uxr_write_framed_msg+0x15e>
 800df10:	d066      	beq.n	800dfe0 <uxr_write_framed_msg+0x248>
 800df12:	2000      	movs	r0, #0
 800df14:	b003      	add	sp, #12
 800df16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df1a:	fa5f f188 	uxtb.w	r1, r8
 800df1e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800df22:	f8ad 8004 	strh.w	r8, [sp, #4]
 800df26:	f04f 0900 	mov.w	r9, #0
 800df2a:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 800df2e:	46c8      	mov	r8, r9
 800df30:	e013      	b.n	800df5a <uxr_write_framed_msg+0x1c2>
 800df32:	2a29      	cmp	r2, #41	; 0x29
 800df34:	d824      	bhi.n	800df80 <uxr_write_framed_msg+0x1e8>
 800df36:	18a3      	adds	r3, r4, r2
 800df38:	3201      	adds	r2, #1
 800df3a:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 800df3e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800df42:	f109 0901 	add.w	r9, r9, #1
 800df46:	f1b9 0f02 	cmp.w	r9, #2
 800df4a:	d02d      	beq.n	800dfa8 <uxr_write_framed_msg+0x210>
 800df4c:	f109 0308 	add.w	r3, r9, #8
 800df50:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800df54:	446b      	add	r3, sp
 800df56:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 800df5a:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 800df5e:	2b01      	cmp	r3, #1
 800df60:	d8e7      	bhi.n	800df32 <uxr_write_framed_msg+0x19a>
 800df62:	1c53      	adds	r3, r2, #1
 800df64:	b2db      	uxtb	r3, r3
 800df66:	2b29      	cmp	r3, #41	; 0x29
 800df68:	d80a      	bhi.n	800df80 <uxr_write_framed_msg+0x1e8>
 800df6a:	18a3      	adds	r3, r4, r2
 800df6c:	f081 0120 	eor.w	r1, r1, #32
 800df70:	3202      	adds	r2, #2
 800df72:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 800df76:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 800df7a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800df7e:	e7e0      	b.n	800df42 <uxr_write_framed_msg+0x1aa>
 800df80:	2500      	movs	r5, #0
 800df82:	e001      	b.n	800df88 <uxr_write_framed_msg+0x1f0>
 800df84:	2800      	cmp	r0, #0
 800df86:	d0c4      	beq.n	800df12 <uxr_write_framed_msg+0x17a>
 800df88:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800df8c:	1b52      	subs	r2, r2, r5
 800df8e:	4653      	mov	r3, sl
 800df90:	4638      	mov	r0, r7
 800df92:	4421      	add	r1, r4
 800df94:	47b0      	blx	r6
 800df96:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800df9a:	4405      	add	r5, r0
 800df9c:	4295      	cmp	r5, r2
 800df9e:	d3f1      	bcc.n	800df84 <uxr_write_framed_msg+0x1ec>
 800dfa0:	d1b7      	bne.n	800df12 <uxr_write_framed_msg+0x17a>
 800dfa2:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 800dfa6:	e7d1      	b.n	800df4c <uxr_write_framed_msg+0x1b4>
 800dfa8:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800dfac:	b19a      	cbz	r2, 800dfd6 <uxr_write_framed_msg+0x23e>
 800dfae:	2500      	movs	r5, #0
 800dfb0:	e001      	b.n	800dfb6 <uxr_write_framed_msg+0x21e>
 800dfb2:	2800      	cmp	r0, #0
 800dfb4:	d0ad      	beq.n	800df12 <uxr_write_framed_msg+0x17a>
 800dfb6:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800dfba:	1b52      	subs	r2, r2, r5
 800dfbc:	4653      	mov	r3, sl
 800dfbe:	4638      	mov	r0, r7
 800dfc0:	4421      	add	r1, r4
 800dfc2:	47b0      	blx	r6
 800dfc4:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800dfc8:	4405      	add	r5, r0
 800dfca:	4295      	cmp	r5, r2
 800dfcc:	d3f1      	bcc.n	800dfb2 <uxr_write_framed_msg+0x21a>
 800dfce:	d1a0      	bne.n	800df12 <uxr_write_framed_msg+0x17a>
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800dfd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfd8:	b298      	uxth	r0, r3
 800dfda:	b003      	add	sp, #12
 800dfdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfe0:	f04f 0300 	mov.w	r3, #0
 800dfe4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800dfe8:	e72a      	b.n	800de40 <uxr_write_framed_msg+0xa8>
 800dfea:	217d      	movs	r1, #125	; 0x7d
 800dfec:	f082 0220 	eor.w	r2, r2, #32
 800dff0:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 800dff4:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 800dff8:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 800dffc:	2203      	movs	r2, #3
 800dffe:	2901      	cmp	r1, #1
 800e000:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800e004:	d803      	bhi.n	800e00e <uxr_write_framed_msg+0x276>
 800e006:	2105      	movs	r1, #5
 800e008:	f04f 0c04 	mov.w	ip, #4
 800e00c:	e737      	b.n	800de7e <uxr_write_framed_msg+0xe6>
 800e00e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e010:	2104      	movs	r1, #4
 800e012:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 800e016:	b2dd      	uxtb	r5, r3
 800e018:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 800e01c:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 800e020:	2a01      	cmp	r2, #1
 800e022:	f63f aee1 	bhi.w	800dde8 <uxr_write_framed_msg+0x50>
 800e026:	e73c      	b.n	800dea2 <uxr_write_framed_msg+0x10a>
 800e028:	080160c8 	.word	0x080160c8

0800e02c <uxr_framing_read_transport>:
 800e02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e030:	4604      	mov	r4, r0
 800e032:	b085      	sub	sp, #20
 800e034:	4692      	mov	sl, r2
 800e036:	4689      	mov	r9, r1
 800e038:	461d      	mov	r5, r3
 800e03a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800e03c:	f000 fca6 	bl	800e98c <uxr_millis>
 800e040:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800e044:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 800e048:	4680      	mov	r8, r0
 800e04a:	42ba      	cmp	r2, r7
 800e04c:	d05f      	beq.n	800e10e <uxr_framing_read_transport+0xe2>
 800e04e:	d817      	bhi.n	800e080 <uxr_framing_read_transport+0x54>
 800e050:	3f01      	subs	r7, #1
 800e052:	1aba      	subs	r2, r7, r2
 800e054:	2700      	movs	r7, #0
 800e056:	b2d2      	uxtb	r2, r2
 800e058:	42b2      	cmp	r2, r6
 800e05a:	d81a      	bhi.n	800e092 <uxr_framing_read_transport+0x66>
 800e05c:	19d3      	adds	r3, r2, r7
 800e05e:	42b3      	cmp	r3, r6
 800e060:	d852      	bhi.n	800e108 <uxr_framing_read_transport+0xdc>
 800e062:	b9d2      	cbnz	r2, 800e09a <uxr_framing_read_transport+0x6e>
 800e064:	2600      	movs	r6, #0
 800e066:	f000 fc91 	bl	800e98c <uxr_millis>
 800e06a:	682b      	ldr	r3, [r5, #0]
 800e06c:	eba0 0008 	sub.w	r0, r0, r8
 800e070:	1a1b      	subs	r3, r3, r0
 800e072:	4630      	mov	r0, r6
 800e074:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e078:	602b      	str	r3, [r5, #0]
 800e07a:	b005      	add	sp, #20
 800e07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e080:	2f00      	cmp	r7, #0
 800e082:	d060      	beq.n	800e146 <uxr_framing_read_transport+0x11a>
 800e084:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 800e088:	3f01      	subs	r7, #1
 800e08a:	b2d2      	uxtb	r2, r2
 800e08c:	b2ff      	uxtb	r7, r7
 800e08e:	42b2      	cmp	r2, r6
 800e090:	d9e4      	bls.n	800e05c <uxr_framing_read_transport+0x30>
 800e092:	b2f2      	uxtb	r2, r6
 800e094:	2700      	movs	r7, #0
 800e096:	2a00      	cmp	r2, #0
 800e098:	d0e4      	beq.n	800e064 <uxr_framing_read_transport+0x38>
 800e09a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e09c:	4650      	mov	r0, sl
 800e09e:	9203      	str	r2, [sp, #12]
 800e0a0:	9300      	str	r3, [sp, #0]
 800e0a2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800e0a6:	682b      	ldr	r3, [r5, #0]
 800e0a8:	3102      	adds	r1, #2
 800e0aa:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 800e150 <uxr_framing_read_transport+0x124>
 800e0ae:	4421      	add	r1, r4
 800e0b0:	47c8      	blx	r9
 800e0b2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800e0b6:	4606      	mov	r6, r0
 800e0b8:	4403      	add	r3, r0
 800e0ba:	0859      	lsrs	r1, r3, #1
 800e0bc:	fbab 2101 	umull	r2, r1, fp, r1
 800e0c0:	222a      	movs	r2, #42	; 0x2a
 800e0c2:	0889      	lsrs	r1, r1, #2
 800e0c4:	fb02 3111 	mls	r1, r2, r1, r3
 800e0c8:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	d0c9      	beq.n	800e064 <uxr_framing_read_transport+0x38>
 800e0d0:	9a03      	ldr	r2, [sp, #12]
 800e0d2:	4290      	cmp	r0, r2
 800e0d4:	d1c7      	bne.n	800e066 <uxr_framing_read_transport+0x3a>
 800e0d6:	2f00      	cmp	r7, #0
 800e0d8:	d0c5      	beq.n	800e066 <uxr_framing_read_transport+0x3a>
 800e0da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0dc:	3102      	adds	r1, #2
 800e0de:	463a      	mov	r2, r7
 800e0e0:	4650      	mov	r0, sl
 800e0e2:	4421      	add	r1, r4
 800e0e4:	9300      	str	r3, [sp, #0]
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	47c8      	blx	r9
 800e0ea:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800e0ee:	4406      	add	r6, r0
 800e0f0:	1813      	adds	r3, r2, r0
 800e0f2:	085a      	lsrs	r2, r3, #1
 800e0f4:	fbab 1b02 	umull	r1, fp, fp, r2
 800e0f8:	222a      	movs	r2, #42	; 0x2a
 800e0fa:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 800e0fe:	fb02 331b 	mls	r3, r2, fp, r3
 800e102:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800e106:	e7ae      	b.n	800e066 <uxr_framing_read_transport+0x3a>
 800e108:	1ab6      	subs	r6, r6, r2
 800e10a:	b2f7      	uxtb	r7, r6
 800e10c:	e7a9      	b.n	800e062 <uxr_framing_read_transport+0x36>
 800e10e:	2300      	movs	r3, #0
 800e110:	2e28      	cmp	r6, #40	; 0x28
 800e112:	85a3      	strh	r3, [r4, #44]	; 0x2c
 800e114:	d9bd      	bls.n	800e092 <uxr_framing_read_transport+0x66>
 800e116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e118:	2229      	movs	r2, #41	; 0x29
 800e11a:	1ca1      	adds	r1, r4, #2
 800e11c:	4650      	mov	r0, sl
 800e11e:	9300      	str	r3, [sp, #0]
 800e120:	682b      	ldr	r3, [r5, #0]
 800e122:	47c8      	blx	r9
 800e124:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800e128:	4606      	mov	r6, r0
 800e12a:	212a      	movs	r1, #42	; 0x2a
 800e12c:	4403      	add	r3, r0
 800e12e:	4808      	ldr	r0, [pc, #32]	; (800e150 <uxr_framing_read_transport+0x124>)
 800e130:	085a      	lsrs	r2, r3, #1
 800e132:	fba0 0202 	umull	r0, r2, r0, r2
 800e136:	0892      	lsrs	r2, r2, #2
 800e138:	fb01 3312 	mls	r3, r1, r2, r3
 800e13c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800e140:	2e00      	cmp	r6, #0
 800e142:	d08f      	beq.n	800e064 <uxr_framing_read_transport+0x38>
 800e144:	e78f      	b.n	800e066 <uxr_framing_read_transport+0x3a>
 800e146:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 800e14a:	b2d2      	uxtb	r2, r2
 800e14c:	e784      	b.n	800e058 <uxr_framing_read_transport+0x2c>
 800e14e:	bf00      	nop
 800e150:	30c30c31 	.word	0x30c30c31

0800e154 <uxr_read_framed_msg>:
 800e154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e158:	461e      	mov	r6, r3
 800e15a:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 800e15e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800e162:	b083      	sub	sp, #12
 800e164:	4604      	mov	r4, r0
 800e166:	4688      	mov	r8, r1
 800e168:	429d      	cmp	r5, r3
 800e16a:	4691      	mov	r9, r2
 800e16c:	f000 818c 	beq.w	800e488 <uxr_read_framed_msg+0x334>
 800e170:	7823      	ldrb	r3, [r4, #0]
 800e172:	4dc3      	ldr	r5, [pc, #780]	; (800e480 <uxr_read_framed_msg+0x32c>)
 800e174:	4fc3      	ldr	r7, [pc, #780]	; (800e484 <uxr_read_framed_msg+0x330>)
 800e176:	2b07      	cmp	r3, #7
 800e178:	d8fd      	bhi.n	800e176 <uxr_read_framed_msg+0x22>
 800e17a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e17e:	011c      	.short	0x011c
 800e180:	00d900fb 	.word	0x00d900fb
 800e184:	008f00ba 	.word	0x008f00ba
 800e188:	00320051 	.word	0x00320051
 800e18c:	0008      	.short	0x0008
 800e18e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800e192:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800e196:	4299      	cmp	r1, r3
 800e198:	f000 814d 	beq.w	800e436 <uxr_read_framed_msg+0x2e2>
 800e19c:	18e2      	adds	r2, r4, r3
 800e19e:	7892      	ldrb	r2, [r2, #2]
 800e1a0:	2a7d      	cmp	r2, #125	; 0x7d
 800e1a2:	f000 81b8 	beq.w	800e516 <uxr_read_framed_msg+0x3c2>
 800e1a6:	3301      	adds	r3, #1
 800e1a8:	212a      	movs	r1, #42	; 0x2a
 800e1aa:	2a7e      	cmp	r2, #126	; 0x7e
 800e1ac:	ea4f 0053 	mov.w	r0, r3, lsr #1
 800e1b0:	fba5 c000 	umull	ip, r0, r5, r0
 800e1b4:	ea4f 0090 	mov.w	r0, r0, lsr #2
 800e1b8:	fb01 3310 	mls	r3, r1, r0, r3
 800e1bc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800e1c0:	f000 8257 	beq.w	800e672 <uxr_read_framed_msg+0x51e>
 800e1c4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800e1c6:	2000      	movs	r0, #0
 800e1c8:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800e1ca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e1ce:	7020      	strb	r0, [r4, #0]
 800e1d0:	b29b      	uxth	r3, r3
 800e1d2:	4299      	cmp	r1, r3
 800e1d4:	86a3      	strh	r3, [r4, #52]	; 0x34
 800e1d6:	f000 8178 	beq.w	800e4ca <uxr_read_framed_msg+0x376>
 800e1da:	2000      	movs	r0, #0
 800e1dc:	b003      	add	sp, #12
 800e1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1e2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800e1e6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800e1ea:	4298      	cmp	r0, r3
 800e1ec:	f000 8132 	beq.w	800e454 <uxr_read_framed_msg+0x300>
 800e1f0:	18e2      	adds	r2, r4, r3
 800e1f2:	7891      	ldrb	r1, [r2, #2]
 800e1f4:	297d      	cmp	r1, #125	; 0x7d
 800e1f6:	f000 8170 	beq.w	800e4da <uxr_read_framed_msg+0x386>
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	202a      	movs	r0, #42	; 0x2a
 800e1fe:	297e      	cmp	r1, #126	; 0x7e
 800e200:	ea4f 0253 	mov.w	r2, r3, lsr #1
 800e204:	fba5 c202 	umull	ip, r2, r5, r2
 800e208:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800e20c:	fb00 3312 	mls	r3, r0, r2, r3
 800e210:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800e214:	f000 821d 	beq.w	800e652 <uxr_read_framed_msg+0x4fe>
 800e218:	2307      	movs	r3, #7
 800e21a:	86a1      	strh	r1, [r4, #52]	; 0x34
 800e21c:	7023      	strb	r3, [r4, #0]
 800e21e:	e7aa      	b.n	800e176 <uxr_read_framed_msg+0x22>
 800e220:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800e222:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 800e226:	459e      	cmp	lr, r3
 800e228:	d827      	bhi.n	800e27a <uxr_read_framed_msg+0x126>
 800e22a:	e032      	b.n	800e292 <uxr_read_framed_msg+0x13e>
 800e22c:	fba5 b101 	umull	fp, r1, r5, r1
 800e230:	f89c c002 	ldrb.w	ip, [ip, #2]
 800e234:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 800e238:	0889      	lsrs	r1, r1, #2
 800e23a:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 800e23e:	fb0b 0111 	mls	r1, fp, r1, r0
 800e242:	f000 80d4 	beq.w	800e3ee <uxr_read_framed_msg+0x29a>
 800e246:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 800e24a:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 800e24e:	f000 80cb 	beq.w	800e3e8 <uxr_read_framed_msg+0x294>
 800e252:	f806 c003 	strb.w	ip, [r6, r3]
 800e256:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 800e258:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800e25a:	ea80 010c 	eor.w	r1, r0, ip
 800e25e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 800e262:	3301      	adds	r3, #1
 800e264:	b2c9      	uxtb	r1, r1
 800e266:	b29b      	uxth	r3, r3
 800e268:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 800e26c:	4573      	cmp	r3, lr
 800e26e:	8663      	strh	r3, [r4, #50]	; 0x32
 800e270:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 800e274:	86e2      	strh	r2, [r4, #54]	; 0x36
 800e276:	f080 811d 	bcs.w	800e4b4 <uxr_read_framed_msg+0x360>
 800e27a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800e27e:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 800e282:	1c50      	adds	r0, r2, #1
 800e284:	eb04 0c02 	add.w	ip, r4, r2
 800e288:	4592      	cmp	sl, r2
 800e28a:	ea4f 0150 	mov.w	r1, r0, lsr #1
 800e28e:	d1cd      	bne.n	800e22c <uxr_read_framed_msg+0xd8>
 800e290:	459e      	cmp	lr, r3
 800e292:	f040 8114 	bne.w	800e4be <uxr_read_framed_msg+0x36a>
 800e296:	2306      	movs	r3, #6
 800e298:	7023      	strb	r3, [r4, #0]
 800e29a:	e76c      	b.n	800e176 <uxr_read_framed_msg+0x22>
 800e29c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800e2a0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800e2a4:	4298      	cmp	r0, r3
 800e2a6:	f000 80c6 	beq.w	800e436 <uxr_read_framed_msg+0x2e2>
 800e2aa:	18e2      	adds	r2, r4, r3
 800e2ac:	7891      	ldrb	r1, [r2, #2]
 800e2ae:	297d      	cmp	r1, #125	; 0x7d
 800e2b0:	f000 8193 	beq.w	800e5da <uxr_read_framed_msg+0x486>
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	202a      	movs	r0, #42	; 0x2a
 800e2b8:	297e      	cmp	r1, #126	; 0x7e
 800e2ba:	ea4f 0253 	mov.w	r2, r3, lsr #1
 800e2be:	fba5 c202 	umull	ip, r2, r5, r2
 800e2c2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800e2c6:	fb00 3312 	mls	r3, r0, r2, r3
 800e2ca:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800e2ce:	f000 81d0 	beq.w	800e672 <uxr_read_framed_msg+0x51e>
 800e2d2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800e2d4:	2000      	movs	r0, #0
 800e2d6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800e2da:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e2dc:	8660      	strh	r0, [r4, #50]	; 0x32
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	86e0      	strh	r0, [r4, #54]	; 0x36
 800e2e2:	428b      	cmp	r3, r1
 800e2e4:	8623      	strh	r3, [r4, #48]	; 0x30
 800e2e6:	f240 80e2 	bls.w	800e4ae <uxr_read_framed_msg+0x35a>
 800e2ea:	7020      	strb	r0, [r4, #0]
 800e2ec:	b003      	add	sp, #12
 800e2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2f2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800e2f6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800e2fa:	4298      	cmp	r0, r3
 800e2fc:	f000 80aa 	beq.w	800e454 <uxr_read_framed_msg+0x300>
 800e300:	18e2      	adds	r2, r4, r3
 800e302:	7891      	ldrb	r1, [r2, #2]
 800e304:	297d      	cmp	r1, #125	; 0x7d
 800e306:	f000 8186 	beq.w	800e616 <uxr_read_framed_msg+0x4c2>
 800e30a:	3301      	adds	r3, #1
 800e30c:	202a      	movs	r0, #42	; 0x2a
 800e30e:	297e      	cmp	r1, #126	; 0x7e
 800e310:	ea4f 0253 	mov.w	r2, r3, lsr #1
 800e314:	fba5 c202 	umull	ip, r2, r5, r2
 800e318:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800e31c:	fb00 3312 	mls	r3, r0, r2, r3
 800e320:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800e324:	f000 8195 	beq.w	800e652 <uxr_read_framed_msg+0x4fe>
 800e328:	2304      	movs	r3, #4
 800e32a:	8621      	strh	r1, [r4, #48]	; 0x30
 800e32c:	7023      	strb	r3, [r4, #0]
 800e32e:	e722      	b.n	800e176 <uxr_read_framed_msg+0x22>
 800e330:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800e334:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800e338:	4290      	cmp	r0, r2
 800e33a:	f000 80b4 	beq.w	800e4a6 <uxr_read_framed_msg+0x352>
 800e33e:	18a3      	adds	r3, r4, r2
 800e340:	7899      	ldrb	r1, [r3, #2]
 800e342:	297d      	cmp	r1, #125	; 0x7d
 800e344:	f000 8107 	beq.w	800e556 <uxr_read_framed_msg+0x402>
 800e348:	3201      	adds	r2, #1
 800e34a:	232a      	movs	r3, #42	; 0x2a
 800e34c:	297e      	cmp	r1, #126	; 0x7e
 800e34e:	ea4f 0052 	mov.w	r0, r2, lsr #1
 800e352:	fba5 c000 	umull	ip, r0, r5, r0
 800e356:	ea4f 0090 	mov.w	r0, r0, lsr #2
 800e35a:	fb03 2210 	mls	r2, r3, r0, r2
 800e35e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800e362:	f000 818a 	beq.w	800e67a <uxr_read_framed_msg+0x526>
 800e366:	7863      	ldrb	r3, [r4, #1]
 800e368:	428b      	cmp	r3, r1
 800e36a:	bf0c      	ite	eq
 800e36c:	2303      	moveq	r3, #3
 800e36e:	2300      	movne	r3, #0
 800e370:	7023      	strb	r3, [r4, #0]
 800e372:	e700      	b.n	800e176 <uxr_read_framed_msg+0x22>
 800e374:	2300      	movs	r3, #0
 800e376:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800e37a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 800e37e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800e382:	4299      	cmp	r1, r3
 800e384:	d06a      	beq.n	800e45c <uxr_read_framed_msg+0x308>
 800e386:	18e2      	adds	r2, r4, r3
 800e388:	7890      	ldrb	r0, [r2, #2]
 800e38a:	287d      	cmp	r0, #125	; 0x7d
 800e38c:	f000 8100 	beq.w	800e590 <uxr_read_framed_msg+0x43c>
 800e390:	3301      	adds	r3, #1
 800e392:	212a      	movs	r1, #42	; 0x2a
 800e394:	287e      	cmp	r0, #126	; 0x7e
 800e396:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 800e39a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 800e39e:	fba5 c202 	umull	ip, r2, r5, r2
 800e3a2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800e3a6:	fb01 3312 	mls	r3, r1, r2, r3
 800e3aa:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800e3ae:	d055      	beq.n	800e45c <uxr_read_framed_msg+0x308>
 800e3b0:	2302      	movs	r3, #2
 800e3b2:	7023      	strb	r3, [r4, #0]
 800e3b4:	e6df      	b.n	800e176 <uxr_read_framed_msg+0x22>
 800e3b6:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 800e3ba:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 800e3be:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800e3c2:	1c5a      	adds	r2, r3, #1
 800e3c4:	459c      	cmp	ip, r3
 800e3c6:	eb04 0103 	add.w	r1, r4, r3
 800e3ca:	ea4f 0352 	mov.w	r3, r2, lsr #1
 800e3ce:	f43f af04 	beq.w	800e1da <uxr_read_framed_msg+0x86>
 800e3d2:	fba5 0303 	umull	r0, r3, r5, r3
 800e3d6:	7889      	ldrb	r1, [r1, #2]
 800e3d8:	089b      	lsrs	r3, r3, #2
 800e3da:	297e      	cmp	r1, #126	; 0x7e
 800e3dc:	fb0e 2313 	mls	r3, lr, r3, r2
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800e3e6:	d1ec      	bne.n	800e3c2 <uxr_read_framed_msg+0x26e>
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	7023      	strb	r3, [r4, #0]
 800e3ec:	e6c3      	b.n	800e176 <uxr_read_framed_msg+0x22>
 800e3ee:	1c50      	adds	r0, r2, #1
 800e3f0:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 800e3f4:	3202      	adds	r2, #2
 800e3f6:	0841      	lsrs	r1, r0, #1
 800e3f8:	fba5 c101 	umull	ip, r1, r5, r1
 800e3fc:	0889      	lsrs	r1, r1, #2
 800e3fe:	fb0b 0111 	mls	r1, fp, r1, r0
 800e402:	1860      	adds	r0, r4, r1
 800e404:	b2c9      	uxtb	r1, r1
 800e406:	458a      	cmp	sl, r1
 800e408:	f43f af42 	beq.w	800e290 <uxr_read_framed_msg+0x13c>
 800e40c:	0851      	lsrs	r1, r2, #1
 800e40e:	7880      	ldrb	r0, [r0, #2]
 800e410:	fba5 a101 	umull	sl, r1, r5, r1
 800e414:	287e      	cmp	r0, #126	; 0x7e
 800e416:	f080 0c20 	eor.w	ip, r0, #32
 800e41a:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800e41e:	fb0b 2211 	mls	r2, fp, r1, r2
 800e422:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800e426:	f47f af14 	bne.w	800e252 <uxr_read_framed_msg+0xfe>
 800e42a:	459e      	cmp	lr, r3
 800e42c:	f43f af33 	beq.w	800e296 <uxr_read_framed_msg+0x142>
 800e430:	2301      	movs	r3, #1
 800e432:	7023      	strb	r3, [r4, #0]
 800e434:	e69f      	b.n	800e176 <uxr_read_framed_msg+0x22>
 800e436:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e438:	9300      	str	r3, [sp, #0]
 800e43a:	2301      	movs	r3, #1
 800e43c:	9301      	str	r3, [sp, #4]
 800e43e:	464a      	mov	r2, r9
 800e440:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e442:	4641      	mov	r1, r8
 800e444:	4620      	mov	r0, r4
 800e446:	f7ff fdf1 	bl	800e02c <uxr_framing_read_transport>
 800e44a:	2800      	cmp	r0, #0
 800e44c:	f43f aec5 	beq.w	800e1da <uxr_read_framed_msg+0x86>
 800e450:	7823      	ldrb	r3, [r4, #0]
 800e452:	e690      	b.n	800e176 <uxr_read_framed_msg+0x22>
 800e454:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e456:	9300      	str	r3, [sp, #0]
 800e458:	2302      	movs	r3, #2
 800e45a:	e7ef      	b.n	800e43c <uxr_read_framed_msg+0x2e8>
 800e45c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e45e:	464a      	mov	r2, r9
 800e460:	4641      	mov	r1, r8
 800e462:	4620      	mov	r0, r4
 800e464:	9300      	str	r3, [sp, #0]
 800e466:	2304      	movs	r3, #4
 800e468:	9301      	str	r3, [sp, #4]
 800e46a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e46c:	f7ff fdde 	bl	800e02c <uxr_framing_read_transport>
 800e470:	2800      	cmp	r0, #0
 800e472:	d1ed      	bne.n	800e450 <uxr_read_framed_msg+0x2fc>
 800e474:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800e478:	2b7e      	cmp	r3, #126	; 0x7e
 800e47a:	d0e9      	beq.n	800e450 <uxr_read_framed_msg+0x2fc>
 800e47c:	e6ad      	b.n	800e1da <uxr_read_framed_msg+0x86>
 800e47e:	bf00      	nop
 800e480:	30c30c31 	.word	0x30c30c31
 800e484:	080160c8 	.word	0x080160c8
 800e488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e48a:	9300      	str	r3, [sp, #0]
 800e48c:	2305      	movs	r3, #5
 800e48e:	9301      	str	r3, [sp, #4]
 800e490:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e492:	f7ff fdcb 	bl	800e02c <uxr_framing_read_transport>
 800e496:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800e49a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	f43f ae9b 	beq.w	800e1da <uxr_read_framed_msg+0x86>
 800e4a4:	e664      	b.n	800e170 <uxr_read_framed_msg+0x1c>
 800e4a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e4a8:	9300      	str	r3, [sp, #0]
 800e4aa:	2303      	movs	r3, #3
 800e4ac:	e7c6      	b.n	800e43c <uxr_read_framed_msg+0x2e8>
 800e4ae:	2305      	movs	r3, #5
 800e4b0:	7023      	strb	r3, [r4, #0]
 800e4b2:	e660      	b.n	800e176 <uxr_read_framed_msg+0x22>
 800e4b4:	f43f aeef 	beq.w	800e296 <uxr_read_framed_msg+0x142>
 800e4b8:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 800e4bc:	d094      	beq.n	800e3e8 <uxr_read_framed_msg+0x294>
 800e4be:	ebae 0303 	sub.w	r3, lr, r3
 800e4c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e4c4:	3302      	adds	r3, #2
 800e4c6:	9200      	str	r2, [sp, #0]
 800e4c8:	e7b8      	b.n	800e43c <uxr_read_framed_msg+0x2e8>
 800e4ca:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800e4ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4d0:	7013      	strb	r3, [r2, #0]
 800e4d2:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 800e4d4:	b003      	add	sp, #12
 800e4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4da:	1c59      	adds	r1, r3, #1
 800e4dc:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800e4e0:	084a      	lsrs	r2, r1, #1
 800e4e2:	fba5 e202 	umull	lr, r2, r5, r2
 800e4e6:	0892      	lsrs	r2, r2, #2
 800e4e8:	fb0c 1212 	mls	r2, ip, r2, r1
 800e4ec:	b2d1      	uxtb	r1, r2
 800e4ee:	4288      	cmp	r0, r1
 800e4f0:	d0b0      	beq.n	800e454 <uxr_read_framed_msg+0x300>
 800e4f2:	3302      	adds	r3, #2
 800e4f4:	4422      	add	r2, r4
 800e4f6:	7891      	ldrb	r1, [r2, #2]
 800e4f8:	085a      	lsrs	r2, r3, #1
 800e4fa:	fba5 0202 	umull	r0, r2, r5, r2
 800e4fe:	297e      	cmp	r1, #126	; 0x7e
 800e500:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800e504:	fb0c 3312 	mls	r3, ip, r2, r3
 800e508:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800e50c:	f000 80a1 	beq.w	800e652 <uxr_read_framed_msg+0x4fe>
 800e510:	f081 0120 	eor.w	r1, r1, #32
 800e514:	e680      	b.n	800e218 <uxr_read_framed_msg+0xc4>
 800e516:	f103 0c01 	add.w	ip, r3, #1
 800e51a:	202a      	movs	r0, #42	; 0x2a
 800e51c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800e520:	fba5 e202 	umull	lr, r2, r5, r2
 800e524:	0892      	lsrs	r2, r2, #2
 800e526:	fb00 c212 	mls	r2, r0, r2, ip
 800e52a:	fa5f fc82 	uxtb.w	ip, r2
 800e52e:	4561      	cmp	r1, ip
 800e530:	d081      	beq.n	800e436 <uxr_read_framed_msg+0x2e2>
 800e532:	3302      	adds	r3, #2
 800e534:	4422      	add	r2, r4
 800e536:	0859      	lsrs	r1, r3, #1
 800e538:	7892      	ldrb	r2, [r2, #2]
 800e53a:	fba5 c101 	umull	ip, r1, r5, r1
 800e53e:	2a7e      	cmp	r2, #126	; 0x7e
 800e540:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800e544:	fb00 3311 	mls	r3, r0, r1, r3
 800e548:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800e54c:	f000 8091 	beq.w	800e672 <uxr_read_framed_msg+0x51e>
 800e550:	f082 0220 	eor.w	r2, r2, #32
 800e554:	e636      	b.n	800e1c4 <uxr_read_framed_msg+0x70>
 800e556:	1c51      	adds	r1, r2, #1
 800e558:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800e55c:	084b      	lsrs	r3, r1, #1
 800e55e:	fba5 e303 	umull	lr, r3, r5, r3
 800e562:	089b      	lsrs	r3, r3, #2
 800e564:	fb0c 1313 	mls	r3, ip, r3, r1
 800e568:	b2d9      	uxtb	r1, r3
 800e56a:	4288      	cmp	r0, r1
 800e56c:	d09b      	beq.n	800e4a6 <uxr_read_framed_msg+0x352>
 800e56e:	3202      	adds	r2, #2
 800e570:	4423      	add	r3, r4
 800e572:	0850      	lsrs	r0, r2, #1
 800e574:	789b      	ldrb	r3, [r3, #2]
 800e576:	fba5 1000 	umull	r1, r0, r5, r0
 800e57a:	2b7e      	cmp	r3, #126	; 0x7e
 800e57c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 800e580:	fb0c 2210 	mls	r2, ip, r0, r2
 800e584:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800e588:	d077      	beq.n	800e67a <uxr_read_framed_msg+0x526>
 800e58a:	f083 0120 	eor.w	r1, r3, #32
 800e58e:	e6ea      	b.n	800e366 <uxr_read_framed_msg+0x212>
 800e590:	f103 0c01 	add.w	ip, r3, #1
 800e594:	202a      	movs	r0, #42	; 0x2a
 800e596:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800e59a:	fba5 e202 	umull	lr, r2, r5, r2
 800e59e:	0892      	lsrs	r2, r2, #2
 800e5a0:	fb00 c212 	mls	r2, r0, r2, ip
 800e5a4:	fa5f fc82 	uxtb.w	ip, r2
 800e5a8:	4561      	cmp	r1, ip
 800e5aa:	f43f af57 	beq.w	800e45c <uxr_read_framed_msg+0x308>
 800e5ae:	3302      	adds	r3, #2
 800e5b0:	4422      	add	r2, r4
 800e5b2:	7891      	ldrb	r1, [r2, #2]
 800e5b4:	085a      	lsrs	r2, r3, #1
 800e5b6:	fba5 c202 	umull	ip, r2, r5, r2
 800e5ba:	297e      	cmp	r1, #126	; 0x7e
 800e5bc:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 800e5c0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800e5c4:	fb00 3312 	mls	r3, r0, r2, r3
 800e5c8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800e5cc:	f43f af46 	beq.w	800e45c <uxr_read_framed_msg+0x308>
 800e5d0:	f081 0120 	eor.w	r1, r1, #32
 800e5d4:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 800e5d8:	e6ea      	b.n	800e3b0 <uxr_read_framed_msg+0x25c>
 800e5da:	1c59      	adds	r1, r3, #1
 800e5dc:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800e5e0:	084a      	lsrs	r2, r1, #1
 800e5e2:	fba5 e202 	umull	lr, r2, r5, r2
 800e5e6:	0892      	lsrs	r2, r2, #2
 800e5e8:	fb0c 1212 	mls	r2, ip, r2, r1
 800e5ec:	b2d1      	uxtb	r1, r2
 800e5ee:	4288      	cmp	r0, r1
 800e5f0:	f43f af21 	beq.w	800e436 <uxr_read_framed_msg+0x2e2>
 800e5f4:	3302      	adds	r3, #2
 800e5f6:	4422      	add	r2, r4
 800e5f8:	7891      	ldrb	r1, [r2, #2]
 800e5fa:	085a      	lsrs	r2, r3, #1
 800e5fc:	fba5 0202 	umull	r0, r2, r5, r2
 800e600:	297e      	cmp	r1, #126	; 0x7e
 800e602:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800e606:	fb0c 3312 	mls	r3, ip, r2, r3
 800e60a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800e60e:	d030      	beq.n	800e672 <uxr_read_framed_msg+0x51e>
 800e610:	f081 0120 	eor.w	r1, r1, #32
 800e614:	e65d      	b.n	800e2d2 <uxr_read_framed_msg+0x17e>
 800e616:	1c59      	adds	r1, r3, #1
 800e618:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800e61c:	084a      	lsrs	r2, r1, #1
 800e61e:	fba5 e202 	umull	lr, r2, r5, r2
 800e622:	0892      	lsrs	r2, r2, #2
 800e624:	fb0c 1212 	mls	r2, ip, r2, r1
 800e628:	b2d1      	uxtb	r1, r2
 800e62a:	4288      	cmp	r0, r1
 800e62c:	f43f af12 	beq.w	800e454 <uxr_read_framed_msg+0x300>
 800e630:	3302      	adds	r3, #2
 800e632:	4422      	add	r2, r4
 800e634:	7891      	ldrb	r1, [r2, #2]
 800e636:	085a      	lsrs	r2, r3, #1
 800e638:	fba5 0202 	umull	r0, r2, r5, r2
 800e63c:	297e      	cmp	r1, #126	; 0x7e
 800e63e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800e642:	fb0c 3312 	mls	r3, ip, r2, r3
 800e646:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800e64a:	d002      	beq.n	800e652 <uxr_read_framed_msg+0x4fe>
 800e64c:	f081 0120 	eor.w	r1, r1, #32
 800e650:	e66a      	b.n	800e328 <uxr_read_framed_msg+0x1d4>
 800e652:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e654:	9300      	str	r3, [sp, #0]
 800e656:	2302      	movs	r3, #2
 800e658:	9301      	str	r3, [sp, #4]
 800e65a:	464a      	mov	r2, r9
 800e65c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e65e:	4641      	mov	r1, r8
 800e660:	4620      	mov	r0, r4
 800e662:	f7ff fce3 	bl	800e02c <uxr_framing_read_transport>
 800e666:	2800      	cmp	r0, #0
 800e668:	f47f aef2 	bne.w	800e450 <uxr_read_framed_msg+0x2fc>
 800e66c:	2301      	movs	r3, #1
 800e66e:	7023      	strb	r3, [r4, #0]
 800e670:	e581      	b.n	800e176 <uxr_read_framed_msg+0x22>
 800e672:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e674:	9300      	str	r3, [sp, #0]
 800e676:	2301      	movs	r3, #1
 800e678:	e7ee      	b.n	800e658 <uxr_read_framed_msg+0x504>
 800e67a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e67c:	9300      	str	r3, [sp, #0]
 800e67e:	2303      	movs	r3, #3
 800e680:	e7ea      	b.n	800e658 <uxr_read_framed_msg+0x504>
 800e682:	bf00      	nop

0800e684 <uxr_stream_id>:
 800e684:	2901      	cmp	r1, #1
 800e686:	4684      	mov	ip, r0
 800e688:	b500      	push	{lr}
 800e68a:	b083      	sub	sp, #12
 800e68c:	d01f      	beq.n	800e6ce <uxr_stream_id+0x4a>
 800e68e:	2902      	cmp	r1, #2
 800e690:	f04f 0e00 	mov.w	lr, #0
 800e694:	d020      	beq.n	800e6d8 <uxr_stream_id+0x54>
 800e696:	2300      	movs	r3, #0
 800e698:	2000      	movs	r0, #0
 800e69a:	f36e 0307 	bfi	r3, lr, #0, #8
 800e69e:	f36c 230f 	bfi	r3, ip, #8, #8
 800e6a2:	f361 4317 	bfi	r3, r1, #16, #8
 800e6a6:	f362 631f 	bfi	r3, r2, #24, #8
 800e6aa:	fa5f fc83 	uxtb.w	ip, r3
 800e6ae:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e6b2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800e6b6:	0e1b      	lsrs	r3, r3, #24
 800e6b8:	f36c 0007 	bfi	r0, ip, #0, #8
 800e6bc:	f361 200f 	bfi	r0, r1, #8, #8
 800e6c0:	f362 4017 	bfi	r0, r2, #16, #8
 800e6c4:	f363 601f 	bfi	r0, r3, #24, #8
 800e6c8:	b003      	add	sp, #12
 800e6ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800e6ce:	f100 0e01 	add.w	lr, r0, #1
 800e6d2:	fa5f fe8e 	uxtb.w	lr, lr
 800e6d6:	e7de      	b.n	800e696 <uxr_stream_id+0x12>
 800e6d8:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 800e6dc:	e7db      	b.n	800e696 <uxr_stream_id+0x12>
 800e6de:	bf00      	nop

0800e6e0 <uxr_stream_id_from_raw>:
 800e6e0:	b082      	sub	sp, #8
 800e6e2:	b130      	cbz	r0, 800e6f2 <uxr_stream_id_from_raw+0x12>
 800e6e4:	0603      	lsls	r3, r0, #24
 800e6e6:	d421      	bmi.n	800e72c <uxr_stream_id_from_raw+0x4c>
 800e6e8:	1e42      	subs	r2, r0, #1
 800e6ea:	f04f 0c01 	mov.w	ip, #1
 800e6ee:	b2d2      	uxtb	r2, r2
 800e6f0:	e001      	b.n	800e6f6 <uxr_stream_id_from_raw+0x16>
 800e6f2:	4684      	mov	ip, r0
 800e6f4:	4602      	mov	r2, r0
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	f360 0307 	bfi	r3, r0, #0, #8
 800e6fc:	2000      	movs	r0, #0
 800e6fe:	f362 230f 	bfi	r3, r2, #8, #8
 800e702:	f36c 4317 	bfi	r3, ip, #16, #8
 800e706:	f361 631f 	bfi	r3, r1, #24, #8
 800e70a:	fa5f fc83 	uxtb.w	ip, r3
 800e70e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e712:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800e716:	0e1b      	lsrs	r3, r3, #24
 800e718:	f36c 0007 	bfi	r0, ip, #0, #8
 800e71c:	f361 200f 	bfi	r0, r1, #8, #8
 800e720:	f362 4017 	bfi	r0, r2, #16, #8
 800e724:	f363 601f 	bfi	r0, r3, #24, #8
 800e728:	b002      	add	sp, #8
 800e72a:	4770      	bx	lr
 800e72c:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800e730:	f04f 0c02 	mov.w	ip, #2
 800e734:	e7df      	b.n	800e6f6 <uxr_stream_id_from_raw+0x16>
 800e736:	bf00      	nop

0800e738 <uxr_init_stream_storage>:
 800e738:	2300      	movs	r3, #0
 800e73a:	7403      	strb	r3, [r0, #16]
 800e73c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800e740:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800e744:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800e748:	4770      	bx	lr
 800e74a:	bf00      	nop

0800e74c <uxr_reset_stream_storage>:
 800e74c:	b570      	push	{r4, r5, r6, lr}
 800e74e:	7c03      	ldrb	r3, [r0, #16]
 800e750:	4604      	mov	r4, r0
 800e752:	b14b      	cbz	r3, 800e768 <uxr_reset_stream_storage+0x1c>
 800e754:	4606      	mov	r6, r0
 800e756:	2500      	movs	r5, #0
 800e758:	4630      	mov	r0, r6
 800e75a:	3501      	adds	r5, #1
 800e75c:	f004 fcce 	bl	80130fc <uxr_reset_output_best_effort_stream>
 800e760:	7c23      	ldrb	r3, [r4, #16]
 800e762:	3610      	adds	r6, #16
 800e764:	42ab      	cmp	r3, r5
 800e766:	d8f7      	bhi.n	800e758 <uxr_reset_stream_storage+0xc>
 800e768:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e76c:	b15b      	cbz	r3, 800e786 <uxr_reset_stream_storage+0x3a>
 800e76e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e772:	2500      	movs	r5, #0
 800e774:	4630      	mov	r0, r6
 800e776:	3501      	adds	r5, #1
 800e778:	f004 fac6 	bl	8012d08 <uxr_reset_input_best_effort_stream>
 800e77c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e780:	3602      	adds	r6, #2
 800e782:	42ab      	cmp	r3, r5
 800e784:	d8f6      	bhi.n	800e774 <uxr_reset_stream_storage+0x28>
 800e786:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e78a:	b15b      	cbz	r3, 800e7a4 <uxr_reset_stream_storage+0x58>
 800e78c:	f104 0618 	add.w	r6, r4, #24
 800e790:	2500      	movs	r5, #0
 800e792:	4630      	mov	r0, r6
 800e794:	3501      	adds	r5, #1
 800e796:	f004 fd5f 	bl	8013258 <uxr_reset_output_reliable_stream>
 800e79a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e79e:	3628      	adds	r6, #40	; 0x28
 800e7a0:	42ab      	cmp	r3, r5
 800e7a2:	d8f6      	bhi.n	800e792 <uxr_reset_stream_storage+0x46>
 800e7a4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800e7a8:	b15b      	cbz	r3, 800e7c2 <uxr_reset_stream_storage+0x76>
 800e7aa:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800e7ae:	2500      	movs	r5, #0
 800e7b0:	4630      	mov	r0, r6
 800e7b2:	3501      	adds	r5, #1
 800e7b4:	f004 fb14 	bl	8012de0 <uxr_reset_input_reliable_stream>
 800e7b8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800e7bc:	3618      	adds	r6, #24
 800e7be:	42ab      	cmp	r3, r5
 800e7c0:	d8f6      	bhi.n	800e7b0 <uxr_reset_stream_storage+0x64>
 800e7c2:	bd70      	pop	{r4, r5, r6, pc}

0800e7c4 <uxr_add_output_best_effort_buffer>:
 800e7c4:	b510      	push	{r4, lr}
 800e7c6:	7c04      	ldrb	r4, [r0, #16]
 800e7c8:	b082      	sub	sp, #8
 800e7ca:	f104 0c01 	add.w	ip, r4, #1
 800e7ce:	f880 c010 	strb.w	ip, [r0, #16]
 800e7d2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800e7d6:	f004 fc87 	bl	80130e8 <uxr_init_output_best_effort_stream>
 800e7da:	2201      	movs	r2, #1
 800e7dc:	4620      	mov	r0, r4
 800e7de:	4611      	mov	r1, r2
 800e7e0:	b002      	add	sp, #8
 800e7e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7e6:	f7ff bf4d 	b.w	800e684 <uxr_stream_id>
 800e7ea:	bf00      	nop

0800e7ec <uxr_add_output_reliable_buffer>:
 800e7ec:	b510      	push	{r4, lr}
 800e7ee:	b084      	sub	sp, #16
 800e7f0:	4684      	mov	ip, r0
 800e7f2:	2028      	movs	r0, #40	; 0x28
 800e7f4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800e7f8:	9400      	str	r4, [sp, #0]
 800e7fa:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800e7fe:	fb00 c004 	mla	r0, r0, r4, ip
 800e802:	f104 0e01 	add.w	lr, r4, #1
 800e806:	3018      	adds	r0, #24
 800e808:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800e80c:	f004 fcec 	bl	80131e8 <uxr_init_output_reliable_stream>
 800e810:	2201      	movs	r2, #1
 800e812:	2102      	movs	r1, #2
 800e814:	4620      	mov	r0, r4
 800e816:	b004      	add	sp, #16
 800e818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e81c:	f7ff bf32 	b.w	800e684 <uxr_stream_id>

0800e820 <uxr_add_input_best_effort_buffer>:
 800e820:	b510      	push	{r4, lr}
 800e822:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800e826:	b082      	sub	sp, #8
 800e828:	1c62      	adds	r2, r4, #1
 800e82a:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800e82e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800e832:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e836:	f004 fa63 	bl	8012d00 <uxr_init_input_best_effort_stream>
 800e83a:	2200      	movs	r2, #0
 800e83c:	2101      	movs	r1, #1
 800e83e:	4620      	mov	r0, r4
 800e840:	b002      	add	sp, #8
 800e842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e846:	f7ff bf1d 	b.w	800e684 <uxr_stream_id>
 800e84a:	bf00      	nop

0800e84c <uxr_add_input_reliable_buffer>:
 800e84c:	b510      	push	{r4, lr}
 800e84e:	b084      	sub	sp, #16
 800e850:	4684      	mov	ip, r0
 800e852:	2018      	movs	r0, #24
 800e854:	9c06      	ldr	r4, [sp, #24]
 800e856:	9400      	str	r4, [sp, #0]
 800e858:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800e85c:	fb00 c004 	mla	r0, r0, r4, ip
 800e860:	f104 0e01 	add.w	lr, r4, #1
 800e864:	3048      	adds	r0, #72	; 0x48
 800e866:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800e86a:	f004 fa93 	bl	8012d94 <uxr_init_input_reliable_stream>
 800e86e:	2200      	movs	r2, #0
 800e870:	2102      	movs	r1, #2
 800e872:	4620      	mov	r0, r4
 800e874:	b004      	add	sp, #16
 800e876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e87a:	f7ff bf03 	b.w	800e684 <uxr_stream_id>
 800e87e:	bf00      	nop

0800e880 <uxr_get_output_best_effort_stream>:
 800e880:	7c03      	ldrb	r3, [r0, #16]
 800e882:	428b      	cmp	r3, r1
 800e884:	bf8c      	ite	hi
 800e886:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800e88a:	2000      	movls	r0, #0
 800e88c:	4770      	bx	lr
 800e88e:	bf00      	nop

0800e890 <uxr_get_output_reliable_stream>:
 800e890:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800e894:	428b      	cmp	r3, r1
 800e896:	d904      	bls.n	800e8a2 <uxr_get_output_reliable_stream+0x12>
 800e898:	2328      	movs	r3, #40	; 0x28
 800e89a:	fb03 0001 	mla	r0, r3, r1, r0
 800e89e:	3018      	adds	r0, #24
 800e8a0:	4770      	bx	lr
 800e8a2:	2000      	movs	r0, #0
 800e8a4:	4770      	bx	lr
 800e8a6:	bf00      	nop

0800e8a8 <uxr_get_input_best_effort_stream>:
 800e8a8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800e8ac:	428b      	cmp	r3, r1
 800e8ae:	d903      	bls.n	800e8b8 <uxr_get_input_best_effort_stream+0x10>
 800e8b0:	3121      	adds	r1, #33	; 0x21
 800e8b2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800e8b6:	4770      	bx	lr
 800e8b8:	2000      	movs	r0, #0
 800e8ba:	4770      	bx	lr

0800e8bc <uxr_get_input_reliable_stream>:
 800e8bc:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800e8c0:	428b      	cmp	r3, r1
 800e8c2:	d904      	bls.n	800e8ce <uxr_get_input_reliable_stream+0x12>
 800e8c4:	2318      	movs	r3, #24
 800e8c6:	fb03 0001 	mla	r0, r3, r1, r0
 800e8ca:	3048      	adds	r0, #72	; 0x48
 800e8cc:	4770      	bx	lr
 800e8ce:	2000      	movs	r0, #0
 800e8d0:	4770      	bx	lr
 800e8d2:	bf00      	nop

0800e8d4 <uxr_output_streams_confirmed>:
 800e8d4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800e8d8:	b183      	cbz	r3, 800e8fc <uxr_output_streams_confirmed+0x28>
 800e8da:	b570      	push	{r4, r5, r6, lr}
 800e8dc:	4606      	mov	r6, r0
 800e8de:	f100 0518 	add.w	r5, r0, #24
 800e8e2:	2400      	movs	r4, #0
 800e8e4:	e000      	b.n	800e8e8 <uxr_output_streams_confirmed+0x14>
 800e8e6:	b140      	cbz	r0, 800e8fa <uxr_output_streams_confirmed+0x26>
 800e8e8:	4628      	mov	r0, r5
 800e8ea:	3401      	adds	r4, #1
 800e8ec:	f004 ff28 	bl	8013740 <uxr_is_output_up_to_date>
 800e8f0:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800e8f4:	3528      	adds	r5, #40	; 0x28
 800e8f6:	42a3      	cmp	r3, r4
 800e8f8:	d8f5      	bhi.n	800e8e6 <uxr_output_streams_confirmed+0x12>
 800e8fa:	bd70      	pop	{r4, r5, r6, pc}
 800e8fc:	2001      	movs	r0, #1
 800e8fe:	4770      	bx	lr

0800e900 <uxr_buffer_submessage_header>:
 800e900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e902:	460e      	mov	r6, r1
 800e904:	2104      	movs	r1, #4
 800e906:	4604      	mov	r4, r0
 800e908:	4615      	mov	r5, r2
 800e90a:	461f      	mov	r7, r3
 800e90c:	f7fa fd46 	bl	800939c <ucdr_align_to>
 800e910:	2301      	movs	r3, #1
 800e912:	4631      	mov	r1, r6
 800e914:	4620      	mov	r0, r4
 800e916:	ea47 0203 	orr.w	r2, r7, r3
 800e91a:	7523      	strb	r3, [r4, #20]
 800e91c:	462b      	mov	r3, r5
 800e91e:	f000 f8d5 	bl	800eacc <uxr_serialize_submessage_header>
 800e922:	4620      	mov	r0, r4
 800e924:	f7fa fd50 	bl	80093c8 <ucdr_buffer_remaining>
 800e928:	42a8      	cmp	r0, r5
 800e92a:	bf34      	ite	cc
 800e92c:	2000      	movcc	r0, #0
 800e92e:	2001      	movcs	r0, #1
 800e930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e932:	bf00      	nop

0800e934 <uxr_read_submessage_header>:
 800e934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e938:	4604      	mov	r4, r0
 800e93a:	460d      	mov	r5, r1
 800e93c:	2104      	movs	r1, #4
 800e93e:	4616      	mov	r6, r2
 800e940:	4698      	mov	r8, r3
 800e942:	f7fa fd2b 	bl	800939c <ucdr_align_to>
 800e946:	4620      	mov	r0, r4
 800e948:	f7fa fd3e 	bl	80093c8 <ucdr_buffer_remaining>
 800e94c:	2803      	cmp	r0, #3
 800e94e:	bf8c      	ite	hi
 800e950:	2701      	movhi	r7, #1
 800e952:	2700      	movls	r7, #0
 800e954:	d802      	bhi.n	800e95c <uxr_read_submessage_header+0x28>
 800e956:	4638      	mov	r0, r7
 800e958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e95c:	4633      	mov	r3, r6
 800e95e:	4642      	mov	r2, r8
 800e960:	4620      	mov	r0, r4
 800e962:	4629      	mov	r1, r5
 800e964:	f000 f8c6 	bl	800eaf4 <uxr_deserialize_submessage_header>
 800e968:	f898 3000 	ldrb.w	r3, [r8]
 800e96c:	4638      	mov	r0, r7
 800e96e:	f003 0201 	and.w	r2, r3, #1
 800e972:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800e976:	f888 3000 	strb.w	r3, [r8]
 800e97a:	7522      	strb	r2, [r4, #20]
 800e97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e980 <uxr_submessage_padding>:
 800e980:	f010 0003 	ands.w	r0, r0, #3
 800e984:	bf18      	it	ne
 800e986:	f1c0 0004 	rsbne	r0, r0, #4
 800e98a:	4770      	bx	lr

0800e98c <uxr_millis>:
 800e98c:	b510      	push	{r4, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	2001      	movs	r0, #1
 800e992:	4669      	mov	r1, sp
 800e994:	f7f2 fe5c 	bl	8001650 <clock_gettime>
 800e998:	4908      	ldr	r1, [pc, #32]	; (800e9bc <uxr_millis+0x30>)
 800e99a:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800e99e:	fba0 0301 	umull	r0, r3, r0, r1
 800e9a2:	1900      	adds	r0, r0, r4
 800e9a4:	fb01 3102 	mla	r1, r1, r2, r3
 800e9a8:	4a05      	ldr	r2, [pc, #20]	; (800e9c0 <uxr_millis+0x34>)
 800e9aa:	f04f 0300 	mov.w	r3, #0
 800e9ae:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800e9b2:	f7f1 fcad 	bl	8000310 <__aeabi_ldivmod>
 800e9b6:	b004      	add	sp, #16
 800e9b8:	bd10      	pop	{r4, pc}
 800e9ba:	bf00      	nop
 800e9bc:	3b9aca00 	.word	0x3b9aca00
 800e9c0:	000f4240 	.word	0x000f4240

0800e9c4 <uxr_nanos>:
 800e9c4:	b510      	push	{r4, lr}
 800e9c6:	b084      	sub	sp, #16
 800e9c8:	2001      	movs	r0, #1
 800e9ca:	4669      	mov	r1, sp
 800e9cc:	f7f2 fe40 	bl	8001650 <clock_gettime>
 800e9d0:	4a06      	ldr	r2, [pc, #24]	; (800e9ec <uxr_nanos+0x28>)
 800e9d2:	9800      	ldr	r0, [sp, #0]
 800e9d4:	9902      	ldr	r1, [sp, #8]
 800e9d6:	fba0 0302 	umull	r0, r3, r0, r2
 800e9da:	9c01      	ldr	r4, [sp, #4]
 800e9dc:	1840      	adds	r0, r0, r1
 800e9de:	fb02 3304 	mla	r3, r2, r4, r3
 800e9e2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800e9e6:	b004      	add	sp, #16
 800e9e8:	bd10      	pop	{r4, pc}
 800e9ea:	bf00      	nop
 800e9ec:	3b9aca00 	.word	0x3b9aca00

0800e9f0 <uxr_prepare_output_stream>:
 800e9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9f2:	b087      	sub	sp, #28
 800e9f4:	2707      	movs	r7, #7
 800e9f6:	2500      	movs	r5, #0
 800e9f8:	461c      	mov	r4, r3
 800e9fa:	4606      	mov	r6, r0
 800e9fc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800ea00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea02:	e9cd 7500 	strd	r7, r5, [sp]
 800ea06:	3204      	adds	r2, #4
 800ea08:	f7ff f852 	bl	800dab0 <uxr_prepare_stream_to_write_submessage>
 800ea0c:	f080 0201 	eor.w	r2, r0, #1
 800ea10:	b2d2      	uxtb	r2, r2
 800ea12:	75a2      	strb	r2, [r4, #22]
 800ea14:	b112      	cbz	r2, 800ea1c <uxr_prepare_output_stream+0x2c>
 800ea16:	4628      	mov	r0, r5
 800ea18:	b007      	add	sp, #28
 800ea1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea1c:	aa05      	add	r2, sp, #20
 800ea1e:	9902      	ldr	r1, [sp, #8]
 800ea20:	4630      	mov	r0, r6
 800ea22:	f7ff f981 	bl	800dd28 <uxr_init_base_object_request>
 800ea26:	a905      	add	r1, sp, #20
 800ea28:	4605      	mov	r5, r0
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	f000 fdb0 	bl	800f590 <uxr_serialize_WRITE_DATA_Payload_Data>
 800ea30:	69a6      	ldr	r6, [r4, #24]
 800ea32:	69e7      	ldr	r7, [r4, #28]
 800ea34:	4620      	mov	r0, r4
 800ea36:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800ea3a:	1a52      	subs	r2, r2, r1
 800ea3c:	f7fa fc92 	bl	8009364 <ucdr_init_buffer>
 800ea40:	4620      	mov	r0, r4
 800ea42:	463a      	mov	r2, r7
 800ea44:	4631      	mov	r1, r6
 800ea46:	f7fa fc61 	bl	800930c <ucdr_set_on_full_buffer_callback>
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	b007      	add	sp, #28
 800ea4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ea50 <uxr_serialize_message_header>:
 800ea50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea52:	4616      	mov	r6, r2
 800ea54:	b083      	sub	sp, #12
 800ea56:	4604      	mov	r4, r0
 800ea58:	460d      	mov	r5, r1
 800ea5a:	9301      	str	r3, [sp, #4]
 800ea5c:	9f08      	ldr	r7, [sp, #32]
 800ea5e:	f7f9 fb3f 	bl	80080e0 <ucdr_serialize_uint8_t>
 800ea62:	4631      	mov	r1, r6
 800ea64:	4620      	mov	r0, r4
 800ea66:	f7f9 fb3b 	bl	80080e0 <ucdr_serialize_uint8_t>
 800ea6a:	9a01      	ldr	r2, [sp, #4]
 800ea6c:	2101      	movs	r1, #1
 800ea6e:	4620      	mov	r0, r4
 800ea70:	f7f9 fbe2 	bl	8008238 <ucdr_serialize_endian_uint16_t>
 800ea74:	062b      	lsls	r3, r5, #24
 800ea76:	d501      	bpl.n	800ea7c <uxr_serialize_message_header+0x2c>
 800ea78:	b003      	add	sp, #12
 800ea7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea7c:	2204      	movs	r2, #4
 800ea7e:	4639      	mov	r1, r7
 800ea80:	4620      	mov	r0, r4
 800ea82:	b003      	add	sp, #12
 800ea84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ea88:	f003 bffe 	b.w	8012a88 <ucdr_serialize_array_uint8_t>

0800ea8c <uxr_deserialize_message_header>:
 800ea8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea8e:	4616      	mov	r6, r2
 800ea90:	b083      	sub	sp, #12
 800ea92:	4604      	mov	r4, r0
 800ea94:	460d      	mov	r5, r1
 800ea96:	9301      	str	r3, [sp, #4]
 800ea98:	9f08      	ldr	r7, [sp, #32]
 800ea9a:	f7f9 fb37 	bl	800810c <ucdr_deserialize_uint8_t>
 800ea9e:	4631      	mov	r1, r6
 800eaa0:	4620      	mov	r0, r4
 800eaa2:	f7f9 fb33 	bl	800810c <ucdr_deserialize_uint8_t>
 800eaa6:	9a01      	ldr	r2, [sp, #4]
 800eaa8:	2101      	movs	r1, #1
 800eaaa:	4620      	mov	r0, r4
 800eaac:	f7f9 fcb8 	bl	8008420 <ucdr_deserialize_endian_uint16_t>
 800eab0:	f995 3000 	ldrsb.w	r3, [r5]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	da01      	bge.n	800eabc <uxr_deserialize_message_header+0x30>
 800eab8:	b003      	add	sp, #12
 800eaba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eabc:	2204      	movs	r2, #4
 800eabe:	4639      	mov	r1, r7
 800eac0:	4620      	mov	r0, r4
 800eac2:	b003      	add	sp, #12
 800eac4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800eac8:	f004 b842 	b.w	8012b50 <ucdr_deserialize_array_uint8_t>

0800eacc <uxr_serialize_submessage_header>:
 800eacc:	b530      	push	{r4, r5, lr}
 800eace:	4615      	mov	r5, r2
 800ead0:	b083      	sub	sp, #12
 800ead2:	4604      	mov	r4, r0
 800ead4:	9301      	str	r3, [sp, #4]
 800ead6:	f7f9 fb03 	bl	80080e0 <ucdr_serialize_uint8_t>
 800eada:	4629      	mov	r1, r5
 800eadc:	4620      	mov	r0, r4
 800eade:	f7f9 faff 	bl	80080e0 <ucdr_serialize_uint8_t>
 800eae2:	9a01      	ldr	r2, [sp, #4]
 800eae4:	2101      	movs	r1, #1
 800eae6:	4620      	mov	r0, r4
 800eae8:	b003      	add	sp, #12
 800eaea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eaee:	f7f9 bba3 	b.w	8008238 <ucdr_serialize_endian_uint16_t>
 800eaf2:	bf00      	nop

0800eaf4 <uxr_deserialize_submessage_header>:
 800eaf4:	b530      	push	{r4, r5, lr}
 800eaf6:	4615      	mov	r5, r2
 800eaf8:	b083      	sub	sp, #12
 800eafa:	4604      	mov	r4, r0
 800eafc:	9301      	str	r3, [sp, #4]
 800eafe:	f7f9 fb05 	bl	800810c <ucdr_deserialize_uint8_t>
 800eb02:	4629      	mov	r1, r5
 800eb04:	4620      	mov	r0, r4
 800eb06:	f7f9 fb01 	bl	800810c <ucdr_deserialize_uint8_t>
 800eb0a:	9a01      	ldr	r2, [sp, #4]
 800eb0c:	2101      	movs	r1, #1
 800eb0e:	4620      	mov	r0, r4
 800eb10:	b003      	add	sp, #12
 800eb12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb16:	f7f9 bc83 	b.w	8008420 <ucdr_deserialize_endian_uint16_t>
 800eb1a:	bf00      	nop

0800eb1c <uxr_serialize_CLIENT_Representation>:
 800eb1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb20:	2204      	movs	r2, #4
 800eb22:	460e      	mov	r6, r1
 800eb24:	4605      	mov	r5, r0
 800eb26:	f003 ffaf 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800eb2a:	4607      	mov	r7, r0
 800eb2c:	2202      	movs	r2, #2
 800eb2e:	1d31      	adds	r1, r6, #4
 800eb30:	4628      	mov	r0, r5
 800eb32:	f003 ffa9 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800eb36:	4038      	ands	r0, r7
 800eb38:	2202      	movs	r2, #2
 800eb3a:	1db1      	adds	r1, r6, #6
 800eb3c:	b2c7      	uxtb	r7, r0
 800eb3e:	4628      	mov	r0, r5
 800eb40:	f003 ffa2 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800eb44:	2204      	movs	r2, #4
 800eb46:	4007      	ands	r7, r0
 800eb48:	f106 0108 	add.w	r1, r6, #8
 800eb4c:	4628      	mov	r0, r5
 800eb4e:	f003 ff9b 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800eb52:	4007      	ands	r7, r0
 800eb54:	7b31      	ldrb	r1, [r6, #12]
 800eb56:	4628      	mov	r0, r5
 800eb58:	f7f9 fac2 	bl	80080e0 <ucdr_serialize_uint8_t>
 800eb5c:	7b71      	ldrb	r1, [r6, #13]
 800eb5e:	4007      	ands	r7, r0
 800eb60:	4628      	mov	r0, r5
 800eb62:	f7f9 fa8f 	bl	8008084 <ucdr_serialize_bool>
 800eb66:	7b73      	ldrb	r3, [r6, #13]
 800eb68:	ea07 0800 	and.w	r8, r7, r0
 800eb6c:	b93b      	cbnz	r3, 800eb7e <uxr_serialize_CLIENT_Representation+0x62>
 800eb6e:	8bb1      	ldrh	r1, [r6, #28]
 800eb70:	4628      	mov	r0, r5
 800eb72:	f7f9 fae1 	bl	8008138 <ucdr_serialize_uint16_t>
 800eb76:	ea08 0000 	and.w	r0, r8, r0
 800eb7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb7e:	6931      	ldr	r1, [r6, #16]
 800eb80:	4628      	mov	r0, r5
 800eb82:	f7f9 fcc3 	bl	800850c <ucdr_serialize_uint32_t>
 800eb86:	6933      	ldr	r3, [r6, #16]
 800eb88:	b1e3      	cbz	r3, 800ebc4 <uxr_serialize_CLIENT_Representation+0xa8>
 800eb8a:	b1c0      	cbz	r0, 800ebbe <uxr_serialize_CLIENT_Representation+0xa2>
 800eb8c:	4637      	mov	r7, r6
 800eb8e:	f04f 0900 	mov.w	r9, #0
 800eb92:	e000      	b.n	800eb96 <uxr_serialize_CLIENT_Representation+0x7a>
 800eb94:	b19c      	cbz	r4, 800ebbe <uxr_serialize_CLIENT_Representation+0xa2>
 800eb96:	6979      	ldr	r1, [r7, #20]
 800eb98:	4628      	mov	r0, r5
 800eb9a:	f004 f899 	bl	8012cd0 <ucdr_serialize_string>
 800eb9e:	69b9      	ldr	r1, [r7, #24]
 800eba0:	4604      	mov	r4, r0
 800eba2:	4628      	mov	r0, r5
 800eba4:	f004 f894 	bl	8012cd0 <ucdr_serialize_string>
 800eba8:	f109 0901 	add.w	r9, r9, #1
 800ebac:	6933      	ldr	r3, [r6, #16]
 800ebae:	4004      	ands	r4, r0
 800ebb0:	3708      	adds	r7, #8
 800ebb2:	4599      	cmp	r9, r3
 800ebb4:	b2e4      	uxtb	r4, r4
 800ebb6:	d3ed      	bcc.n	800eb94 <uxr_serialize_CLIENT_Representation+0x78>
 800ebb8:	ea08 0804 	and.w	r8, r8, r4
 800ebbc:	e7d7      	b.n	800eb6e <uxr_serialize_CLIENT_Representation+0x52>
 800ebbe:	f04f 0800 	mov.w	r8, #0
 800ebc2:	e7d4      	b.n	800eb6e <uxr_serialize_CLIENT_Representation+0x52>
 800ebc4:	ea08 0800 	and.w	r8, r8, r0
 800ebc8:	e7d1      	b.n	800eb6e <uxr_serialize_CLIENT_Representation+0x52>
 800ebca:	bf00      	nop

0800ebcc <uxr_deserialize_CLIENT_Representation>:
 800ebcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebd0:	2204      	movs	r2, #4
 800ebd2:	460c      	mov	r4, r1
 800ebd4:	4605      	mov	r5, r0
 800ebd6:	f003 ffbb 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800ebda:	4607      	mov	r7, r0
 800ebdc:	2202      	movs	r2, #2
 800ebde:	1d21      	adds	r1, r4, #4
 800ebe0:	4628      	mov	r0, r5
 800ebe2:	f003 ffb5 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800ebe6:	4038      	ands	r0, r7
 800ebe8:	2202      	movs	r2, #2
 800ebea:	1da1      	adds	r1, r4, #6
 800ebec:	b2c6      	uxtb	r6, r0
 800ebee:	4628      	mov	r0, r5
 800ebf0:	f003 ffae 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800ebf4:	2204      	movs	r2, #4
 800ebf6:	4006      	ands	r6, r0
 800ebf8:	f104 0108 	add.w	r1, r4, #8
 800ebfc:	4628      	mov	r0, r5
 800ebfe:	f003 ffa7 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800ec02:	4006      	ands	r6, r0
 800ec04:	f104 010c 	add.w	r1, r4, #12
 800ec08:	4628      	mov	r0, r5
 800ec0a:	f7f9 fa7f 	bl	800810c <ucdr_deserialize_uint8_t>
 800ec0e:	f104 010d 	add.w	r1, r4, #13
 800ec12:	ea06 0700 	and.w	r7, r6, r0
 800ec16:	4628      	mov	r0, r5
 800ec18:	f7f9 fa4a 	bl	80080b0 <ucdr_deserialize_bool>
 800ec1c:	7b63      	ldrb	r3, [r4, #13]
 800ec1e:	4007      	ands	r7, r0
 800ec20:	b93b      	cbnz	r3, 800ec32 <uxr_deserialize_CLIENT_Representation+0x66>
 800ec22:	f104 011c 	add.w	r1, r4, #28
 800ec26:	4628      	mov	r0, r5
 800ec28:	f7f9 fb86 	bl	8008338 <ucdr_deserialize_uint16_t>
 800ec2c:	4038      	ands	r0, r7
 800ec2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec32:	f104 0110 	add.w	r1, r4, #16
 800ec36:	4628      	mov	r0, r5
 800ec38:	f7f9 fd98 	bl	800876c <ucdr_deserialize_uint32_t>
 800ec3c:	6923      	ldr	r3, [r4, #16]
 800ec3e:	2b01      	cmp	r3, #1
 800ec40:	d903      	bls.n	800ec4a <uxr_deserialize_CLIENT_Representation+0x7e>
 800ec42:	2301      	movs	r3, #1
 800ec44:	2700      	movs	r7, #0
 800ec46:	75ab      	strb	r3, [r5, #22]
 800ec48:	e7eb      	b.n	800ec22 <uxr_deserialize_CLIENT_Representation+0x56>
 800ec4a:	b30b      	cbz	r3, 800ec90 <uxr_deserialize_CLIENT_Representation+0xc4>
 800ec4c:	b1f0      	cbz	r0, 800ec8c <uxr_deserialize_CLIENT_Representation+0xc0>
 800ec4e:	46a0      	mov	r8, r4
 800ec50:	f04f 0900 	mov.w	r9, #0
 800ec54:	e000      	b.n	800ec58 <uxr_deserialize_CLIENT_Representation+0x8c>
 800ec56:	b1ce      	cbz	r6, 800ec8c <uxr_deserialize_CLIENT_Representation+0xc0>
 800ec58:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800ec5c:	f108 0808 	add.w	r8, r8, #8
 800ec60:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec64:	4628      	mov	r0, r5
 800ec66:	f004 f843 	bl	8012cf0 <ucdr_deserialize_string>
 800ec6a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ec6e:	4606      	mov	r6, r0
 800ec70:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec74:	4628      	mov	r0, r5
 800ec76:	f109 0901 	add.w	r9, r9, #1
 800ec7a:	f004 f839 	bl	8012cf0 <ucdr_deserialize_string>
 800ec7e:	6923      	ldr	r3, [r4, #16]
 800ec80:	4006      	ands	r6, r0
 800ec82:	4599      	cmp	r9, r3
 800ec84:	b2f6      	uxtb	r6, r6
 800ec86:	d3e6      	bcc.n	800ec56 <uxr_deserialize_CLIENT_Representation+0x8a>
 800ec88:	4037      	ands	r7, r6
 800ec8a:	e7ca      	b.n	800ec22 <uxr_deserialize_CLIENT_Representation+0x56>
 800ec8c:	2700      	movs	r7, #0
 800ec8e:	e7c8      	b.n	800ec22 <uxr_deserialize_CLIENT_Representation+0x56>
 800ec90:	4007      	ands	r7, r0
 800ec92:	e7c6      	b.n	800ec22 <uxr_deserialize_CLIENT_Representation+0x56>

0800ec94 <uxr_serialize_AGENT_Representation>:
 800ec94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec98:	2204      	movs	r2, #4
 800ec9a:	460f      	mov	r7, r1
 800ec9c:	4605      	mov	r5, r0
 800ec9e:	f003 fef3 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800eca2:	4604      	mov	r4, r0
 800eca4:	2202      	movs	r2, #2
 800eca6:	1d39      	adds	r1, r7, #4
 800eca8:	4628      	mov	r0, r5
 800ecaa:	f003 feed 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800ecae:	4020      	ands	r0, r4
 800ecb0:	2202      	movs	r2, #2
 800ecb2:	1db9      	adds	r1, r7, #6
 800ecb4:	b2c4      	uxtb	r4, r0
 800ecb6:	4628      	mov	r0, r5
 800ecb8:	f003 fee6 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800ecbc:	7a39      	ldrb	r1, [r7, #8]
 800ecbe:	4004      	ands	r4, r0
 800ecc0:	4628      	mov	r0, r5
 800ecc2:	f7f9 f9df 	bl	8008084 <ucdr_serialize_bool>
 800ecc6:	7a3b      	ldrb	r3, [r7, #8]
 800ecc8:	ea00 0804 	and.w	r8, r0, r4
 800eccc:	b913      	cbnz	r3, 800ecd4 <uxr_serialize_AGENT_Representation+0x40>
 800ecce:	4640      	mov	r0, r8
 800ecd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecd4:	68f9      	ldr	r1, [r7, #12]
 800ecd6:	4628      	mov	r0, r5
 800ecd8:	f7f9 fc18 	bl	800850c <ucdr_serialize_uint32_t>
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	b303      	cbz	r3, 800ed22 <uxr_serialize_AGENT_Representation+0x8e>
 800ece0:	b1d0      	cbz	r0, 800ed18 <uxr_serialize_AGENT_Representation+0x84>
 800ece2:	463e      	mov	r6, r7
 800ece4:	f04f 0900 	mov.w	r9, #0
 800ece8:	e000      	b.n	800ecec <uxr_serialize_AGENT_Representation+0x58>
 800ecea:	b1ac      	cbz	r4, 800ed18 <uxr_serialize_AGENT_Representation+0x84>
 800ecec:	6931      	ldr	r1, [r6, #16]
 800ecee:	4628      	mov	r0, r5
 800ecf0:	f003 ffee 	bl	8012cd0 <ucdr_serialize_string>
 800ecf4:	6971      	ldr	r1, [r6, #20]
 800ecf6:	4604      	mov	r4, r0
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	f003 ffe9 	bl	8012cd0 <ucdr_serialize_string>
 800ecfe:	f109 0901 	add.w	r9, r9, #1
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	4004      	ands	r4, r0
 800ed06:	3608      	adds	r6, #8
 800ed08:	4599      	cmp	r9, r3
 800ed0a:	b2e4      	uxtb	r4, r4
 800ed0c:	d3ed      	bcc.n	800ecea <uxr_serialize_AGENT_Representation+0x56>
 800ed0e:	ea08 0804 	and.w	r8, r8, r4
 800ed12:	4640      	mov	r0, r8
 800ed14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed18:	f04f 0800 	mov.w	r8, #0
 800ed1c:	4640      	mov	r0, r8
 800ed1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed22:	ea08 0800 	and.w	r8, r8, r0
 800ed26:	e7d2      	b.n	800ecce <uxr_serialize_AGENT_Representation+0x3a>

0800ed28 <uxr_serialize_DATAWRITER_Representation>:
 800ed28:	b570      	push	{r4, r5, r6, lr}
 800ed2a:	460d      	mov	r5, r1
 800ed2c:	7809      	ldrb	r1, [r1, #0]
 800ed2e:	4606      	mov	r6, r0
 800ed30:	f7f9 f9d6 	bl	80080e0 <ucdr_serialize_uint8_t>
 800ed34:	4604      	mov	r4, r0
 800ed36:	b130      	cbz	r0, 800ed46 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ed38:	782b      	ldrb	r3, [r5, #0]
 800ed3a:	2b02      	cmp	r3, #2
 800ed3c:	d00c      	beq.n	800ed58 <uxr_serialize_DATAWRITER_Representation+0x30>
 800ed3e:	2b03      	cmp	r3, #3
 800ed40:	d010      	beq.n	800ed64 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800ed42:	2b01      	cmp	r3, #1
 800ed44:	d008      	beq.n	800ed58 <uxr_serialize_DATAWRITER_Representation+0x30>
 800ed46:	2202      	movs	r2, #2
 800ed48:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800ed4c:	4630      	mov	r0, r6
 800ed4e:	f003 fe9b 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800ed52:	4020      	ands	r0, r4
 800ed54:	b2c0      	uxtb	r0, r0
 800ed56:	bd70      	pop	{r4, r5, r6, pc}
 800ed58:	6869      	ldr	r1, [r5, #4]
 800ed5a:	4630      	mov	r0, r6
 800ed5c:	f003 ffb8 	bl	8012cd0 <ucdr_serialize_string>
 800ed60:	4604      	mov	r4, r0
 800ed62:	e7f0      	b.n	800ed46 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ed64:	4629      	mov	r1, r5
 800ed66:	4630      	mov	r0, r6
 800ed68:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800ed6c:	3104      	adds	r1, #4
 800ed6e:	f003 ff83 	bl	8012c78 <ucdr_serialize_sequence_uint8_t>
 800ed72:	4604      	mov	r4, r0
 800ed74:	e7e7      	b.n	800ed46 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ed76:	bf00      	nop

0800ed78 <uxr_serialize_ObjectVariant.part.0>:
 800ed78:	b570      	push	{r4, r5, r6, lr}
 800ed7a:	780b      	ldrb	r3, [r1, #0]
 800ed7c:	460c      	mov	r4, r1
 800ed7e:	4605      	mov	r5, r0
 800ed80:	3b01      	subs	r3, #1
 800ed82:	2b0d      	cmp	r3, #13
 800ed84:	d854      	bhi.n	800ee30 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800ed86:	e8df f003 	tbb	[pc, r3]
 800ed8a:	0730      	.short	0x0730
 800ed8c:	07071b1b 	.word	0x07071b1b
 800ed90:	0c530707 	.word	0x0c530707
 800ed94:	494e0c0c 	.word	0x494e0c0c
 800ed98:	3104      	adds	r1, #4
 800ed9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed9e:	f7ff bfc3 	b.w	800ed28 <uxr_serialize_DATAWRITER_Representation>
 800eda2:	7909      	ldrb	r1, [r1, #4]
 800eda4:	f7f9 f99c 	bl	80080e0 <ucdr_serialize_uint8_t>
 800eda8:	b1e8      	cbz	r0, 800ede6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800edaa:	7923      	ldrb	r3, [r4, #4]
 800edac:	2b01      	cmp	r3, #1
 800edae:	d001      	beq.n	800edb4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800edb0:	2b02      	cmp	r3, #2
 800edb2:	d13d      	bne.n	800ee30 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800edb4:	68a1      	ldr	r1, [r4, #8]
 800edb6:	4628      	mov	r0, r5
 800edb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800edbc:	f003 bf88 	b.w	8012cd0 <ucdr_serialize_string>
 800edc0:	7909      	ldrb	r1, [r1, #4]
 800edc2:	f7f9 f98d 	bl	80080e0 <ucdr_serialize_uint8_t>
 800edc6:	4606      	mov	r6, r0
 800edc8:	b120      	cbz	r0, 800edd4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800edca:	7923      	ldrb	r3, [r4, #4]
 800edcc:	2b02      	cmp	r3, #2
 800edce:	d039      	beq.n	800ee44 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800edd0:	2b03      	cmp	r3, #3
 800edd2:	d02f      	beq.n	800ee34 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800edd4:	2202      	movs	r2, #2
 800edd6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800edda:	4628      	mov	r0, r5
 800eddc:	f003 fe54 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800ede0:	4030      	ands	r0, r6
 800ede2:	b2c0      	uxtb	r0, r0
 800ede4:	bd70      	pop	{r4, r5, r6, pc}
 800ede6:	2000      	movs	r0, #0
 800ede8:	bd70      	pop	{r4, r5, r6, pc}
 800edea:	7909      	ldrb	r1, [r1, #4]
 800edec:	f7f9 f978 	bl	80080e0 <ucdr_serialize_uint8_t>
 800edf0:	4606      	mov	r6, r0
 800edf2:	b158      	cbz	r0, 800ee0c <uxr_serialize_ObjectVariant.part.0+0x94>
 800edf4:	7923      	ldrb	r3, [r4, #4]
 800edf6:	2b02      	cmp	r3, #2
 800edf8:	d003      	beq.n	800ee02 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800edfa:	2b03      	cmp	r3, #3
 800edfc:	d028      	beq.n	800ee50 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800edfe:	2b01      	cmp	r3, #1
 800ee00:	d104      	bne.n	800ee0c <uxr_serialize_ObjectVariant.part.0+0x94>
 800ee02:	68a1      	ldr	r1, [r4, #8]
 800ee04:	4628      	mov	r0, r5
 800ee06:	f003 ff63 	bl	8012cd0 <ucdr_serialize_string>
 800ee0a:	4606      	mov	r6, r0
 800ee0c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800ee10:	4628      	mov	r0, r5
 800ee12:	f7f9 fea1 	bl	8008b58 <ucdr_serialize_int16_t>
 800ee16:	4030      	ands	r0, r6
 800ee18:	b2c0      	uxtb	r0, r0
 800ee1a:	bd70      	pop	{r4, r5, r6, pc}
 800ee1c:	3104      	adds	r1, #4
 800ee1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee22:	f7ff be7b 	b.w	800eb1c <uxr_serialize_CLIENT_Representation>
 800ee26:	3104      	adds	r1, #4
 800ee28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee2c:	f7ff bf32 	b.w	800ec94 <uxr_serialize_AGENT_Representation>
 800ee30:	2001      	movs	r0, #1
 800ee32:	bd70      	pop	{r4, r5, r6, pc}
 800ee34:	68a2      	ldr	r2, [r4, #8]
 800ee36:	f104 010c 	add.w	r1, r4, #12
 800ee3a:	4628      	mov	r0, r5
 800ee3c:	f003 ff1c 	bl	8012c78 <ucdr_serialize_sequence_uint8_t>
 800ee40:	4606      	mov	r6, r0
 800ee42:	e7c7      	b.n	800edd4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800ee44:	68a1      	ldr	r1, [r4, #8]
 800ee46:	4628      	mov	r0, r5
 800ee48:	f003 ff42 	bl	8012cd0 <ucdr_serialize_string>
 800ee4c:	4606      	mov	r6, r0
 800ee4e:	e7c1      	b.n	800edd4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800ee50:	68a2      	ldr	r2, [r4, #8]
 800ee52:	f104 010c 	add.w	r1, r4, #12
 800ee56:	4628      	mov	r0, r5
 800ee58:	f003 ff0e 	bl	8012c78 <ucdr_serialize_sequence_uint8_t>
 800ee5c:	4606      	mov	r6, r0
 800ee5e:	e7d5      	b.n	800ee0c <uxr_serialize_ObjectVariant.part.0+0x94>

0800ee60 <uxr_deserialize_DATAWRITER_Representation>:
 800ee60:	b570      	push	{r4, r5, r6, lr}
 800ee62:	4606      	mov	r6, r0
 800ee64:	460d      	mov	r5, r1
 800ee66:	f7f9 f951 	bl	800810c <ucdr_deserialize_uint8_t>
 800ee6a:	4604      	mov	r4, r0
 800ee6c:	b130      	cbz	r0, 800ee7c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ee6e:	782b      	ldrb	r3, [r5, #0]
 800ee70:	2b02      	cmp	r3, #2
 800ee72:	d00c      	beq.n	800ee8e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800ee74:	2b03      	cmp	r3, #3
 800ee76:	d012      	beq.n	800ee9e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d008      	beq.n	800ee8e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800ee7c:	2202      	movs	r2, #2
 800ee7e:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800ee82:	4630      	mov	r0, r6
 800ee84:	f003 fe64 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800ee88:	4020      	ands	r0, r4
 800ee8a:	b2c0      	uxtb	r0, r0
 800ee8c:	bd70      	pop	{r4, r5, r6, pc}
 800ee8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ee92:	6869      	ldr	r1, [r5, #4]
 800ee94:	4630      	mov	r0, r6
 800ee96:	f003 ff2b 	bl	8012cf0 <ucdr_deserialize_string>
 800ee9a:	4604      	mov	r4, r0
 800ee9c:	e7ee      	b.n	800ee7c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ee9e:	1d2b      	adds	r3, r5, #4
 800eea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eea4:	f105 0108 	add.w	r1, r5, #8
 800eea8:	4630      	mov	r0, r6
 800eeaa:	f003 fef7 	bl	8012c9c <ucdr_deserialize_sequence_uint8_t>
 800eeae:	4604      	mov	r4, r0
 800eeb0:	e7e4      	b.n	800ee7c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800eeb2:	bf00      	nop

0800eeb4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800eeb4:	b570      	push	{r4, r5, r6, lr}
 800eeb6:	460d      	mov	r5, r1
 800eeb8:	7809      	ldrb	r1, [r1, #0]
 800eeba:	4606      	mov	r6, r0
 800eebc:	f7f9 f8e2 	bl	8008084 <ucdr_serialize_bool>
 800eec0:	782b      	ldrb	r3, [r5, #0]
 800eec2:	4604      	mov	r4, r0
 800eec4:	b94b      	cbnz	r3, 800eeda <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800eec6:	7a29      	ldrb	r1, [r5, #8]
 800eec8:	4630      	mov	r0, r6
 800eeca:	f7f9 f8db 	bl	8008084 <ucdr_serialize_bool>
 800eece:	7a2b      	ldrb	r3, [r5, #8]
 800eed0:	4004      	ands	r4, r0
 800eed2:	b2e4      	uxtb	r4, r4
 800eed4:	b943      	cbnz	r3, 800eee8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800eed6:	4620      	mov	r0, r4
 800eed8:	bd70      	pop	{r4, r5, r6, pc}
 800eeda:	6869      	ldr	r1, [r5, #4]
 800eedc:	4630      	mov	r0, r6
 800eede:	f003 fef7 	bl	8012cd0 <ucdr_serialize_string>
 800eee2:	4004      	ands	r4, r0
 800eee4:	b2e4      	uxtb	r4, r4
 800eee6:	e7ee      	b.n	800eec6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800eee8:	68e9      	ldr	r1, [r5, #12]
 800eeea:	4630      	mov	r0, r6
 800eeec:	f003 fef0 	bl	8012cd0 <ucdr_serialize_string>
 800eef0:	4004      	ands	r4, r0
 800eef2:	4620      	mov	r0, r4
 800eef4:	bd70      	pop	{r4, r5, r6, pc}
 800eef6:	bf00      	nop

0800eef8 <uxr_serialize_OBJK_Replier_Binary>:
 800eef8:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800eefc:	460f      	mov	r7, r1
 800eefe:	4680      	mov	r8, r0
 800ef00:	6809      	ldr	r1, [r1, #0]
 800ef02:	f003 fee5 	bl	8012cd0 <ucdr_serialize_string>
 800ef06:	4605      	mov	r5, r0
 800ef08:	6879      	ldr	r1, [r7, #4]
 800ef0a:	4640      	mov	r0, r8
 800ef0c:	f003 fee0 	bl	8012cd0 <ucdr_serialize_string>
 800ef10:	4005      	ands	r5, r0
 800ef12:	68b9      	ldr	r1, [r7, #8]
 800ef14:	4640      	mov	r0, r8
 800ef16:	b2ec      	uxtb	r4, r5
 800ef18:	f003 feda 	bl	8012cd0 <ucdr_serialize_string>
 800ef1c:	7b39      	ldrb	r1, [r7, #12]
 800ef1e:	4004      	ands	r4, r0
 800ef20:	4640      	mov	r0, r8
 800ef22:	f7f9 f8af 	bl	8008084 <ucdr_serialize_bool>
 800ef26:	7b3b      	ldrb	r3, [r7, #12]
 800ef28:	4004      	ands	r4, r0
 800ef2a:	b94b      	cbnz	r3, 800ef40 <uxr_serialize_OBJK_Replier_Binary+0x48>
 800ef2c:	7d39      	ldrb	r1, [r7, #20]
 800ef2e:	4640      	mov	r0, r8
 800ef30:	f7f9 f8a8 	bl	8008084 <ucdr_serialize_bool>
 800ef34:	7d3b      	ldrb	r3, [r7, #20]
 800ef36:	4004      	ands	r4, r0
 800ef38:	b943      	cbnz	r3, 800ef4c <uxr_serialize_OBJK_Replier_Binary+0x54>
 800ef3a:	4620      	mov	r0, r4
 800ef3c:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800ef40:	6939      	ldr	r1, [r7, #16]
 800ef42:	4640      	mov	r0, r8
 800ef44:	f003 fec4 	bl	8012cd0 <ucdr_serialize_string>
 800ef48:	4004      	ands	r4, r0
 800ef4a:	e7ef      	b.n	800ef2c <uxr_serialize_OBJK_Replier_Binary+0x34>
 800ef4c:	69b9      	ldr	r1, [r7, #24]
 800ef4e:	4640      	mov	r0, r8
 800ef50:	f003 febe 	bl	8012cd0 <ucdr_serialize_string>
 800ef54:	4004      	ands	r4, r0
 800ef56:	b2e4      	uxtb	r4, r4
 800ef58:	4620      	mov	r0, r4
 800ef5a:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800ef5e:	bf00      	nop

0800ef60 <uxr_deserialize_ObjectVariant>:
 800ef60:	b570      	push	{r4, r5, r6, lr}
 800ef62:	4605      	mov	r5, r0
 800ef64:	460e      	mov	r6, r1
 800ef66:	f7f9 f8d1 	bl	800810c <ucdr_deserialize_uint8_t>
 800ef6a:	b168      	cbz	r0, 800ef88 <uxr_deserialize_ObjectVariant+0x28>
 800ef6c:	7833      	ldrb	r3, [r6, #0]
 800ef6e:	4604      	mov	r4, r0
 800ef70:	3b01      	subs	r3, #1
 800ef72:	2b0d      	cmp	r3, #13
 800ef74:	d809      	bhi.n	800ef8a <uxr_deserialize_ObjectVariant+0x2a>
 800ef76:	e8df f003 	tbb	[pc, r3]
 800ef7a:	0a41      	.short	0x0a41
 800ef7c:	0a0a2323 	.word	0x0a0a2323
 800ef80:	10080a0a 	.word	0x10080a0a
 800ef84:	565c1010 	.word	0x565c1010
 800ef88:	2400      	movs	r4, #0
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	bd70      	pop	{r4, r5, r6, pc}
 800ef8e:	1d31      	adds	r1, r6, #4
 800ef90:	4628      	mov	r0, r5
 800ef92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef96:	f7ff bf63 	b.w	800ee60 <uxr_deserialize_DATAWRITER_Representation>
 800ef9a:	1d31      	adds	r1, r6, #4
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	f7f9 f8b5 	bl	800810c <ucdr_deserialize_uint8_t>
 800efa2:	2800      	cmp	r0, #0
 800efa4:	d0f0      	beq.n	800ef88 <uxr_deserialize_ObjectVariant+0x28>
 800efa6:	7933      	ldrb	r3, [r6, #4]
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d001      	beq.n	800efb0 <uxr_deserialize_ObjectVariant+0x50>
 800efac:	2b02      	cmp	r3, #2
 800efae:	d1ec      	bne.n	800ef8a <uxr_deserialize_ObjectVariant+0x2a>
 800efb0:	68b1      	ldr	r1, [r6, #8]
 800efb2:	4628      	mov	r0, r5
 800efb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800efb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efbc:	f003 be98 	b.w	8012cf0 <ucdr_deserialize_string>
 800efc0:	1d31      	adds	r1, r6, #4
 800efc2:	4628      	mov	r0, r5
 800efc4:	f7f9 f8a2 	bl	800810c <ucdr_deserialize_uint8_t>
 800efc8:	4604      	mov	r4, r0
 800efca:	b170      	cbz	r0, 800efea <uxr_deserialize_ObjectVariant+0x8a>
 800efcc:	7933      	ldrb	r3, [r6, #4]
 800efce:	2b02      	cmp	r3, #2
 800efd0:	d04c      	beq.n	800f06c <uxr_deserialize_ObjectVariant+0x10c>
 800efd2:	2b03      	cmp	r3, #3
 800efd4:	d109      	bne.n	800efea <uxr_deserialize_ObjectVariant+0x8a>
 800efd6:	f106 0308 	add.w	r3, r6, #8
 800efda:	f44f 7200 	mov.w	r2, #512	; 0x200
 800efde:	f106 010c 	add.w	r1, r6, #12
 800efe2:	4628      	mov	r0, r5
 800efe4:	f003 fe5a 	bl	8012c9c <ucdr_deserialize_sequence_uint8_t>
 800efe8:	4604      	mov	r4, r0
 800efea:	2202      	movs	r2, #2
 800efec:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800eff0:	4628      	mov	r0, r5
 800eff2:	f003 fdad 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800eff6:	4020      	ands	r0, r4
 800eff8:	b2c4      	uxtb	r4, r0
 800effa:	e7c6      	b.n	800ef8a <uxr_deserialize_ObjectVariant+0x2a>
 800effc:	1d31      	adds	r1, r6, #4
 800effe:	4628      	mov	r0, r5
 800f000:	f7f9 f884 	bl	800810c <ucdr_deserialize_uint8_t>
 800f004:	4604      	mov	r4, r0
 800f006:	b130      	cbz	r0, 800f016 <uxr_deserialize_ObjectVariant+0xb6>
 800f008:	7933      	ldrb	r3, [r6, #4]
 800f00a:	2b02      	cmp	r3, #2
 800f00c:	d036      	beq.n	800f07c <uxr_deserialize_ObjectVariant+0x11c>
 800f00e:	2b03      	cmp	r3, #3
 800f010:	d03c      	beq.n	800f08c <uxr_deserialize_ObjectVariant+0x12c>
 800f012:	2b01      	cmp	r3, #1
 800f014:	d032      	beq.n	800f07c <uxr_deserialize_ObjectVariant+0x11c>
 800f016:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800f01a:	4628      	mov	r0, r5
 800f01c:	f7f9 fe1c 	bl	8008c58 <ucdr_deserialize_int16_t>
 800f020:	4020      	ands	r0, r4
 800f022:	b2c4      	uxtb	r4, r0
 800f024:	e7b1      	b.n	800ef8a <uxr_deserialize_ObjectVariant+0x2a>
 800f026:	1d31      	adds	r1, r6, #4
 800f028:	4628      	mov	r0, r5
 800f02a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f02e:	f7ff bdcd 	b.w	800ebcc <uxr_deserialize_CLIENT_Representation>
 800f032:	2204      	movs	r2, #4
 800f034:	4628      	mov	r0, r5
 800f036:	18b1      	adds	r1, r6, r2
 800f038:	f003 fd8a 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800f03c:	4604      	mov	r4, r0
 800f03e:	2202      	movs	r2, #2
 800f040:	f106 0108 	add.w	r1, r6, #8
 800f044:	4628      	mov	r0, r5
 800f046:	f003 fd83 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800f04a:	4004      	ands	r4, r0
 800f04c:	2202      	movs	r2, #2
 800f04e:	f106 010a 	add.w	r1, r6, #10
 800f052:	4628      	mov	r0, r5
 800f054:	b2e4      	uxtb	r4, r4
 800f056:	f003 fd7b 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800f05a:	4603      	mov	r3, r0
 800f05c:	f106 010c 	add.w	r1, r6, #12
 800f060:	4628      	mov	r0, r5
 800f062:	401c      	ands	r4, r3
 800f064:	f7f9 f824 	bl	80080b0 <ucdr_deserialize_bool>
 800f068:	4004      	ands	r4, r0
 800f06a:	e78e      	b.n	800ef8a <uxr_deserialize_ObjectVariant+0x2a>
 800f06c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f070:	68b1      	ldr	r1, [r6, #8]
 800f072:	4628      	mov	r0, r5
 800f074:	f003 fe3c 	bl	8012cf0 <ucdr_deserialize_string>
 800f078:	4604      	mov	r4, r0
 800f07a:	e7b6      	b.n	800efea <uxr_deserialize_ObjectVariant+0x8a>
 800f07c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f080:	68b1      	ldr	r1, [r6, #8]
 800f082:	4628      	mov	r0, r5
 800f084:	f003 fe34 	bl	8012cf0 <ucdr_deserialize_string>
 800f088:	4604      	mov	r4, r0
 800f08a:	e7c4      	b.n	800f016 <uxr_deserialize_ObjectVariant+0xb6>
 800f08c:	f106 0308 	add.w	r3, r6, #8
 800f090:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f094:	f106 010c 	add.w	r1, r6, #12
 800f098:	4628      	mov	r0, r5
 800f09a:	f003 fdff 	bl	8012c9c <ucdr_deserialize_sequence_uint8_t>
 800f09e:	4604      	mov	r4, r0
 800f0a0:	e7b9      	b.n	800f016 <uxr_deserialize_ObjectVariant+0xb6>
 800f0a2:	bf00      	nop

0800f0a4 <uxr_deserialize_BaseObjectRequest>:
 800f0a4:	b570      	push	{r4, r5, r6, lr}
 800f0a6:	2202      	movs	r2, #2
 800f0a8:	4605      	mov	r5, r0
 800f0aa:	460e      	mov	r6, r1
 800f0ac:	f003 fd50 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800f0b0:	2202      	movs	r2, #2
 800f0b2:	4604      	mov	r4, r0
 800f0b4:	4628      	mov	r0, r5
 800f0b6:	18b1      	adds	r1, r6, r2
 800f0b8:	f003 fd4a 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800f0bc:	4020      	ands	r0, r4
 800f0be:	b2c0      	uxtb	r0, r0
 800f0c0:	bd70      	pop	{r4, r5, r6, pc}
 800f0c2:	bf00      	nop

0800f0c4 <uxr_serialize_ActivityInfoVariant>:
 800f0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0c8:	460e      	mov	r6, r1
 800f0ca:	7809      	ldrb	r1, [r1, #0]
 800f0cc:	4680      	mov	r8, r0
 800f0ce:	f7f9 f807 	bl	80080e0 <ucdr_serialize_uint8_t>
 800f0d2:	4607      	mov	r7, r0
 800f0d4:	b138      	cbz	r0, 800f0e6 <uxr_serialize_ActivityInfoVariant+0x22>
 800f0d6:	7833      	ldrb	r3, [r6, #0]
 800f0d8:	2b06      	cmp	r3, #6
 800f0da:	f000 8081 	beq.w	800f1e0 <uxr_serialize_ActivityInfoVariant+0x11c>
 800f0de:	2b0d      	cmp	r3, #13
 800f0e0:	d014      	beq.n	800f10c <uxr_serialize_ActivityInfoVariant+0x48>
 800f0e2:	2b05      	cmp	r3, #5
 800f0e4:	d002      	beq.n	800f0ec <uxr_serialize_ActivityInfoVariant+0x28>
 800f0e6:	4638      	mov	r0, r7
 800f0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0ec:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 800f0f0:	4640      	mov	r0, r8
 800f0f2:	f7f9 fd31 	bl	8008b58 <ucdr_serialize_int16_t>
 800f0f6:	4607      	mov	r7, r0
 800f0f8:	4640      	mov	r0, r8
 800f0fa:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 800f0fe:	f7f9 fc5b 	bl	80089b8 <ucdr_serialize_uint64_t>
 800f102:	4038      	ands	r0, r7
 800f104:	b2c7      	uxtb	r7, r0
 800f106:	4638      	mov	r0, r7
 800f108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f10c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 800f110:	4640      	mov	r0, r8
 800f112:	f7f9 fd21 	bl	8008b58 <ucdr_serialize_int16_t>
 800f116:	68f1      	ldr	r1, [r6, #12]
 800f118:	4607      	mov	r7, r0
 800f11a:	4640      	mov	r0, r8
 800f11c:	f7f9 f9f6 	bl	800850c <ucdr_serialize_uint32_t>
 800f120:	68f3      	ldr	r3, [r6, #12]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d0ed      	beq.n	800f102 <uxr_serialize_ActivityInfoVariant+0x3e>
 800f126:	b318      	cbz	r0, 800f170 <uxr_serialize_ActivityInfoVariant+0xac>
 800f128:	f106 090c 	add.w	r9, r6, #12
 800f12c:	2400      	movs	r4, #0
 800f12e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800f132:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 800f136:	7c29      	ldrb	r1, [r5, #16]
 800f138:	4640      	mov	r0, r8
 800f13a:	f7f8 ffd1 	bl	80080e0 <ucdr_serialize_uint8_t>
 800f13e:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 800f142:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800f146:	2800      	cmp	r0, #0
 800f148:	d051      	beq.n	800f1ee <uxr_serialize_ActivityInfoVariant+0x12a>
 800f14a:	7c2b      	ldrb	r3, [r5, #16]
 800f14c:	00c9      	lsls	r1, r1, #3
 800f14e:	2b03      	cmp	r3, #3
 800f150:	d854      	bhi.n	800f1fc <uxr_serialize_ActivityInfoVariant+0x138>
 800f152:	e8df f003 	tbb	[pc, r3]
 800f156:	2133      	.short	0x2133
 800f158:	020f      	.short	0x020f
 800f15a:	4449      	add	r1, r9
 800f15c:	4640      	mov	r0, r8
 800f15e:	6889      	ldr	r1, [r1, #8]
 800f160:	f003 fdb6 	bl	8012cd0 <ucdr_serialize_string>
 800f164:	3401      	adds	r4, #1
 800f166:	68f2      	ldr	r2, [r6, #12]
 800f168:	4294      	cmp	r4, r2
 800f16a:	d244      	bcs.n	800f1f6 <uxr_serialize_ActivityInfoVariant+0x132>
 800f16c:	2800      	cmp	r0, #0
 800f16e:	d1de      	bne.n	800f12e <uxr_serialize_ActivityInfoVariant+0x6a>
 800f170:	2700      	movs	r7, #0
 800f172:	e7b8      	b.n	800f0e6 <uxr_serialize_ActivityInfoVariant+0x22>
 800f174:	3108      	adds	r1, #8
 800f176:	44a2      	add	sl, r4
 800f178:	2210      	movs	r2, #16
 800f17a:	4640      	mov	r0, r8
 800f17c:	4449      	add	r1, r9
 800f17e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800f182:	f003 fc81 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800f186:	4605      	mov	r5, r0
 800f188:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 800f18c:	4640      	mov	r0, r8
 800f18e:	f7f9 f9bd 	bl	800850c <ucdr_serialize_uint32_t>
 800f192:	4028      	ands	r0, r5
 800f194:	b2c0      	uxtb	r0, r0
 800f196:	e7e5      	b.n	800f164 <uxr_serialize_ActivityInfoVariant+0xa0>
 800f198:	3108      	adds	r1, #8
 800f19a:	44a2      	add	sl, r4
 800f19c:	2204      	movs	r2, #4
 800f19e:	4640      	mov	r0, r8
 800f1a0:	4449      	add	r1, r9
 800f1a2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800f1a6:	f003 fc6f 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800f1aa:	4605      	mov	r5, r0
 800f1ac:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 800f1b0:	4640      	mov	r0, r8
 800f1b2:	f7f8 ffc1 	bl	8008138 <ucdr_serialize_uint16_t>
 800f1b6:	4028      	ands	r0, r5
 800f1b8:	b2c0      	uxtb	r0, r0
 800f1ba:	e7d3      	b.n	800f164 <uxr_serialize_ActivityInfoVariant+0xa0>
 800f1bc:	3108      	adds	r1, #8
 800f1be:	44a2      	add	sl, r4
 800f1c0:	2202      	movs	r2, #2
 800f1c2:	4640      	mov	r0, r8
 800f1c4:	4449      	add	r1, r9
 800f1c6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800f1ca:	f003 fc5d 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800f1ce:	4605      	mov	r5, r0
 800f1d0:	f89a 1016 	ldrb.w	r1, [sl, #22]
 800f1d4:	4640      	mov	r0, r8
 800f1d6:	f7f8 ff83 	bl	80080e0 <ucdr_serialize_uint8_t>
 800f1da:	4028      	ands	r0, r5
 800f1dc:	b2c0      	uxtb	r0, r0
 800f1de:	e7c1      	b.n	800f164 <uxr_serialize_ActivityInfoVariant+0xa0>
 800f1e0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 800f1e4:	4640      	mov	r0, r8
 800f1e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1ea:	f7f9 bcb5 	b.w	8008b58 <ucdr_serialize_int16_t>
 800f1ee:	3401      	adds	r4, #1
 800f1f0:	68f2      	ldr	r2, [r6, #12]
 800f1f2:	42a2      	cmp	r2, r4
 800f1f4:	d8bc      	bhi.n	800f170 <uxr_serialize_ActivityInfoVariant+0xac>
 800f1f6:	4007      	ands	r7, r0
 800f1f8:	b2ff      	uxtb	r7, r7
 800f1fa:	e774      	b.n	800f0e6 <uxr_serialize_ActivityInfoVariant+0x22>
 800f1fc:	3401      	adds	r4, #1
 800f1fe:	68f3      	ldr	r3, [r6, #12]
 800f200:	3518      	adds	r5, #24
 800f202:	429c      	cmp	r4, r3
 800f204:	d397      	bcc.n	800f136 <uxr_serialize_ActivityInfoVariant+0x72>
 800f206:	e76e      	b.n	800f0e6 <uxr_serialize_ActivityInfoVariant+0x22>

0800f208 <uxr_deserialize_BaseObjectReply>:
 800f208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f20c:	2202      	movs	r2, #2
 800f20e:	4606      	mov	r6, r0
 800f210:	460f      	mov	r7, r1
 800f212:	f003 fc9d 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800f216:	2202      	movs	r2, #2
 800f218:	4605      	mov	r5, r0
 800f21a:	4630      	mov	r0, r6
 800f21c:	18b9      	adds	r1, r7, r2
 800f21e:	f003 fc97 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800f222:	4680      	mov	r8, r0
 800f224:	1d39      	adds	r1, r7, #4
 800f226:	4630      	mov	r0, r6
 800f228:	f7f8 ff70 	bl	800810c <ucdr_deserialize_uint8_t>
 800f22c:	ea05 0508 	and.w	r5, r5, r8
 800f230:	4604      	mov	r4, r0
 800f232:	1d79      	adds	r1, r7, #5
 800f234:	4630      	mov	r0, r6
 800f236:	402c      	ands	r4, r5
 800f238:	f7f8 ff68 	bl	800810c <ucdr_deserialize_uint8_t>
 800f23c:	4020      	ands	r0, r4
 800f23e:	b2c0      	uxtb	r0, r0
 800f240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f244 <uxr_serialize_ReadSpecification>:
 800f244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f246:	460e      	mov	r6, r1
 800f248:	4607      	mov	r7, r0
 800f24a:	7809      	ldrb	r1, [r1, #0]
 800f24c:	f7f8 ff48 	bl	80080e0 <ucdr_serialize_uint8_t>
 800f250:	4604      	mov	r4, r0
 800f252:	7871      	ldrb	r1, [r6, #1]
 800f254:	4638      	mov	r0, r7
 800f256:	f7f8 ff43 	bl	80080e0 <ucdr_serialize_uint8_t>
 800f25a:	4004      	ands	r4, r0
 800f25c:	78b1      	ldrb	r1, [r6, #2]
 800f25e:	4638      	mov	r0, r7
 800f260:	f7f8 ff10 	bl	8008084 <ucdr_serialize_bool>
 800f264:	78b3      	ldrb	r3, [r6, #2]
 800f266:	b2e4      	uxtb	r4, r4
 800f268:	4004      	ands	r4, r0
 800f26a:	b943      	cbnz	r3, 800f27e <uxr_serialize_ReadSpecification+0x3a>
 800f26c:	7a31      	ldrb	r1, [r6, #8]
 800f26e:	4638      	mov	r0, r7
 800f270:	f7f8 ff08 	bl	8008084 <ucdr_serialize_bool>
 800f274:	7a33      	ldrb	r3, [r6, #8]
 800f276:	4004      	ands	r4, r0
 800f278:	b93b      	cbnz	r3, 800f28a <uxr_serialize_ReadSpecification+0x46>
 800f27a:	4620      	mov	r0, r4
 800f27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f27e:	6871      	ldr	r1, [r6, #4]
 800f280:	4638      	mov	r0, r7
 800f282:	f003 fd25 	bl	8012cd0 <ucdr_serialize_string>
 800f286:	4004      	ands	r4, r0
 800f288:	e7f0      	b.n	800f26c <uxr_serialize_ReadSpecification+0x28>
 800f28a:	8971      	ldrh	r1, [r6, #10]
 800f28c:	4638      	mov	r0, r7
 800f28e:	f7f8 ff53 	bl	8008138 <ucdr_serialize_uint16_t>
 800f292:	4605      	mov	r5, r0
 800f294:	89b1      	ldrh	r1, [r6, #12]
 800f296:	4638      	mov	r0, r7
 800f298:	f7f8 ff4e 	bl	8008138 <ucdr_serialize_uint16_t>
 800f29c:	4005      	ands	r5, r0
 800f29e:	89f1      	ldrh	r1, [r6, #14]
 800f2a0:	4638      	mov	r0, r7
 800f2a2:	b2ed      	uxtb	r5, r5
 800f2a4:	f7f8 ff48 	bl	8008138 <ucdr_serialize_uint16_t>
 800f2a8:	8a31      	ldrh	r1, [r6, #16]
 800f2aa:	4025      	ands	r5, r4
 800f2ac:	4604      	mov	r4, r0
 800f2ae:	4638      	mov	r0, r7
 800f2b0:	4025      	ands	r5, r4
 800f2b2:	f7f8 ff41 	bl	8008138 <ucdr_serialize_uint16_t>
 800f2b6:	ea00 0405 	and.w	r4, r0, r5
 800f2ba:	4620      	mov	r0, r4
 800f2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2be:	bf00      	nop

0800f2c0 <uxr_serialize_CREATE_CLIENT_Payload>:
 800f2c0:	f7ff bc2c 	b.w	800eb1c <uxr_serialize_CLIENT_Representation>

0800f2c4 <uxr_serialize_CREATE_Payload>:
 800f2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2c6:	2202      	movs	r2, #2
 800f2c8:	4607      	mov	r7, r0
 800f2ca:	460e      	mov	r6, r1
 800f2cc:	f003 fbdc 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800f2d0:	2202      	movs	r2, #2
 800f2d2:	4605      	mov	r5, r0
 800f2d4:	4638      	mov	r0, r7
 800f2d6:	18b1      	adds	r1, r6, r2
 800f2d8:	f003 fbd6 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800f2dc:	7931      	ldrb	r1, [r6, #4]
 800f2de:	4604      	mov	r4, r0
 800f2e0:	4638      	mov	r0, r7
 800f2e2:	f7f8 fefd 	bl	80080e0 <ucdr_serialize_uint8_t>
 800f2e6:	b170      	cbz	r0, 800f306 <uxr_serialize_CREATE_Payload+0x42>
 800f2e8:	7933      	ldrb	r3, [r6, #4]
 800f2ea:	402c      	ands	r4, r5
 800f2ec:	3b01      	subs	r3, #1
 800f2ee:	b2e4      	uxtb	r4, r4
 800f2f0:	2b0d      	cmp	r3, #13
 800f2f2:	d809      	bhi.n	800f308 <uxr_serialize_CREATE_Payload+0x44>
 800f2f4:	e8df f003 	tbb	[pc, r3]
 800f2f8:	23230a4c 	.word	0x23230a4c
 800f2fc:	0a0a0a0a 	.word	0x0a0a0a0a
 800f300:	12121208 	.word	0x12121208
 800f304:	3e45      	.short	0x3e45
 800f306:	2400      	movs	r4, #0
 800f308:	4620      	mov	r0, r4
 800f30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f30c:	f106 0108 	add.w	r1, r6, #8
 800f310:	4638      	mov	r0, r7
 800f312:	f7ff fd09 	bl	800ed28 <uxr_serialize_DATAWRITER_Representation>
 800f316:	4004      	ands	r4, r0
 800f318:	4620      	mov	r0, r4
 800f31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f31c:	7a31      	ldrb	r1, [r6, #8]
 800f31e:	4638      	mov	r0, r7
 800f320:	f7f8 fede 	bl	80080e0 <ucdr_serialize_uint8_t>
 800f324:	2800      	cmp	r0, #0
 800f326:	d0ee      	beq.n	800f306 <uxr_serialize_CREATE_Payload+0x42>
 800f328:	7a33      	ldrb	r3, [r6, #8]
 800f32a:	2b01      	cmp	r3, #1
 800f32c:	d001      	beq.n	800f332 <uxr_serialize_CREATE_Payload+0x6e>
 800f32e:	2b02      	cmp	r3, #2
 800f330:	d1ea      	bne.n	800f308 <uxr_serialize_CREATE_Payload+0x44>
 800f332:	68f1      	ldr	r1, [r6, #12]
 800f334:	4638      	mov	r0, r7
 800f336:	f003 fccb 	bl	8012cd0 <ucdr_serialize_string>
 800f33a:	4004      	ands	r4, r0
 800f33c:	e7e4      	b.n	800f308 <uxr_serialize_CREATE_Payload+0x44>
 800f33e:	7a31      	ldrb	r1, [r6, #8]
 800f340:	4638      	mov	r0, r7
 800f342:	f7f8 fecd 	bl	80080e0 <ucdr_serialize_uint8_t>
 800f346:	4605      	mov	r5, r0
 800f348:	b158      	cbz	r0, 800f362 <uxr_serialize_CREATE_Payload+0x9e>
 800f34a:	7a33      	ldrb	r3, [r6, #8]
 800f34c:	2b02      	cmp	r3, #2
 800f34e:	d034      	beq.n	800f3ba <uxr_serialize_CREATE_Payload+0xf6>
 800f350:	2b03      	cmp	r3, #3
 800f352:	d106      	bne.n	800f362 <uxr_serialize_CREATE_Payload+0x9e>
 800f354:	68f2      	ldr	r2, [r6, #12]
 800f356:	f106 0110 	add.w	r1, r6, #16
 800f35a:	4638      	mov	r0, r7
 800f35c:	f003 fc8c 	bl	8012c78 <ucdr_serialize_sequence_uint8_t>
 800f360:	4605      	mov	r5, r0
 800f362:	2202      	movs	r2, #2
 800f364:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800f368:	4638      	mov	r0, r7
 800f36a:	f003 fb8d 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800f36e:	4028      	ands	r0, r5
 800f370:	4004      	ands	r4, r0
 800f372:	e7c9      	b.n	800f308 <uxr_serialize_CREATE_Payload+0x44>
 800f374:	f106 0108 	add.w	r1, r6, #8
 800f378:	4638      	mov	r0, r7
 800f37a:	f7ff fbcf 	bl	800eb1c <uxr_serialize_CLIENT_Representation>
 800f37e:	4004      	ands	r4, r0
 800f380:	e7c2      	b.n	800f308 <uxr_serialize_CREATE_Payload+0x44>
 800f382:	f106 0108 	add.w	r1, r6, #8
 800f386:	4638      	mov	r0, r7
 800f388:	f7ff fc84 	bl	800ec94 <uxr_serialize_AGENT_Representation>
 800f38c:	4004      	ands	r4, r0
 800f38e:	e7bb      	b.n	800f308 <uxr_serialize_CREATE_Payload+0x44>
 800f390:	7a31      	ldrb	r1, [r6, #8]
 800f392:	4638      	mov	r0, r7
 800f394:	f7f8 fea4 	bl	80080e0 <ucdr_serialize_uint8_t>
 800f398:	4605      	mov	r5, r0
 800f39a:	b130      	cbz	r0, 800f3aa <uxr_serialize_CREATE_Payload+0xe6>
 800f39c:	7a33      	ldrb	r3, [r6, #8]
 800f39e:	2b02      	cmp	r3, #2
 800f3a0:	d011      	beq.n	800f3c6 <uxr_serialize_CREATE_Payload+0x102>
 800f3a2:	2b03      	cmp	r3, #3
 800f3a4:	d015      	beq.n	800f3d2 <uxr_serialize_CREATE_Payload+0x10e>
 800f3a6:	2b01      	cmp	r3, #1
 800f3a8:	d00d      	beq.n	800f3c6 <uxr_serialize_CREATE_Payload+0x102>
 800f3aa:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 800f3ae:	4638      	mov	r0, r7
 800f3b0:	f7f9 fbd2 	bl	8008b58 <ucdr_serialize_int16_t>
 800f3b4:	4028      	ands	r0, r5
 800f3b6:	4004      	ands	r4, r0
 800f3b8:	e7a6      	b.n	800f308 <uxr_serialize_CREATE_Payload+0x44>
 800f3ba:	68f1      	ldr	r1, [r6, #12]
 800f3bc:	4638      	mov	r0, r7
 800f3be:	f003 fc87 	bl	8012cd0 <ucdr_serialize_string>
 800f3c2:	4605      	mov	r5, r0
 800f3c4:	e7cd      	b.n	800f362 <uxr_serialize_CREATE_Payload+0x9e>
 800f3c6:	68f1      	ldr	r1, [r6, #12]
 800f3c8:	4638      	mov	r0, r7
 800f3ca:	f003 fc81 	bl	8012cd0 <ucdr_serialize_string>
 800f3ce:	4605      	mov	r5, r0
 800f3d0:	e7eb      	b.n	800f3aa <uxr_serialize_CREATE_Payload+0xe6>
 800f3d2:	68f2      	ldr	r2, [r6, #12]
 800f3d4:	f106 0110 	add.w	r1, r6, #16
 800f3d8:	4638      	mov	r0, r7
 800f3da:	f003 fc4d 	bl	8012c78 <ucdr_serialize_sequence_uint8_t>
 800f3de:	4605      	mov	r5, r0
 800f3e0:	e7e3      	b.n	800f3aa <uxr_serialize_CREATE_Payload+0xe6>
 800f3e2:	bf00      	nop

0800f3e4 <uxr_deserialize_GET_INFO_Payload>:
 800f3e4:	b570      	push	{r4, r5, r6, lr}
 800f3e6:	2202      	movs	r2, #2
 800f3e8:	4605      	mov	r5, r0
 800f3ea:	460e      	mov	r6, r1
 800f3ec:	f003 fbb0 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800f3f0:	2202      	movs	r2, #2
 800f3f2:	4604      	mov	r4, r0
 800f3f4:	4628      	mov	r0, r5
 800f3f6:	18b1      	adds	r1, r6, r2
 800f3f8:	f003 fbaa 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	1d31      	adds	r1, r6, #4
 800f400:	4628      	mov	r0, r5
 800f402:	401c      	ands	r4, r3
 800f404:	f7f9 f9b2 	bl	800876c <ucdr_deserialize_uint32_t>
 800f408:	b2e4      	uxtb	r4, r4
 800f40a:	4020      	ands	r0, r4
 800f40c:	bd70      	pop	{r4, r5, r6, pc}
 800f40e:	bf00      	nop

0800f410 <uxr_serialize_DELETE_Payload>:
 800f410:	b570      	push	{r4, r5, r6, lr}
 800f412:	2202      	movs	r2, #2
 800f414:	4605      	mov	r5, r0
 800f416:	460e      	mov	r6, r1
 800f418:	f003 fb36 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800f41c:	2202      	movs	r2, #2
 800f41e:	4604      	mov	r4, r0
 800f420:	4628      	mov	r0, r5
 800f422:	18b1      	adds	r1, r6, r2
 800f424:	f003 fb30 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800f428:	4020      	ands	r0, r4
 800f42a:	b2c0      	uxtb	r0, r0
 800f42c:	bd70      	pop	{r4, r5, r6, pc}
 800f42e:	bf00      	nop

0800f430 <uxr_deserialize_STATUS_AGENT_Payload>:
 800f430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f434:	460e      	mov	r6, r1
 800f436:	4605      	mov	r5, r0
 800f438:	f7f8 fe68 	bl	800810c <ucdr_deserialize_uint8_t>
 800f43c:	4604      	mov	r4, r0
 800f43e:	1c71      	adds	r1, r6, #1
 800f440:	4628      	mov	r0, r5
 800f442:	f7f8 fe63 	bl	800810c <ucdr_deserialize_uint8_t>
 800f446:	2204      	movs	r2, #4
 800f448:	4681      	mov	r9, r0
 800f44a:	4628      	mov	r0, r5
 800f44c:	18b1      	adds	r1, r6, r2
 800f44e:	f003 fb7f 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800f452:	f106 0108 	add.w	r1, r6, #8
 800f456:	4680      	mov	r8, r0
 800f458:	2202      	movs	r2, #2
 800f45a:	4628      	mov	r0, r5
 800f45c:	f003 fb78 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800f460:	ea04 0309 	and.w	r3, r4, r9
 800f464:	4607      	mov	r7, r0
 800f466:	2202      	movs	r2, #2
 800f468:	b2db      	uxtb	r3, r3
 800f46a:	f106 010a 	add.w	r1, r6, #10
 800f46e:	4628      	mov	r0, r5
 800f470:	ea03 0408 	and.w	r4, r3, r8
 800f474:	f003 fb6c 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800f478:	4603      	mov	r3, r0
 800f47a:	4628      	mov	r0, r5
 800f47c:	403c      	ands	r4, r7
 800f47e:	f106 010c 	add.w	r1, r6, #12
 800f482:	461d      	mov	r5, r3
 800f484:	f7f8 fe14 	bl	80080b0 <ucdr_deserialize_bool>
 800f488:	4025      	ands	r5, r4
 800f48a:	4028      	ands	r0, r5
 800f48c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f490 <uxr_deserialize_STATUS_Payload>:
 800f490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f494:	2202      	movs	r2, #2
 800f496:	4606      	mov	r6, r0
 800f498:	460f      	mov	r7, r1
 800f49a:	f003 fb59 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800f49e:	2202      	movs	r2, #2
 800f4a0:	4605      	mov	r5, r0
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	18b9      	adds	r1, r7, r2
 800f4a6:	f003 fb53 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800f4aa:	4680      	mov	r8, r0
 800f4ac:	1d39      	adds	r1, r7, #4
 800f4ae:	4630      	mov	r0, r6
 800f4b0:	f7f8 fe2c 	bl	800810c <ucdr_deserialize_uint8_t>
 800f4b4:	ea05 0508 	and.w	r5, r5, r8
 800f4b8:	4604      	mov	r4, r0
 800f4ba:	1d79      	adds	r1, r7, #5
 800f4bc:	4630      	mov	r0, r6
 800f4be:	402c      	ands	r4, r5
 800f4c0:	f7f8 fe24 	bl	800810c <ucdr_deserialize_uint8_t>
 800f4c4:	4020      	ands	r0, r4
 800f4c6:	b2c0      	uxtb	r0, r0
 800f4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f4cc <uxr_serialize_INFO_Payload>:
 800f4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4d0:	2202      	movs	r2, #2
 800f4d2:	460c      	mov	r4, r1
 800f4d4:	4605      	mov	r5, r0
 800f4d6:	f003 fad7 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800f4da:	2202      	movs	r2, #2
 800f4dc:	4680      	mov	r8, r0
 800f4de:	4628      	mov	r0, r5
 800f4e0:	18a1      	adds	r1, r4, r2
 800f4e2:	f003 fad1 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800f4e6:	4607      	mov	r7, r0
 800f4e8:	7921      	ldrb	r1, [r4, #4]
 800f4ea:	4628      	mov	r0, r5
 800f4ec:	f7f8 fdf8 	bl	80080e0 <ucdr_serialize_uint8_t>
 800f4f0:	ea08 0807 	and.w	r8, r8, r7
 800f4f4:	4606      	mov	r6, r0
 800f4f6:	7961      	ldrb	r1, [r4, #5]
 800f4f8:	4628      	mov	r0, r5
 800f4fa:	ea06 0608 	and.w	r6, r6, r8
 800f4fe:	f7f8 fdef 	bl	80080e0 <ucdr_serialize_uint8_t>
 800f502:	7a21      	ldrb	r1, [r4, #8]
 800f504:	4030      	ands	r0, r6
 800f506:	b2c7      	uxtb	r7, r0
 800f508:	4628      	mov	r0, r5
 800f50a:	f7f8 fdbb 	bl	8008084 <ucdr_serialize_bool>
 800f50e:	7a23      	ldrb	r3, [r4, #8]
 800f510:	4606      	mov	r6, r0
 800f512:	b96b      	cbnz	r3, 800f530 <uxr_serialize_INFO_Payload+0x64>
 800f514:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800f518:	4628      	mov	r0, r5
 800f51a:	f7f8 fdb3 	bl	8008084 <ucdr_serialize_bool>
 800f51e:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800f522:	4030      	ands	r0, r6
 800f524:	b2c6      	uxtb	r6, r0
 800f526:	b983      	cbnz	r3, 800f54a <uxr_serialize_INFO_Payload+0x7e>
 800f528:	ea06 0007 	and.w	r0, r6, r7
 800f52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f530:	7b21      	ldrb	r1, [r4, #12]
 800f532:	4628      	mov	r0, r5
 800f534:	f7f8 fdd4 	bl	80080e0 <ucdr_serialize_uint8_t>
 800f538:	b188      	cbz	r0, 800f55e <uxr_serialize_INFO_Payload+0x92>
 800f53a:	f104 010c 	add.w	r1, r4, #12
 800f53e:	4628      	mov	r0, r5
 800f540:	f7ff fc1a 	bl	800ed78 <uxr_serialize_ObjectVariant.part.0>
 800f544:	4030      	ands	r0, r6
 800f546:	b2c6      	uxtb	r6, r0
 800f548:	e7e4      	b.n	800f514 <uxr_serialize_INFO_Payload+0x48>
 800f54a:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800f54e:	4628      	mov	r0, r5
 800f550:	f7ff fdb8 	bl	800f0c4 <uxr_serialize_ActivityInfoVariant>
 800f554:	4006      	ands	r6, r0
 800f556:	ea06 0007 	and.w	r0, r6, r7
 800f55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f55e:	4606      	mov	r6, r0
 800f560:	e7d8      	b.n	800f514 <uxr_serialize_INFO_Payload+0x48>
 800f562:	bf00      	nop

0800f564 <uxr_serialize_READ_DATA_Payload>:
 800f564:	b570      	push	{r4, r5, r6, lr}
 800f566:	2202      	movs	r2, #2
 800f568:	4605      	mov	r5, r0
 800f56a:	460e      	mov	r6, r1
 800f56c:	f003 fa8c 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800f570:	2202      	movs	r2, #2
 800f572:	4604      	mov	r4, r0
 800f574:	4628      	mov	r0, r5
 800f576:	18b1      	adds	r1, r6, r2
 800f578:	f003 fa86 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800f57c:	4603      	mov	r3, r0
 800f57e:	1d31      	adds	r1, r6, #4
 800f580:	4628      	mov	r0, r5
 800f582:	401c      	ands	r4, r3
 800f584:	f7ff fe5e 	bl	800f244 <uxr_serialize_ReadSpecification>
 800f588:	b2e4      	uxtb	r4, r4
 800f58a:	4020      	ands	r0, r4
 800f58c:	bd70      	pop	{r4, r5, r6, pc}
 800f58e:	bf00      	nop

0800f590 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800f590:	b570      	push	{r4, r5, r6, lr}
 800f592:	2202      	movs	r2, #2
 800f594:	4605      	mov	r5, r0
 800f596:	460e      	mov	r6, r1
 800f598:	f003 fa76 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800f59c:	2202      	movs	r2, #2
 800f59e:	4604      	mov	r4, r0
 800f5a0:	4628      	mov	r0, r5
 800f5a2:	18b1      	adds	r1, r6, r2
 800f5a4:	f003 fa70 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800f5a8:	4020      	ands	r0, r4
 800f5aa:	b2c0      	uxtb	r0, r0
 800f5ac:	bd70      	pop	{r4, r5, r6, pc}
 800f5ae:	bf00      	nop

0800f5b0 <uxr_serialize_ACKNACK_Payload>:
 800f5b0:	b570      	push	{r4, r5, r6, lr}
 800f5b2:	460c      	mov	r4, r1
 800f5b4:	4605      	mov	r5, r0
 800f5b6:	460e      	mov	r6, r1
 800f5b8:	f834 1b02 	ldrh.w	r1, [r4], #2
 800f5bc:	f7f8 fdbc 	bl	8008138 <ucdr_serialize_uint16_t>
 800f5c0:	2202      	movs	r2, #2
 800f5c2:	4621      	mov	r1, r4
 800f5c4:	4604      	mov	r4, r0
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	f003 fa5e 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	7931      	ldrb	r1, [r6, #4]
 800f5d0:	4628      	mov	r0, r5
 800f5d2:	401c      	ands	r4, r3
 800f5d4:	f7f8 fd84 	bl	80080e0 <ucdr_serialize_uint8_t>
 800f5d8:	b2e4      	uxtb	r4, r4
 800f5da:	4020      	ands	r0, r4
 800f5dc:	bd70      	pop	{r4, r5, r6, pc}
 800f5de:	bf00      	nop

0800f5e0 <uxr_deserialize_ACKNACK_Payload>:
 800f5e0:	b570      	push	{r4, r5, r6, lr}
 800f5e2:	460e      	mov	r6, r1
 800f5e4:	4605      	mov	r5, r0
 800f5e6:	f7f8 fea7 	bl	8008338 <ucdr_deserialize_uint16_t>
 800f5ea:	2202      	movs	r2, #2
 800f5ec:	4604      	mov	r4, r0
 800f5ee:	4628      	mov	r0, r5
 800f5f0:	18b1      	adds	r1, r6, r2
 800f5f2:	f003 faad 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	1d31      	adds	r1, r6, #4
 800f5fa:	4628      	mov	r0, r5
 800f5fc:	401c      	ands	r4, r3
 800f5fe:	f7f8 fd85 	bl	800810c <ucdr_deserialize_uint8_t>
 800f602:	b2e4      	uxtb	r4, r4
 800f604:	4020      	ands	r0, r4
 800f606:	bd70      	pop	{r4, r5, r6, pc}

0800f608 <uxr_serialize_HEARTBEAT_Payload>:
 800f608:	b570      	push	{r4, r5, r6, lr}
 800f60a:	460d      	mov	r5, r1
 800f60c:	4606      	mov	r6, r0
 800f60e:	8809      	ldrh	r1, [r1, #0]
 800f610:	f7f8 fd92 	bl	8008138 <ucdr_serialize_uint16_t>
 800f614:	8869      	ldrh	r1, [r5, #2]
 800f616:	4604      	mov	r4, r0
 800f618:	4630      	mov	r0, r6
 800f61a:	f7f8 fd8d 	bl	8008138 <ucdr_serialize_uint16_t>
 800f61e:	4603      	mov	r3, r0
 800f620:	7929      	ldrb	r1, [r5, #4]
 800f622:	4630      	mov	r0, r6
 800f624:	401c      	ands	r4, r3
 800f626:	f7f8 fd5b 	bl	80080e0 <ucdr_serialize_uint8_t>
 800f62a:	b2e4      	uxtb	r4, r4
 800f62c:	4020      	ands	r0, r4
 800f62e:	bd70      	pop	{r4, r5, r6, pc}

0800f630 <uxr_deserialize_HEARTBEAT_Payload>:
 800f630:	b570      	push	{r4, r5, r6, lr}
 800f632:	460e      	mov	r6, r1
 800f634:	4605      	mov	r5, r0
 800f636:	f7f8 fe7f 	bl	8008338 <ucdr_deserialize_uint16_t>
 800f63a:	4604      	mov	r4, r0
 800f63c:	1cb1      	adds	r1, r6, #2
 800f63e:	4628      	mov	r0, r5
 800f640:	f7f8 fe7a 	bl	8008338 <ucdr_deserialize_uint16_t>
 800f644:	4603      	mov	r3, r0
 800f646:	1d31      	adds	r1, r6, #4
 800f648:	4628      	mov	r0, r5
 800f64a:	401c      	ands	r4, r3
 800f64c:	f7f8 fd5e 	bl	800810c <ucdr_deserialize_uint8_t>
 800f650:	b2e4      	uxtb	r4, r4
 800f652:	4020      	ands	r0, r4
 800f654:	bd70      	pop	{r4, r5, r6, pc}
 800f656:	bf00      	nop

0800f658 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800f658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f65c:	460e      	mov	r6, r1
 800f65e:	4605      	mov	r5, r0
 800f660:	f7f9 fc06 	bl	8008e70 <ucdr_deserialize_int32_t>
 800f664:	4607      	mov	r7, r0
 800f666:	1d31      	adds	r1, r6, #4
 800f668:	4628      	mov	r0, r5
 800f66a:	f7f9 f87f 	bl	800876c <ucdr_deserialize_uint32_t>
 800f66e:	4680      	mov	r8, r0
 800f670:	f106 0108 	add.w	r1, r6, #8
 800f674:	4628      	mov	r0, r5
 800f676:	f7f9 fbfb 	bl	8008e70 <ucdr_deserialize_int32_t>
 800f67a:	ea07 0708 	and.w	r7, r7, r8
 800f67e:	4604      	mov	r4, r0
 800f680:	f106 010c 	add.w	r1, r6, #12
 800f684:	4628      	mov	r0, r5
 800f686:	403c      	ands	r4, r7
 800f688:	f7f9 f870 	bl	800876c <ucdr_deserialize_uint32_t>
 800f68c:	f106 0110 	add.w	r1, r6, #16
 800f690:	4004      	ands	r4, r0
 800f692:	4628      	mov	r0, r5
 800f694:	f7f9 fbec 	bl	8008e70 <ucdr_deserialize_int32_t>
 800f698:	4603      	mov	r3, r0
 800f69a:	b2e4      	uxtb	r4, r4
 800f69c:	4628      	mov	r0, r5
 800f69e:	461d      	mov	r5, r3
 800f6a0:	f106 0114 	add.w	r1, r6, #20
 800f6a4:	f7f9 f862 	bl	800876c <ucdr_deserialize_uint32_t>
 800f6a8:	402c      	ands	r4, r5
 800f6aa:	4020      	ands	r0, r4
 800f6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f6b0 <uxr_serialize_SampleIdentity>:
 800f6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6b4:	4604      	mov	r4, r0
 800f6b6:	460d      	mov	r5, r1
 800f6b8:	220c      	movs	r2, #12
 800f6ba:	f003 f9e5 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800f6be:	2203      	movs	r2, #3
 800f6c0:	f105 010c 	add.w	r1, r5, #12
 800f6c4:	4607      	mov	r7, r0
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	f003 f9de 	bl	8012a88 <ucdr_serialize_array_uint8_t>
 800f6cc:	7be9      	ldrb	r1, [r5, #15]
 800f6ce:	4680      	mov	r8, r0
 800f6d0:	4620      	mov	r0, r4
 800f6d2:	f7f8 fd05 	bl	80080e0 <ucdr_serialize_uint8_t>
 800f6d6:	6929      	ldr	r1, [r5, #16]
 800f6d8:	4606      	mov	r6, r0
 800f6da:	4620      	mov	r0, r4
 800f6dc:	f7f9 fb30 	bl	8008d40 <ucdr_serialize_int32_t>
 800f6e0:	ea07 0708 	and.w	r7, r7, r8
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	403e      	ands	r6, r7
 800f6ea:	6969      	ldr	r1, [r5, #20]
 800f6ec:	461c      	mov	r4, r3
 800f6ee:	f7f8 ff0d 	bl	800850c <ucdr_serialize_uint32_t>
 800f6f2:	4034      	ands	r4, r6
 800f6f4:	4020      	ands	r0, r4
 800f6f6:	b2c0      	uxtb	r0, r0
 800f6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f6fc <uxr_deserialize_SampleIdentity>:
 800f6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f700:	4604      	mov	r4, r0
 800f702:	460d      	mov	r5, r1
 800f704:	220c      	movs	r2, #12
 800f706:	f003 fa23 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800f70a:	2203      	movs	r2, #3
 800f70c:	f105 010c 	add.w	r1, r5, #12
 800f710:	4607      	mov	r7, r0
 800f712:	4620      	mov	r0, r4
 800f714:	f003 fa1c 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 800f718:	f105 010f 	add.w	r1, r5, #15
 800f71c:	4680      	mov	r8, r0
 800f71e:	4620      	mov	r0, r4
 800f720:	f7f8 fcf4 	bl	800810c <ucdr_deserialize_uint8_t>
 800f724:	f105 0110 	add.w	r1, r5, #16
 800f728:	4606      	mov	r6, r0
 800f72a:	4620      	mov	r0, r4
 800f72c:	f7f9 fba0 	bl	8008e70 <ucdr_deserialize_int32_t>
 800f730:	ea07 0708 	and.w	r7, r7, r8
 800f734:	4603      	mov	r3, r0
 800f736:	4620      	mov	r0, r4
 800f738:	403e      	ands	r6, r7
 800f73a:	f105 0114 	add.w	r1, r5, #20
 800f73e:	461c      	mov	r4, r3
 800f740:	f7f9 f814 	bl	800876c <ucdr_deserialize_uint32_t>
 800f744:	4034      	ands	r4, r6
 800f746:	4020      	ands	r0, r4
 800f748:	b2c0      	uxtb	r0, r0
 800f74a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f74e:	bf00      	nop

0800f750 <rcl_client_get_rmw_handle>:
 800f750:	b118      	cbz	r0, 800f75a <rcl_client_get_rmw_handle+0xa>
 800f752:	6800      	ldr	r0, [r0, #0]
 800f754:	b108      	cbz	r0, 800f75a <rcl_client_get_rmw_handle+0xa>
 800f756:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800f75a:	4770      	bx	lr

0800f75c <rcl_send_request>:
 800f75c:	b570      	push	{r4, r5, r6, lr}
 800f75e:	b082      	sub	sp, #8
 800f760:	b1f8      	cbz	r0, 800f7a2 <rcl_send_request+0x46>
 800f762:	4604      	mov	r4, r0
 800f764:	6800      	ldr	r0, [r0, #0]
 800f766:	b1e0      	cbz	r0, 800f7a2 <rcl_send_request+0x46>
 800f768:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800f76c:	b1cb      	cbz	r3, 800f7a2 <rcl_send_request+0x46>
 800f76e:	460e      	mov	r6, r1
 800f770:	b1e1      	cbz	r1, 800f7ac <rcl_send_request+0x50>
 800f772:	4615      	mov	r5, r2
 800f774:	b1d2      	cbz	r2, 800f7ac <rcl_send_request+0x50>
 800f776:	2105      	movs	r1, #5
 800f778:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800f77c:	f002 fa94 	bl	8011ca8 <__atomic_load_8>
 800f780:	4602      	mov	r2, r0
 800f782:	460b      	mov	r3, r1
 800f784:	4631      	mov	r1, r6
 800f786:	e9c5 2300 	strd	r2, r3, [r5]
 800f78a:	6823      	ldr	r3, [r4, #0]
 800f78c:	462a      	mov	r2, r5
 800f78e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800f792:	f7fc f841 	bl	800b818 <rmw_send_request>
 800f796:	4606      	mov	r6, r0
 800f798:	b160      	cbz	r0, 800f7b4 <rcl_send_request+0x58>
 800f79a:	2601      	movs	r6, #1
 800f79c:	4630      	mov	r0, r6
 800f79e:	b002      	add	sp, #8
 800f7a0:	bd70      	pop	{r4, r5, r6, pc}
 800f7a2:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 800f7a6:	4630      	mov	r0, r6
 800f7a8:	b002      	add	sp, #8
 800f7aa:	bd70      	pop	{r4, r5, r6, pc}
 800f7ac:	260b      	movs	r6, #11
 800f7ae:	4630      	mov	r0, r6
 800f7b0:	b002      	add	sp, #8
 800f7b2:	bd70      	pop	{r4, r5, r6, pc}
 800f7b4:	6820      	ldr	r0, [r4, #0]
 800f7b6:	2105      	movs	r1, #5
 800f7b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f7bc:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800f7c0:	9100      	str	r1, [sp, #0]
 800f7c2:	f002 fadd 	bl	8011d80 <__atomic_exchange_8>
 800f7c6:	4630      	mov	r0, r6
 800f7c8:	b002      	add	sp, #8
 800f7ca:	bd70      	pop	{r4, r5, r6, pc}
 800f7cc:	0000      	movs	r0, r0
	...

0800f7d0 <rcl_take_response>:
 800f7d0:	b570      	push	{r4, r5, r6, lr}
 800f7d2:	468e      	mov	lr, r1
 800f7d4:	b08c      	sub	sp, #48	; 0x30
 800f7d6:	460c      	mov	r4, r1
 800f7d8:	4616      	mov	r6, r2
 800f7da:	f10d 0c18 	add.w	ip, sp, #24
 800f7de:	4605      	mov	r5, r0
 800f7e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f7e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f7e8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f7ec:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f7f0:	b35d      	cbz	r5, 800f84a <rcl_take_response+0x7a>
 800f7f2:	682b      	ldr	r3, [r5, #0]
 800f7f4:	b34b      	cbz	r3, 800f84a <rcl_take_response+0x7a>
 800f7f6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800f7fa:	b330      	cbz	r0, 800f84a <rcl_take_response+0x7a>
 800f7fc:	b346      	cbz	r6, 800f850 <rcl_take_response+0x80>
 800f7fe:	2300      	movs	r3, #0
 800f800:	4632      	mov	r2, r6
 800f802:	a902      	add	r1, sp, #8
 800f804:	f88d 3007 	strb.w	r3, [sp, #7]
 800f808:	f10d 0307 	add.w	r3, sp, #7
 800f80c:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800f858 <rcl_take_response+0x88>
 800f810:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f814:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f818:	f7fc f906 	bl	800ba28 <rmw_take_response>
 800f81c:	4605      	mov	r5, r0
 800f81e:	b9c8      	cbnz	r0, 800f854 <rcl_take_response+0x84>
 800f820:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f824:	f240 13f5 	movw	r3, #501	; 0x1f5
 800f828:	2a00      	cmp	r2, #0
 800f82a:	bf08      	it	eq
 800f82c:	461d      	moveq	r5, r3
 800f82e:	f10d 0e18 	add.w	lr, sp, #24
 800f832:	46a4      	mov	ip, r4
 800f834:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f838:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f83c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f840:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f844:	4628      	mov	r0, r5
 800f846:	b00c      	add	sp, #48	; 0x30
 800f848:	bd70      	pop	{r4, r5, r6, pc}
 800f84a:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 800f84e:	e7ee      	b.n	800f82e <rcl_take_response+0x5e>
 800f850:	250b      	movs	r5, #11
 800f852:	e7ec      	b.n	800f82e <rcl_take_response+0x5e>
 800f854:	2501      	movs	r5, #1
 800f856:	e7ea      	b.n	800f82e <rcl_take_response+0x5e>
	...

0800f860 <rcl_client_is_valid>:
 800f860:	b130      	cbz	r0, 800f870 <rcl_client_is_valid+0x10>
 800f862:	6800      	ldr	r0, [r0, #0]
 800f864:	b120      	cbz	r0, 800f870 <rcl_client_is_valid+0x10>
 800f866:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800f86a:	3800      	subs	r0, #0
 800f86c:	bf18      	it	ne
 800f86e:	2001      	movne	r0, #1
 800f870:	4770      	bx	lr
 800f872:	bf00      	nop

0800f874 <rcl_convert_rmw_ret_to_rcl_ret>:
 800f874:	280b      	cmp	r0, #11
 800f876:	dc0d      	bgt.n	800f894 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800f878:	2800      	cmp	r0, #0
 800f87a:	db09      	blt.n	800f890 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f87c:	280b      	cmp	r0, #11
 800f87e:	d807      	bhi.n	800f890 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f880:	e8df f000 	tbb	[pc, r0]
 800f884:	07060607 	.word	0x07060607
 800f888:	06060606 	.word	0x06060606
 800f88c:	07070606 	.word	0x07070606
 800f890:	2001      	movs	r0, #1
 800f892:	4770      	bx	lr
 800f894:	28cb      	cmp	r0, #203	; 0xcb
 800f896:	bf18      	it	ne
 800f898:	2001      	movne	r0, #1
 800f89a:	4770      	bx	lr

0800f89c <rcl_get_zero_initialized_context>:
 800f89c:	4a03      	ldr	r2, [pc, #12]	; (800f8ac <rcl_get_zero_initialized_context+0x10>)
 800f89e:	4603      	mov	r3, r0
 800f8a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f8a4:	e883 0003 	stmia.w	r3, {r0, r1}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	4770      	bx	lr
 800f8ac:	080162c8 	.word	0x080162c8

0800f8b0 <rcl_context_is_valid>:
 800f8b0:	b118      	cbz	r0, 800f8ba <rcl_context_is_valid+0xa>
 800f8b2:	6840      	ldr	r0, [r0, #4]
 800f8b4:	3800      	subs	r0, #0
 800f8b6:	bf18      	it	ne
 800f8b8:	2001      	movne	r0, #1
 800f8ba:	4770      	bx	lr

0800f8bc <__cleanup_context>:
 800f8bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8c0:	4606      	mov	r6, r0
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	6800      	ldr	r0, [r0, #0]
 800f8c6:	6073      	str	r3, [r6, #4]
 800f8c8:	2800      	cmp	r0, #0
 800f8ca:	d049      	beq.n	800f960 <__cleanup_context+0xa4>
 800f8cc:	6947      	ldr	r7, [r0, #20]
 800f8ce:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800f8d2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800f8d6:	b137      	cbz	r7, 800f8e6 <__cleanup_context+0x2a>
 800f8d8:	3014      	adds	r0, #20
 800f8da:	f7f9 fe1f 	bl	800951c <rcl_init_options_fini>
 800f8de:	4607      	mov	r7, r0
 800f8e0:	2800      	cmp	r0, #0
 800f8e2:	d144      	bne.n	800f96e <__cleanup_context+0xb2>
 800f8e4:	6830      	ldr	r0, [r6, #0]
 800f8e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f8e8:	b143      	cbz	r3, 800f8fc <__cleanup_context+0x40>
 800f8ea:	3028      	adds	r0, #40	; 0x28
 800f8ec:	f7fb fdf8 	bl	800b4e0 <rmw_context_fini>
 800f8f0:	b118      	cbz	r0, 800f8fa <__cleanup_context+0x3e>
 800f8f2:	2f00      	cmp	r7, #0
 800f8f4:	d03e      	beq.n	800f974 <__cleanup_context+0xb8>
 800f8f6:	f7fb f8e3 	bl	800aac0 <rcutils_reset_error>
 800f8fa:	6830      	ldr	r0, [r6, #0]
 800f8fc:	6a03      	ldr	r3, [r0, #32]
 800f8fe:	b1db      	cbz	r3, 800f938 <__cleanup_context+0x7c>
 800f900:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800f904:	2a01      	cmp	r2, #1
 800f906:	f17c 0100 	sbcs.w	r1, ip, #0
 800f90a:	db11      	blt.n	800f930 <__cleanup_context+0x74>
 800f90c:	2400      	movs	r4, #0
 800f90e:	4625      	mov	r5, r4
 800f910:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f914:	4649      	mov	r1, r9
 800f916:	b1b8      	cbz	r0, 800f948 <__cleanup_context+0x8c>
 800f918:	47c0      	blx	r8
 800f91a:	6833      	ldr	r3, [r6, #0]
 800f91c:	3401      	adds	r4, #1
 800f91e:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800f922:	f145 0500 	adc.w	r5, r5, #0
 800f926:	6a1b      	ldr	r3, [r3, #32]
 800f928:	4294      	cmp	r4, r2
 800f92a:	eb75 010c 	sbcs.w	r1, r5, ip
 800f92e:	dbef      	blt.n	800f910 <__cleanup_context+0x54>
 800f930:	4618      	mov	r0, r3
 800f932:	4649      	mov	r1, r9
 800f934:	47c0      	blx	r8
 800f936:	6830      	ldr	r0, [r6, #0]
 800f938:	4649      	mov	r1, r9
 800f93a:	47c0      	blx	r8
 800f93c:	2300      	movs	r3, #0
 800f93e:	4638      	mov	r0, r7
 800f940:	e9c6 3300 	strd	r3, r3, [r6]
 800f944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f948:	3401      	adds	r4, #1
 800f94a:	f145 0500 	adc.w	r5, r5, #0
 800f94e:	4294      	cmp	r4, r2
 800f950:	eb75 010c 	sbcs.w	r1, r5, ip
 800f954:	dbdc      	blt.n	800f910 <__cleanup_context+0x54>
 800f956:	4618      	mov	r0, r3
 800f958:	4649      	mov	r1, r9
 800f95a:	47c0      	blx	r8
 800f95c:	6830      	ldr	r0, [r6, #0]
 800f95e:	e7eb      	b.n	800f938 <__cleanup_context+0x7c>
 800f960:	4607      	mov	r7, r0
 800f962:	2300      	movs	r3, #0
 800f964:	4638      	mov	r0, r7
 800f966:	e9c6 3300 	strd	r3, r3, [r6]
 800f96a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f96e:	f7fb f8a7 	bl	800aac0 <rcutils_reset_error>
 800f972:	e7b7      	b.n	800f8e4 <__cleanup_context+0x28>
 800f974:	f7ff ff7e 	bl	800f874 <rcl_convert_rmw_ret_to_rcl_ret>
 800f978:	4607      	mov	r7, r0
 800f97a:	e7bc      	b.n	800f8f6 <__cleanup_context+0x3a>

0800f97c <rcl_get_zero_initialized_guard_condition>:
 800f97c:	4a03      	ldr	r2, [pc, #12]	; (800f98c <rcl_get_zero_initialized_guard_condition+0x10>)
 800f97e:	4603      	mov	r3, r0
 800f980:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f984:	e883 0003 	stmia.w	r3, {r0, r1}
 800f988:	4618      	mov	r0, r3
 800f98a:	4770      	bx	lr
 800f98c:	080162d0 	.word	0x080162d0

0800f990 <rcl_guard_condition_init_from_rmw>:
 800f990:	b082      	sub	sp, #8
 800f992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f996:	b086      	sub	sp, #24
 800f998:	4604      	mov	r4, r0
 800f99a:	460e      	mov	r6, r1
 800f99c:	4615      	mov	r5, r2
 800f99e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800f9a2:	f10d 0e04 	add.w	lr, sp, #4
 800f9a6:	f84c 3f04 	str.w	r3, [ip, #4]!
 800f9aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f9ae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f9b2:	f8dc 3000 	ldr.w	r3, [ip]
 800f9b6:	a801      	add	r0, sp, #4
 800f9b8:	f8ce 3000 	str.w	r3, [lr]
 800f9bc:	f7fb f842 	bl	800aa44 <rcutils_allocator_is_valid>
 800f9c0:	f080 0301 	eor.w	r3, r0, #1
 800f9c4:	b2db      	uxtb	r3, r3
 800f9c6:	bb3b      	cbnz	r3, 800fa18 <rcl_guard_condition_init_from_rmw+0x88>
 800f9c8:	b334      	cbz	r4, 800fa18 <rcl_guard_condition_init_from_rmw+0x88>
 800f9ca:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f9ce:	f1b8 0f00 	cmp.w	r8, #0
 800f9d2:	d11a      	bne.n	800fa0a <rcl_guard_condition_init_from_rmw+0x7a>
 800f9d4:	b305      	cbz	r5, 800fa18 <rcl_guard_condition_init_from_rmw+0x88>
 800f9d6:	4628      	mov	r0, r5
 800f9d8:	f7ff ff6a 	bl	800f8b0 <rcl_context_is_valid>
 800f9dc:	b1f0      	cbz	r0, 800fa1c <rcl_guard_condition_init_from_rmw+0x8c>
 800f9de:	9b01      	ldr	r3, [sp, #4]
 800f9e0:	201c      	movs	r0, #28
 800f9e2:	9905      	ldr	r1, [sp, #20]
 800f9e4:	4798      	blx	r3
 800f9e6:	4607      	mov	r7, r0
 800f9e8:	6060      	str	r0, [r4, #4]
 800f9ea:	b320      	cbz	r0, 800fa36 <rcl_guard_condition_init_from_rmw+0xa6>
 800f9ec:	b1c6      	cbz	r6, 800fa20 <rcl_guard_condition_init_from_rmw+0x90>
 800f9ee:	6006      	str	r6, [r0, #0]
 800f9f0:	f880 8004 	strb.w	r8, [r0, #4]
 800f9f4:	ac01      	add	r4, sp, #4
 800f9f6:	f107 0c08 	add.w	ip, r7, #8
 800f9fa:	2500      	movs	r5, #0
 800f9fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f9fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa02:	6823      	ldr	r3, [r4, #0]
 800fa04:	f8cc 3000 	str.w	r3, [ip]
 800fa08:	e000      	b.n	800fa0c <rcl_guard_condition_init_from_rmw+0x7c>
 800fa0a:	2564      	movs	r5, #100	; 0x64
 800fa0c:	4628      	mov	r0, r5
 800fa0e:	b006      	add	sp, #24
 800fa10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa14:	b002      	add	sp, #8
 800fa16:	4770      	bx	lr
 800fa18:	250b      	movs	r5, #11
 800fa1a:	e7f7      	b.n	800fa0c <rcl_guard_condition_init_from_rmw+0x7c>
 800fa1c:	2565      	movs	r5, #101	; 0x65
 800fa1e:	e7f5      	b.n	800fa0c <rcl_guard_condition_init_from_rmw+0x7c>
 800fa20:	6828      	ldr	r0, [r5, #0]
 800fa22:	3028      	adds	r0, #40	; 0x28
 800fa24:	f002 fd9a 	bl	801255c <rmw_create_guard_condition>
 800fa28:	6038      	str	r0, [r7, #0]
 800fa2a:	6867      	ldr	r7, [r4, #4]
 800fa2c:	683e      	ldr	r6, [r7, #0]
 800fa2e:	b126      	cbz	r6, 800fa3a <rcl_guard_condition_init_from_rmw+0xaa>
 800fa30:	2301      	movs	r3, #1
 800fa32:	713b      	strb	r3, [r7, #4]
 800fa34:	e7de      	b.n	800f9f4 <rcl_guard_condition_init_from_rmw+0x64>
 800fa36:	250a      	movs	r5, #10
 800fa38:	e7e8      	b.n	800fa0c <rcl_guard_condition_init_from_rmw+0x7c>
 800fa3a:	9b02      	ldr	r3, [sp, #8]
 800fa3c:	4638      	mov	r0, r7
 800fa3e:	9905      	ldr	r1, [sp, #20]
 800fa40:	2501      	movs	r5, #1
 800fa42:	4798      	blx	r3
 800fa44:	6066      	str	r6, [r4, #4]
 800fa46:	e7e1      	b.n	800fa0c <rcl_guard_condition_init_from_rmw+0x7c>

0800fa48 <rcl_guard_condition_fini>:
 800fa48:	b570      	push	{r4, r5, r6, lr}
 800fa4a:	b082      	sub	sp, #8
 800fa4c:	b1f0      	cbz	r0, 800fa8c <rcl_guard_condition_fini+0x44>
 800fa4e:	6843      	ldr	r3, [r0, #4]
 800fa50:	4604      	mov	r4, r0
 800fa52:	b163      	cbz	r3, 800fa6e <rcl_guard_condition_fini+0x26>
 800fa54:	6818      	ldr	r0, [r3, #0]
 800fa56:	68de      	ldr	r6, [r3, #12]
 800fa58:	6999      	ldr	r1, [r3, #24]
 800fa5a:	b160      	cbz	r0, 800fa76 <rcl_guard_condition_fini+0x2e>
 800fa5c:	791d      	ldrb	r5, [r3, #4]
 800fa5e:	b965      	cbnz	r5, 800fa7a <rcl_guard_condition_fini+0x32>
 800fa60:	4618      	mov	r0, r3
 800fa62:	47b0      	blx	r6
 800fa64:	2300      	movs	r3, #0
 800fa66:	4628      	mov	r0, r5
 800fa68:	6063      	str	r3, [r4, #4]
 800fa6a:	b002      	add	sp, #8
 800fa6c:	bd70      	pop	{r4, r5, r6, pc}
 800fa6e:	461d      	mov	r5, r3
 800fa70:	4628      	mov	r0, r5
 800fa72:	b002      	add	sp, #8
 800fa74:	bd70      	pop	{r4, r5, r6, pc}
 800fa76:	4605      	mov	r5, r0
 800fa78:	e7f2      	b.n	800fa60 <rcl_guard_condition_fini+0x18>
 800fa7a:	9101      	str	r1, [sp, #4]
 800fa7c:	f002 fd84 	bl	8012588 <rmw_destroy_guard_condition>
 800fa80:	1e05      	subs	r5, r0, #0
 800fa82:	6863      	ldr	r3, [r4, #4]
 800fa84:	9901      	ldr	r1, [sp, #4]
 800fa86:	bf18      	it	ne
 800fa88:	2501      	movne	r5, #1
 800fa8a:	e7e9      	b.n	800fa60 <rcl_guard_condition_fini+0x18>
 800fa8c:	250b      	movs	r5, #11
 800fa8e:	4628      	mov	r0, r5
 800fa90:	b002      	add	sp, #8
 800fa92:	bd70      	pop	{r4, r5, r6, pc}

0800fa94 <rcl_guard_condition_get_default_options>:
 800fa94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa96:	b087      	sub	sp, #28
 800fa98:	4606      	mov	r6, r0
 800fa9a:	4c0b      	ldr	r4, [pc, #44]	; (800fac8 <rcl_guard_condition_get_default_options+0x34>)
 800fa9c:	4668      	mov	r0, sp
 800fa9e:	f7fa ffc3 	bl	800aa28 <rcutils_get_default_allocator>
 800faa2:	46ee      	mov	lr, sp
 800faa4:	46a4      	mov	ip, r4
 800faa6:	4625      	mov	r5, r4
 800faa8:	4634      	mov	r4, r6
 800faaa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800faae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fab4:	f8de 7000 	ldr.w	r7, [lr]
 800fab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800faba:	4630      	mov	r0, r6
 800fabc:	f8cc 7000 	str.w	r7, [ip]
 800fac0:	6027      	str	r7, [r4, #0]
 800fac2:	b007      	add	sp, #28
 800fac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fac6:	bf00      	nop
 800fac8:	20010e30 	.word	0x20010e30

0800facc <rcl_guard_condition_get_rmw_handle>:
 800facc:	b110      	cbz	r0, 800fad4 <rcl_guard_condition_get_rmw_handle+0x8>
 800face:	6840      	ldr	r0, [r0, #4]
 800fad0:	b100      	cbz	r0, 800fad4 <rcl_guard_condition_get_rmw_handle+0x8>
 800fad2:	6800      	ldr	r0, [r0, #0]
 800fad4:	4770      	bx	lr
 800fad6:	bf00      	nop

0800fad8 <rcl_init>:
 800fad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fadc:	1e05      	subs	r5, r0, #0
 800fade:	b09e      	sub	sp, #120	; 0x78
 800fae0:	460e      	mov	r6, r1
 800fae2:	4690      	mov	r8, r2
 800fae4:	461f      	mov	r7, r3
 800fae6:	f340 809f 	ble.w	800fc28 <rcl_init+0x150>
 800faea:	2900      	cmp	r1, #0
 800faec:	f000 809f 	beq.w	800fc2e <rcl_init+0x156>
 800faf0:	f1a1 0e04 	sub.w	lr, r1, #4
 800faf4:	f04f 0c00 	mov.w	ip, #0
 800faf8:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800fafc:	f10c 0c01 	add.w	ip, ip, #1
 800fb00:	2c00      	cmp	r4, #0
 800fb02:	f000 8094 	beq.w	800fc2e <rcl_init+0x156>
 800fb06:	4565      	cmp	r5, ip
 800fb08:	d1f6      	bne.n	800faf8 <rcl_init+0x20>
 800fb0a:	f1b8 0f00 	cmp.w	r8, #0
 800fb0e:	f000 808e 	beq.w	800fc2e <rcl_init+0x156>
 800fb12:	f8d8 4000 	ldr.w	r4, [r8]
 800fb16:	2c00      	cmp	r4, #0
 800fb18:	f000 8089 	beq.w	800fc2e <rcl_init+0x156>
 800fb1c:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800fb20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fb22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb26:	6823      	ldr	r3, [r4, #0]
 800fb28:	a819      	add	r0, sp, #100	; 0x64
 800fb2a:	f8cc 3000 	str.w	r3, [ip]
 800fb2e:	f7fa ff89 	bl	800aa44 <rcutils_allocator_is_valid>
 800fb32:	f080 0001 	eor.w	r0, r0, #1
 800fb36:	b2c0      	uxtb	r0, r0
 800fb38:	2800      	cmp	r0, #0
 800fb3a:	d178      	bne.n	800fc2e <rcl_init+0x156>
 800fb3c:	2f00      	cmp	r7, #0
 800fb3e:	d076      	beq.n	800fc2e <rcl_init+0x156>
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d178      	bne.n	800fc38 <rcl_init+0x160>
 800fb46:	2178      	movs	r1, #120	; 0x78
 800fb48:	2001      	movs	r0, #1
 800fb4a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800fb4e:	4798      	blx	r3
 800fb50:	4604      	mov	r4, r0
 800fb52:	6038      	str	r0, [r7, #0]
 800fb54:	2800      	cmp	r0, #0
 800fb56:	f000 80b6 	beq.w	800fcc6 <rcl_init+0x1ee>
 800fb5a:	a802      	add	r0, sp, #8
 800fb5c:	f002 fa88 	bl	8012070 <rmw_get_zero_initialized_context>
 800fb60:	a902      	add	r1, sp, #8
 800fb62:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800fb66:	2250      	movs	r2, #80	; 0x50
 800fb68:	f004 ff43 	bl	80149f2 <memcpy>
 800fb6c:	ac19      	add	r4, sp, #100	; 0x64
 800fb6e:	f8d7 e000 	ldr.w	lr, [r7]
 800fb72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fb74:	46f4      	mov	ip, lr
 800fb76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb7a:	6823      	ldr	r3, [r4, #0]
 800fb7c:	f10e 0114 	add.w	r1, lr, #20
 800fb80:	4640      	mov	r0, r8
 800fb82:	f8cc 3000 	str.w	r3, [ip]
 800fb86:	f7f9 fcf3 	bl	8009570 <rcl_init_options_copy>
 800fb8a:	4604      	mov	r4, r0
 800fb8c:	2800      	cmp	r0, #0
 800fb8e:	d144      	bne.n	800fc1a <rcl_init+0x142>
 800fb90:	f8d7 9000 	ldr.w	r9, [r7]
 800fb94:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800fb98:	f8c9 0020 	str.w	r0, [r9, #32]
 800fb9c:	f8c9 5018 	str.w	r5, [r9, #24]
 800fba0:	f8c9 801c 	str.w	r8, [r9, #28]
 800fba4:	2d00      	cmp	r5, #0
 800fba6:	d04e      	beq.n	800fc46 <rcl_init+0x16e>
 800fba8:	2e00      	cmp	r6, #0
 800fbaa:	d04c      	beq.n	800fc46 <rcl_init+0x16e>
 800fbac:	2104      	movs	r1, #4
 800fbae:	4628      	mov	r0, r5
 800fbb0:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800fbb4:	4798      	blx	r3
 800fbb6:	f8c9 0020 	str.w	r0, [r9, #32]
 800fbba:	f8d7 9000 	ldr.w	r9, [r7]
 800fbbe:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800fbc2:	46ca      	mov	sl, r9
 800fbc4:	b343      	cbz	r3, 800fc18 <rcl_init+0x140>
 800fbc6:	2d01      	cmp	r5, #1
 800fbc8:	f178 0300 	sbcs.w	r3, r8, #0
 800fbcc:	db3b      	blt.n	800fc46 <rcl_init+0x16e>
 800fbce:	2400      	movs	r4, #0
 800fbd0:	3e04      	subs	r6, #4
 800fbd2:	46a1      	mov	r9, r4
 800fbd4:	e00b      	b.n	800fbee <rcl_init+0x116>
 800fbd6:	6831      	ldr	r1, [r6, #0]
 800fbd8:	f004 ff0b 	bl	80149f2 <memcpy>
 800fbdc:	3401      	adds	r4, #1
 800fbde:	f149 0900 	adc.w	r9, r9, #0
 800fbe2:	45c8      	cmp	r8, r9
 800fbe4:	bf08      	it	eq
 800fbe6:	42a5      	cmpeq	r5, r4
 800fbe8:	d02b      	beq.n	800fc42 <rcl_init+0x16a>
 800fbea:	f8d7 a000 	ldr.w	sl, [r7]
 800fbee:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800fbf2:	f7f0 fb2f 	bl	8000254 <strlen>
 800fbf6:	1c42      	adds	r2, r0, #1
 800fbf8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fbfa:	4610      	mov	r0, r2
 800fbfc:	991d      	ldr	r1, [sp, #116]	; 0x74
 800fbfe:	f8da a020 	ldr.w	sl, [sl, #32]
 800fc02:	9201      	str	r2, [sp, #4]
 800fc04:	4798      	blx	r3
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800fc0c:	6a1b      	ldr	r3, [r3, #32]
 800fc0e:	9a01      	ldr	r2, [sp, #4]
 800fc10:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fc14:	2800      	cmp	r0, #0
 800fc16:	d1de      	bne.n	800fbd6 <rcl_init+0xfe>
 800fc18:	240a      	movs	r4, #10
 800fc1a:	4638      	mov	r0, r7
 800fc1c:	f7ff fe4e 	bl	800f8bc <__cleanup_context>
 800fc20:	4620      	mov	r0, r4
 800fc22:	b01e      	add	sp, #120	; 0x78
 800fc24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc28:	2900      	cmp	r1, #0
 800fc2a:	f43f af6e 	beq.w	800fb0a <rcl_init+0x32>
 800fc2e:	240b      	movs	r4, #11
 800fc30:	4620      	mov	r0, r4
 800fc32:	b01e      	add	sp, #120	; 0x78
 800fc34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc38:	2464      	movs	r4, #100	; 0x64
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	b01e      	add	sp, #120	; 0x78
 800fc3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc42:	f8d7 9000 	ldr.w	r9, [r7]
 800fc46:	4926      	ldr	r1, [pc, #152]	; (800fce0 <rcl_init+0x208>)
 800fc48:	680b      	ldr	r3, [r1, #0]
 800fc4a:	3301      	adds	r3, #1
 800fc4c:	d036      	beq.n	800fcbc <rcl_init+0x1e4>
 800fc4e:	461a      	mov	r2, r3
 800fc50:	2400      	movs	r4, #0
 800fc52:	600b      	str	r3, [r1, #0]
 800fc54:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800fc58:	607b      	str	r3, [r7, #4]
 800fc5a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800fc62:	d034      	beq.n	800fcce <rcl_init+0x1f6>
 800fc64:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800fc68:	b93b      	cbnz	r3, 800fc7a <rcl_init+0x1a2>
 800fc6a:	3030      	adds	r0, #48	; 0x30
 800fc6c:	f000 f83a 	bl	800fce4 <rcl_get_localhost_only>
 800fc70:	4604      	mov	r4, r0
 800fc72:	2800      	cmp	r0, #0
 800fc74:	d1d1      	bne.n	800fc1a <rcl_init+0x142>
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	6958      	ldr	r0, [r3, #20]
 800fc7a:	aa18      	add	r2, sp, #96	; 0x60
 800fc7c:	a917      	add	r1, sp, #92	; 0x5c
 800fc7e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800fc80:	f000 fc9e 	bl	80105c0 <rcl_validate_enclave_name>
 800fc84:	4604      	mov	r4, r0
 800fc86:	2800      	cmp	r0, #0
 800fc88:	d1c7      	bne.n	800fc1a <rcl_init+0x142>
 800fc8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc8c:	b9eb      	cbnz	r3, 800fcca <rcl_init+0x1f2>
 800fc8e:	6839      	ldr	r1, [r7, #0]
 800fc90:	694b      	ldr	r3, [r1, #20]
 800fc92:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800fc96:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800fc98:	f000 f9c8 	bl	801002c <rcl_get_security_options_from_environment>
 800fc9c:	4604      	mov	r4, r0
 800fc9e:	2800      	cmp	r0, #0
 800fca0:	d1bb      	bne.n	800fc1a <rcl_init+0x142>
 800fca2:	6839      	ldr	r1, [r7, #0]
 800fca4:	6948      	ldr	r0, [r1, #20]
 800fca6:	3128      	adds	r1, #40	; 0x28
 800fca8:	3018      	adds	r0, #24
 800fcaa:	f7fb fae3 	bl	800b274 <rmw_init>
 800fcae:	4604      	mov	r4, r0
 800fcb0:	2800      	cmp	r0, #0
 800fcb2:	d0bd      	beq.n	800fc30 <rcl_init+0x158>
 800fcb4:	f7ff fdde 	bl	800f874 <rcl_convert_rmw_ret_to_rcl_ret>
 800fcb8:	4604      	mov	r4, r0
 800fcba:	e7ae      	b.n	800fc1a <rcl_init+0x142>
 800fcbc:	2201      	movs	r2, #1
 800fcbe:	461c      	mov	r4, r3
 800fcc0:	600a      	str	r2, [r1, #0]
 800fcc2:	4613      	mov	r3, r2
 800fcc4:	e7c6      	b.n	800fc54 <rcl_init+0x17c>
 800fcc6:	240a      	movs	r4, #10
 800fcc8:	e7b2      	b.n	800fc30 <rcl_init+0x158>
 800fcca:	2401      	movs	r4, #1
 800fccc:	e7a5      	b.n	800fc1a <rcl_init+0x142>
 800fcce:	3024      	adds	r0, #36	; 0x24
 800fcd0:	f003 fd60 	bl	8013794 <rcl_get_default_domain_id>
 800fcd4:	4604      	mov	r4, r0
 800fcd6:	2800      	cmp	r0, #0
 800fcd8:	d19f      	bne.n	800fc1a <rcl_init+0x142>
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	6958      	ldr	r0, [r3, #20]
 800fcde:	e7c1      	b.n	800fc64 <rcl_init+0x18c>
 800fce0:	20010e44 	.word	0x20010e44

0800fce4 <rcl_get_localhost_only>:
 800fce4:	b510      	push	{r4, lr}
 800fce6:	2300      	movs	r3, #0
 800fce8:	b082      	sub	sp, #8
 800fcea:	9301      	str	r3, [sp, #4]
 800fcec:	b1b8      	cbz	r0, 800fd1e <rcl_get_localhost_only+0x3a>
 800fcee:	4604      	mov	r4, r0
 800fcf0:	a901      	add	r1, sp, #4
 800fcf2:	480c      	ldr	r0, [pc, #48]	; (800fd24 <rcl_get_localhost_only+0x40>)
 800fcf4:	f7fa feb4 	bl	800aa60 <rcutils_get_env>
 800fcf8:	b110      	cbz	r0, 800fd00 <rcl_get_localhost_only+0x1c>
 800fcfa:	2001      	movs	r0, #1
 800fcfc:	b002      	add	sp, #8
 800fcfe:	bd10      	pop	{r4, pc}
 800fd00:	9b01      	ldr	r3, [sp, #4]
 800fd02:	b113      	cbz	r3, 800fd0a <rcl_get_localhost_only+0x26>
 800fd04:	781a      	ldrb	r2, [r3, #0]
 800fd06:	2a31      	cmp	r2, #49	; 0x31
 800fd08:	d004      	beq.n	800fd14 <rcl_get_localhost_only+0x30>
 800fd0a:	2302      	movs	r3, #2
 800fd0c:	2000      	movs	r0, #0
 800fd0e:	7023      	strb	r3, [r4, #0]
 800fd10:	b002      	add	sp, #8
 800fd12:	bd10      	pop	{r4, pc}
 800fd14:	785b      	ldrb	r3, [r3, #1]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d1f7      	bne.n	800fd0a <rcl_get_localhost_only+0x26>
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	e7f6      	b.n	800fd0c <rcl_get_localhost_only+0x28>
 800fd1e:	200b      	movs	r0, #11
 800fd20:	b002      	add	sp, #8
 800fd22:	bd10      	pop	{r4, pc}
 800fd24:	080162d8 	.word	0x080162d8

0800fd28 <rcl_node_resolve_name>:
 800fd28:	b082      	sub	sp, #8
 800fd2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd2e:	b091      	sub	sp, #68	; 0x44
 800fd30:	ac1a      	add	r4, sp, #104	; 0x68
 800fd32:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 800fd36:	e884 000c 	stmia.w	r4, {r2, r3}
 800fd3a:	2800      	cmp	r0, #0
 800fd3c:	d03d      	beq.n	800fdba <rcl_node_resolve_name+0x92>
 800fd3e:	460c      	mov	r4, r1
 800fd40:	4605      	mov	r5, r0
 800fd42:	f7f9 fdf7 	bl	8009934 <rcl_node_get_options>
 800fd46:	2800      	cmp	r0, #0
 800fd48:	d03a      	beq.n	800fdc0 <rcl_node_resolve_name+0x98>
 800fd4a:	4628      	mov	r0, r5
 800fd4c:	f7f9 fde2 	bl	8009914 <rcl_node_get_name>
 800fd50:	4606      	mov	r6, r0
 800fd52:	4628      	mov	r0, r5
 800fd54:	ad0b      	add	r5, sp, #44	; 0x2c
 800fd56:	f7f9 fde5 	bl	8009924 <rcl_node_get_namespace>
 800fd5a:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800fd5e:	4607      	mov	r7, r0
 800fd60:	46ac      	mov	ip, r5
 800fd62:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fd66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd6a:	f8de 3000 	ldr.w	r3, [lr]
 800fd6e:	f8cc 3000 	str.w	r3, [ip]
 800fd72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd74:	b30b      	cbz	r3, 800fdba <rcl_node_resolve_name+0x92>
 800fd76:	4689      	mov	r9, r1
 800fd78:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800fd7c:	f002 f848 	bl	8011e10 <rcutils_get_zero_initialized_string_map>
 800fd80:	ab10      	add	r3, sp, #64	; 0x40
 800fd82:	9008      	str	r0, [sp, #32]
 800fd84:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800fd88:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fd8c:	2100      	movs	r1, #0
 800fd8e:	a808      	add	r0, sp, #32
 800fd90:	e895 000c 	ldmia.w	r5, {r2, r3}
 800fd94:	f002 f8b2 	bl	8011efc <rcutils_string_map_init>
 800fd98:	4683      	mov	fp, r0
 800fd9a:	b1a0      	cbz	r0, 800fdc6 <rcl_node_resolve_name+0x9e>
 800fd9c:	f7fa fe78 	bl	800aa90 <rcutils_get_error_string>
 800fda0:	f7fa fe8e 	bl	800aac0 <rcutils_reset_error>
 800fda4:	f1bb 0f0a 	cmp.w	fp, #10
 800fda8:	bf18      	it	ne
 800fdaa:	f04f 0b01 	movne.w	fp, #1
 800fdae:	4658      	mov	r0, fp
 800fdb0:	b011      	add	sp, #68	; 0x44
 800fdb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdb6:	b002      	add	sp, #8
 800fdb8:	4770      	bx	lr
 800fdba:	f04f 0b0b 	mov.w	fp, #11
 800fdbe:	e7f6      	b.n	800fdae <rcl_node_resolve_name+0x86>
 800fdc0:	f04f 0b01 	mov.w	fp, #1
 800fdc4:	e7f3      	b.n	800fdae <rcl_node_resolve_name+0x86>
 800fdc6:	9009      	str	r0, [sp, #36]	; 0x24
 800fdc8:	9007      	str	r0, [sp, #28]
 800fdca:	a808      	add	r0, sp, #32
 800fdcc:	f003 fe76 	bl	8013abc <rcl_get_default_topic_name_substitutions>
 800fdd0:	4683      	mov	fp, r0
 800fdd2:	b180      	cbz	r0, 800fdf6 <rcl_node_resolve_name+0xce>
 800fdd4:	280a      	cmp	r0, #10
 800fdd6:	a808      	add	r0, sp, #32
 800fdd8:	bf18      	it	ne
 800fdda:	f04f 0b01 	movne.w	fp, #1
 800fdde:	f002 f8cd 	bl	8011f7c <rcutils_string_map_fini>
 800fde2:	4604      	mov	r4, r0
 800fde4:	2800      	cmp	r0, #0
 800fde6:	d15b      	bne.n	800fea0 <rcl_node_resolve_name+0x178>
 800fde8:	4651      	mov	r1, sl
 800fdea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fdec:	47c8      	blx	r9
 800fdee:	4651      	mov	r1, sl
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	47c8      	blx	r9
 800fdf4:	e7db      	b.n	800fdae <rcl_node_resolve_name+0x86>
 800fdf6:	ab09      	add	r3, sp, #36	; 0x24
 800fdf8:	46ec      	mov	ip, sp
 800fdfa:	9305      	str	r3, [sp, #20]
 800fdfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fdfe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fe02:	682b      	ldr	r3, [r5, #0]
 800fe04:	463a      	mov	r2, r7
 800fe06:	4631      	mov	r1, r6
 800fe08:	4620      	mov	r0, r4
 800fe0a:	f8cc 3000 	str.w	r3, [ip]
 800fe0e:	ab08      	add	r3, sp, #32
 800fe10:	f003 fcf4 	bl	80137fc <rcl_expand_topic_name>
 800fe14:	4683      	mov	fp, r0
 800fe16:	b9d8      	cbnz	r0, 800fe50 <rcl_node_resolve_name+0x128>
 800fe18:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fe1a:	4602      	mov	r2, r0
 800fe1c:	9009      	str	r0, [sp, #36]	; 0x24
 800fe1e:	a90a      	add	r1, sp, #40	; 0x28
 800fe20:	4620      	mov	r0, r4
 800fe22:	f002 f9c9 	bl	80121b8 <rmw_validate_full_topic_name>
 800fe26:	bb50      	cbnz	r0, 800fe7e <rcl_node_resolve_name+0x156>
 800fe28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800fe2a:	2d00      	cmp	r5, #0
 800fe2c:	d140      	bne.n	800feb0 <rcl_node_resolve_name+0x188>
 800fe2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe30:	a808      	add	r0, sp, #32
 800fe32:	601c      	str	r4, [r3, #0]
 800fe34:	f002 f8a2 	bl	8011f7c <rcutils_string_map_fini>
 800fe38:	4683      	mov	fp, r0
 800fe3a:	2800      	cmp	r0, #0
 800fe3c:	d043      	beq.n	800fec6 <rcl_node_resolve_name+0x19e>
 800fe3e:	f7fa fe27 	bl	800aa90 <rcutils_get_error_string>
 800fe42:	46a8      	mov	r8, r5
 800fe44:	f04f 0b01 	mov.w	fp, #1
 800fe48:	462c      	mov	r4, r5
 800fe4a:	f7fa fe39 	bl	800aac0 <rcutils_reset_error>
 800fe4e:	e00a      	b.n	800fe66 <rcl_node_resolve_name+0x13e>
 800fe50:	2867      	cmp	r0, #103	; 0x67
 800fe52:	bf14      	ite	ne
 800fe54:	f04f 0800 	movne.w	r8, #0
 800fe58:	f008 0801 	andeq.w	r8, r8, #1
 800fe5c:	9c07      	ldr	r4, [sp, #28]
 800fe5e:	a808      	add	r0, sp, #32
 800fe60:	f002 f88c 	bl	8011f7c <rcutils_string_map_fini>
 800fe64:	bb50      	cbnz	r0, 800febc <rcl_node_resolve_name+0x194>
 800fe66:	4651      	mov	r1, sl
 800fe68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe6a:	47c8      	blx	r9
 800fe6c:	4651      	mov	r1, sl
 800fe6e:	4620      	mov	r0, r4
 800fe70:	47c8      	blx	r9
 800fe72:	f1b8 0f00 	cmp.w	r8, #0
 800fe76:	bf18      	it	ne
 800fe78:	f04f 0b68 	movne.w	fp, #104	; 0x68
 800fe7c:	e797      	b.n	800fdae <rcl_node_resolve_name+0x86>
 800fe7e:	f7fa fe07 	bl	800aa90 <rcutils_get_error_string>
 800fe82:	f7fa fe1d 	bl	800aac0 <rcutils_reset_error>
 800fe86:	a808      	add	r0, sp, #32
 800fe88:	f002 f878 	bl	8011f7c <rcutils_string_map_fini>
 800fe8c:	b998      	cbnz	r0, 800feb6 <rcl_node_resolve_name+0x18e>
 800fe8e:	4651      	mov	r1, sl
 800fe90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe92:	47c8      	blx	r9
 800fe94:	4651      	mov	r1, sl
 800fe96:	4620      	mov	r0, r4
 800fe98:	f04f 0b01 	mov.w	fp, #1
 800fe9c:	47c8      	blx	r9
 800fe9e:	e786      	b.n	800fdae <rcl_node_resolve_name+0x86>
 800fea0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800fea4:	f7fa fdf4 	bl	800aa90 <rcutils_get_error_string>
 800fea8:	f7fa fe0a 	bl	800aac0 <rcutils_reset_error>
 800feac:	4644      	mov	r4, r8
 800feae:	e7da      	b.n	800fe66 <rcl_node_resolve_name+0x13e>
 800feb0:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800feb4:	e7d3      	b.n	800fe5e <rcl_node_resolve_name+0x136>
 800feb6:	46d8      	mov	r8, fp
 800feb8:	f04f 0b01 	mov.w	fp, #1
 800febc:	f7fa fde8 	bl	800aa90 <rcutils_get_error_string>
 800fec0:	f7fa fdfe 	bl	800aac0 <rcutils_reset_error>
 800fec4:	e7cf      	b.n	800fe66 <rcl_node_resolve_name+0x13e>
 800fec6:	4651      	mov	r1, sl
 800fec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800feca:	47c8      	blx	r9
 800fecc:	4651      	mov	r1, sl
 800fece:	4658      	mov	r0, fp
 800fed0:	47c8      	blx	r9
 800fed2:	e76c      	b.n	800fdae <rcl_node_resolve_name+0x86>

0800fed4 <exact_match_lookup>:
 800fed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fed6:	f102 0708 	add.w	r7, r2, #8
 800feda:	460b      	mov	r3, r1
 800fedc:	b085      	sub	sp, #20
 800fede:	4614      	mov	r4, r2
 800fee0:	4606      	mov	r6, r0
 800fee2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800fee6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800feea:	4618      	mov	r0, r3
 800feec:	4919      	ldr	r1, [pc, #100]	; (800ff54 <exact_match_lookup+0x80>)
 800feee:	e894 000c 	ldmia.w	r4, {r2, r3}
 800fef2:	f001 ff7f 	bl	8011df4 <rcutils_join_path>
 800fef6:	7833      	ldrb	r3, [r6, #0]
 800fef8:	4605      	mov	r5, r0
 800fefa:	2b2f      	cmp	r3, #47	; 0x2f
 800fefc:	d023      	beq.n	800ff46 <exact_match_lookup+0x72>
 800fefe:	f104 030c 	add.w	r3, r4, #12
 800ff02:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ff06:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ff0a:	1c70      	adds	r0, r6, #1
 800ff0c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ff10:	f001 ff76 	bl	8011e00 <rcutils_to_native_path>
 800ff14:	4606      	mov	r6, r0
 800ff16:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800ff1a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ff1e:	4631      	mov	r1, r6
 800ff20:	4628      	mov	r0, r5
 800ff22:	e894 000c 	ldmia.w	r4, {r2, r3}
 800ff26:	f001 ff65 	bl	8011df4 <rcutils_join_path>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	4630      	mov	r0, r6
 800ff2e:	6862      	ldr	r2, [r4, #4]
 800ff30:	461e      	mov	r6, r3
 800ff32:	6921      	ldr	r1, [r4, #16]
 800ff34:	4790      	blx	r2
 800ff36:	4628      	mov	r0, r5
 800ff38:	4635      	mov	r5, r6
 800ff3a:	6863      	ldr	r3, [r4, #4]
 800ff3c:	6921      	ldr	r1, [r4, #16]
 800ff3e:	4798      	blx	r3
 800ff40:	4628      	mov	r0, r5
 800ff42:	b005      	add	sp, #20
 800ff44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff46:	7873      	ldrb	r3, [r6, #1]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d1d8      	bne.n	800fefe <exact_match_lookup+0x2a>
 800ff4c:	4628      	mov	r0, r5
 800ff4e:	b005      	add	sp, #20
 800ff50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff52:	bf00      	nop
 800ff54:	08016328 	.word	0x08016328

0800ff58 <rcl_get_secure_root>:
 800ff58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff5c:	b085      	sub	sp, #20
 800ff5e:	b168      	cbz	r0, 800ff7c <rcl_get_secure_root+0x24>
 800ff60:	4607      	mov	r7, r0
 800ff62:	4608      	mov	r0, r1
 800ff64:	460c      	mov	r4, r1
 800ff66:	f7fa fd6d 	bl	800aa44 <rcutils_allocator_is_valid>
 800ff6a:	b138      	cbz	r0, 800ff7c <rcl_get_secure_root+0x24>
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	482d      	ldr	r0, [pc, #180]	; (8010024 <rcl_get_secure_root+0xcc>)
 800ff70:	a903      	add	r1, sp, #12
 800ff72:	9303      	str	r3, [sp, #12]
 800ff74:	f7fa fd74 	bl	800aa60 <rcutils_get_env>
 800ff78:	4605      	mov	r5, r0
 800ff7a:	b120      	cbz	r0, 800ff86 <rcl_get_secure_root+0x2e>
 800ff7c:	2500      	movs	r5, #0
 800ff7e:	4628      	mov	r0, r5
 800ff80:	b005      	add	sp, #20
 800ff82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff86:	9b03      	ldr	r3, [sp, #12]
 800ff88:	781a      	ldrb	r2, [r3, #0]
 800ff8a:	2a00      	cmp	r2, #0
 800ff8c:	d0f6      	beq.n	800ff7c <rcl_get_secure_root+0x24>
 800ff8e:	f104 090c 	add.w	r9, r4, #12
 800ff92:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ff96:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ffa0:	f7fa fee4 	bl	800ad6c <rcutils_strdup>
 800ffa4:	4680      	mov	r8, r0
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	d0e8      	beq.n	800ff7c <rcl_get_secure_root+0x24>
 800ffaa:	a903      	add	r1, sp, #12
 800ffac:	481e      	ldr	r0, [pc, #120]	; (8010028 <rcl_get_secure_root+0xd0>)
 800ffae:	9503      	str	r5, [sp, #12]
 800ffb0:	f7fa fd56 	bl	800aa60 <rcutils_get_env>
 800ffb4:	b160      	cbz	r0, 800ffd0 <rcl_get_secure_root+0x78>
 800ffb6:	2600      	movs	r6, #0
 800ffb8:	4630      	mov	r0, r6
 800ffba:	6863      	ldr	r3, [r4, #4]
 800ffbc:	6921      	ldr	r1, [r4, #16]
 800ffbe:	4798      	blx	r3
 800ffc0:	4640      	mov	r0, r8
 800ffc2:	6863      	ldr	r3, [r4, #4]
 800ffc4:	6921      	ldr	r1, [r4, #16]
 800ffc6:	4798      	blx	r3
 800ffc8:	4628      	mov	r0, r5
 800ffca:	b005      	add	sp, #20
 800ffcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffd0:	9b03      	ldr	r3, [sp, #12]
 800ffd2:	781e      	ldrb	r6, [r3, #0]
 800ffd4:	b1f6      	cbz	r6, 8010014 <rcl_get_secure_root+0xbc>
 800ffd6:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ffda:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ffe4:	f7fa fec2 	bl	800ad6c <rcutils_strdup>
 800ffe8:	4606      	mov	r6, r0
 800ffea:	2800      	cmp	r0, #0
 800ffec:	d0e3      	beq.n	800ffb6 <rcl_get_secure_root+0x5e>
 800ffee:	4622      	mov	r2, r4
 800fff0:	4641      	mov	r1, r8
 800fff2:	f7ff ff6f 	bl	800fed4 <exact_match_lookup>
 800fff6:	4605      	mov	r5, r0
 800fff8:	2d00      	cmp	r5, #0
 800fffa:	d0dd      	beq.n	800ffb8 <rcl_get_secure_root+0x60>
 800fffc:	4628      	mov	r0, r5
 800fffe:	f001 fef7 	bl	8011df0 <rcutils_is_directory>
 8010002:	4603      	mov	r3, r0
 8010004:	2800      	cmp	r0, #0
 8010006:	d1d7      	bne.n	800ffb8 <rcl_get_secure_root+0x60>
 8010008:	4628      	mov	r0, r5
 801000a:	6921      	ldr	r1, [r4, #16]
 801000c:	461d      	mov	r5, r3
 801000e:	6863      	ldr	r3, [r4, #4]
 8010010:	4798      	blx	r3
 8010012:	e7d1      	b.n	800ffb8 <rcl_get_secure_root+0x60>
 8010014:	4622      	mov	r2, r4
 8010016:	4638      	mov	r0, r7
 8010018:	4641      	mov	r1, r8
 801001a:	f7ff ff5b 	bl	800fed4 <exact_match_lookup>
 801001e:	4605      	mov	r5, r0
 8010020:	e7ea      	b.n	800fff8 <rcl_get_secure_root+0xa0>
 8010022:	bf00      	nop
 8010024:	08016334 	.word	0x08016334
 8010028:	0801634c 	.word	0x0801634c

0801002c <rcl_get_security_options_from_environment>:
 801002c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010030:	b082      	sub	sp, #8
 8010032:	2300      	movs	r3, #0
 8010034:	4606      	mov	r6, r0
 8010036:	460f      	mov	r7, r1
 8010038:	4821      	ldr	r0, [pc, #132]	; (80100c0 <rcl_get_security_options_from_environment+0x94>)
 801003a:	a901      	add	r1, sp, #4
 801003c:	4690      	mov	r8, r2
 801003e:	9301      	str	r3, [sp, #4]
 8010040:	f7fa fd0e 	bl	800aa60 <rcutils_get_env>
 8010044:	b120      	cbz	r0, 8010050 <rcl_get_security_options_from_environment+0x24>
 8010046:	2501      	movs	r5, #1
 8010048:	4628      	mov	r0, r5
 801004a:	b002      	add	sp, #8
 801004c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010050:	4604      	mov	r4, r0
 8010052:	491c      	ldr	r1, [pc, #112]	; (80100c4 <rcl_get_security_options_from_environment+0x98>)
 8010054:	9801      	ldr	r0, [sp, #4]
 8010056:	f7f0 f8f3 	bl	8000240 <strcmp>
 801005a:	4605      	mov	r5, r0
 801005c:	b9f0      	cbnz	r0, 801009c <rcl_get_security_options_from_environment+0x70>
 801005e:	9001      	str	r0, [sp, #4]
 8010060:	f1b8 0f00 	cmp.w	r8, #0
 8010064:	d021      	beq.n	80100aa <rcl_get_security_options_from_environment+0x7e>
 8010066:	a901      	add	r1, sp, #4
 8010068:	4817      	ldr	r0, [pc, #92]	; (80100c8 <rcl_get_security_options_from_environment+0x9c>)
 801006a:	f7fa fcf9 	bl	800aa60 <rcutils_get_env>
 801006e:	2800      	cmp	r0, #0
 8010070:	d1e9      	bne.n	8010046 <rcl_get_security_options_from_environment+0x1a>
 8010072:	4916      	ldr	r1, [pc, #88]	; (80100cc <rcl_get_security_options_from_environment+0xa0>)
 8010074:	9801      	ldr	r0, [sp, #4]
 8010076:	f7f0 f8e3 	bl	8000240 <strcmp>
 801007a:	4603      	mov	r3, r0
 801007c:	4639      	mov	r1, r7
 801007e:	4630      	mov	r0, r6
 8010080:	fab3 f383 	clz	r3, r3
 8010084:	095b      	lsrs	r3, r3, #5
 8010086:	f888 3000 	strb.w	r3, [r8]
 801008a:	f7ff ff65 	bl	800ff58 <rcl_get_secure_root>
 801008e:	b170      	cbz	r0, 80100ae <rcl_get_security_options_from_environment+0x82>
 8010090:	f8c8 0004 	str.w	r0, [r8, #4]
 8010094:	4628      	mov	r0, r5
 8010096:	b002      	add	sp, #8
 8010098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801009c:	4625      	mov	r5, r4
 801009e:	f888 4000 	strb.w	r4, [r8]
 80100a2:	4628      	mov	r0, r5
 80100a4:	b002      	add	sp, #8
 80100a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100aa:	250b      	movs	r5, #11
 80100ac:	e7cc      	b.n	8010048 <rcl_get_security_options_from_environment+0x1c>
 80100ae:	f898 5000 	ldrb.w	r5, [r8]
 80100b2:	f1a5 0501 	sub.w	r5, r5, #1
 80100b6:	fab5 f585 	clz	r5, r5
 80100ba:	096d      	lsrs	r5, r5, #5
 80100bc:	e7c4      	b.n	8010048 <rcl_get_security_options_from_environment+0x1c>
 80100be:	bf00      	nop
 80100c0:	080162ec 	.word	0x080162ec
 80100c4:	08016300 	.word	0x08016300
 80100c8:	08016308 	.word	0x08016308
 80100cc:	08016320 	.word	0x08016320

080100d0 <rcl_take>:
 80100d0:	2800      	cmp	r0, #0
 80100d2:	d049      	beq.n	8010168 <rcl_take+0x98>
 80100d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100d8:	4615      	mov	r5, r2
 80100da:	6802      	ldr	r2, [r0, #0]
 80100dc:	b0a4      	sub	sp, #144	; 0x90
 80100de:	4604      	mov	r4, r0
 80100e0:	2a00      	cmp	r2, #0
 80100e2:	d039      	beq.n	8010158 <rcl_take+0x88>
 80100e4:	461f      	mov	r7, r3
 80100e6:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80100ea:	b3ab      	cbz	r3, 8010158 <rcl_take+0x88>
 80100ec:	460e      	mov	r6, r1
 80100ee:	2900      	cmp	r1, #0
 80100f0:	d038      	beq.n	8010164 <rcl_take+0x94>
 80100f2:	2d00      	cmp	r5, #0
 80100f4:	d03c      	beq.n	8010170 <rcl_take+0xa0>
 80100f6:	a802      	add	r0, sp, #8
 80100f8:	f04f 0800 	mov.w	r8, #0
 80100fc:	f002 f854 	bl	80121a8 <rmw_get_zero_initialized_message_info>
 8010100:	f10d 0c08 	add.w	ip, sp, #8
 8010104:	46ae      	mov	lr, r5
 8010106:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801010a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801010e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010112:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010116:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801011a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801011e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8010122:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8010126:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 801012a:	462b      	mov	r3, r5
 801012c:	6820      	ldr	r0, [r4, #0]
 801012e:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 8010132:	4631      	mov	r1, r6
 8010134:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8010138:	9700      	str	r7, [sp, #0]
 801013a:	f002 fa5b 	bl	80125f4 <rmw_take_with_info>
 801013e:	4603      	mov	r3, r0
 8010140:	b9c0      	cbnz	r0, 8010174 <rcl_take+0xa4>
 8010142:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 8010146:	f240 1291 	movw	r2, #401	; 0x191
 801014a:	2900      	cmp	r1, #0
 801014c:	bf08      	it	eq
 801014e:	4613      	moveq	r3, r2
 8010150:	4618      	mov	r0, r3
 8010152:	b024      	add	sp, #144	; 0x90
 8010154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010158:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801015c:	4618      	mov	r0, r3
 801015e:	b024      	add	sp, #144	; 0x90
 8010160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010164:	230b      	movs	r3, #11
 8010166:	e7f3      	b.n	8010150 <rcl_take+0x80>
 8010168:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801016c:	4618      	mov	r0, r3
 801016e:	4770      	bx	lr
 8010170:	ad14      	add	r5, sp, #80	; 0x50
 8010172:	e7c0      	b.n	80100f6 <rcl_take+0x26>
 8010174:	f7ff fb7e 	bl	800f874 <rcl_convert_rmw_ret_to_rcl_ret>
 8010178:	4603      	mov	r3, r0
 801017a:	e7e9      	b.n	8010150 <rcl_take+0x80>

0801017c <rcl_subscription_get_rmw_handle>:
 801017c:	b118      	cbz	r0, 8010186 <rcl_subscription_get_rmw_handle+0xa>
 801017e:	6800      	ldr	r0, [r0, #0]
 8010180:	b108      	cbz	r0, 8010186 <rcl_subscription_get_rmw_handle+0xa>
 8010182:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8010186:	4770      	bx	lr

08010188 <rcl_subscription_is_valid>:
 8010188:	b130      	cbz	r0, 8010198 <rcl_subscription_is_valid+0x10>
 801018a:	6800      	ldr	r0, [r0, #0]
 801018c:	b120      	cbz	r0, 8010198 <rcl_subscription_is_valid+0x10>
 801018e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8010192:	3800      	subs	r0, #0
 8010194:	bf18      	it	ne
 8010196:	2001      	movne	r0, #1
 8010198:	4770      	bx	lr
 801019a:	bf00      	nop

0801019c <rcl_get_system_time>:
 801019c:	4608      	mov	r0, r1
 801019e:	f7fa be23 	b.w	800ade8 <rcutils_system_time_now>
 80101a2:	bf00      	nop

080101a4 <rcl_get_steady_time>:
 80101a4:	4608      	mov	r0, r1
 80101a6:	f7fa be45 	b.w	800ae34 <rcutils_steady_time_now>
 80101aa:	bf00      	nop

080101ac <rcl_get_ros_time>:
 80101ac:	7a03      	ldrb	r3, [r0, #8]
 80101ae:	b510      	push	{r4, lr}
 80101b0:	460c      	mov	r4, r1
 80101b2:	b143      	cbz	r3, 80101c6 <rcl_get_ros_time+0x1a>
 80101b4:	2105      	movs	r1, #5
 80101b6:	f001 fd77 	bl	8011ca8 <__atomic_load_8>
 80101ba:	4602      	mov	r2, r0
 80101bc:	460b      	mov	r3, r1
 80101be:	2000      	movs	r0, #0
 80101c0:	e9c4 2300 	strd	r2, r3, [r4]
 80101c4:	bd10      	pop	{r4, pc}
 80101c6:	4608      	mov	r0, r1
 80101c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101cc:	f7fa be0c 	b.w	800ade8 <rcutils_system_time_now>

080101d0 <rcl_clock_init>:
 80101d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101d2:	4605      	mov	r5, r0
 80101d4:	4610      	mov	r0, r2
 80101d6:	4614      	mov	r4, r2
 80101d8:	460e      	mov	r6, r1
 80101da:	f7fa fc33 	bl	800aa44 <rcutils_allocator_is_valid>
 80101de:	b128      	cbz	r0, 80101ec <rcl_clock_init+0x1c>
 80101e0:	2d03      	cmp	r5, #3
 80101e2:	d803      	bhi.n	80101ec <rcl_clock_init+0x1c>
 80101e4:	e8df f005 	tbb	[pc, r5]
 80101e8:	0659301f 	.word	0x0659301f
 80101ec:	f04f 0c0b 	mov.w	ip, #11
 80101f0:	4660      	mov	r0, ip
 80101f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101f4:	2c00      	cmp	r4, #0
 80101f6:	d0f9      	beq.n	80101ec <rcl_clock_init+0x1c>
 80101f8:	fab6 f386 	clz	r3, r6
 80101fc:	095b      	lsrs	r3, r3, #5
 80101fe:	2e00      	cmp	r6, #0
 8010200:	d0f4      	beq.n	80101ec <rcl_clock_init+0x1c>
 8010202:	6133      	str	r3, [r6, #16]
 8010204:	469c      	mov	ip, r3
 8010206:	f106 0514 	add.w	r5, r6, #20
 801020a:	4f32      	ldr	r7, [pc, #200]	; (80102d4 <rcl_clock_init+0x104>)
 801020c:	f04f 0e03 	mov.w	lr, #3
 8010210:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010216:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010218:	6823      	ldr	r3, [r4, #0]
 801021a:	4660      	mov	r0, ip
 801021c:	602b      	str	r3, [r5, #0]
 801021e:	60f7      	str	r7, [r6, #12]
 8010220:	f886 e000 	strb.w	lr, [r6]
 8010224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010226:	2e00      	cmp	r6, #0
 8010228:	d0e0      	beq.n	80101ec <rcl_clock_init+0x1c>
 801022a:	2300      	movs	r3, #0
 801022c:	f106 0514 	add.w	r5, r6, #20
 8010230:	7033      	strb	r3, [r6, #0]
 8010232:	469c      	mov	ip, r3
 8010234:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010238:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801023c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801023e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010240:	6823      	ldr	r3, [r4, #0]
 8010242:	4660      	mov	r0, ip
 8010244:	602b      	str	r3, [r5, #0]
 8010246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010248:	2c00      	cmp	r4, #0
 801024a:	d0cf      	beq.n	80101ec <rcl_clock_init+0x1c>
 801024c:	fab6 f586 	clz	r5, r6
 8010250:	096d      	lsrs	r5, r5, #5
 8010252:	2e00      	cmp	r6, #0
 8010254:	d0ca      	beq.n	80101ec <rcl_clock_init+0x1c>
 8010256:	46a6      	mov	lr, r4
 8010258:	7035      	strb	r5, [r6, #0]
 801025a:	f106 0c14 	add.w	ip, r6, #20
 801025e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010262:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8010266:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801026a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801026e:	f8de 3000 	ldr.w	r3, [lr]
 8010272:	2010      	movs	r0, #16
 8010274:	f8cc 3000 	str.w	r3, [ip]
 8010278:	6823      	ldr	r3, [r4, #0]
 801027a:	6921      	ldr	r1, [r4, #16]
 801027c:	4798      	blx	r3
 801027e:	6130      	str	r0, [r6, #16]
 8010280:	b320      	cbz	r0, 80102cc <rcl_clock_init+0xfc>
 8010282:	2200      	movs	r2, #0
 8010284:	2300      	movs	r3, #0
 8010286:	46ac      	mov	ip, r5
 8010288:	7205      	strb	r5, [r0, #8]
 801028a:	e9c0 2300 	strd	r2, r3, [r0]
 801028e:	4a12      	ldr	r2, [pc, #72]	; (80102d8 <rcl_clock_init+0x108>)
 8010290:	2301      	movs	r3, #1
 8010292:	4660      	mov	r0, ip
 8010294:	60f2      	str	r2, [r6, #12]
 8010296:	7033      	strb	r3, [r6, #0]
 8010298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801029a:	2c00      	cmp	r4, #0
 801029c:	d0a6      	beq.n	80101ec <rcl_clock_init+0x1c>
 801029e:	fab6 f386 	clz	r3, r6
 80102a2:	095b      	lsrs	r3, r3, #5
 80102a4:	2e00      	cmp	r6, #0
 80102a6:	d0a1      	beq.n	80101ec <rcl_clock_init+0x1c>
 80102a8:	6133      	str	r3, [r6, #16]
 80102aa:	469c      	mov	ip, r3
 80102ac:	f106 0514 	add.w	r5, r6, #20
 80102b0:	f8df e028 	ldr.w	lr, [pc, #40]	; 80102dc <rcl_clock_init+0x10c>
 80102b4:	2702      	movs	r7, #2
 80102b6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80102ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80102bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80102be:	6823      	ldr	r3, [r4, #0]
 80102c0:	4660      	mov	r0, ip
 80102c2:	602b      	str	r3, [r5, #0]
 80102c4:	f8c6 e00c 	str.w	lr, [r6, #12]
 80102c8:	7037      	strb	r7, [r6, #0]
 80102ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102cc:	f04f 0c0a 	mov.w	ip, #10
 80102d0:	e78e      	b.n	80101f0 <rcl_clock_init+0x20>
 80102d2:	bf00      	nop
 80102d4:	080101a5 	.word	0x080101a5
 80102d8:	080101ad 	.word	0x080101ad
 80102dc:	0801019d 	.word	0x0801019d

080102e0 <rcl_clock_get_now>:
 80102e0:	b140      	cbz	r0, 80102f4 <rcl_clock_get_now+0x14>
 80102e2:	b139      	cbz	r1, 80102f4 <rcl_clock_get_now+0x14>
 80102e4:	7803      	ldrb	r3, [r0, #0]
 80102e6:	b11b      	cbz	r3, 80102f0 <rcl_clock_get_now+0x10>
 80102e8:	68c3      	ldr	r3, [r0, #12]
 80102ea:	b10b      	cbz	r3, 80102f0 <rcl_clock_get_now+0x10>
 80102ec:	6900      	ldr	r0, [r0, #16]
 80102ee:	4718      	bx	r3
 80102f0:	2001      	movs	r0, #1
 80102f2:	4770      	bx	lr
 80102f4:	200b      	movs	r0, #11
 80102f6:	4770      	bx	lr

080102f8 <rcl_timer_call>:
 80102f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102fc:	b087      	sub	sp, #28
 80102fe:	2800      	cmp	r0, #0
 8010300:	d06c      	beq.n	80103dc <rcl_timer_call+0xe4>
 8010302:	6803      	ldr	r3, [r0, #0]
 8010304:	4604      	mov	r4, r0
 8010306:	2b00      	cmp	r3, #0
 8010308:	d062      	beq.n	80103d0 <rcl_timer_call+0xd8>
 801030a:	f3bf 8f5b 	dmb	ish
 801030e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010312:	f3bf 8f5b 	dmb	ish
 8010316:	2b00      	cmp	r3, #0
 8010318:	d14f      	bne.n	80103ba <rcl_timer_call+0xc2>
 801031a:	6803      	ldr	r3, [r0, #0]
 801031c:	a904      	add	r1, sp, #16
 801031e:	6818      	ldr	r0, [r3, #0]
 8010320:	f7ff ffde 	bl	80102e0 <rcl_clock_get_now>
 8010324:	4605      	mov	r5, r0
 8010326:	2800      	cmp	r0, #0
 8010328:	d149      	bne.n	80103be <rcl_timer_call+0xc6>
 801032a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801032e:	2b00      	cmp	r3, #0
 8010330:	db49      	blt.n	80103c6 <rcl_timer_call+0xce>
 8010332:	2605      	movs	r6, #5
 8010334:	6820      	ldr	r0, [r4, #0]
 8010336:	9600      	str	r6, [sp, #0]
 8010338:	3020      	adds	r0, #32
 801033a:	f001 fd21 	bl	8011d80 <__atomic_exchange_8>
 801033e:	6823      	ldr	r3, [r4, #0]
 8010340:	4680      	mov	r8, r0
 8010342:	f3bf 8f5b 	dmb	ish
 8010346:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801034a:	f3bf 8f5b 	dmb	ish
 801034e:	6820      	ldr	r0, [r4, #0]
 8010350:	4689      	mov	r9, r1
 8010352:	4631      	mov	r1, r6
 8010354:	3028      	adds	r0, #40	; 0x28
 8010356:	f001 fca7 	bl	8011ca8 <__atomic_load_8>
 801035a:	460f      	mov	r7, r1
 801035c:	4631      	mov	r1, r6
 801035e:	4606      	mov	r6, r0
 8010360:	6820      	ldr	r0, [r4, #0]
 8010362:	3018      	adds	r0, #24
 8010364:	f001 fca0 	bl	8011ca8 <__atomic_load_8>
 8010368:	4602      	mov	r2, r0
 801036a:	9804      	ldr	r0, [sp, #16]
 801036c:	460b      	mov	r3, r1
 801036e:	18b6      	adds	r6, r6, r2
 8010370:	f8dd c014 	ldr.w	ip, [sp, #20]
 8010374:	4692      	mov	sl, r2
 8010376:	eb47 0701 	adc.w	r7, r7, r1
 801037a:	4286      	cmp	r6, r0
 801037c:	eb77 010c 	sbcs.w	r1, r7, ip
 8010380:	da04      	bge.n	801038c <rcl_timer_call+0x94>
 8010382:	ea53 0102 	orrs.w	r1, r3, r2
 8010386:	d12e      	bne.n	80103e6 <rcl_timer_call+0xee>
 8010388:	4606      	mov	r6, r0
 801038a:	4667      	mov	r7, ip
 801038c:	6820      	ldr	r0, [r4, #0]
 801038e:	2105      	movs	r1, #5
 8010390:	4632      	mov	r2, r6
 8010392:	463b      	mov	r3, r7
 8010394:	3028      	adds	r0, #40	; 0x28
 8010396:	9100      	str	r1, [sp, #0]
 8010398:	f001 fcbc 	bl	8011d14 <__atomic_store_8>
 801039c:	f1bb 0f00 	cmp.w	fp, #0
 80103a0:	d00d      	beq.n	80103be <rcl_timer_call+0xc6>
 80103a2:	9a04      	ldr	r2, [sp, #16]
 80103a4:	4620      	mov	r0, r4
 80103a6:	9b05      	ldr	r3, [sp, #20]
 80103a8:	ebb2 0208 	subs.w	r2, r2, r8
 80103ac:	eb63 0309 	sbc.w	r3, r3, r9
 80103b0:	47d8      	blx	fp
 80103b2:	4628      	mov	r0, r5
 80103b4:	b007      	add	sp, #28
 80103b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103ba:	f240 3521 	movw	r5, #801	; 0x321
 80103be:	4628      	mov	r0, r5
 80103c0:	b007      	add	sp, #28
 80103c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103c6:	2501      	movs	r5, #1
 80103c8:	4628      	mov	r0, r5
 80103ca:	b007      	add	sp, #28
 80103cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103d0:	f44f 7548 	mov.w	r5, #800	; 0x320
 80103d4:	4628      	mov	r0, r5
 80103d6:	b007      	add	sp, #28
 80103d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103dc:	250b      	movs	r5, #11
 80103de:	4628      	mov	r0, r5
 80103e0:	b007      	add	sp, #28
 80103e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103e6:	1b80      	subs	r0, r0, r6
 80103e8:	eb6c 0107 	sbc.w	r1, ip, r7
 80103ec:	3801      	subs	r0, #1
 80103ee:	f161 0100 	sbc.w	r1, r1, #0
 80103f2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80103f6:	f7ef ff8b 	bl	8000310 <__aeabi_ldivmod>
 80103fa:	9b02      	ldr	r3, [sp, #8]
 80103fc:	3001      	adds	r0, #1
 80103fe:	f141 0100 	adc.w	r1, r1, #0
 8010402:	fb00 f303 	mul.w	r3, r0, r3
 8010406:	fb01 330a 	mla	r3, r1, sl, r3
 801040a:	fba0 0a0a 	umull	r0, sl, r0, sl
 801040e:	1986      	adds	r6, r0, r6
 8010410:	4453      	add	r3, sl
 8010412:	eb43 0707 	adc.w	r7, r3, r7
 8010416:	e7b9      	b.n	801038c <rcl_timer_call+0x94>

08010418 <rcl_timer_is_ready>:
 8010418:	b570      	push	{r4, r5, r6, lr}
 801041a:	b082      	sub	sp, #8
 801041c:	b380      	cbz	r0, 8010480 <rcl_timer_is_ready+0x68>
 801041e:	6803      	ldr	r3, [r0, #0]
 8010420:	4604      	mov	r4, r0
 8010422:	b38b      	cbz	r3, 8010488 <rcl_timer_is_ready+0x70>
 8010424:	460d      	mov	r5, r1
 8010426:	b359      	cbz	r1, 8010480 <rcl_timer_is_ready+0x68>
 8010428:	f3bf 8f5b 	dmb	ish
 801042c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010430:	f3bf 8f5b 	dmb	ish
 8010434:	b953      	cbnz	r3, 801044c <rcl_timer_is_ready+0x34>
 8010436:	6803      	ldr	r3, [r0, #0]
 8010438:	4669      	mov	r1, sp
 801043a:	6818      	ldr	r0, [r3, #0]
 801043c:	f7ff ff50 	bl	80102e0 <rcl_clock_get_now>
 8010440:	4606      	mov	r6, r0
 8010442:	b148      	cbz	r0, 8010458 <rcl_timer_is_ready+0x40>
 8010444:	f240 3321 	movw	r3, #801	; 0x321
 8010448:	4298      	cmp	r0, r3
 801044a:	d102      	bne.n	8010452 <rcl_timer_is_ready+0x3a>
 801044c:	2300      	movs	r3, #0
 801044e:	461e      	mov	r6, r3
 8010450:	702b      	strb	r3, [r5, #0]
 8010452:	4630      	mov	r0, r6
 8010454:	b002      	add	sp, #8
 8010456:	bd70      	pop	{r4, r5, r6, pc}
 8010458:	6820      	ldr	r0, [r4, #0]
 801045a:	2105      	movs	r1, #5
 801045c:	3028      	adds	r0, #40	; 0x28
 801045e:	f001 fc23 	bl	8011ca8 <__atomic_load_8>
 8010462:	9b00      	ldr	r3, [sp, #0]
 8010464:	1ac0      	subs	r0, r0, r3
 8010466:	9b01      	ldr	r3, [sp, #4]
 8010468:	eb61 0103 	sbc.w	r1, r1, r3
 801046c:	2801      	cmp	r0, #1
 801046e:	4630      	mov	r0, r6
 8010470:	f171 0300 	sbcs.w	r3, r1, #0
 8010474:	bfb4      	ite	lt
 8010476:	2301      	movlt	r3, #1
 8010478:	2300      	movge	r3, #0
 801047a:	702b      	strb	r3, [r5, #0]
 801047c:	b002      	add	sp, #8
 801047e:	bd70      	pop	{r4, r5, r6, pc}
 8010480:	260b      	movs	r6, #11
 8010482:	4630      	mov	r0, r6
 8010484:	b002      	add	sp, #8
 8010486:	bd70      	pop	{r4, r5, r6, pc}
 8010488:	f44f 7648 	mov.w	r6, #800	; 0x320
 801048c:	e7e1      	b.n	8010452 <rcl_timer_is_ready+0x3a>
 801048e:	bf00      	nop

08010490 <rcl_timer_get_time_until_next_call>:
 8010490:	b570      	push	{r4, r5, r6, lr}
 8010492:	b082      	sub	sp, #8
 8010494:	b330      	cbz	r0, 80104e4 <rcl_timer_get_time_until_next_call+0x54>
 8010496:	6803      	ldr	r3, [r0, #0]
 8010498:	4604      	mov	r4, r0
 801049a:	b33b      	cbz	r3, 80104ec <rcl_timer_get_time_until_next_call+0x5c>
 801049c:	460d      	mov	r5, r1
 801049e:	b309      	cbz	r1, 80104e4 <rcl_timer_get_time_until_next_call+0x54>
 80104a0:	f3bf 8f5b 	dmb	ish
 80104a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80104a8:	f3bf 8f5b 	dmb	ish
 80104ac:	b9ab      	cbnz	r3, 80104da <rcl_timer_get_time_until_next_call+0x4a>
 80104ae:	6803      	ldr	r3, [r0, #0]
 80104b0:	4669      	mov	r1, sp
 80104b2:	6818      	ldr	r0, [r3, #0]
 80104b4:	f7ff ff14 	bl	80102e0 <rcl_clock_get_now>
 80104b8:	4606      	mov	r6, r0
 80104ba:	b958      	cbnz	r0, 80104d4 <rcl_timer_get_time_until_next_call+0x44>
 80104bc:	6820      	ldr	r0, [r4, #0]
 80104be:	2105      	movs	r1, #5
 80104c0:	3028      	adds	r0, #40	; 0x28
 80104c2:	f001 fbf1 	bl	8011ca8 <__atomic_load_8>
 80104c6:	9b00      	ldr	r3, [sp, #0]
 80104c8:	1ac0      	subs	r0, r0, r3
 80104ca:	9b01      	ldr	r3, [sp, #4]
 80104cc:	eb61 0103 	sbc.w	r1, r1, r3
 80104d0:	6028      	str	r0, [r5, #0]
 80104d2:	6069      	str	r1, [r5, #4]
 80104d4:	4630      	mov	r0, r6
 80104d6:	b002      	add	sp, #8
 80104d8:	bd70      	pop	{r4, r5, r6, pc}
 80104da:	f240 3621 	movw	r6, #801	; 0x321
 80104de:	4630      	mov	r0, r6
 80104e0:	b002      	add	sp, #8
 80104e2:	bd70      	pop	{r4, r5, r6, pc}
 80104e4:	260b      	movs	r6, #11
 80104e6:	4630      	mov	r0, r6
 80104e8:	b002      	add	sp, #8
 80104ea:	bd70      	pop	{r4, r5, r6, pc}
 80104ec:	f44f 7648 	mov.w	r6, #800	; 0x320
 80104f0:	e7f0      	b.n	80104d4 <rcl_timer_get_time_until_next_call+0x44>
 80104f2:	bf00      	nop

080104f4 <rcl_timer_get_guard_condition>:
 80104f4:	b130      	cbz	r0, 8010504 <rcl_timer_get_guard_condition+0x10>
 80104f6:	6800      	ldr	r0, [r0, #0]
 80104f8:	b120      	cbz	r0, 8010504 <rcl_timer_get_guard_condition+0x10>
 80104fa:	68c3      	ldr	r3, [r0, #12]
 80104fc:	b10b      	cbz	r3, 8010502 <rcl_timer_get_guard_condition+0xe>
 80104fe:	3008      	adds	r0, #8
 8010500:	4770      	bx	lr
 8010502:	4618      	mov	r0, r3
 8010504:	4770      	bx	lr
 8010506:	bf00      	nop

08010508 <rcl_validate_enclave_name_with_size>:
 8010508:	2800      	cmp	r0, #0
 801050a:	d049      	beq.n	80105a0 <rcl_validate_enclave_name_with_size+0x98>
 801050c:	b570      	push	{r4, r5, r6, lr}
 801050e:	4615      	mov	r5, r2
 8010510:	b0c2      	sub	sp, #264	; 0x108
 8010512:	b19a      	cbz	r2, 801053c <rcl_validate_enclave_name_with_size+0x34>
 8010514:	461e      	mov	r6, r3
 8010516:	466a      	mov	r2, sp
 8010518:	ab01      	add	r3, sp, #4
 801051a:	460c      	mov	r4, r1
 801051c:	f7fa fcc4 	bl	800aea8 <rmw_validate_namespace_with_size>
 8010520:	4684      	mov	ip, r0
 8010522:	b9b8      	cbnz	r0, 8010554 <rcl_validate_enclave_name_with_size+0x4c>
 8010524:	9900      	ldr	r1, [sp, #0]
 8010526:	b171      	cbz	r1, 8010546 <rcl_validate_enclave_name_with_size+0x3e>
 8010528:	2907      	cmp	r1, #7
 801052a:	d019      	beq.n	8010560 <rcl_validate_enclave_name_with_size+0x58>
 801052c:	1e4b      	subs	r3, r1, #1
 801052e:	2b05      	cmp	r3, #5
 8010530:	d83a      	bhi.n	80105a8 <rcl_validate_enclave_name_with_size+0xa0>
 8010532:	e8df f003 	tbb	[pc, r3]
 8010536:	2926      	.short	0x2926
 8010538:	1d322f2c 	.word	0x1d322f2c
 801053c:	f04f 0c0b 	mov.w	ip, #11
 8010540:	4660      	mov	r0, ip
 8010542:	b042      	add	sp, #264	; 0x108
 8010544:	bd70      	pop	{r4, r5, r6, pc}
 8010546:	2907      	cmp	r1, #7
 8010548:	d00a      	beq.n	8010560 <rcl_validate_enclave_name_with_size+0x58>
 801054a:	2300      	movs	r3, #0
 801054c:	4660      	mov	r0, ip
 801054e:	602b      	str	r3, [r5, #0]
 8010550:	b042      	add	sp, #264	; 0x108
 8010552:	bd70      	pop	{r4, r5, r6, pc}
 8010554:	f7ff f98e 	bl	800f874 <rcl_convert_rmw_ret_to_rcl_ret>
 8010558:	4684      	mov	ip, r0
 801055a:	4660      	mov	r0, ip
 801055c:	b042      	add	sp, #264	; 0x108
 801055e:	bd70      	pop	{r4, r5, r6, pc}
 8010560:	2cff      	cmp	r4, #255	; 0xff
 8010562:	d9f2      	bls.n	801054a <rcl_validate_enclave_name_with_size+0x42>
 8010564:	6029      	str	r1, [r5, #0]
 8010566:	2e00      	cmp	r6, #0
 8010568:	d0ea      	beq.n	8010540 <rcl_validate_enclave_name_with_size+0x38>
 801056a:	23fe      	movs	r3, #254	; 0xfe
 801056c:	6033      	str	r3, [r6, #0]
 801056e:	e7e7      	b.n	8010540 <rcl_validate_enclave_name_with_size+0x38>
 8010570:	2306      	movs	r3, #6
 8010572:	602b      	str	r3, [r5, #0]
 8010574:	2e00      	cmp	r6, #0
 8010576:	d0e3      	beq.n	8010540 <rcl_validate_enclave_name_with_size+0x38>
 8010578:	9b01      	ldr	r3, [sp, #4]
 801057a:	4660      	mov	r0, ip
 801057c:	6033      	str	r3, [r6, #0]
 801057e:	b042      	add	sp, #264	; 0x108
 8010580:	bd70      	pop	{r4, r5, r6, pc}
 8010582:	2301      	movs	r3, #1
 8010584:	602b      	str	r3, [r5, #0]
 8010586:	e7f5      	b.n	8010574 <rcl_validate_enclave_name_with_size+0x6c>
 8010588:	2302      	movs	r3, #2
 801058a:	602b      	str	r3, [r5, #0]
 801058c:	e7f2      	b.n	8010574 <rcl_validate_enclave_name_with_size+0x6c>
 801058e:	2303      	movs	r3, #3
 8010590:	602b      	str	r3, [r5, #0]
 8010592:	e7ef      	b.n	8010574 <rcl_validate_enclave_name_with_size+0x6c>
 8010594:	2304      	movs	r3, #4
 8010596:	602b      	str	r3, [r5, #0]
 8010598:	e7ec      	b.n	8010574 <rcl_validate_enclave_name_with_size+0x6c>
 801059a:	2305      	movs	r3, #5
 801059c:	602b      	str	r3, [r5, #0]
 801059e:	e7e9      	b.n	8010574 <rcl_validate_enclave_name_with_size+0x6c>
 80105a0:	f04f 0c0b 	mov.w	ip, #11
 80105a4:	4660      	mov	r0, ip
 80105a6:	4770      	bx	lr
 80105a8:	460b      	mov	r3, r1
 80105aa:	4a04      	ldr	r2, [pc, #16]	; (80105bc <rcl_validate_enclave_name_with_size+0xb4>)
 80105ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80105b0:	a802      	add	r0, sp, #8
 80105b2:	f7fa fb8d 	bl	800acd0 <rcutils_snprintf>
 80105b6:	f04f 0c01 	mov.w	ip, #1
 80105ba:	e7c1      	b.n	8010540 <rcl_validate_enclave_name_with_size+0x38>
 80105bc:	0801636c 	.word	0x0801636c

080105c0 <rcl_validate_enclave_name>:
 80105c0:	b168      	cbz	r0, 80105de <rcl_validate_enclave_name+0x1e>
 80105c2:	b570      	push	{r4, r5, r6, lr}
 80105c4:	460d      	mov	r5, r1
 80105c6:	4616      	mov	r6, r2
 80105c8:	4604      	mov	r4, r0
 80105ca:	f7ef fe43 	bl	8000254 <strlen>
 80105ce:	4633      	mov	r3, r6
 80105d0:	4601      	mov	r1, r0
 80105d2:	462a      	mov	r2, r5
 80105d4:	4620      	mov	r0, r4
 80105d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105da:	f7ff bf95 	b.w	8010508 <rcl_validate_enclave_name_with_size>
 80105de:	200b      	movs	r0, #11
 80105e0:	4770      	bx	lr
 80105e2:	bf00      	nop

080105e4 <rcl_get_zero_initialized_wait_set>:
 80105e4:	b510      	push	{r4, lr}
 80105e6:	4c08      	ldr	r4, [pc, #32]	; (8010608 <rcl_get_zero_initialized_wait_set+0x24>)
 80105e8:	4686      	mov	lr, r0
 80105ea:	4684      	mov	ip, r0
 80105ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80105ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80105f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80105f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80105f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80105fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80105fe:	6823      	ldr	r3, [r4, #0]
 8010600:	4670      	mov	r0, lr
 8010602:	f8cc 3000 	str.w	r3, [ip]
 8010606:	bd10      	pop	{r4, pc}
 8010608:	080163cc 	.word	0x080163cc

0801060c <rcl_wait_set_is_valid>:
 801060c:	b118      	cbz	r0, 8010616 <rcl_wait_set_is_valid+0xa>
 801060e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8010610:	3800      	subs	r0, #0
 8010612:	bf18      	it	ne
 8010614:	2001      	movne	r0, #1
 8010616:	4770      	bx	lr

08010618 <rcl_wait_set_fini>:
 8010618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801061c:	b082      	sub	sp, #8
 801061e:	2800      	cmp	r0, #0
 8010620:	f000 8095 	beq.w	801074e <rcl_wait_set_fini+0x136>
 8010624:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8010626:	4604      	mov	r4, r0
 8010628:	2e00      	cmp	r6, #0
 801062a:	f000 808c 	beq.w	8010746 <rcl_wait_set_fini+0x12e>
 801062e:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8010630:	f002 f9a2 	bl	8012978 <rmw_destroy_wait_set>
 8010634:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010636:	1e06      	subs	r6, r0, #0
 8010638:	bf18      	it	ne
 801063a:	f44f 7661 	movne.w	r6, #900	; 0x384
 801063e:	2d00      	cmp	r5, #0
 8010640:	f000 8081 	beq.w	8010746 <rcl_wait_set_fini+0x12e>
 8010644:	2700      	movs	r7, #0
 8010646:	6820      	ldr	r0, [r4, #0]
 8010648:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801064c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801064e:	6067      	str	r7, [r4, #4]
 8010650:	602f      	str	r7, [r5, #0]
 8010652:	b120      	cbz	r0, 801065e <rcl_wait_set_fini+0x46>
 8010654:	9101      	str	r1, [sp, #4]
 8010656:	47c0      	blx	r8
 8010658:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801065a:	9901      	ldr	r1, [sp, #4]
 801065c:	6027      	str	r7, [r4, #0]
 801065e:	68a8      	ldr	r0, [r5, #8]
 8010660:	b120      	cbz	r0, 801066c <rcl_wait_set_fini+0x54>
 8010662:	47c0      	blx	r8
 8010664:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010666:	2300      	movs	r3, #0
 8010668:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801066c:	f04f 0800 	mov.w	r8, #0
 8010670:	68a0      	ldr	r0, [r4, #8]
 8010672:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8010674:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010676:	f8c4 800c 	str.w	r8, [r4, #12]
 801067a:	f8c5 800c 	str.w	r8, [r5, #12]
 801067e:	b128      	cbz	r0, 801068c <rcl_wait_set_fini+0x74>
 8010680:	47b8      	blx	r7
 8010682:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010684:	f8c4 8008 	str.w	r8, [r4, #8]
 8010688:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801068a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801068c:	f04f 0800 	mov.w	r8, #0
 8010690:	6968      	ldr	r0, [r5, #20]
 8010692:	f8c5 8010 	str.w	r8, [r5, #16]
 8010696:	b128      	cbz	r0, 80106a4 <rcl_wait_set_fini+0x8c>
 8010698:	47b8      	blx	r7
 801069a:	f8c5 8014 	str.w	r8, [r5, #20]
 801069e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80106a0:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80106a2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80106a4:	f04f 0800 	mov.w	r8, #0
 80106a8:	6920      	ldr	r0, [r4, #16]
 80106aa:	f8c4 8014 	str.w	r8, [r4, #20]
 80106ae:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 80106b2:	b128      	cbz	r0, 80106c0 <rcl_wait_set_fini+0xa8>
 80106b4:	47b8      	blx	r7
 80106b6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80106b8:	f8c4 8010 	str.w	r8, [r4, #16]
 80106bc:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80106be:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80106c0:	f04f 0800 	mov.w	r8, #0
 80106c4:	69a0      	ldr	r0, [r4, #24]
 80106c6:	f8c4 801c 	str.w	r8, [r4, #28]
 80106ca:	f8c5 8018 	str.w	r8, [r5, #24]
 80106ce:	b128      	cbz	r0, 80106dc <rcl_wait_set_fini+0xc4>
 80106d0:	9101      	str	r1, [sp, #4]
 80106d2:	47b8      	blx	r7
 80106d4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80106d6:	9901      	ldr	r1, [sp, #4]
 80106d8:	f8c4 8018 	str.w	r8, [r4, #24]
 80106dc:	6a28      	ldr	r0, [r5, #32]
 80106de:	b120      	cbz	r0, 80106ea <rcl_wait_set_fini+0xd2>
 80106e0:	47b8      	blx	r7
 80106e2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80106e4:	2300      	movs	r3, #0
 80106e6:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80106ea:	2700      	movs	r7, #0
 80106ec:	6a20      	ldr	r0, [r4, #32]
 80106ee:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80106f2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80106f4:	6267      	str	r7, [r4, #36]	; 0x24
 80106f6:	626f      	str	r7, [r5, #36]	; 0x24
 80106f8:	b120      	cbz	r0, 8010704 <rcl_wait_set_fini+0xec>
 80106fa:	9101      	str	r1, [sp, #4]
 80106fc:	47c0      	blx	r8
 80106fe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010700:	9901      	ldr	r1, [sp, #4]
 8010702:	6227      	str	r7, [r4, #32]
 8010704:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8010706:	b120      	cbz	r0, 8010712 <rcl_wait_set_fini+0xfa>
 8010708:	47c0      	blx	r8
 801070a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801070c:	2300      	movs	r3, #0
 801070e:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8010712:	2700      	movs	r7, #0
 8010714:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010716:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801071a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801071c:	62e7      	str	r7, [r4, #44]	; 0x2c
 801071e:	632f      	str	r7, [r5, #48]	; 0x30
 8010720:	b120      	cbz	r0, 801072c <rcl_wait_set_fini+0x114>
 8010722:	9101      	str	r1, [sp, #4]
 8010724:	47c0      	blx	r8
 8010726:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010728:	9901      	ldr	r1, [sp, #4]
 801072a:	62a7      	str	r7, [r4, #40]	; 0x28
 801072c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801072e:	b120      	cbz	r0, 801073a <rcl_wait_set_fini+0x122>
 8010730:	47c0      	blx	r8
 8010732:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010734:	2300      	movs	r3, #0
 8010736:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801073a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801073c:	4628      	mov	r0, r5
 801073e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010740:	4798      	blx	r3
 8010742:	2300      	movs	r3, #0
 8010744:	6323      	str	r3, [r4, #48]	; 0x30
 8010746:	4630      	mov	r0, r6
 8010748:	b002      	add	sp, #8
 801074a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801074e:	260b      	movs	r6, #11
 8010750:	4630      	mov	r0, r6
 8010752:	b002      	add	sp, #8
 8010754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010758 <rcl_wait_set_add_subscription>:
 8010758:	b318      	cbz	r0, 80107a2 <rcl_wait_set_add_subscription+0x4a>
 801075a:	b538      	push	{r3, r4, r5, lr}
 801075c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801075e:	4604      	mov	r4, r0
 8010760:	b30b      	cbz	r3, 80107a6 <rcl_wait_set_add_subscription+0x4e>
 8010762:	b319      	cbz	r1, 80107ac <rcl_wait_set_add_subscription+0x54>
 8010764:	681d      	ldr	r5, [r3, #0]
 8010766:	6840      	ldr	r0, [r0, #4]
 8010768:	4285      	cmp	r5, r0
 801076a:	d217      	bcs.n	801079c <rcl_wait_set_add_subscription+0x44>
 801076c:	1c68      	adds	r0, r5, #1
 801076e:	6018      	str	r0, [r3, #0]
 8010770:	6823      	ldr	r3, [r4, #0]
 8010772:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8010776:	b102      	cbz	r2, 801077a <rcl_wait_set_add_subscription+0x22>
 8010778:	6015      	str	r5, [r2, #0]
 801077a:	4608      	mov	r0, r1
 801077c:	f7ff fcfe 	bl	801017c <rcl_subscription_get_rmw_handle>
 8010780:	b150      	cbz	r0, 8010798 <rcl_wait_set_add_subscription+0x40>
 8010782:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010784:	6842      	ldr	r2, [r0, #4]
 8010786:	2000      	movs	r0, #0
 8010788:	689b      	ldr	r3, [r3, #8]
 801078a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801078e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010790:	6853      	ldr	r3, [r2, #4]
 8010792:	3301      	adds	r3, #1
 8010794:	6053      	str	r3, [r2, #4]
 8010796:	bd38      	pop	{r3, r4, r5, pc}
 8010798:	2001      	movs	r0, #1
 801079a:	bd38      	pop	{r3, r4, r5, pc}
 801079c:	f240 3086 	movw	r0, #902	; 0x386
 80107a0:	bd38      	pop	{r3, r4, r5, pc}
 80107a2:	200b      	movs	r0, #11
 80107a4:	4770      	bx	lr
 80107a6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80107aa:	bd38      	pop	{r3, r4, r5, pc}
 80107ac:	200b      	movs	r0, #11
 80107ae:	bd38      	pop	{r3, r4, r5, pc}

080107b0 <rcl_wait_set_clear>:
 80107b0:	2800      	cmp	r0, #0
 80107b2:	d074      	beq.n	801089e <rcl_wait_set_clear+0xee>
 80107b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80107b6:	b510      	push	{r4, lr}
 80107b8:	4604      	mov	r4, r0
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d071      	beq.n	80108a2 <rcl_wait_set_clear+0xf2>
 80107be:	6800      	ldr	r0, [r0, #0]
 80107c0:	b138      	cbz	r0, 80107d2 <rcl_wait_set_clear+0x22>
 80107c2:	6862      	ldr	r2, [r4, #4]
 80107c4:	2100      	movs	r1, #0
 80107c6:	0092      	lsls	r2, r2, #2
 80107c8:	f003 fff4 	bl	80147b4 <memset>
 80107cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80107ce:	2200      	movs	r2, #0
 80107d0:	601a      	str	r2, [r3, #0]
 80107d2:	68a0      	ldr	r0, [r4, #8]
 80107d4:	b138      	cbz	r0, 80107e6 <rcl_wait_set_clear+0x36>
 80107d6:	68e2      	ldr	r2, [r4, #12]
 80107d8:	2100      	movs	r1, #0
 80107da:	0092      	lsls	r2, r2, #2
 80107dc:	f003 ffea 	bl	80147b4 <memset>
 80107e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80107e2:	2200      	movs	r2, #0
 80107e4:	60da      	str	r2, [r3, #12]
 80107e6:	69a0      	ldr	r0, [r4, #24]
 80107e8:	b138      	cbz	r0, 80107fa <rcl_wait_set_clear+0x4a>
 80107ea:	69e2      	ldr	r2, [r4, #28]
 80107ec:	2100      	movs	r1, #0
 80107ee:	0092      	lsls	r2, r2, #2
 80107f0:	f003 ffe0 	bl	80147b4 <memset>
 80107f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80107f6:	2200      	movs	r2, #0
 80107f8:	619a      	str	r2, [r3, #24]
 80107fa:	6a20      	ldr	r0, [r4, #32]
 80107fc:	b138      	cbz	r0, 801080e <rcl_wait_set_clear+0x5e>
 80107fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010800:	2100      	movs	r1, #0
 8010802:	0092      	lsls	r2, r2, #2
 8010804:	f003 ffd6 	bl	80147b4 <memset>
 8010808:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801080a:	2200      	movs	r2, #0
 801080c:	625a      	str	r2, [r3, #36]	; 0x24
 801080e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010810:	b138      	cbz	r0, 8010822 <rcl_wait_set_clear+0x72>
 8010812:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010814:	2100      	movs	r1, #0
 8010816:	0092      	lsls	r2, r2, #2
 8010818:	f003 ffcc 	bl	80147b4 <memset>
 801081c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801081e:	2200      	movs	r2, #0
 8010820:	631a      	str	r2, [r3, #48]	; 0x30
 8010822:	6920      	ldr	r0, [r4, #16]
 8010824:	b138      	cbz	r0, 8010836 <rcl_wait_set_clear+0x86>
 8010826:	6962      	ldr	r2, [r4, #20]
 8010828:	2100      	movs	r1, #0
 801082a:	0092      	lsls	r2, r2, #2
 801082c:	f003 ffc2 	bl	80147b4 <memset>
 8010830:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010832:	2200      	movs	r2, #0
 8010834:	641a      	str	r2, [r3, #64]	; 0x40
 8010836:	6898      	ldr	r0, [r3, #8]
 8010838:	b138      	cbz	r0, 801084a <rcl_wait_set_clear+0x9a>
 801083a:	685a      	ldr	r2, [r3, #4]
 801083c:	2100      	movs	r1, #0
 801083e:	0092      	lsls	r2, r2, #2
 8010840:	f003 ffb8 	bl	80147b4 <memset>
 8010844:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010846:	2200      	movs	r2, #0
 8010848:	605a      	str	r2, [r3, #4]
 801084a:	6958      	ldr	r0, [r3, #20]
 801084c:	b138      	cbz	r0, 801085e <rcl_wait_set_clear+0xae>
 801084e:	691a      	ldr	r2, [r3, #16]
 8010850:	2100      	movs	r1, #0
 8010852:	0092      	lsls	r2, r2, #2
 8010854:	f003 ffae 	bl	80147b4 <memset>
 8010858:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801085a:	2200      	movs	r2, #0
 801085c:	611a      	str	r2, [r3, #16]
 801085e:	6a18      	ldr	r0, [r3, #32]
 8010860:	b138      	cbz	r0, 8010872 <rcl_wait_set_clear+0xc2>
 8010862:	69da      	ldr	r2, [r3, #28]
 8010864:	2100      	movs	r1, #0
 8010866:	0092      	lsls	r2, r2, #2
 8010868:	f003 ffa4 	bl	80147b4 <memset>
 801086c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801086e:	2200      	movs	r2, #0
 8010870:	61da      	str	r2, [r3, #28]
 8010872:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010874:	b138      	cbz	r0, 8010886 <rcl_wait_set_clear+0xd6>
 8010876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010878:	2100      	movs	r1, #0
 801087a:	0092      	lsls	r2, r2, #2
 801087c:	f003 ff9a 	bl	80147b4 <memset>
 8010880:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010882:	2200      	movs	r2, #0
 8010884:	629a      	str	r2, [r3, #40]	; 0x28
 8010886:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8010888:	b140      	cbz	r0, 801089c <rcl_wait_set_clear+0xec>
 801088a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801088c:	2100      	movs	r1, #0
 801088e:	0092      	lsls	r2, r2, #2
 8010890:	f003 ff90 	bl	80147b4 <memset>
 8010894:	2300      	movs	r3, #0
 8010896:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010898:	4618      	mov	r0, r3
 801089a:	6353      	str	r3, [r2, #52]	; 0x34
 801089c:	bd10      	pop	{r4, pc}
 801089e:	200b      	movs	r0, #11
 80108a0:	4770      	bx	lr
 80108a2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80108a6:	bd10      	pop	{r4, pc}

080108a8 <rcl_wait_set_resize>:
 80108a8:	2800      	cmp	r0, #0
 80108aa:	f000 8180 	beq.w	8010bae <rcl_wait_set_resize+0x306>
 80108ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108b2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80108b4:	b083      	sub	sp, #12
 80108b6:	4605      	mov	r5, r0
 80108b8:	2c00      	cmp	r4, #0
 80108ba:	f000 817a 	beq.w	8010bb2 <rcl_wait_set_resize+0x30a>
 80108be:	f04f 0900 	mov.w	r9, #0
 80108c2:	461f      	mov	r7, r3
 80108c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80108c8:	4688      	mov	r8, r1
 80108ca:	4616      	mov	r6, r2
 80108cc:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 80108d0:	f8c0 9004 	str.w	r9, [r0, #4]
 80108d4:	f8c4 9000 	str.w	r9, [r4]
 80108d8:	2900      	cmp	r1, #0
 80108da:	f000 80bf 	beq.w	8010a5c <rcl_wait_set_resize+0x1b4>
 80108de:	008c      	lsls	r4, r1, #2
 80108e0:	4652      	mov	r2, sl
 80108e2:	6800      	ldr	r0, [r0, #0]
 80108e4:	4621      	mov	r1, r4
 80108e6:	9301      	str	r3, [sp, #4]
 80108e8:	4798      	blx	r3
 80108ea:	9b01      	ldr	r3, [sp, #4]
 80108ec:	6028      	str	r0, [r5, #0]
 80108ee:	2800      	cmp	r0, #0
 80108f0:	f000 80f6 	beq.w	8010ae0 <rcl_wait_set_resize+0x238>
 80108f4:	4622      	mov	r2, r4
 80108f6:	4649      	mov	r1, r9
 80108f8:	9301      	str	r3, [sp, #4]
 80108fa:	f003 ff5b 	bl	80147b4 <memset>
 80108fe:	f8c5 8004 	str.w	r8, [r5, #4]
 8010902:	4652      	mov	r2, sl
 8010904:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8010908:	4621      	mov	r1, r4
 801090a:	9b01      	ldr	r3, [sp, #4]
 801090c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8010910:	f8c8 9004 	str.w	r9, [r8, #4]
 8010914:	4798      	blx	r3
 8010916:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010918:	f8c8 0008 	str.w	r0, [r8, #8]
 801091c:	689b      	ldr	r3, [r3, #8]
 801091e:	2b00      	cmp	r3, #0
 8010920:	f000 814a 	beq.w	8010bb8 <rcl_wait_set_resize+0x310>
 8010924:	4622      	mov	r2, r4
 8010926:	4649      	mov	r1, r9
 8010928:	4618      	mov	r0, r3
 801092a:	f003 ff43 	bl	80147b4 <memset>
 801092e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010930:	f04f 0800 	mov.w	r8, #0
 8010934:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010938:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 801093c:	f8c5 800c 	str.w	r8, [r5, #12]
 8010940:	f8c4 800c 	str.w	r8, [r4, #12]
 8010944:	2e00      	cmp	r6, #0
 8010946:	f040 809b 	bne.w	8010a80 <rcl_wait_set_resize+0x1d8>
 801094a:	68a8      	ldr	r0, [r5, #8]
 801094c:	b128      	cbz	r0, 801095a <rcl_wait_set_resize+0xb2>
 801094e:	4649      	mov	r1, r9
 8010950:	4790      	blx	r2
 8010952:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010954:	60ae      	str	r6, [r5, #8]
 8010956:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801095a:	f04f 0800 	mov.w	r8, #0
 801095e:	19f6      	adds	r6, r6, r7
 8010960:	f8c4 8010 	str.w	r8, [r4, #16]
 8010964:	f040 80a2 	bne.w	8010aac <rcl_wait_set_resize+0x204>
 8010968:	6960      	ldr	r0, [r4, #20]
 801096a:	b130      	cbz	r0, 801097a <rcl_wait_set_resize+0xd2>
 801096c:	4649      	mov	r1, r9
 801096e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010970:	4798      	blx	r3
 8010972:	6166      	str	r6, [r4, #20]
 8010974:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010976:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801097a:	2600      	movs	r6, #0
 801097c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8010980:	616e      	str	r6, [r5, #20]
 8010982:	6426      	str	r6, [r4, #64]	; 0x40
 8010984:	2f00      	cmp	r7, #0
 8010986:	f040 80af 	bne.w	8010ae8 <rcl_wait_set_resize+0x240>
 801098a:	6928      	ldr	r0, [r5, #16]
 801098c:	b138      	cbz	r0, 801099e <rcl_wait_set_resize+0xf6>
 801098e:	4649      	mov	r1, r9
 8010990:	47d0      	blx	sl
 8010992:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010994:	612f      	str	r7, [r5, #16]
 8010996:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801099a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801099e:	2600      	movs	r6, #0
 80109a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109a2:	61ee      	str	r6, [r5, #28]
 80109a4:	61a6      	str	r6, [r4, #24]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	f040 8093 	bne.w	8010ad2 <rcl_wait_set_resize+0x22a>
 80109ac:	69a8      	ldr	r0, [r5, #24]
 80109ae:	b120      	cbz	r0, 80109ba <rcl_wait_set_resize+0x112>
 80109b0:	4649      	mov	r1, r9
 80109b2:	47d0      	blx	sl
 80109b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109b6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80109b8:	61ab      	str	r3, [r5, #24]
 80109ba:	6a20      	ldr	r0, [r4, #32]
 80109bc:	b128      	cbz	r0, 80109ca <rcl_wait_set_resize+0x122>
 80109be:	4649      	mov	r1, r9
 80109c0:	47d0      	blx	sl
 80109c2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80109c4:	2300      	movs	r3, #0
 80109c6:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80109ca:	2600      	movs	r6, #0
 80109cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109ce:	6da7      	ldr	r7, [r4, #88]	; 0x58
 80109d0:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 80109d4:	626e      	str	r6, [r5, #36]	; 0x24
 80109d6:	6266      	str	r6, [r4, #36]	; 0x24
 80109d8:	2b00      	cmp	r3, #0
 80109da:	f000 8098 	beq.w	8010b0e <rcl_wait_set_resize+0x266>
 80109de:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80109e2:	463a      	mov	r2, r7
 80109e4:	6a28      	ldr	r0, [r5, #32]
 80109e6:	4651      	mov	r1, sl
 80109e8:	47c8      	blx	r9
 80109ea:	6228      	str	r0, [r5, #32]
 80109ec:	2800      	cmp	r0, #0
 80109ee:	d077      	beq.n	8010ae0 <rcl_wait_set_resize+0x238>
 80109f0:	4652      	mov	r2, sl
 80109f2:	4631      	mov	r1, r6
 80109f4:	f003 fede 	bl	80147b4 <memset>
 80109f8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80109fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109fc:	463a      	mov	r2, r7
 80109fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010a00:	4651      	mov	r1, sl
 8010a02:	626b      	str	r3, [r5, #36]	; 0x24
 8010a04:	62a6      	str	r6, [r4, #40]	; 0x28
 8010a06:	47c8      	blx	r9
 8010a08:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010a0a:	62e0      	str	r0, [r4, #44]	; 0x2c
 8010a0c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8010a0e:	2c00      	cmp	r4, #0
 8010a10:	f000 80f2 	beq.w	8010bf8 <rcl_wait_set_resize+0x350>
 8010a14:	4620      	mov	r0, r4
 8010a16:	4652      	mov	r2, sl
 8010a18:	4631      	mov	r1, r6
 8010a1a:	f003 fecb 	bl	80147b4 <memset>
 8010a1e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010a20:	2600      	movs	r6, #0
 8010a22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010a24:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8010a26:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8010a2a:	62ee      	str	r6, [r5, #44]	; 0x2c
 8010a2c:	6326      	str	r6, [r4, #48]	; 0x30
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	f040 8097 	bne.w	8010b62 <rcl_wait_set_resize+0x2ba>
 8010a34:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8010a36:	b120      	cbz	r0, 8010a42 <rcl_wait_set_resize+0x19a>
 8010a38:	4639      	mov	r1, r7
 8010a3a:	47c0      	blx	r8
 8010a3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010a3e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010a40:	62ab      	str	r3, [r5, #40]	; 0x28
 8010a42:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010a44:	2800      	cmp	r0, #0
 8010a46:	d04c      	beq.n	8010ae2 <rcl_wait_set_resize+0x23a>
 8010a48:	4639      	mov	r1, r7
 8010a4a:	47c0      	blx	r8
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8010a50:	4618      	mov	r0, r3
 8010a52:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 8010a56:	b003      	add	sp, #12
 8010a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a5c:	6800      	ldr	r0, [r0, #0]
 8010a5e:	b120      	cbz	r0, 8010a6a <rcl_wait_set_resize+0x1c2>
 8010a60:	4651      	mov	r1, sl
 8010a62:	47d8      	blx	fp
 8010a64:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010a66:	f8c5 8000 	str.w	r8, [r5]
 8010a6a:	68a0      	ldr	r0, [r4, #8]
 8010a6c:	2800      	cmp	r0, #0
 8010a6e:	f43f af5f 	beq.w	8010930 <rcl_wait_set_resize+0x88>
 8010a72:	4651      	mov	r1, sl
 8010a74:	47d8      	blx	fp
 8010a76:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010a78:	2300      	movs	r3, #0
 8010a7a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8010a7e:	e757      	b.n	8010930 <rcl_wait_set_resize+0x88>
 8010a80:	00b4      	lsls	r4, r6, #2
 8010a82:	464a      	mov	r2, r9
 8010a84:	68a8      	ldr	r0, [r5, #8]
 8010a86:	4621      	mov	r1, r4
 8010a88:	4798      	blx	r3
 8010a8a:	60a8      	str	r0, [r5, #8]
 8010a8c:	b340      	cbz	r0, 8010ae0 <rcl_wait_set_resize+0x238>
 8010a8e:	4622      	mov	r2, r4
 8010a90:	4641      	mov	r1, r8
 8010a92:	f003 fe8f 	bl	80147b4 <memset>
 8010a96:	f04f 0800 	mov.w	r8, #0
 8010a9a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010a9c:	60ee      	str	r6, [r5, #12]
 8010a9e:	19f6      	adds	r6, r6, r7
 8010aa0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010aa4:	f8c4 8010 	str.w	r8, [r4, #16]
 8010aa8:	f43f af5e 	beq.w	8010968 <rcl_wait_set_resize+0xc0>
 8010aac:	00b6      	lsls	r6, r6, #2
 8010aae:	464a      	mov	r2, r9
 8010ab0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010ab2:	6960      	ldr	r0, [r4, #20]
 8010ab4:	4631      	mov	r1, r6
 8010ab6:	4798      	blx	r3
 8010ab8:	4681      	mov	r9, r0
 8010aba:	6160      	str	r0, [r4, #20]
 8010abc:	2800      	cmp	r0, #0
 8010abe:	f000 8084 	beq.w	8010bca <rcl_wait_set_resize+0x322>
 8010ac2:	4632      	mov	r2, r6
 8010ac4:	4641      	mov	r1, r8
 8010ac6:	f003 fe75 	bl	80147b4 <memset>
 8010aca:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010acc:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010ad0:	e753      	b.n	801097a <rcl_wait_set_resize+0xd2>
 8010ad2:	009c      	lsls	r4, r3, #2
 8010ad4:	464a      	mov	r2, r9
 8010ad6:	69a8      	ldr	r0, [r5, #24]
 8010ad8:	4621      	mov	r1, r4
 8010ada:	47c0      	blx	r8
 8010adc:	61a8      	str	r0, [r5, #24]
 8010ade:	bb40      	cbnz	r0, 8010b32 <rcl_wait_set_resize+0x28a>
 8010ae0:	200a      	movs	r0, #10
 8010ae2:	b003      	add	sp, #12
 8010ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ae8:	00bc      	lsls	r4, r7, #2
 8010aea:	464a      	mov	r2, r9
 8010aec:	6928      	ldr	r0, [r5, #16]
 8010aee:	4621      	mov	r1, r4
 8010af0:	47c0      	blx	r8
 8010af2:	6128      	str	r0, [r5, #16]
 8010af4:	2800      	cmp	r0, #0
 8010af6:	d0f3      	beq.n	8010ae0 <rcl_wait_set_resize+0x238>
 8010af8:	4622      	mov	r2, r4
 8010afa:	4631      	mov	r1, r6
 8010afc:	f003 fe5a 	bl	80147b4 <memset>
 8010b00:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010b02:	616f      	str	r7, [r5, #20]
 8010b04:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010b08:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8010b0c:	e747      	b.n	801099e <rcl_wait_set_resize+0xf6>
 8010b0e:	6a28      	ldr	r0, [r5, #32]
 8010b10:	b120      	cbz	r0, 8010b1c <rcl_wait_set_resize+0x274>
 8010b12:	4639      	mov	r1, r7
 8010b14:	47c0      	blx	r8
 8010b16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b18:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010b1a:	622b      	str	r3, [r5, #32]
 8010b1c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010b1e:	2800      	cmp	r0, #0
 8010b20:	f43f af7e 	beq.w	8010a20 <rcl_wait_set_resize+0x178>
 8010b24:	4639      	mov	r1, r7
 8010b26:	47c0      	blx	r8
 8010b28:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8010b30:	e776      	b.n	8010a20 <rcl_wait_set_resize+0x178>
 8010b32:	4622      	mov	r2, r4
 8010b34:	4631      	mov	r1, r6
 8010b36:	f003 fe3d 	bl	80147b4 <memset>
 8010b3a:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8010b3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b3e:	464a      	mov	r2, r9
 8010b40:	6a38      	ldr	r0, [r7, #32]
 8010b42:	4621      	mov	r1, r4
 8010b44:	61eb      	str	r3, [r5, #28]
 8010b46:	61fe      	str	r6, [r7, #28]
 8010b48:	47c0      	blx	r8
 8010b4a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010b4c:	6238      	str	r0, [r7, #32]
 8010b4e:	6a1f      	ldr	r7, [r3, #32]
 8010b50:	2f00      	cmp	r7, #0
 8010b52:	d04a      	beq.n	8010bea <rcl_wait_set_resize+0x342>
 8010b54:	4622      	mov	r2, r4
 8010b56:	4631      	mov	r1, r6
 8010b58:	4638      	mov	r0, r7
 8010b5a:	f003 fe2b 	bl	80147b4 <memset>
 8010b5e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010b60:	e733      	b.n	80109ca <rcl_wait_set_resize+0x122>
 8010b62:	009c      	lsls	r4, r3, #2
 8010b64:	463a      	mov	r2, r7
 8010b66:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8010b68:	4621      	mov	r1, r4
 8010b6a:	47c8      	blx	r9
 8010b6c:	62a8      	str	r0, [r5, #40]	; 0x28
 8010b6e:	2800      	cmp	r0, #0
 8010b70:	d0b6      	beq.n	8010ae0 <rcl_wait_set_resize+0x238>
 8010b72:	4622      	mov	r2, r4
 8010b74:	4631      	mov	r1, r6
 8010b76:	f003 fe1d 	bl	80147b4 <memset>
 8010b7a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8010b7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b80:	463a      	mov	r2, r7
 8010b82:	4621      	mov	r1, r4
 8010b84:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8010b88:	62eb      	str	r3, [r5, #44]	; 0x2c
 8010b8a:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 8010b8e:	47c8      	blx	r9
 8010b90:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010b92:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8010b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d034      	beq.n	8010c06 <rcl_wait_set_resize+0x35e>
 8010b9c:	4622      	mov	r2, r4
 8010b9e:	4631      	mov	r1, r6
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f003 fe07 	bl	80147b4 <memset>
 8010ba6:	4630      	mov	r0, r6
 8010ba8:	b003      	add	sp, #12
 8010baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bae:	200b      	movs	r0, #11
 8010bb0:	4770      	bx	lr
 8010bb2:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010bb6:	e794      	b.n	8010ae2 <rcl_wait_set_resize+0x23a>
 8010bb8:	6828      	ldr	r0, [r5, #0]
 8010bba:	4651      	mov	r1, sl
 8010bbc:	9301      	str	r3, [sp, #4]
 8010bbe:	47d8      	blx	fp
 8010bc0:	9b01      	ldr	r3, [sp, #4]
 8010bc2:	200a      	movs	r0, #10
 8010bc4:	e9c5 3300 	strd	r3, r3, [r5]
 8010bc8:	e78b      	b.n	8010ae2 <rcl_wait_set_resize+0x23a>
 8010bca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010bcc:	68a8      	ldr	r0, [r5, #8]
 8010bce:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010bd2:	4798      	blx	r3
 8010bd4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010bd6:	6928      	ldr	r0, [r5, #16]
 8010bd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010bda:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010bdc:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8010be0:	4790      	blx	r2
 8010be2:	200a      	movs	r0, #10
 8010be4:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8010be8:	e77b      	b.n	8010ae2 <rcl_wait_set_resize+0x23a>
 8010bea:	69a8      	ldr	r0, [r5, #24]
 8010bec:	4649      	mov	r1, r9
 8010bee:	47d0      	blx	sl
 8010bf0:	200a      	movs	r0, #10
 8010bf2:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8010bf6:	e774      	b.n	8010ae2 <rcl_wait_set_resize+0x23a>
 8010bf8:	6a28      	ldr	r0, [r5, #32]
 8010bfa:	4639      	mov	r1, r7
 8010bfc:	47c0      	blx	r8
 8010bfe:	200a      	movs	r0, #10
 8010c00:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8010c04:	e76d      	b.n	8010ae2 <rcl_wait_set_resize+0x23a>
 8010c06:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8010c08:	4639      	mov	r1, r7
 8010c0a:	9301      	str	r3, [sp, #4]
 8010c0c:	47c0      	blx	r8
 8010c0e:	9b01      	ldr	r3, [sp, #4]
 8010c10:	200a      	movs	r0, #10
 8010c12:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8010c16:	e764      	b.n	8010ae2 <rcl_wait_set_resize+0x23a>

08010c18 <rcl_wait_set_init>:
 8010c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c1c:	b085      	sub	sp, #20
 8010c1e:	4605      	mov	r5, r0
 8010c20:	460e      	mov	r6, r1
 8010c22:	4617      	mov	r7, r2
 8010c24:	a812      	add	r0, sp, #72	; 0x48
 8010c26:	4698      	mov	r8, r3
 8010c28:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8010c2c:	f7f9 ff0a 	bl	800aa44 <rcutils_allocator_is_valid>
 8010c30:	2d00      	cmp	r5, #0
 8010c32:	d072      	beq.n	8010d1a <rcl_wait_set_init+0x102>
 8010c34:	f080 0001 	eor.w	r0, r0, #1
 8010c38:	b2c0      	uxtb	r0, r0
 8010c3a:	2800      	cmp	r0, #0
 8010c3c:	d16d      	bne.n	8010d1a <rcl_wait_set_init+0x102>
 8010c3e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8010c42:	f1ba 0f00 	cmp.w	sl, #0
 8010c46:	d004      	beq.n	8010c52 <rcl_wait_set_init+0x3a>
 8010c48:	2464      	movs	r4, #100	; 0x64
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	b005      	add	sp, #20
 8010c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c52:	f1b9 0f00 	cmp.w	r9, #0
 8010c56:	d060      	beq.n	8010d1a <rcl_wait_set_init+0x102>
 8010c58:	4648      	mov	r0, r9
 8010c5a:	f7fe fe29 	bl	800f8b0 <rcl_context_is_valid>
 8010c5e:	2800      	cmp	r0, #0
 8010c60:	d068      	beq.n	8010d34 <rcl_wait_set_init+0x11c>
 8010c62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010c64:	205c      	movs	r0, #92	; 0x5c
 8010c66:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010c68:	4798      	blx	r3
 8010c6a:	6328      	str	r0, [r5, #48]	; 0x30
 8010c6c:	2800      	cmp	r0, #0
 8010c6e:	d063      	beq.n	8010d38 <rcl_wait_set_init+0x120>
 8010c70:	225c      	movs	r2, #92	; 0x5c
 8010c72:	4651      	mov	r1, sl
 8010c74:	f003 fd9e 	bl	80147b4 <memset>
 8010c78:	ac12      	add	r4, sp, #72	; 0x48
 8010c7a:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 8010c7e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8010c82:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 8010c86:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 8010c8a:	eb03 0e02 	add.w	lr, r3, r2
 8010c8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c90:	f8d9 9000 	ldr.w	r9, [r9]
 8010c94:	449e      	add	lr, r3
 8010c96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c98:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8010c9c:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8010ca0:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8010ca4:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 8010ca8:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 8010cac:	44be      	add	lr, r7
 8010cae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010cb2:	6823      	ldr	r3, [r4, #0]
 8010cb4:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8010cb8:	f109 0028 	add.w	r0, r9, #40	; 0x28
 8010cbc:	f8cc 3000 	str.w	r3, [ip]
 8010cc0:	f001 fe50 	bl	8012964 <rmw_create_wait_set>
 8010cc4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010cc6:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 8010cca:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010ccc:	b350      	cbz	r0, 8010d24 <rcl_wait_set_init+0x10c>
 8010cce:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8010cd0:	4643      	mov	r3, r8
 8010cd2:	463a      	mov	r2, r7
 8010cd4:	4631      	mov	r1, r6
 8010cd6:	9402      	str	r4, [sp, #8]
 8010cd8:	4628      	mov	r0, r5
 8010cda:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8010cdc:	9401      	str	r4, [sp, #4]
 8010cde:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8010ce0:	9400      	str	r4, [sp, #0]
 8010ce2:	f7ff fde1 	bl	80108a8 <rcl_wait_set_resize>
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	2800      	cmp	r0, #0
 8010cea:	d0ae      	beq.n	8010c4a <rcl_wait_set_init+0x32>
 8010cec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010cee:	bb2b      	cbnz	r3, 8010d3c <rcl_wait_set_init+0x124>
 8010cf0:	2600      	movs	r6, #0
 8010cf2:	4628      	mov	r0, r5
 8010cf4:	4633      	mov	r3, r6
 8010cf6:	4632      	mov	r2, r6
 8010cf8:	4631      	mov	r1, r6
 8010cfa:	9600      	str	r6, [sp, #0]
 8010cfc:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8010d00:	f7ff fdd2 	bl	80108a8 <rcl_wait_set_resize>
 8010d04:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8010d06:	2800      	cmp	r0, #0
 8010d08:	d09f      	beq.n	8010c4a <rcl_wait_set_init+0x32>
 8010d0a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8010d0c:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8010d0e:	4798      	blx	r3
 8010d10:	4620      	mov	r0, r4
 8010d12:	632e      	str	r6, [r5, #48]	; 0x30
 8010d14:	b005      	add	sp, #20
 8010d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d1a:	240b      	movs	r4, #11
 8010d1c:	4620      	mov	r0, r4
 8010d1e:	b005      	add	sp, #20
 8010d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d24:	2401      	movs	r4, #1
 8010d26:	f001 fe27 	bl	8012978 <rmw_destroy_wait_set>
 8010d2a:	2800      	cmp	r0, #0
 8010d2c:	bf18      	it	ne
 8010d2e:	f44f 7461 	movne.w	r4, #900	; 0x384
 8010d32:	e7dd      	b.n	8010cf0 <rcl_wait_set_init+0xd8>
 8010d34:	2465      	movs	r4, #101	; 0x65
 8010d36:	e788      	b.n	8010c4a <rcl_wait_set_init+0x32>
 8010d38:	240a      	movs	r4, #10
 8010d3a:	e786      	b.n	8010c4a <rcl_wait_set_init+0x32>
 8010d3c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010d3e:	e7f2      	b.n	8010d26 <rcl_wait_set_init+0x10e>

08010d40 <rcl_wait_set_add_guard_condition>:
 8010d40:	b318      	cbz	r0, 8010d8a <rcl_wait_set_add_guard_condition+0x4a>
 8010d42:	b538      	push	{r3, r4, r5, lr}
 8010d44:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010d46:	4604      	mov	r4, r0
 8010d48:	b30b      	cbz	r3, 8010d8e <rcl_wait_set_add_guard_condition+0x4e>
 8010d4a:	b319      	cbz	r1, 8010d94 <rcl_wait_set_add_guard_condition+0x54>
 8010d4c:	68dd      	ldr	r5, [r3, #12]
 8010d4e:	68c0      	ldr	r0, [r0, #12]
 8010d50:	4285      	cmp	r5, r0
 8010d52:	d217      	bcs.n	8010d84 <rcl_wait_set_add_guard_condition+0x44>
 8010d54:	1c68      	adds	r0, r5, #1
 8010d56:	60d8      	str	r0, [r3, #12]
 8010d58:	68a3      	ldr	r3, [r4, #8]
 8010d5a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8010d5e:	b102      	cbz	r2, 8010d62 <rcl_wait_set_add_guard_condition+0x22>
 8010d60:	6015      	str	r5, [r2, #0]
 8010d62:	4608      	mov	r0, r1
 8010d64:	f7fe feb2 	bl	800facc <rcl_guard_condition_get_rmw_handle>
 8010d68:	b150      	cbz	r0, 8010d80 <rcl_wait_set_add_guard_condition+0x40>
 8010d6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010d6c:	6842      	ldr	r2, [r0, #4]
 8010d6e:	2000      	movs	r0, #0
 8010d70:	695b      	ldr	r3, [r3, #20]
 8010d72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d76:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010d78:	6913      	ldr	r3, [r2, #16]
 8010d7a:	3301      	adds	r3, #1
 8010d7c:	6113      	str	r3, [r2, #16]
 8010d7e:	bd38      	pop	{r3, r4, r5, pc}
 8010d80:	2001      	movs	r0, #1
 8010d82:	bd38      	pop	{r3, r4, r5, pc}
 8010d84:	f240 3086 	movw	r0, #902	; 0x386
 8010d88:	bd38      	pop	{r3, r4, r5, pc}
 8010d8a:	200b      	movs	r0, #11
 8010d8c:	4770      	bx	lr
 8010d8e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010d92:	bd38      	pop	{r3, r4, r5, pc}
 8010d94:	200b      	movs	r0, #11
 8010d96:	bd38      	pop	{r3, r4, r5, pc}

08010d98 <rcl_wait_set_add_timer>:
 8010d98:	b328      	cbz	r0, 8010de6 <rcl_wait_set_add_timer+0x4e>
 8010d9a:	b538      	push	{r3, r4, r5, lr}
 8010d9c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010d9e:	4604      	mov	r4, r0
 8010da0:	b31b      	cbz	r3, 8010dea <rcl_wait_set_add_timer+0x52>
 8010da2:	b329      	cbz	r1, 8010df0 <rcl_wait_set_add_timer+0x58>
 8010da4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8010da6:	6965      	ldr	r5, [r4, #20]
 8010da8:	42a8      	cmp	r0, r5
 8010daa:	d219      	bcs.n	8010de0 <rcl_wait_set_add_timer+0x48>
 8010dac:	1c45      	adds	r5, r0, #1
 8010dae:	641d      	str	r5, [r3, #64]	; 0x40
 8010db0:	6923      	ldr	r3, [r4, #16]
 8010db2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8010db6:	b102      	cbz	r2, 8010dba <rcl_wait_set_add_timer+0x22>
 8010db8:	6010      	str	r0, [r2, #0]
 8010dba:	4608      	mov	r0, r1
 8010dbc:	f7ff fb9a 	bl	80104f4 <rcl_timer_get_guard_condition>
 8010dc0:	b168      	cbz	r0, 8010dde <rcl_wait_set_add_timer+0x46>
 8010dc2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010dc4:	68e3      	ldr	r3, [r4, #12]
 8010dc6:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8010dc8:	3b01      	subs	r3, #1
 8010dca:	441d      	add	r5, r3
 8010dcc:	f7fe fe7e 	bl	800facc <rcl_guard_condition_get_rmw_handle>
 8010dd0:	b180      	cbz	r0, 8010df4 <rcl_wait_set_add_timer+0x5c>
 8010dd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010dd4:	6842      	ldr	r2, [r0, #4]
 8010dd6:	2000      	movs	r0, #0
 8010dd8:	695b      	ldr	r3, [r3, #20]
 8010dda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010dde:	bd38      	pop	{r3, r4, r5, pc}
 8010de0:	f240 3086 	movw	r0, #902	; 0x386
 8010de4:	bd38      	pop	{r3, r4, r5, pc}
 8010de6:	200b      	movs	r0, #11
 8010de8:	4770      	bx	lr
 8010dea:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010dee:	bd38      	pop	{r3, r4, r5, pc}
 8010df0:	200b      	movs	r0, #11
 8010df2:	bd38      	pop	{r3, r4, r5, pc}
 8010df4:	2001      	movs	r0, #1
 8010df6:	bd38      	pop	{r3, r4, r5, pc}

08010df8 <rcl_wait_set_add_client>:
 8010df8:	b318      	cbz	r0, 8010e42 <rcl_wait_set_add_client+0x4a>
 8010dfa:	b538      	push	{r3, r4, r5, lr}
 8010dfc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010dfe:	4604      	mov	r4, r0
 8010e00:	b30b      	cbz	r3, 8010e46 <rcl_wait_set_add_client+0x4e>
 8010e02:	b319      	cbz	r1, 8010e4c <rcl_wait_set_add_client+0x54>
 8010e04:	699d      	ldr	r5, [r3, #24]
 8010e06:	69c0      	ldr	r0, [r0, #28]
 8010e08:	4285      	cmp	r5, r0
 8010e0a:	d217      	bcs.n	8010e3c <rcl_wait_set_add_client+0x44>
 8010e0c:	1c68      	adds	r0, r5, #1
 8010e0e:	6198      	str	r0, [r3, #24]
 8010e10:	69a3      	ldr	r3, [r4, #24]
 8010e12:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8010e16:	b102      	cbz	r2, 8010e1a <rcl_wait_set_add_client+0x22>
 8010e18:	6015      	str	r5, [r2, #0]
 8010e1a:	4608      	mov	r0, r1
 8010e1c:	f7fe fc98 	bl	800f750 <rcl_client_get_rmw_handle>
 8010e20:	b150      	cbz	r0, 8010e38 <rcl_wait_set_add_client+0x40>
 8010e22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e24:	6842      	ldr	r2, [r0, #4]
 8010e26:	2000      	movs	r0, #0
 8010e28:	6a1b      	ldr	r3, [r3, #32]
 8010e2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e2e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010e30:	69d3      	ldr	r3, [r2, #28]
 8010e32:	3301      	adds	r3, #1
 8010e34:	61d3      	str	r3, [r2, #28]
 8010e36:	bd38      	pop	{r3, r4, r5, pc}
 8010e38:	2001      	movs	r0, #1
 8010e3a:	bd38      	pop	{r3, r4, r5, pc}
 8010e3c:	f240 3086 	movw	r0, #902	; 0x386
 8010e40:	bd38      	pop	{r3, r4, r5, pc}
 8010e42:	200b      	movs	r0, #11
 8010e44:	4770      	bx	lr
 8010e46:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010e4a:	bd38      	pop	{r3, r4, r5, pc}
 8010e4c:	200b      	movs	r0, #11
 8010e4e:	bd38      	pop	{r3, r4, r5, pc}

08010e50 <rcl_wait_set_add_service>:
 8010e50:	b318      	cbz	r0, 8010e9a <rcl_wait_set_add_service+0x4a>
 8010e52:	b538      	push	{r3, r4, r5, lr}
 8010e54:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010e56:	4604      	mov	r4, r0
 8010e58:	b30b      	cbz	r3, 8010e9e <rcl_wait_set_add_service+0x4e>
 8010e5a:	b319      	cbz	r1, 8010ea4 <rcl_wait_set_add_service+0x54>
 8010e5c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8010e5e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010e60:	4285      	cmp	r5, r0
 8010e62:	d217      	bcs.n	8010e94 <rcl_wait_set_add_service+0x44>
 8010e64:	1c68      	adds	r0, r5, #1
 8010e66:	6258      	str	r0, [r3, #36]	; 0x24
 8010e68:	6a23      	ldr	r3, [r4, #32]
 8010e6a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8010e6e:	b102      	cbz	r2, 8010e72 <rcl_wait_set_add_service+0x22>
 8010e70:	6015      	str	r5, [r2, #0]
 8010e72:	4608      	mov	r0, r1
 8010e74:	f7f8 fe58 	bl	8009b28 <rcl_service_get_rmw_handle>
 8010e78:	b150      	cbz	r0, 8010e90 <rcl_wait_set_add_service+0x40>
 8010e7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e7c:	6842      	ldr	r2, [r0, #4]
 8010e7e:	2000      	movs	r0, #0
 8010e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e86:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010e88:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	6293      	str	r3, [r2, #40]	; 0x28
 8010e8e:	bd38      	pop	{r3, r4, r5, pc}
 8010e90:	2001      	movs	r0, #1
 8010e92:	bd38      	pop	{r3, r4, r5, pc}
 8010e94:	f240 3086 	movw	r0, #902	; 0x386
 8010e98:	bd38      	pop	{r3, r4, r5, pc}
 8010e9a:	200b      	movs	r0, #11
 8010e9c:	4770      	bx	lr
 8010e9e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010ea2:	bd38      	pop	{r3, r4, r5, pc}
 8010ea4:	200b      	movs	r0, #11
 8010ea6:	bd38      	pop	{r3, r4, r5, pc}

08010ea8 <rcl_wait>:
 8010ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eac:	ed2d 8b02 	vpush	{d8}
 8010eb0:	b08d      	sub	sp, #52	; 0x34
 8010eb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010eb6:	2800      	cmp	r0, #0
 8010eb8:	f000 814f 	beq.w	801115a <rcl_wait+0x2b2>
 8010ebc:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8010ebe:	4605      	mov	r5, r0
 8010ec0:	2e00      	cmp	r6, #0
 8010ec2:	f000 811a 	beq.w	80110fa <rcl_wait+0x252>
 8010ec6:	6843      	ldr	r3, [r0, #4]
 8010ec8:	b983      	cbnz	r3, 8010eec <rcl_wait+0x44>
 8010eca:	68eb      	ldr	r3, [r5, #12]
 8010ecc:	b973      	cbnz	r3, 8010eec <rcl_wait+0x44>
 8010ece:	696b      	ldr	r3, [r5, #20]
 8010ed0:	b963      	cbnz	r3, 8010eec <rcl_wait+0x44>
 8010ed2:	69eb      	ldr	r3, [r5, #28]
 8010ed4:	b953      	cbnz	r3, 8010eec <rcl_wait+0x44>
 8010ed6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010ed8:	b943      	cbnz	r3, 8010eec <rcl_wait+0x44>
 8010eda:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8010edc:	b933      	cbnz	r3, 8010eec <rcl_wait+0x44>
 8010ede:	f240 3085 	movw	r0, #901	; 0x385
 8010ee2:	b00d      	add	sp, #52	; 0x34
 8010ee4:	ecbd 8b02 	vpop	{d8}
 8010ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eec:	9b04      	ldr	r3, [sp, #16]
 8010eee:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8010ef0:	2b01      	cmp	r3, #1
 8010ef2:	9b05      	ldr	r3, [sp, #20]
 8010ef4:	f173 0300 	sbcs.w	r3, r3, #0
 8010ef8:	f2c0 80f8 	blt.w	80110ec <rcl_wait+0x244>
 8010efc:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8010f00:	2a00      	cmp	r2, #0
 8010f02:	f000 810f 	beq.w	8011124 <rcl_wait+0x27c>
 8010f06:	2400      	movs	r4, #0
 8010f08:	4613      	mov	r3, r2
 8010f0a:	f240 3921 	movw	r9, #801	; 0x321
 8010f0e:	4632      	mov	r2, r6
 8010f10:	46a2      	mov	sl, r4
 8010f12:	46a3      	mov	fp, r4
 8010f14:	ed9f 8b98 	vldr	d8, [pc, #608]	; 8011178 <rcl_wait+0x2d0>
 8010f18:	e014      	b.n	8010f44 <rcl_wait+0x9c>
 8010f1a:	2800      	cmp	r0, #0
 8010f1c:	d1e1      	bne.n	8010ee2 <rcl_wait+0x3a>
 8010f1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010f22:	4542      	cmp	r2, r8
 8010f24:	eb73 0107 	sbcs.w	r1, r3, r7
 8010f28:	da03      	bge.n	8010f32 <rcl_wait+0x8a>
 8010f2a:	4690      	mov	r8, r2
 8010f2c:	461f      	mov	r7, r3
 8010f2e:	f04f 0b01 	mov.w	fp, #1
 8010f32:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8010f34:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010f36:	3401      	adds	r4, #1
 8010f38:	f14a 0a00 	adc.w	sl, sl, #0
 8010f3c:	429c      	cmp	r4, r3
 8010f3e:	f17a 0100 	sbcs.w	r1, sl, #0
 8010f42:	d228      	bcs.n	8010f96 <rcl_wait+0xee>
 8010f44:	6928      	ldr	r0, [r5, #16]
 8010f46:	a908      	add	r1, sp, #32
 8010f48:	00a6      	lsls	r6, r4, #2
 8010f4a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010f4e:	2800      	cmp	r0, #0
 8010f50:	d0f1      	beq.n	8010f36 <rcl_wait+0x8e>
 8010f52:	68eb      	ldr	r3, [r5, #12]
 8010f54:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8010f58:	4423      	add	r3, r4
 8010f5a:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8010f5e:	f1be 0f00 	cmp.w	lr, #0
 8010f62:	d006      	beq.n	8010f72 <rcl_wait+0xca>
 8010f64:	6913      	ldr	r3, [r2, #16]
 8010f66:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8010f6a:	3301      	adds	r3, #1
 8010f6c:	6113      	str	r3, [r2, #16]
 8010f6e:	692b      	ldr	r3, [r5, #16]
 8010f70:	5998      	ldr	r0, [r3, r6]
 8010f72:	ed8d 8b08 	vstr	d8, [sp, #32]
 8010f76:	f7ff fa8b 	bl	8010490 <rcl_timer_get_time_until_next_call>
 8010f7a:	4548      	cmp	r0, r9
 8010f7c:	d1cd      	bne.n	8010f1a <rcl_wait+0x72>
 8010f7e:	692b      	ldr	r3, [r5, #16]
 8010f80:	2200      	movs	r2, #0
 8010f82:	3401      	adds	r4, #1
 8010f84:	519a      	str	r2, [r3, r6]
 8010f86:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8010f88:	f14a 0a00 	adc.w	sl, sl, #0
 8010f8c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010f8e:	429c      	cmp	r4, r3
 8010f90:	f17a 0100 	sbcs.w	r1, sl, #0
 8010f94:	d3d6      	bcc.n	8010f44 <rcl_wait+0x9c>
 8010f96:	4659      	mov	r1, fp
 8010f98:	4616      	mov	r6, r2
 8010f9a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8010f9e:	4313      	orrs	r3, r2
 8010fa0:	f040 80b4 	bne.w	801110c <rcl_wait+0x264>
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	460c      	mov	r4, r1
 8010faa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010fae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010fb2:	ab08      	add	r3, sp, #32
 8010fb4:	9302      	str	r3, [sp, #8]
 8010fb6:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8010fba:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8010fbc:	f106 0110 	add.w	r1, r6, #16
 8010fc0:	9300      	str	r3, [sp, #0]
 8010fc2:	1d30      	adds	r0, r6, #4
 8010fc4:	f106 031c 	add.w	r3, r6, #28
 8010fc8:	9201      	str	r2, [sp, #4]
 8010fca:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8010fce:	f001 fb65 	bl	801269c <rmw_wait>
 8010fd2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010fd4:	4680      	mov	r8, r0
 8010fd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010fd8:	b1e2      	cbz	r2, 8011014 <rcl_wait+0x16c>
 8010fda:	f04f 0900 	mov.w	r9, #0
 8010fde:	464f      	mov	r7, r9
 8010fe0:	692a      	ldr	r2, [r5, #16]
 8010fe2:	f10d 011f 	add.w	r1, sp, #31
 8010fe6:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8010fea:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8010fee:	b160      	cbz	r0, 801100a <rcl_wait+0x162>
 8010ff0:	f88d 701f 	strb.w	r7, [sp, #31]
 8010ff4:	f7ff fa10 	bl	8010418 <rcl_timer_is_ready>
 8010ff8:	2800      	cmp	r0, #0
 8010ffa:	f47f af72 	bne.w	8010ee2 <rcl_wait+0x3a>
 8010ffe:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8011002:	b90b      	cbnz	r3, 8011008 <rcl_wait+0x160>
 8011004:	692a      	ldr	r2, [r5, #16]
 8011006:	5193      	str	r3, [r2, r6]
 8011008:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801100a:	f109 0901 	add.w	r9, r9, #1
 801100e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011010:	454a      	cmp	r2, r9
 8011012:	d8e5      	bhi.n	8010fe0 <rcl_wait+0x138>
 8011014:	f038 0002 	bics.w	r0, r8, #2
 8011018:	d176      	bne.n	8011108 <rcl_wait+0x260>
 801101a:	686f      	ldr	r7, [r5, #4]
 801101c:	b17f      	cbz	r7, 801103e <rcl_wait+0x196>
 801101e:	4602      	mov	r2, r0
 8011020:	e002      	b.n	8011028 <rcl_wait+0x180>
 8011022:	3201      	adds	r2, #1
 8011024:	42ba      	cmp	r2, r7
 8011026:	d00a      	beq.n	801103e <rcl_wait+0x196>
 8011028:	6899      	ldr	r1, [r3, #8]
 801102a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801102e:	2900      	cmp	r1, #0
 8011030:	d1f7      	bne.n	8011022 <rcl_wait+0x17a>
 8011032:	682e      	ldr	r6, [r5, #0]
 8011034:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8011038:	3201      	adds	r2, #1
 801103a:	42ba      	cmp	r2, r7
 801103c:	d1f4      	bne.n	8011028 <rcl_wait+0x180>
 801103e:	68ef      	ldr	r7, [r5, #12]
 8011040:	b17f      	cbz	r7, 8011062 <rcl_wait+0x1ba>
 8011042:	2200      	movs	r2, #0
 8011044:	e002      	b.n	801104c <rcl_wait+0x1a4>
 8011046:	3201      	adds	r2, #1
 8011048:	42ba      	cmp	r2, r7
 801104a:	d00a      	beq.n	8011062 <rcl_wait+0x1ba>
 801104c:	6959      	ldr	r1, [r3, #20]
 801104e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011052:	2900      	cmp	r1, #0
 8011054:	d1f7      	bne.n	8011046 <rcl_wait+0x19e>
 8011056:	68ae      	ldr	r6, [r5, #8]
 8011058:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801105c:	3201      	adds	r2, #1
 801105e:	42ba      	cmp	r2, r7
 8011060:	d1f4      	bne.n	801104c <rcl_wait+0x1a4>
 8011062:	69ef      	ldr	r7, [r5, #28]
 8011064:	b17f      	cbz	r7, 8011086 <rcl_wait+0x1de>
 8011066:	2200      	movs	r2, #0
 8011068:	e002      	b.n	8011070 <rcl_wait+0x1c8>
 801106a:	3201      	adds	r2, #1
 801106c:	42ba      	cmp	r2, r7
 801106e:	d00a      	beq.n	8011086 <rcl_wait+0x1de>
 8011070:	6a19      	ldr	r1, [r3, #32]
 8011072:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011076:	2900      	cmp	r1, #0
 8011078:	d1f7      	bne.n	801106a <rcl_wait+0x1c2>
 801107a:	69ae      	ldr	r6, [r5, #24]
 801107c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8011080:	3201      	adds	r2, #1
 8011082:	42ba      	cmp	r2, r7
 8011084:	d1f4      	bne.n	8011070 <rcl_wait+0x1c8>
 8011086:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8011088:	b17f      	cbz	r7, 80110aa <rcl_wait+0x202>
 801108a:	2200      	movs	r2, #0
 801108c:	e002      	b.n	8011094 <rcl_wait+0x1ec>
 801108e:	3201      	adds	r2, #1
 8011090:	42ba      	cmp	r2, r7
 8011092:	d00a      	beq.n	80110aa <rcl_wait+0x202>
 8011094:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011096:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801109a:	2900      	cmp	r1, #0
 801109c:	d1f7      	bne.n	801108e <rcl_wait+0x1e6>
 801109e:	6a2e      	ldr	r6, [r5, #32]
 80110a0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80110a4:	3201      	adds	r2, #1
 80110a6:	42ba      	cmp	r2, r7
 80110a8:	d1f4      	bne.n	8011094 <rcl_wait+0x1ec>
 80110aa:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 80110ac:	b17f      	cbz	r7, 80110ce <rcl_wait+0x226>
 80110ae:	2200      	movs	r2, #0
 80110b0:	e002      	b.n	80110b8 <rcl_wait+0x210>
 80110b2:	3201      	adds	r2, #1
 80110b4:	42ba      	cmp	r2, r7
 80110b6:	d00a      	beq.n	80110ce <rcl_wait+0x226>
 80110b8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80110ba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80110be:	2900      	cmp	r1, #0
 80110c0:	d1f7      	bne.n	80110b2 <rcl_wait+0x20a>
 80110c2:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80110c4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80110c8:	3201      	adds	r2, #1
 80110ca:	42ba      	cmp	r2, r7
 80110cc:	d1f4      	bne.n	80110b8 <rcl_wait+0x210>
 80110ce:	f1b8 0f02 	cmp.w	r8, #2
 80110d2:	f47f af06 	bne.w	8010ee2 <rcl_wait+0x3a>
 80110d6:	f084 0301 	eor.w	r3, r4, #1
 80110da:	b2db      	uxtb	r3, r3
 80110dc:	2b00      	cmp	r3, #0
 80110de:	bf18      	it	ne
 80110e0:	2002      	movne	r0, #2
 80110e2:	b00d      	add	sp, #52	; 0x34
 80110e4:	ecbd 8b02 	vpop	{d8}
 80110e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ec:	2a00      	cmp	r2, #0
 80110ee:	d03a      	beq.n	8011166 <rcl_wait+0x2be>
 80110f0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80110f4:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80110f8:	e705      	b.n	8010f06 <rcl_wait+0x5e>
 80110fa:	f44f 7061 	mov.w	r0, #900	; 0x384
 80110fe:	b00d      	add	sp, #52	; 0x34
 8011100:	ecbd 8b02 	vpop	{d8}
 8011104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011108:	2001      	movs	r0, #1
 801110a:	e6ea      	b.n	8010ee2 <rcl_wait+0x3a>
 801110c:	9b04      	ldr	r3, [sp, #16]
 801110e:	460c      	mov	r4, r1
 8011110:	2b01      	cmp	r3, #1
 8011112:	9b05      	ldr	r3, [sp, #20]
 8011114:	f173 0300 	sbcs.w	r3, r3, #0
 8011118:	bfa8      	it	ge
 801111a:	f044 0401 	orrge.w	r4, r4, #1
 801111e:	b914      	cbnz	r4, 8011126 <rcl_wait+0x27e>
 8011120:	4623      	mov	r3, r4
 8011122:	e747      	b.n	8010fb4 <rcl_wait+0x10c>
 8011124:	4611      	mov	r1, r2
 8011126:	2f00      	cmp	r7, #0
 8011128:	da02      	bge.n	8011130 <rcl_wait+0x288>
 801112a:	f04f 0800 	mov.w	r8, #0
 801112e:	4647      	mov	r7, r8
 8011130:	460c      	mov	r4, r1
 8011132:	4640      	mov	r0, r8
 8011134:	4639      	mov	r1, r7
 8011136:	a312      	add	r3, pc, #72	; (adr r3, 8011180 <rcl_wait+0x2d8>)
 8011138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801113c:	f7ef f8e8 	bl	8000310 <__aeabi_ldivmod>
 8011140:	a30f      	add	r3, pc, #60	; (adr r3, 8011180 <rcl_wait+0x2d8>)
 8011142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011146:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801114a:	4640      	mov	r0, r8
 801114c:	4639      	mov	r1, r7
 801114e:	f7ef f8df 	bl	8000310 <__aeabi_ldivmod>
 8011152:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011156:	ab08      	add	r3, sp, #32
 8011158:	e72c      	b.n	8010fb4 <rcl_wait+0x10c>
 801115a:	200b      	movs	r0, #11
 801115c:	b00d      	add	sp, #52	; 0x34
 801115e:	ecbd 8b02 	vpop	{d8}
 8011162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011166:	4611      	mov	r1, r2
 8011168:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801116c:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8011170:	e713      	b.n	8010f9a <rcl_wait+0xf2>
 8011172:	bf00      	nop
 8011174:	f3af 8000 	nop.w
 8011178:	ffffffff 	.word	0xffffffff
 801117c:	7fffffff 	.word	0x7fffffff
 8011180:	3b9aca00 	.word	0x3b9aca00
 8011184:	00000000 	.word	0x00000000

08011188 <rcl_action_take_goal_response>:
 8011188:	2800      	cmp	r0, #0
 801118a:	d039      	beq.n	8011200 <rcl_action_take_goal_response+0x78>
 801118c:	b570      	push	{r4, r5, r6, lr}
 801118e:	4604      	mov	r4, r0
 8011190:	6800      	ldr	r0, [r0, #0]
 8011192:	b380      	cbz	r0, 80111f6 <rcl_action_take_goal_response+0x6e>
 8011194:	460e      	mov	r6, r1
 8011196:	4615      	mov	r5, r2
 8011198:	f7fe fb62 	bl	800f860 <rcl_client_is_valid>
 801119c:	b330      	cbz	r0, 80111ec <rcl_action_take_goal_response+0x64>
 801119e:	6820      	ldr	r0, [r4, #0]
 80111a0:	3004      	adds	r0, #4
 80111a2:	f7fe fb5d 	bl	800f860 <rcl_client_is_valid>
 80111a6:	b308      	cbz	r0, 80111ec <rcl_action_take_goal_response+0x64>
 80111a8:	6820      	ldr	r0, [r4, #0]
 80111aa:	3008      	adds	r0, #8
 80111ac:	f7fe fb58 	bl	800f860 <rcl_client_is_valid>
 80111b0:	b1e0      	cbz	r0, 80111ec <rcl_action_take_goal_response+0x64>
 80111b2:	6820      	ldr	r0, [r4, #0]
 80111b4:	300c      	adds	r0, #12
 80111b6:	f7fe ffe7 	bl	8010188 <rcl_subscription_is_valid>
 80111ba:	b1b8      	cbz	r0, 80111ec <rcl_action_take_goal_response+0x64>
 80111bc:	6820      	ldr	r0, [r4, #0]
 80111be:	3010      	adds	r0, #16
 80111c0:	f7fe ffe2 	bl	8010188 <rcl_subscription_is_valid>
 80111c4:	b190      	cbz	r0, 80111ec <rcl_action_take_goal_response+0x64>
 80111c6:	b1cd      	cbz	r5, 80111fc <rcl_action_take_goal_response+0x74>
 80111c8:	b1c6      	cbz	r6, 80111fc <rcl_action_take_goal_response+0x74>
 80111ca:	462a      	mov	r2, r5
 80111cc:	4631      	mov	r1, r6
 80111ce:	6820      	ldr	r0, [r4, #0]
 80111d0:	f7fe fafe 	bl	800f7d0 <rcl_take_response>
 80111d4:	b148      	cbz	r0, 80111ea <rcl_action_take_goal_response+0x62>
 80111d6:	280a      	cmp	r0, #10
 80111d8:	d007      	beq.n	80111ea <rcl_action_take_goal_response+0x62>
 80111da:	f240 12f5 	movw	r2, #501	; 0x1f5
 80111de:	f640 0337 	movw	r3, #2103	; 0x837
 80111e2:	4290      	cmp	r0, r2
 80111e4:	bf0c      	ite	eq
 80111e6:	4618      	moveq	r0, r3
 80111e8:	2001      	movne	r0, #1
 80111ea:	bd70      	pop	{r4, r5, r6, pc}
 80111ec:	f7f9 fc68 	bl	800aac0 <rcutils_reset_error>
 80111f0:	f640 0036 	movw	r0, #2102	; 0x836
 80111f4:	bd70      	pop	{r4, r5, r6, pc}
 80111f6:	f640 0036 	movw	r0, #2102	; 0x836
 80111fa:	bd70      	pop	{r4, r5, r6, pc}
 80111fc:	200b      	movs	r0, #11
 80111fe:	bd70      	pop	{r4, r5, r6, pc}
 8011200:	f640 0036 	movw	r0, #2102	; 0x836
 8011204:	4770      	bx	lr
 8011206:	bf00      	nop

08011208 <rcl_action_send_result_request>:
 8011208:	b390      	cbz	r0, 8011270 <rcl_action_send_result_request+0x68>
 801120a:	b570      	push	{r4, r5, r6, lr}
 801120c:	4604      	mov	r4, r0
 801120e:	6800      	ldr	r0, [r0, #0]
 8011210:	b348      	cbz	r0, 8011266 <rcl_action_send_result_request+0x5e>
 8011212:	460e      	mov	r6, r1
 8011214:	4615      	mov	r5, r2
 8011216:	f7fe fb23 	bl	800f860 <rcl_client_is_valid>
 801121a:	b1f8      	cbz	r0, 801125c <rcl_action_send_result_request+0x54>
 801121c:	6820      	ldr	r0, [r4, #0]
 801121e:	3004      	adds	r0, #4
 8011220:	f7fe fb1e 	bl	800f860 <rcl_client_is_valid>
 8011224:	b1d0      	cbz	r0, 801125c <rcl_action_send_result_request+0x54>
 8011226:	6820      	ldr	r0, [r4, #0]
 8011228:	3008      	adds	r0, #8
 801122a:	f7fe fb19 	bl	800f860 <rcl_client_is_valid>
 801122e:	b1a8      	cbz	r0, 801125c <rcl_action_send_result_request+0x54>
 8011230:	6820      	ldr	r0, [r4, #0]
 8011232:	300c      	adds	r0, #12
 8011234:	f7fe ffa8 	bl	8010188 <rcl_subscription_is_valid>
 8011238:	b180      	cbz	r0, 801125c <rcl_action_send_result_request+0x54>
 801123a:	6820      	ldr	r0, [r4, #0]
 801123c:	3010      	adds	r0, #16
 801123e:	f7fe ffa3 	bl	8010188 <rcl_subscription_is_valid>
 8011242:	b158      	cbz	r0, 801125c <rcl_action_send_result_request+0x54>
 8011244:	b195      	cbz	r5, 801126c <rcl_action_send_result_request+0x64>
 8011246:	b18e      	cbz	r6, 801126c <rcl_action_send_result_request+0x64>
 8011248:	6820      	ldr	r0, [r4, #0]
 801124a:	462a      	mov	r2, r5
 801124c:	4631      	mov	r1, r6
 801124e:	3008      	adds	r0, #8
 8011250:	f7fe fa84 	bl	800f75c <rcl_send_request>
 8011254:	3800      	subs	r0, #0
 8011256:	bf18      	it	ne
 8011258:	2001      	movne	r0, #1
 801125a:	bd70      	pop	{r4, r5, r6, pc}
 801125c:	f7f9 fc30 	bl	800aac0 <rcutils_reset_error>
 8011260:	f640 0036 	movw	r0, #2102	; 0x836
 8011264:	bd70      	pop	{r4, r5, r6, pc}
 8011266:	f640 0036 	movw	r0, #2102	; 0x836
 801126a:	bd70      	pop	{r4, r5, r6, pc}
 801126c:	200b      	movs	r0, #11
 801126e:	bd70      	pop	{r4, r5, r6, pc}
 8011270:	f640 0036 	movw	r0, #2102	; 0x836
 8011274:	4770      	bx	lr
 8011276:	bf00      	nop

08011278 <rcl_action_take_result_response>:
 8011278:	2800      	cmp	r0, #0
 801127a:	d03a      	beq.n	80112f2 <rcl_action_take_result_response+0x7a>
 801127c:	b570      	push	{r4, r5, r6, lr}
 801127e:	4604      	mov	r4, r0
 8011280:	6800      	ldr	r0, [r0, #0]
 8011282:	b388      	cbz	r0, 80112e8 <rcl_action_take_result_response+0x70>
 8011284:	460e      	mov	r6, r1
 8011286:	4615      	mov	r5, r2
 8011288:	f7fe faea 	bl	800f860 <rcl_client_is_valid>
 801128c:	b338      	cbz	r0, 80112de <rcl_action_take_result_response+0x66>
 801128e:	6820      	ldr	r0, [r4, #0]
 8011290:	3004      	adds	r0, #4
 8011292:	f7fe fae5 	bl	800f860 <rcl_client_is_valid>
 8011296:	b310      	cbz	r0, 80112de <rcl_action_take_result_response+0x66>
 8011298:	6820      	ldr	r0, [r4, #0]
 801129a:	3008      	adds	r0, #8
 801129c:	f7fe fae0 	bl	800f860 <rcl_client_is_valid>
 80112a0:	b1e8      	cbz	r0, 80112de <rcl_action_take_result_response+0x66>
 80112a2:	6820      	ldr	r0, [r4, #0]
 80112a4:	300c      	adds	r0, #12
 80112a6:	f7fe ff6f 	bl	8010188 <rcl_subscription_is_valid>
 80112aa:	b1c0      	cbz	r0, 80112de <rcl_action_take_result_response+0x66>
 80112ac:	6820      	ldr	r0, [r4, #0]
 80112ae:	3010      	adds	r0, #16
 80112b0:	f7fe ff6a 	bl	8010188 <rcl_subscription_is_valid>
 80112b4:	b198      	cbz	r0, 80112de <rcl_action_take_result_response+0x66>
 80112b6:	b1d5      	cbz	r5, 80112ee <rcl_action_take_result_response+0x76>
 80112b8:	b1ce      	cbz	r6, 80112ee <rcl_action_take_result_response+0x76>
 80112ba:	6820      	ldr	r0, [r4, #0]
 80112bc:	462a      	mov	r2, r5
 80112be:	4631      	mov	r1, r6
 80112c0:	3008      	adds	r0, #8
 80112c2:	f7fe fa85 	bl	800f7d0 <rcl_take_response>
 80112c6:	b148      	cbz	r0, 80112dc <rcl_action_take_result_response+0x64>
 80112c8:	280a      	cmp	r0, #10
 80112ca:	d007      	beq.n	80112dc <rcl_action_take_result_response+0x64>
 80112cc:	f240 12f5 	movw	r2, #501	; 0x1f5
 80112d0:	f640 0337 	movw	r3, #2103	; 0x837
 80112d4:	4290      	cmp	r0, r2
 80112d6:	bf0c      	ite	eq
 80112d8:	4618      	moveq	r0, r3
 80112da:	2001      	movne	r0, #1
 80112dc:	bd70      	pop	{r4, r5, r6, pc}
 80112de:	f7f9 fbef 	bl	800aac0 <rcutils_reset_error>
 80112e2:	f640 0036 	movw	r0, #2102	; 0x836
 80112e6:	bd70      	pop	{r4, r5, r6, pc}
 80112e8:	f640 0036 	movw	r0, #2102	; 0x836
 80112ec:	bd70      	pop	{r4, r5, r6, pc}
 80112ee:	200b      	movs	r0, #11
 80112f0:	bd70      	pop	{r4, r5, r6, pc}
 80112f2:	f640 0036 	movw	r0, #2102	; 0x836
 80112f6:	4770      	bx	lr

080112f8 <rcl_action_take_cancel_response>:
 80112f8:	2800      	cmp	r0, #0
 80112fa:	d03a      	beq.n	8011372 <rcl_action_take_cancel_response+0x7a>
 80112fc:	b570      	push	{r4, r5, r6, lr}
 80112fe:	4604      	mov	r4, r0
 8011300:	6800      	ldr	r0, [r0, #0]
 8011302:	b388      	cbz	r0, 8011368 <rcl_action_take_cancel_response+0x70>
 8011304:	460e      	mov	r6, r1
 8011306:	4615      	mov	r5, r2
 8011308:	f7fe faaa 	bl	800f860 <rcl_client_is_valid>
 801130c:	b338      	cbz	r0, 801135e <rcl_action_take_cancel_response+0x66>
 801130e:	6820      	ldr	r0, [r4, #0]
 8011310:	3004      	adds	r0, #4
 8011312:	f7fe faa5 	bl	800f860 <rcl_client_is_valid>
 8011316:	b310      	cbz	r0, 801135e <rcl_action_take_cancel_response+0x66>
 8011318:	6820      	ldr	r0, [r4, #0]
 801131a:	3008      	adds	r0, #8
 801131c:	f7fe faa0 	bl	800f860 <rcl_client_is_valid>
 8011320:	b1e8      	cbz	r0, 801135e <rcl_action_take_cancel_response+0x66>
 8011322:	6820      	ldr	r0, [r4, #0]
 8011324:	300c      	adds	r0, #12
 8011326:	f7fe ff2f 	bl	8010188 <rcl_subscription_is_valid>
 801132a:	b1c0      	cbz	r0, 801135e <rcl_action_take_cancel_response+0x66>
 801132c:	6820      	ldr	r0, [r4, #0]
 801132e:	3010      	adds	r0, #16
 8011330:	f7fe ff2a 	bl	8010188 <rcl_subscription_is_valid>
 8011334:	b198      	cbz	r0, 801135e <rcl_action_take_cancel_response+0x66>
 8011336:	b1d5      	cbz	r5, 801136e <rcl_action_take_cancel_response+0x76>
 8011338:	b1ce      	cbz	r6, 801136e <rcl_action_take_cancel_response+0x76>
 801133a:	6820      	ldr	r0, [r4, #0]
 801133c:	462a      	mov	r2, r5
 801133e:	4631      	mov	r1, r6
 8011340:	3004      	adds	r0, #4
 8011342:	f7fe fa45 	bl	800f7d0 <rcl_take_response>
 8011346:	b148      	cbz	r0, 801135c <rcl_action_take_cancel_response+0x64>
 8011348:	280a      	cmp	r0, #10
 801134a:	d007      	beq.n	801135c <rcl_action_take_cancel_response+0x64>
 801134c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8011350:	f640 0337 	movw	r3, #2103	; 0x837
 8011354:	4290      	cmp	r0, r2
 8011356:	bf0c      	ite	eq
 8011358:	4618      	moveq	r0, r3
 801135a:	2001      	movne	r0, #1
 801135c:	bd70      	pop	{r4, r5, r6, pc}
 801135e:	f7f9 fbaf 	bl	800aac0 <rcutils_reset_error>
 8011362:	f640 0036 	movw	r0, #2102	; 0x836
 8011366:	bd70      	pop	{r4, r5, r6, pc}
 8011368:	f640 0036 	movw	r0, #2102	; 0x836
 801136c:	bd70      	pop	{r4, r5, r6, pc}
 801136e:	200b      	movs	r0, #11
 8011370:	bd70      	pop	{r4, r5, r6, pc}
 8011372:	f640 0036 	movw	r0, #2102	; 0x836
 8011376:	4770      	bx	lr

08011378 <rcl_action_take_feedback>:
 8011378:	2800      	cmp	r0, #0
 801137a:	d038      	beq.n	80113ee <rcl_action_take_feedback+0x76>
 801137c:	b530      	push	{r4, r5, lr}
 801137e:	4604      	mov	r4, r0
 8011380:	6800      	ldr	r0, [r0, #0]
 8011382:	b091      	sub	sp, #68	; 0x44
 8011384:	b378      	cbz	r0, 80113e6 <rcl_action_take_feedback+0x6e>
 8011386:	460d      	mov	r5, r1
 8011388:	f7fe fa6a 	bl	800f860 <rcl_client_is_valid>
 801138c:	b328      	cbz	r0, 80113da <rcl_action_take_feedback+0x62>
 801138e:	6820      	ldr	r0, [r4, #0]
 8011390:	3004      	adds	r0, #4
 8011392:	f7fe fa65 	bl	800f860 <rcl_client_is_valid>
 8011396:	b300      	cbz	r0, 80113da <rcl_action_take_feedback+0x62>
 8011398:	6820      	ldr	r0, [r4, #0]
 801139a:	3008      	adds	r0, #8
 801139c:	f7fe fa60 	bl	800f860 <rcl_client_is_valid>
 80113a0:	b1d8      	cbz	r0, 80113da <rcl_action_take_feedback+0x62>
 80113a2:	6820      	ldr	r0, [r4, #0]
 80113a4:	300c      	adds	r0, #12
 80113a6:	f7fe feef 	bl	8010188 <rcl_subscription_is_valid>
 80113aa:	b1b0      	cbz	r0, 80113da <rcl_action_take_feedback+0x62>
 80113ac:	6820      	ldr	r0, [r4, #0]
 80113ae:	3010      	adds	r0, #16
 80113b0:	f7fe feea 	bl	8010188 <rcl_subscription_is_valid>
 80113b4:	b188      	cbz	r0, 80113da <rcl_action_take_feedback+0x62>
 80113b6:	b1ed      	cbz	r5, 80113f4 <rcl_action_take_feedback+0x7c>
 80113b8:	6820      	ldr	r0, [r4, #0]
 80113ba:	2300      	movs	r3, #0
 80113bc:	466a      	mov	r2, sp
 80113be:	4629      	mov	r1, r5
 80113c0:	300c      	adds	r0, #12
 80113c2:	f7fe fe85 	bl	80100d0 <rcl_take>
 80113c6:	b160      	cbz	r0, 80113e2 <rcl_action_take_feedback+0x6a>
 80113c8:	f240 1391 	movw	r3, #401	; 0x191
 80113cc:	4298      	cmp	r0, r3
 80113ce:	d014      	beq.n	80113fa <rcl_action_take_feedback+0x82>
 80113d0:	280a      	cmp	r0, #10
 80113d2:	bf18      	it	ne
 80113d4:	2001      	movne	r0, #1
 80113d6:	b011      	add	sp, #68	; 0x44
 80113d8:	bd30      	pop	{r4, r5, pc}
 80113da:	f7f9 fb71 	bl	800aac0 <rcutils_reset_error>
 80113de:	f640 0036 	movw	r0, #2102	; 0x836
 80113e2:	b011      	add	sp, #68	; 0x44
 80113e4:	bd30      	pop	{r4, r5, pc}
 80113e6:	f640 0036 	movw	r0, #2102	; 0x836
 80113ea:	b011      	add	sp, #68	; 0x44
 80113ec:	bd30      	pop	{r4, r5, pc}
 80113ee:	f640 0036 	movw	r0, #2102	; 0x836
 80113f2:	4770      	bx	lr
 80113f4:	200b      	movs	r0, #11
 80113f6:	b011      	add	sp, #68	; 0x44
 80113f8:	bd30      	pop	{r4, r5, pc}
 80113fa:	f640 0037 	movw	r0, #2103	; 0x837
 80113fe:	e7f0      	b.n	80113e2 <rcl_action_take_feedback+0x6a>

08011400 <rcl_action_wait_set_add_action_client>:
 8011400:	2800      	cmp	r0, #0
 8011402:	d048      	beq.n	8011496 <rcl_action_wait_set_add_action_client+0x96>
 8011404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011406:	460c      	mov	r4, r1
 8011408:	2900      	cmp	r1, #0
 801140a:	d03c      	beq.n	8011486 <rcl_action_wait_set_add_action_client+0x86>
 801140c:	4605      	mov	r5, r0
 801140e:	6808      	ldr	r0, [r1, #0]
 8011410:	2800      	cmp	r0, #0
 8011412:	d038      	beq.n	8011486 <rcl_action_wait_set_add_action_client+0x86>
 8011414:	4617      	mov	r7, r2
 8011416:	461e      	mov	r6, r3
 8011418:	f7fe fa22 	bl	800f860 <rcl_client_is_valid>
 801141c:	b3b0      	cbz	r0, 801148c <rcl_action_wait_set_add_action_client+0x8c>
 801141e:	6820      	ldr	r0, [r4, #0]
 8011420:	3004      	adds	r0, #4
 8011422:	f7fe fa1d 	bl	800f860 <rcl_client_is_valid>
 8011426:	b388      	cbz	r0, 801148c <rcl_action_wait_set_add_action_client+0x8c>
 8011428:	6820      	ldr	r0, [r4, #0]
 801142a:	3008      	adds	r0, #8
 801142c:	f7fe fa18 	bl	800f860 <rcl_client_is_valid>
 8011430:	b360      	cbz	r0, 801148c <rcl_action_wait_set_add_action_client+0x8c>
 8011432:	6820      	ldr	r0, [r4, #0]
 8011434:	300c      	adds	r0, #12
 8011436:	f7fe fea7 	bl	8010188 <rcl_subscription_is_valid>
 801143a:	b338      	cbz	r0, 801148c <rcl_action_wait_set_add_action_client+0x8c>
 801143c:	6820      	ldr	r0, [r4, #0]
 801143e:	3010      	adds	r0, #16
 8011440:	f7fe fea2 	bl	8010188 <rcl_subscription_is_valid>
 8011444:	b310      	cbz	r0, 801148c <rcl_action_wait_set_add_action_client+0x8c>
 8011446:	6821      	ldr	r1, [r4, #0]
 8011448:	4628      	mov	r0, r5
 801144a:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 801144e:	f7ff fcd3 	bl	8010df8 <rcl_wait_set_add_client>
 8011452:	b9b8      	cbnz	r0, 8011484 <rcl_action_wait_set_add_action_client+0x84>
 8011454:	6821      	ldr	r1, [r4, #0]
 8011456:	4628      	mov	r0, r5
 8011458:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 801145c:	3104      	adds	r1, #4
 801145e:	f7ff fccb 	bl	8010df8 <rcl_wait_set_add_client>
 8011462:	b978      	cbnz	r0, 8011484 <rcl_action_wait_set_add_action_client+0x84>
 8011464:	6821      	ldr	r1, [r4, #0]
 8011466:	4628      	mov	r0, r5
 8011468:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 801146c:	3108      	adds	r1, #8
 801146e:	f7ff fcc3 	bl	8010df8 <rcl_wait_set_add_client>
 8011472:	b938      	cbnz	r0, 8011484 <rcl_action_wait_set_add_action_client+0x84>
 8011474:	6821      	ldr	r1, [r4, #0]
 8011476:	4628      	mov	r0, r5
 8011478:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 801147c:	310c      	adds	r1, #12
 801147e:	f7ff f96b 	bl	8010758 <rcl_wait_set_add_subscription>
 8011482:	b158      	cbz	r0, 801149c <rcl_action_wait_set_add_action_client+0x9c>
 8011484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011486:	f640 0036 	movw	r0, #2102	; 0x836
 801148a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801148c:	f7f9 fb18 	bl	800aac0 <rcutils_reset_error>
 8011490:	f640 0036 	movw	r0, #2102	; 0x836
 8011494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011496:	f44f 7061 	mov.w	r0, #900	; 0x384
 801149a:	4770      	bx	lr
 801149c:	6821      	ldr	r1, [r4, #0]
 801149e:	4628      	mov	r0, r5
 80114a0:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 80114a4:	3110      	adds	r1, #16
 80114a6:	f7ff f957 	bl	8010758 <rcl_wait_set_add_subscription>
 80114aa:	2800      	cmp	r0, #0
 80114ac:	d1ea      	bne.n	8011484 <rcl_action_wait_set_add_action_client+0x84>
 80114ae:	b11f      	cbz	r7, 80114b8 <rcl_action_wait_set_add_action_client+0xb8>
 80114b0:	6823      	ldr	r3, [r4, #0]
 80114b2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80114b6:	603b      	str	r3, [r7, #0]
 80114b8:	2e00      	cmp	r6, #0
 80114ba:	d0e3      	beq.n	8011484 <rcl_action_wait_set_add_action_client+0x84>
 80114bc:	6823      	ldr	r3, [r4, #0]
 80114be:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80114c2:	6033      	str	r3, [r6, #0]
 80114c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114c6:	bf00      	nop

080114c8 <rcl_action_client_wait_set_get_entities_ready>:
 80114c8:	2800      	cmp	r0, #0
 80114ca:	d050      	beq.n	801156e <rcl_action_client_wait_set_get_entities_ready+0xa6>
 80114cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114d0:	460c      	mov	r4, r1
 80114d2:	2900      	cmp	r1, #0
 80114d4:	d03e      	beq.n	8011554 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80114d6:	4605      	mov	r5, r0
 80114d8:	6808      	ldr	r0, [r1, #0]
 80114da:	2800      	cmp	r0, #0
 80114dc:	d03a      	beq.n	8011554 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80114de:	4616      	mov	r6, r2
 80114e0:	461f      	mov	r7, r3
 80114e2:	f7fe f9bd 	bl	800f860 <rcl_client_is_valid>
 80114e6:	2800      	cmp	r0, #0
 80114e8:	d038      	beq.n	801155c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80114ea:	6820      	ldr	r0, [r4, #0]
 80114ec:	3004      	adds	r0, #4
 80114ee:	f7fe f9b7 	bl	800f860 <rcl_client_is_valid>
 80114f2:	2800      	cmp	r0, #0
 80114f4:	d032      	beq.n	801155c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80114f6:	6820      	ldr	r0, [r4, #0]
 80114f8:	3008      	adds	r0, #8
 80114fa:	f7fe f9b1 	bl	800f860 <rcl_client_is_valid>
 80114fe:	b368      	cbz	r0, 801155c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8011500:	6820      	ldr	r0, [r4, #0]
 8011502:	300c      	adds	r0, #12
 8011504:	f7fe fe40 	bl	8010188 <rcl_subscription_is_valid>
 8011508:	b340      	cbz	r0, 801155c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801150a:	6820      	ldr	r0, [r4, #0]
 801150c:	3010      	adds	r0, #16
 801150e:	f7fe fe3b 	bl	8010188 <rcl_subscription_is_valid>
 8011512:	b318      	cbz	r0, 801155c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8011514:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011518:	2a00      	cmp	r2, #0
 801151a:	bf18      	it	ne
 801151c:	2b00      	cmpne	r3, #0
 801151e:	9b08      	ldr	r3, [sp, #32]
 8011520:	bf0c      	ite	eq
 8011522:	2101      	moveq	r1, #1
 8011524:	2100      	movne	r1, #0
 8011526:	2b00      	cmp	r3, #0
 8011528:	bf08      	it	eq
 801152a:	f041 0101 	orreq.w	r1, r1, #1
 801152e:	2f00      	cmp	r7, #0
 8011530:	bf08      	it	eq
 8011532:	f041 0101 	orreq.w	r1, r1, #1
 8011536:	b9b9      	cbnz	r1, 8011568 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8011538:	b1b6      	cbz	r6, 8011568 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801153a:	6823      	ldr	r3, [r4, #0]
 801153c:	686c      	ldr	r4, [r5, #4]
 801153e:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 8011542:	428a      	cmp	r2, r1
 8011544:	4610      	mov	r0, r2
 8011546:	bf38      	it	cc
 8011548:	4608      	movcc	r0, r1
 801154a:	4284      	cmp	r4, r0
 801154c:	d812      	bhi.n	8011574 <rcl_action_client_wait_set_get_entities_ready+0xac>
 801154e:	2001      	movs	r0, #1
 8011550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011554:	f640 0036 	movw	r0, #2102	; 0x836
 8011558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801155c:	f7f9 fab0 	bl	800aac0 <rcutils_reset_error>
 8011560:	f640 0036 	movw	r0, #2102	; 0x836
 8011564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011568:	200b      	movs	r0, #11
 801156a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801156e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011572:	4770      	bx	lr
 8011574:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 8011578:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 801157c:	45f0      	cmp	r8, lr
 801157e:	4640      	mov	r0, r8
 8011580:	69ec      	ldr	r4, [r5, #28]
 8011582:	bf38      	it	cc
 8011584:	4670      	movcc	r0, lr
 8011586:	4560      	cmp	r0, ip
 8011588:	bf38      	it	cc
 801158a:	4660      	movcc	r0, ip
 801158c:	4284      	cmp	r4, r0
 801158e:	d9de      	bls.n	801154e <rcl_action_client_wait_set_get_entities_ready+0x86>
 8011590:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8011594:	682d      	ldr	r5, [r5, #0]
 8011596:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801159a:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801159e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80115a2:	1a18      	subs	r0, r3, r0
 80115a4:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 80115a8:	f103 0c0c 	add.w	ip, r3, #12
 80115ac:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 80115b0:	fab0 f080 	clz	r0, r0
 80115b4:	eba5 050c 	sub.w	r5, r5, ip
 80115b8:	0940      	lsrs	r0, r0, #5
 80115ba:	fab5 f585 	clz	r5, r5
 80115be:	096d      	lsrs	r5, r5, #5
 80115c0:	7035      	strb	r5, [r6, #0]
 80115c2:	f103 0510 	add.w	r5, r3, #16
 80115c6:	1b64      	subs	r4, r4, r5
 80115c8:	9d08      	ldr	r5, [sp, #32]
 80115ca:	fab4 f484 	clz	r4, r4
 80115ce:	0964      	lsrs	r4, r4, #5
 80115d0:	703c      	strb	r4, [r7, #0]
 80115d2:	1d1c      	adds	r4, r3, #4
 80115d4:	3308      	adds	r3, #8
 80115d6:	7028      	strb	r0, [r5, #0]
 80115d8:	1b09      	subs	r1, r1, r4
 80115da:	2000      	movs	r0, #0
 80115dc:	1ad3      	subs	r3, r2, r3
 80115de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115e0:	fab1 f181 	clz	r1, r1
 80115e4:	fab3 f383 	clz	r3, r3
 80115e8:	0949      	lsrs	r1, r1, #5
 80115ea:	095b      	lsrs	r3, r3, #5
 80115ec:	7011      	strb	r1, [r2, #0]
 80115ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80115f0:	7013      	strb	r3, [r2, #0]
 80115f2:	e7b1      	b.n	8011558 <rcl_action_client_wait_set_get_entities_ready+0x90>

080115f4 <rcl_action_take_goal_request>:
 80115f4:	2800      	cmp	r0, #0
 80115f6:	d039      	beq.n	801166c <rcl_action_take_goal_request+0x78>
 80115f8:	b570      	push	{r4, r5, r6, lr}
 80115fa:	4604      	mov	r4, r0
 80115fc:	6800      	ldr	r0, [r0, #0]
 80115fe:	b380      	cbz	r0, 8011662 <rcl_action_take_goal_request+0x6e>
 8011600:	460e      	mov	r6, r1
 8011602:	4615      	mov	r5, r2
 8011604:	f7f8 faee 	bl	8009be4 <rcl_service_is_valid>
 8011608:	b330      	cbz	r0, 8011658 <rcl_action_take_goal_request+0x64>
 801160a:	6820      	ldr	r0, [r4, #0]
 801160c:	3004      	adds	r0, #4
 801160e:	f7f8 fae9 	bl	8009be4 <rcl_service_is_valid>
 8011612:	b308      	cbz	r0, 8011658 <rcl_action_take_goal_request+0x64>
 8011614:	6820      	ldr	r0, [r4, #0]
 8011616:	3008      	adds	r0, #8
 8011618:	f7f8 fae4 	bl	8009be4 <rcl_service_is_valid>
 801161c:	b1e0      	cbz	r0, 8011658 <rcl_action_take_goal_request+0x64>
 801161e:	6820      	ldr	r0, [r4, #0]
 8011620:	300c      	adds	r0, #12
 8011622:	f002 fa51 	bl	8013ac8 <rcl_publisher_is_valid>
 8011626:	b1b8      	cbz	r0, 8011658 <rcl_action_take_goal_request+0x64>
 8011628:	6820      	ldr	r0, [r4, #0]
 801162a:	3010      	adds	r0, #16
 801162c:	f002 fa4c 	bl	8013ac8 <rcl_publisher_is_valid>
 8011630:	b190      	cbz	r0, 8011658 <rcl_action_take_goal_request+0x64>
 8011632:	b1cd      	cbz	r5, 8011668 <rcl_action_take_goal_request+0x74>
 8011634:	b1c6      	cbz	r6, 8011668 <rcl_action_take_goal_request+0x74>
 8011636:	462a      	mov	r2, r5
 8011638:	4631      	mov	r1, r6
 801163a:	6820      	ldr	r0, [r4, #0]
 801163c:	f7f8 fa7a 	bl	8009b34 <rcl_take_request>
 8011640:	b148      	cbz	r0, 8011656 <rcl_action_take_goal_request+0x62>
 8011642:	280a      	cmp	r0, #10
 8011644:	d007      	beq.n	8011656 <rcl_action_take_goal_request+0x62>
 8011646:	f240 2259 	movw	r2, #601	; 0x259
 801164a:	f640 0399 	movw	r3, #2201	; 0x899
 801164e:	4290      	cmp	r0, r2
 8011650:	bf0c      	ite	eq
 8011652:	4618      	moveq	r0, r3
 8011654:	2001      	movne	r0, #1
 8011656:	bd70      	pop	{r4, r5, r6, pc}
 8011658:	f7f9 fa32 	bl	800aac0 <rcutils_reset_error>
 801165c:	f640 0098 	movw	r0, #2200	; 0x898
 8011660:	bd70      	pop	{r4, r5, r6, pc}
 8011662:	f640 0098 	movw	r0, #2200	; 0x898
 8011666:	bd70      	pop	{r4, r5, r6, pc}
 8011668:	200b      	movs	r0, #11
 801166a:	bd70      	pop	{r4, r5, r6, pc}
 801166c:	f640 0098 	movw	r0, #2200	; 0x898
 8011670:	4770      	bx	lr
 8011672:	bf00      	nop

08011674 <rcl_action_send_goal_response>:
 8011674:	b388      	cbz	r0, 80116da <rcl_action_send_goal_response+0x66>
 8011676:	b570      	push	{r4, r5, r6, lr}
 8011678:	4604      	mov	r4, r0
 801167a:	6800      	ldr	r0, [r0, #0]
 801167c:	b340      	cbz	r0, 80116d0 <rcl_action_send_goal_response+0x5c>
 801167e:	460e      	mov	r6, r1
 8011680:	4615      	mov	r5, r2
 8011682:	f7f8 faaf 	bl	8009be4 <rcl_service_is_valid>
 8011686:	b1f0      	cbz	r0, 80116c6 <rcl_action_send_goal_response+0x52>
 8011688:	6820      	ldr	r0, [r4, #0]
 801168a:	3004      	adds	r0, #4
 801168c:	f7f8 faaa 	bl	8009be4 <rcl_service_is_valid>
 8011690:	b1c8      	cbz	r0, 80116c6 <rcl_action_send_goal_response+0x52>
 8011692:	6820      	ldr	r0, [r4, #0]
 8011694:	3008      	adds	r0, #8
 8011696:	f7f8 faa5 	bl	8009be4 <rcl_service_is_valid>
 801169a:	b1a0      	cbz	r0, 80116c6 <rcl_action_send_goal_response+0x52>
 801169c:	6820      	ldr	r0, [r4, #0]
 801169e:	300c      	adds	r0, #12
 80116a0:	f002 fa12 	bl	8013ac8 <rcl_publisher_is_valid>
 80116a4:	b178      	cbz	r0, 80116c6 <rcl_action_send_goal_response+0x52>
 80116a6:	6820      	ldr	r0, [r4, #0]
 80116a8:	3010      	adds	r0, #16
 80116aa:	f002 fa0d 	bl	8013ac8 <rcl_publisher_is_valid>
 80116ae:	b150      	cbz	r0, 80116c6 <rcl_action_send_goal_response+0x52>
 80116b0:	b18d      	cbz	r5, 80116d6 <rcl_action_send_goal_response+0x62>
 80116b2:	b186      	cbz	r6, 80116d6 <rcl_action_send_goal_response+0x62>
 80116b4:	462a      	mov	r2, r5
 80116b6:	4631      	mov	r1, r6
 80116b8:	6820      	ldr	r0, [r4, #0]
 80116ba:	f7f8 fa7b 	bl	8009bb4 <rcl_send_response>
 80116be:	3800      	subs	r0, #0
 80116c0:	bf18      	it	ne
 80116c2:	2001      	movne	r0, #1
 80116c4:	bd70      	pop	{r4, r5, r6, pc}
 80116c6:	f7f9 f9fb 	bl	800aac0 <rcutils_reset_error>
 80116ca:	f640 0098 	movw	r0, #2200	; 0x898
 80116ce:	bd70      	pop	{r4, r5, r6, pc}
 80116d0:	f640 0098 	movw	r0, #2200	; 0x898
 80116d4:	bd70      	pop	{r4, r5, r6, pc}
 80116d6:	200b      	movs	r0, #11
 80116d8:	bd70      	pop	{r4, r5, r6, pc}
 80116da:	f640 0098 	movw	r0, #2200	; 0x898
 80116de:	4770      	bx	lr

080116e0 <rcl_action_take_result_request>:
 80116e0:	2800      	cmp	r0, #0
 80116e2:	d03a      	beq.n	801175a <rcl_action_take_result_request+0x7a>
 80116e4:	b570      	push	{r4, r5, r6, lr}
 80116e6:	4604      	mov	r4, r0
 80116e8:	6800      	ldr	r0, [r0, #0]
 80116ea:	b388      	cbz	r0, 8011750 <rcl_action_take_result_request+0x70>
 80116ec:	460e      	mov	r6, r1
 80116ee:	4615      	mov	r5, r2
 80116f0:	f7f8 fa78 	bl	8009be4 <rcl_service_is_valid>
 80116f4:	b338      	cbz	r0, 8011746 <rcl_action_take_result_request+0x66>
 80116f6:	6820      	ldr	r0, [r4, #0]
 80116f8:	3004      	adds	r0, #4
 80116fa:	f7f8 fa73 	bl	8009be4 <rcl_service_is_valid>
 80116fe:	b310      	cbz	r0, 8011746 <rcl_action_take_result_request+0x66>
 8011700:	6820      	ldr	r0, [r4, #0]
 8011702:	3008      	adds	r0, #8
 8011704:	f7f8 fa6e 	bl	8009be4 <rcl_service_is_valid>
 8011708:	b1e8      	cbz	r0, 8011746 <rcl_action_take_result_request+0x66>
 801170a:	6820      	ldr	r0, [r4, #0]
 801170c:	300c      	adds	r0, #12
 801170e:	f002 f9db 	bl	8013ac8 <rcl_publisher_is_valid>
 8011712:	b1c0      	cbz	r0, 8011746 <rcl_action_take_result_request+0x66>
 8011714:	6820      	ldr	r0, [r4, #0]
 8011716:	3010      	adds	r0, #16
 8011718:	f002 f9d6 	bl	8013ac8 <rcl_publisher_is_valid>
 801171c:	b198      	cbz	r0, 8011746 <rcl_action_take_result_request+0x66>
 801171e:	b1d5      	cbz	r5, 8011756 <rcl_action_take_result_request+0x76>
 8011720:	b1ce      	cbz	r6, 8011756 <rcl_action_take_result_request+0x76>
 8011722:	6820      	ldr	r0, [r4, #0]
 8011724:	462a      	mov	r2, r5
 8011726:	4631      	mov	r1, r6
 8011728:	3008      	adds	r0, #8
 801172a:	f7f8 fa03 	bl	8009b34 <rcl_take_request>
 801172e:	b148      	cbz	r0, 8011744 <rcl_action_take_result_request+0x64>
 8011730:	280a      	cmp	r0, #10
 8011732:	d007      	beq.n	8011744 <rcl_action_take_result_request+0x64>
 8011734:	f240 2259 	movw	r2, #601	; 0x259
 8011738:	f640 0399 	movw	r3, #2201	; 0x899
 801173c:	4290      	cmp	r0, r2
 801173e:	bf0c      	ite	eq
 8011740:	4618      	moveq	r0, r3
 8011742:	2001      	movne	r0, #1
 8011744:	bd70      	pop	{r4, r5, r6, pc}
 8011746:	f7f9 f9bb 	bl	800aac0 <rcutils_reset_error>
 801174a:	f640 0098 	movw	r0, #2200	; 0x898
 801174e:	bd70      	pop	{r4, r5, r6, pc}
 8011750:	f640 0098 	movw	r0, #2200	; 0x898
 8011754:	bd70      	pop	{r4, r5, r6, pc}
 8011756:	200b      	movs	r0, #11
 8011758:	bd70      	pop	{r4, r5, r6, pc}
 801175a:	f640 0098 	movw	r0, #2200	; 0x898
 801175e:	4770      	bx	lr

08011760 <rcl_action_take_cancel_request>:
 8011760:	2800      	cmp	r0, #0
 8011762:	d03a      	beq.n	80117da <rcl_action_take_cancel_request+0x7a>
 8011764:	b570      	push	{r4, r5, r6, lr}
 8011766:	4604      	mov	r4, r0
 8011768:	6800      	ldr	r0, [r0, #0]
 801176a:	b388      	cbz	r0, 80117d0 <rcl_action_take_cancel_request+0x70>
 801176c:	460e      	mov	r6, r1
 801176e:	4615      	mov	r5, r2
 8011770:	f7f8 fa38 	bl	8009be4 <rcl_service_is_valid>
 8011774:	b338      	cbz	r0, 80117c6 <rcl_action_take_cancel_request+0x66>
 8011776:	6820      	ldr	r0, [r4, #0]
 8011778:	3004      	adds	r0, #4
 801177a:	f7f8 fa33 	bl	8009be4 <rcl_service_is_valid>
 801177e:	b310      	cbz	r0, 80117c6 <rcl_action_take_cancel_request+0x66>
 8011780:	6820      	ldr	r0, [r4, #0]
 8011782:	3008      	adds	r0, #8
 8011784:	f7f8 fa2e 	bl	8009be4 <rcl_service_is_valid>
 8011788:	b1e8      	cbz	r0, 80117c6 <rcl_action_take_cancel_request+0x66>
 801178a:	6820      	ldr	r0, [r4, #0]
 801178c:	300c      	adds	r0, #12
 801178e:	f002 f99b 	bl	8013ac8 <rcl_publisher_is_valid>
 8011792:	b1c0      	cbz	r0, 80117c6 <rcl_action_take_cancel_request+0x66>
 8011794:	6820      	ldr	r0, [r4, #0]
 8011796:	3010      	adds	r0, #16
 8011798:	f002 f996 	bl	8013ac8 <rcl_publisher_is_valid>
 801179c:	b198      	cbz	r0, 80117c6 <rcl_action_take_cancel_request+0x66>
 801179e:	b1d5      	cbz	r5, 80117d6 <rcl_action_take_cancel_request+0x76>
 80117a0:	b1ce      	cbz	r6, 80117d6 <rcl_action_take_cancel_request+0x76>
 80117a2:	6820      	ldr	r0, [r4, #0]
 80117a4:	462a      	mov	r2, r5
 80117a6:	4631      	mov	r1, r6
 80117a8:	3004      	adds	r0, #4
 80117aa:	f7f8 f9c3 	bl	8009b34 <rcl_take_request>
 80117ae:	b148      	cbz	r0, 80117c4 <rcl_action_take_cancel_request+0x64>
 80117b0:	280a      	cmp	r0, #10
 80117b2:	d007      	beq.n	80117c4 <rcl_action_take_cancel_request+0x64>
 80117b4:	f240 2259 	movw	r2, #601	; 0x259
 80117b8:	f640 0399 	movw	r3, #2201	; 0x899
 80117bc:	4290      	cmp	r0, r2
 80117be:	bf0c      	ite	eq
 80117c0:	4618      	moveq	r0, r3
 80117c2:	2001      	movne	r0, #1
 80117c4:	bd70      	pop	{r4, r5, r6, pc}
 80117c6:	f7f9 f97b 	bl	800aac0 <rcutils_reset_error>
 80117ca:	f640 0098 	movw	r0, #2200	; 0x898
 80117ce:	bd70      	pop	{r4, r5, r6, pc}
 80117d0:	f640 0098 	movw	r0, #2200	; 0x898
 80117d4:	bd70      	pop	{r4, r5, r6, pc}
 80117d6:	200b      	movs	r0, #11
 80117d8:	bd70      	pop	{r4, r5, r6, pc}
 80117da:	f640 0098 	movw	r0, #2200	; 0x898
 80117de:	4770      	bx	lr

080117e0 <rcl_action_send_cancel_response>:
 80117e0:	b390      	cbz	r0, 8011848 <rcl_action_send_cancel_response+0x68>
 80117e2:	b570      	push	{r4, r5, r6, lr}
 80117e4:	4604      	mov	r4, r0
 80117e6:	6800      	ldr	r0, [r0, #0]
 80117e8:	b348      	cbz	r0, 801183e <rcl_action_send_cancel_response+0x5e>
 80117ea:	460e      	mov	r6, r1
 80117ec:	4615      	mov	r5, r2
 80117ee:	f7f8 f9f9 	bl	8009be4 <rcl_service_is_valid>
 80117f2:	b1f8      	cbz	r0, 8011834 <rcl_action_send_cancel_response+0x54>
 80117f4:	6820      	ldr	r0, [r4, #0]
 80117f6:	3004      	adds	r0, #4
 80117f8:	f7f8 f9f4 	bl	8009be4 <rcl_service_is_valid>
 80117fc:	b1d0      	cbz	r0, 8011834 <rcl_action_send_cancel_response+0x54>
 80117fe:	6820      	ldr	r0, [r4, #0]
 8011800:	3008      	adds	r0, #8
 8011802:	f7f8 f9ef 	bl	8009be4 <rcl_service_is_valid>
 8011806:	b1a8      	cbz	r0, 8011834 <rcl_action_send_cancel_response+0x54>
 8011808:	6820      	ldr	r0, [r4, #0]
 801180a:	300c      	adds	r0, #12
 801180c:	f002 f95c 	bl	8013ac8 <rcl_publisher_is_valid>
 8011810:	b180      	cbz	r0, 8011834 <rcl_action_send_cancel_response+0x54>
 8011812:	6820      	ldr	r0, [r4, #0]
 8011814:	3010      	adds	r0, #16
 8011816:	f002 f957 	bl	8013ac8 <rcl_publisher_is_valid>
 801181a:	b158      	cbz	r0, 8011834 <rcl_action_send_cancel_response+0x54>
 801181c:	b195      	cbz	r5, 8011844 <rcl_action_send_cancel_response+0x64>
 801181e:	b18e      	cbz	r6, 8011844 <rcl_action_send_cancel_response+0x64>
 8011820:	6820      	ldr	r0, [r4, #0]
 8011822:	462a      	mov	r2, r5
 8011824:	4631      	mov	r1, r6
 8011826:	3004      	adds	r0, #4
 8011828:	f7f8 f9c4 	bl	8009bb4 <rcl_send_response>
 801182c:	3800      	subs	r0, #0
 801182e:	bf18      	it	ne
 8011830:	2001      	movne	r0, #1
 8011832:	bd70      	pop	{r4, r5, r6, pc}
 8011834:	f7f9 f944 	bl	800aac0 <rcutils_reset_error>
 8011838:	f640 0098 	movw	r0, #2200	; 0x898
 801183c:	bd70      	pop	{r4, r5, r6, pc}
 801183e:	f640 0098 	movw	r0, #2200	; 0x898
 8011842:	bd70      	pop	{r4, r5, r6, pc}
 8011844:	200b      	movs	r0, #11
 8011846:	bd70      	pop	{r4, r5, r6, pc}
 8011848:	f640 0098 	movw	r0, #2200	; 0x898
 801184c:	4770      	bx	lr
 801184e:	bf00      	nop

08011850 <rcl_action_wait_set_add_action_server>:
 8011850:	2800      	cmp	r0, #0
 8011852:	d04d      	beq.n	80118f0 <rcl_action_wait_set_add_action_server+0xa0>
 8011854:	b570      	push	{r4, r5, r6, lr}
 8011856:	460c      	mov	r4, r1
 8011858:	b159      	cbz	r1, 8011872 <rcl_action_wait_set_add_action_server+0x22>
 801185a:	4605      	mov	r5, r0
 801185c:	6808      	ldr	r0, [r1, #0]
 801185e:	b140      	cbz	r0, 8011872 <rcl_action_wait_set_add_action_server+0x22>
 8011860:	4616      	mov	r6, r2
 8011862:	f7f8 f9bf 	bl	8009be4 <rcl_service_is_valid>
 8011866:	b120      	cbz	r0, 8011872 <rcl_action_wait_set_add_action_server+0x22>
 8011868:	6820      	ldr	r0, [r4, #0]
 801186a:	3004      	adds	r0, #4
 801186c:	f7f8 f9ba 	bl	8009be4 <rcl_service_is_valid>
 8011870:	b910      	cbnz	r0, 8011878 <rcl_action_wait_set_add_action_server+0x28>
 8011872:	f640 0098 	movw	r0, #2200	; 0x898
 8011876:	bd70      	pop	{r4, r5, r6, pc}
 8011878:	6820      	ldr	r0, [r4, #0]
 801187a:	3008      	adds	r0, #8
 801187c:	f7f8 f9b2 	bl	8009be4 <rcl_service_is_valid>
 8011880:	2800      	cmp	r0, #0
 8011882:	d0f6      	beq.n	8011872 <rcl_action_wait_set_add_action_server+0x22>
 8011884:	6820      	ldr	r0, [r4, #0]
 8011886:	300c      	adds	r0, #12
 8011888:	f002 f936 	bl	8013af8 <rcl_publisher_is_valid_except_context>
 801188c:	2800      	cmp	r0, #0
 801188e:	d0f0      	beq.n	8011872 <rcl_action_wait_set_add_action_server+0x22>
 8011890:	6820      	ldr	r0, [r4, #0]
 8011892:	3010      	adds	r0, #16
 8011894:	f002 f930 	bl	8013af8 <rcl_publisher_is_valid_except_context>
 8011898:	2800      	cmp	r0, #0
 801189a:	d0ea      	beq.n	8011872 <rcl_action_wait_set_add_action_server+0x22>
 801189c:	6821      	ldr	r1, [r4, #0]
 801189e:	4628      	mov	r0, r5
 80118a0:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 80118a4:	f7ff fad4 	bl	8010e50 <rcl_wait_set_add_service>
 80118a8:	2800      	cmp	r0, #0
 80118aa:	d1e4      	bne.n	8011876 <rcl_action_wait_set_add_action_server+0x26>
 80118ac:	6821      	ldr	r1, [r4, #0]
 80118ae:	4628      	mov	r0, r5
 80118b0:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 80118b4:	3104      	adds	r1, #4
 80118b6:	f7ff facb 	bl	8010e50 <rcl_wait_set_add_service>
 80118ba:	2800      	cmp	r0, #0
 80118bc:	d1db      	bne.n	8011876 <rcl_action_wait_set_add_action_server+0x26>
 80118be:	6821      	ldr	r1, [r4, #0]
 80118c0:	4628      	mov	r0, r5
 80118c2:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 80118c6:	3108      	adds	r1, #8
 80118c8:	f7ff fac2 	bl	8010e50 <rcl_wait_set_add_service>
 80118cc:	2800      	cmp	r0, #0
 80118ce:	d1d2      	bne.n	8011876 <rcl_action_wait_set_add_action_server+0x26>
 80118d0:	6821      	ldr	r1, [r4, #0]
 80118d2:	4628      	mov	r0, r5
 80118d4:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 80118d8:	3114      	adds	r1, #20
 80118da:	f7ff fa5d 	bl	8010d98 <rcl_wait_set_add_timer>
 80118de:	2800      	cmp	r0, #0
 80118e0:	d1c9      	bne.n	8011876 <rcl_action_wait_set_add_action_server+0x26>
 80118e2:	2e00      	cmp	r6, #0
 80118e4:	d0c7      	beq.n	8011876 <rcl_action_wait_set_add_action_server+0x26>
 80118e6:	6823      	ldr	r3, [r4, #0]
 80118e8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80118ec:	6033      	str	r3, [r6, #0]
 80118ee:	bd70      	pop	{r4, r5, r6, pc}
 80118f0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80118f4:	4770      	bx	lr
 80118f6:	bf00      	nop

080118f8 <rcl_action_server_wait_set_get_entities_ready>:
 80118f8:	2800      	cmp	r0, #0
 80118fa:	d067      	beq.n	80119cc <rcl_action_server_wait_set_get_entities_ready+0xd4>
 80118fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011900:	460c      	mov	r4, r1
 8011902:	b161      	cbz	r1, 801191e <rcl_action_server_wait_set_get_entities_ready+0x26>
 8011904:	4605      	mov	r5, r0
 8011906:	6808      	ldr	r0, [r1, #0]
 8011908:	b148      	cbz	r0, 801191e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801190a:	4616      	mov	r6, r2
 801190c:	4698      	mov	r8, r3
 801190e:	f7f8 f969 	bl	8009be4 <rcl_service_is_valid>
 8011912:	b120      	cbz	r0, 801191e <rcl_action_server_wait_set_get_entities_ready+0x26>
 8011914:	6820      	ldr	r0, [r4, #0]
 8011916:	3004      	adds	r0, #4
 8011918:	f7f8 f964 	bl	8009be4 <rcl_service_is_valid>
 801191c:	b918      	cbnz	r0, 8011926 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801191e:	f640 0098 	movw	r0, #2200	; 0x898
 8011922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011926:	6820      	ldr	r0, [r4, #0]
 8011928:	3008      	adds	r0, #8
 801192a:	f7f8 f95b 	bl	8009be4 <rcl_service_is_valid>
 801192e:	2800      	cmp	r0, #0
 8011930:	d0f5      	beq.n	801191e <rcl_action_server_wait_set_get_entities_ready+0x26>
 8011932:	6820      	ldr	r0, [r4, #0]
 8011934:	300c      	adds	r0, #12
 8011936:	f002 f8df 	bl	8013af8 <rcl_publisher_is_valid_except_context>
 801193a:	2800      	cmp	r0, #0
 801193c:	d0ef      	beq.n	801191e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801193e:	6820      	ldr	r0, [r4, #0]
 8011940:	3010      	adds	r0, #16
 8011942:	f002 f8d9 	bl	8013af8 <rcl_publisher_is_valid_except_context>
 8011946:	2800      	cmp	r0, #0
 8011948:	d0e9      	beq.n	801191e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801194a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801194e:	2a00      	cmp	r2, #0
 8011950:	bf18      	it	ne
 8011952:	2b00      	cmpne	r3, #0
 8011954:	bf0c      	ite	eq
 8011956:	2101      	moveq	r1, #1
 8011958:	2100      	movne	r1, #0
 801195a:	f1b8 0f00 	cmp.w	r8, #0
 801195e:	bf08      	it	eq
 8011960:	f041 0101 	orreq.w	r1, r1, #1
 8011964:	bba9      	cbnz	r1, 80119d2 <rcl_action_server_wait_set_get_entities_ready+0xda>
 8011966:	b3a6      	cbz	r6, 80119d2 <rcl_action_server_wait_set_get_entities_ready+0xda>
 8011968:	6821      	ldr	r1, [r4, #0]
 801196a:	2000      	movs	r0, #0
 801196c:	692c      	ldr	r4, [r5, #16]
 801196e:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 8011972:	6a2f      	ldr	r7, [r5, #32]
 8011974:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011978:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 801197c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 8011980:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8011984:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8011988:	1a64      	subs	r4, r4, r1
 801198a:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 801198e:	fab4 f484 	clz	r4, r4
 8011992:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8011996:	0964      	lsrs	r4, r4, #5
 8011998:	7034      	strb	r4, [r6, #0]
 801199a:	1d0c      	adds	r4, r1, #4
 801199c:	1b2c      	subs	r4, r5, r4
 801199e:	fab4 f484 	clz	r4, r4
 80119a2:	0964      	lsrs	r4, r4, #5
 80119a4:	f888 4000 	strb.w	r4, [r8]
 80119a8:	f101 0408 	add.w	r4, r1, #8
 80119ac:	1b1b      	subs	r3, r3, r4
 80119ae:	9c06      	ldr	r4, [sp, #24]
 80119b0:	fab3 f383 	clz	r3, r3
 80119b4:	095b      	lsrs	r3, r3, #5
 80119b6:	7023      	strb	r3, [r4, #0]
 80119b8:	f101 0314 	add.w	r3, r1, #20
 80119bc:	1ad3      	subs	r3, r2, r3
 80119be:	9a07      	ldr	r2, [sp, #28]
 80119c0:	fab3 f383 	clz	r3, r3
 80119c4:	095b      	lsrs	r3, r3, #5
 80119c6:	7013      	strb	r3, [r2, #0]
 80119c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119cc:	f44f 7061 	mov.w	r0, #900	; 0x384
 80119d0:	4770      	bx	lr
 80119d2:	200b      	movs	r0, #11
 80119d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080119d8 <_execute_event_handler>:
 80119d8:	2002      	movs	r0, #2
 80119da:	4770      	bx	lr

080119dc <_cancel_goal_event_handler>:
 80119dc:	2003      	movs	r0, #3
 80119de:	4770      	bx	lr

080119e0 <_succeed_event_handler>:
 80119e0:	2004      	movs	r0, #4
 80119e2:	4770      	bx	lr

080119e4 <_abort_event_handler>:
 80119e4:	2006      	movs	r0, #6
 80119e6:	4770      	bx	lr

080119e8 <_canceled_event_handler>:
 80119e8:	2005      	movs	r0, #5
 80119ea:	4770      	bx	lr

080119ec <rcl_action_transition_goal_state>:
 80119ec:	b2c2      	uxtb	r2, r0
 80119ee:	2a06      	cmp	r2, #6
 80119f0:	d810      	bhi.n	8011a14 <rcl_action_transition_goal_state+0x28>
 80119f2:	2904      	cmp	r1, #4
 80119f4:	d80e      	bhi.n	8011a14 <rcl_action_transition_goal_state+0x28>
 80119f6:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80119fa:	b410      	push	{r4}
 80119fc:	1853      	adds	r3, r2, r1
 80119fe:	4c06      	ldr	r4, [pc, #24]	; (8011a18 <rcl_action_transition_goal_state+0x2c>)
 8011a00:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8011a04:	b113      	cbz	r3, 8011a0c <rcl_action_transition_goal_state+0x20>
 8011a06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a0a:	4718      	bx	r3
 8011a0c:	2000      	movs	r0, #0
 8011a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a12:	4770      	bx	lr
 8011a14:	2000      	movs	r0, #0
 8011a16:	4770      	bx	lr
 8011a18:	08016400 	.word	0x08016400

08011a1c <rcl_action_get_zero_initialized_cancel_response>:
 8011a1c:	b510      	push	{r4, lr}
 8011a1e:	4c07      	ldr	r4, [pc, #28]	; (8011a3c <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8011a20:	4686      	mov	lr, r0
 8011a22:	4684      	mov	ip, r0
 8011a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a30:	6823      	ldr	r3, [r4, #0]
 8011a32:	4670      	mov	r0, lr
 8011a34:	f8cc 3000 	str.w	r3, [ip]
 8011a38:	bd10      	pop	{r4, pc}
 8011a3a:	bf00      	nop
 8011a3c:	0801648c 	.word	0x0801648c

08011a40 <rclc_action_send_result_request>:
 8011a40:	b1d0      	cbz	r0, 8011a78 <rclc_action_send_result_request+0x38>
 8011a42:	4684      	mov	ip, r0
 8011a44:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8011a48:	b500      	push	{lr}
 8011a4a:	b087      	sub	sp, #28
 8011a4c:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8011a50:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8011a54:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8011a58:	f10d 0e08 	add.w	lr, sp, #8
 8011a5c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011a60:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011a64:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 8011a68:	a902      	add	r1, sp, #8
 8011a6a:	3010      	adds	r0, #16
 8011a6c:	f7ff fbcc 	bl	8011208 <rcl_action_send_result_request>
 8011a70:	b920      	cbnz	r0, 8011a7c <rclc_action_send_result_request+0x3c>
 8011a72:	b007      	add	sp, #28
 8011a74:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a78:	200b      	movs	r0, #11
 8011a7a:	4770      	bx	lr
 8011a7c:	9001      	str	r0, [sp, #4]
 8011a7e:	f7f9 f81f 	bl	800aac0 <rcutils_reset_error>
 8011a82:	9801      	ldr	r0, [sp, #4]
 8011a84:	b007      	add	sp, #28
 8011a86:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a8a:	bf00      	nop

08011a8c <rclc_action_take_goal_handle>:
 8011a8c:	b160      	cbz	r0, 8011aa8 <rclc_action_take_goal_handle+0x1c>
 8011a8e:	6883      	ldr	r3, [r0, #8]
 8011a90:	b143      	cbz	r3, 8011aa4 <rclc_action_take_goal_handle+0x18>
 8011a92:	6819      	ldr	r1, [r3, #0]
 8011a94:	2200      	movs	r2, #0
 8011a96:	6081      	str	r1, [r0, #8]
 8011a98:	721a      	strb	r2, [r3, #8]
 8011a9a:	68c1      	ldr	r1, [r0, #12]
 8011a9c:	621a      	str	r2, [r3, #32]
 8011a9e:	849a      	strh	r2, [r3, #36]	; 0x24
 8011aa0:	6019      	str	r1, [r3, #0]
 8011aa2:	60c3      	str	r3, [r0, #12]
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	4770      	bx	lr
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	e7fb      	b.n	8011aa4 <rclc_action_take_goal_handle+0x18>

08011aac <rclc_action_remove_used_goal_handle>:
 8011aac:	b180      	cbz	r0, 8011ad0 <rclc_action_remove_used_goal_handle+0x24>
 8011aae:	b179      	cbz	r1, 8011ad0 <rclc_action_remove_used_goal_handle+0x24>
 8011ab0:	68c3      	ldr	r3, [r0, #12]
 8011ab2:	4299      	cmp	r1, r3
 8011ab4:	d00d      	beq.n	8011ad2 <rclc_action_remove_used_goal_handle+0x26>
 8011ab6:	b12b      	cbz	r3, 8011ac4 <rclc_action_remove_used_goal_handle+0x18>
 8011ab8:	681a      	ldr	r2, [r3, #0]
 8011aba:	4291      	cmp	r1, r2
 8011abc:	d003      	beq.n	8011ac6 <rclc_action_remove_used_goal_handle+0x1a>
 8011abe:	4613      	mov	r3, r2
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d1f9      	bne.n	8011ab8 <rclc_action_remove_used_goal_handle+0xc>
 8011ac4:	4770      	bx	lr
 8011ac6:	680a      	ldr	r2, [r1, #0]
 8011ac8:	601a      	str	r2, [r3, #0]
 8011aca:	6883      	ldr	r3, [r0, #8]
 8011acc:	600b      	str	r3, [r1, #0]
 8011ace:	6081      	str	r1, [r0, #8]
 8011ad0:	4770      	bx	lr
 8011ad2:	680b      	ldr	r3, [r1, #0]
 8011ad4:	60c3      	str	r3, [r0, #12]
 8011ad6:	e7f8      	b.n	8011aca <rclc_action_remove_used_goal_handle+0x1e>

08011ad8 <rclc_action_find_goal_handle_by_uuid>:
 8011ad8:	b538      	push	{r3, r4, r5, lr}
 8011ada:	b181      	cbz	r1, 8011afe <rclc_action_find_goal_handle_by_uuid+0x26>
 8011adc:	b178      	cbz	r0, 8011afe <rclc_action_find_goal_handle_by_uuid+0x26>
 8011ade:	68c4      	ldr	r4, [r0, #12]
 8011ae0:	460d      	mov	r5, r1
 8011ae2:	b914      	cbnz	r4, 8011aea <rclc_action_find_goal_handle_by_uuid+0x12>
 8011ae4:	e009      	b.n	8011afa <rclc_action_find_goal_handle_by_uuid+0x22>
 8011ae6:	6824      	ldr	r4, [r4, #0]
 8011ae8:	b13c      	cbz	r4, 8011afa <rclc_action_find_goal_handle_by_uuid+0x22>
 8011aea:	f104 0009 	add.w	r0, r4, #9
 8011aee:	2210      	movs	r2, #16
 8011af0:	4629      	mov	r1, r5
 8011af2:	f002 fe35 	bl	8014760 <memcmp>
 8011af6:	2800      	cmp	r0, #0
 8011af8:	d1f5      	bne.n	8011ae6 <rclc_action_find_goal_handle_by_uuid+0xe>
 8011afa:	4620      	mov	r0, r4
 8011afc:	bd38      	pop	{r3, r4, r5, pc}
 8011afe:	2400      	movs	r4, #0
 8011b00:	4620      	mov	r0, r4
 8011b02:	bd38      	pop	{r3, r4, r5, pc}

08011b04 <rclc_action_find_first_handle_by_status>:
 8011b04:	b140      	cbz	r0, 8011b18 <rclc_action_find_first_handle_by_status+0x14>
 8011b06:	68c0      	ldr	r0, [r0, #12]
 8011b08:	b910      	cbnz	r0, 8011b10 <rclc_action_find_first_handle_by_status+0xc>
 8011b0a:	e005      	b.n	8011b18 <rclc_action_find_first_handle_by_status+0x14>
 8011b0c:	6800      	ldr	r0, [r0, #0]
 8011b0e:	b118      	cbz	r0, 8011b18 <rclc_action_find_first_handle_by_status+0x14>
 8011b10:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8011b14:	428b      	cmp	r3, r1
 8011b16:	d1f9      	bne.n	8011b0c <rclc_action_find_first_handle_by_status+0x8>
 8011b18:	4770      	bx	lr
 8011b1a:	bf00      	nop

08011b1c <rclc_action_find_first_terminated_handle>:
 8011b1c:	b140      	cbz	r0, 8011b30 <rclc_action_find_first_terminated_handle+0x14>
 8011b1e:	68c0      	ldr	r0, [r0, #12]
 8011b20:	b910      	cbnz	r0, 8011b28 <rclc_action_find_first_terminated_handle+0xc>
 8011b22:	e005      	b.n	8011b30 <rclc_action_find_first_terminated_handle+0x14>
 8011b24:	6800      	ldr	r0, [r0, #0]
 8011b26:	b118      	cbz	r0, 8011b30 <rclc_action_find_first_terminated_handle+0x14>
 8011b28:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8011b2c:	2b03      	cmp	r3, #3
 8011b2e:	ddf9      	ble.n	8011b24 <rclc_action_find_first_terminated_handle+0x8>
 8011b30:	4770      	bx	lr
 8011b32:	bf00      	nop

08011b34 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8011b34:	b170      	cbz	r0, 8011b54 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8011b36:	68c0      	ldr	r0, [r0, #12]
 8011b38:	b160      	cbz	r0, 8011b54 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8011b3a:	b410      	push	{r4}
 8011b3c:	e001      	b.n	8011b42 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8011b3e:	6800      	ldr	r0, [r0, #0]
 8011b40:	b128      	cbz	r0, 8011b4e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8011b42:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 8011b46:	4299      	cmp	r1, r3
 8011b48:	bf08      	it	eq
 8011b4a:	4294      	cmpeq	r4, r2
 8011b4c:	d1f7      	bne.n	8011b3e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8011b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b52:	4770      	bx	lr
 8011b54:	4770      	bx	lr
 8011b56:	bf00      	nop

08011b58 <rclc_action_find_handle_by_result_request_sequence_number>:
 8011b58:	b170      	cbz	r0, 8011b78 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8011b5a:	68c0      	ldr	r0, [r0, #12]
 8011b5c:	b160      	cbz	r0, 8011b78 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8011b5e:	b410      	push	{r4}
 8011b60:	e001      	b.n	8011b66 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8011b62:	6800      	ldr	r0, [r0, #0]
 8011b64:	b128      	cbz	r0, 8011b72 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8011b66:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 8011b6a:	4299      	cmp	r1, r3
 8011b6c:	bf08      	it	eq
 8011b6e:	4294      	cmpeq	r4, r2
 8011b70:	d1f7      	bne.n	8011b62 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8011b72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b76:	4770      	bx	lr
 8011b78:	4770      	bx	lr
 8011b7a:	bf00      	nop

08011b7c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8011b7c:	b170      	cbz	r0, 8011b9c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8011b7e:	68c0      	ldr	r0, [r0, #12]
 8011b80:	b160      	cbz	r0, 8011b9c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8011b82:	b410      	push	{r4}
 8011b84:	e001      	b.n	8011b8a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8011b86:	6800      	ldr	r0, [r0, #0]
 8011b88:	b128      	cbz	r0, 8011b96 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8011b8a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 8011b8e:	4299      	cmp	r1, r3
 8011b90:	bf08      	it	eq
 8011b92:	4294      	cmpeq	r4, r2
 8011b94:	d1f7      	bne.n	8011b86 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8011b96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b9a:	4770      	bx	lr
 8011b9c:	4770      	bx	lr
 8011b9e:	bf00      	nop

08011ba0 <rclc_action_find_first_handle_with_goal_response>:
 8011ba0:	b140      	cbz	r0, 8011bb4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8011ba2:	68c0      	ldr	r0, [r0, #12]
 8011ba4:	b910      	cbnz	r0, 8011bac <rclc_action_find_first_handle_with_goal_response+0xc>
 8011ba6:	e005      	b.n	8011bb4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8011ba8:	6800      	ldr	r0, [r0, #0]
 8011baa:	b118      	cbz	r0, 8011bb4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8011bac:	f890 3020 	ldrb.w	r3, [r0, #32]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d0f9      	beq.n	8011ba8 <rclc_action_find_first_handle_with_goal_response+0x8>
 8011bb4:	4770      	bx	lr
 8011bb6:	bf00      	nop

08011bb8 <rclc_action_find_first_handle_with_result_response>:
 8011bb8:	b140      	cbz	r0, 8011bcc <rclc_action_find_first_handle_with_result_response+0x14>
 8011bba:	68c0      	ldr	r0, [r0, #12]
 8011bbc:	b910      	cbnz	r0, 8011bc4 <rclc_action_find_first_handle_with_result_response+0xc>
 8011bbe:	e005      	b.n	8011bcc <rclc_action_find_first_handle_with_result_response+0x14>
 8011bc0:	6800      	ldr	r0, [r0, #0]
 8011bc2:	b118      	cbz	r0, 8011bcc <rclc_action_find_first_handle_with_result_response+0x14>
 8011bc4:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d0f9      	beq.n	8011bc0 <rclc_action_find_first_handle_with_result_response+0x8>
 8011bcc:	4770      	bx	lr
 8011bce:	bf00      	nop

08011bd0 <rclc_action_server_response_goal_request>:
 8011bd0:	b198      	cbz	r0, 8011bfa <rclc_action_server_response_goal_request+0x2a>
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	460b      	mov	r3, r1
 8011bd6:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8011bda:	b510      	push	{r4, lr}
 8011bdc:	6844      	ldr	r4, [r0, #4]
 8011bde:	b086      	sub	sp, #24
 8011be0:	f104 0010 	add.w	r0, r4, #16
 8011be4:	9205      	str	r2, [sp, #20]
 8011be6:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8011bea:	aa03      	add	r2, sp, #12
 8011bec:	f88d 300c 	strb.w	r3, [sp, #12]
 8011bf0:	f7ff fd40 	bl	8011674 <rcl_action_send_goal_response>
 8011bf4:	b918      	cbnz	r0, 8011bfe <rclc_action_server_response_goal_request+0x2e>
 8011bf6:	b006      	add	sp, #24
 8011bf8:	bd10      	pop	{r4, pc}
 8011bfa:	200b      	movs	r0, #11
 8011bfc:	4770      	bx	lr
 8011bfe:	9001      	str	r0, [sp, #4]
 8011c00:	f7f8 ff5e 	bl	800aac0 <rcutils_reset_error>
 8011c04:	9801      	ldr	r0, [sp, #4]
 8011c06:	b006      	add	sp, #24
 8011c08:	bd10      	pop	{r4, pc}
 8011c0a:	bf00      	nop
 8011c0c:	0000      	movs	r0, r0
	...

08011c10 <rclc_action_server_goal_cancel_accept>:
 8011c10:	b310      	cbz	r0, 8011c58 <rclc_action_server_goal_cancel_accept+0x48>
 8011c12:	b510      	push	{r4, lr}
 8011c14:	b090      	sub	sp, #64	; 0x40
 8011c16:	4604      	mov	r4, r0
 8011c18:	a806      	add	r0, sp, #24
 8011c1a:	f7ff feff 	bl	8011a1c <rcl_action_get_zero_initialized_cancel_response>
 8011c1e:	2300      	movs	r3, #0
 8011c20:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8011c24:	46ec      	mov	ip, sp
 8011c26:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8011c2a:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8011c2e:	f88d 3018 	strb.w	r3, [sp, #24]
 8011c32:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8011c36:	f8cd d01c 	str.w	sp, [sp, #28]
 8011c3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c3e:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8011c60 <rclc_action_server_goal_cancel_accept+0x50>
 8011c42:	6860      	ldr	r0, [r4, #4]
 8011c44:	aa06      	add	r2, sp, #24
 8011c46:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8011c4a:	3010      	adds	r0, #16
 8011c4c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011c50:	f7ff fdc6 	bl	80117e0 <rcl_action_send_cancel_response>
 8011c54:	b010      	add	sp, #64	; 0x40
 8011c56:	bd10      	pop	{r4, pc}
 8011c58:	200b      	movs	r0, #11
 8011c5a:	4770      	bx	lr
 8011c5c:	f3af 8000 	nop.w
 8011c60:	00000001 	.word	0x00000001
 8011c64:	00000001 	.word	0x00000001

08011c68 <rclc_action_server_goal_cancel_reject>:
 8011c68:	b082      	sub	sp, #8
 8011c6a:	b530      	push	{r4, r5, lr}
 8011c6c:	b08b      	sub	sp, #44	; 0x2c
 8011c6e:	ac0e      	add	r4, sp, #56	; 0x38
 8011c70:	e884 000c 	stmia.w	r4, {r2, r3}
 8011c74:	b188      	cbz	r0, 8011c9a <rclc_action_server_goal_cancel_reject+0x32>
 8011c76:	4604      	mov	r4, r0
 8011c78:	a801      	add	r0, sp, #4
 8011c7a:	460d      	mov	r5, r1
 8011c7c:	f7ff fece 	bl	8011a1c <rcl_action_get_zero_initialized_cancel_response>
 8011c80:	aa01      	add	r2, sp, #4
 8011c82:	a90e      	add	r1, sp, #56	; 0x38
 8011c84:	f104 0010 	add.w	r0, r4, #16
 8011c88:	f88d 5004 	strb.w	r5, [sp, #4]
 8011c8c:	f7ff fda8 	bl	80117e0 <rcl_action_send_cancel_response>
 8011c90:	b00b      	add	sp, #44	; 0x2c
 8011c92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c96:	b002      	add	sp, #8
 8011c98:	4770      	bx	lr
 8011c9a:	200b      	movs	r0, #11
 8011c9c:	b00b      	add	sp, #44	; 0x2c
 8011c9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ca2:	b002      	add	sp, #8
 8011ca4:	4770      	bx	lr
 8011ca6:	bf00      	nop

08011ca8 <__atomic_load_8>:
 8011ca8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8011cac:	4a16      	ldr	r2, [pc, #88]	; (8011d08 <__atomic_load_8+0x60>)
 8011cae:	4b17      	ldr	r3, [pc, #92]	; (8011d0c <__atomic_load_8+0x64>)
 8011cb0:	f04f 0c01 	mov.w	ip, #1
 8011cb4:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8011cb8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011cbc:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011cc0:	fb02 f101 	mul.w	r1, r2, r1
 8011cc4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8011cc8:	fba3 2301 	umull	r2, r3, r3, r1
 8011ccc:	091b      	lsrs	r3, r3, #4
 8011cce:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011cd2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8011cd6:	b4d0      	push	{r4, r6, r7}
 8011cd8:	1ac9      	subs	r1, r1, r3
 8011cda:	4c0d      	ldr	r4, [pc, #52]	; (8011d10 <__atomic_load_8+0x68>)
 8011cdc:	1862      	adds	r2, r4, r1
 8011cde:	e8d2 3f4f 	ldrexb	r3, [r2]
 8011ce2:	e8c2 cf46 	strexb	r6, ip, [r2]
 8011ce6:	2e00      	cmp	r6, #0
 8011ce8:	d1f9      	bne.n	8011cde <__atomic_load_8+0x36>
 8011cea:	b2db      	uxtb	r3, r3
 8011cec:	f3bf 8f5b 	dmb	ish
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d1f4      	bne.n	8011cde <__atomic_load_8+0x36>
 8011cf4:	e9d0 6700 	ldrd	r6, r7, [r0]
 8011cf8:	f3bf 8f5b 	dmb	ish
 8011cfc:	5463      	strb	r3, [r4, r1]
 8011cfe:	4630      	mov	r0, r6
 8011d00:	4639      	mov	r1, r7
 8011d02:	bcd0      	pop	{r4, r6, r7}
 8011d04:	4770      	bx	lr
 8011d06:	bf00      	nop
 8011d08:	27d4eb2d 	.word	0x27d4eb2d
 8011d0c:	b21642c9 	.word	0xb21642c9
 8011d10:	20010e48 	.word	0x20010e48

08011d14 <__atomic_store_8>:
 8011d14:	b570      	push	{r4, r5, r6, lr}
 8011d16:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8011d1a:	4916      	ldr	r1, [pc, #88]	; (8011d74 <__atomic_store_8+0x60>)
 8011d1c:	4c16      	ldr	r4, [pc, #88]	; (8011d78 <__atomic_store_8+0x64>)
 8011d1e:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 8011d22:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8011d26:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8011d2a:	fb01 fe0e 	mul.w	lr, r1, lr
 8011d2e:	4913      	ldr	r1, [pc, #76]	; (8011d7c <__atomic_store_8+0x68>)
 8011d30:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8011d34:	fba1 510e 	umull	r5, r1, r1, lr
 8011d38:	f04f 0501 	mov.w	r5, #1
 8011d3c:	0909      	lsrs	r1, r1, #4
 8011d3e:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8011d42:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8011d46:	ebae 0e01 	sub.w	lr, lr, r1
 8011d4a:	eb04 0c0e 	add.w	ip, r4, lr
 8011d4e:	e8dc 1f4f 	ldrexb	r1, [ip]
 8011d52:	e8cc 5f46 	strexb	r6, r5, [ip]
 8011d56:	2e00      	cmp	r6, #0
 8011d58:	d1f9      	bne.n	8011d4e <__atomic_store_8+0x3a>
 8011d5a:	b2c9      	uxtb	r1, r1
 8011d5c:	f3bf 8f5b 	dmb	ish
 8011d60:	2900      	cmp	r1, #0
 8011d62:	d1f4      	bne.n	8011d4e <__atomic_store_8+0x3a>
 8011d64:	e9c0 2300 	strd	r2, r3, [r0]
 8011d68:	f3bf 8f5b 	dmb	ish
 8011d6c:	f804 100e 	strb.w	r1, [r4, lr]
 8011d70:	bd70      	pop	{r4, r5, r6, pc}
 8011d72:	bf00      	nop
 8011d74:	27d4eb2d 	.word	0x27d4eb2d
 8011d78:	20010e48 	.word	0x20010e48
 8011d7c:	b21642c9 	.word	0xb21642c9

08011d80 <__atomic_exchange_8>:
 8011d80:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8011d84:	4917      	ldr	r1, [pc, #92]	; (8011de4 <__atomic_exchange_8+0x64>)
 8011d86:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 8011d8a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8011d8e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8011d92:	fb01 fc0c 	mul.w	ip, r1, ip
 8011d96:	4914      	ldr	r1, [pc, #80]	; (8011de8 <__atomic_exchange_8+0x68>)
 8011d98:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8011d9c:	b570      	push	{r4, r5, r6, lr}
 8011d9e:	4686      	mov	lr, r0
 8011da0:	fba1 010c 	umull	r0, r1, r1, ip
 8011da4:	4d11      	ldr	r5, [pc, #68]	; (8011dec <__atomic_exchange_8+0x6c>)
 8011da6:	f04f 0001 	mov.w	r0, #1
 8011daa:	0909      	lsrs	r1, r1, #4
 8011dac:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8011db0:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8011db4:	ebac 0c01 	sub.w	ip, ip, r1
 8011db8:	eb05 010c 	add.w	r1, r5, ip
 8011dbc:	e8d1 4f4f 	ldrexb	r4, [r1]
 8011dc0:	e8c1 0f46 	strexb	r6, r0, [r1]
 8011dc4:	2e00      	cmp	r6, #0
 8011dc6:	d1f9      	bne.n	8011dbc <__atomic_exchange_8+0x3c>
 8011dc8:	b2e4      	uxtb	r4, r4
 8011dca:	f3bf 8f5b 	dmb	ish
 8011dce:	2c00      	cmp	r4, #0
 8011dd0:	d1f4      	bne.n	8011dbc <__atomic_exchange_8+0x3c>
 8011dd2:	e9de 0100 	ldrd	r0, r1, [lr]
 8011dd6:	e9ce 2300 	strd	r2, r3, [lr]
 8011dda:	f3bf 8f5b 	dmb	ish
 8011dde:	f805 400c 	strb.w	r4, [r5, ip]
 8011de2:	bd70      	pop	{r4, r5, r6, pc}
 8011de4:	27d4eb2d 	.word	0x27d4eb2d
 8011de8:	b21642c9 	.word	0xb21642c9
 8011dec:	20010e48 	.word	0x20010e48

08011df0 <rcutils_is_directory>:
 8011df0:	2000      	movs	r0, #0
 8011df2:	4770      	bx	lr

08011df4 <rcutils_join_path>:
 8011df4:	b082      	sub	sp, #8
 8011df6:	2000      	movs	r0, #0
 8011df8:	e88d 000c 	stmia.w	sp, {r2, r3}
 8011dfc:	b002      	add	sp, #8
 8011dfe:	4770      	bx	lr

08011e00 <rcutils_to_native_path>:
 8011e00:	b084      	sub	sp, #16
 8011e02:	2000      	movs	r0, #0
 8011e04:	f10d 0c04 	add.w	ip, sp, #4
 8011e08:	b004      	add	sp, #16
 8011e0a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8011e0e:	4770      	bx	lr

08011e10 <rcutils_get_zero_initialized_string_map>:
 8011e10:	2000      	movs	r0, #0
 8011e12:	4b01      	ldr	r3, [pc, #4]	; (8011e18 <rcutils_get_zero_initialized_string_map+0x8>)
 8011e14:	6018      	str	r0, [r3, #0]
 8011e16:	4770      	bx	lr
 8011e18:	20010e60 	.word	0x20010e60

08011e1c <rcutils_string_map_reserve>:
 8011e1c:	2800      	cmp	r0, #0
 8011e1e:	d05e      	beq.n	8011ede <rcutils_string_map_reserve+0xc2>
 8011e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e24:	460c      	mov	r4, r1
 8011e26:	6801      	ldr	r1, [r0, #0]
 8011e28:	b082      	sub	sp, #8
 8011e2a:	4605      	mov	r5, r0
 8011e2c:	b129      	cbz	r1, 8011e3a <rcutils_string_map_reserve+0x1e>
 8011e2e:	68cb      	ldr	r3, [r1, #12]
 8011e30:	42a3      	cmp	r3, r4
 8011e32:	d906      	bls.n	8011e42 <rcutils_string_map_reserve+0x26>
 8011e34:	461c      	mov	r4, r3
 8011e36:	2900      	cmp	r1, #0
 8011e38:	d1f9      	bne.n	8011e2e <rcutils_string_map_reserve+0x12>
 8011e3a:	201f      	movs	r0, #31
 8011e3c:	b002      	add	sp, #8
 8011e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e42:	688b      	ldr	r3, [r1, #8]
 8011e44:	42a3      	cmp	r3, r4
 8011e46:	d046      	beq.n	8011ed6 <rcutils_string_map_reserve+0xba>
 8011e48:	6a0e      	ldr	r6, [r1, #32]
 8011e4a:	2c00      	cmp	r4, #0
 8011e4c:	d033      	beq.n	8011eb6 <rcutils_string_map_reserve+0x9a>
 8011e4e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8011e52:	d242      	bcs.n	8011eda <rcutils_string_map_reserve+0xbe>
 8011e54:	00a7      	lsls	r7, r4, #2
 8011e56:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8011e5a:	6808      	ldr	r0, [r1, #0]
 8011e5c:	4632      	mov	r2, r6
 8011e5e:	4639      	mov	r1, r7
 8011e60:	47c0      	blx	r8
 8011e62:	2800      	cmp	r0, #0
 8011e64:	d039      	beq.n	8011eda <rcutils_string_map_reserve+0xbe>
 8011e66:	682b      	ldr	r3, [r5, #0]
 8011e68:	4632      	mov	r2, r6
 8011e6a:	4639      	mov	r1, r7
 8011e6c:	6018      	str	r0, [r3, #0]
 8011e6e:	6858      	ldr	r0, [r3, #4]
 8011e70:	47c0      	blx	r8
 8011e72:	2800      	cmp	r0, #0
 8011e74:	d031      	beq.n	8011eda <rcutils_string_map_reserve+0xbe>
 8011e76:	682d      	ldr	r5, [r5, #0]
 8011e78:	68ab      	ldr	r3, [r5, #8]
 8011e7a:	6068      	str	r0, [r5, #4]
 8011e7c:	42a3      	cmp	r3, r4
 8011e7e:	d225      	bcs.n	8011ecc <rcutils_string_map_reserve+0xb0>
 8011e80:	682a      	ldr	r2, [r5, #0]
 8011e82:	eb00 0c07 	add.w	ip, r0, r7
 8011e86:	0099      	lsls	r1, r3, #2
 8011e88:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8011e8c:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8011e90:	45e6      	cmp	lr, ip
 8011e92:	d203      	bcs.n	8011e9c <rcutils_string_map_reserve+0x80>
 8011e94:	eb02 0c07 	add.w	ip, r2, r7
 8011e98:	4566      	cmp	r6, ip
 8011e9a:	d322      	bcc.n	8011ee2 <rcutils_string_map_reserve+0xc6>
 8011e9c:	1ae3      	subs	r3, r4, r3
 8011e9e:	4670      	mov	r0, lr
 8011ea0:	2100      	movs	r1, #0
 8011ea2:	009a      	lsls	r2, r3, #2
 8011ea4:	9201      	str	r2, [sp, #4]
 8011ea6:	f002 fc85 	bl	80147b4 <memset>
 8011eaa:	9a01      	ldr	r2, [sp, #4]
 8011eac:	2100      	movs	r1, #0
 8011eae:	4630      	mov	r0, r6
 8011eb0:	f002 fc80 	bl	80147b4 <memset>
 8011eb4:	e00a      	b.n	8011ecc <rcutils_string_map_reserve+0xb0>
 8011eb6:	694f      	ldr	r7, [r1, #20]
 8011eb8:	6808      	ldr	r0, [r1, #0]
 8011eba:	4631      	mov	r1, r6
 8011ebc:	47b8      	blx	r7
 8011ebe:	682b      	ldr	r3, [r5, #0]
 8011ec0:	4631      	mov	r1, r6
 8011ec2:	6858      	ldr	r0, [r3, #4]
 8011ec4:	601c      	str	r4, [r3, #0]
 8011ec6:	47b8      	blx	r7
 8011ec8:	682d      	ldr	r5, [r5, #0]
 8011eca:	606c      	str	r4, [r5, #4]
 8011ecc:	2000      	movs	r0, #0
 8011ece:	60ac      	str	r4, [r5, #8]
 8011ed0:	b002      	add	sp, #8
 8011ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ed6:	2000      	movs	r0, #0
 8011ed8:	e7b0      	b.n	8011e3c <rcutils_string_map_reserve+0x20>
 8011eda:	200a      	movs	r0, #10
 8011edc:	e7ae      	b.n	8011e3c <rcutils_string_map_reserve+0x20>
 8011ede:	200b      	movs	r0, #11
 8011ee0:	4770      	bx	lr
 8011ee2:	1f0b      	subs	r3, r1, #4
 8011ee4:	4418      	add	r0, r3
 8011ee6:	4413      	add	r3, r2
 8011ee8:	3a04      	subs	r2, #4
 8011eea:	4417      	add	r7, r2
 8011eec:	2200      	movs	r2, #0
 8011eee:	f843 2f04 	str.w	r2, [r3, #4]!
 8011ef2:	42bb      	cmp	r3, r7
 8011ef4:	f840 2f04 	str.w	r2, [r0, #4]!
 8011ef8:	d1f9      	bne.n	8011eee <rcutils_string_map_reserve+0xd2>
 8011efa:	e7e7      	b.n	8011ecc <rcutils_string_map_reserve+0xb0>

08011efc <rcutils_string_map_init>:
 8011efc:	b082      	sub	sp, #8
 8011efe:	b570      	push	{r4, r5, r6, lr}
 8011f00:	ac04      	add	r4, sp, #16
 8011f02:	e884 000c 	stmia.w	r4, {r2, r3}
 8011f06:	b380      	cbz	r0, 8011f6a <rcutils_string_map_init+0x6e>
 8011f08:	6806      	ldr	r6, [r0, #0]
 8011f0a:	4604      	mov	r4, r0
 8011f0c:	b12e      	cbz	r6, 8011f1a <rcutils_string_map_init+0x1e>
 8011f0e:	251e      	movs	r5, #30
 8011f10:	4628      	mov	r0, r5
 8011f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f16:	b002      	add	sp, #8
 8011f18:	4770      	bx	lr
 8011f1a:	a804      	add	r0, sp, #16
 8011f1c:	460d      	mov	r5, r1
 8011f1e:	f7f8 fd91 	bl	800aa44 <rcutils_allocator_is_valid>
 8011f22:	b310      	cbz	r0, 8011f6a <rcutils_string_map_init+0x6e>
 8011f24:	9b04      	ldr	r3, [sp, #16]
 8011f26:	2024      	movs	r0, #36	; 0x24
 8011f28:	9908      	ldr	r1, [sp, #32]
 8011f2a:	4798      	blx	r3
 8011f2c:	6020      	str	r0, [r4, #0]
 8011f2e:	b310      	cbz	r0, 8011f76 <rcutils_string_map_init+0x7a>
 8011f30:	f10d 0e10 	add.w	lr, sp, #16
 8011f34:	f100 0c10 	add.w	ip, r0, #16
 8011f38:	e9c0 6600 	strd	r6, r6, [r0]
 8011f3c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8011f40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011f44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f48:	f8de 3000 	ldr.w	r3, [lr]
 8011f4c:	4629      	mov	r1, r5
 8011f4e:	4620      	mov	r0, r4
 8011f50:	f8cc 3000 	str.w	r3, [ip]
 8011f54:	f7ff ff62 	bl	8011e1c <rcutils_string_map_reserve>
 8011f58:	4605      	mov	r5, r0
 8011f5a:	2800      	cmp	r0, #0
 8011f5c:	d0d8      	beq.n	8011f10 <rcutils_string_map_init+0x14>
 8011f5e:	9b05      	ldr	r3, [sp, #20]
 8011f60:	9908      	ldr	r1, [sp, #32]
 8011f62:	6820      	ldr	r0, [r4, #0]
 8011f64:	4798      	blx	r3
 8011f66:	6026      	str	r6, [r4, #0]
 8011f68:	e7d2      	b.n	8011f10 <rcutils_string_map_init+0x14>
 8011f6a:	250b      	movs	r5, #11
 8011f6c:	4628      	mov	r0, r5
 8011f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f72:	b002      	add	sp, #8
 8011f74:	4770      	bx	lr
 8011f76:	250a      	movs	r5, #10
 8011f78:	e7ca      	b.n	8011f10 <rcutils_string_map_init+0x14>
 8011f7a:	bf00      	nop

08011f7c <rcutils_string_map_fini>:
 8011f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f80:	b082      	sub	sp, #8
 8011f82:	2800      	cmp	r0, #0
 8011f84:	d03a      	beq.n	8011ffc <rcutils_string_map_fini+0x80>
 8011f86:	6804      	ldr	r4, [r0, #0]
 8011f88:	4606      	mov	r6, r0
 8011f8a:	2c00      	cmp	r4, #0
 8011f8c:	d032      	beq.n	8011ff4 <rcutils_string_map_fini+0x78>
 8011f8e:	68a3      	ldr	r3, [r4, #8]
 8011f90:	b32b      	cbz	r3, 8011fde <rcutils_string_map_fini+0x62>
 8011f92:	2500      	movs	r5, #0
 8011f94:	6822      	ldr	r2, [r4, #0]
 8011f96:	462f      	mov	r7, r5
 8011f98:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8011f9c:	b1e0      	cbz	r0, 8011fd8 <rcutils_string_map_fini+0x5c>
 8011f9e:	6a21      	ldr	r1, [r4, #32]
 8011fa0:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8011fa4:	9101      	str	r1, [sp, #4]
 8011fa6:	47c0      	blx	r8
 8011fa8:	9901      	ldr	r1, [sp, #4]
 8011faa:	e9d4 3200 	ldrd	r3, r2, [r4]
 8011fae:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 8011fb2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8011fb6:	47c0      	blx	r8
 8011fb8:	68e3      	ldr	r3, [r4, #12]
 8011fba:	6862      	ldr	r2, [r4, #4]
 8011fbc:	3b01      	subs	r3, #1
 8011fbe:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8011fc2:	3501      	adds	r5, #1
 8011fc4:	60e3      	str	r3, [r4, #12]
 8011fc6:	6834      	ldr	r4, [r6, #0]
 8011fc8:	68a3      	ldr	r3, [r4, #8]
 8011fca:	429d      	cmp	r5, r3
 8011fcc:	d207      	bcs.n	8011fde <rcutils_string_map_fini+0x62>
 8011fce:	6822      	ldr	r2, [r4, #0]
 8011fd0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8011fd4:	2800      	cmp	r0, #0
 8011fd6:	d1e2      	bne.n	8011f9e <rcutils_string_map_fini+0x22>
 8011fd8:	3501      	adds	r5, #1
 8011fda:	429d      	cmp	r5, r3
 8011fdc:	d3dc      	bcc.n	8011f98 <rcutils_string_map_fini+0x1c>
 8011fde:	2100      	movs	r1, #0
 8011fe0:	4630      	mov	r0, r6
 8011fe2:	f7ff ff1b 	bl	8011e1c <rcutils_string_map_reserve>
 8011fe6:	4604      	mov	r4, r0
 8011fe8:	b920      	cbnz	r0, 8011ff4 <rcutils_string_map_fini+0x78>
 8011fea:	6830      	ldr	r0, [r6, #0]
 8011fec:	6943      	ldr	r3, [r0, #20]
 8011fee:	6a01      	ldr	r1, [r0, #32]
 8011ff0:	4798      	blx	r3
 8011ff2:	6034      	str	r4, [r6, #0]
 8011ff4:	4620      	mov	r0, r4
 8011ff6:	b002      	add	sp, #8
 8011ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ffc:	240b      	movs	r4, #11
 8011ffe:	4620      	mov	r0, r4
 8012000:	b002      	add	sp, #8
 8012002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012006:	bf00      	nop

08012008 <rcutils_string_map_getn>:
 8012008:	b378      	cbz	r0, 801206a <rcutils_string_map_getn+0x62>
 801200a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801200e:	f8d0 b000 	ldr.w	fp, [r0]
 8012012:	f1bb 0f00 	cmp.w	fp, #0
 8012016:	d01f      	beq.n	8012058 <rcutils_string_map_getn+0x50>
 8012018:	fab1 f481 	clz	r4, r1
 801201c:	4688      	mov	r8, r1
 801201e:	0964      	lsrs	r4, r4, #5
 8012020:	b1d1      	cbz	r1, 8012058 <rcutils_string_map_getn+0x50>
 8012022:	f8db 7008 	ldr.w	r7, [fp, #8]
 8012026:	f8db 6000 	ldr.w	r6, [fp]
 801202a:	b1af      	cbz	r7, 8012058 <rcutils_string_map_getn+0x50>
 801202c:	4691      	mov	r9, r2
 801202e:	3e04      	subs	r6, #4
 8012030:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8012034:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8012038:	3401      	adds	r4, #1
 801203a:	4628      	mov	r0, r5
 801203c:	b155      	cbz	r5, 8012054 <rcutils_string_map_getn+0x4c>
 801203e:	f7ee f909 	bl	8000254 <strlen>
 8012042:	4602      	mov	r2, r0
 8012044:	4629      	mov	r1, r5
 8012046:	4640      	mov	r0, r8
 8012048:	454a      	cmp	r2, r9
 801204a:	bf38      	it	cc
 801204c:	464a      	movcc	r2, r9
 801204e:	f002 fbc6 	bl	80147de <strncmp>
 8012052:	b120      	cbz	r0, 801205e <rcutils_string_map_getn+0x56>
 8012054:	42a7      	cmp	r7, r4
 8012056:	d1eb      	bne.n	8012030 <rcutils_string_map_getn+0x28>
 8012058:	2000      	movs	r0, #0
 801205a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801205e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8012062:	f853 000a 	ldr.w	r0, [r3, sl]
 8012066:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801206a:	4770      	bx	lr
 801206c:	0000      	movs	r0, r0
	...

08012070 <rmw_get_zero_initialized_context>:
 8012070:	b510      	push	{r4, lr}
 8012072:	4604      	mov	r4, r0
 8012074:	3010      	adds	r0, #16
 8012076:	f7f8 ff03 	bl	800ae80 <rmw_get_zero_initialized_init_options>
 801207a:	2300      	movs	r3, #0
 801207c:	4620      	mov	r0, r4
 801207e:	60a3      	str	r3, [r4, #8]
 8012080:	64a3      	str	r3, [r4, #72]	; 0x48
 8012082:	64e3      	str	r3, [r4, #76]	; 0x4c
 8012084:	ed9f 7b02 	vldr	d7, [pc, #8]	; 8012090 <rmw_get_zero_initialized_context+0x20>
 8012088:	ed84 7b00 	vstr	d7, [r4]
 801208c:	bd10      	pop	{r4, pc}
 801208e:	bf00      	nop
	...

08012098 <rmw_time_equal>:
 8012098:	b4f0      	push	{r4, r5, r6, r7}
 801209a:	b084      	sub	sp, #16
 801209c:	ac04      	add	r4, sp, #16
 801209e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80120a2:	4603      	mov	r3, r0
 80120a4:	4925      	ldr	r1, [pc, #148]	; (801213c <rmw_time_equal+0xa4>)
 80120a6:	9d01      	ldr	r5, [sp, #4]
 80120a8:	4610      	mov	r0, r2
 80120aa:	4299      	cmp	r1, r3
 80120ac:	f04f 0202 	mov.w	r2, #2
 80120b0:	9e03      	ldr	r6, [sp, #12]
 80120b2:	41aa      	sbcs	r2, r5
 80120b4:	d330      	bcc.n	8012118 <rmw_time_equal+0x80>
 80120b6:	4c22      	ldr	r4, [pc, #136]	; (8012140 <rmw_time_equal+0xa8>)
 80120b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80120bc:	fba3 3204 	umull	r3, r2, r3, r4
 80120c0:	fb04 2205 	mla	r2, r4, r5, r2
 80120c4:	43dd      	mvns	r5, r3
 80120c6:	1a8c      	subs	r4, r1, r2
 80120c8:	4285      	cmp	r5, r0
 80120ca:	41b4      	sbcs	r4, r6
 80120cc:	d332      	bcc.n	8012134 <rmw_time_equal+0x9c>
 80120ce:	eb10 0c03 	adds.w	ip, r0, r3
 80120d2:	eb42 0106 	adc.w	r1, r2, r6
 80120d6:	4819      	ldr	r0, [pc, #100]	; (801213c <rmw_time_equal+0xa4>)
 80120d8:	2202      	movs	r2, #2
 80120da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80120dc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80120de:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80120e2:	4298      	cmp	r0, r3
 80120e4:	41b2      	sbcs	r2, r6
 80120e6:	d31c      	bcc.n	8012122 <rmw_time_equal+0x8a>
 80120e8:	4c15      	ldr	r4, [pc, #84]	; (8012140 <rmw_time_equal+0xa8>)
 80120ea:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80120ee:	fba3 3204 	umull	r3, r2, r3, r4
 80120f2:	fb04 2206 	mla	r2, r4, r6, r2
 80120f6:	43de      	mvns	r6, r3
 80120f8:	1a84      	subs	r4, r0, r2
 80120fa:	42ae      	cmp	r6, r5
 80120fc:	41bc      	sbcs	r4, r7
 80120fe:	d315      	bcc.n	801212c <rmw_time_equal+0x94>
 8012100:	195b      	adds	r3, r3, r5
 8012102:	eb42 0207 	adc.w	r2, r2, r7
 8012106:	428a      	cmp	r2, r1
 8012108:	bf08      	it	eq
 801210a:	4563      	cmpeq	r3, ip
 801210c:	bf0c      	ite	eq
 801210e:	2001      	moveq	r0, #1
 8012110:	2000      	movne	r0, #0
 8012112:	b004      	add	sp, #16
 8012114:	bcf0      	pop	{r4, r5, r6, r7}
 8012116:	4770      	bx	lr
 8012118:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801211c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012120:	e7d9      	b.n	80120d6 <rmw_time_equal+0x3e>
 8012122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012126:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801212a:	e7ec      	b.n	8012106 <rmw_time_equal+0x6e>
 801212c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012130:	4602      	mov	r2, r0
 8012132:	e7e8      	b.n	8012106 <rmw_time_equal+0x6e>
 8012134:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8012138:	e7cd      	b.n	80120d6 <rmw_time_equal+0x3e>
 801213a:	bf00      	nop
 801213c:	25c17d04 	.word	0x25c17d04
 8012140:	3b9aca00 	.word	0x3b9aca00

08012144 <rmw_time_total_nsec>:
 8012144:	b470      	push	{r4, r5, r6}
 8012146:	b085      	sub	sp, #20
 8012148:	ac04      	add	r4, sp, #16
 801214a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801214e:	4603      	mov	r3, r0
 8012150:	4913      	ldr	r1, [pc, #76]	; (80121a0 <rmw_time_total_nsec+0x5c>)
 8012152:	9d01      	ldr	r5, [sp, #4]
 8012154:	4610      	mov	r0, r2
 8012156:	4299      	cmp	r1, r3
 8012158:	f04f 0202 	mov.w	r2, #2
 801215c:	9e03      	ldr	r6, [sp, #12]
 801215e:	41aa      	sbcs	r2, r5
 8012160:	d311      	bcc.n	8012186 <rmw_time_total_nsec+0x42>
 8012162:	4c10      	ldr	r4, [pc, #64]	; (80121a4 <rmw_time_total_nsec+0x60>)
 8012164:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012168:	fba3 3204 	umull	r3, r2, r3, r4
 801216c:	fb04 2205 	mla	r2, r4, r5, r2
 8012170:	43dd      	mvns	r5, r3
 8012172:	1a8c      	subs	r4, r1, r2
 8012174:	4285      	cmp	r5, r0
 8012176:	41b4      	sbcs	r4, r6
 8012178:	d30c      	bcc.n	8012194 <rmw_time_total_nsec+0x50>
 801217a:	1818      	adds	r0, r3, r0
 801217c:	eb42 0106 	adc.w	r1, r2, r6
 8012180:	b005      	add	sp, #20
 8012182:	bc70      	pop	{r4, r5, r6}
 8012184:	4770      	bx	lr
 8012186:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801218a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801218e:	b005      	add	sp, #20
 8012190:	bc70      	pop	{r4, r5, r6}
 8012192:	4770      	bx	lr
 8012194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012198:	b005      	add	sp, #20
 801219a:	bc70      	pop	{r4, r5, r6}
 801219c:	4770      	bx	lr
 801219e:	bf00      	nop
 80121a0:	25c17d04 	.word	0x25c17d04
 80121a4:	3b9aca00 	.word	0x3b9aca00

080121a8 <rmw_get_zero_initialized_message_info>:
 80121a8:	b510      	push	{r4, lr}
 80121aa:	4604      	mov	r4, r0
 80121ac:	2240      	movs	r2, #64	; 0x40
 80121ae:	2100      	movs	r1, #0
 80121b0:	f002 fb00 	bl	80147b4 <memset>
 80121b4:	4620      	mov	r0, r4
 80121b6:	bd10      	pop	{r4, pc}

080121b8 <rmw_validate_full_topic_name>:
 80121b8:	2800      	cmp	r0, #0
 80121ba:	d05d      	beq.n	8012278 <rmw_validate_full_topic_name+0xc0>
 80121bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121c0:	460d      	mov	r5, r1
 80121c2:	2900      	cmp	r1, #0
 80121c4:	d05a      	beq.n	801227c <rmw_validate_full_topic_name+0xc4>
 80121c6:	4604      	mov	r4, r0
 80121c8:	4616      	mov	r6, r2
 80121ca:	f7ee f843 	bl	8000254 <strlen>
 80121ce:	b150      	cbz	r0, 80121e6 <rmw_validate_full_topic_name+0x2e>
 80121d0:	7823      	ldrb	r3, [r4, #0]
 80121d2:	2b2f      	cmp	r3, #47	; 0x2f
 80121d4:	d00e      	beq.n	80121f4 <rmw_validate_full_topic_name+0x3c>
 80121d6:	2302      	movs	r3, #2
 80121d8:	602b      	str	r3, [r5, #0]
 80121da:	b146      	cbz	r6, 80121ee <rmw_validate_full_topic_name+0x36>
 80121dc:	2300      	movs	r3, #0
 80121de:	4618      	mov	r0, r3
 80121e0:	6033      	str	r3, [r6, #0]
 80121e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121e6:	2301      	movs	r3, #1
 80121e8:	602b      	str	r3, [r5, #0]
 80121ea:	2e00      	cmp	r6, #0
 80121ec:	d1f6      	bne.n	80121dc <rmw_validate_full_topic_name+0x24>
 80121ee:	2000      	movs	r0, #0
 80121f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121f4:	1e43      	subs	r3, r0, #1
 80121f6:	5ce2      	ldrb	r2, [r4, r3]
 80121f8:	2a2f      	cmp	r2, #47	; 0x2f
 80121fa:	d041      	beq.n	8012280 <rmw_validate_full_topic_name+0xc8>
 80121fc:	1e62      	subs	r2, r4, #1
 80121fe:	f1c4 0e01 	rsb	lr, r4, #1
 8012202:	eb02 0800 	add.w	r8, r2, r0
 8012206:	eb0e 0702 	add.w	r7, lr, r2
 801220a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801220e:	f023 0120 	bic.w	r1, r3, #32
 8012212:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 8012216:	3941      	subs	r1, #65	; 0x41
 8012218:	2919      	cmp	r1, #25
 801221a:	d90f      	bls.n	801223c <rmw_validate_full_topic_name+0x84>
 801221c:	f1bc 0f0a 	cmp.w	ip, #10
 8012220:	d90c      	bls.n	801223c <rmw_validate_full_topic_name+0x84>
 8012222:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 8012226:	fab3 f383 	clz	r3, r3
 801222a:	095b      	lsrs	r3, r3, #5
 801222c:	b933      	cbnz	r3, 801223c <rmw_validate_full_topic_name+0x84>
 801222e:	2204      	movs	r2, #4
 8012230:	602a      	str	r2, [r5, #0]
 8012232:	2e00      	cmp	r6, #0
 8012234:	d0db      	beq.n	80121ee <rmw_validate_full_topic_name+0x36>
 8012236:	4618      	mov	r0, r3
 8012238:	6037      	str	r7, [r6, #0]
 801223a:	e7d2      	b.n	80121e2 <rmw_validate_full_topic_name+0x2a>
 801223c:	4542      	cmp	r2, r8
 801223e:	d1e2      	bne.n	8012206 <rmw_validate_full_topic_name+0x4e>
 8012240:	2301      	movs	r3, #1
 8012242:	4f1a      	ldr	r7, [pc, #104]	; (80122ac <rmw_validate_full_topic_name+0xf4>)
 8012244:	e004      	b.n	8012250 <rmw_validate_full_topic_name+0x98>
 8012246:	4298      	cmp	r0, r3
 8012248:	f104 0401 	add.w	r4, r4, #1
 801224c:	4613      	mov	r3, r2
 801224e:	d91c      	bls.n	801228a <rmw_validate_full_topic_name+0xd2>
 8012250:	4298      	cmp	r0, r3
 8012252:	f103 0201 	add.w	r2, r3, #1
 8012256:	d0f6      	beq.n	8012246 <rmw_validate_full_topic_name+0x8e>
 8012258:	7821      	ldrb	r1, [r4, #0]
 801225a:	292f      	cmp	r1, #47	; 0x2f
 801225c:	d1f3      	bne.n	8012246 <rmw_validate_full_topic_name+0x8e>
 801225e:	7861      	ldrb	r1, [r4, #1]
 8012260:	292f      	cmp	r1, #47	; 0x2f
 8012262:	d01e      	beq.n	80122a2 <rmw_validate_full_topic_name+0xea>
 8012264:	5dc9      	ldrb	r1, [r1, r7]
 8012266:	0749      	lsls	r1, r1, #29
 8012268:	d5ed      	bpl.n	8012246 <rmw_validate_full_topic_name+0x8e>
 801226a:	2206      	movs	r2, #6
 801226c:	602a      	str	r2, [r5, #0]
 801226e:	2e00      	cmp	r6, #0
 8012270:	d0bd      	beq.n	80121ee <rmw_validate_full_topic_name+0x36>
 8012272:	2000      	movs	r0, #0
 8012274:	6033      	str	r3, [r6, #0]
 8012276:	e7b4      	b.n	80121e2 <rmw_validate_full_topic_name+0x2a>
 8012278:	200b      	movs	r0, #11
 801227a:	4770      	bx	lr
 801227c:	200b      	movs	r0, #11
 801227e:	e7b0      	b.n	80121e2 <rmw_validate_full_topic_name+0x2a>
 8012280:	2203      	movs	r2, #3
 8012282:	602a      	str	r2, [r5, #0]
 8012284:	2e00      	cmp	r6, #0
 8012286:	d1f4      	bne.n	8012272 <rmw_validate_full_topic_name+0xba>
 8012288:	e7b1      	b.n	80121ee <rmw_validate_full_topic_name+0x36>
 801228a:	28f7      	cmp	r0, #247	; 0xf7
 801228c:	d803      	bhi.n	8012296 <rmw_validate_full_topic_name+0xde>
 801228e:	2300      	movs	r3, #0
 8012290:	4618      	mov	r0, r3
 8012292:	602b      	str	r3, [r5, #0]
 8012294:	e7a5      	b.n	80121e2 <rmw_validate_full_topic_name+0x2a>
 8012296:	2307      	movs	r3, #7
 8012298:	602b      	str	r3, [r5, #0]
 801229a:	2e00      	cmp	r6, #0
 801229c:	d0a7      	beq.n	80121ee <rmw_validate_full_topic_name+0x36>
 801229e:	23f6      	movs	r3, #246	; 0xf6
 80122a0:	e7e7      	b.n	8012272 <rmw_validate_full_topic_name+0xba>
 80122a2:	2205      	movs	r2, #5
 80122a4:	602a      	str	r2, [r5, #0]
 80122a6:	2e00      	cmp	r6, #0
 80122a8:	d1e3      	bne.n	8012272 <rmw_validate_full_topic_name+0xba>
 80122aa:	e7a0      	b.n	80121ee <rmw_validate_full_topic_name+0x36>
 80122ac:	08016570 	.word	0x08016570

080122b0 <on_status>:
 80122b0:	b082      	sub	sp, #8
 80122b2:	b002      	add	sp, #8
 80122b4:	4770      	bx	lr
 80122b6:	bf00      	nop

080122b8 <on_topic>:
 80122b8:	4a23      	ldr	r2, [pc, #140]	; (8012348 <on_topic+0x90>)
 80122ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122be:	6812      	ldr	r2, [r2, #0]
 80122c0:	b094      	sub	sp, #80	; 0x50
 80122c2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80122c4:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 80122c8:	9113      	str	r1, [sp, #76]	; 0x4c
 80122ca:	9312      	str	r3, [sp, #72]	; 0x48
 80122cc:	b3c2      	cbz	r2, 8012340 <on_topic+0x88>
 80122ce:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80122d2:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80122d6:	e001      	b.n	80122dc <on_topic+0x24>
 80122d8:	6852      	ldr	r2, [r2, #4]
 80122da:	b38a      	cbz	r2, 8012340 <on_topic+0x88>
 80122dc:	6894      	ldr	r4, [r2, #8]
 80122de:	8aa3      	ldrh	r3, [r4, #20]
 80122e0:	428b      	cmp	r3, r1
 80122e2:	d1f9      	bne.n	80122d8 <on_topic+0x20>
 80122e4:	7da3      	ldrb	r3, [r4, #22]
 80122e6:	4283      	cmp	r3, r0
 80122e8:	d1f6      	bne.n	80122d8 <on_topic+0x20>
 80122ea:	2248      	movs	r2, #72	; 0x48
 80122ec:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80122f0:	4668      	mov	r0, sp
 80122f2:	f002 fb7e 	bl	80149f2 <memcpy>
 80122f6:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80122fa:	4620      	mov	r0, r4
 80122fc:	cb0c      	ldmia	r3, {r2, r3}
 80122fe:	f7f9 ff7d 	bl	800c1fc <rmw_uxrce_get_static_input_buffer_for_entity>
 8012302:	4607      	mov	r7, r0
 8012304:	b1e0      	cbz	r0, 8012340 <on_topic+0x88>
 8012306:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801230a:	462a      	mov	r2, r5
 801230c:	4630      	mov	r0, r6
 801230e:	f108 0110 	add.w	r1, r8, #16
 8012312:	f000 fc1d 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 8012316:	b930      	cbnz	r0, 8012326 <on_topic+0x6e>
 8012318:	4639      	mov	r1, r7
 801231a:	480c      	ldr	r0, [pc, #48]	; (801234c <on_topic+0x94>)
 801231c:	b014      	add	sp, #80	; 0x50
 801231e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012322:	f000 b8bd 	b.w	80124a0 <put_memory>
 8012326:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801232a:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801232e:	f000 fb37 	bl	80129a0 <rmw_uros_epoch_nanos>
 8012332:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8012336:	2305      	movs	r3, #5
 8012338:	e942 0102 	strd	r0, r1, [r2, #-8]
 801233c:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8012340:	b014      	add	sp, #80	; 0x50
 8012342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012346:	bf00      	nop
 8012348:	20010dfc 	.word	0x20010dfc
 801234c:	20010dec 	.word	0x20010dec

08012350 <on_request>:
 8012350:	4824      	ldr	r0, [pc, #144]	; (80123e4 <on_request+0x94>)
 8012352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012356:	6800      	ldr	r0, [r0, #0]
 8012358:	b094      	sub	sp, #80	; 0x50
 801235a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801235c:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 8012360:	9113      	str	r1, [sp, #76]	; 0x4c
 8012362:	2800      	cmp	r0, #0
 8012364:	d03b      	beq.n	80123de <on_request+0x8e>
 8012366:	461d      	mov	r5, r3
 8012368:	e001      	b.n	801236e <on_request+0x1e>
 801236a:	6840      	ldr	r0, [r0, #4]
 801236c:	b3b8      	cbz	r0, 80123de <on_request+0x8e>
 801236e:	6884      	ldr	r4, [r0, #8]
 8012370:	8b21      	ldrh	r1, [r4, #24]
 8012372:	4291      	cmp	r1, r2
 8012374:	d1f9      	bne.n	801236a <on_request+0x1a>
 8012376:	2248      	movs	r2, #72	; 0x48
 8012378:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801237c:	4668      	mov	r0, sp
 801237e:	f002 fb38 	bl	80149f2 <memcpy>
 8012382:	f104 0320 	add.w	r3, r4, #32
 8012386:	4620      	mov	r0, r4
 8012388:	cb0c      	ldmia	r3, {r2, r3}
 801238a:	f7f9 ff37 	bl	800c1fc <rmw_uxrce_get_static_input_buffer_for_entity>
 801238e:	4680      	mov	r8, r0
 8012390:	b328      	cbz	r0, 80123de <on_request+0x8e>
 8012392:	4630      	mov	r0, r6
 8012394:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8012398:	463a      	mov	r2, r7
 801239a:	f106 0110 	add.w	r1, r6, #16
 801239e:	f000 fbd7 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 80123a2:	b930      	cbnz	r0, 80123b2 <on_request+0x62>
 80123a4:	4641      	mov	r1, r8
 80123a6:	4810      	ldr	r0, [pc, #64]	; (80123e8 <on_request+0x98>)
 80123a8:	b014      	add	sp, #80	; 0x50
 80123aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123ae:	f000 b877 	b.w	80124a0 <put_memory>
 80123b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80123b4:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 80123b8:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 80123bc:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 80123c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80123c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80123c8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80123cc:	f000 fae8 	bl	80129a0 <rmw_uros_epoch_nanos>
 80123d0:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 80123d4:	2303      	movs	r3, #3
 80123d6:	e942 0102 	strd	r0, r1, [r2, #-8]
 80123da:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 80123de:	b014      	add	sp, #80	; 0x50
 80123e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123e4:	20010dcc 	.word	0x20010dcc
 80123e8:	20010dec 	.word	0x20010dec

080123ec <on_reply>:
 80123ec:	4822      	ldr	r0, [pc, #136]	; (8012478 <on_reply+0x8c>)
 80123ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123f2:	6800      	ldr	r0, [r0, #0]
 80123f4:	b094      	sub	sp, #80	; 0x50
 80123f6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80123f8:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 80123fc:	9113      	str	r1, [sp, #76]	; 0x4c
 80123fe:	b3b8      	cbz	r0, 8012470 <on_reply+0x84>
 8012400:	461d      	mov	r5, r3
 8012402:	e001      	b.n	8012408 <on_reply+0x1c>
 8012404:	6840      	ldr	r0, [r0, #4]
 8012406:	b398      	cbz	r0, 8012470 <on_reply+0x84>
 8012408:	6884      	ldr	r4, [r0, #8]
 801240a:	8b21      	ldrh	r1, [r4, #24]
 801240c:	4291      	cmp	r1, r2
 801240e:	d1f9      	bne.n	8012404 <on_reply+0x18>
 8012410:	2248      	movs	r2, #72	; 0x48
 8012412:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8012416:	4668      	mov	r0, sp
 8012418:	f002 faeb 	bl	80149f2 <memcpy>
 801241c:	f104 0320 	add.w	r3, r4, #32
 8012420:	4620      	mov	r0, r4
 8012422:	cb0c      	ldmia	r3, {r2, r3}
 8012424:	f7f9 feea 	bl	800c1fc <rmw_uxrce_get_static_input_buffer_for_entity>
 8012428:	4680      	mov	r8, r0
 801242a:	b308      	cbz	r0, 8012470 <on_reply+0x84>
 801242c:	4630      	mov	r0, r6
 801242e:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8012432:	463a      	mov	r2, r7
 8012434:	f106 0110 	add.w	r1, r6, #16
 8012438:	f000 fb8a 	bl	8012b50 <ucdr_deserialize_array_uint8_t>
 801243c:	b930      	cbnz	r0, 801244c <on_reply+0x60>
 801243e:	4641      	mov	r1, r8
 8012440:	480e      	ldr	r0, [pc, #56]	; (801247c <on_reply+0x90>)
 8012442:	b014      	add	sp, #80	; 0x50
 8012444:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012448:	f000 b82a 	b.w	80124a0 <put_memory>
 801244c:	2200      	movs	r2, #0
 801244e:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 8012452:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 8012456:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801245a:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801245e:	f000 fa9f 	bl	80129a0 <rmw_uros_epoch_nanos>
 8012462:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 8012466:	2304      	movs	r3, #4
 8012468:	e942 0102 	strd	r0, r1, [r2, #-8]
 801246c:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 8012470:	b014      	add	sp, #80	; 0x50
 8012472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012476:	bf00      	nop
 8012478:	2000c4dc 	.word	0x2000c4dc
 801247c:	20010dec 	.word	0x20010dec

08012480 <get_memory>:
 8012480:	4603      	mov	r3, r0
 8012482:	6840      	ldr	r0, [r0, #4]
 8012484:	b158      	cbz	r0, 801249e <get_memory+0x1e>
 8012486:	6842      	ldr	r2, [r0, #4]
 8012488:	605a      	str	r2, [r3, #4]
 801248a:	b10a      	cbz	r2, 8012490 <get_memory+0x10>
 801248c:	2100      	movs	r1, #0
 801248e:	6011      	str	r1, [r2, #0]
 8012490:	681a      	ldr	r2, [r3, #0]
 8012492:	6042      	str	r2, [r0, #4]
 8012494:	b102      	cbz	r2, 8012498 <get_memory+0x18>
 8012496:	6010      	str	r0, [r2, #0]
 8012498:	2200      	movs	r2, #0
 801249a:	6002      	str	r2, [r0, #0]
 801249c:	6018      	str	r0, [r3, #0]
 801249e:	4770      	bx	lr

080124a0 <put_memory>:
 80124a0:	680b      	ldr	r3, [r1, #0]
 80124a2:	b10b      	cbz	r3, 80124a8 <put_memory+0x8>
 80124a4:	684a      	ldr	r2, [r1, #4]
 80124a6:	605a      	str	r2, [r3, #4]
 80124a8:	684a      	ldr	r2, [r1, #4]
 80124aa:	b102      	cbz	r2, 80124ae <put_memory+0xe>
 80124ac:	6013      	str	r3, [r2, #0]
 80124ae:	6803      	ldr	r3, [r0, #0]
 80124b0:	428b      	cmp	r3, r1
 80124b2:	6843      	ldr	r3, [r0, #4]
 80124b4:	bf08      	it	eq
 80124b6:	6002      	streq	r2, [r0, #0]
 80124b8:	604b      	str	r3, [r1, #4]
 80124ba:	b103      	cbz	r3, 80124be <put_memory+0x1e>
 80124bc:	6019      	str	r1, [r3, #0]
 80124be:	2300      	movs	r3, #0
 80124c0:	600b      	str	r3, [r1, #0]
 80124c2:	6041      	str	r1, [r0, #4]
 80124c4:	4770      	bx	lr
 80124c6:	bf00      	nop

080124c8 <rmw_destroy_client>:
 80124c8:	b570      	push	{r4, r5, r6, lr}
 80124ca:	b128      	cbz	r0, 80124d8 <rmw_destroy_client+0x10>
 80124cc:	4604      	mov	r4, r0
 80124ce:	6800      	ldr	r0, [r0, #0]
 80124d0:	460d      	mov	r5, r1
 80124d2:	f7fa f85f 	bl	800c594 <is_uxrce_rmw_identifier_valid>
 80124d6:	b910      	cbnz	r0, 80124de <rmw_destroy_client+0x16>
 80124d8:	2401      	movs	r4, #1
 80124da:	4620      	mov	r0, r4
 80124dc:	bd70      	pop	{r4, r5, r6, pc}
 80124de:	6863      	ldr	r3, [r4, #4]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d0f9      	beq.n	80124d8 <rmw_destroy_client+0x10>
 80124e4:	2d00      	cmp	r5, #0
 80124e6:	d0f7      	beq.n	80124d8 <rmw_destroy_client+0x10>
 80124e8:	6828      	ldr	r0, [r5, #0]
 80124ea:	f7fa f853 	bl	800c594 <is_uxrce_rmw_identifier_valid>
 80124ee:	2800      	cmp	r0, #0
 80124f0:	d0f2      	beq.n	80124d8 <rmw_destroy_client+0x10>
 80124f2:	686e      	ldr	r6, [r5, #4]
 80124f4:	2e00      	cmp	r6, #0
 80124f6:	d0ef      	beq.n	80124d8 <rmw_destroy_client+0x10>
 80124f8:	6864      	ldr	r4, [r4, #4]
 80124fa:	6932      	ldr	r2, [r6, #16]
 80124fc:	6920      	ldr	r0, [r4, #16]
 80124fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012502:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012506:	6819      	ldr	r1, [r3, #0]
 8012508:	f7fa fab0 	bl	800ca6c <uxr_buffer_cancel_data>
 801250c:	4602      	mov	r2, r0
 801250e:	6920      	ldr	r0, [r4, #16]
 8012510:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012514:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012518:	f7f9 ff70 	bl	800c3fc <run_xrce_session>
 801251c:	6920      	ldr	r0, [r4, #16]
 801251e:	6932      	ldr	r2, [r6, #16]
 8012520:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012524:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012528:	6819      	ldr	r1, [r3, #0]
 801252a:	f7fa f8bf 	bl	800c6ac <uxr_buffer_delete_entity>
 801252e:	4602      	mov	r2, r0
 8012530:	6920      	ldr	r0, [r4, #16]
 8012532:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012536:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801253a:	f7f9 ff5f 	bl	800c3fc <run_xrce_session>
 801253e:	4603      	mov	r3, r0
 8012540:	4628      	mov	r0, r5
 8012542:	2b00      	cmp	r3, #0
 8012544:	bf14      	ite	ne
 8012546:	2400      	movne	r4, #0
 8012548:	2402      	moveq	r4, #2
 801254a:	f7f9 fe35 	bl	800c1b8 <rmw_uxrce_fini_client_memory>
 801254e:	e7c4      	b.n	80124da <rmw_destroy_client+0x12>

08012550 <rmw_get_implementation_identifier>:
 8012550:	4b01      	ldr	r3, [pc, #4]	; (8012558 <rmw_get_implementation_identifier+0x8>)
 8012552:	6818      	ldr	r0, [r3, #0]
 8012554:	4770      	bx	lr
 8012556:	bf00      	nop
 8012558:	080164c8 	.word	0x080164c8

0801255c <rmw_create_guard_condition>:
 801255c:	b538      	push	{r3, r4, r5, lr}
 801255e:	4605      	mov	r5, r0
 8012560:	4808      	ldr	r0, [pc, #32]	; (8012584 <rmw_create_guard_condition+0x28>)
 8012562:	f7ff ff8d 	bl	8012480 <get_memory>
 8012566:	4603      	mov	r3, r0
 8012568:	b148      	cbz	r0, 801257e <rmw_create_guard_condition+0x22>
 801256a:	6884      	ldr	r4, [r0, #8]
 801256c:	2300      	movs	r3, #0
 801256e:	61e5      	str	r5, [r4, #28]
 8012570:	7423      	strb	r3, [r4, #16]
 8012572:	f7ff ffed 	bl	8012550 <rmw_get_implementation_identifier>
 8012576:	f104 0314 	add.w	r3, r4, #20
 801257a:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801257e:	4618      	mov	r0, r3
 8012580:	bd38      	pop	{r3, r4, r5, pc}
 8012582:	bf00      	nop
 8012584:	20010d8c 	.word	0x20010d8c

08012588 <rmw_destroy_guard_condition>:
 8012588:	b508      	push	{r3, lr}
 801258a:	4b08      	ldr	r3, [pc, #32]	; (80125ac <rmw_destroy_guard_condition+0x24>)
 801258c:	6819      	ldr	r1, [r3, #0]
 801258e:	b911      	cbnz	r1, 8012596 <rmw_destroy_guard_condition+0xe>
 8012590:	e00a      	b.n	80125a8 <rmw_destroy_guard_condition+0x20>
 8012592:	6849      	ldr	r1, [r1, #4]
 8012594:	b141      	cbz	r1, 80125a8 <rmw_destroy_guard_condition+0x20>
 8012596:	688b      	ldr	r3, [r1, #8]
 8012598:	3314      	adds	r3, #20
 801259a:	4298      	cmp	r0, r3
 801259c:	d1f9      	bne.n	8012592 <rmw_destroy_guard_condition+0xa>
 801259e:	4803      	ldr	r0, [pc, #12]	; (80125ac <rmw_destroy_guard_condition+0x24>)
 80125a0:	f7ff ff7e 	bl	80124a0 <put_memory>
 80125a4:	2000      	movs	r0, #0
 80125a6:	bd08      	pop	{r3, pc}
 80125a8:	2001      	movs	r0, #1
 80125aa:	bd08      	pop	{r3, pc}
 80125ac:	20010d8c 	.word	0x20010d8c

080125b0 <destroy_topic>:
 80125b0:	b538      	push	{r3, r4, r5, lr}
 80125b2:	6985      	ldr	r5, [r0, #24]
 80125b4:	b1dd      	cbz	r5, 80125ee <destroy_topic+0x3e>
 80125b6:	4604      	mov	r4, r0
 80125b8:	6928      	ldr	r0, [r5, #16]
 80125ba:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80125be:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80125c2:	6922      	ldr	r2, [r4, #16]
 80125c4:	6819      	ldr	r1, [r3, #0]
 80125c6:	f7fa f871 	bl	800c6ac <uxr_buffer_delete_entity>
 80125ca:	4602      	mov	r2, r0
 80125cc:	6928      	ldr	r0, [r5, #16]
 80125ce:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80125d2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80125d6:	f7f9 ff11 	bl	800c3fc <run_xrce_session>
 80125da:	4603      	mov	r3, r0
 80125dc:	4620      	mov	r0, r4
 80125de:	2b00      	cmp	r3, #0
 80125e0:	bf14      	ite	ne
 80125e2:	2400      	movne	r4, #0
 80125e4:	2402      	moveq	r4, #2
 80125e6:	f7f9 fdfd 	bl	800c1e4 <rmw_uxrce_fini_topic_memory>
 80125ea:	4620      	mov	r0, r4
 80125ec:	bd38      	pop	{r3, r4, r5, pc}
 80125ee:	2401      	movs	r4, #1
 80125f0:	4620      	mov	r0, r4
 80125f2:	bd38      	pop	{r3, r4, r5, pc}

080125f4 <rmw_take_with_info>:
 80125f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125f6:	4604      	mov	r4, r0
 80125f8:	6800      	ldr	r0, [r0, #0]
 80125fa:	b089      	sub	sp, #36	; 0x24
 80125fc:	460f      	mov	r7, r1
 80125fe:	4615      	mov	r5, r2
 8012600:	b128      	cbz	r0, 801260e <rmw_take_with_info+0x1a>
 8012602:	4b24      	ldr	r3, [pc, #144]	; (8012694 <rmw_take_with_info+0xa0>)
 8012604:	6819      	ldr	r1, [r3, #0]
 8012606:	f7ed fe1b 	bl	8000240 <strcmp>
 801260a:	2800      	cmp	r0, #0
 801260c:	d13e      	bne.n	801268c <rmw_take_with_info+0x98>
 801260e:	b305      	cbz	r5, 8012652 <rmw_take_with_info+0x5e>
 8012610:	2300      	movs	r3, #0
 8012612:	6864      	ldr	r4, [r4, #4]
 8012614:	702b      	strb	r3, [r5, #0]
 8012616:	f7f9 fe73 	bl	800c300 <rmw_uxrce_clean_expired_static_input_buffer>
 801261a:	4620      	mov	r0, r4
 801261c:	f7f9 fe48 	bl	800c2b0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012620:	4606      	mov	r6, r0
 8012622:	b1f0      	cbz	r0, 8012662 <rmw_take_with_info+0x6e>
 8012624:	6881      	ldr	r1, [r0, #8]
 8012626:	4668      	mov	r0, sp
 8012628:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801262c:	3110      	adds	r1, #16
 801262e:	f7f6 fe99 	bl	8009364 <ucdr_init_buffer>
 8012632:	69a3      	ldr	r3, [r4, #24]
 8012634:	4639      	mov	r1, r7
 8012636:	4668      	mov	r0, sp
 8012638:	68db      	ldr	r3, [r3, #12]
 801263a:	4798      	blx	r3
 801263c:	4604      	mov	r4, r0
 801263e:	4631      	mov	r1, r6
 8012640:	4815      	ldr	r0, [pc, #84]	; (8012698 <rmw_take_with_info+0xa4>)
 8012642:	f7ff ff2d 	bl	80124a0 <put_memory>
 8012646:	702c      	strb	r4, [r5, #0]
 8012648:	f084 0001 	eor.w	r0, r4, #1
 801264c:	b2c0      	uxtb	r0, r0
 801264e:	b009      	add	sp, #36	; 0x24
 8012650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012652:	6864      	ldr	r4, [r4, #4]
 8012654:	f7f9 fe54 	bl	800c300 <rmw_uxrce_clean_expired_static_input_buffer>
 8012658:	4620      	mov	r0, r4
 801265a:	f7f9 fe29 	bl	800c2b0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801265e:	4605      	mov	r5, r0
 8012660:	b910      	cbnz	r0, 8012668 <rmw_take_with_info+0x74>
 8012662:	2001      	movs	r0, #1
 8012664:	b009      	add	sp, #36	; 0x24
 8012666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012668:	68a9      	ldr	r1, [r5, #8]
 801266a:	4668      	mov	r0, sp
 801266c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8012670:	3110      	adds	r1, #16
 8012672:	f7f6 fe77 	bl	8009364 <ucdr_init_buffer>
 8012676:	69a3      	ldr	r3, [r4, #24]
 8012678:	4639      	mov	r1, r7
 801267a:	4668      	mov	r0, sp
 801267c:	68db      	ldr	r3, [r3, #12]
 801267e:	4798      	blx	r3
 8012680:	4629      	mov	r1, r5
 8012682:	4604      	mov	r4, r0
 8012684:	4804      	ldr	r0, [pc, #16]	; (8012698 <rmw_take_with_info+0xa4>)
 8012686:	f7ff ff0b 	bl	80124a0 <put_memory>
 801268a:	e7dd      	b.n	8012648 <rmw_take_with_info+0x54>
 801268c:	200c      	movs	r0, #12
 801268e:	b009      	add	sp, #36	; 0x24
 8012690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012692:	bf00      	nop
 8012694:	080164c8 	.word	0x080164c8
 8012698:	20010dec 	.word	0x20010dec

0801269c <rmw_wait>:
 801269c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80126a0:	4698      	mov	r8, r3
 80126a2:	ea40 0301 	orr.w	r3, r0, r1
 80126a6:	b089      	sub	sp, #36	; 0x24
 80126a8:	ea48 0303 	orr.w	r3, r8, r3
 80126ac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80126ae:	4313      	orrs	r3, r2
 80126b0:	f000 8106 	beq.w	80128c0 <rmw_wait+0x224>
 80126b4:	4605      	mov	r5, r0
 80126b6:	460e      	mov	r6, r1
 80126b8:	4691      	mov	r9, r2
 80126ba:	b16c      	cbz	r4, 80126d8 <rmw_wait+0x3c>
 80126bc:	4ba6      	ldr	r3, [pc, #664]	; (8012958 <rmw_wait+0x2bc>)
 80126be:	af04      	add	r7, sp, #16
 80126c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80126c2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80126c6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80126ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80126ce:	f7ff fce3 	bl	8012098 <rmw_time_equal>
 80126d2:	2800      	cmp	r0, #0
 80126d4:	f000 810b 	beq.w	80128ee <rmw_wait+0x252>
 80126d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80126dc:	f7f9 fe10 	bl	800c300 <rmw_uxrce_clean_expired_static_input_buffer>
 80126e0:	4b9e      	ldr	r3, [pc, #632]	; (801295c <rmw_wait+0x2c0>)
 80126e2:	681c      	ldr	r4, [r3, #0]
 80126e4:	b14c      	cbz	r4, 80126fa <rmw_wait+0x5e>
 80126e6:	4623      	mov	r3, r4
 80126e8:	2100      	movs	r1, #0
 80126ea:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80126ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80126f2:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d1f7      	bne.n	80126ea <rmw_wait+0x4e>
 80126fa:	f1b9 0f00 	cmp.w	r9, #0
 80126fe:	d011      	beq.n	8012724 <rmw_wait+0x88>
 8012700:	f8d9 1000 	ldr.w	r1, [r9]
 8012704:	b171      	cbz	r1, 8012724 <rmw_wait+0x88>
 8012706:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801270a:	2300      	movs	r3, #0
 801270c:	2001      	movs	r0, #1
 801270e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8012712:	3301      	adds	r3, #1
 8012714:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8012716:	4299      	cmp	r1, r3
 8012718:	6912      	ldr	r2, [r2, #16]
 801271a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801271e:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8012722:	d1f4      	bne.n	801270e <rmw_wait+0x72>
 8012724:	f1b8 0f00 	cmp.w	r8, #0
 8012728:	d011      	beq.n	801274e <rmw_wait+0xb2>
 801272a:	f8d8 1000 	ldr.w	r1, [r8]
 801272e:	b171      	cbz	r1, 801274e <rmw_wait+0xb2>
 8012730:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8012734:	2300      	movs	r3, #0
 8012736:	2001      	movs	r0, #1
 8012738:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801273c:	3301      	adds	r3, #1
 801273e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8012740:	4299      	cmp	r1, r3
 8012742:	6912      	ldr	r2, [r2, #16]
 8012744:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8012748:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801274c:	d1f4      	bne.n	8012738 <rmw_wait+0x9c>
 801274e:	b185      	cbz	r5, 8012772 <rmw_wait+0xd6>
 8012750:	6829      	ldr	r1, [r5, #0]
 8012752:	b171      	cbz	r1, 8012772 <rmw_wait+0xd6>
 8012754:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8012758:	2300      	movs	r3, #0
 801275a:	2001      	movs	r0, #1
 801275c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8012760:	3301      	adds	r3, #1
 8012762:	6a12      	ldr	r2, [r2, #32]
 8012764:	4299      	cmp	r1, r3
 8012766:	6912      	ldr	r2, [r2, #16]
 8012768:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801276c:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8012770:	d1f4      	bne.n	801275c <rmw_wait+0xc0>
 8012772:	b344      	cbz	r4, 80127c6 <rmw_wait+0x12a>
 8012774:	4622      	mov	r2, r4
 8012776:	2300      	movs	r3, #0
 8012778:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801277c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8012780:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 8012784:	440b      	add	r3, r1
 8012786:	b2db      	uxtb	r3, r3
 8012788:	2a00      	cmp	r2, #0
 801278a:	d1f5      	bne.n	8012778 <rmw_wait+0xdc>
 801278c:	2b00      	cmp	r3, #0
 801278e:	d05f      	beq.n	8012850 <rmw_wait+0x1b4>
 8012790:	1c7a      	adds	r2, r7, #1
 8012792:	d00d      	beq.n	80127b0 <rmw_wait+0x114>
 8012794:	ee07 7a90 	vmov	s15, r7
 8012798:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801279c:	ee07 3a90 	vmov	s15, r3
 80127a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80127a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80127a8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80127ac:	ee17 7a90 	vmov	r7, s15
 80127b0:	68a0      	ldr	r0, [r4, #8]
 80127b2:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80127b6:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	f040 808d 	bne.w	80128da <rmw_wait+0x23e>
 80127c0:	6864      	ldr	r4, [r4, #4]
 80127c2:	2c00      	cmp	r4, #0
 80127c4:	d1f4      	bne.n	80127b0 <rmw_wait+0x114>
 80127c6:	f1b9 0f00 	cmp.w	r9, #0
 80127ca:	f000 80a1 	beq.w	8012910 <rmw_wait+0x274>
 80127ce:	f8d9 7000 	ldr.w	r7, [r9]
 80127d2:	2f00      	cmp	r7, #0
 80127d4:	f000 80a4 	beq.w	8012920 <rmw_wait+0x284>
 80127d8:	2400      	movs	r4, #0
 80127da:	4627      	mov	r7, r4
 80127dc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80127e0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80127e4:	f7f9 fd64 	bl	800c2b0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80127e8:	2800      	cmp	r0, #0
 80127ea:	d03b      	beq.n	8012864 <rmw_wait+0x1c8>
 80127ec:	3401      	adds	r4, #1
 80127ee:	f8d9 3000 	ldr.w	r3, [r9]
 80127f2:	2701      	movs	r7, #1
 80127f4:	42a3      	cmp	r3, r4
 80127f6:	d8f1      	bhi.n	80127dc <rmw_wait+0x140>
 80127f8:	2701      	movs	r7, #1
 80127fa:	f1b8 0f00 	cmp.w	r8, #0
 80127fe:	d010      	beq.n	8012822 <rmw_wait+0x186>
 8012800:	f8d8 3000 	ldr.w	r3, [r8]
 8012804:	b16b      	cbz	r3, 8012822 <rmw_wait+0x186>
 8012806:	2400      	movs	r4, #0
 8012808:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801280c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012810:	f7f9 fd4e 	bl	800c2b0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012814:	b370      	cbz	r0, 8012874 <rmw_wait+0x1d8>
 8012816:	3401      	adds	r4, #1
 8012818:	f8d8 3000 	ldr.w	r3, [r8]
 801281c:	2701      	movs	r7, #1
 801281e:	42a3      	cmp	r3, r4
 8012820:	d8f2      	bhi.n	8012808 <rmw_wait+0x16c>
 8012822:	2d00      	cmp	r5, #0
 8012824:	d035      	beq.n	8012892 <rmw_wait+0x1f6>
 8012826:	682b      	ldr	r3, [r5, #0]
 8012828:	b39b      	cbz	r3, 8012892 <rmw_wait+0x1f6>
 801282a:	2400      	movs	r4, #0
 801282c:	686b      	ldr	r3, [r5, #4]
 801282e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012832:	f7f9 fd3d 	bl	800c2b0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012836:	b328      	cbz	r0, 8012884 <rmw_wait+0x1e8>
 8012838:	3401      	adds	r4, #1
 801283a:	682b      	ldr	r3, [r5, #0]
 801283c:	2701      	movs	r7, #1
 801283e:	42a3      	cmp	r3, r4
 8012840:	d8f4      	bhi.n	801282c <rmw_wait+0x190>
 8012842:	2e00      	cmp	r6, #0
 8012844:	d03c      	beq.n	80128c0 <rmw_wait+0x224>
 8012846:	6834      	ldr	r4, [r6, #0]
 8012848:	2c00      	cmp	r4, #0
 801284a:	d039      	beq.n	80128c0 <rmw_wait+0x224>
 801284c:	2701      	movs	r7, #1
 801284e:	e023      	b.n	8012898 <rmw_wait+0x1fc>
 8012850:	68a0      	ldr	r0, [r4, #8]
 8012852:	2100      	movs	r1, #0
 8012854:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012858:	f7fa fea0 	bl	800d59c <uxr_run_session_timeout>
 801285c:	6864      	ldr	r4, [r4, #4]
 801285e:	2c00      	cmp	r4, #0
 8012860:	d1f6      	bne.n	8012850 <rmw_wait+0x1b4>
 8012862:	e7b0      	b.n	80127c6 <rmw_wait+0x12a>
 8012864:	e9d9 3200 	ldrd	r3, r2, [r9]
 8012868:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801286c:	3401      	adds	r4, #1
 801286e:	42a3      	cmp	r3, r4
 8012870:	d8b4      	bhi.n	80127dc <rmw_wait+0x140>
 8012872:	e7c2      	b.n	80127fa <rmw_wait+0x15e>
 8012874:	e9d8 3200 	ldrd	r3, r2, [r8]
 8012878:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801287c:	3401      	adds	r4, #1
 801287e:	429c      	cmp	r4, r3
 8012880:	d3c2      	bcc.n	8012808 <rmw_wait+0x16c>
 8012882:	e7ce      	b.n	8012822 <rmw_wait+0x186>
 8012884:	e9d5 3200 	ldrd	r3, r2, [r5]
 8012888:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801288c:	3401      	adds	r4, #1
 801288e:	42a3      	cmp	r3, r4
 8012890:	d8cc      	bhi.n	801282c <rmw_wait+0x190>
 8012892:	b1a6      	cbz	r6, 80128be <rmw_wait+0x222>
 8012894:	6834      	ldr	r4, [r6, #0]
 8012896:	b194      	cbz	r4, 80128be <rmw_wait+0x222>
 8012898:	2300      	movs	r3, #0
 801289a:	461d      	mov	r5, r3
 801289c:	e004      	b.n	80128a8 <rmw_wait+0x20c>
 801289e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80128a2:	3301      	adds	r3, #1
 80128a4:	42a3      	cmp	r3, r4
 80128a6:	d00a      	beq.n	80128be <rmw_wait+0x222>
 80128a8:	6870      	ldr	r0, [r6, #4]
 80128aa:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80128ae:	7c0a      	ldrb	r2, [r1, #16]
 80128b0:	2a00      	cmp	r2, #0
 80128b2:	d0f4      	beq.n	801289e <rmw_wait+0x202>
 80128b4:	3301      	adds	r3, #1
 80128b6:	4617      	mov	r7, r2
 80128b8:	740d      	strb	r5, [r1, #16]
 80128ba:	42a3      	cmp	r3, r4
 80128bc:	d1f4      	bne.n	80128a8 <rmw_wait+0x20c>
 80128be:	b147      	cbz	r7, 80128d2 <rmw_wait+0x236>
 80128c0:	2000      	movs	r0, #0
 80128c2:	b009      	add	sp, #36	; 0x24
 80128c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128c8:	b11e      	cbz	r6, 80128d2 <rmw_wait+0x236>
 80128ca:	6834      	ldr	r4, [r6, #0]
 80128cc:	462f      	mov	r7, r5
 80128ce:	2c00      	cmp	r4, #0
 80128d0:	d1e2      	bne.n	8012898 <rmw_wait+0x1fc>
 80128d2:	2002      	movs	r0, #2
 80128d4:	b009      	add	sp, #36	; 0x24
 80128d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128da:	4639      	mov	r1, r7
 80128dc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80128e0:	f7fa fe76 	bl	800d5d0 <uxr_run_session_until_data>
 80128e4:	6864      	ldr	r4, [r4, #4]
 80128e6:	2c00      	cmp	r4, #0
 80128e8:	f47f af62 	bne.w	80127b0 <rmw_wait+0x114>
 80128ec:	e76b      	b.n	80127c6 <rmw_wait+0x12a>
 80128ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80128f2:	f7ff fc27 	bl	8012144 <rmw_time_total_nsec>
 80128f6:	2300      	movs	r3, #0
 80128f8:	4a19      	ldr	r2, [pc, #100]	; (8012960 <rmw_wait+0x2c4>)
 80128fa:	f7ed fd59 	bl	80003b0 <__aeabi_uldivmod>
 80128fe:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8012902:	4607      	mov	r7, r0
 8012904:	f171 0300 	sbcs.w	r3, r1, #0
 8012908:	bfa8      	it	ge
 801290a:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801290e:	e6e5      	b.n	80126dc <rmw_wait+0x40>
 8012910:	f1b8 0f00 	cmp.w	r8, #0
 8012914:	d00f      	beq.n	8012936 <rmw_wait+0x29a>
 8012916:	f8d8 3000 	ldr.w	r3, [r8]
 801291a:	b193      	cbz	r3, 8012942 <rmw_wait+0x2a6>
 801291c:	464f      	mov	r7, r9
 801291e:	e772      	b.n	8012806 <rmw_wait+0x16a>
 8012920:	f1b8 0f00 	cmp.w	r8, #0
 8012924:	d007      	beq.n	8012936 <rmw_wait+0x29a>
 8012926:	f8d8 3000 	ldr.w	r3, [r8]
 801292a:	2b00      	cmp	r3, #0
 801292c:	f47f af6b 	bne.w	8012806 <rmw_wait+0x16a>
 8012930:	b155      	cbz	r5, 8012948 <rmw_wait+0x2ac>
 8012932:	461f      	mov	r7, r3
 8012934:	e777      	b.n	8012826 <rmw_wait+0x18a>
 8012936:	2d00      	cmp	r5, #0
 8012938:	d0c6      	beq.n	80128c8 <rmw_wait+0x22c>
 801293a:	682b      	ldr	r3, [r5, #0]
 801293c:	b143      	cbz	r3, 8012950 <rmw_wait+0x2b4>
 801293e:	4647      	mov	r7, r8
 8012940:	e773      	b.n	801282a <rmw_wait+0x18e>
 8012942:	b10d      	cbz	r5, 8012948 <rmw_wait+0x2ac>
 8012944:	464f      	mov	r7, r9
 8012946:	e76e      	b.n	8012826 <rmw_wait+0x18a>
 8012948:	462f      	mov	r7, r5
 801294a:	2e00      	cmp	r6, #0
 801294c:	d1a2      	bne.n	8012894 <rmw_wait+0x1f8>
 801294e:	e7c0      	b.n	80128d2 <rmw_wait+0x236>
 8012950:	4647      	mov	r7, r8
 8012952:	2e00      	cmp	r6, #0
 8012954:	d19e      	bne.n	8012894 <rmw_wait+0x1f8>
 8012956:	e7bc      	b.n	80128d2 <rmw_wait+0x236>
 8012958:	080157b8 	.word	0x080157b8
 801295c:	20010ddc 	.word	0x20010ddc
 8012960:	000f4240 	.word	0x000f4240

08012964 <rmw_create_wait_set>:
 8012964:	b508      	push	{r3, lr}
 8012966:	4803      	ldr	r0, [pc, #12]	; (8012974 <rmw_create_wait_set+0x10>)
 8012968:	f7ff fd8a 	bl	8012480 <get_memory>
 801296c:	b108      	cbz	r0, 8012972 <rmw_create_wait_set+0xe>
 801296e:	6880      	ldr	r0, [r0, #8]
 8012970:	3010      	adds	r0, #16
 8012972:	bd08      	pop	{r3, pc}
 8012974:	20010e1c 	.word	0x20010e1c

08012978 <rmw_destroy_wait_set>:
 8012978:	b508      	push	{r3, lr}
 801297a:	4b08      	ldr	r3, [pc, #32]	; (801299c <rmw_destroy_wait_set+0x24>)
 801297c:	6819      	ldr	r1, [r3, #0]
 801297e:	b911      	cbnz	r1, 8012986 <rmw_destroy_wait_set+0xe>
 8012980:	e00a      	b.n	8012998 <rmw_destroy_wait_set+0x20>
 8012982:	6849      	ldr	r1, [r1, #4]
 8012984:	b141      	cbz	r1, 8012998 <rmw_destroy_wait_set+0x20>
 8012986:	688b      	ldr	r3, [r1, #8]
 8012988:	3310      	adds	r3, #16
 801298a:	4298      	cmp	r0, r3
 801298c:	d1f9      	bne.n	8012982 <rmw_destroy_wait_set+0xa>
 801298e:	4803      	ldr	r0, [pc, #12]	; (801299c <rmw_destroy_wait_set+0x24>)
 8012990:	f7ff fd86 	bl	80124a0 <put_memory>
 8012994:	2000      	movs	r0, #0
 8012996:	bd08      	pop	{r3, pc}
 8012998:	2001      	movs	r0, #1
 801299a:	bd08      	pop	{r3, pc}
 801299c:	20010e1c 	.word	0x20010e1c

080129a0 <rmw_uros_epoch_nanos>:
 80129a0:	4b05      	ldr	r3, [pc, #20]	; (80129b8 <rmw_uros_epoch_nanos+0x18>)
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	b123      	cbz	r3, 80129b0 <rmw_uros_epoch_nanos+0x10>
 80129a6:	6898      	ldr	r0, [r3, #8]
 80129a8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80129ac:	f7fa ba6c 	b.w	800ce88 <uxr_epoch_nanos>
 80129b0:	2000      	movs	r0, #0
 80129b2:	2100      	movs	r1, #0
 80129b4:	4770      	bx	lr
 80129b6:	bf00      	nop
 80129b8:	20010ddc 	.word	0x20010ddc

080129bc <ucdr_serialize_endian_array_char>:
 80129bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129c0:	4619      	mov	r1, r3
 80129c2:	461f      	mov	r7, r3
 80129c4:	4605      	mov	r5, r0
 80129c6:	4690      	mov	r8, r2
 80129c8:	f7f6 fc78 	bl	80092bc <ucdr_check_buffer_available_for>
 80129cc:	b9e0      	cbnz	r0, 8012a08 <ucdr_serialize_endian_array_char+0x4c>
 80129ce:	463e      	mov	r6, r7
 80129d0:	e00b      	b.n	80129ea <ucdr_serialize_endian_array_char+0x2e>
 80129d2:	4441      	add	r1, r8
 80129d4:	68a8      	ldr	r0, [r5, #8]
 80129d6:	4622      	mov	r2, r4
 80129d8:	1b36      	subs	r6, r6, r4
 80129da:	f002 f80a 	bl	80149f2 <memcpy>
 80129de:	68ab      	ldr	r3, [r5, #8]
 80129e0:	6928      	ldr	r0, [r5, #16]
 80129e2:	4423      	add	r3, r4
 80129e4:	4420      	add	r0, r4
 80129e6:	60ab      	str	r3, [r5, #8]
 80129e8:	6128      	str	r0, [r5, #16]
 80129ea:	4631      	mov	r1, r6
 80129ec:	2201      	movs	r2, #1
 80129ee:	4628      	mov	r0, r5
 80129f0:	f7f6 fcee 	bl	80093d0 <ucdr_check_final_buffer_behavior_array>
 80129f4:	1bb9      	subs	r1, r7, r6
 80129f6:	4604      	mov	r4, r0
 80129f8:	2800      	cmp	r0, #0
 80129fa:	d1ea      	bne.n	80129d2 <ucdr_serialize_endian_array_char+0x16>
 80129fc:	2301      	movs	r3, #1
 80129fe:	7da8      	ldrb	r0, [r5, #22]
 8012a00:	756b      	strb	r3, [r5, #21]
 8012a02:	4058      	eors	r0, r3
 8012a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a08:	463a      	mov	r2, r7
 8012a0a:	4641      	mov	r1, r8
 8012a0c:	68a8      	ldr	r0, [r5, #8]
 8012a0e:	f001 fff0 	bl	80149f2 <memcpy>
 8012a12:	68aa      	ldr	r2, [r5, #8]
 8012a14:	692b      	ldr	r3, [r5, #16]
 8012a16:	443a      	add	r2, r7
 8012a18:	443b      	add	r3, r7
 8012a1a:	60aa      	str	r2, [r5, #8]
 8012a1c:	612b      	str	r3, [r5, #16]
 8012a1e:	e7ed      	b.n	80129fc <ucdr_serialize_endian_array_char+0x40>

08012a20 <ucdr_deserialize_endian_array_char>:
 8012a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a24:	4619      	mov	r1, r3
 8012a26:	461f      	mov	r7, r3
 8012a28:	4605      	mov	r5, r0
 8012a2a:	4690      	mov	r8, r2
 8012a2c:	f7f6 fc46 	bl	80092bc <ucdr_check_buffer_available_for>
 8012a30:	b9e8      	cbnz	r0, 8012a6e <ucdr_deserialize_endian_array_char+0x4e>
 8012a32:	463e      	mov	r6, r7
 8012a34:	e00c      	b.n	8012a50 <ucdr_deserialize_endian_array_char+0x30>
 8012a36:	eb08 0003 	add.w	r0, r8, r3
 8012a3a:	68a9      	ldr	r1, [r5, #8]
 8012a3c:	4622      	mov	r2, r4
 8012a3e:	1b36      	subs	r6, r6, r4
 8012a40:	f001 ffd7 	bl	80149f2 <memcpy>
 8012a44:	68ab      	ldr	r3, [r5, #8]
 8012a46:	6928      	ldr	r0, [r5, #16]
 8012a48:	4423      	add	r3, r4
 8012a4a:	4420      	add	r0, r4
 8012a4c:	60ab      	str	r3, [r5, #8]
 8012a4e:	6128      	str	r0, [r5, #16]
 8012a50:	4631      	mov	r1, r6
 8012a52:	2201      	movs	r2, #1
 8012a54:	4628      	mov	r0, r5
 8012a56:	f7f6 fcbb 	bl	80093d0 <ucdr_check_final_buffer_behavior_array>
 8012a5a:	1bbb      	subs	r3, r7, r6
 8012a5c:	4604      	mov	r4, r0
 8012a5e:	2800      	cmp	r0, #0
 8012a60:	d1e9      	bne.n	8012a36 <ucdr_deserialize_endian_array_char+0x16>
 8012a62:	2301      	movs	r3, #1
 8012a64:	7da8      	ldrb	r0, [r5, #22]
 8012a66:	756b      	strb	r3, [r5, #21]
 8012a68:	4058      	eors	r0, r3
 8012a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a6e:	463a      	mov	r2, r7
 8012a70:	68a9      	ldr	r1, [r5, #8]
 8012a72:	4640      	mov	r0, r8
 8012a74:	f001 ffbd 	bl	80149f2 <memcpy>
 8012a78:	68aa      	ldr	r2, [r5, #8]
 8012a7a:	692b      	ldr	r3, [r5, #16]
 8012a7c:	443a      	add	r2, r7
 8012a7e:	443b      	add	r3, r7
 8012a80:	60aa      	str	r2, [r5, #8]
 8012a82:	612b      	str	r3, [r5, #16]
 8012a84:	e7ed      	b.n	8012a62 <ucdr_deserialize_endian_array_char+0x42>
 8012a86:	bf00      	nop

08012a88 <ucdr_serialize_array_uint8_t>:
 8012a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a8c:	4688      	mov	r8, r1
 8012a8e:	4611      	mov	r1, r2
 8012a90:	4617      	mov	r7, r2
 8012a92:	4605      	mov	r5, r0
 8012a94:	f7f6 fc12 	bl	80092bc <ucdr_check_buffer_available_for>
 8012a98:	b9e0      	cbnz	r0, 8012ad4 <ucdr_serialize_array_uint8_t+0x4c>
 8012a9a:	463e      	mov	r6, r7
 8012a9c:	e00b      	b.n	8012ab6 <ucdr_serialize_array_uint8_t+0x2e>
 8012a9e:	4441      	add	r1, r8
 8012aa0:	68a8      	ldr	r0, [r5, #8]
 8012aa2:	4622      	mov	r2, r4
 8012aa4:	1b36      	subs	r6, r6, r4
 8012aa6:	f001 ffa4 	bl	80149f2 <memcpy>
 8012aaa:	68ab      	ldr	r3, [r5, #8]
 8012aac:	6928      	ldr	r0, [r5, #16]
 8012aae:	4423      	add	r3, r4
 8012ab0:	4420      	add	r0, r4
 8012ab2:	60ab      	str	r3, [r5, #8]
 8012ab4:	6128      	str	r0, [r5, #16]
 8012ab6:	4631      	mov	r1, r6
 8012ab8:	2201      	movs	r2, #1
 8012aba:	4628      	mov	r0, r5
 8012abc:	f7f6 fc88 	bl	80093d0 <ucdr_check_final_buffer_behavior_array>
 8012ac0:	1bb9      	subs	r1, r7, r6
 8012ac2:	4604      	mov	r4, r0
 8012ac4:	2800      	cmp	r0, #0
 8012ac6:	d1ea      	bne.n	8012a9e <ucdr_serialize_array_uint8_t+0x16>
 8012ac8:	2301      	movs	r3, #1
 8012aca:	7da8      	ldrb	r0, [r5, #22]
 8012acc:	756b      	strb	r3, [r5, #21]
 8012ace:	4058      	eors	r0, r3
 8012ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ad4:	463a      	mov	r2, r7
 8012ad6:	4641      	mov	r1, r8
 8012ad8:	68a8      	ldr	r0, [r5, #8]
 8012ada:	f001 ff8a 	bl	80149f2 <memcpy>
 8012ade:	68aa      	ldr	r2, [r5, #8]
 8012ae0:	692b      	ldr	r3, [r5, #16]
 8012ae2:	443a      	add	r2, r7
 8012ae4:	443b      	add	r3, r7
 8012ae6:	60aa      	str	r2, [r5, #8]
 8012ae8:	612b      	str	r3, [r5, #16]
 8012aea:	e7ed      	b.n	8012ac8 <ucdr_serialize_array_uint8_t+0x40>

08012aec <ucdr_serialize_endian_array_uint8_t>:
 8012aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012af0:	4619      	mov	r1, r3
 8012af2:	461f      	mov	r7, r3
 8012af4:	4605      	mov	r5, r0
 8012af6:	4690      	mov	r8, r2
 8012af8:	f7f6 fbe0 	bl	80092bc <ucdr_check_buffer_available_for>
 8012afc:	b9e0      	cbnz	r0, 8012b38 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8012afe:	463e      	mov	r6, r7
 8012b00:	e00b      	b.n	8012b1a <ucdr_serialize_endian_array_uint8_t+0x2e>
 8012b02:	4441      	add	r1, r8
 8012b04:	68a8      	ldr	r0, [r5, #8]
 8012b06:	4622      	mov	r2, r4
 8012b08:	1b36      	subs	r6, r6, r4
 8012b0a:	f001 ff72 	bl	80149f2 <memcpy>
 8012b0e:	68ab      	ldr	r3, [r5, #8]
 8012b10:	6928      	ldr	r0, [r5, #16]
 8012b12:	4423      	add	r3, r4
 8012b14:	4420      	add	r0, r4
 8012b16:	60ab      	str	r3, [r5, #8]
 8012b18:	6128      	str	r0, [r5, #16]
 8012b1a:	4631      	mov	r1, r6
 8012b1c:	2201      	movs	r2, #1
 8012b1e:	4628      	mov	r0, r5
 8012b20:	f7f6 fc56 	bl	80093d0 <ucdr_check_final_buffer_behavior_array>
 8012b24:	1bb9      	subs	r1, r7, r6
 8012b26:	4604      	mov	r4, r0
 8012b28:	2800      	cmp	r0, #0
 8012b2a:	d1ea      	bne.n	8012b02 <ucdr_serialize_endian_array_uint8_t+0x16>
 8012b2c:	2301      	movs	r3, #1
 8012b2e:	7da8      	ldrb	r0, [r5, #22]
 8012b30:	756b      	strb	r3, [r5, #21]
 8012b32:	4058      	eors	r0, r3
 8012b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b38:	463a      	mov	r2, r7
 8012b3a:	4641      	mov	r1, r8
 8012b3c:	68a8      	ldr	r0, [r5, #8]
 8012b3e:	f001 ff58 	bl	80149f2 <memcpy>
 8012b42:	68aa      	ldr	r2, [r5, #8]
 8012b44:	692b      	ldr	r3, [r5, #16]
 8012b46:	443a      	add	r2, r7
 8012b48:	443b      	add	r3, r7
 8012b4a:	60aa      	str	r2, [r5, #8]
 8012b4c:	612b      	str	r3, [r5, #16]
 8012b4e:	e7ed      	b.n	8012b2c <ucdr_serialize_endian_array_uint8_t+0x40>

08012b50 <ucdr_deserialize_array_uint8_t>:
 8012b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b54:	4688      	mov	r8, r1
 8012b56:	4611      	mov	r1, r2
 8012b58:	4617      	mov	r7, r2
 8012b5a:	4605      	mov	r5, r0
 8012b5c:	f7f6 fbae 	bl	80092bc <ucdr_check_buffer_available_for>
 8012b60:	b9e8      	cbnz	r0, 8012b9e <ucdr_deserialize_array_uint8_t+0x4e>
 8012b62:	463e      	mov	r6, r7
 8012b64:	e00c      	b.n	8012b80 <ucdr_deserialize_array_uint8_t+0x30>
 8012b66:	eb08 0003 	add.w	r0, r8, r3
 8012b6a:	68a9      	ldr	r1, [r5, #8]
 8012b6c:	4622      	mov	r2, r4
 8012b6e:	1b36      	subs	r6, r6, r4
 8012b70:	f001 ff3f 	bl	80149f2 <memcpy>
 8012b74:	68ab      	ldr	r3, [r5, #8]
 8012b76:	6928      	ldr	r0, [r5, #16]
 8012b78:	4423      	add	r3, r4
 8012b7a:	4420      	add	r0, r4
 8012b7c:	60ab      	str	r3, [r5, #8]
 8012b7e:	6128      	str	r0, [r5, #16]
 8012b80:	4631      	mov	r1, r6
 8012b82:	2201      	movs	r2, #1
 8012b84:	4628      	mov	r0, r5
 8012b86:	f7f6 fc23 	bl	80093d0 <ucdr_check_final_buffer_behavior_array>
 8012b8a:	1bbb      	subs	r3, r7, r6
 8012b8c:	4604      	mov	r4, r0
 8012b8e:	2800      	cmp	r0, #0
 8012b90:	d1e9      	bne.n	8012b66 <ucdr_deserialize_array_uint8_t+0x16>
 8012b92:	2301      	movs	r3, #1
 8012b94:	7da8      	ldrb	r0, [r5, #22]
 8012b96:	756b      	strb	r3, [r5, #21]
 8012b98:	4058      	eors	r0, r3
 8012b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b9e:	463a      	mov	r2, r7
 8012ba0:	68a9      	ldr	r1, [r5, #8]
 8012ba2:	4640      	mov	r0, r8
 8012ba4:	f001 ff25 	bl	80149f2 <memcpy>
 8012ba8:	68aa      	ldr	r2, [r5, #8]
 8012baa:	692b      	ldr	r3, [r5, #16]
 8012bac:	443a      	add	r2, r7
 8012bae:	443b      	add	r3, r7
 8012bb0:	60aa      	str	r2, [r5, #8]
 8012bb2:	612b      	str	r3, [r5, #16]
 8012bb4:	e7ed      	b.n	8012b92 <ucdr_deserialize_array_uint8_t+0x42>
 8012bb6:	bf00      	nop

08012bb8 <ucdr_deserialize_endian_array_uint8_t>:
 8012bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bbc:	4619      	mov	r1, r3
 8012bbe:	461f      	mov	r7, r3
 8012bc0:	4605      	mov	r5, r0
 8012bc2:	4690      	mov	r8, r2
 8012bc4:	f7f6 fb7a 	bl	80092bc <ucdr_check_buffer_available_for>
 8012bc8:	b9e8      	cbnz	r0, 8012c06 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8012bca:	463e      	mov	r6, r7
 8012bcc:	e00c      	b.n	8012be8 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8012bce:	eb08 0003 	add.w	r0, r8, r3
 8012bd2:	68a9      	ldr	r1, [r5, #8]
 8012bd4:	4622      	mov	r2, r4
 8012bd6:	1b36      	subs	r6, r6, r4
 8012bd8:	f001 ff0b 	bl	80149f2 <memcpy>
 8012bdc:	68ab      	ldr	r3, [r5, #8]
 8012bde:	6928      	ldr	r0, [r5, #16]
 8012be0:	4423      	add	r3, r4
 8012be2:	4420      	add	r0, r4
 8012be4:	60ab      	str	r3, [r5, #8]
 8012be6:	6128      	str	r0, [r5, #16]
 8012be8:	4631      	mov	r1, r6
 8012bea:	2201      	movs	r2, #1
 8012bec:	4628      	mov	r0, r5
 8012bee:	f7f6 fbef 	bl	80093d0 <ucdr_check_final_buffer_behavior_array>
 8012bf2:	1bbb      	subs	r3, r7, r6
 8012bf4:	4604      	mov	r4, r0
 8012bf6:	2800      	cmp	r0, #0
 8012bf8:	d1e9      	bne.n	8012bce <ucdr_deserialize_endian_array_uint8_t+0x16>
 8012bfa:	2301      	movs	r3, #1
 8012bfc:	7da8      	ldrb	r0, [r5, #22]
 8012bfe:	756b      	strb	r3, [r5, #21]
 8012c00:	4058      	eors	r0, r3
 8012c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c06:	463a      	mov	r2, r7
 8012c08:	68a9      	ldr	r1, [r5, #8]
 8012c0a:	4640      	mov	r0, r8
 8012c0c:	f001 fef1 	bl	80149f2 <memcpy>
 8012c10:	68aa      	ldr	r2, [r5, #8]
 8012c12:	692b      	ldr	r3, [r5, #16]
 8012c14:	443a      	add	r2, r7
 8012c16:	443b      	add	r3, r7
 8012c18:	60aa      	str	r2, [r5, #8]
 8012c1a:	612b      	str	r3, [r5, #16]
 8012c1c:	e7ed      	b.n	8012bfa <ucdr_deserialize_endian_array_uint8_t+0x42>
 8012c1e:	bf00      	nop

08012c20 <ucdr_serialize_sequence_char>:
 8012c20:	b570      	push	{r4, r5, r6, lr}
 8012c22:	4615      	mov	r5, r2
 8012c24:	460e      	mov	r6, r1
 8012c26:	7d01      	ldrb	r1, [r0, #20]
 8012c28:	4604      	mov	r4, r0
 8012c2a:	f7f5 fd07 	bl	800863c <ucdr_serialize_endian_uint32_t>
 8012c2e:	b90d      	cbnz	r5, 8012c34 <ucdr_serialize_sequence_char+0x14>
 8012c30:	2001      	movs	r0, #1
 8012c32:	bd70      	pop	{r4, r5, r6, pc}
 8012c34:	462b      	mov	r3, r5
 8012c36:	4632      	mov	r2, r6
 8012c38:	7d21      	ldrb	r1, [r4, #20]
 8012c3a:	4620      	mov	r0, r4
 8012c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c40:	f7ff bebc 	b.w	80129bc <ucdr_serialize_endian_array_char>

08012c44 <ucdr_deserialize_sequence_char>:
 8012c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c48:	461d      	mov	r5, r3
 8012c4a:	4616      	mov	r6, r2
 8012c4c:	460f      	mov	r7, r1
 8012c4e:	461a      	mov	r2, r3
 8012c50:	7d01      	ldrb	r1, [r0, #20]
 8012c52:	4604      	mov	r4, r0
 8012c54:	f7f5 fe1a 	bl	800888c <ucdr_deserialize_endian_uint32_t>
 8012c58:	682b      	ldr	r3, [r5, #0]
 8012c5a:	429e      	cmp	r6, r3
 8012c5c:	d201      	bcs.n	8012c62 <ucdr_deserialize_sequence_char+0x1e>
 8012c5e:	2201      	movs	r2, #1
 8012c60:	75a2      	strb	r2, [r4, #22]
 8012c62:	b913      	cbnz	r3, 8012c6a <ucdr_deserialize_sequence_char+0x26>
 8012c64:	2001      	movs	r0, #1
 8012c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c6a:	463a      	mov	r2, r7
 8012c6c:	7d21      	ldrb	r1, [r4, #20]
 8012c6e:	4620      	mov	r0, r4
 8012c70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c74:	f7ff bed4 	b.w	8012a20 <ucdr_deserialize_endian_array_char>

08012c78 <ucdr_serialize_sequence_uint8_t>:
 8012c78:	b570      	push	{r4, r5, r6, lr}
 8012c7a:	4615      	mov	r5, r2
 8012c7c:	460e      	mov	r6, r1
 8012c7e:	7d01      	ldrb	r1, [r0, #20]
 8012c80:	4604      	mov	r4, r0
 8012c82:	f7f5 fcdb 	bl	800863c <ucdr_serialize_endian_uint32_t>
 8012c86:	b90d      	cbnz	r5, 8012c8c <ucdr_serialize_sequence_uint8_t+0x14>
 8012c88:	2001      	movs	r0, #1
 8012c8a:	bd70      	pop	{r4, r5, r6, pc}
 8012c8c:	462b      	mov	r3, r5
 8012c8e:	4632      	mov	r2, r6
 8012c90:	7d21      	ldrb	r1, [r4, #20]
 8012c92:	4620      	mov	r0, r4
 8012c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c98:	f7ff bf28 	b.w	8012aec <ucdr_serialize_endian_array_uint8_t>

08012c9c <ucdr_deserialize_sequence_uint8_t>:
 8012c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ca0:	461d      	mov	r5, r3
 8012ca2:	4616      	mov	r6, r2
 8012ca4:	460f      	mov	r7, r1
 8012ca6:	461a      	mov	r2, r3
 8012ca8:	7d01      	ldrb	r1, [r0, #20]
 8012caa:	4604      	mov	r4, r0
 8012cac:	f7f5 fdee 	bl	800888c <ucdr_deserialize_endian_uint32_t>
 8012cb0:	682b      	ldr	r3, [r5, #0]
 8012cb2:	429e      	cmp	r6, r3
 8012cb4:	d201      	bcs.n	8012cba <ucdr_deserialize_sequence_uint8_t+0x1e>
 8012cb6:	2201      	movs	r2, #1
 8012cb8:	75a2      	strb	r2, [r4, #22]
 8012cba:	b913      	cbnz	r3, 8012cc2 <ucdr_deserialize_sequence_uint8_t+0x26>
 8012cbc:	2001      	movs	r0, #1
 8012cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cc2:	463a      	mov	r2, r7
 8012cc4:	7d21      	ldrb	r1, [r4, #20]
 8012cc6:	4620      	mov	r0, r4
 8012cc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ccc:	f7ff bf74 	b.w	8012bb8 <ucdr_deserialize_endian_array_uint8_t>

08012cd0 <ucdr_serialize_string>:
 8012cd0:	b510      	push	{r4, lr}
 8012cd2:	b082      	sub	sp, #8
 8012cd4:	4604      	mov	r4, r0
 8012cd6:	4608      	mov	r0, r1
 8012cd8:	9101      	str	r1, [sp, #4]
 8012cda:	f7ed fabb 	bl	8000254 <strlen>
 8012cde:	4602      	mov	r2, r0
 8012ce0:	9901      	ldr	r1, [sp, #4]
 8012ce2:	4620      	mov	r0, r4
 8012ce4:	3201      	adds	r2, #1
 8012ce6:	b002      	add	sp, #8
 8012ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cec:	f7ff bf98 	b.w	8012c20 <ucdr_serialize_sequence_char>

08012cf0 <ucdr_deserialize_string>:
 8012cf0:	b500      	push	{lr}
 8012cf2:	b083      	sub	sp, #12
 8012cf4:	ab01      	add	r3, sp, #4
 8012cf6:	f7ff ffa5 	bl	8012c44 <ucdr_deserialize_sequence_char>
 8012cfa:	b003      	add	sp, #12
 8012cfc:	f85d fb04 	ldr.w	pc, [sp], #4

08012d00 <uxr_init_input_best_effort_stream>:
 8012d00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d04:	8003      	strh	r3, [r0, #0]
 8012d06:	4770      	bx	lr

08012d08 <uxr_reset_input_best_effort_stream>:
 8012d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d0c:	8003      	strh	r3, [r0, #0]
 8012d0e:	4770      	bx	lr

08012d10 <uxr_receive_best_effort_message>:
 8012d10:	b538      	push	{r3, r4, r5, lr}
 8012d12:	4604      	mov	r4, r0
 8012d14:	8800      	ldrh	r0, [r0, #0]
 8012d16:	460d      	mov	r5, r1
 8012d18:	f000 fd24 	bl	8013764 <uxr_seq_num_cmp>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	0fc0      	lsrs	r0, r0, #31
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	bfb8      	it	lt
 8012d24:	8025      	strhlt	r5, [r4, #0]
 8012d26:	bd38      	pop	{r3, r4, r5, pc}

08012d28 <on_full_input_buffer>:
 8012d28:	b570      	push	{r4, r5, r6, lr}
 8012d2a:	460c      	mov	r4, r1
 8012d2c:	4605      	mov	r5, r0
 8012d2e:	8908      	ldrh	r0, [r1, #8]
 8012d30:	682b      	ldr	r3, [r5, #0]
 8012d32:	7d26      	ldrb	r6, [r4, #20]
 8012d34:	e9d1 1200 	ldrd	r1, r2, [r1]
 8012d38:	fbb2 f2f0 	udiv	r2, r2, r0
 8012d3c:	eba3 0c01 	sub.w	ip, r3, r1
 8012d40:	fbbc fcf2 	udiv	ip, ip, r2
 8012d44:	f10c 0c01 	add.w	ip, ip, #1
 8012d48:	fa1f f38c 	uxth.w	r3, ip
 8012d4c:	fbb3 fcf0 	udiv	ip, r3, r0
 8012d50:	fb00 331c 	mls	r3, r0, ip, r3
 8012d54:	b29b      	uxth	r3, r3
 8012d56:	fb02 f303 	mul.w	r3, r2, r3
 8012d5a:	1d18      	adds	r0, r3, #4
 8012d5c:	4408      	add	r0, r1
 8012d5e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8012d62:	b116      	cbz	r6, 8012d6a <on_full_input_buffer+0x42>
 8012d64:	2600      	movs	r6, #0
 8012d66:	f840 6c04 	str.w	r6, [r0, #-4]
 8012d6a:	2a03      	cmp	r2, #3
 8012d6c:	d801      	bhi.n	8012d72 <on_full_input_buffer+0x4a>
 8012d6e:	2001      	movs	r0, #1
 8012d70:	bd70      	pop	{r4, r5, r6, pc}
 8012d72:	3308      	adds	r3, #8
 8012d74:	4628      	mov	r0, r5
 8012d76:	3a04      	subs	r2, #4
 8012d78:	4419      	add	r1, r3
 8012d7a:	692b      	ldr	r3, [r5, #16]
 8012d7c:	f7f6 faea 	bl	8009354 <ucdr_init_buffer_origin>
 8012d80:	4628      	mov	r0, r5
 8012d82:	4622      	mov	r2, r4
 8012d84:	4902      	ldr	r1, [pc, #8]	; (8012d90 <on_full_input_buffer+0x68>)
 8012d86:	f7f6 fac1 	bl	800930c <ucdr_set_on_full_buffer_callback>
 8012d8a:	2000      	movs	r0, #0
 8012d8c:	bd70      	pop	{r4, r5, r6, pc}
 8012d8e:	bf00      	nop
 8012d90:	08012d29 	.word	0x08012d29

08012d94 <uxr_init_input_reliable_stream>:
 8012d94:	b510      	push	{r4, lr}
 8012d96:	e9c0 1200 	strd	r1, r2, [r0]
 8012d9a:	2400      	movs	r4, #0
 8012d9c:	9a02      	ldr	r2, [sp, #8]
 8012d9e:	8103      	strh	r3, [r0, #8]
 8012da0:	6102      	str	r2, [r0, #16]
 8012da2:	7504      	strb	r4, [r0, #20]
 8012da4:	b1c3      	cbz	r3, 8012dd8 <uxr_init_input_reliable_stream+0x44>
 8012da6:	600c      	str	r4, [r1, #0]
 8012da8:	8901      	ldrh	r1, [r0, #8]
 8012daa:	2901      	cmp	r1, #1
 8012dac:	d914      	bls.n	8012dd8 <uxr_init_input_reliable_stream+0x44>
 8012dae:	f04f 0c01 	mov.w	ip, #1
 8012db2:	6843      	ldr	r3, [r0, #4]
 8012db4:	f10c 0e01 	add.w	lr, ip, #1
 8012db8:	fbbc f2f1 	udiv	r2, ip, r1
 8012dbc:	fbb3 f3f1 	udiv	r3, r3, r1
 8012dc0:	fb01 c212 	mls	r2, r1, r2, ip
 8012dc4:	fa1f fc8e 	uxth.w	ip, lr
 8012dc8:	b292      	uxth	r2, r2
 8012dca:	fb02 f303 	mul.w	r3, r2, r3
 8012dce:	6802      	ldr	r2, [r0, #0]
 8012dd0:	50d4      	str	r4, [r2, r3]
 8012dd2:	8901      	ldrh	r1, [r0, #8]
 8012dd4:	4561      	cmp	r1, ip
 8012dd6:	d8ec      	bhi.n	8012db2 <uxr_init_input_reliable_stream+0x1e>
 8012dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ddc:	60c3      	str	r3, [r0, #12]
 8012dde:	bd10      	pop	{r4, pc}

08012de0 <uxr_reset_input_reliable_stream>:
 8012de0:	8901      	ldrh	r1, [r0, #8]
 8012de2:	b1d9      	cbz	r1, 8012e1c <uxr_reset_input_reliable_stream+0x3c>
 8012de4:	b510      	push	{r4, lr}
 8012de6:	f04f 0e00 	mov.w	lr, #0
 8012dea:	46f4      	mov	ip, lr
 8012dec:	4674      	mov	r4, lr
 8012dee:	6843      	ldr	r3, [r0, #4]
 8012df0:	f10e 0e01 	add.w	lr, lr, #1
 8012df4:	fbbc f2f1 	udiv	r2, ip, r1
 8012df8:	fbb3 f3f1 	udiv	r3, r3, r1
 8012dfc:	fb01 c212 	mls	r2, r1, r2, ip
 8012e00:	fa1f fc8e 	uxth.w	ip, lr
 8012e04:	b292      	uxth	r2, r2
 8012e06:	fb02 f303 	mul.w	r3, r2, r3
 8012e0a:	6802      	ldr	r2, [r0, #0]
 8012e0c:	50d4      	str	r4, [r2, r3]
 8012e0e:	8901      	ldrh	r1, [r0, #8]
 8012e10:	4561      	cmp	r1, ip
 8012e12:	d8ec      	bhi.n	8012dee <uxr_reset_input_reliable_stream+0xe>
 8012e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e18:	60c3      	str	r3, [r0, #12]
 8012e1a:	bd10      	pop	{r4, pc}
 8012e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e20:	60c3      	str	r3, [r0, #12]
 8012e22:	4770      	bx	lr

08012e24 <uxr_receive_reliable_message>:
 8012e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e28:	4604      	mov	r4, r0
 8012e2a:	460d      	mov	r5, r1
 8012e2c:	8901      	ldrh	r1, [r0, #8]
 8012e2e:	4617      	mov	r7, r2
 8012e30:	8980      	ldrh	r0, [r0, #12]
 8012e32:	4698      	mov	r8, r3
 8012e34:	f000 fc8e 	bl	8013754 <uxr_seq_num_add>
 8012e38:	4629      	mov	r1, r5
 8012e3a:	4606      	mov	r6, r0
 8012e3c:	89a0      	ldrh	r0, [r4, #12]
 8012e3e:	f000 fc91 	bl	8013764 <uxr_seq_num_cmp>
 8012e42:	2800      	cmp	r0, #0
 8012e44:	db0a      	blt.n	8012e5c <uxr_receive_reliable_message+0x38>
 8012e46:	2600      	movs	r6, #0
 8012e48:	4629      	mov	r1, r5
 8012e4a:	89e0      	ldrh	r0, [r4, #14]
 8012e4c:	f000 fc8a 	bl	8013764 <uxr_seq_num_cmp>
 8012e50:	2800      	cmp	r0, #0
 8012e52:	da00      	bge.n	8012e56 <uxr_receive_reliable_message+0x32>
 8012e54:	81e5      	strh	r5, [r4, #14]
 8012e56:	4630      	mov	r0, r6
 8012e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e5c:	4630      	mov	r0, r6
 8012e5e:	4629      	mov	r1, r5
 8012e60:	f000 fc80 	bl	8013764 <uxr_seq_num_cmp>
 8012e64:	2800      	cmp	r0, #0
 8012e66:	dbee      	blt.n	8012e46 <uxr_receive_reliable_message+0x22>
 8012e68:	6923      	ldr	r3, [r4, #16]
 8012e6a:	4638      	mov	r0, r7
 8012e6c:	4798      	blx	r3
 8012e6e:	4681      	mov	r9, r0
 8012e70:	2101      	movs	r1, #1
 8012e72:	89a0      	ldrh	r0, [r4, #12]
 8012e74:	f000 fc6e 	bl	8013754 <uxr_seq_num_add>
 8012e78:	f1b9 0f00 	cmp.w	r9, #0
 8012e7c:	bf08      	it	eq
 8012e7e:	4285      	cmpeq	r5, r0
 8012e80:	bf0c      	ite	eq
 8012e82:	2601      	moveq	r6, #1
 8012e84:	2600      	movne	r6, #0
 8012e86:	d104      	bne.n	8012e92 <uxr_receive_reliable_message+0x6e>
 8012e88:	2300      	movs	r3, #0
 8012e8a:	9a08      	ldr	r2, [sp, #32]
 8012e8c:	81a0      	strh	r0, [r4, #12]
 8012e8e:	7013      	strb	r3, [r2, #0]
 8012e90:	e7da      	b.n	8012e48 <uxr_receive_reliable_message+0x24>
 8012e92:	8922      	ldrh	r2, [r4, #8]
 8012e94:	6863      	ldr	r3, [r4, #4]
 8012e96:	fbb5 f0f2 	udiv	r0, r5, r2
 8012e9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8012e9e:	fb02 5010 	mls	r0, r2, r0, r5
 8012ea2:	b280      	uxth	r0, r0
 8012ea4:	fb03 f000 	mul.w	r0, r3, r0
 8012ea8:	6823      	ldr	r3, [r4, #0]
 8012eaa:	3004      	adds	r0, #4
 8012eac:	4418      	add	r0, r3
 8012eae:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d1c7      	bne.n	8012e46 <uxr_receive_reliable_message+0x22>
 8012eb6:	4639      	mov	r1, r7
 8012eb8:	4642      	mov	r2, r8
 8012eba:	f001 fd9a 	bl	80149f2 <memcpy>
 8012ebe:	8921      	ldrh	r1, [r4, #8]
 8012ec0:	6863      	ldr	r3, [r4, #4]
 8012ec2:	fbb5 f2f1 	udiv	r2, r5, r1
 8012ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8012eca:	fb01 5212 	mls	r2, r1, r2, r5
 8012ece:	b292      	uxth	r2, r2
 8012ed0:	fb02 f303 	mul.w	r3, r2, r3
 8012ed4:	6822      	ldr	r2, [r4, #0]
 8012ed6:	f842 8003 	str.w	r8, [r2, r3]
 8012eda:	2301      	movs	r3, #1
 8012edc:	9a08      	ldr	r2, [sp, #32]
 8012ede:	7013      	strb	r3, [r2, #0]
 8012ee0:	f1b9 0f00 	cmp.w	r9, #0
 8012ee4:	d0af      	beq.n	8012e46 <uxr_receive_reliable_message+0x22>
 8012ee6:	89a6      	ldrh	r6, [r4, #12]
 8012ee8:	2101      	movs	r1, #1
 8012eea:	4630      	mov	r0, r6
 8012eec:	f000 fc32 	bl	8013754 <uxr_seq_num_add>
 8012ef0:	8921      	ldrh	r1, [r4, #8]
 8012ef2:	6863      	ldr	r3, [r4, #4]
 8012ef4:	4606      	mov	r6, r0
 8012ef6:	fbb0 f2f1 	udiv	r2, r0, r1
 8012efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8012efe:	fb01 0212 	mls	r2, r1, r2, r0
 8012f02:	6820      	ldr	r0, [r4, #0]
 8012f04:	b292      	uxth	r2, r2
 8012f06:	fb02 f303 	mul.w	r3, r2, r3
 8012f0a:	3304      	adds	r3, #4
 8012f0c:	4418      	add	r0, r3
 8012f0e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d097      	beq.n	8012e46 <uxr_receive_reliable_message+0x22>
 8012f16:	6923      	ldr	r3, [r4, #16]
 8012f18:	4798      	blx	r3
 8012f1a:	2802      	cmp	r0, #2
 8012f1c:	d002      	beq.n	8012f24 <uxr_receive_reliable_message+0x100>
 8012f1e:	2801      	cmp	r0, #1
 8012f20:	d0e2      	beq.n	8012ee8 <uxr_receive_reliable_message+0xc4>
 8012f22:	e790      	b.n	8012e46 <uxr_receive_reliable_message+0x22>
 8012f24:	2601      	movs	r6, #1
 8012f26:	e78f      	b.n	8012e48 <uxr_receive_reliable_message+0x24>

08012f28 <uxr_next_input_reliable_buffer_available>:
 8012f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f2c:	4604      	mov	r4, r0
 8012f2e:	460f      	mov	r7, r1
 8012f30:	8980      	ldrh	r0, [r0, #12]
 8012f32:	2101      	movs	r1, #1
 8012f34:	4690      	mov	r8, r2
 8012f36:	f000 fc0d 	bl	8013754 <uxr_seq_num_add>
 8012f3a:	8922      	ldrh	r2, [r4, #8]
 8012f3c:	6866      	ldr	r6, [r4, #4]
 8012f3e:	fbb0 f3f2 	udiv	r3, r0, r2
 8012f42:	fbb6 f6f2 	udiv	r6, r6, r2
 8012f46:	fb02 0313 	mls	r3, r2, r3, r0
 8012f4a:	b29b      	uxth	r3, r3
 8012f4c:	fb03 f606 	mul.w	r6, r3, r6
 8012f50:	6823      	ldr	r3, [r4, #0]
 8012f52:	3604      	adds	r6, #4
 8012f54:	441e      	add	r6, r3
 8012f56:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8012f5a:	f1b9 0f00 	cmp.w	r9, #0
 8012f5e:	d023      	beq.n	8012fa8 <uxr_next_input_reliable_buffer_available+0x80>
 8012f60:	4605      	mov	r5, r0
 8012f62:	6923      	ldr	r3, [r4, #16]
 8012f64:	4630      	mov	r0, r6
 8012f66:	4798      	blx	r3
 8012f68:	4682      	mov	sl, r0
 8012f6a:	b300      	cbz	r0, 8012fae <uxr_next_input_reliable_buffer_available+0x86>
 8012f6c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8012f70:	2101      	movs	r1, #1
 8012f72:	4650      	mov	r0, sl
 8012f74:	f000 fbee 	bl	8013754 <uxr_seq_num_add>
 8012f78:	8921      	ldrh	r1, [r4, #8]
 8012f7a:	4682      	mov	sl, r0
 8012f7c:	6863      	ldr	r3, [r4, #4]
 8012f7e:	6820      	ldr	r0, [r4, #0]
 8012f80:	fbba f2f1 	udiv	r2, sl, r1
 8012f84:	fbb3 f3f1 	udiv	r3, r3, r1
 8012f88:	fb01 a212 	mls	r2, r1, r2, sl
 8012f8c:	b292      	uxth	r2, r2
 8012f8e:	fb02 f303 	mul.w	r3, r2, r3
 8012f92:	3304      	adds	r3, #4
 8012f94:	4418      	add	r0, r3
 8012f96:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012f9a:	b12b      	cbz	r3, 8012fa8 <uxr_next_input_reliable_buffer_available+0x80>
 8012f9c:	6923      	ldr	r3, [r4, #16]
 8012f9e:	4798      	blx	r3
 8012fa0:	2802      	cmp	r0, #2
 8012fa2:	d01b      	beq.n	8012fdc <uxr_next_input_reliable_buffer_available+0xb4>
 8012fa4:	2801      	cmp	r0, #1
 8012fa6:	d0e3      	beq.n	8012f70 <uxr_next_input_reliable_buffer_available+0x48>
 8012fa8:	2000      	movs	r0, #0
 8012faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fae:	464a      	mov	r2, r9
 8012fb0:	4631      	mov	r1, r6
 8012fb2:	4638      	mov	r0, r7
 8012fb4:	f7f6 f9d6 	bl	8009364 <ucdr_init_buffer>
 8012fb8:	8921      	ldrh	r1, [r4, #8]
 8012fba:	6863      	ldr	r3, [r4, #4]
 8012fbc:	2001      	movs	r0, #1
 8012fbe:	fbb5 f2f1 	udiv	r2, r5, r1
 8012fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8012fc6:	fb01 5212 	mls	r2, r1, r2, r5
 8012fca:	b292      	uxth	r2, r2
 8012fcc:	fb02 f303 	mul.w	r3, r2, r3
 8012fd0:	6822      	ldr	r2, [r4, #0]
 8012fd2:	f842 a003 	str.w	sl, [r2, r3]
 8012fd6:	81a5      	strh	r5, [r4, #12]
 8012fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fdc:	8920      	ldrh	r0, [r4, #8]
 8012fde:	eb06 0108 	add.w	r1, r6, r8
 8012fe2:	6863      	ldr	r3, [r4, #4]
 8012fe4:	eba9 0208 	sub.w	r2, r9, r8
 8012fe8:	fbb5 f6f0 	udiv	r6, r5, r0
 8012fec:	fbb3 f3f0 	udiv	r3, r3, r0
 8012ff0:	fb00 5516 	mls	r5, r0, r6, r5
 8012ff4:	2000      	movs	r0, #0
 8012ff6:	b2ad      	uxth	r5, r5
 8012ff8:	fb03 f505 	mul.w	r5, r3, r5
 8012ffc:	6823      	ldr	r3, [r4, #0]
 8012ffe:	5158      	str	r0, [r3, r5]
 8013000:	4638      	mov	r0, r7
 8013002:	f7f6 f9af 	bl	8009364 <ucdr_init_buffer>
 8013006:	4638      	mov	r0, r7
 8013008:	4622      	mov	r2, r4
 801300a:	4903      	ldr	r1, [pc, #12]	; (8013018 <uxr_next_input_reliable_buffer_available+0xf0>)
 801300c:	f7f6 f97e 	bl	800930c <ucdr_set_on_full_buffer_callback>
 8013010:	2001      	movs	r0, #1
 8013012:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8013016:	e7c8      	b.n	8012faa <uxr_next_input_reliable_buffer_available+0x82>
 8013018:	08012d29 	.word	0x08012d29

0801301c <uxr_process_heartbeat>:
 801301c:	b538      	push	{r3, r4, r5, lr}
 801301e:	4611      	mov	r1, r2
 8013020:	4604      	mov	r4, r0
 8013022:	89c0      	ldrh	r0, [r0, #14]
 8013024:	4615      	mov	r5, r2
 8013026:	f000 fb9d 	bl	8013764 <uxr_seq_num_cmp>
 801302a:	2800      	cmp	r0, #0
 801302c:	bfb8      	it	lt
 801302e:	81e5      	strhlt	r5, [r4, #14]
 8013030:	bd38      	pop	{r3, r4, r5, pc}
 8013032:	bf00      	nop

08013034 <uxr_compute_acknack>:
 8013034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013038:	8903      	ldrh	r3, [r0, #8]
 801303a:	4604      	mov	r4, r0
 801303c:	460f      	mov	r7, r1
 801303e:	8985      	ldrh	r5, [r0, #12]
 8013040:	b1db      	cbz	r3, 801307a <uxr_compute_acknack+0x46>
 8013042:	4628      	mov	r0, r5
 8013044:	2601      	movs	r6, #1
 8013046:	e004      	b.n	8013052 <uxr_compute_acknack+0x1e>
 8013048:	4566      	cmp	r6, ip
 801304a:	f106 0601 	add.w	r6, r6, #1
 801304e:	d214      	bcs.n	801307a <uxr_compute_acknack+0x46>
 8013050:	89a0      	ldrh	r0, [r4, #12]
 8013052:	b2b1      	uxth	r1, r6
 8013054:	f000 fb7e 	bl	8013754 <uxr_seq_num_add>
 8013058:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801305c:	fbb0 f2fc 	udiv	r2, r0, ip
 8013060:	e9d4 1300 	ldrd	r1, r3, [r4]
 8013064:	fb0c 0212 	mls	r2, ip, r2, r0
 8013068:	fbb3 f3fc 	udiv	r3, r3, ip
 801306c:	b292      	uxth	r2, r2
 801306e:	fb02 f303 	mul.w	r3, r2, r3
 8013072:	58cb      	ldr	r3, [r1, r3]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d1e7      	bne.n	8013048 <uxr_compute_acknack+0x14>
 8013078:	4605      	mov	r5, r0
 801307a:	803d      	strh	r5, [r7, #0]
 801307c:	2101      	movs	r1, #1
 801307e:	89e6      	ldrh	r6, [r4, #14]
 8013080:	4628      	mov	r0, r5
 8013082:	f000 fb6b 	bl	801375c <uxr_seq_num_sub>
 8013086:	4601      	mov	r1, r0
 8013088:	4630      	mov	r0, r6
 801308a:	f000 fb67 	bl	801375c <uxr_seq_num_sub>
 801308e:	4606      	mov	r6, r0
 8013090:	b328      	cbz	r0, 80130de <uxr_compute_acknack+0xaa>
 8013092:	f04f 0900 	mov.w	r9, #0
 8013096:	f04f 0801 	mov.w	r8, #1
 801309a:	464d      	mov	r5, r9
 801309c:	fa1f f189 	uxth.w	r1, r9
 80130a0:	8838      	ldrh	r0, [r7, #0]
 80130a2:	f000 fb57 	bl	8013754 <uxr_seq_num_add>
 80130a6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80130aa:	6861      	ldr	r1, [r4, #4]
 80130ac:	fa08 fe09 	lsl.w	lr, r8, r9
 80130b0:	6822      	ldr	r2, [r4, #0]
 80130b2:	f109 0901 	add.w	r9, r9, #1
 80130b6:	ea4e 0e05 	orr.w	lr, lr, r5
 80130ba:	fbb0 f3fc 	udiv	r3, r0, ip
 80130be:	fbb1 f1fc 	udiv	r1, r1, ip
 80130c2:	fb03 001c 	mls	r0, r3, ip, r0
 80130c6:	b283      	uxth	r3, r0
 80130c8:	fb01 f303 	mul.w	r3, r1, r3
 80130cc:	58d3      	ldr	r3, [r2, r3]
 80130ce:	b90b      	cbnz	r3, 80130d4 <uxr_compute_acknack+0xa0>
 80130d0:	fa1f f58e 	uxth.w	r5, lr
 80130d4:	454e      	cmp	r6, r9
 80130d6:	d1e1      	bne.n	801309c <uxr_compute_acknack+0x68>
 80130d8:	4628      	mov	r0, r5
 80130da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130de:	4605      	mov	r5, r0
 80130e0:	4628      	mov	r0, r5
 80130e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130e6:	bf00      	nop

080130e8 <uxr_init_output_best_effort_stream>:
 80130e8:	f64f 7cff 	movw	ip, #65535	; 0xffff
 80130ec:	6001      	str	r1, [r0, #0]
 80130ee:	7303      	strb	r3, [r0, #12]
 80130f0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80130f4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80130f8:	4770      	bx	lr
 80130fa:	bf00      	nop

080130fc <uxr_reset_output_best_effort_stream>:
 80130fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013100:	7b03      	ldrb	r3, [r0, #12]
 8013102:	81c2      	strh	r2, [r0, #14]
 8013104:	6043      	str	r3, [r0, #4]
 8013106:	4770      	bx	lr

08013108 <uxr_prepare_best_effort_buffer_to_write>:
 8013108:	b5f0      	push	{r4, r5, r6, r7, lr}
 801310a:	4604      	mov	r4, r0
 801310c:	b083      	sub	sp, #12
 801310e:	6840      	ldr	r0, [r0, #4]
 8013110:	460d      	mov	r5, r1
 8013112:	4616      	mov	r6, r2
 8013114:	f7fb fc34 	bl	800e980 <uxr_submessage_padding>
 8013118:	6863      	ldr	r3, [r4, #4]
 801311a:	4418      	add	r0, r3
 801311c:	68a3      	ldr	r3, [r4, #8]
 801311e:	1942      	adds	r2, r0, r5
 8013120:	4293      	cmp	r3, r2
 8013122:	bf2c      	ite	cs
 8013124:	2701      	movcs	r7, #1
 8013126:	2700      	movcc	r7, #0
 8013128:	d202      	bcs.n	8013130 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801312a:	4638      	mov	r0, r7
 801312c:	b003      	add	sp, #12
 801312e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013130:	9000      	str	r0, [sp, #0]
 8013132:	2300      	movs	r3, #0
 8013134:	4630      	mov	r0, r6
 8013136:	6821      	ldr	r1, [r4, #0]
 8013138:	f7f6 f902 	bl	8009340 <ucdr_init_buffer_origin_offset>
 801313c:	6861      	ldr	r1, [r4, #4]
 801313e:	4638      	mov	r0, r7
 8013140:	4429      	add	r1, r5
 8013142:	6061      	str	r1, [r4, #4]
 8013144:	b003      	add	sp, #12
 8013146:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013148 <uxr_prepare_best_effort_buffer_to_send>:
 8013148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801314c:	4604      	mov	r4, r0
 801314e:	461d      	mov	r5, r3
 8013150:	6840      	ldr	r0, [r0, #4]
 8013152:	7b23      	ldrb	r3, [r4, #12]
 8013154:	4298      	cmp	r0, r3
 8013156:	bf8c      	ite	hi
 8013158:	2601      	movhi	r6, #1
 801315a:	2600      	movls	r6, #0
 801315c:	d802      	bhi.n	8013164 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801315e:	4630      	mov	r0, r6
 8013160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013164:	4688      	mov	r8, r1
 8013166:	89e0      	ldrh	r0, [r4, #14]
 8013168:	2101      	movs	r1, #1
 801316a:	4617      	mov	r7, r2
 801316c:	f000 faf2 	bl	8013754 <uxr_seq_num_add>
 8013170:	6823      	ldr	r3, [r4, #0]
 8013172:	81e0      	strh	r0, [r4, #14]
 8013174:	8028      	strh	r0, [r5, #0]
 8013176:	4630      	mov	r0, r6
 8013178:	f8c8 3000 	str.w	r3, [r8]
 801317c:	6863      	ldr	r3, [r4, #4]
 801317e:	603b      	str	r3, [r7, #0]
 8013180:	7b23      	ldrb	r3, [r4, #12]
 8013182:	6063      	str	r3, [r4, #4]
 8013184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013188 <on_full_output_buffer>:
 8013188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801318a:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801318e:	460c      	mov	r4, r1
 8013190:	6803      	ldr	r3, [r0, #0]
 8013192:	4605      	mov	r5, r0
 8013194:	7b26      	ldrb	r6, [r4, #12]
 8013196:	e9d1 1200 	ldrd	r1, r2, [r1]
 801319a:	fbb2 f2fc 	udiv	r2, r2, ip
 801319e:	eba3 0e01 	sub.w	lr, r3, r1
 80131a2:	6903      	ldr	r3, [r0, #16]
 80131a4:	fbbe fef2 	udiv	lr, lr, r2
 80131a8:	f10e 0e01 	add.w	lr, lr, #1
 80131ac:	fa1f fe8e 	uxth.w	lr, lr
 80131b0:	fbbe f7fc 	udiv	r7, lr, ip
 80131b4:	fb0c ec17 	mls	ip, ip, r7, lr
 80131b8:	fa1f fc8c 	uxth.w	ip, ip
 80131bc:	fb02 fc0c 	mul.w	ip, r2, ip
 80131c0:	f851 200c 	ldr.w	r2, [r1, ip]
 80131c4:	44b4      	add	ip, r6
 80131c6:	1b92      	subs	r2, r2, r6
 80131c8:	f10c 0c08 	add.w	ip, ip, #8
 80131cc:	3a04      	subs	r2, #4
 80131ce:	4461      	add	r1, ip
 80131d0:	f7f6 f8c0 	bl	8009354 <ucdr_init_buffer_origin>
 80131d4:	4628      	mov	r0, r5
 80131d6:	4622      	mov	r2, r4
 80131d8:	4902      	ldr	r1, [pc, #8]	; (80131e4 <on_full_output_buffer+0x5c>)
 80131da:	f7f6 f897 	bl	800930c <ucdr_set_on_full_buffer_callback>
 80131de:	2000      	movs	r0, #0
 80131e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131e2:	bf00      	nop
 80131e4:	08013189 	.word	0x08013189

080131e8 <uxr_init_output_reliable_stream>:
 80131e8:	b530      	push	{r4, r5, lr}
 80131ea:	f89d 400c 	ldrb.w	r4, [sp, #12]
 80131ee:	8103      	strh	r3, [r0, #8]
 80131f0:	7304      	strb	r4, [r0, #12]
 80131f2:	e9c0 1200 	strd	r1, r2, [r0]
 80131f6:	b1e3      	cbz	r3, 8013232 <uxr_init_output_reliable_stream+0x4a>
 80131f8:	600c      	str	r4, [r1, #0]
 80131fa:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80131fe:	f1bc 0f01 	cmp.w	ip, #1
 8013202:	d916      	bls.n	8013232 <uxr_init_output_reliable_stream+0x4a>
 8013204:	f04f 0e01 	mov.w	lr, #1
 8013208:	6843      	ldr	r3, [r0, #4]
 801320a:	f10e 0501 	add.w	r5, lr, #1
 801320e:	7b04      	ldrb	r4, [r0, #12]
 8013210:	6801      	ldr	r1, [r0, #0]
 8013212:	fbbe f2fc 	udiv	r2, lr, ip
 8013216:	fbb3 f3fc 	udiv	r3, r3, ip
 801321a:	fb0c e212 	mls	r2, ip, r2, lr
 801321e:	fa1f fe85 	uxth.w	lr, r5
 8013222:	b292      	uxth	r2, r2
 8013224:	fb02 f303 	mul.w	r3, r2, r3
 8013228:	50cc      	str	r4, [r1, r3]
 801322a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801322e:	45f4      	cmp	ip, lr
 8013230:	d8ea      	bhi.n	8013208 <uxr_init_output_reliable_stream+0x20>
 8013232:	4b07      	ldr	r3, [pc, #28]	; (8013250 <uxr_init_output_reliable_stream+0x68>)
 8013234:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013238:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801323c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8013240:	f8c0 300e 	str.w	r3, [r0, #14]
 8013244:	2300      	movs	r3, #0
 8013246:	8242      	strh	r2, [r0, #18]
 8013248:	8403      	strh	r3, [r0, #32]
 801324a:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801324e:	bd30      	pop	{r4, r5, pc}
 8013250:	ffff0000 	.word	0xffff0000
 8013254:	00000000 	.word	0x00000000

08013258 <uxr_reset_output_reliable_stream>:
 8013258:	8901      	ldrh	r1, [r0, #8]
 801325a:	b510      	push	{r4, lr}
 801325c:	b1b1      	cbz	r1, 801328c <uxr_reset_output_reliable_stream+0x34>
 801325e:	f04f 0e00 	mov.w	lr, #0
 8013262:	46f4      	mov	ip, lr
 8013264:	6843      	ldr	r3, [r0, #4]
 8013266:	f10e 0e01 	add.w	lr, lr, #1
 801326a:	7b04      	ldrb	r4, [r0, #12]
 801326c:	fbbc f2f1 	udiv	r2, ip, r1
 8013270:	fbb3 f3f1 	udiv	r3, r3, r1
 8013274:	fb01 c212 	mls	r2, r1, r2, ip
 8013278:	fa1f fc8e 	uxth.w	ip, lr
 801327c:	b292      	uxth	r2, r2
 801327e:	fb02 f303 	mul.w	r3, r2, r3
 8013282:	6802      	ldr	r2, [r0, #0]
 8013284:	50d4      	str	r4, [r2, r3]
 8013286:	8901      	ldrh	r1, [r0, #8]
 8013288:	4561      	cmp	r1, ip
 801328a:	d8eb      	bhi.n	8013264 <uxr_reset_output_reliable_stream+0xc>
 801328c:	4b08      	ldr	r3, [pc, #32]	; (80132b0 <uxr_reset_output_reliable_stream+0x58>)
 801328e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013292:	ed9f 7b05 	vldr	d7, [pc, #20]	; 80132a8 <uxr_reset_output_reliable_stream+0x50>
 8013296:	f8c0 300e 	str.w	r3, [r0, #14]
 801329a:	2300      	movs	r3, #0
 801329c:	8242      	strh	r2, [r0, #18]
 801329e:	8403      	strh	r3, [r0, #32]
 80132a0:	ed80 7b06 	vstr	d7, [r0, #24]
 80132a4:	bd10      	pop	{r4, pc}
 80132a6:	bf00      	nop
 80132a8:	ffffffff 	.word	0xffffffff
 80132ac:	7fffffff 	.word	0x7fffffff
 80132b0:	ffff0000 	.word	0xffff0000

080132b4 <uxr_prepare_reliable_buffer_to_write>:
 80132b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132b8:	4604      	mov	r4, r0
 80132ba:	b091      	sub	sp, #68	; 0x44
 80132bc:	8900      	ldrh	r0, [r0, #8]
 80132be:	468b      	mov	fp, r1
 80132c0:	89e6      	ldrh	r6, [r4, #14]
 80132c2:	9204      	str	r2, [sp, #16]
 80132c4:	6865      	ldr	r5, [r4, #4]
 80132c6:	6823      	ldr	r3, [r4, #0]
 80132c8:	f894 900c 	ldrb.w	r9, [r4, #12]
 80132cc:	fbb6 f2f0 	udiv	r2, r6, r0
 80132d0:	fbb5 f5f0 	udiv	r5, r5, r0
 80132d4:	fb00 6212 	mls	r2, r0, r2, r6
 80132d8:	1f2f      	subs	r7, r5, #4
 80132da:	b292      	uxth	r2, r2
 80132dc:	fb05 3202 	mla	r2, r5, r2, r3
 80132e0:	1d11      	adds	r1, r2, #4
 80132e2:	f8d2 8000 	ldr.w	r8, [r2]
 80132e6:	9103      	str	r1, [sp, #12]
 80132e8:	2800      	cmp	r0, #0
 80132ea:	f000 814a 	beq.w	8013582 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 80132ee:	f04f 0c00 	mov.w	ip, #0
 80132f2:	46e2      	mov	sl, ip
 80132f4:	4661      	mov	r1, ip
 80132f6:	f10c 0c01 	add.w	ip, ip, #1
 80132fa:	fbb1 f2f0 	udiv	r2, r1, r0
 80132fe:	fb00 1212 	mls	r2, r0, r2, r1
 8013302:	fa1f f18c 	uxth.w	r1, ip
 8013306:	b292      	uxth	r2, r2
 8013308:	fb05 f202 	mul.w	r2, r5, r2
 801330c:	589a      	ldr	r2, [r3, r2]
 801330e:	454a      	cmp	r2, r9
 8013310:	d103      	bne.n	801331a <uxr_prepare_reliable_buffer_to_write+0x66>
 8013312:	f10a 0a01 	add.w	sl, sl, #1
 8013316:	fa1f fa8a 	uxth.w	sl, sl
 801331a:	4281      	cmp	r1, r0
 801331c:	d3eb      	bcc.n	80132f6 <uxr_prepare_reliable_buffer_to_write+0x42>
 801331e:	4640      	mov	r0, r8
 8013320:	2104      	movs	r1, #4
 8013322:	f8cd a014 	str.w	sl, [sp, #20]
 8013326:	f7f6 f821 	bl	800936c <ucdr_alignment>
 801332a:	4480      	add	r8, r0
 801332c:	eb08 020b 	add.w	r2, r8, fp
 8013330:	42ba      	cmp	r2, r7
 8013332:	f240 80ca 	bls.w	80134ca <uxr_prepare_reliable_buffer_to_write+0x216>
 8013336:	7b22      	ldrb	r2, [r4, #12]
 8013338:	445a      	add	r2, fp
 801333a:	42ba      	cmp	r2, r7
 801333c:	f240 80b2 	bls.w	80134a4 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8013340:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8013344:	b2bb      	uxth	r3, r7
 8013346:	eba2 0209 	sub.w	r2, r2, r9
 801334a:	441a      	add	r2, r3
 801334c:	b292      	uxth	r2, r2
 801334e:	fb0a f902 	mul.w	r9, sl, r2
 8013352:	9205      	str	r2, [sp, #20]
 8013354:	45d9      	cmp	r9, fp
 8013356:	9206      	str	r2, [sp, #24]
 8013358:	f0c0 80b3 	bcc.w	80134c2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801335c:	f108 0204 	add.w	r2, r8, #4
 8013360:	42ba      	cmp	r2, r7
 8013362:	f080 80da 	bcs.w	801351a <uxr_prepare_reliable_buffer_to_write+0x266>
 8013366:	f1a3 0904 	sub.w	r9, r3, #4
 801336a:	9b05      	ldr	r3, [sp, #20]
 801336c:	eba9 0908 	sub.w	r9, r9, r8
 8013370:	fa1f f989 	uxth.w	r9, r9
 8013374:	ebab 0b09 	sub.w	fp, fp, r9
 8013378:	fbbb f2f3 	udiv	r2, fp, r3
 801337c:	fb03 b312 	mls	r3, r3, r2, fp
 8013380:	2b00      	cmp	r3, #0
 8013382:	f040 80c4 	bne.w	801350e <uxr_prepare_reliable_buffer_to_write+0x25a>
 8013386:	b293      	uxth	r3, r2
 8013388:	4553      	cmp	r3, sl
 801338a:	f200 809a 	bhi.w	80134c2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801338e:	2b00      	cmp	r3, #0
 8013390:	f000 80f9 	beq.w	8013586 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8013394:	f8cd 801c 	str.w	r8, [sp, #28]
 8013398:	f04f 0a00 	mov.w	sl, #0
 801339c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80133a0:	f10d 0b20 	add.w	fp, sp, #32
 80133a4:	9505      	str	r5, [sp, #20]
 80133a6:	461d      	mov	r5, r3
 80133a8:	e000      	b.n	80133ac <uxr_prepare_reliable_buffer_to_write+0xf8>
 80133aa:	46c1      	mov	r9, r8
 80133ac:	8922      	ldrh	r2, [r4, #8]
 80133ae:	4658      	mov	r0, fp
 80133b0:	6863      	ldr	r3, [r4, #4]
 80133b2:	f10a 0a01 	add.w	sl, sl, #1
 80133b6:	fbb6 f1f2 	udiv	r1, r6, r2
 80133ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80133be:	fb02 6111 	mls	r1, r2, r1, r6
 80133c2:	463a      	mov	r2, r7
 80133c4:	b289      	uxth	r1, r1
 80133c6:	fb03 f101 	mul.w	r1, r3, r1
 80133ca:	6823      	ldr	r3, [r4, #0]
 80133cc:	3104      	adds	r1, #4
 80133ce:	4419      	add	r1, r3
 80133d0:	2300      	movs	r3, #0
 80133d2:	f851 cc04 	ldr.w	ip, [r1, #-4]
 80133d6:	f8cd c000 	str.w	ip, [sp]
 80133da:	f7f5 ffb1 	bl	8009340 <ucdr_init_buffer_origin_offset>
 80133de:	464a      	mov	r2, r9
 80133e0:	2300      	movs	r3, #0
 80133e2:	210d      	movs	r1, #13
 80133e4:	4658      	mov	r0, fp
 80133e6:	f7fb fa8b 	bl	800e900 <uxr_buffer_submessage_header>
 80133ea:	8921      	ldrh	r1, [r4, #8]
 80133ec:	6863      	ldr	r3, [r4, #4]
 80133ee:	4630      	mov	r0, r6
 80133f0:	fbb6 f2f1 	udiv	r2, r6, r1
 80133f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80133f8:	fb01 6212 	mls	r2, r1, r2, r6
 80133fc:	2101      	movs	r1, #1
 80133fe:	b292      	uxth	r2, r2
 8013400:	fb02 f303 	mul.w	r3, r2, r3
 8013404:	6822      	ldr	r2, [r4, #0]
 8013406:	50d7      	str	r7, [r2, r3]
 8013408:	f000 f9a4 	bl	8013754 <uxr_seq_num_add>
 801340c:	4606      	mov	r6, r0
 801340e:	fa1f f38a 	uxth.w	r3, sl
 8013412:	429d      	cmp	r5, r3
 8013414:	d8c9      	bhi.n	80133aa <uxr_prepare_reliable_buffer_to_write+0xf6>
 8013416:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801341a:	9d05      	ldr	r5, [sp, #20]
 801341c:	8920      	ldrh	r0, [r4, #8]
 801341e:	463a      	mov	r2, r7
 8013420:	6863      	ldr	r3, [r4, #4]
 8013422:	fbb6 f1f0 	udiv	r1, r6, r0
 8013426:	fbb3 f3f0 	udiv	r3, r3, r0
 801342a:	fb00 6111 	mls	r1, r0, r1, r6
 801342e:	4658      	mov	r0, fp
 8013430:	b289      	uxth	r1, r1
 8013432:	fb01 f303 	mul.w	r3, r1, r3
 8013436:	6821      	ldr	r1, [r4, #0]
 8013438:	3304      	adds	r3, #4
 801343a:	4419      	add	r1, r3
 801343c:	2300      	movs	r3, #0
 801343e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8013442:	9700      	str	r7, [sp, #0]
 8013444:	f7f5 ff7c 	bl	8009340 <ucdr_init_buffer_origin_offset>
 8013448:	9f06      	ldr	r7, [sp, #24]
 801344a:	4658      	mov	r0, fp
 801344c:	2302      	movs	r3, #2
 801344e:	b2ba      	uxth	r2, r7
 8013450:	210d      	movs	r1, #13
 8013452:	f7fb fa55 	bl	800e900 <uxr_buffer_submessage_header>
 8013456:	f108 0104 	add.w	r1, r8, #4
 801345a:	9b03      	ldr	r3, [sp, #12]
 801345c:	f1a5 0208 	sub.w	r2, r5, #8
 8013460:	8925      	ldrh	r5, [r4, #8]
 8013462:	440b      	add	r3, r1
 8013464:	eba2 0208 	sub.w	r2, r2, r8
 8013468:	fbb6 f0f5 	udiv	r0, r6, r5
 801346c:	4619      	mov	r1, r3
 801346e:	6863      	ldr	r3, [r4, #4]
 8013470:	fb05 6010 	mls	r0, r5, r0, r6
 8013474:	fbb3 f3f5 	udiv	r3, r3, r5
 8013478:	b280      	uxth	r0, r0
 801347a:	6825      	ldr	r5, [r4, #0]
 801347c:	fb00 f303 	mul.w	r3, r0, r3
 8013480:	7b20      	ldrb	r0, [r4, #12]
 8013482:	3004      	adds	r0, #4
 8013484:	4438      	add	r0, r7
 8013486:	50e8      	str	r0, [r5, r3]
 8013488:	9d04      	ldr	r5, [sp, #16]
 801348a:	4628      	mov	r0, r5
 801348c:	f7f5 ff6a 	bl	8009364 <ucdr_init_buffer>
 8013490:	4628      	mov	r0, r5
 8013492:	4622      	mov	r2, r4
 8013494:	493d      	ldr	r1, [pc, #244]	; (801358c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8013496:	f7f5 ff39 	bl	800930c <ucdr_set_on_full_buffer_callback>
 801349a:	2001      	movs	r0, #1
 801349c:	81e6      	strh	r6, [r4, #14]
 801349e:	b011      	add	sp, #68	; 0x44
 80134a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134a4:	2101      	movs	r1, #1
 80134a6:	89e0      	ldrh	r0, [r4, #14]
 80134a8:	f000 f954 	bl	8013754 <uxr_seq_num_add>
 80134ac:	4605      	mov	r5, r0
 80134ae:	8921      	ldrh	r1, [r4, #8]
 80134b0:	8a60      	ldrh	r0, [r4, #18]
 80134b2:	f000 f94f 	bl	8013754 <uxr_seq_num_add>
 80134b6:	4601      	mov	r1, r0
 80134b8:	4628      	mov	r0, r5
 80134ba:	f000 f953 	bl	8013764 <uxr_seq_num_cmp>
 80134be:	2800      	cmp	r0, #0
 80134c0:	dd44      	ble.n	801354c <uxr_prepare_reliable_buffer_to_write+0x298>
 80134c2:	2000      	movs	r0, #0
 80134c4:	b011      	add	sp, #68	; 0x44
 80134c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134ca:	8921      	ldrh	r1, [r4, #8]
 80134cc:	8a60      	ldrh	r0, [r4, #18]
 80134ce:	9205      	str	r2, [sp, #20]
 80134d0:	f000 f940 	bl	8013754 <uxr_seq_num_add>
 80134d4:	4601      	mov	r1, r0
 80134d6:	4630      	mov	r0, r6
 80134d8:	f000 f944 	bl	8013764 <uxr_seq_num_cmp>
 80134dc:	2800      	cmp	r0, #0
 80134de:	9a05      	ldr	r2, [sp, #20]
 80134e0:	dcef      	bgt.n	80134c2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 80134e2:	8925      	ldrh	r5, [r4, #8]
 80134e4:	e9d4 7300 	ldrd	r7, r3, [r4]
 80134e8:	fbb6 f4f5 	udiv	r4, r6, r5
 80134ec:	fbb3 f3f5 	udiv	r3, r3, r5
 80134f0:	fb05 6414 	mls	r4, r5, r4, r6
 80134f4:	b2a4      	uxth	r4, r4
 80134f6:	fb04 f303 	mul.w	r3, r4, r3
 80134fa:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80134fe:	50fa      	str	r2, [r7, r3]
 8013500:	2300      	movs	r3, #0
 8013502:	f8cd 8000 	str.w	r8, [sp]
 8013506:	f7f5 ff1b 	bl	8009340 <ucdr_init_buffer_origin_offset>
 801350a:	2001      	movs	r0, #1
 801350c:	e7da      	b.n	80134c4 <uxr_prepare_reliable_buffer_to_write+0x210>
 801350e:	3201      	adds	r2, #1
 8013510:	9306      	str	r3, [sp, #24]
 8013512:	b293      	uxth	r3, r2
 8013514:	4553      	cmp	r3, sl
 8013516:	d8d4      	bhi.n	80134c2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8013518:	e739      	b.n	801338e <uxr_prepare_reliable_buffer_to_write+0xda>
 801351a:	4630      	mov	r0, r6
 801351c:	2101      	movs	r1, #1
 801351e:	9307      	str	r3, [sp, #28]
 8013520:	f000 f918 	bl	8013754 <uxr_seq_num_add>
 8013524:	4606      	mov	r6, r0
 8013526:	8920      	ldrh	r0, [r4, #8]
 8013528:	6862      	ldr	r2, [r4, #4]
 801352a:	fbb6 f1f0 	udiv	r1, r6, r0
 801352e:	fbb2 f2f0 	udiv	r2, r2, r0
 8013532:	fb00 6111 	mls	r1, r0, r1, r6
 8013536:	b289      	uxth	r1, r1
 8013538:	fb01 f202 	mul.w	r2, r1, r2
 801353c:	6821      	ldr	r1, [r4, #0]
 801353e:	3204      	adds	r2, #4
 8013540:	188b      	adds	r3, r1, r2
 8013542:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8013546:	9303      	str	r3, [sp, #12]
 8013548:	9b07      	ldr	r3, [sp, #28]
 801354a:	e70c      	b.n	8013366 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801354c:	8921      	ldrh	r1, [r4, #8]
 801354e:	6863      	ldr	r3, [r4, #4]
 8013550:	9804      	ldr	r0, [sp, #16]
 8013552:	fbb5 f2f1 	udiv	r2, r5, r1
 8013556:	fbb3 f3f1 	udiv	r3, r3, r1
 801355a:	fb01 5212 	mls	r2, r1, r2, r5
 801355e:	6821      	ldr	r1, [r4, #0]
 8013560:	b292      	uxth	r2, r2
 8013562:	fb02 f303 	mul.w	r3, r2, r3
 8013566:	7b22      	ldrb	r2, [r4, #12]
 8013568:	3304      	adds	r3, #4
 801356a:	445a      	add	r2, fp
 801356c:	4419      	add	r1, r3
 801356e:	f841 2c04 	str.w	r2, [r1, #-4]
 8013572:	7b23      	ldrb	r3, [r4, #12]
 8013574:	9300      	str	r3, [sp, #0]
 8013576:	2300      	movs	r3, #0
 8013578:	f7f5 fee2 	bl	8009340 <ucdr_init_buffer_origin_offset>
 801357c:	2001      	movs	r0, #1
 801357e:	81e5      	strh	r5, [r4, #14]
 8013580:	e7a0      	b.n	80134c4 <uxr_prepare_reliable_buffer_to_write+0x210>
 8013582:	4682      	mov	sl, r0
 8013584:	e6cb      	b.n	801331e <uxr_prepare_reliable_buffer_to_write+0x6a>
 8013586:	f10d 0b20 	add.w	fp, sp, #32
 801358a:	e747      	b.n	801341c <uxr_prepare_reliable_buffer_to_write+0x168>
 801358c:	08013189 	.word	0x08013189

08013590 <uxr_prepare_next_reliable_buffer_to_send>:
 8013590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013592:	4604      	mov	r4, r0
 8013594:	461d      	mov	r5, r3
 8013596:	460f      	mov	r7, r1
 8013598:	8a00      	ldrh	r0, [r0, #16]
 801359a:	2101      	movs	r1, #1
 801359c:	4616      	mov	r6, r2
 801359e:	f000 f8d9 	bl	8013754 <uxr_seq_num_add>
 80135a2:	8028      	strh	r0, [r5, #0]
 80135a4:	8922      	ldrh	r2, [r4, #8]
 80135a6:	6863      	ldr	r3, [r4, #4]
 80135a8:	fbb0 f1f2 	udiv	r1, r0, r2
 80135ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80135b0:	fb02 0c11 	mls	ip, r2, r1, r0
 80135b4:	89e1      	ldrh	r1, [r4, #14]
 80135b6:	fa1f fc8c 	uxth.w	ip, ip
 80135ba:	fb0c fc03 	mul.w	ip, ip, r3
 80135be:	6823      	ldr	r3, [r4, #0]
 80135c0:	f10c 0c04 	add.w	ip, ip, #4
 80135c4:	4463      	add	r3, ip
 80135c6:	603b      	str	r3, [r7, #0]
 80135c8:	6823      	ldr	r3, [r4, #0]
 80135ca:	449c      	add	ip, r3
 80135cc:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80135d0:	6033      	str	r3, [r6, #0]
 80135d2:	f000 f8c7 	bl	8013764 <uxr_seq_num_cmp>
 80135d6:	2800      	cmp	r0, #0
 80135d8:	dd01      	ble.n	80135de <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80135da:	2000      	movs	r0, #0
 80135dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135de:	7b23      	ldrb	r3, [r4, #12]
 80135e0:	6832      	ldr	r2, [r6, #0]
 80135e2:	429a      	cmp	r2, r3
 80135e4:	d9f9      	bls.n	80135da <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80135e6:	8a61      	ldrh	r1, [r4, #18]
 80135e8:	8a20      	ldrh	r0, [r4, #16]
 80135ea:	f000 f8b7 	bl	801375c <uxr_seq_num_sub>
 80135ee:	8923      	ldrh	r3, [r4, #8]
 80135f0:	4283      	cmp	r3, r0
 80135f2:	d0f2      	beq.n	80135da <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80135f4:	8828      	ldrh	r0, [r5, #0]
 80135f6:	89e3      	ldrh	r3, [r4, #14]
 80135f8:	8220      	strh	r0, [r4, #16]
 80135fa:	4298      	cmp	r0, r3
 80135fc:	d001      	beq.n	8013602 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80135fe:	2001      	movs	r0, #1
 8013600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013602:	2101      	movs	r1, #1
 8013604:	f000 f8a6 	bl	8013754 <uxr_seq_num_add>
 8013608:	4603      	mov	r3, r0
 801360a:	2001      	movs	r0, #1
 801360c:	81e3      	strh	r3, [r4, #14]
 801360e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013610 <uxr_update_output_stream_heartbeat_timestamp>:
 8013610:	b570      	push	{r4, r5, r6, lr}
 8013612:	8a01      	ldrh	r1, [r0, #16]
 8013614:	4604      	mov	r4, r0
 8013616:	8a40      	ldrh	r0, [r0, #18]
 8013618:	4615      	mov	r5, r2
 801361a:	461e      	mov	r6, r3
 801361c:	f000 f8a2 	bl	8013764 <uxr_seq_num_cmp>
 8013620:	2800      	cmp	r0, #0
 8013622:	db07      	blt.n	8013634 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8013624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013628:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801362c:	2000      	movs	r0, #0
 801362e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8013632:	bd70      	pop	{r4, r5, r6, pc}
 8013634:	f894 0020 	ldrb.w	r0, [r4, #32]
 8013638:	b940      	cbnz	r0, 801364c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801363a:	2301      	movs	r3, #1
 801363c:	f884 3020 	strb.w	r3, [r4, #32]
 8013640:	3564      	adds	r5, #100	; 0x64
 8013642:	f146 0600 	adc.w	r6, r6, #0
 8013646:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801364a:	bd70      	pop	{r4, r5, r6, pc}
 801364c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8013650:	4295      	cmp	r5, r2
 8013652:	eb76 0303 	sbcs.w	r3, r6, r3
 8013656:	db04      	blt.n	8013662 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8013658:	1c43      	adds	r3, r0, #1
 801365a:	2001      	movs	r0, #1
 801365c:	f884 3020 	strb.w	r3, [r4, #32]
 8013660:	e7ee      	b.n	8013640 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8013662:	2000      	movs	r0, #0
 8013664:	e7ec      	b.n	8013640 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8013666:	bf00      	nop

08013668 <uxr_begin_output_nack_buffer_it>:
 8013668:	8a40      	ldrh	r0, [r0, #18]
 801366a:	4770      	bx	lr

0801366c <uxr_next_reliable_nack_buffer_to_send>:
 801366c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013670:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 8013674:	b197      	cbz	r7, 801369c <uxr_next_reliable_nack_buffer_to_send+0x30>
 8013676:	4680      	mov	r8, r0
 8013678:	460d      	mov	r5, r1
 801367a:	4616      	mov	r6, r2
 801367c:	461c      	mov	r4, r3
 801367e:	8818      	ldrh	r0, [r3, #0]
 8013680:	2101      	movs	r1, #1
 8013682:	f000 f867 	bl	8013754 <uxr_seq_num_add>
 8013686:	8020      	strh	r0, [r4, #0]
 8013688:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801368c:	f000 f86a 	bl	8013764 <uxr_seq_num_cmp>
 8013690:	2800      	cmp	r0, #0
 8013692:	dd06      	ble.n	80136a2 <uxr_next_reliable_nack_buffer_to_send+0x36>
 8013694:	2300      	movs	r3, #0
 8013696:	461f      	mov	r7, r3
 8013698:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801369c:	4638      	mov	r0, r7
 801369e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136a2:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 80136a6:	8820      	ldrh	r0, [r4, #0]
 80136a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80136ac:	fbb0 f3f2 	udiv	r3, r0, r2
 80136b0:	fbb1 fcf2 	udiv	ip, r1, r2
 80136b4:	fb02 0313 	mls	r3, r2, r3, r0
 80136b8:	b29b      	uxth	r3, r3
 80136ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80136be:	f8d8 3000 	ldr.w	r3, [r8]
 80136c2:	f10c 0c04 	add.w	ip, ip, #4
 80136c6:	4463      	add	r3, ip
 80136c8:	602b      	str	r3, [r5, #0]
 80136ca:	f8d8 3000 	ldr.w	r3, [r8]
 80136ce:	4463      	add	r3, ip
 80136d0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80136d4:	6033      	str	r3, [r6, #0]
 80136d6:	f898 200c 	ldrb.w	r2, [r8, #12]
 80136da:	429a      	cmp	r2, r3
 80136dc:	d0d0      	beq.n	8013680 <uxr_next_reliable_nack_buffer_to_send+0x14>
 80136de:	e7dd      	b.n	801369c <uxr_next_reliable_nack_buffer_to_send+0x30>

080136e0 <uxr_process_acknack>:
 80136e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136e2:	4604      	mov	r4, r0
 80136e4:	460e      	mov	r6, r1
 80136e6:	4610      	mov	r0, r2
 80136e8:	2101      	movs	r1, #1
 80136ea:	f000 f837 	bl	801375c <uxr_seq_num_sub>
 80136ee:	8a61      	ldrh	r1, [r4, #18]
 80136f0:	f000 f834 	bl	801375c <uxr_seq_num_sub>
 80136f4:	b1c8      	cbz	r0, 801372a <uxr_process_acknack+0x4a>
 80136f6:	4605      	mov	r5, r0
 80136f8:	2700      	movs	r7, #0
 80136fa:	2101      	movs	r1, #1
 80136fc:	8a60      	ldrh	r0, [r4, #18]
 80136fe:	f000 f829 	bl	8013754 <uxr_seq_num_add>
 8013702:	8923      	ldrh	r3, [r4, #8]
 8013704:	6862      	ldr	r2, [r4, #4]
 8013706:	3701      	adds	r7, #1
 8013708:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801370c:	6821      	ldr	r1, [r4, #0]
 801370e:	42bd      	cmp	r5, r7
 8013710:	8260      	strh	r0, [r4, #18]
 8013712:	fbb0 fef3 	udiv	lr, r0, r3
 8013716:	fbb2 f2f3 	udiv	r2, r2, r3
 801371a:	fb03 031e 	mls	r3, r3, lr, r0
 801371e:	b29b      	uxth	r3, r3
 8013720:	fb02 f303 	mul.w	r3, r2, r3
 8013724:	f841 c003 	str.w	ip, [r1, r3]
 8013728:	d1e7      	bne.n	80136fa <uxr_process_acknack+0x1a>
 801372a:	3e00      	subs	r6, #0
 801372c:	f04f 0300 	mov.w	r3, #0
 8013730:	bf18      	it	ne
 8013732:	2601      	movne	r6, #1
 8013734:	f884 3020 	strb.w	r3, [r4, #32]
 8013738:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801373c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801373e:	bf00      	nop

08013740 <uxr_is_output_up_to_date>:
 8013740:	8a01      	ldrh	r1, [r0, #16]
 8013742:	8a40      	ldrh	r0, [r0, #18]
 8013744:	b508      	push	{r3, lr}
 8013746:	f000 f80d 	bl	8013764 <uxr_seq_num_cmp>
 801374a:	fab0 f080 	clz	r0, r0
 801374e:	0940      	lsrs	r0, r0, #5
 8013750:	bd08      	pop	{r3, pc}
 8013752:	bf00      	nop

08013754 <uxr_seq_num_add>:
 8013754:	4408      	add	r0, r1
 8013756:	b280      	uxth	r0, r0
 8013758:	4770      	bx	lr
 801375a:	bf00      	nop

0801375c <uxr_seq_num_sub>:
 801375c:	1a40      	subs	r0, r0, r1
 801375e:	b280      	uxth	r0, r0
 8013760:	4770      	bx	lr
 8013762:	bf00      	nop

08013764 <uxr_seq_num_cmp>:
 8013764:	4288      	cmp	r0, r1
 8013766:	d011      	beq.n	801378c <uxr_seq_num_cmp+0x28>
 8013768:	d309      	bcc.n	801377e <uxr_seq_num_cmp+0x1a>
 801376a:	4288      	cmp	r0, r1
 801376c:	d910      	bls.n	8013790 <uxr_seq_num_cmp+0x2c>
 801376e:	1a40      	subs	r0, r0, r1
 8013770:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013774:	bfd4      	ite	le
 8013776:	2001      	movle	r0, #1
 8013778:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801377c:	4770      	bx	lr
 801377e:	1a0b      	subs	r3, r1, r0
 8013780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013784:	daf1      	bge.n	801376a <uxr_seq_num_cmp+0x6>
 8013786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801378a:	4770      	bx	lr
 801378c:	2000      	movs	r0, #0
 801378e:	4770      	bx	lr
 8013790:	2001      	movs	r0, #1
 8013792:	4770      	bx	lr

08013794 <rcl_get_default_domain_id>:
 8013794:	b530      	push	{r4, r5, lr}
 8013796:	2300      	movs	r3, #0
 8013798:	b083      	sub	sp, #12
 801379a:	9300      	str	r3, [sp, #0]
 801379c:	b1d0      	cbz	r0, 80137d4 <rcl_get_default_domain_id+0x40>
 801379e:	4604      	mov	r4, r0
 80137a0:	4669      	mov	r1, sp
 80137a2:	4815      	ldr	r0, [pc, #84]	; (80137f8 <rcl_get_default_domain_id+0x64>)
 80137a4:	f7f7 f95c 	bl	800aa60 <rcutils_get_env>
 80137a8:	4602      	mov	r2, r0
 80137aa:	b110      	cbz	r0, 80137b2 <rcl_get_default_domain_id+0x1e>
 80137ac:	2001      	movs	r0, #1
 80137ae:	b003      	add	sp, #12
 80137b0:	bd30      	pop	{r4, r5, pc}
 80137b2:	9b00      	ldr	r3, [sp, #0]
 80137b4:	b18b      	cbz	r3, 80137da <rcl_get_default_domain_id+0x46>
 80137b6:	7818      	ldrb	r0, [r3, #0]
 80137b8:	2800      	cmp	r0, #0
 80137ba:	d0f8      	beq.n	80137ae <rcl_get_default_domain_id+0x1a>
 80137bc:	a901      	add	r1, sp, #4
 80137be:	4618      	mov	r0, r3
 80137c0:	9201      	str	r2, [sp, #4]
 80137c2:	f000 fc9f 	bl	8014104 <strtoul>
 80137c6:	4605      	mov	r5, r0
 80137c8:	b150      	cbz	r0, 80137e0 <rcl_get_default_domain_id+0x4c>
 80137ca:	1c43      	adds	r3, r0, #1
 80137cc:	d00d      	beq.n	80137ea <rcl_get_default_domain_id+0x56>
 80137ce:	2000      	movs	r0, #0
 80137d0:	6025      	str	r5, [r4, #0]
 80137d2:	e7ec      	b.n	80137ae <rcl_get_default_domain_id+0x1a>
 80137d4:	200b      	movs	r0, #11
 80137d6:	b003      	add	sp, #12
 80137d8:	bd30      	pop	{r4, r5, pc}
 80137da:	4618      	mov	r0, r3
 80137dc:	b003      	add	sp, #12
 80137de:	bd30      	pop	{r4, r5, pc}
 80137e0:	9b01      	ldr	r3, [sp, #4]
 80137e2:	781b      	ldrb	r3, [r3, #0]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d0f2      	beq.n	80137ce <rcl_get_default_domain_id+0x3a>
 80137e8:	e7e0      	b.n	80137ac <rcl_get_default_domain_id+0x18>
 80137ea:	f001 f8cd 	bl	8014988 <__errno>
 80137ee:	6803      	ldr	r3, [r0, #0]
 80137f0:	2b22      	cmp	r3, #34	; 0x22
 80137f2:	d1ec      	bne.n	80137ce <rcl_get_default_domain_id+0x3a>
 80137f4:	e7da      	b.n	80137ac <rcl_get_default_domain_id+0x18>
 80137f6:	bf00      	nop
 80137f8:	080164cc 	.word	0x080164cc

080137fc <rcl_expand_topic_name>:
 80137fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013800:	b08d      	sub	sp, #52	; 0x34
 8013802:	4698      	mov	r8, r3
 8013804:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013806:	9207      	str	r2, [sp, #28]
 8013808:	2b00      	cmp	r3, #0
 801380a:	bf18      	it	ne
 801380c:	f1b8 0f00 	cmpne.w	r8, #0
 8013810:	bf0c      	ite	eq
 8013812:	2301      	moveq	r3, #1
 8013814:	2300      	movne	r3, #0
 8013816:	2a00      	cmp	r2, #0
 8013818:	bf08      	it	eq
 801381a:	f043 0301 	orreq.w	r3, r3, #1
 801381e:	2900      	cmp	r1, #0
 8013820:	bf08      	it	eq
 8013822:	f043 0301 	orreq.w	r3, r3, #1
 8013826:	2b00      	cmp	r3, #0
 8013828:	d13d      	bne.n	80138a6 <rcl_expand_topic_name+0xaa>
 801382a:	fab0 f280 	clz	r2, r0
 801382e:	4604      	mov	r4, r0
 8013830:	0952      	lsrs	r2, r2, #5
 8013832:	2800      	cmp	r0, #0
 8013834:	d037      	beq.n	80138a6 <rcl_expand_topic_name+0xaa>
 8013836:	460f      	mov	r7, r1
 8013838:	a90b      	add	r1, sp, #44	; 0x2c
 801383a:	f000 f967 	bl	8013b0c <rcl_validate_topic_name>
 801383e:	4605      	mov	r5, r0
 8013840:	bb68      	cbnz	r0, 801389e <rcl_expand_topic_name+0xa2>
 8013842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013844:	2b00      	cmp	r3, #0
 8013846:	d137      	bne.n	80138b8 <rcl_expand_topic_name+0xbc>
 8013848:	4602      	mov	r2, r0
 801384a:	a90b      	add	r1, sp, #44	; 0x2c
 801384c:	4638      	mov	r0, r7
 801384e:	f7f7 fb9d 	bl	800af8c <rmw_validate_node_name>
 8013852:	bb68      	cbnz	r0, 80138b0 <rcl_expand_topic_name+0xb4>
 8013854:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013856:	2b00      	cmp	r3, #0
 8013858:	d133      	bne.n	80138c2 <rcl_expand_topic_name+0xc6>
 801385a:	462a      	mov	r2, r5
 801385c:	a90b      	add	r1, sp, #44	; 0x2c
 801385e:	9807      	ldr	r0, [sp, #28]
 8013860:	f7f7 fb76 	bl	800af50 <rmw_validate_namespace>
 8013864:	bb20      	cbnz	r0, 80138b0 <rcl_expand_topic_name+0xb4>
 8013866:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8013868:	2d00      	cmp	r5, #0
 801386a:	f040 80a2 	bne.w	80139b2 <rcl_expand_topic_name+0x1b6>
 801386e:	217b      	movs	r1, #123	; 0x7b
 8013870:	4620      	mov	r0, r4
 8013872:	f000 ffa7 	bl	80147c4 <strchr>
 8013876:	7823      	ldrb	r3, [r4, #0]
 8013878:	4681      	mov	r9, r0
 801387a:	bb20      	cbnz	r0, 80138c6 <rcl_expand_topic_name+0xca>
 801387c:	2b2f      	cmp	r3, #47	; 0x2f
 801387e:	d122      	bne.n	80138c6 <rcl_expand_topic_name+0xca>
 8013880:	ab19      	add	r3, sp, #100	; 0x64
 8013882:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013886:	ab16      	add	r3, sp, #88	; 0x58
 8013888:	e88d 0003 	stmia.w	sp, {r0, r1}
 801388c:	4620      	mov	r0, r4
 801388e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013890:	f7f7 fa6c 	bl	800ad6c <rcutils_strdup>
 8013894:	2800      	cmp	r0, #0
 8013896:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013898:	bf08      	it	eq
 801389a:	250a      	moveq	r5, #10
 801389c:	6018      	str	r0, [r3, #0]
 801389e:	4628      	mov	r0, r5
 80138a0:	b00d      	add	sp, #52	; 0x34
 80138a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138a6:	250b      	movs	r5, #11
 80138a8:	4628      	mov	r0, r5
 80138aa:	b00d      	add	sp, #52	; 0x34
 80138ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138b0:	f7fb ffe0 	bl	800f874 <rcl_convert_rmw_ret_to_rcl_ret>
 80138b4:	4605      	mov	r5, r0
 80138b6:	e7f2      	b.n	801389e <rcl_expand_topic_name+0xa2>
 80138b8:	2567      	movs	r5, #103	; 0x67
 80138ba:	4628      	mov	r0, r5
 80138bc:	b00d      	add	sp, #52	; 0x34
 80138be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138c2:	25c9      	movs	r5, #201	; 0xc9
 80138c4:	e7eb      	b.n	801389e <rcl_expand_topic_name+0xa2>
 80138c6:	2b7e      	cmp	r3, #126	; 0x7e
 80138c8:	d075      	beq.n	80139b6 <rcl_expand_topic_name+0x1ba>
 80138ca:	f1b9 0f00 	cmp.w	r9, #0
 80138ce:	f000 80c2 	beq.w	8013a56 <rcl_expand_topic_name+0x25a>
 80138d2:	2300      	movs	r3, #0
 80138d4:	46a2      	mov	sl, r4
 80138d6:	461e      	mov	r6, r3
 80138d8:	9508      	str	r5, [sp, #32]
 80138da:	4655      	mov	r5, sl
 80138dc:	9409      	str	r4, [sp, #36]	; 0x24
 80138de:	46b2      	mov	sl, r6
 80138e0:	464c      	mov	r4, r9
 80138e2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80138e6:	2c00      	cmp	r4, #0
 80138e8:	f000 80ae 	beq.w	8013a48 <rcl_expand_topic_name+0x24c>
 80138ec:	217d      	movs	r1, #125	; 0x7d
 80138ee:	4628      	mov	r0, r5
 80138f0:	f000 ff68 	bl	80147c4 <strchr>
 80138f4:	eba0 0904 	sub.w	r9, r0, r4
 80138f8:	4621      	mov	r1, r4
 80138fa:	4869      	ldr	r0, [pc, #420]	; (8013aa0 <rcl_expand_topic_name+0x2a4>)
 80138fc:	f109 0601 	add.w	r6, r9, #1
 8013900:	4632      	mov	r2, r6
 8013902:	f000 ff6c 	bl	80147de <strncmp>
 8013906:	2800      	cmp	r0, #0
 8013908:	d051      	beq.n	80139ae <rcl_expand_topic_name+0x1b2>
 801390a:	4632      	mov	r2, r6
 801390c:	4621      	mov	r1, r4
 801390e:	4865      	ldr	r0, [pc, #404]	; (8013aa4 <rcl_expand_topic_name+0x2a8>)
 8013910:	f000 ff65 	bl	80147de <strncmp>
 8013914:	b128      	cbz	r0, 8013922 <rcl_expand_topic_name+0x126>
 8013916:	4632      	mov	r2, r6
 8013918:	4621      	mov	r1, r4
 801391a:	4863      	ldr	r0, [pc, #396]	; (8013aa8 <rcl_expand_topic_name+0x2ac>)
 801391c:	f000 ff5f 	bl	80147de <strncmp>
 8013920:	bb38      	cbnz	r0, 8013972 <rcl_expand_topic_name+0x176>
 8013922:	46d9      	mov	r9, fp
 8013924:	ab18      	add	r3, sp, #96	; 0x60
 8013926:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801392a:	ab16      	add	r3, sp, #88	; 0x58
 801392c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013930:	4620      	mov	r0, r4
 8013932:	4631      	mov	r1, r6
 8013934:	cb0c      	ldmia	r3, {r2, r3}
 8013936:	f7f7 fa3b 	bl	800adb0 <rcutils_strndup>
 801393a:	4604      	mov	r4, r0
 801393c:	2800      	cmp	r0, #0
 801393e:	f000 80a3 	beq.w	8013a88 <rcl_expand_topic_name+0x28c>
 8013942:	464a      	mov	r2, r9
 8013944:	4628      	mov	r0, r5
 8013946:	ab16      	add	r3, sp, #88	; 0x58
 8013948:	4621      	mov	r1, r4
 801394a:	f7f7 f90f 	bl	800ab6c <rcutils_repl_str>
 801394e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8013950:	4605      	mov	r5, r0
 8013952:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013954:	4620      	mov	r0, r4
 8013956:	4798      	blx	r3
 8013958:	4650      	mov	r0, sl
 801395a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801395c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801395e:	4798      	blx	r3
 8013960:	2d00      	cmp	r5, #0
 8013962:	d06c      	beq.n	8013a3e <rcl_expand_topic_name+0x242>
 8013964:	217b      	movs	r1, #123	; 0x7b
 8013966:	4628      	mov	r0, r5
 8013968:	f000 ff2c 	bl	80147c4 <strchr>
 801396c:	46aa      	mov	sl, r5
 801396e:	4604      	mov	r4, r0
 8013970:	e7b9      	b.n	80138e6 <rcl_expand_topic_name+0xea>
 8013972:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8013976:	1c61      	adds	r1, r4, #1
 8013978:	4640      	mov	r0, r8
 801397a:	f7fe fb45 	bl	8012008 <rcutils_string_map_getn>
 801397e:	4681      	mov	r9, r0
 8013980:	2800      	cmp	r0, #0
 8013982:	d1cf      	bne.n	8013924 <rcl_expand_topic_name+0x128>
 8013984:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013986:	aa18      	add	r2, sp, #96	; 0x60
 8013988:	2569      	movs	r5, #105	; 0x69
 801398a:	6018      	str	r0, [r3, #0]
 801398c:	ab16      	add	r3, sp, #88	; 0x58
 801398e:	ca07      	ldmia	r2, {r0, r1, r2}
 8013990:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013994:	4631      	mov	r1, r6
 8013996:	4620      	mov	r0, r4
 8013998:	cb0c      	ldmia	r3, {r2, r3}
 801399a:	f7f7 fa09 	bl	800adb0 <rcutils_strndup>
 801399e:	991a      	ldr	r1, [sp, #104]	; 0x68
 80139a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80139a2:	4798      	blx	r3
 80139a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80139a6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80139a8:	4650      	mov	r0, sl
 80139aa:	4798      	blx	r3
 80139ac:	e777      	b.n	801389e <rcl_expand_topic_name+0xa2>
 80139ae:	46b9      	mov	r9, r7
 80139b0:	e7b8      	b.n	8013924 <rcl_expand_topic_name+0x128>
 80139b2:	25ca      	movs	r5, #202	; 0xca
 80139b4:	e773      	b.n	801389e <rcl_expand_topic_name+0xa2>
 80139b6:	9e07      	ldr	r6, [sp, #28]
 80139b8:	4630      	mov	r0, r6
 80139ba:	f7ec fc4b 	bl	8000254 <strlen>
 80139be:	4a3b      	ldr	r2, [pc, #236]	; (8013aac <rcl_expand_topic_name+0x2b0>)
 80139c0:	4b3b      	ldr	r3, [pc, #236]	; (8013ab0 <rcl_expand_topic_name+0x2b4>)
 80139c2:	9603      	str	r6, [sp, #12]
 80139c4:	2801      	cmp	r0, #1
 80139c6:	bf18      	it	ne
 80139c8:	4613      	movne	r3, r2
 80139ca:	9704      	str	r7, [sp, #16]
 80139cc:	9302      	str	r3, [sp, #8]
 80139ce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80139d0:	9300      	str	r3, [sp, #0]
 80139d2:	1c63      	adds	r3, r4, #1
 80139d4:	9305      	str	r3, [sp, #20]
 80139d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80139da:	9301      	str	r3, [sp, #4]
 80139dc:	ab16      	add	r3, sp, #88	; 0x58
 80139de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80139e0:	f7f7 f88a 	bl	800aaf8 <rcutils_format_string_limit>
 80139e4:	4606      	mov	r6, r0
 80139e6:	b350      	cbz	r0, 8013a3e <rcl_expand_topic_name+0x242>
 80139e8:	f1b9 0f00 	cmp.w	r9, #0
 80139ec:	d005      	beq.n	80139fa <rcl_expand_topic_name+0x1fe>
 80139ee:	217b      	movs	r1, #123	; 0x7b
 80139f0:	46b2      	mov	sl, r6
 80139f2:	f000 fee7 	bl	80147c4 <strchr>
 80139f6:	4681      	mov	r9, r0
 80139f8:	e76e      	b.n	80138d8 <rcl_expand_topic_name+0xdc>
 80139fa:	7833      	ldrb	r3, [r6, #0]
 80139fc:	2b2f      	cmp	r3, #47	; 0x2f
 80139fe:	d01b      	beq.n	8013a38 <rcl_expand_topic_name+0x23c>
 8013a00:	9c07      	ldr	r4, [sp, #28]
 8013a02:	4620      	mov	r0, r4
 8013a04:	f7ec fc26 	bl	8000254 <strlen>
 8013a08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013a0c:	4a29      	ldr	r2, [pc, #164]	; (8013ab4 <rcl_expand_topic_name+0x2b8>)
 8013a0e:	9301      	str	r3, [sp, #4]
 8013a10:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013a12:	9604      	str	r6, [sp, #16]
 8013a14:	9300      	str	r3, [sp, #0]
 8013a16:	4b28      	ldr	r3, [pc, #160]	; (8013ab8 <rcl_expand_topic_name+0x2bc>)
 8013a18:	9403      	str	r4, [sp, #12]
 8013a1a:	2801      	cmp	r0, #1
 8013a1c:	bf18      	it	ne
 8013a1e:	4613      	movne	r3, r2
 8013a20:	9302      	str	r3, [sp, #8]
 8013a22:	ab16      	add	r3, sp, #88	; 0x58
 8013a24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013a26:	f7f7 f867 	bl	800aaf8 <rcutils_format_string_limit>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013a2e:	4630      	mov	r0, r6
 8013a30:	991a      	ldr	r1, [sp, #104]	; 0x68
 8013a32:	461e      	mov	r6, r3
 8013a34:	4790      	blx	r2
 8013a36:	b116      	cbz	r6, 8013a3e <rcl_expand_topic_name+0x242>
 8013a38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a3a:	601e      	str	r6, [r3, #0]
 8013a3c:	e72f      	b.n	801389e <rcl_expand_topic_name+0xa2>
 8013a3e:	2300      	movs	r3, #0
 8013a40:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013a42:	250a      	movs	r5, #10
 8013a44:	6013      	str	r3, [r2, #0]
 8013a46:	e72a      	b.n	801389e <rcl_expand_topic_name+0xa2>
 8013a48:	4653      	mov	r3, sl
 8013a4a:	4656      	mov	r6, sl
 8013a4c:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d1d2      	bne.n	80139fa <rcl_expand_topic_name+0x1fe>
 8013a54:	7823      	ldrb	r3, [r4, #0]
 8013a56:	2b2f      	cmp	r3, #47	; 0x2f
 8013a58:	d01e      	beq.n	8013a98 <rcl_expand_topic_name+0x29c>
 8013a5a:	9e07      	ldr	r6, [sp, #28]
 8013a5c:	4630      	mov	r0, r6
 8013a5e:	f7ec fbf9 	bl	8000254 <strlen>
 8013a62:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013a64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013a68:	9603      	str	r6, [sp, #12]
 8013a6a:	9404      	str	r4, [sp, #16]
 8013a6c:	e9cd 2300 	strd	r2, r3, [sp]
 8013a70:	4a10      	ldr	r2, [pc, #64]	; (8013ab4 <rcl_expand_topic_name+0x2b8>)
 8013a72:	4b11      	ldr	r3, [pc, #68]	; (8013ab8 <rcl_expand_topic_name+0x2bc>)
 8013a74:	2801      	cmp	r0, #1
 8013a76:	bf18      	it	ne
 8013a78:	4613      	movne	r3, r2
 8013a7a:	9302      	str	r3, [sp, #8]
 8013a7c:	ab16      	add	r3, sp, #88	; 0x58
 8013a7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013a80:	f7f7 f83a 	bl	800aaf8 <rcutils_format_string_limit>
 8013a84:	4606      	mov	r6, r0
 8013a86:	e7d6      	b.n	8013a36 <rcl_expand_topic_name+0x23a>
 8013a88:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 8013a8c:	4650      	mov	r0, sl
 8013a8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013a90:	6014      	str	r4, [r2, #0]
 8013a92:	250a      	movs	r5, #10
 8013a94:	4798      	blx	r3
 8013a96:	e702      	b.n	801389e <rcl_expand_topic_name+0xa2>
 8013a98:	2300      	movs	r3, #0
 8013a9a:	461e      	mov	r6, r3
 8013a9c:	e7cc      	b.n	8013a38 <rcl_expand_topic_name+0x23c>
 8013a9e:	bf00      	nop
 8013aa0:	080164e4 	.word	0x080164e4
 8013aa4:	080164ec 	.word	0x080164ec
 8013aa8:	080164f4 	.word	0x080164f4
 8013aac:	080164dc 	.word	0x080164dc
 8013ab0:	08016088 	.word	0x08016088
 8013ab4:	08015bd8 	.word	0x08015bd8
 8013ab8:	08015bd0 	.word	0x08015bd0

08013abc <rcl_get_default_topic_name_substitutions>:
 8013abc:	2800      	cmp	r0, #0
 8013abe:	bf0c      	ite	eq
 8013ac0:	200b      	moveq	r0, #11
 8013ac2:	2000      	movne	r0, #0
 8013ac4:	4770      	bx	lr
 8013ac6:	bf00      	nop

08013ac8 <rcl_publisher_is_valid>:
 8013ac8:	b1a0      	cbz	r0, 8013af4 <rcl_publisher_is_valid+0x2c>
 8013aca:	6803      	ldr	r3, [r0, #0]
 8013acc:	b510      	push	{r4, lr}
 8013ace:	4604      	mov	r4, r0
 8013ad0:	b173      	cbz	r3, 8013af0 <rcl_publisher_is_valid+0x28>
 8013ad2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8013ad6:	b15a      	cbz	r2, 8013af0 <rcl_publisher_is_valid+0x28>
 8013ad8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8013adc:	f7fb fee8 	bl	800f8b0 <rcl_context_is_valid>
 8013ae0:	b130      	cbz	r0, 8013af0 <rcl_publisher_is_valid+0x28>
 8013ae2:	6823      	ldr	r3, [r4, #0]
 8013ae4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8013ae8:	3800      	subs	r0, #0
 8013aea:	bf18      	it	ne
 8013aec:	2001      	movne	r0, #1
 8013aee:	bd10      	pop	{r4, pc}
 8013af0:	2000      	movs	r0, #0
 8013af2:	bd10      	pop	{r4, pc}
 8013af4:	2000      	movs	r0, #0
 8013af6:	4770      	bx	lr

08013af8 <rcl_publisher_is_valid_except_context>:
 8013af8:	b130      	cbz	r0, 8013b08 <rcl_publisher_is_valid_except_context+0x10>
 8013afa:	6800      	ldr	r0, [r0, #0]
 8013afc:	b120      	cbz	r0, 8013b08 <rcl_publisher_is_valid_except_context+0x10>
 8013afe:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8013b02:	3800      	subs	r0, #0
 8013b04:	bf18      	it	ne
 8013b06:	2001      	movne	r0, #1
 8013b08:	4770      	bx	lr
 8013b0a:	bf00      	nop

08013b0c <rcl_validate_topic_name>:
 8013b0c:	2800      	cmp	r0, #0
 8013b0e:	f000 8089 	beq.w	8013c24 <rcl_validate_topic_name+0x118>
 8013b12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b16:	460e      	mov	r6, r1
 8013b18:	2900      	cmp	r1, #0
 8013b1a:	f000 8085 	beq.w	8013c28 <rcl_validate_topic_name+0x11c>
 8013b1e:	4604      	mov	r4, r0
 8013b20:	4617      	mov	r7, r2
 8013b22:	f7ec fb97 	bl	8000254 <strlen>
 8013b26:	b1b0      	cbz	r0, 8013b56 <rcl_validate_topic_name+0x4a>
 8013b28:	f894 e000 	ldrb.w	lr, [r4]
 8013b2c:	f8df c160 	ldr.w	ip, [pc, #352]	; 8013c90 <rcl_validate_topic_name+0x184>
 8013b30:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8013b34:	f013 0304 	ands.w	r3, r3, #4
 8013b38:	d139      	bne.n	8013bae <rcl_validate_topic_name+0xa2>
 8013b3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8013b3e:	f814 2008 	ldrb.w	r2, [r4, r8]
 8013b42:	2a2f      	cmp	r2, #47	; 0x2f
 8013b44:	d10f      	bne.n	8013b66 <rcl_validate_topic_name+0x5a>
 8013b46:	2202      	movs	r2, #2
 8013b48:	6032      	str	r2, [r6, #0]
 8013b4a:	b3a7      	cbz	r7, 8013bb6 <rcl_validate_topic_name+0xaa>
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f8c7 8000 	str.w	r8, [r7]
 8013b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b56:	2301      	movs	r3, #1
 8013b58:	6033      	str	r3, [r6, #0]
 8013b5a:	b367      	cbz	r7, 8013bb6 <rcl_validate_topic_name+0xaa>
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	4618      	mov	r0, r3
 8013b60:	603b      	str	r3, [r7, #0]
 8013b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b66:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 8013b6a:	461d      	mov	r5, r3
 8013b6c:	4619      	mov	r1, r3
 8013b6e:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8013b72:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8013b76:	f1b9 0f09 	cmp.w	r9, #9
 8013b7a:	d91f      	bls.n	8013bbc <rcl_validate_topic_name+0xb0>
 8013b7c:	f022 0920 	bic.w	r9, r2, #32
 8013b80:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 8013b84:	f1b9 0f19 	cmp.w	r9, #25
 8013b88:	d918      	bls.n	8013bbc <rcl_validate_topic_name+0xb0>
 8013b8a:	2a5f      	cmp	r2, #95	; 0x5f
 8013b8c:	d024      	beq.n	8013bd8 <rcl_validate_topic_name+0xcc>
 8013b8e:	2a2f      	cmp	r2, #47	; 0x2f
 8013b90:	d058      	beq.n	8013c44 <rcl_validate_topic_name+0x138>
 8013b92:	2a7e      	cmp	r2, #126	; 0x7e
 8013b94:	d04a      	beq.n	8013c2c <rcl_validate_topic_name+0x120>
 8013b96:	2a7b      	cmp	r2, #123	; 0x7b
 8013b98:	d05b      	beq.n	8013c52 <rcl_validate_topic_name+0x146>
 8013b9a:	2a7d      	cmp	r2, #125	; 0x7d
 8013b9c:	d169      	bne.n	8013c72 <rcl_validate_topic_name+0x166>
 8013b9e:	2d00      	cmp	r5, #0
 8013ba0:	d15c      	bne.n	8013c5c <rcl_validate_topic_name+0x150>
 8013ba2:	2305      	movs	r3, #5
 8013ba4:	6033      	str	r3, [r6, #0]
 8013ba6:	b137      	cbz	r7, 8013bb6 <rcl_validate_topic_name+0xaa>
 8013ba8:	2000      	movs	r0, #0
 8013baa:	6039      	str	r1, [r7, #0]
 8013bac:	e7d9      	b.n	8013b62 <rcl_validate_topic_name+0x56>
 8013bae:	2304      	movs	r3, #4
 8013bb0:	6033      	str	r3, [r6, #0]
 8013bb2:	2f00      	cmp	r7, #0
 8013bb4:	d1d2      	bne.n	8013b5c <rcl_validate_topic_name+0x50>
 8013bb6:	2000      	movs	r0, #0
 8013bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bbc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013bc0:	0752      	lsls	r2, r2, #29
 8013bc2:	d509      	bpl.n	8013bd8 <rcl_validate_topic_name+0xcc>
 8013bc4:	2900      	cmp	r1, #0
 8013bc6:	bf0c      	ite	eq
 8013bc8:	2200      	moveq	r2, #0
 8013bca:	f005 0201 	andne.w	r2, r5, #1
 8013bce:	b11a      	cbz	r2, 8013bd8 <rcl_validate_topic_name+0xcc>
 8013bd0:	1e4d      	subs	r5, r1, #1
 8013bd2:	429d      	cmp	r5, r3
 8013bd4:	d031      	beq.n	8013c3a <rcl_validate_topic_name+0x12e>
 8013bd6:	4615      	mov	r5, r2
 8013bd8:	3101      	adds	r1, #1
 8013bda:	4288      	cmp	r0, r1
 8013bdc:	d1c7      	bne.n	8013b6e <rcl_validate_topic_name+0x62>
 8013bde:	2d00      	cmp	r5, #0
 8013be0:	d142      	bne.n	8013c68 <rcl_validate_topic_name+0x15c>
 8013be2:	4628      	mov	r0, r5
 8013be4:	2301      	movs	r3, #1
 8013be6:	e00c      	b.n	8013c02 <rcl_validate_topic_name+0xf6>
 8013be8:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8013bec:	d101      	bne.n	8013bf2 <rcl_validate_topic_name+0xe6>
 8013bee:	2801      	cmp	r0, #1
 8013bf0:	d047      	beq.n	8013c82 <rcl_validate_topic_name+0x176>
 8013bf2:	1c5a      	adds	r2, r3, #1
 8013bf4:	428b      	cmp	r3, r1
 8013bf6:	f100 0001 	add.w	r0, r0, #1
 8013bfa:	f104 0401 	add.w	r4, r4, #1
 8013bfe:	4613      	mov	r3, r2
 8013c00:	d22e      	bcs.n	8013c60 <rcl_validate_topic_name+0x154>
 8013c02:	4580      	cmp	r8, r0
 8013c04:	d0f5      	beq.n	8013bf2 <rcl_validate_topic_name+0xe6>
 8013c06:	7822      	ldrb	r2, [r4, #0]
 8013c08:	2a2f      	cmp	r2, #47	; 0x2f
 8013c0a:	d1ed      	bne.n	8013be8 <rcl_validate_topic_name+0xdc>
 8013c0c:	7862      	ldrb	r2, [r4, #1]
 8013c0e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013c12:	0752      	lsls	r2, r2, #29
 8013c14:	d5ed      	bpl.n	8013bf2 <rcl_validate_topic_name+0xe6>
 8013c16:	2204      	movs	r2, #4
 8013c18:	6032      	str	r2, [r6, #0]
 8013c1a:	2f00      	cmp	r7, #0
 8013c1c:	d0cb      	beq.n	8013bb6 <rcl_validate_topic_name+0xaa>
 8013c1e:	2000      	movs	r0, #0
 8013c20:	603b      	str	r3, [r7, #0]
 8013c22:	e79e      	b.n	8013b62 <rcl_validate_topic_name+0x56>
 8013c24:	200b      	movs	r0, #11
 8013c26:	4770      	bx	lr
 8013c28:	200b      	movs	r0, #11
 8013c2a:	e79a      	b.n	8013b62 <rcl_validate_topic_name+0x56>
 8013c2c:	2900      	cmp	r1, #0
 8013c2e:	d0d3      	beq.n	8013bd8 <rcl_validate_topic_name+0xcc>
 8013c30:	2306      	movs	r3, #6
 8013c32:	6033      	str	r3, [r6, #0]
 8013c34:	2f00      	cmp	r7, #0
 8013c36:	d1b7      	bne.n	8013ba8 <rcl_validate_topic_name+0x9c>
 8013c38:	e7bd      	b.n	8013bb6 <rcl_validate_topic_name+0xaa>
 8013c3a:	2309      	movs	r3, #9
 8013c3c:	6033      	str	r3, [r6, #0]
 8013c3e:	2f00      	cmp	r7, #0
 8013c40:	d1b2      	bne.n	8013ba8 <rcl_validate_topic_name+0x9c>
 8013c42:	e7b8      	b.n	8013bb6 <rcl_validate_topic_name+0xaa>
 8013c44:	2d00      	cmp	r5, #0
 8013c46:	d0c7      	beq.n	8013bd8 <rcl_validate_topic_name+0xcc>
 8013c48:	2308      	movs	r3, #8
 8013c4a:	6033      	str	r3, [r6, #0]
 8013c4c:	2f00      	cmp	r7, #0
 8013c4e:	d1ab      	bne.n	8013ba8 <rcl_validate_topic_name+0x9c>
 8013c50:	e7b1      	b.n	8013bb6 <rcl_validate_topic_name+0xaa>
 8013c52:	2d00      	cmp	r5, #0
 8013c54:	d1f8      	bne.n	8013c48 <rcl_validate_topic_name+0x13c>
 8013c56:	460b      	mov	r3, r1
 8013c58:	2501      	movs	r5, #1
 8013c5a:	e7bd      	b.n	8013bd8 <rcl_validate_topic_name+0xcc>
 8013c5c:	2500      	movs	r5, #0
 8013c5e:	e7bb      	b.n	8013bd8 <rcl_validate_topic_name+0xcc>
 8013c60:	2300      	movs	r3, #0
 8013c62:	4618      	mov	r0, r3
 8013c64:	6033      	str	r3, [r6, #0]
 8013c66:	e77c      	b.n	8013b62 <rcl_validate_topic_name+0x56>
 8013c68:	2205      	movs	r2, #5
 8013c6a:	6032      	str	r2, [r6, #0]
 8013c6c:	2f00      	cmp	r7, #0
 8013c6e:	d1d6      	bne.n	8013c1e <rcl_validate_topic_name+0x112>
 8013c70:	e7a1      	b.n	8013bb6 <rcl_validate_topic_name+0xaa>
 8013c72:	2d00      	cmp	r5, #0
 8013c74:	bf14      	ite	ne
 8013c76:	2308      	movne	r3, #8
 8013c78:	2303      	moveq	r3, #3
 8013c7a:	6033      	str	r3, [r6, #0]
 8013c7c:	2f00      	cmp	r7, #0
 8013c7e:	d193      	bne.n	8013ba8 <rcl_validate_topic_name+0x9c>
 8013c80:	e799      	b.n	8013bb6 <rcl_validate_topic_name+0xaa>
 8013c82:	2307      	movs	r3, #7
 8013c84:	6033      	str	r3, [r6, #0]
 8013c86:	2f00      	cmp	r7, #0
 8013c88:	d095      	beq.n	8013bb6 <rcl_validate_topic_name+0xaa>
 8013c8a:	2301      	movs	r3, #1
 8013c8c:	e7c7      	b.n	8013c1e <rcl_validate_topic_name+0x112>
 8013c8e:	bf00      	nop
 8013c90:	08016570 	.word	0x08016570

08013c94 <calloc>:
 8013c94:	4b02      	ldr	r3, [pc, #8]	; (8013ca0 <calloc+0xc>)
 8013c96:	460a      	mov	r2, r1
 8013c98:	4601      	mov	r1, r0
 8013c9a:	6818      	ldr	r0, [r3, #0]
 8013c9c:	f000 b802 	b.w	8013ca4 <_calloc_r>
 8013ca0:	20000254 	.word	0x20000254

08013ca4 <_calloc_r>:
 8013ca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013ca6:	fba1 2402 	umull	r2, r4, r1, r2
 8013caa:	b94c      	cbnz	r4, 8013cc0 <_calloc_r+0x1c>
 8013cac:	4611      	mov	r1, r2
 8013cae:	9201      	str	r2, [sp, #4]
 8013cb0:	f000 f886 	bl	8013dc0 <_malloc_r>
 8013cb4:	9a01      	ldr	r2, [sp, #4]
 8013cb6:	4605      	mov	r5, r0
 8013cb8:	b930      	cbnz	r0, 8013cc8 <_calloc_r+0x24>
 8013cba:	4628      	mov	r0, r5
 8013cbc:	b003      	add	sp, #12
 8013cbe:	bd30      	pop	{r4, r5, pc}
 8013cc0:	220c      	movs	r2, #12
 8013cc2:	6002      	str	r2, [r0, #0]
 8013cc4:	2500      	movs	r5, #0
 8013cc6:	e7f8      	b.n	8013cba <_calloc_r+0x16>
 8013cc8:	4621      	mov	r1, r4
 8013cca:	f000 fd73 	bl	80147b4 <memset>
 8013cce:	e7f4      	b.n	8013cba <_calloc_r+0x16>

08013cd0 <getenv>:
 8013cd0:	b507      	push	{r0, r1, r2, lr}
 8013cd2:	4b04      	ldr	r3, [pc, #16]	; (8013ce4 <getenv+0x14>)
 8013cd4:	4601      	mov	r1, r0
 8013cd6:	aa01      	add	r2, sp, #4
 8013cd8:	6818      	ldr	r0, [r3, #0]
 8013cda:	f000 f805 	bl	8013ce8 <_findenv_r>
 8013cde:	b003      	add	sp, #12
 8013ce0:	f85d fb04 	ldr.w	pc, [sp], #4
 8013ce4:	20000254 	.word	0x20000254

08013ce8 <_findenv_r>:
 8013ce8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cec:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8013d5c <_findenv_r+0x74>
 8013cf0:	4607      	mov	r7, r0
 8013cf2:	4689      	mov	r9, r1
 8013cf4:	4616      	mov	r6, r2
 8013cf6:	f000 fea9 	bl	8014a4c <__env_lock>
 8013cfa:	f8da 4000 	ldr.w	r4, [sl]
 8013cfe:	b134      	cbz	r4, 8013d0e <_findenv_r+0x26>
 8013d00:	464b      	mov	r3, r9
 8013d02:	4698      	mov	r8, r3
 8013d04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d08:	b13a      	cbz	r2, 8013d1a <_findenv_r+0x32>
 8013d0a:	2a3d      	cmp	r2, #61	; 0x3d
 8013d0c:	d1f9      	bne.n	8013d02 <_findenv_r+0x1a>
 8013d0e:	4638      	mov	r0, r7
 8013d10:	f000 fea2 	bl	8014a58 <__env_unlock>
 8013d14:	2000      	movs	r0, #0
 8013d16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d1a:	eba8 0809 	sub.w	r8, r8, r9
 8013d1e:	46a3      	mov	fp, r4
 8013d20:	f854 0b04 	ldr.w	r0, [r4], #4
 8013d24:	2800      	cmp	r0, #0
 8013d26:	d0f2      	beq.n	8013d0e <_findenv_r+0x26>
 8013d28:	4642      	mov	r2, r8
 8013d2a:	4649      	mov	r1, r9
 8013d2c:	f000 fd57 	bl	80147de <strncmp>
 8013d30:	2800      	cmp	r0, #0
 8013d32:	d1f4      	bne.n	8013d1e <_findenv_r+0x36>
 8013d34:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013d38:	eb03 0508 	add.w	r5, r3, r8
 8013d3c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8013d40:	2b3d      	cmp	r3, #61	; 0x3d
 8013d42:	d1ec      	bne.n	8013d1e <_findenv_r+0x36>
 8013d44:	f8da 3000 	ldr.w	r3, [sl]
 8013d48:	ebab 0303 	sub.w	r3, fp, r3
 8013d4c:	109b      	asrs	r3, r3, #2
 8013d4e:	4638      	mov	r0, r7
 8013d50:	6033      	str	r3, [r6, #0]
 8013d52:	f000 fe81 	bl	8014a58 <__env_unlock>
 8013d56:	1c68      	adds	r0, r5, #1
 8013d58:	e7dd      	b.n	8013d16 <_findenv_r+0x2e>
 8013d5a:	bf00      	nop
 8013d5c:	20000000 	.word	0x20000000

08013d60 <malloc>:
 8013d60:	4b02      	ldr	r3, [pc, #8]	; (8013d6c <malloc+0xc>)
 8013d62:	4601      	mov	r1, r0
 8013d64:	6818      	ldr	r0, [r3, #0]
 8013d66:	f000 b82b 	b.w	8013dc0 <_malloc_r>
 8013d6a:	bf00      	nop
 8013d6c:	20000254 	.word	0x20000254

08013d70 <free>:
 8013d70:	4b02      	ldr	r3, [pc, #8]	; (8013d7c <free+0xc>)
 8013d72:	4601      	mov	r1, r0
 8013d74:	6818      	ldr	r0, [r3, #0]
 8013d76:	f000 be75 	b.w	8014a64 <_free_r>
 8013d7a:	bf00      	nop
 8013d7c:	20000254 	.word	0x20000254

08013d80 <sbrk_aligned>:
 8013d80:	b570      	push	{r4, r5, r6, lr}
 8013d82:	4e0e      	ldr	r6, [pc, #56]	; (8013dbc <sbrk_aligned+0x3c>)
 8013d84:	460c      	mov	r4, r1
 8013d86:	6831      	ldr	r1, [r6, #0]
 8013d88:	4605      	mov	r5, r0
 8013d8a:	b911      	cbnz	r1, 8013d92 <sbrk_aligned+0x12>
 8013d8c:	f000 fdda 	bl	8014944 <_sbrk_r>
 8013d90:	6030      	str	r0, [r6, #0]
 8013d92:	4621      	mov	r1, r4
 8013d94:	4628      	mov	r0, r5
 8013d96:	f000 fdd5 	bl	8014944 <_sbrk_r>
 8013d9a:	1c43      	adds	r3, r0, #1
 8013d9c:	d00a      	beq.n	8013db4 <sbrk_aligned+0x34>
 8013d9e:	1cc4      	adds	r4, r0, #3
 8013da0:	f024 0403 	bic.w	r4, r4, #3
 8013da4:	42a0      	cmp	r0, r4
 8013da6:	d007      	beq.n	8013db8 <sbrk_aligned+0x38>
 8013da8:	1a21      	subs	r1, r4, r0
 8013daa:	4628      	mov	r0, r5
 8013dac:	f000 fdca 	bl	8014944 <_sbrk_r>
 8013db0:	3001      	adds	r0, #1
 8013db2:	d101      	bne.n	8013db8 <sbrk_aligned+0x38>
 8013db4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013db8:	4620      	mov	r0, r4
 8013dba:	bd70      	pop	{r4, r5, r6, pc}
 8013dbc:	20010e68 	.word	0x20010e68

08013dc0 <_malloc_r>:
 8013dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013dc4:	1ccd      	adds	r5, r1, #3
 8013dc6:	f025 0503 	bic.w	r5, r5, #3
 8013dca:	3508      	adds	r5, #8
 8013dcc:	2d0c      	cmp	r5, #12
 8013dce:	bf38      	it	cc
 8013dd0:	250c      	movcc	r5, #12
 8013dd2:	2d00      	cmp	r5, #0
 8013dd4:	4607      	mov	r7, r0
 8013dd6:	db01      	blt.n	8013ddc <_malloc_r+0x1c>
 8013dd8:	42a9      	cmp	r1, r5
 8013dda:	d905      	bls.n	8013de8 <_malloc_r+0x28>
 8013ddc:	230c      	movs	r3, #12
 8013dde:	603b      	str	r3, [r7, #0]
 8013de0:	2600      	movs	r6, #0
 8013de2:	4630      	mov	r0, r6
 8013de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013de8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013ebc <_malloc_r+0xfc>
 8013dec:	f000 f868 	bl	8013ec0 <__malloc_lock>
 8013df0:	f8d8 3000 	ldr.w	r3, [r8]
 8013df4:	461c      	mov	r4, r3
 8013df6:	bb5c      	cbnz	r4, 8013e50 <_malloc_r+0x90>
 8013df8:	4629      	mov	r1, r5
 8013dfa:	4638      	mov	r0, r7
 8013dfc:	f7ff ffc0 	bl	8013d80 <sbrk_aligned>
 8013e00:	1c43      	adds	r3, r0, #1
 8013e02:	4604      	mov	r4, r0
 8013e04:	d155      	bne.n	8013eb2 <_malloc_r+0xf2>
 8013e06:	f8d8 4000 	ldr.w	r4, [r8]
 8013e0a:	4626      	mov	r6, r4
 8013e0c:	2e00      	cmp	r6, #0
 8013e0e:	d145      	bne.n	8013e9c <_malloc_r+0xdc>
 8013e10:	2c00      	cmp	r4, #0
 8013e12:	d048      	beq.n	8013ea6 <_malloc_r+0xe6>
 8013e14:	6823      	ldr	r3, [r4, #0]
 8013e16:	4631      	mov	r1, r6
 8013e18:	4638      	mov	r0, r7
 8013e1a:	eb04 0903 	add.w	r9, r4, r3
 8013e1e:	f000 fd91 	bl	8014944 <_sbrk_r>
 8013e22:	4581      	cmp	r9, r0
 8013e24:	d13f      	bne.n	8013ea6 <_malloc_r+0xe6>
 8013e26:	6821      	ldr	r1, [r4, #0]
 8013e28:	1a6d      	subs	r5, r5, r1
 8013e2a:	4629      	mov	r1, r5
 8013e2c:	4638      	mov	r0, r7
 8013e2e:	f7ff ffa7 	bl	8013d80 <sbrk_aligned>
 8013e32:	3001      	adds	r0, #1
 8013e34:	d037      	beq.n	8013ea6 <_malloc_r+0xe6>
 8013e36:	6823      	ldr	r3, [r4, #0]
 8013e38:	442b      	add	r3, r5
 8013e3a:	6023      	str	r3, [r4, #0]
 8013e3c:	f8d8 3000 	ldr.w	r3, [r8]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d038      	beq.n	8013eb6 <_malloc_r+0xf6>
 8013e44:	685a      	ldr	r2, [r3, #4]
 8013e46:	42a2      	cmp	r2, r4
 8013e48:	d12b      	bne.n	8013ea2 <_malloc_r+0xe2>
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	605a      	str	r2, [r3, #4]
 8013e4e:	e00f      	b.n	8013e70 <_malloc_r+0xb0>
 8013e50:	6822      	ldr	r2, [r4, #0]
 8013e52:	1b52      	subs	r2, r2, r5
 8013e54:	d41f      	bmi.n	8013e96 <_malloc_r+0xd6>
 8013e56:	2a0b      	cmp	r2, #11
 8013e58:	d917      	bls.n	8013e8a <_malloc_r+0xca>
 8013e5a:	1961      	adds	r1, r4, r5
 8013e5c:	42a3      	cmp	r3, r4
 8013e5e:	6025      	str	r5, [r4, #0]
 8013e60:	bf18      	it	ne
 8013e62:	6059      	strne	r1, [r3, #4]
 8013e64:	6863      	ldr	r3, [r4, #4]
 8013e66:	bf08      	it	eq
 8013e68:	f8c8 1000 	streq.w	r1, [r8]
 8013e6c:	5162      	str	r2, [r4, r5]
 8013e6e:	604b      	str	r3, [r1, #4]
 8013e70:	4638      	mov	r0, r7
 8013e72:	f104 060b 	add.w	r6, r4, #11
 8013e76:	f000 f829 	bl	8013ecc <__malloc_unlock>
 8013e7a:	f026 0607 	bic.w	r6, r6, #7
 8013e7e:	1d23      	adds	r3, r4, #4
 8013e80:	1af2      	subs	r2, r6, r3
 8013e82:	d0ae      	beq.n	8013de2 <_malloc_r+0x22>
 8013e84:	1b9b      	subs	r3, r3, r6
 8013e86:	50a3      	str	r3, [r4, r2]
 8013e88:	e7ab      	b.n	8013de2 <_malloc_r+0x22>
 8013e8a:	42a3      	cmp	r3, r4
 8013e8c:	6862      	ldr	r2, [r4, #4]
 8013e8e:	d1dd      	bne.n	8013e4c <_malloc_r+0x8c>
 8013e90:	f8c8 2000 	str.w	r2, [r8]
 8013e94:	e7ec      	b.n	8013e70 <_malloc_r+0xb0>
 8013e96:	4623      	mov	r3, r4
 8013e98:	6864      	ldr	r4, [r4, #4]
 8013e9a:	e7ac      	b.n	8013df6 <_malloc_r+0x36>
 8013e9c:	4634      	mov	r4, r6
 8013e9e:	6876      	ldr	r6, [r6, #4]
 8013ea0:	e7b4      	b.n	8013e0c <_malloc_r+0x4c>
 8013ea2:	4613      	mov	r3, r2
 8013ea4:	e7cc      	b.n	8013e40 <_malloc_r+0x80>
 8013ea6:	230c      	movs	r3, #12
 8013ea8:	603b      	str	r3, [r7, #0]
 8013eaa:	4638      	mov	r0, r7
 8013eac:	f000 f80e 	bl	8013ecc <__malloc_unlock>
 8013eb0:	e797      	b.n	8013de2 <_malloc_r+0x22>
 8013eb2:	6025      	str	r5, [r4, #0]
 8013eb4:	e7dc      	b.n	8013e70 <_malloc_r+0xb0>
 8013eb6:	605b      	str	r3, [r3, #4]
 8013eb8:	deff      	udf	#255	; 0xff
 8013eba:	bf00      	nop
 8013ebc:	20010e64 	.word	0x20010e64

08013ec0 <__malloc_lock>:
 8013ec0:	4801      	ldr	r0, [pc, #4]	; (8013ec8 <__malloc_lock+0x8>)
 8013ec2:	f000 bd8c 	b.w	80149de <__retarget_lock_acquire_recursive>
 8013ec6:	bf00      	nop
 8013ec8:	20010fad 	.word	0x20010fad

08013ecc <__malloc_unlock>:
 8013ecc:	4801      	ldr	r0, [pc, #4]	; (8013ed4 <__malloc_unlock+0x8>)
 8013ece:	f000 bd87 	b.w	80149e0 <__retarget_lock_release_recursive>
 8013ed2:	bf00      	nop
 8013ed4:	20010fad 	.word	0x20010fad

08013ed8 <srand>:
 8013ed8:	b538      	push	{r3, r4, r5, lr}
 8013eda:	4b10      	ldr	r3, [pc, #64]	; (8013f1c <srand+0x44>)
 8013edc:	681d      	ldr	r5, [r3, #0]
 8013ede:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8013ee0:	4604      	mov	r4, r0
 8013ee2:	b9b3      	cbnz	r3, 8013f12 <srand+0x3a>
 8013ee4:	2018      	movs	r0, #24
 8013ee6:	f7ff ff3b 	bl	8013d60 <malloc>
 8013eea:	4602      	mov	r2, r0
 8013eec:	6328      	str	r0, [r5, #48]	; 0x30
 8013eee:	b920      	cbnz	r0, 8013efa <srand+0x22>
 8013ef0:	4b0b      	ldr	r3, [pc, #44]	; (8013f20 <srand+0x48>)
 8013ef2:	480c      	ldr	r0, [pc, #48]	; (8013f24 <srand+0x4c>)
 8013ef4:	2146      	movs	r1, #70	; 0x46
 8013ef6:	f000 fd8b 	bl	8014a10 <__assert_func>
 8013efa:	490b      	ldr	r1, [pc, #44]	; (8013f28 <srand+0x50>)
 8013efc:	4b0b      	ldr	r3, [pc, #44]	; (8013f2c <srand+0x54>)
 8013efe:	e9c0 1300 	strd	r1, r3, [r0]
 8013f02:	4b0b      	ldr	r3, [pc, #44]	; (8013f30 <srand+0x58>)
 8013f04:	6083      	str	r3, [r0, #8]
 8013f06:	230b      	movs	r3, #11
 8013f08:	8183      	strh	r3, [r0, #12]
 8013f0a:	2100      	movs	r1, #0
 8013f0c:	2001      	movs	r0, #1
 8013f0e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013f12:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8013f14:	2200      	movs	r2, #0
 8013f16:	611c      	str	r4, [r3, #16]
 8013f18:	615a      	str	r2, [r3, #20]
 8013f1a:	bd38      	pop	{r3, r4, r5, pc}
 8013f1c:	20000254 	.word	0x20000254
 8013f20:	08016500 	.word	0x08016500
 8013f24:	08016517 	.word	0x08016517
 8013f28:	abcd330e 	.word	0xabcd330e
 8013f2c:	e66d1234 	.word	0xe66d1234
 8013f30:	0005deec 	.word	0x0005deec

08013f34 <rand>:
 8013f34:	4b16      	ldr	r3, [pc, #88]	; (8013f90 <rand+0x5c>)
 8013f36:	b510      	push	{r4, lr}
 8013f38:	681c      	ldr	r4, [r3, #0]
 8013f3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013f3c:	b9b3      	cbnz	r3, 8013f6c <rand+0x38>
 8013f3e:	2018      	movs	r0, #24
 8013f40:	f7ff ff0e 	bl	8013d60 <malloc>
 8013f44:	4602      	mov	r2, r0
 8013f46:	6320      	str	r0, [r4, #48]	; 0x30
 8013f48:	b920      	cbnz	r0, 8013f54 <rand+0x20>
 8013f4a:	4b12      	ldr	r3, [pc, #72]	; (8013f94 <rand+0x60>)
 8013f4c:	4812      	ldr	r0, [pc, #72]	; (8013f98 <rand+0x64>)
 8013f4e:	2152      	movs	r1, #82	; 0x52
 8013f50:	f000 fd5e 	bl	8014a10 <__assert_func>
 8013f54:	4911      	ldr	r1, [pc, #68]	; (8013f9c <rand+0x68>)
 8013f56:	4b12      	ldr	r3, [pc, #72]	; (8013fa0 <rand+0x6c>)
 8013f58:	e9c0 1300 	strd	r1, r3, [r0]
 8013f5c:	4b11      	ldr	r3, [pc, #68]	; (8013fa4 <rand+0x70>)
 8013f5e:	6083      	str	r3, [r0, #8]
 8013f60:	230b      	movs	r3, #11
 8013f62:	8183      	strh	r3, [r0, #12]
 8013f64:	2100      	movs	r1, #0
 8013f66:	2001      	movs	r0, #1
 8013f68:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013f6c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013f6e:	480e      	ldr	r0, [pc, #56]	; (8013fa8 <rand+0x74>)
 8013f70:	690b      	ldr	r3, [r1, #16]
 8013f72:	694c      	ldr	r4, [r1, #20]
 8013f74:	4a0d      	ldr	r2, [pc, #52]	; (8013fac <rand+0x78>)
 8013f76:	4358      	muls	r0, r3
 8013f78:	fb02 0004 	mla	r0, r2, r4, r0
 8013f7c:	fba3 3202 	umull	r3, r2, r3, r2
 8013f80:	3301      	adds	r3, #1
 8013f82:	eb40 0002 	adc.w	r0, r0, r2
 8013f86:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8013f8a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013f8e:	bd10      	pop	{r4, pc}
 8013f90:	20000254 	.word	0x20000254
 8013f94:	08016500 	.word	0x08016500
 8013f98:	08016517 	.word	0x08016517
 8013f9c:	abcd330e 	.word	0xabcd330e
 8013fa0:	e66d1234 	.word	0xe66d1234
 8013fa4:	0005deec 	.word	0x0005deec
 8013fa8:	5851f42d 	.word	0x5851f42d
 8013fac:	4c957f2d 	.word	0x4c957f2d

08013fb0 <realloc>:
 8013fb0:	4b02      	ldr	r3, [pc, #8]	; (8013fbc <realloc+0xc>)
 8013fb2:	460a      	mov	r2, r1
 8013fb4:	4601      	mov	r1, r0
 8013fb6:	6818      	ldr	r0, [r3, #0]
 8013fb8:	f000 b802 	b.w	8013fc0 <_realloc_r>
 8013fbc:	20000254 	.word	0x20000254

08013fc0 <_realloc_r>:
 8013fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fc4:	4680      	mov	r8, r0
 8013fc6:	4614      	mov	r4, r2
 8013fc8:	460e      	mov	r6, r1
 8013fca:	b921      	cbnz	r1, 8013fd6 <_realloc_r+0x16>
 8013fcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013fd0:	4611      	mov	r1, r2
 8013fd2:	f7ff bef5 	b.w	8013dc0 <_malloc_r>
 8013fd6:	b92a      	cbnz	r2, 8013fe4 <_realloc_r+0x24>
 8013fd8:	f000 fd44 	bl	8014a64 <_free_r>
 8013fdc:	4625      	mov	r5, r4
 8013fde:	4628      	mov	r0, r5
 8013fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fe4:	f000 fd8a 	bl	8014afc <_malloc_usable_size_r>
 8013fe8:	4284      	cmp	r4, r0
 8013fea:	4607      	mov	r7, r0
 8013fec:	d802      	bhi.n	8013ff4 <_realloc_r+0x34>
 8013fee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013ff2:	d812      	bhi.n	801401a <_realloc_r+0x5a>
 8013ff4:	4621      	mov	r1, r4
 8013ff6:	4640      	mov	r0, r8
 8013ff8:	f7ff fee2 	bl	8013dc0 <_malloc_r>
 8013ffc:	4605      	mov	r5, r0
 8013ffe:	2800      	cmp	r0, #0
 8014000:	d0ed      	beq.n	8013fde <_realloc_r+0x1e>
 8014002:	42bc      	cmp	r4, r7
 8014004:	4622      	mov	r2, r4
 8014006:	4631      	mov	r1, r6
 8014008:	bf28      	it	cs
 801400a:	463a      	movcs	r2, r7
 801400c:	f000 fcf1 	bl	80149f2 <memcpy>
 8014010:	4631      	mov	r1, r6
 8014012:	4640      	mov	r0, r8
 8014014:	f000 fd26 	bl	8014a64 <_free_r>
 8014018:	e7e1      	b.n	8013fde <_realloc_r+0x1e>
 801401a:	4635      	mov	r5, r6
 801401c:	e7df      	b.n	8013fde <_realloc_r+0x1e>
	...

08014020 <_strtoul_l.constprop.0>:
 8014020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014024:	4f36      	ldr	r7, [pc, #216]	; (8014100 <_strtoul_l.constprop.0+0xe0>)
 8014026:	4686      	mov	lr, r0
 8014028:	460d      	mov	r5, r1
 801402a:	4628      	mov	r0, r5
 801402c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014030:	5d3e      	ldrb	r6, [r7, r4]
 8014032:	f016 0608 	ands.w	r6, r6, #8
 8014036:	d1f8      	bne.n	801402a <_strtoul_l.constprop.0+0xa>
 8014038:	2c2d      	cmp	r4, #45	; 0x2d
 801403a:	d130      	bne.n	801409e <_strtoul_l.constprop.0+0x7e>
 801403c:	782c      	ldrb	r4, [r5, #0]
 801403e:	2601      	movs	r6, #1
 8014040:	1c85      	adds	r5, r0, #2
 8014042:	2b00      	cmp	r3, #0
 8014044:	d057      	beq.n	80140f6 <_strtoul_l.constprop.0+0xd6>
 8014046:	2b10      	cmp	r3, #16
 8014048:	d109      	bne.n	801405e <_strtoul_l.constprop.0+0x3e>
 801404a:	2c30      	cmp	r4, #48	; 0x30
 801404c:	d107      	bne.n	801405e <_strtoul_l.constprop.0+0x3e>
 801404e:	7828      	ldrb	r0, [r5, #0]
 8014050:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014054:	2858      	cmp	r0, #88	; 0x58
 8014056:	d149      	bne.n	80140ec <_strtoul_l.constprop.0+0xcc>
 8014058:	786c      	ldrb	r4, [r5, #1]
 801405a:	2310      	movs	r3, #16
 801405c:	3502      	adds	r5, #2
 801405e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8014062:	2700      	movs	r7, #0
 8014064:	fbb8 f8f3 	udiv	r8, r8, r3
 8014068:	fb03 f908 	mul.w	r9, r3, r8
 801406c:	ea6f 0909 	mvn.w	r9, r9
 8014070:	4638      	mov	r0, r7
 8014072:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014076:	f1bc 0f09 	cmp.w	ip, #9
 801407a:	d815      	bhi.n	80140a8 <_strtoul_l.constprop.0+0x88>
 801407c:	4664      	mov	r4, ip
 801407e:	42a3      	cmp	r3, r4
 8014080:	dd23      	ble.n	80140ca <_strtoul_l.constprop.0+0xaa>
 8014082:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8014086:	d007      	beq.n	8014098 <_strtoul_l.constprop.0+0x78>
 8014088:	4580      	cmp	r8, r0
 801408a:	d31b      	bcc.n	80140c4 <_strtoul_l.constprop.0+0xa4>
 801408c:	d101      	bne.n	8014092 <_strtoul_l.constprop.0+0x72>
 801408e:	45a1      	cmp	r9, r4
 8014090:	db18      	blt.n	80140c4 <_strtoul_l.constprop.0+0xa4>
 8014092:	fb00 4003 	mla	r0, r0, r3, r4
 8014096:	2701      	movs	r7, #1
 8014098:	f815 4b01 	ldrb.w	r4, [r5], #1
 801409c:	e7e9      	b.n	8014072 <_strtoul_l.constprop.0+0x52>
 801409e:	2c2b      	cmp	r4, #43	; 0x2b
 80140a0:	bf04      	itt	eq
 80140a2:	782c      	ldrbeq	r4, [r5, #0]
 80140a4:	1c85      	addeq	r5, r0, #2
 80140a6:	e7cc      	b.n	8014042 <_strtoul_l.constprop.0+0x22>
 80140a8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80140ac:	f1bc 0f19 	cmp.w	ip, #25
 80140b0:	d801      	bhi.n	80140b6 <_strtoul_l.constprop.0+0x96>
 80140b2:	3c37      	subs	r4, #55	; 0x37
 80140b4:	e7e3      	b.n	801407e <_strtoul_l.constprop.0+0x5e>
 80140b6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80140ba:	f1bc 0f19 	cmp.w	ip, #25
 80140be:	d804      	bhi.n	80140ca <_strtoul_l.constprop.0+0xaa>
 80140c0:	3c57      	subs	r4, #87	; 0x57
 80140c2:	e7dc      	b.n	801407e <_strtoul_l.constprop.0+0x5e>
 80140c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80140c8:	e7e6      	b.n	8014098 <_strtoul_l.constprop.0+0x78>
 80140ca:	1c7b      	adds	r3, r7, #1
 80140cc:	d106      	bne.n	80140dc <_strtoul_l.constprop.0+0xbc>
 80140ce:	2322      	movs	r3, #34	; 0x22
 80140d0:	f8ce 3000 	str.w	r3, [lr]
 80140d4:	4638      	mov	r0, r7
 80140d6:	b932      	cbnz	r2, 80140e6 <_strtoul_l.constprop.0+0xc6>
 80140d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80140dc:	b106      	cbz	r6, 80140e0 <_strtoul_l.constprop.0+0xc0>
 80140de:	4240      	negs	r0, r0
 80140e0:	2a00      	cmp	r2, #0
 80140e2:	d0f9      	beq.n	80140d8 <_strtoul_l.constprop.0+0xb8>
 80140e4:	b107      	cbz	r7, 80140e8 <_strtoul_l.constprop.0+0xc8>
 80140e6:	1e69      	subs	r1, r5, #1
 80140e8:	6011      	str	r1, [r2, #0]
 80140ea:	e7f5      	b.n	80140d8 <_strtoul_l.constprop.0+0xb8>
 80140ec:	2430      	movs	r4, #48	; 0x30
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d1b5      	bne.n	801405e <_strtoul_l.constprop.0+0x3e>
 80140f2:	2308      	movs	r3, #8
 80140f4:	e7b3      	b.n	801405e <_strtoul_l.constprop.0+0x3e>
 80140f6:	2c30      	cmp	r4, #48	; 0x30
 80140f8:	d0a9      	beq.n	801404e <_strtoul_l.constprop.0+0x2e>
 80140fa:	230a      	movs	r3, #10
 80140fc:	e7af      	b.n	801405e <_strtoul_l.constprop.0+0x3e>
 80140fe:	bf00      	nop
 8014100:	08016570 	.word	0x08016570

08014104 <strtoul>:
 8014104:	4613      	mov	r3, r2
 8014106:	460a      	mov	r2, r1
 8014108:	4601      	mov	r1, r0
 801410a:	4802      	ldr	r0, [pc, #8]	; (8014114 <strtoul+0x10>)
 801410c:	6800      	ldr	r0, [r0, #0]
 801410e:	f7ff bf87 	b.w	8014020 <_strtoul_l.constprop.0>
 8014112:	bf00      	nop
 8014114:	20000254 	.word	0x20000254

08014118 <std>:
 8014118:	2300      	movs	r3, #0
 801411a:	b510      	push	{r4, lr}
 801411c:	4604      	mov	r4, r0
 801411e:	e9c0 3300 	strd	r3, r3, [r0]
 8014122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014126:	6083      	str	r3, [r0, #8]
 8014128:	8181      	strh	r1, [r0, #12]
 801412a:	6643      	str	r3, [r0, #100]	; 0x64
 801412c:	81c2      	strh	r2, [r0, #14]
 801412e:	6183      	str	r3, [r0, #24]
 8014130:	4619      	mov	r1, r3
 8014132:	2208      	movs	r2, #8
 8014134:	305c      	adds	r0, #92	; 0x5c
 8014136:	f000 fb3d 	bl	80147b4 <memset>
 801413a:	4b0d      	ldr	r3, [pc, #52]	; (8014170 <std+0x58>)
 801413c:	6263      	str	r3, [r4, #36]	; 0x24
 801413e:	4b0d      	ldr	r3, [pc, #52]	; (8014174 <std+0x5c>)
 8014140:	62a3      	str	r3, [r4, #40]	; 0x28
 8014142:	4b0d      	ldr	r3, [pc, #52]	; (8014178 <std+0x60>)
 8014144:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014146:	4b0d      	ldr	r3, [pc, #52]	; (801417c <std+0x64>)
 8014148:	6323      	str	r3, [r4, #48]	; 0x30
 801414a:	4b0d      	ldr	r3, [pc, #52]	; (8014180 <std+0x68>)
 801414c:	6224      	str	r4, [r4, #32]
 801414e:	429c      	cmp	r4, r3
 8014150:	d006      	beq.n	8014160 <std+0x48>
 8014152:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8014156:	4294      	cmp	r4, r2
 8014158:	d002      	beq.n	8014160 <std+0x48>
 801415a:	33d0      	adds	r3, #208	; 0xd0
 801415c:	429c      	cmp	r4, r3
 801415e:	d105      	bne.n	801416c <std+0x54>
 8014160:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014168:	f000 bc38 	b.w	80149dc <__retarget_lock_init_recursive>
 801416c:	bd10      	pop	{r4, pc}
 801416e:	bf00      	nop
 8014170:	0801453d 	.word	0x0801453d
 8014174:	0801455f 	.word	0x0801455f
 8014178:	08014597 	.word	0x08014597
 801417c:	080145bb 	.word	0x080145bb
 8014180:	20010e6c 	.word	0x20010e6c

08014184 <stdio_exit_handler>:
 8014184:	4a02      	ldr	r2, [pc, #8]	; (8014190 <stdio_exit_handler+0xc>)
 8014186:	4903      	ldr	r1, [pc, #12]	; (8014194 <stdio_exit_handler+0x10>)
 8014188:	4803      	ldr	r0, [pc, #12]	; (8014198 <stdio_exit_handler+0x14>)
 801418a:	f000 b869 	b.w	8014260 <_fwalk_sglue>
 801418e:	bf00      	nop
 8014190:	200001fc 	.word	0x200001fc
 8014194:	08015471 	.word	0x08015471
 8014198:	20000208 	.word	0x20000208

0801419c <cleanup_stdio>:
 801419c:	6841      	ldr	r1, [r0, #4]
 801419e:	4b0c      	ldr	r3, [pc, #48]	; (80141d0 <cleanup_stdio+0x34>)
 80141a0:	4299      	cmp	r1, r3
 80141a2:	b510      	push	{r4, lr}
 80141a4:	4604      	mov	r4, r0
 80141a6:	d001      	beq.n	80141ac <cleanup_stdio+0x10>
 80141a8:	f001 f962 	bl	8015470 <_fflush_r>
 80141ac:	68a1      	ldr	r1, [r4, #8]
 80141ae:	4b09      	ldr	r3, [pc, #36]	; (80141d4 <cleanup_stdio+0x38>)
 80141b0:	4299      	cmp	r1, r3
 80141b2:	d002      	beq.n	80141ba <cleanup_stdio+0x1e>
 80141b4:	4620      	mov	r0, r4
 80141b6:	f001 f95b 	bl	8015470 <_fflush_r>
 80141ba:	68e1      	ldr	r1, [r4, #12]
 80141bc:	4b06      	ldr	r3, [pc, #24]	; (80141d8 <cleanup_stdio+0x3c>)
 80141be:	4299      	cmp	r1, r3
 80141c0:	d004      	beq.n	80141cc <cleanup_stdio+0x30>
 80141c2:	4620      	mov	r0, r4
 80141c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141c8:	f001 b952 	b.w	8015470 <_fflush_r>
 80141cc:	bd10      	pop	{r4, pc}
 80141ce:	bf00      	nop
 80141d0:	20010e6c 	.word	0x20010e6c
 80141d4:	20010ed4 	.word	0x20010ed4
 80141d8:	20010f3c 	.word	0x20010f3c

080141dc <global_stdio_init.part.0>:
 80141dc:	b510      	push	{r4, lr}
 80141de:	4b0b      	ldr	r3, [pc, #44]	; (801420c <global_stdio_init.part.0+0x30>)
 80141e0:	4c0b      	ldr	r4, [pc, #44]	; (8014210 <global_stdio_init.part.0+0x34>)
 80141e2:	4a0c      	ldr	r2, [pc, #48]	; (8014214 <global_stdio_init.part.0+0x38>)
 80141e4:	601a      	str	r2, [r3, #0]
 80141e6:	4620      	mov	r0, r4
 80141e8:	2200      	movs	r2, #0
 80141ea:	2104      	movs	r1, #4
 80141ec:	f7ff ff94 	bl	8014118 <std>
 80141f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80141f4:	2201      	movs	r2, #1
 80141f6:	2109      	movs	r1, #9
 80141f8:	f7ff ff8e 	bl	8014118 <std>
 80141fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014200:	2202      	movs	r2, #2
 8014202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014206:	2112      	movs	r1, #18
 8014208:	f7ff bf86 	b.w	8014118 <std>
 801420c:	20010fa4 	.word	0x20010fa4
 8014210:	20010e6c 	.word	0x20010e6c
 8014214:	08014185 	.word	0x08014185

08014218 <__sfp_lock_acquire>:
 8014218:	4801      	ldr	r0, [pc, #4]	; (8014220 <__sfp_lock_acquire+0x8>)
 801421a:	f000 bbe0 	b.w	80149de <__retarget_lock_acquire_recursive>
 801421e:	bf00      	nop
 8014220:	20010fae 	.word	0x20010fae

08014224 <__sfp_lock_release>:
 8014224:	4801      	ldr	r0, [pc, #4]	; (801422c <__sfp_lock_release+0x8>)
 8014226:	f000 bbdb 	b.w	80149e0 <__retarget_lock_release_recursive>
 801422a:	bf00      	nop
 801422c:	20010fae 	.word	0x20010fae

08014230 <__sinit>:
 8014230:	b510      	push	{r4, lr}
 8014232:	4604      	mov	r4, r0
 8014234:	f7ff fff0 	bl	8014218 <__sfp_lock_acquire>
 8014238:	6a23      	ldr	r3, [r4, #32]
 801423a:	b11b      	cbz	r3, 8014244 <__sinit+0x14>
 801423c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014240:	f7ff bff0 	b.w	8014224 <__sfp_lock_release>
 8014244:	4b04      	ldr	r3, [pc, #16]	; (8014258 <__sinit+0x28>)
 8014246:	6223      	str	r3, [r4, #32]
 8014248:	4b04      	ldr	r3, [pc, #16]	; (801425c <__sinit+0x2c>)
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d1f5      	bne.n	801423c <__sinit+0xc>
 8014250:	f7ff ffc4 	bl	80141dc <global_stdio_init.part.0>
 8014254:	e7f2      	b.n	801423c <__sinit+0xc>
 8014256:	bf00      	nop
 8014258:	0801419d 	.word	0x0801419d
 801425c:	20010fa4 	.word	0x20010fa4

08014260 <_fwalk_sglue>:
 8014260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014264:	4607      	mov	r7, r0
 8014266:	4688      	mov	r8, r1
 8014268:	4614      	mov	r4, r2
 801426a:	2600      	movs	r6, #0
 801426c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014270:	f1b9 0901 	subs.w	r9, r9, #1
 8014274:	d505      	bpl.n	8014282 <_fwalk_sglue+0x22>
 8014276:	6824      	ldr	r4, [r4, #0]
 8014278:	2c00      	cmp	r4, #0
 801427a:	d1f7      	bne.n	801426c <_fwalk_sglue+0xc>
 801427c:	4630      	mov	r0, r6
 801427e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014282:	89ab      	ldrh	r3, [r5, #12]
 8014284:	2b01      	cmp	r3, #1
 8014286:	d907      	bls.n	8014298 <_fwalk_sglue+0x38>
 8014288:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801428c:	3301      	adds	r3, #1
 801428e:	d003      	beq.n	8014298 <_fwalk_sglue+0x38>
 8014290:	4629      	mov	r1, r5
 8014292:	4638      	mov	r0, r7
 8014294:	47c0      	blx	r8
 8014296:	4306      	orrs	r6, r0
 8014298:	3568      	adds	r5, #104	; 0x68
 801429a:	e7e9      	b.n	8014270 <_fwalk_sglue+0x10>

0801429c <iprintf>:
 801429c:	b40f      	push	{r0, r1, r2, r3}
 801429e:	b507      	push	{r0, r1, r2, lr}
 80142a0:	4906      	ldr	r1, [pc, #24]	; (80142bc <iprintf+0x20>)
 80142a2:	ab04      	add	r3, sp, #16
 80142a4:	6808      	ldr	r0, [r1, #0]
 80142a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80142aa:	6881      	ldr	r1, [r0, #8]
 80142ac:	9301      	str	r3, [sp, #4]
 80142ae:	f000 fdaf 	bl	8014e10 <_vfiprintf_r>
 80142b2:	b003      	add	sp, #12
 80142b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80142b8:	b004      	add	sp, #16
 80142ba:	4770      	bx	lr
 80142bc:	20000254 	.word	0x20000254

080142c0 <_puts_r>:
 80142c0:	6a03      	ldr	r3, [r0, #32]
 80142c2:	b570      	push	{r4, r5, r6, lr}
 80142c4:	6884      	ldr	r4, [r0, #8]
 80142c6:	4605      	mov	r5, r0
 80142c8:	460e      	mov	r6, r1
 80142ca:	b90b      	cbnz	r3, 80142d0 <_puts_r+0x10>
 80142cc:	f7ff ffb0 	bl	8014230 <__sinit>
 80142d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80142d2:	07db      	lsls	r3, r3, #31
 80142d4:	d405      	bmi.n	80142e2 <_puts_r+0x22>
 80142d6:	89a3      	ldrh	r3, [r4, #12]
 80142d8:	0598      	lsls	r0, r3, #22
 80142da:	d402      	bmi.n	80142e2 <_puts_r+0x22>
 80142dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80142de:	f000 fb7e 	bl	80149de <__retarget_lock_acquire_recursive>
 80142e2:	89a3      	ldrh	r3, [r4, #12]
 80142e4:	0719      	lsls	r1, r3, #28
 80142e6:	d513      	bpl.n	8014310 <_puts_r+0x50>
 80142e8:	6923      	ldr	r3, [r4, #16]
 80142ea:	b18b      	cbz	r3, 8014310 <_puts_r+0x50>
 80142ec:	3e01      	subs	r6, #1
 80142ee:	68a3      	ldr	r3, [r4, #8]
 80142f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80142f4:	3b01      	subs	r3, #1
 80142f6:	60a3      	str	r3, [r4, #8]
 80142f8:	b9e9      	cbnz	r1, 8014336 <_puts_r+0x76>
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	da2e      	bge.n	801435c <_puts_r+0x9c>
 80142fe:	4622      	mov	r2, r4
 8014300:	210a      	movs	r1, #10
 8014302:	4628      	mov	r0, r5
 8014304:	f000 f996 	bl	8014634 <__swbuf_r>
 8014308:	3001      	adds	r0, #1
 801430a:	d007      	beq.n	801431c <_puts_r+0x5c>
 801430c:	250a      	movs	r5, #10
 801430e:	e007      	b.n	8014320 <_puts_r+0x60>
 8014310:	4621      	mov	r1, r4
 8014312:	4628      	mov	r0, r5
 8014314:	f000 f9cc 	bl	80146b0 <__swsetup_r>
 8014318:	2800      	cmp	r0, #0
 801431a:	d0e7      	beq.n	80142ec <_puts_r+0x2c>
 801431c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014320:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014322:	07da      	lsls	r2, r3, #31
 8014324:	d405      	bmi.n	8014332 <_puts_r+0x72>
 8014326:	89a3      	ldrh	r3, [r4, #12]
 8014328:	059b      	lsls	r3, r3, #22
 801432a:	d402      	bmi.n	8014332 <_puts_r+0x72>
 801432c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801432e:	f000 fb57 	bl	80149e0 <__retarget_lock_release_recursive>
 8014332:	4628      	mov	r0, r5
 8014334:	bd70      	pop	{r4, r5, r6, pc}
 8014336:	2b00      	cmp	r3, #0
 8014338:	da04      	bge.n	8014344 <_puts_r+0x84>
 801433a:	69a2      	ldr	r2, [r4, #24]
 801433c:	429a      	cmp	r2, r3
 801433e:	dc06      	bgt.n	801434e <_puts_r+0x8e>
 8014340:	290a      	cmp	r1, #10
 8014342:	d004      	beq.n	801434e <_puts_r+0x8e>
 8014344:	6823      	ldr	r3, [r4, #0]
 8014346:	1c5a      	adds	r2, r3, #1
 8014348:	6022      	str	r2, [r4, #0]
 801434a:	7019      	strb	r1, [r3, #0]
 801434c:	e7cf      	b.n	80142ee <_puts_r+0x2e>
 801434e:	4622      	mov	r2, r4
 8014350:	4628      	mov	r0, r5
 8014352:	f000 f96f 	bl	8014634 <__swbuf_r>
 8014356:	3001      	adds	r0, #1
 8014358:	d1c9      	bne.n	80142ee <_puts_r+0x2e>
 801435a:	e7df      	b.n	801431c <_puts_r+0x5c>
 801435c:	6823      	ldr	r3, [r4, #0]
 801435e:	250a      	movs	r5, #10
 8014360:	1c5a      	adds	r2, r3, #1
 8014362:	6022      	str	r2, [r4, #0]
 8014364:	701d      	strb	r5, [r3, #0]
 8014366:	e7db      	b.n	8014320 <_puts_r+0x60>

08014368 <puts>:
 8014368:	4b02      	ldr	r3, [pc, #8]	; (8014374 <puts+0xc>)
 801436a:	4601      	mov	r1, r0
 801436c:	6818      	ldr	r0, [r3, #0]
 801436e:	f7ff bfa7 	b.w	80142c0 <_puts_r>
 8014372:	bf00      	nop
 8014374:	20000254 	.word	0x20000254

08014378 <setvbuf>:
 8014378:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801437c:	461d      	mov	r5, r3
 801437e:	4b54      	ldr	r3, [pc, #336]	; (80144d0 <setvbuf+0x158>)
 8014380:	681f      	ldr	r7, [r3, #0]
 8014382:	4604      	mov	r4, r0
 8014384:	460e      	mov	r6, r1
 8014386:	4690      	mov	r8, r2
 8014388:	b127      	cbz	r7, 8014394 <setvbuf+0x1c>
 801438a:	6a3b      	ldr	r3, [r7, #32]
 801438c:	b913      	cbnz	r3, 8014394 <setvbuf+0x1c>
 801438e:	4638      	mov	r0, r7
 8014390:	f7ff ff4e 	bl	8014230 <__sinit>
 8014394:	f1b8 0f02 	cmp.w	r8, #2
 8014398:	d006      	beq.n	80143a8 <setvbuf+0x30>
 801439a:	f1b8 0f01 	cmp.w	r8, #1
 801439e:	f200 8094 	bhi.w	80144ca <setvbuf+0x152>
 80143a2:	2d00      	cmp	r5, #0
 80143a4:	f2c0 8091 	blt.w	80144ca <setvbuf+0x152>
 80143a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80143aa:	07da      	lsls	r2, r3, #31
 80143ac:	d405      	bmi.n	80143ba <setvbuf+0x42>
 80143ae:	89a3      	ldrh	r3, [r4, #12]
 80143b0:	059b      	lsls	r3, r3, #22
 80143b2:	d402      	bmi.n	80143ba <setvbuf+0x42>
 80143b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80143b6:	f000 fb12 	bl	80149de <__retarget_lock_acquire_recursive>
 80143ba:	4621      	mov	r1, r4
 80143bc:	4638      	mov	r0, r7
 80143be:	f001 f857 	bl	8015470 <_fflush_r>
 80143c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80143c4:	b141      	cbz	r1, 80143d8 <setvbuf+0x60>
 80143c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80143ca:	4299      	cmp	r1, r3
 80143cc:	d002      	beq.n	80143d4 <setvbuf+0x5c>
 80143ce:	4638      	mov	r0, r7
 80143d0:	f000 fb48 	bl	8014a64 <_free_r>
 80143d4:	2300      	movs	r3, #0
 80143d6:	6363      	str	r3, [r4, #52]	; 0x34
 80143d8:	2300      	movs	r3, #0
 80143da:	61a3      	str	r3, [r4, #24]
 80143dc:	6063      	str	r3, [r4, #4]
 80143de:	89a3      	ldrh	r3, [r4, #12]
 80143e0:	0618      	lsls	r0, r3, #24
 80143e2:	d503      	bpl.n	80143ec <setvbuf+0x74>
 80143e4:	6921      	ldr	r1, [r4, #16]
 80143e6:	4638      	mov	r0, r7
 80143e8:	f000 fb3c 	bl	8014a64 <_free_r>
 80143ec:	89a3      	ldrh	r3, [r4, #12]
 80143ee:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80143f2:	f023 0303 	bic.w	r3, r3, #3
 80143f6:	f1b8 0f02 	cmp.w	r8, #2
 80143fa:	81a3      	strh	r3, [r4, #12]
 80143fc:	d05f      	beq.n	80144be <setvbuf+0x146>
 80143fe:	ab01      	add	r3, sp, #4
 8014400:	466a      	mov	r2, sp
 8014402:	4621      	mov	r1, r4
 8014404:	4638      	mov	r0, r7
 8014406:	f001 f86d 	bl	80154e4 <__swhatbuf_r>
 801440a:	89a3      	ldrh	r3, [r4, #12]
 801440c:	4318      	orrs	r0, r3
 801440e:	81a0      	strh	r0, [r4, #12]
 8014410:	bb2d      	cbnz	r5, 801445e <setvbuf+0xe6>
 8014412:	9d00      	ldr	r5, [sp, #0]
 8014414:	4628      	mov	r0, r5
 8014416:	f7ff fca3 	bl	8013d60 <malloc>
 801441a:	4606      	mov	r6, r0
 801441c:	2800      	cmp	r0, #0
 801441e:	d150      	bne.n	80144c2 <setvbuf+0x14a>
 8014420:	f8dd 9000 	ldr.w	r9, [sp]
 8014424:	45a9      	cmp	r9, r5
 8014426:	d13e      	bne.n	80144a6 <setvbuf+0x12e>
 8014428:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801442c:	2200      	movs	r2, #0
 801442e:	60a2      	str	r2, [r4, #8]
 8014430:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8014434:	6022      	str	r2, [r4, #0]
 8014436:	6122      	str	r2, [r4, #16]
 8014438:	2201      	movs	r2, #1
 801443a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801443e:	6162      	str	r2, [r4, #20]
 8014440:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014442:	f043 0302 	orr.w	r3, r3, #2
 8014446:	07d1      	lsls	r1, r2, #31
 8014448:	81a3      	strh	r3, [r4, #12]
 801444a:	d404      	bmi.n	8014456 <setvbuf+0xde>
 801444c:	059b      	lsls	r3, r3, #22
 801444e:	d402      	bmi.n	8014456 <setvbuf+0xde>
 8014450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014452:	f000 fac5 	bl	80149e0 <__retarget_lock_release_recursive>
 8014456:	4628      	mov	r0, r5
 8014458:	b003      	add	sp, #12
 801445a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801445e:	2e00      	cmp	r6, #0
 8014460:	d0d8      	beq.n	8014414 <setvbuf+0x9c>
 8014462:	6a3b      	ldr	r3, [r7, #32]
 8014464:	b913      	cbnz	r3, 801446c <setvbuf+0xf4>
 8014466:	4638      	mov	r0, r7
 8014468:	f7ff fee2 	bl	8014230 <__sinit>
 801446c:	f1b8 0f01 	cmp.w	r8, #1
 8014470:	bf08      	it	eq
 8014472:	89a3      	ldrheq	r3, [r4, #12]
 8014474:	6026      	str	r6, [r4, #0]
 8014476:	bf04      	itt	eq
 8014478:	f043 0301 	orreq.w	r3, r3, #1
 801447c:	81a3      	strheq	r3, [r4, #12]
 801447e:	89a3      	ldrh	r3, [r4, #12]
 8014480:	f013 0208 	ands.w	r2, r3, #8
 8014484:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8014488:	d01d      	beq.n	80144c6 <setvbuf+0x14e>
 801448a:	07da      	lsls	r2, r3, #31
 801448c:	bf41      	itttt	mi
 801448e:	2200      	movmi	r2, #0
 8014490:	426d      	negmi	r5, r5
 8014492:	60a2      	strmi	r2, [r4, #8]
 8014494:	61a5      	strmi	r5, [r4, #24]
 8014496:	bf58      	it	pl
 8014498:	60a5      	strpl	r5, [r4, #8]
 801449a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801449c:	f015 0501 	ands.w	r5, r5, #1
 80144a0:	d0d4      	beq.n	801444c <setvbuf+0xd4>
 80144a2:	2500      	movs	r5, #0
 80144a4:	e7d7      	b.n	8014456 <setvbuf+0xde>
 80144a6:	4648      	mov	r0, r9
 80144a8:	f7ff fc5a 	bl	8013d60 <malloc>
 80144ac:	4606      	mov	r6, r0
 80144ae:	2800      	cmp	r0, #0
 80144b0:	d0ba      	beq.n	8014428 <setvbuf+0xb0>
 80144b2:	89a3      	ldrh	r3, [r4, #12]
 80144b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80144b8:	81a3      	strh	r3, [r4, #12]
 80144ba:	464d      	mov	r5, r9
 80144bc:	e7d1      	b.n	8014462 <setvbuf+0xea>
 80144be:	2500      	movs	r5, #0
 80144c0:	e7b4      	b.n	801442c <setvbuf+0xb4>
 80144c2:	46a9      	mov	r9, r5
 80144c4:	e7f5      	b.n	80144b2 <setvbuf+0x13a>
 80144c6:	60a2      	str	r2, [r4, #8]
 80144c8:	e7e7      	b.n	801449a <setvbuf+0x122>
 80144ca:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80144ce:	e7c2      	b.n	8014456 <setvbuf+0xde>
 80144d0:	20000254 	.word	0x20000254

080144d4 <sniprintf>:
 80144d4:	b40c      	push	{r2, r3}
 80144d6:	b530      	push	{r4, r5, lr}
 80144d8:	4b17      	ldr	r3, [pc, #92]	; (8014538 <sniprintf+0x64>)
 80144da:	1e0c      	subs	r4, r1, #0
 80144dc:	681d      	ldr	r5, [r3, #0]
 80144de:	b09d      	sub	sp, #116	; 0x74
 80144e0:	da08      	bge.n	80144f4 <sniprintf+0x20>
 80144e2:	238b      	movs	r3, #139	; 0x8b
 80144e4:	602b      	str	r3, [r5, #0]
 80144e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80144ea:	b01d      	add	sp, #116	; 0x74
 80144ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80144f0:	b002      	add	sp, #8
 80144f2:	4770      	bx	lr
 80144f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80144f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80144fc:	bf14      	ite	ne
 80144fe:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8014502:	4623      	moveq	r3, r4
 8014504:	9304      	str	r3, [sp, #16]
 8014506:	9307      	str	r3, [sp, #28]
 8014508:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801450c:	9002      	str	r0, [sp, #8]
 801450e:	9006      	str	r0, [sp, #24]
 8014510:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014514:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014516:	ab21      	add	r3, sp, #132	; 0x84
 8014518:	a902      	add	r1, sp, #8
 801451a:	4628      	mov	r0, r5
 801451c:	9301      	str	r3, [sp, #4]
 801451e:	f000 fb4f 	bl	8014bc0 <_svfiprintf_r>
 8014522:	1c43      	adds	r3, r0, #1
 8014524:	bfbc      	itt	lt
 8014526:	238b      	movlt	r3, #139	; 0x8b
 8014528:	602b      	strlt	r3, [r5, #0]
 801452a:	2c00      	cmp	r4, #0
 801452c:	d0dd      	beq.n	80144ea <sniprintf+0x16>
 801452e:	9b02      	ldr	r3, [sp, #8]
 8014530:	2200      	movs	r2, #0
 8014532:	701a      	strb	r2, [r3, #0]
 8014534:	e7d9      	b.n	80144ea <sniprintf+0x16>
 8014536:	bf00      	nop
 8014538:	20000254 	.word	0x20000254

0801453c <__sread>:
 801453c:	b510      	push	{r4, lr}
 801453e:	460c      	mov	r4, r1
 8014540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014544:	f000 f9ec 	bl	8014920 <_read_r>
 8014548:	2800      	cmp	r0, #0
 801454a:	bfab      	itete	ge
 801454c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801454e:	89a3      	ldrhlt	r3, [r4, #12]
 8014550:	181b      	addge	r3, r3, r0
 8014552:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014556:	bfac      	ite	ge
 8014558:	6563      	strge	r3, [r4, #84]	; 0x54
 801455a:	81a3      	strhlt	r3, [r4, #12]
 801455c:	bd10      	pop	{r4, pc}

0801455e <__swrite>:
 801455e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014562:	461f      	mov	r7, r3
 8014564:	898b      	ldrh	r3, [r1, #12]
 8014566:	05db      	lsls	r3, r3, #23
 8014568:	4605      	mov	r5, r0
 801456a:	460c      	mov	r4, r1
 801456c:	4616      	mov	r6, r2
 801456e:	d505      	bpl.n	801457c <__swrite+0x1e>
 8014570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014574:	2302      	movs	r3, #2
 8014576:	2200      	movs	r2, #0
 8014578:	f000 f9c0 	bl	80148fc <_lseek_r>
 801457c:	89a3      	ldrh	r3, [r4, #12]
 801457e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014586:	81a3      	strh	r3, [r4, #12]
 8014588:	4632      	mov	r2, r6
 801458a:	463b      	mov	r3, r7
 801458c:	4628      	mov	r0, r5
 801458e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014592:	f000 b9e7 	b.w	8014964 <_write_r>

08014596 <__sseek>:
 8014596:	b510      	push	{r4, lr}
 8014598:	460c      	mov	r4, r1
 801459a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801459e:	f000 f9ad 	bl	80148fc <_lseek_r>
 80145a2:	1c43      	adds	r3, r0, #1
 80145a4:	89a3      	ldrh	r3, [r4, #12]
 80145a6:	bf15      	itete	ne
 80145a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80145aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80145ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80145b2:	81a3      	strheq	r3, [r4, #12]
 80145b4:	bf18      	it	ne
 80145b6:	81a3      	strhne	r3, [r4, #12]
 80145b8:	bd10      	pop	{r4, pc}

080145ba <__sclose>:
 80145ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145be:	f000 b937 	b.w	8014830 <_close_r>

080145c2 <_vsniprintf_r>:
 80145c2:	b530      	push	{r4, r5, lr}
 80145c4:	4614      	mov	r4, r2
 80145c6:	2c00      	cmp	r4, #0
 80145c8:	b09b      	sub	sp, #108	; 0x6c
 80145ca:	4605      	mov	r5, r0
 80145cc:	461a      	mov	r2, r3
 80145ce:	da05      	bge.n	80145dc <_vsniprintf_r+0x1a>
 80145d0:	238b      	movs	r3, #139	; 0x8b
 80145d2:	6003      	str	r3, [r0, #0]
 80145d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80145d8:	b01b      	add	sp, #108	; 0x6c
 80145da:	bd30      	pop	{r4, r5, pc}
 80145dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80145e0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80145e4:	bf14      	ite	ne
 80145e6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80145ea:	4623      	moveq	r3, r4
 80145ec:	9302      	str	r3, [sp, #8]
 80145ee:	9305      	str	r3, [sp, #20]
 80145f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80145f4:	9100      	str	r1, [sp, #0]
 80145f6:	9104      	str	r1, [sp, #16]
 80145f8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80145fc:	4669      	mov	r1, sp
 80145fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014600:	f000 fade 	bl	8014bc0 <_svfiprintf_r>
 8014604:	1c43      	adds	r3, r0, #1
 8014606:	bfbc      	itt	lt
 8014608:	238b      	movlt	r3, #139	; 0x8b
 801460a:	602b      	strlt	r3, [r5, #0]
 801460c:	2c00      	cmp	r4, #0
 801460e:	d0e3      	beq.n	80145d8 <_vsniprintf_r+0x16>
 8014610:	9b00      	ldr	r3, [sp, #0]
 8014612:	2200      	movs	r2, #0
 8014614:	701a      	strb	r2, [r3, #0]
 8014616:	e7df      	b.n	80145d8 <_vsniprintf_r+0x16>

08014618 <vsniprintf>:
 8014618:	b507      	push	{r0, r1, r2, lr}
 801461a:	9300      	str	r3, [sp, #0]
 801461c:	4613      	mov	r3, r2
 801461e:	460a      	mov	r2, r1
 8014620:	4601      	mov	r1, r0
 8014622:	4803      	ldr	r0, [pc, #12]	; (8014630 <vsniprintf+0x18>)
 8014624:	6800      	ldr	r0, [r0, #0]
 8014626:	f7ff ffcc 	bl	80145c2 <_vsniprintf_r>
 801462a:	b003      	add	sp, #12
 801462c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014630:	20000254 	.word	0x20000254

08014634 <__swbuf_r>:
 8014634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014636:	460e      	mov	r6, r1
 8014638:	4614      	mov	r4, r2
 801463a:	4605      	mov	r5, r0
 801463c:	b118      	cbz	r0, 8014646 <__swbuf_r+0x12>
 801463e:	6a03      	ldr	r3, [r0, #32]
 8014640:	b90b      	cbnz	r3, 8014646 <__swbuf_r+0x12>
 8014642:	f7ff fdf5 	bl	8014230 <__sinit>
 8014646:	69a3      	ldr	r3, [r4, #24]
 8014648:	60a3      	str	r3, [r4, #8]
 801464a:	89a3      	ldrh	r3, [r4, #12]
 801464c:	071a      	lsls	r2, r3, #28
 801464e:	d525      	bpl.n	801469c <__swbuf_r+0x68>
 8014650:	6923      	ldr	r3, [r4, #16]
 8014652:	b31b      	cbz	r3, 801469c <__swbuf_r+0x68>
 8014654:	6823      	ldr	r3, [r4, #0]
 8014656:	6922      	ldr	r2, [r4, #16]
 8014658:	1a98      	subs	r0, r3, r2
 801465a:	6963      	ldr	r3, [r4, #20]
 801465c:	b2f6      	uxtb	r6, r6
 801465e:	4283      	cmp	r3, r0
 8014660:	4637      	mov	r7, r6
 8014662:	dc04      	bgt.n	801466e <__swbuf_r+0x3a>
 8014664:	4621      	mov	r1, r4
 8014666:	4628      	mov	r0, r5
 8014668:	f000 ff02 	bl	8015470 <_fflush_r>
 801466c:	b9e0      	cbnz	r0, 80146a8 <__swbuf_r+0x74>
 801466e:	68a3      	ldr	r3, [r4, #8]
 8014670:	3b01      	subs	r3, #1
 8014672:	60a3      	str	r3, [r4, #8]
 8014674:	6823      	ldr	r3, [r4, #0]
 8014676:	1c5a      	adds	r2, r3, #1
 8014678:	6022      	str	r2, [r4, #0]
 801467a:	701e      	strb	r6, [r3, #0]
 801467c:	6962      	ldr	r2, [r4, #20]
 801467e:	1c43      	adds	r3, r0, #1
 8014680:	429a      	cmp	r2, r3
 8014682:	d004      	beq.n	801468e <__swbuf_r+0x5a>
 8014684:	89a3      	ldrh	r3, [r4, #12]
 8014686:	07db      	lsls	r3, r3, #31
 8014688:	d506      	bpl.n	8014698 <__swbuf_r+0x64>
 801468a:	2e0a      	cmp	r6, #10
 801468c:	d104      	bne.n	8014698 <__swbuf_r+0x64>
 801468e:	4621      	mov	r1, r4
 8014690:	4628      	mov	r0, r5
 8014692:	f000 feed 	bl	8015470 <_fflush_r>
 8014696:	b938      	cbnz	r0, 80146a8 <__swbuf_r+0x74>
 8014698:	4638      	mov	r0, r7
 801469a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801469c:	4621      	mov	r1, r4
 801469e:	4628      	mov	r0, r5
 80146a0:	f000 f806 	bl	80146b0 <__swsetup_r>
 80146a4:	2800      	cmp	r0, #0
 80146a6:	d0d5      	beq.n	8014654 <__swbuf_r+0x20>
 80146a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80146ac:	e7f4      	b.n	8014698 <__swbuf_r+0x64>
	...

080146b0 <__swsetup_r>:
 80146b0:	b538      	push	{r3, r4, r5, lr}
 80146b2:	4b2a      	ldr	r3, [pc, #168]	; (801475c <__swsetup_r+0xac>)
 80146b4:	4605      	mov	r5, r0
 80146b6:	6818      	ldr	r0, [r3, #0]
 80146b8:	460c      	mov	r4, r1
 80146ba:	b118      	cbz	r0, 80146c4 <__swsetup_r+0x14>
 80146bc:	6a03      	ldr	r3, [r0, #32]
 80146be:	b90b      	cbnz	r3, 80146c4 <__swsetup_r+0x14>
 80146c0:	f7ff fdb6 	bl	8014230 <__sinit>
 80146c4:	89a3      	ldrh	r3, [r4, #12]
 80146c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80146ca:	0718      	lsls	r0, r3, #28
 80146cc:	d422      	bmi.n	8014714 <__swsetup_r+0x64>
 80146ce:	06d9      	lsls	r1, r3, #27
 80146d0:	d407      	bmi.n	80146e2 <__swsetup_r+0x32>
 80146d2:	2309      	movs	r3, #9
 80146d4:	602b      	str	r3, [r5, #0]
 80146d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80146da:	81a3      	strh	r3, [r4, #12]
 80146dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80146e0:	e034      	b.n	801474c <__swsetup_r+0x9c>
 80146e2:	0758      	lsls	r0, r3, #29
 80146e4:	d512      	bpl.n	801470c <__swsetup_r+0x5c>
 80146e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80146e8:	b141      	cbz	r1, 80146fc <__swsetup_r+0x4c>
 80146ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80146ee:	4299      	cmp	r1, r3
 80146f0:	d002      	beq.n	80146f8 <__swsetup_r+0x48>
 80146f2:	4628      	mov	r0, r5
 80146f4:	f000 f9b6 	bl	8014a64 <_free_r>
 80146f8:	2300      	movs	r3, #0
 80146fa:	6363      	str	r3, [r4, #52]	; 0x34
 80146fc:	89a3      	ldrh	r3, [r4, #12]
 80146fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014702:	81a3      	strh	r3, [r4, #12]
 8014704:	2300      	movs	r3, #0
 8014706:	6063      	str	r3, [r4, #4]
 8014708:	6923      	ldr	r3, [r4, #16]
 801470a:	6023      	str	r3, [r4, #0]
 801470c:	89a3      	ldrh	r3, [r4, #12]
 801470e:	f043 0308 	orr.w	r3, r3, #8
 8014712:	81a3      	strh	r3, [r4, #12]
 8014714:	6923      	ldr	r3, [r4, #16]
 8014716:	b94b      	cbnz	r3, 801472c <__swsetup_r+0x7c>
 8014718:	89a3      	ldrh	r3, [r4, #12]
 801471a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801471e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014722:	d003      	beq.n	801472c <__swsetup_r+0x7c>
 8014724:	4621      	mov	r1, r4
 8014726:	4628      	mov	r0, r5
 8014728:	f000 ff02 	bl	8015530 <__smakebuf_r>
 801472c:	89a0      	ldrh	r0, [r4, #12]
 801472e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014732:	f010 0301 	ands.w	r3, r0, #1
 8014736:	d00a      	beq.n	801474e <__swsetup_r+0x9e>
 8014738:	2300      	movs	r3, #0
 801473a:	60a3      	str	r3, [r4, #8]
 801473c:	6963      	ldr	r3, [r4, #20]
 801473e:	425b      	negs	r3, r3
 8014740:	61a3      	str	r3, [r4, #24]
 8014742:	6923      	ldr	r3, [r4, #16]
 8014744:	b943      	cbnz	r3, 8014758 <__swsetup_r+0xa8>
 8014746:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801474a:	d1c4      	bne.n	80146d6 <__swsetup_r+0x26>
 801474c:	bd38      	pop	{r3, r4, r5, pc}
 801474e:	0781      	lsls	r1, r0, #30
 8014750:	bf58      	it	pl
 8014752:	6963      	ldrpl	r3, [r4, #20]
 8014754:	60a3      	str	r3, [r4, #8]
 8014756:	e7f4      	b.n	8014742 <__swsetup_r+0x92>
 8014758:	2000      	movs	r0, #0
 801475a:	e7f7      	b.n	801474c <__swsetup_r+0x9c>
 801475c:	20000254 	.word	0x20000254

08014760 <memcmp>:
 8014760:	b510      	push	{r4, lr}
 8014762:	3901      	subs	r1, #1
 8014764:	4402      	add	r2, r0
 8014766:	4290      	cmp	r0, r2
 8014768:	d101      	bne.n	801476e <memcmp+0xe>
 801476a:	2000      	movs	r0, #0
 801476c:	e005      	b.n	801477a <memcmp+0x1a>
 801476e:	7803      	ldrb	r3, [r0, #0]
 8014770:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014774:	42a3      	cmp	r3, r4
 8014776:	d001      	beq.n	801477c <memcmp+0x1c>
 8014778:	1b18      	subs	r0, r3, r4
 801477a:	bd10      	pop	{r4, pc}
 801477c:	3001      	adds	r0, #1
 801477e:	e7f2      	b.n	8014766 <memcmp+0x6>

08014780 <memmove>:
 8014780:	4288      	cmp	r0, r1
 8014782:	b510      	push	{r4, lr}
 8014784:	eb01 0402 	add.w	r4, r1, r2
 8014788:	d902      	bls.n	8014790 <memmove+0x10>
 801478a:	4284      	cmp	r4, r0
 801478c:	4623      	mov	r3, r4
 801478e:	d807      	bhi.n	80147a0 <memmove+0x20>
 8014790:	1e43      	subs	r3, r0, #1
 8014792:	42a1      	cmp	r1, r4
 8014794:	d008      	beq.n	80147a8 <memmove+0x28>
 8014796:	f811 2b01 	ldrb.w	r2, [r1], #1
 801479a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801479e:	e7f8      	b.n	8014792 <memmove+0x12>
 80147a0:	4402      	add	r2, r0
 80147a2:	4601      	mov	r1, r0
 80147a4:	428a      	cmp	r2, r1
 80147a6:	d100      	bne.n	80147aa <memmove+0x2a>
 80147a8:	bd10      	pop	{r4, pc}
 80147aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80147ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80147b2:	e7f7      	b.n	80147a4 <memmove+0x24>

080147b4 <memset>:
 80147b4:	4402      	add	r2, r0
 80147b6:	4603      	mov	r3, r0
 80147b8:	4293      	cmp	r3, r2
 80147ba:	d100      	bne.n	80147be <memset+0xa>
 80147bc:	4770      	bx	lr
 80147be:	f803 1b01 	strb.w	r1, [r3], #1
 80147c2:	e7f9      	b.n	80147b8 <memset+0x4>

080147c4 <strchr>:
 80147c4:	b2c9      	uxtb	r1, r1
 80147c6:	4603      	mov	r3, r0
 80147c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80147cc:	b11a      	cbz	r2, 80147d6 <strchr+0x12>
 80147ce:	428a      	cmp	r2, r1
 80147d0:	d1f9      	bne.n	80147c6 <strchr+0x2>
 80147d2:	4618      	mov	r0, r3
 80147d4:	4770      	bx	lr
 80147d6:	2900      	cmp	r1, #0
 80147d8:	bf18      	it	ne
 80147da:	2300      	movne	r3, #0
 80147dc:	e7f9      	b.n	80147d2 <strchr+0xe>

080147de <strncmp>:
 80147de:	b510      	push	{r4, lr}
 80147e0:	b16a      	cbz	r2, 80147fe <strncmp+0x20>
 80147e2:	3901      	subs	r1, #1
 80147e4:	1884      	adds	r4, r0, r2
 80147e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80147ea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80147ee:	429a      	cmp	r2, r3
 80147f0:	d103      	bne.n	80147fa <strncmp+0x1c>
 80147f2:	42a0      	cmp	r0, r4
 80147f4:	d001      	beq.n	80147fa <strncmp+0x1c>
 80147f6:	2a00      	cmp	r2, #0
 80147f8:	d1f5      	bne.n	80147e6 <strncmp+0x8>
 80147fa:	1ad0      	subs	r0, r2, r3
 80147fc:	bd10      	pop	{r4, pc}
 80147fe:	4610      	mov	r0, r2
 8014800:	e7fc      	b.n	80147fc <strncmp+0x1e>

08014802 <strstr>:
 8014802:	780a      	ldrb	r2, [r1, #0]
 8014804:	b570      	push	{r4, r5, r6, lr}
 8014806:	b96a      	cbnz	r2, 8014824 <strstr+0x22>
 8014808:	bd70      	pop	{r4, r5, r6, pc}
 801480a:	429a      	cmp	r2, r3
 801480c:	d109      	bne.n	8014822 <strstr+0x20>
 801480e:	460c      	mov	r4, r1
 8014810:	4605      	mov	r5, r0
 8014812:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8014816:	2b00      	cmp	r3, #0
 8014818:	d0f6      	beq.n	8014808 <strstr+0x6>
 801481a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801481e:	429e      	cmp	r6, r3
 8014820:	d0f7      	beq.n	8014812 <strstr+0x10>
 8014822:	3001      	adds	r0, #1
 8014824:	7803      	ldrb	r3, [r0, #0]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d1ef      	bne.n	801480a <strstr+0x8>
 801482a:	4618      	mov	r0, r3
 801482c:	e7ec      	b.n	8014808 <strstr+0x6>
	...

08014830 <_close_r>:
 8014830:	b538      	push	{r3, r4, r5, lr}
 8014832:	4d06      	ldr	r5, [pc, #24]	; (801484c <_close_r+0x1c>)
 8014834:	2300      	movs	r3, #0
 8014836:	4604      	mov	r4, r0
 8014838:	4608      	mov	r0, r1
 801483a:	602b      	str	r3, [r5, #0]
 801483c:	f7ed f8bb 	bl	80019b6 <_close>
 8014840:	1c43      	adds	r3, r0, #1
 8014842:	d102      	bne.n	801484a <_close_r+0x1a>
 8014844:	682b      	ldr	r3, [r5, #0]
 8014846:	b103      	cbz	r3, 801484a <_close_r+0x1a>
 8014848:	6023      	str	r3, [r4, #0]
 801484a:	bd38      	pop	{r3, r4, r5, pc}
 801484c:	20010fa8 	.word	0x20010fa8

08014850 <_reclaim_reent>:
 8014850:	4b29      	ldr	r3, [pc, #164]	; (80148f8 <_reclaim_reent+0xa8>)
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	4283      	cmp	r3, r0
 8014856:	b570      	push	{r4, r5, r6, lr}
 8014858:	4604      	mov	r4, r0
 801485a:	d04b      	beq.n	80148f4 <_reclaim_reent+0xa4>
 801485c:	69c3      	ldr	r3, [r0, #28]
 801485e:	b143      	cbz	r3, 8014872 <_reclaim_reent+0x22>
 8014860:	68db      	ldr	r3, [r3, #12]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d144      	bne.n	80148f0 <_reclaim_reent+0xa0>
 8014866:	69e3      	ldr	r3, [r4, #28]
 8014868:	6819      	ldr	r1, [r3, #0]
 801486a:	b111      	cbz	r1, 8014872 <_reclaim_reent+0x22>
 801486c:	4620      	mov	r0, r4
 801486e:	f000 f8f9 	bl	8014a64 <_free_r>
 8014872:	6961      	ldr	r1, [r4, #20]
 8014874:	b111      	cbz	r1, 801487c <_reclaim_reent+0x2c>
 8014876:	4620      	mov	r0, r4
 8014878:	f000 f8f4 	bl	8014a64 <_free_r>
 801487c:	69e1      	ldr	r1, [r4, #28]
 801487e:	b111      	cbz	r1, 8014886 <_reclaim_reent+0x36>
 8014880:	4620      	mov	r0, r4
 8014882:	f000 f8ef 	bl	8014a64 <_free_r>
 8014886:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014888:	b111      	cbz	r1, 8014890 <_reclaim_reent+0x40>
 801488a:	4620      	mov	r0, r4
 801488c:	f000 f8ea 	bl	8014a64 <_free_r>
 8014890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014892:	b111      	cbz	r1, 801489a <_reclaim_reent+0x4a>
 8014894:	4620      	mov	r0, r4
 8014896:	f000 f8e5 	bl	8014a64 <_free_r>
 801489a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801489c:	b111      	cbz	r1, 80148a4 <_reclaim_reent+0x54>
 801489e:	4620      	mov	r0, r4
 80148a0:	f000 f8e0 	bl	8014a64 <_free_r>
 80148a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80148a6:	b111      	cbz	r1, 80148ae <_reclaim_reent+0x5e>
 80148a8:	4620      	mov	r0, r4
 80148aa:	f000 f8db 	bl	8014a64 <_free_r>
 80148ae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80148b0:	b111      	cbz	r1, 80148b8 <_reclaim_reent+0x68>
 80148b2:	4620      	mov	r0, r4
 80148b4:	f000 f8d6 	bl	8014a64 <_free_r>
 80148b8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80148ba:	b111      	cbz	r1, 80148c2 <_reclaim_reent+0x72>
 80148bc:	4620      	mov	r0, r4
 80148be:	f000 f8d1 	bl	8014a64 <_free_r>
 80148c2:	6a23      	ldr	r3, [r4, #32]
 80148c4:	b1b3      	cbz	r3, 80148f4 <_reclaim_reent+0xa4>
 80148c6:	4620      	mov	r0, r4
 80148c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148cc:	4718      	bx	r3
 80148ce:	5949      	ldr	r1, [r1, r5]
 80148d0:	b941      	cbnz	r1, 80148e4 <_reclaim_reent+0x94>
 80148d2:	3504      	adds	r5, #4
 80148d4:	69e3      	ldr	r3, [r4, #28]
 80148d6:	2d80      	cmp	r5, #128	; 0x80
 80148d8:	68d9      	ldr	r1, [r3, #12]
 80148da:	d1f8      	bne.n	80148ce <_reclaim_reent+0x7e>
 80148dc:	4620      	mov	r0, r4
 80148de:	f000 f8c1 	bl	8014a64 <_free_r>
 80148e2:	e7c0      	b.n	8014866 <_reclaim_reent+0x16>
 80148e4:	680e      	ldr	r6, [r1, #0]
 80148e6:	4620      	mov	r0, r4
 80148e8:	f000 f8bc 	bl	8014a64 <_free_r>
 80148ec:	4631      	mov	r1, r6
 80148ee:	e7ef      	b.n	80148d0 <_reclaim_reent+0x80>
 80148f0:	2500      	movs	r5, #0
 80148f2:	e7ef      	b.n	80148d4 <_reclaim_reent+0x84>
 80148f4:	bd70      	pop	{r4, r5, r6, pc}
 80148f6:	bf00      	nop
 80148f8:	20000254 	.word	0x20000254

080148fc <_lseek_r>:
 80148fc:	b538      	push	{r3, r4, r5, lr}
 80148fe:	4d07      	ldr	r5, [pc, #28]	; (801491c <_lseek_r+0x20>)
 8014900:	4604      	mov	r4, r0
 8014902:	4608      	mov	r0, r1
 8014904:	4611      	mov	r1, r2
 8014906:	2200      	movs	r2, #0
 8014908:	602a      	str	r2, [r5, #0]
 801490a:	461a      	mov	r2, r3
 801490c:	f7ed f87a 	bl	8001a04 <_lseek>
 8014910:	1c43      	adds	r3, r0, #1
 8014912:	d102      	bne.n	801491a <_lseek_r+0x1e>
 8014914:	682b      	ldr	r3, [r5, #0]
 8014916:	b103      	cbz	r3, 801491a <_lseek_r+0x1e>
 8014918:	6023      	str	r3, [r4, #0]
 801491a:	bd38      	pop	{r3, r4, r5, pc}
 801491c:	20010fa8 	.word	0x20010fa8

08014920 <_read_r>:
 8014920:	b538      	push	{r3, r4, r5, lr}
 8014922:	4d07      	ldr	r5, [pc, #28]	; (8014940 <_read_r+0x20>)
 8014924:	4604      	mov	r4, r0
 8014926:	4608      	mov	r0, r1
 8014928:	4611      	mov	r1, r2
 801492a:	2200      	movs	r2, #0
 801492c:	602a      	str	r2, [r5, #0]
 801492e:	461a      	mov	r2, r3
 8014930:	f7ed f808 	bl	8001944 <_read>
 8014934:	1c43      	adds	r3, r0, #1
 8014936:	d102      	bne.n	801493e <_read_r+0x1e>
 8014938:	682b      	ldr	r3, [r5, #0]
 801493a:	b103      	cbz	r3, 801493e <_read_r+0x1e>
 801493c:	6023      	str	r3, [r4, #0]
 801493e:	bd38      	pop	{r3, r4, r5, pc}
 8014940:	20010fa8 	.word	0x20010fa8

08014944 <_sbrk_r>:
 8014944:	b538      	push	{r3, r4, r5, lr}
 8014946:	4d06      	ldr	r5, [pc, #24]	; (8014960 <_sbrk_r+0x1c>)
 8014948:	2300      	movs	r3, #0
 801494a:	4604      	mov	r4, r0
 801494c:	4608      	mov	r0, r1
 801494e:	602b      	str	r3, [r5, #0]
 8014950:	f7ed f866 	bl	8001a20 <_sbrk>
 8014954:	1c43      	adds	r3, r0, #1
 8014956:	d102      	bne.n	801495e <_sbrk_r+0x1a>
 8014958:	682b      	ldr	r3, [r5, #0]
 801495a:	b103      	cbz	r3, 801495e <_sbrk_r+0x1a>
 801495c:	6023      	str	r3, [r4, #0]
 801495e:	bd38      	pop	{r3, r4, r5, pc}
 8014960:	20010fa8 	.word	0x20010fa8

08014964 <_write_r>:
 8014964:	b538      	push	{r3, r4, r5, lr}
 8014966:	4d07      	ldr	r5, [pc, #28]	; (8014984 <_write_r+0x20>)
 8014968:	4604      	mov	r4, r0
 801496a:	4608      	mov	r0, r1
 801496c:	4611      	mov	r1, r2
 801496e:	2200      	movs	r2, #0
 8014970:	602a      	str	r2, [r5, #0]
 8014972:	461a      	mov	r2, r3
 8014974:	f7ed f803 	bl	800197e <_write>
 8014978:	1c43      	adds	r3, r0, #1
 801497a:	d102      	bne.n	8014982 <_write_r+0x1e>
 801497c:	682b      	ldr	r3, [r5, #0]
 801497e:	b103      	cbz	r3, 8014982 <_write_r+0x1e>
 8014980:	6023      	str	r3, [r4, #0]
 8014982:	bd38      	pop	{r3, r4, r5, pc}
 8014984:	20010fa8 	.word	0x20010fa8

08014988 <__errno>:
 8014988:	4b01      	ldr	r3, [pc, #4]	; (8014990 <__errno+0x8>)
 801498a:	6818      	ldr	r0, [r3, #0]
 801498c:	4770      	bx	lr
 801498e:	bf00      	nop
 8014990:	20000254 	.word	0x20000254

08014994 <__libc_init_array>:
 8014994:	b570      	push	{r4, r5, r6, lr}
 8014996:	4d0d      	ldr	r5, [pc, #52]	; (80149cc <__libc_init_array+0x38>)
 8014998:	4c0d      	ldr	r4, [pc, #52]	; (80149d0 <__libc_init_array+0x3c>)
 801499a:	1b64      	subs	r4, r4, r5
 801499c:	10a4      	asrs	r4, r4, #2
 801499e:	2600      	movs	r6, #0
 80149a0:	42a6      	cmp	r6, r4
 80149a2:	d109      	bne.n	80149b8 <__libc_init_array+0x24>
 80149a4:	4d0b      	ldr	r5, [pc, #44]	; (80149d4 <__libc_init_array+0x40>)
 80149a6:	4c0c      	ldr	r4, [pc, #48]	; (80149d8 <__libc_init_array+0x44>)
 80149a8:	f000 fe6c 	bl	8015684 <_init>
 80149ac:	1b64      	subs	r4, r4, r5
 80149ae:	10a4      	asrs	r4, r4, #2
 80149b0:	2600      	movs	r6, #0
 80149b2:	42a6      	cmp	r6, r4
 80149b4:	d105      	bne.n	80149c2 <__libc_init_array+0x2e>
 80149b6:	bd70      	pop	{r4, r5, r6, pc}
 80149b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80149bc:	4798      	blx	r3
 80149be:	3601      	adds	r6, #1
 80149c0:	e7ee      	b.n	80149a0 <__libc_init_array+0xc>
 80149c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80149c6:	4798      	blx	r3
 80149c8:	3601      	adds	r6, #1
 80149ca:	e7f2      	b.n	80149b2 <__libc_init_array+0x1e>
 80149cc:	080166e8 	.word	0x080166e8
 80149d0:	080166e8 	.word	0x080166e8
 80149d4:	080166e8 	.word	0x080166e8
 80149d8:	080166f0 	.word	0x080166f0

080149dc <__retarget_lock_init_recursive>:
 80149dc:	4770      	bx	lr

080149de <__retarget_lock_acquire_recursive>:
 80149de:	4770      	bx	lr

080149e0 <__retarget_lock_release_recursive>:
 80149e0:	4770      	bx	lr

080149e2 <strcpy>:
 80149e2:	4603      	mov	r3, r0
 80149e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80149e8:	f803 2b01 	strb.w	r2, [r3], #1
 80149ec:	2a00      	cmp	r2, #0
 80149ee:	d1f9      	bne.n	80149e4 <strcpy+0x2>
 80149f0:	4770      	bx	lr

080149f2 <memcpy>:
 80149f2:	440a      	add	r2, r1
 80149f4:	4291      	cmp	r1, r2
 80149f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80149fa:	d100      	bne.n	80149fe <memcpy+0xc>
 80149fc:	4770      	bx	lr
 80149fe:	b510      	push	{r4, lr}
 8014a00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014a08:	4291      	cmp	r1, r2
 8014a0a:	d1f9      	bne.n	8014a00 <memcpy+0xe>
 8014a0c:	bd10      	pop	{r4, pc}
	...

08014a10 <__assert_func>:
 8014a10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014a12:	4614      	mov	r4, r2
 8014a14:	461a      	mov	r2, r3
 8014a16:	4b09      	ldr	r3, [pc, #36]	; (8014a3c <__assert_func+0x2c>)
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	4605      	mov	r5, r0
 8014a1c:	68d8      	ldr	r0, [r3, #12]
 8014a1e:	b14c      	cbz	r4, 8014a34 <__assert_func+0x24>
 8014a20:	4b07      	ldr	r3, [pc, #28]	; (8014a40 <__assert_func+0x30>)
 8014a22:	9100      	str	r1, [sp, #0]
 8014a24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014a28:	4906      	ldr	r1, [pc, #24]	; (8014a44 <__assert_func+0x34>)
 8014a2a:	462b      	mov	r3, r5
 8014a2c:	f000 fd48 	bl	80154c0 <fiprintf>
 8014a30:	f000 fddc 	bl	80155ec <abort>
 8014a34:	4b04      	ldr	r3, [pc, #16]	; (8014a48 <__assert_func+0x38>)
 8014a36:	461c      	mov	r4, r3
 8014a38:	e7f3      	b.n	8014a22 <__assert_func+0x12>
 8014a3a:	bf00      	nop
 8014a3c:	20000254 	.word	0x20000254
 8014a40:	08016670 	.word	0x08016670
 8014a44:	0801667d 	.word	0x0801667d
 8014a48:	080166ab 	.word	0x080166ab

08014a4c <__env_lock>:
 8014a4c:	4801      	ldr	r0, [pc, #4]	; (8014a54 <__env_lock+0x8>)
 8014a4e:	f7ff bfc6 	b.w	80149de <__retarget_lock_acquire_recursive>
 8014a52:	bf00      	nop
 8014a54:	20010fac 	.word	0x20010fac

08014a58 <__env_unlock>:
 8014a58:	4801      	ldr	r0, [pc, #4]	; (8014a60 <__env_unlock+0x8>)
 8014a5a:	f7ff bfc1 	b.w	80149e0 <__retarget_lock_release_recursive>
 8014a5e:	bf00      	nop
 8014a60:	20010fac 	.word	0x20010fac

08014a64 <_free_r>:
 8014a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014a66:	2900      	cmp	r1, #0
 8014a68:	d044      	beq.n	8014af4 <_free_r+0x90>
 8014a6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a6e:	9001      	str	r0, [sp, #4]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	f1a1 0404 	sub.w	r4, r1, #4
 8014a76:	bfb8      	it	lt
 8014a78:	18e4      	addlt	r4, r4, r3
 8014a7a:	f7ff fa21 	bl	8013ec0 <__malloc_lock>
 8014a7e:	4a1e      	ldr	r2, [pc, #120]	; (8014af8 <_free_r+0x94>)
 8014a80:	9801      	ldr	r0, [sp, #4]
 8014a82:	6813      	ldr	r3, [r2, #0]
 8014a84:	b933      	cbnz	r3, 8014a94 <_free_r+0x30>
 8014a86:	6063      	str	r3, [r4, #4]
 8014a88:	6014      	str	r4, [r2, #0]
 8014a8a:	b003      	add	sp, #12
 8014a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014a90:	f7ff ba1c 	b.w	8013ecc <__malloc_unlock>
 8014a94:	42a3      	cmp	r3, r4
 8014a96:	d908      	bls.n	8014aaa <_free_r+0x46>
 8014a98:	6825      	ldr	r5, [r4, #0]
 8014a9a:	1961      	adds	r1, r4, r5
 8014a9c:	428b      	cmp	r3, r1
 8014a9e:	bf01      	itttt	eq
 8014aa0:	6819      	ldreq	r1, [r3, #0]
 8014aa2:	685b      	ldreq	r3, [r3, #4]
 8014aa4:	1949      	addeq	r1, r1, r5
 8014aa6:	6021      	streq	r1, [r4, #0]
 8014aa8:	e7ed      	b.n	8014a86 <_free_r+0x22>
 8014aaa:	461a      	mov	r2, r3
 8014aac:	685b      	ldr	r3, [r3, #4]
 8014aae:	b10b      	cbz	r3, 8014ab4 <_free_r+0x50>
 8014ab0:	42a3      	cmp	r3, r4
 8014ab2:	d9fa      	bls.n	8014aaa <_free_r+0x46>
 8014ab4:	6811      	ldr	r1, [r2, #0]
 8014ab6:	1855      	adds	r5, r2, r1
 8014ab8:	42a5      	cmp	r5, r4
 8014aba:	d10b      	bne.n	8014ad4 <_free_r+0x70>
 8014abc:	6824      	ldr	r4, [r4, #0]
 8014abe:	4421      	add	r1, r4
 8014ac0:	1854      	adds	r4, r2, r1
 8014ac2:	42a3      	cmp	r3, r4
 8014ac4:	6011      	str	r1, [r2, #0]
 8014ac6:	d1e0      	bne.n	8014a8a <_free_r+0x26>
 8014ac8:	681c      	ldr	r4, [r3, #0]
 8014aca:	685b      	ldr	r3, [r3, #4]
 8014acc:	6053      	str	r3, [r2, #4]
 8014ace:	440c      	add	r4, r1
 8014ad0:	6014      	str	r4, [r2, #0]
 8014ad2:	e7da      	b.n	8014a8a <_free_r+0x26>
 8014ad4:	d902      	bls.n	8014adc <_free_r+0x78>
 8014ad6:	230c      	movs	r3, #12
 8014ad8:	6003      	str	r3, [r0, #0]
 8014ada:	e7d6      	b.n	8014a8a <_free_r+0x26>
 8014adc:	6825      	ldr	r5, [r4, #0]
 8014ade:	1961      	adds	r1, r4, r5
 8014ae0:	428b      	cmp	r3, r1
 8014ae2:	bf04      	itt	eq
 8014ae4:	6819      	ldreq	r1, [r3, #0]
 8014ae6:	685b      	ldreq	r3, [r3, #4]
 8014ae8:	6063      	str	r3, [r4, #4]
 8014aea:	bf04      	itt	eq
 8014aec:	1949      	addeq	r1, r1, r5
 8014aee:	6021      	streq	r1, [r4, #0]
 8014af0:	6054      	str	r4, [r2, #4]
 8014af2:	e7ca      	b.n	8014a8a <_free_r+0x26>
 8014af4:	b003      	add	sp, #12
 8014af6:	bd30      	pop	{r4, r5, pc}
 8014af8:	20010e64 	.word	0x20010e64

08014afc <_malloc_usable_size_r>:
 8014afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b00:	1f18      	subs	r0, r3, #4
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	bfbc      	itt	lt
 8014b06:	580b      	ldrlt	r3, [r1, r0]
 8014b08:	18c0      	addlt	r0, r0, r3
 8014b0a:	4770      	bx	lr

08014b0c <__ssputs_r>:
 8014b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b10:	688e      	ldr	r6, [r1, #8]
 8014b12:	461f      	mov	r7, r3
 8014b14:	42be      	cmp	r6, r7
 8014b16:	680b      	ldr	r3, [r1, #0]
 8014b18:	4682      	mov	sl, r0
 8014b1a:	460c      	mov	r4, r1
 8014b1c:	4690      	mov	r8, r2
 8014b1e:	d82c      	bhi.n	8014b7a <__ssputs_r+0x6e>
 8014b20:	898a      	ldrh	r2, [r1, #12]
 8014b22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014b26:	d026      	beq.n	8014b76 <__ssputs_r+0x6a>
 8014b28:	6965      	ldr	r5, [r4, #20]
 8014b2a:	6909      	ldr	r1, [r1, #16]
 8014b2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014b30:	eba3 0901 	sub.w	r9, r3, r1
 8014b34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014b38:	1c7b      	adds	r3, r7, #1
 8014b3a:	444b      	add	r3, r9
 8014b3c:	106d      	asrs	r5, r5, #1
 8014b3e:	429d      	cmp	r5, r3
 8014b40:	bf38      	it	cc
 8014b42:	461d      	movcc	r5, r3
 8014b44:	0553      	lsls	r3, r2, #21
 8014b46:	d527      	bpl.n	8014b98 <__ssputs_r+0x8c>
 8014b48:	4629      	mov	r1, r5
 8014b4a:	f7ff f939 	bl	8013dc0 <_malloc_r>
 8014b4e:	4606      	mov	r6, r0
 8014b50:	b360      	cbz	r0, 8014bac <__ssputs_r+0xa0>
 8014b52:	6921      	ldr	r1, [r4, #16]
 8014b54:	464a      	mov	r2, r9
 8014b56:	f7ff ff4c 	bl	80149f2 <memcpy>
 8014b5a:	89a3      	ldrh	r3, [r4, #12]
 8014b5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b64:	81a3      	strh	r3, [r4, #12]
 8014b66:	6126      	str	r6, [r4, #16]
 8014b68:	6165      	str	r5, [r4, #20]
 8014b6a:	444e      	add	r6, r9
 8014b6c:	eba5 0509 	sub.w	r5, r5, r9
 8014b70:	6026      	str	r6, [r4, #0]
 8014b72:	60a5      	str	r5, [r4, #8]
 8014b74:	463e      	mov	r6, r7
 8014b76:	42be      	cmp	r6, r7
 8014b78:	d900      	bls.n	8014b7c <__ssputs_r+0x70>
 8014b7a:	463e      	mov	r6, r7
 8014b7c:	6820      	ldr	r0, [r4, #0]
 8014b7e:	4632      	mov	r2, r6
 8014b80:	4641      	mov	r1, r8
 8014b82:	f7ff fdfd 	bl	8014780 <memmove>
 8014b86:	68a3      	ldr	r3, [r4, #8]
 8014b88:	1b9b      	subs	r3, r3, r6
 8014b8a:	60a3      	str	r3, [r4, #8]
 8014b8c:	6823      	ldr	r3, [r4, #0]
 8014b8e:	4433      	add	r3, r6
 8014b90:	6023      	str	r3, [r4, #0]
 8014b92:	2000      	movs	r0, #0
 8014b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b98:	462a      	mov	r2, r5
 8014b9a:	f7ff fa11 	bl	8013fc0 <_realloc_r>
 8014b9e:	4606      	mov	r6, r0
 8014ba0:	2800      	cmp	r0, #0
 8014ba2:	d1e0      	bne.n	8014b66 <__ssputs_r+0x5a>
 8014ba4:	6921      	ldr	r1, [r4, #16]
 8014ba6:	4650      	mov	r0, sl
 8014ba8:	f7ff ff5c 	bl	8014a64 <_free_r>
 8014bac:	230c      	movs	r3, #12
 8014bae:	f8ca 3000 	str.w	r3, [sl]
 8014bb2:	89a3      	ldrh	r3, [r4, #12]
 8014bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014bb8:	81a3      	strh	r3, [r4, #12]
 8014bba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014bbe:	e7e9      	b.n	8014b94 <__ssputs_r+0x88>

08014bc0 <_svfiprintf_r>:
 8014bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bc4:	4698      	mov	r8, r3
 8014bc6:	898b      	ldrh	r3, [r1, #12]
 8014bc8:	061b      	lsls	r3, r3, #24
 8014bca:	b09d      	sub	sp, #116	; 0x74
 8014bcc:	4607      	mov	r7, r0
 8014bce:	460d      	mov	r5, r1
 8014bd0:	4614      	mov	r4, r2
 8014bd2:	d50e      	bpl.n	8014bf2 <_svfiprintf_r+0x32>
 8014bd4:	690b      	ldr	r3, [r1, #16]
 8014bd6:	b963      	cbnz	r3, 8014bf2 <_svfiprintf_r+0x32>
 8014bd8:	2140      	movs	r1, #64	; 0x40
 8014bda:	f7ff f8f1 	bl	8013dc0 <_malloc_r>
 8014bde:	6028      	str	r0, [r5, #0]
 8014be0:	6128      	str	r0, [r5, #16]
 8014be2:	b920      	cbnz	r0, 8014bee <_svfiprintf_r+0x2e>
 8014be4:	230c      	movs	r3, #12
 8014be6:	603b      	str	r3, [r7, #0]
 8014be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014bec:	e0d0      	b.n	8014d90 <_svfiprintf_r+0x1d0>
 8014bee:	2340      	movs	r3, #64	; 0x40
 8014bf0:	616b      	str	r3, [r5, #20]
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8014bf6:	2320      	movs	r3, #32
 8014bf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014bfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8014c00:	2330      	movs	r3, #48	; 0x30
 8014c02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014da8 <_svfiprintf_r+0x1e8>
 8014c06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014c0a:	f04f 0901 	mov.w	r9, #1
 8014c0e:	4623      	mov	r3, r4
 8014c10:	469a      	mov	sl, r3
 8014c12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c16:	b10a      	cbz	r2, 8014c1c <_svfiprintf_r+0x5c>
 8014c18:	2a25      	cmp	r2, #37	; 0x25
 8014c1a:	d1f9      	bne.n	8014c10 <_svfiprintf_r+0x50>
 8014c1c:	ebba 0b04 	subs.w	fp, sl, r4
 8014c20:	d00b      	beq.n	8014c3a <_svfiprintf_r+0x7a>
 8014c22:	465b      	mov	r3, fp
 8014c24:	4622      	mov	r2, r4
 8014c26:	4629      	mov	r1, r5
 8014c28:	4638      	mov	r0, r7
 8014c2a:	f7ff ff6f 	bl	8014b0c <__ssputs_r>
 8014c2e:	3001      	adds	r0, #1
 8014c30:	f000 80a9 	beq.w	8014d86 <_svfiprintf_r+0x1c6>
 8014c34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c36:	445a      	add	r2, fp
 8014c38:	9209      	str	r2, [sp, #36]	; 0x24
 8014c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	f000 80a1 	beq.w	8014d86 <_svfiprintf_r+0x1c6>
 8014c44:	2300      	movs	r3, #0
 8014c46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014c4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014c4e:	f10a 0a01 	add.w	sl, sl, #1
 8014c52:	9304      	str	r3, [sp, #16]
 8014c54:	9307      	str	r3, [sp, #28]
 8014c56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014c5a:	931a      	str	r3, [sp, #104]	; 0x68
 8014c5c:	4654      	mov	r4, sl
 8014c5e:	2205      	movs	r2, #5
 8014c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c64:	4850      	ldr	r0, [pc, #320]	; (8014da8 <_svfiprintf_r+0x1e8>)
 8014c66:	f7eb fb03 	bl	8000270 <memchr>
 8014c6a:	9a04      	ldr	r2, [sp, #16]
 8014c6c:	b9d8      	cbnz	r0, 8014ca6 <_svfiprintf_r+0xe6>
 8014c6e:	06d0      	lsls	r0, r2, #27
 8014c70:	bf44      	itt	mi
 8014c72:	2320      	movmi	r3, #32
 8014c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014c78:	0711      	lsls	r1, r2, #28
 8014c7a:	bf44      	itt	mi
 8014c7c:	232b      	movmi	r3, #43	; 0x2b
 8014c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014c82:	f89a 3000 	ldrb.w	r3, [sl]
 8014c86:	2b2a      	cmp	r3, #42	; 0x2a
 8014c88:	d015      	beq.n	8014cb6 <_svfiprintf_r+0xf6>
 8014c8a:	9a07      	ldr	r2, [sp, #28]
 8014c8c:	4654      	mov	r4, sl
 8014c8e:	2000      	movs	r0, #0
 8014c90:	f04f 0c0a 	mov.w	ip, #10
 8014c94:	4621      	mov	r1, r4
 8014c96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014c9a:	3b30      	subs	r3, #48	; 0x30
 8014c9c:	2b09      	cmp	r3, #9
 8014c9e:	d94d      	bls.n	8014d3c <_svfiprintf_r+0x17c>
 8014ca0:	b1b0      	cbz	r0, 8014cd0 <_svfiprintf_r+0x110>
 8014ca2:	9207      	str	r2, [sp, #28]
 8014ca4:	e014      	b.n	8014cd0 <_svfiprintf_r+0x110>
 8014ca6:	eba0 0308 	sub.w	r3, r0, r8
 8014caa:	fa09 f303 	lsl.w	r3, r9, r3
 8014cae:	4313      	orrs	r3, r2
 8014cb0:	9304      	str	r3, [sp, #16]
 8014cb2:	46a2      	mov	sl, r4
 8014cb4:	e7d2      	b.n	8014c5c <_svfiprintf_r+0x9c>
 8014cb6:	9b03      	ldr	r3, [sp, #12]
 8014cb8:	1d19      	adds	r1, r3, #4
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	9103      	str	r1, [sp, #12]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	bfbb      	ittet	lt
 8014cc2:	425b      	neglt	r3, r3
 8014cc4:	f042 0202 	orrlt.w	r2, r2, #2
 8014cc8:	9307      	strge	r3, [sp, #28]
 8014cca:	9307      	strlt	r3, [sp, #28]
 8014ccc:	bfb8      	it	lt
 8014cce:	9204      	strlt	r2, [sp, #16]
 8014cd0:	7823      	ldrb	r3, [r4, #0]
 8014cd2:	2b2e      	cmp	r3, #46	; 0x2e
 8014cd4:	d10c      	bne.n	8014cf0 <_svfiprintf_r+0x130>
 8014cd6:	7863      	ldrb	r3, [r4, #1]
 8014cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8014cda:	d134      	bne.n	8014d46 <_svfiprintf_r+0x186>
 8014cdc:	9b03      	ldr	r3, [sp, #12]
 8014cde:	1d1a      	adds	r2, r3, #4
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	9203      	str	r2, [sp, #12]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	bfb8      	it	lt
 8014ce8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014cec:	3402      	adds	r4, #2
 8014cee:	9305      	str	r3, [sp, #20]
 8014cf0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014db8 <_svfiprintf_r+0x1f8>
 8014cf4:	7821      	ldrb	r1, [r4, #0]
 8014cf6:	2203      	movs	r2, #3
 8014cf8:	4650      	mov	r0, sl
 8014cfa:	f7eb fab9 	bl	8000270 <memchr>
 8014cfe:	b138      	cbz	r0, 8014d10 <_svfiprintf_r+0x150>
 8014d00:	9b04      	ldr	r3, [sp, #16]
 8014d02:	eba0 000a 	sub.w	r0, r0, sl
 8014d06:	2240      	movs	r2, #64	; 0x40
 8014d08:	4082      	lsls	r2, r0
 8014d0a:	4313      	orrs	r3, r2
 8014d0c:	3401      	adds	r4, #1
 8014d0e:	9304      	str	r3, [sp, #16]
 8014d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d14:	4825      	ldr	r0, [pc, #148]	; (8014dac <_svfiprintf_r+0x1ec>)
 8014d16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014d1a:	2206      	movs	r2, #6
 8014d1c:	f7eb faa8 	bl	8000270 <memchr>
 8014d20:	2800      	cmp	r0, #0
 8014d22:	d038      	beq.n	8014d96 <_svfiprintf_r+0x1d6>
 8014d24:	4b22      	ldr	r3, [pc, #136]	; (8014db0 <_svfiprintf_r+0x1f0>)
 8014d26:	bb1b      	cbnz	r3, 8014d70 <_svfiprintf_r+0x1b0>
 8014d28:	9b03      	ldr	r3, [sp, #12]
 8014d2a:	3307      	adds	r3, #7
 8014d2c:	f023 0307 	bic.w	r3, r3, #7
 8014d30:	3308      	adds	r3, #8
 8014d32:	9303      	str	r3, [sp, #12]
 8014d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d36:	4433      	add	r3, r6
 8014d38:	9309      	str	r3, [sp, #36]	; 0x24
 8014d3a:	e768      	b.n	8014c0e <_svfiprintf_r+0x4e>
 8014d3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014d40:	460c      	mov	r4, r1
 8014d42:	2001      	movs	r0, #1
 8014d44:	e7a6      	b.n	8014c94 <_svfiprintf_r+0xd4>
 8014d46:	2300      	movs	r3, #0
 8014d48:	3401      	adds	r4, #1
 8014d4a:	9305      	str	r3, [sp, #20]
 8014d4c:	4619      	mov	r1, r3
 8014d4e:	f04f 0c0a 	mov.w	ip, #10
 8014d52:	4620      	mov	r0, r4
 8014d54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d58:	3a30      	subs	r2, #48	; 0x30
 8014d5a:	2a09      	cmp	r2, #9
 8014d5c:	d903      	bls.n	8014d66 <_svfiprintf_r+0x1a6>
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d0c6      	beq.n	8014cf0 <_svfiprintf_r+0x130>
 8014d62:	9105      	str	r1, [sp, #20]
 8014d64:	e7c4      	b.n	8014cf0 <_svfiprintf_r+0x130>
 8014d66:	fb0c 2101 	mla	r1, ip, r1, r2
 8014d6a:	4604      	mov	r4, r0
 8014d6c:	2301      	movs	r3, #1
 8014d6e:	e7f0      	b.n	8014d52 <_svfiprintf_r+0x192>
 8014d70:	ab03      	add	r3, sp, #12
 8014d72:	9300      	str	r3, [sp, #0]
 8014d74:	462a      	mov	r2, r5
 8014d76:	4b0f      	ldr	r3, [pc, #60]	; (8014db4 <_svfiprintf_r+0x1f4>)
 8014d78:	a904      	add	r1, sp, #16
 8014d7a:	4638      	mov	r0, r7
 8014d7c:	f3af 8000 	nop.w
 8014d80:	1c42      	adds	r2, r0, #1
 8014d82:	4606      	mov	r6, r0
 8014d84:	d1d6      	bne.n	8014d34 <_svfiprintf_r+0x174>
 8014d86:	89ab      	ldrh	r3, [r5, #12]
 8014d88:	065b      	lsls	r3, r3, #25
 8014d8a:	f53f af2d 	bmi.w	8014be8 <_svfiprintf_r+0x28>
 8014d8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014d90:	b01d      	add	sp, #116	; 0x74
 8014d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d96:	ab03      	add	r3, sp, #12
 8014d98:	9300      	str	r3, [sp, #0]
 8014d9a:	462a      	mov	r2, r5
 8014d9c:	4b05      	ldr	r3, [pc, #20]	; (8014db4 <_svfiprintf_r+0x1f4>)
 8014d9e:	a904      	add	r1, sp, #16
 8014da0:	4638      	mov	r0, r7
 8014da2:	f000 f9bd 	bl	8015120 <_printf_i>
 8014da6:	e7eb      	b.n	8014d80 <_svfiprintf_r+0x1c0>
 8014da8:	080166ac 	.word	0x080166ac
 8014dac:	080166b6 	.word	0x080166b6
 8014db0:	00000000 	.word	0x00000000
 8014db4:	08014b0d 	.word	0x08014b0d
 8014db8:	080166b2 	.word	0x080166b2

08014dbc <__sfputc_r>:
 8014dbc:	6893      	ldr	r3, [r2, #8]
 8014dbe:	3b01      	subs	r3, #1
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	b410      	push	{r4}
 8014dc4:	6093      	str	r3, [r2, #8]
 8014dc6:	da08      	bge.n	8014dda <__sfputc_r+0x1e>
 8014dc8:	6994      	ldr	r4, [r2, #24]
 8014dca:	42a3      	cmp	r3, r4
 8014dcc:	db01      	blt.n	8014dd2 <__sfputc_r+0x16>
 8014dce:	290a      	cmp	r1, #10
 8014dd0:	d103      	bne.n	8014dda <__sfputc_r+0x1e>
 8014dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014dd6:	f7ff bc2d 	b.w	8014634 <__swbuf_r>
 8014dda:	6813      	ldr	r3, [r2, #0]
 8014ddc:	1c58      	adds	r0, r3, #1
 8014dde:	6010      	str	r0, [r2, #0]
 8014de0:	7019      	strb	r1, [r3, #0]
 8014de2:	4608      	mov	r0, r1
 8014de4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014de8:	4770      	bx	lr

08014dea <__sfputs_r>:
 8014dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dec:	4606      	mov	r6, r0
 8014dee:	460f      	mov	r7, r1
 8014df0:	4614      	mov	r4, r2
 8014df2:	18d5      	adds	r5, r2, r3
 8014df4:	42ac      	cmp	r4, r5
 8014df6:	d101      	bne.n	8014dfc <__sfputs_r+0x12>
 8014df8:	2000      	movs	r0, #0
 8014dfa:	e007      	b.n	8014e0c <__sfputs_r+0x22>
 8014dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e00:	463a      	mov	r2, r7
 8014e02:	4630      	mov	r0, r6
 8014e04:	f7ff ffda 	bl	8014dbc <__sfputc_r>
 8014e08:	1c43      	adds	r3, r0, #1
 8014e0a:	d1f3      	bne.n	8014df4 <__sfputs_r+0xa>
 8014e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014e10 <_vfiprintf_r>:
 8014e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e14:	460d      	mov	r5, r1
 8014e16:	b09d      	sub	sp, #116	; 0x74
 8014e18:	4614      	mov	r4, r2
 8014e1a:	4698      	mov	r8, r3
 8014e1c:	4606      	mov	r6, r0
 8014e1e:	b118      	cbz	r0, 8014e28 <_vfiprintf_r+0x18>
 8014e20:	6a03      	ldr	r3, [r0, #32]
 8014e22:	b90b      	cbnz	r3, 8014e28 <_vfiprintf_r+0x18>
 8014e24:	f7ff fa04 	bl	8014230 <__sinit>
 8014e28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014e2a:	07d9      	lsls	r1, r3, #31
 8014e2c:	d405      	bmi.n	8014e3a <_vfiprintf_r+0x2a>
 8014e2e:	89ab      	ldrh	r3, [r5, #12]
 8014e30:	059a      	lsls	r2, r3, #22
 8014e32:	d402      	bmi.n	8014e3a <_vfiprintf_r+0x2a>
 8014e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014e36:	f7ff fdd2 	bl	80149de <__retarget_lock_acquire_recursive>
 8014e3a:	89ab      	ldrh	r3, [r5, #12]
 8014e3c:	071b      	lsls	r3, r3, #28
 8014e3e:	d501      	bpl.n	8014e44 <_vfiprintf_r+0x34>
 8014e40:	692b      	ldr	r3, [r5, #16]
 8014e42:	b99b      	cbnz	r3, 8014e6c <_vfiprintf_r+0x5c>
 8014e44:	4629      	mov	r1, r5
 8014e46:	4630      	mov	r0, r6
 8014e48:	f7ff fc32 	bl	80146b0 <__swsetup_r>
 8014e4c:	b170      	cbz	r0, 8014e6c <_vfiprintf_r+0x5c>
 8014e4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014e50:	07dc      	lsls	r4, r3, #31
 8014e52:	d504      	bpl.n	8014e5e <_vfiprintf_r+0x4e>
 8014e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014e58:	b01d      	add	sp, #116	; 0x74
 8014e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e5e:	89ab      	ldrh	r3, [r5, #12]
 8014e60:	0598      	lsls	r0, r3, #22
 8014e62:	d4f7      	bmi.n	8014e54 <_vfiprintf_r+0x44>
 8014e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014e66:	f7ff fdbb 	bl	80149e0 <__retarget_lock_release_recursive>
 8014e6a:	e7f3      	b.n	8014e54 <_vfiprintf_r+0x44>
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8014e70:	2320      	movs	r3, #32
 8014e72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014e76:	f8cd 800c 	str.w	r8, [sp, #12]
 8014e7a:	2330      	movs	r3, #48	; 0x30
 8014e7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015030 <_vfiprintf_r+0x220>
 8014e80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014e84:	f04f 0901 	mov.w	r9, #1
 8014e88:	4623      	mov	r3, r4
 8014e8a:	469a      	mov	sl, r3
 8014e8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e90:	b10a      	cbz	r2, 8014e96 <_vfiprintf_r+0x86>
 8014e92:	2a25      	cmp	r2, #37	; 0x25
 8014e94:	d1f9      	bne.n	8014e8a <_vfiprintf_r+0x7a>
 8014e96:	ebba 0b04 	subs.w	fp, sl, r4
 8014e9a:	d00b      	beq.n	8014eb4 <_vfiprintf_r+0xa4>
 8014e9c:	465b      	mov	r3, fp
 8014e9e:	4622      	mov	r2, r4
 8014ea0:	4629      	mov	r1, r5
 8014ea2:	4630      	mov	r0, r6
 8014ea4:	f7ff ffa1 	bl	8014dea <__sfputs_r>
 8014ea8:	3001      	adds	r0, #1
 8014eaa:	f000 80a9 	beq.w	8015000 <_vfiprintf_r+0x1f0>
 8014eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014eb0:	445a      	add	r2, fp
 8014eb2:	9209      	str	r2, [sp, #36]	; 0x24
 8014eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	f000 80a1 	beq.w	8015000 <_vfiprintf_r+0x1f0>
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014ec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014ec8:	f10a 0a01 	add.w	sl, sl, #1
 8014ecc:	9304      	str	r3, [sp, #16]
 8014ece:	9307      	str	r3, [sp, #28]
 8014ed0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014ed4:	931a      	str	r3, [sp, #104]	; 0x68
 8014ed6:	4654      	mov	r4, sl
 8014ed8:	2205      	movs	r2, #5
 8014eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ede:	4854      	ldr	r0, [pc, #336]	; (8015030 <_vfiprintf_r+0x220>)
 8014ee0:	f7eb f9c6 	bl	8000270 <memchr>
 8014ee4:	9a04      	ldr	r2, [sp, #16]
 8014ee6:	b9d8      	cbnz	r0, 8014f20 <_vfiprintf_r+0x110>
 8014ee8:	06d1      	lsls	r1, r2, #27
 8014eea:	bf44      	itt	mi
 8014eec:	2320      	movmi	r3, #32
 8014eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ef2:	0713      	lsls	r3, r2, #28
 8014ef4:	bf44      	itt	mi
 8014ef6:	232b      	movmi	r3, #43	; 0x2b
 8014ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014efc:	f89a 3000 	ldrb.w	r3, [sl]
 8014f00:	2b2a      	cmp	r3, #42	; 0x2a
 8014f02:	d015      	beq.n	8014f30 <_vfiprintf_r+0x120>
 8014f04:	9a07      	ldr	r2, [sp, #28]
 8014f06:	4654      	mov	r4, sl
 8014f08:	2000      	movs	r0, #0
 8014f0a:	f04f 0c0a 	mov.w	ip, #10
 8014f0e:	4621      	mov	r1, r4
 8014f10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014f14:	3b30      	subs	r3, #48	; 0x30
 8014f16:	2b09      	cmp	r3, #9
 8014f18:	d94d      	bls.n	8014fb6 <_vfiprintf_r+0x1a6>
 8014f1a:	b1b0      	cbz	r0, 8014f4a <_vfiprintf_r+0x13a>
 8014f1c:	9207      	str	r2, [sp, #28]
 8014f1e:	e014      	b.n	8014f4a <_vfiprintf_r+0x13a>
 8014f20:	eba0 0308 	sub.w	r3, r0, r8
 8014f24:	fa09 f303 	lsl.w	r3, r9, r3
 8014f28:	4313      	orrs	r3, r2
 8014f2a:	9304      	str	r3, [sp, #16]
 8014f2c:	46a2      	mov	sl, r4
 8014f2e:	e7d2      	b.n	8014ed6 <_vfiprintf_r+0xc6>
 8014f30:	9b03      	ldr	r3, [sp, #12]
 8014f32:	1d19      	adds	r1, r3, #4
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	9103      	str	r1, [sp, #12]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	bfbb      	ittet	lt
 8014f3c:	425b      	neglt	r3, r3
 8014f3e:	f042 0202 	orrlt.w	r2, r2, #2
 8014f42:	9307      	strge	r3, [sp, #28]
 8014f44:	9307      	strlt	r3, [sp, #28]
 8014f46:	bfb8      	it	lt
 8014f48:	9204      	strlt	r2, [sp, #16]
 8014f4a:	7823      	ldrb	r3, [r4, #0]
 8014f4c:	2b2e      	cmp	r3, #46	; 0x2e
 8014f4e:	d10c      	bne.n	8014f6a <_vfiprintf_r+0x15a>
 8014f50:	7863      	ldrb	r3, [r4, #1]
 8014f52:	2b2a      	cmp	r3, #42	; 0x2a
 8014f54:	d134      	bne.n	8014fc0 <_vfiprintf_r+0x1b0>
 8014f56:	9b03      	ldr	r3, [sp, #12]
 8014f58:	1d1a      	adds	r2, r3, #4
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	9203      	str	r2, [sp, #12]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	bfb8      	it	lt
 8014f62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014f66:	3402      	adds	r4, #2
 8014f68:	9305      	str	r3, [sp, #20]
 8014f6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015040 <_vfiprintf_r+0x230>
 8014f6e:	7821      	ldrb	r1, [r4, #0]
 8014f70:	2203      	movs	r2, #3
 8014f72:	4650      	mov	r0, sl
 8014f74:	f7eb f97c 	bl	8000270 <memchr>
 8014f78:	b138      	cbz	r0, 8014f8a <_vfiprintf_r+0x17a>
 8014f7a:	9b04      	ldr	r3, [sp, #16]
 8014f7c:	eba0 000a 	sub.w	r0, r0, sl
 8014f80:	2240      	movs	r2, #64	; 0x40
 8014f82:	4082      	lsls	r2, r0
 8014f84:	4313      	orrs	r3, r2
 8014f86:	3401      	adds	r4, #1
 8014f88:	9304      	str	r3, [sp, #16]
 8014f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f8e:	4829      	ldr	r0, [pc, #164]	; (8015034 <_vfiprintf_r+0x224>)
 8014f90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014f94:	2206      	movs	r2, #6
 8014f96:	f7eb f96b 	bl	8000270 <memchr>
 8014f9a:	2800      	cmp	r0, #0
 8014f9c:	d03f      	beq.n	801501e <_vfiprintf_r+0x20e>
 8014f9e:	4b26      	ldr	r3, [pc, #152]	; (8015038 <_vfiprintf_r+0x228>)
 8014fa0:	bb1b      	cbnz	r3, 8014fea <_vfiprintf_r+0x1da>
 8014fa2:	9b03      	ldr	r3, [sp, #12]
 8014fa4:	3307      	adds	r3, #7
 8014fa6:	f023 0307 	bic.w	r3, r3, #7
 8014faa:	3308      	adds	r3, #8
 8014fac:	9303      	str	r3, [sp, #12]
 8014fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fb0:	443b      	add	r3, r7
 8014fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8014fb4:	e768      	b.n	8014e88 <_vfiprintf_r+0x78>
 8014fb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8014fba:	460c      	mov	r4, r1
 8014fbc:	2001      	movs	r0, #1
 8014fbe:	e7a6      	b.n	8014f0e <_vfiprintf_r+0xfe>
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	3401      	adds	r4, #1
 8014fc4:	9305      	str	r3, [sp, #20]
 8014fc6:	4619      	mov	r1, r3
 8014fc8:	f04f 0c0a 	mov.w	ip, #10
 8014fcc:	4620      	mov	r0, r4
 8014fce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014fd2:	3a30      	subs	r2, #48	; 0x30
 8014fd4:	2a09      	cmp	r2, #9
 8014fd6:	d903      	bls.n	8014fe0 <_vfiprintf_r+0x1d0>
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d0c6      	beq.n	8014f6a <_vfiprintf_r+0x15a>
 8014fdc:	9105      	str	r1, [sp, #20]
 8014fde:	e7c4      	b.n	8014f6a <_vfiprintf_r+0x15a>
 8014fe0:	fb0c 2101 	mla	r1, ip, r1, r2
 8014fe4:	4604      	mov	r4, r0
 8014fe6:	2301      	movs	r3, #1
 8014fe8:	e7f0      	b.n	8014fcc <_vfiprintf_r+0x1bc>
 8014fea:	ab03      	add	r3, sp, #12
 8014fec:	9300      	str	r3, [sp, #0]
 8014fee:	462a      	mov	r2, r5
 8014ff0:	4b12      	ldr	r3, [pc, #72]	; (801503c <_vfiprintf_r+0x22c>)
 8014ff2:	a904      	add	r1, sp, #16
 8014ff4:	4630      	mov	r0, r6
 8014ff6:	f3af 8000 	nop.w
 8014ffa:	4607      	mov	r7, r0
 8014ffc:	1c78      	adds	r0, r7, #1
 8014ffe:	d1d6      	bne.n	8014fae <_vfiprintf_r+0x19e>
 8015000:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015002:	07d9      	lsls	r1, r3, #31
 8015004:	d405      	bmi.n	8015012 <_vfiprintf_r+0x202>
 8015006:	89ab      	ldrh	r3, [r5, #12]
 8015008:	059a      	lsls	r2, r3, #22
 801500a:	d402      	bmi.n	8015012 <_vfiprintf_r+0x202>
 801500c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801500e:	f7ff fce7 	bl	80149e0 <__retarget_lock_release_recursive>
 8015012:	89ab      	ldrh	r3, [r5, #12]
 8015014:	065b      	lsls	r3, r3, #25
 8015016:	f53f af1d 	bmi.w	8014e54 <_vfiprintf_r+0x44>
 801501a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801501c:	e71c      	b.n	8014e58 <_vfiprintf_r+0x48>
 801501e:	ab03      	add	r3, sp, #12
 8015020:	9300      	str	r3, [sp, #0]
 8015022:	462a      	mov	r2, r5
 8015024:	4b05      	ldr	r3, [pc, #20]	; (801503c <_vfiprintf_r+0x22c>)
 8015026:	a904      	add	r1, sp, #16
 8015028:	4630      	mov	r0, r6
 801502a:	f000 f879 	bl	8015120 <_printf_i>
 801502e:	e7e4      	b.n	8014ffa <_vfiprintf_r+0x1ea>
 8015030:	080166ac 	.word	0x080166ac
 8015034:	080166b6 	.word	0x080166b6
 8015038:	00000000 	.word	0x00000000
 801503c:	08014deb 	.word	0x08014deb
 8015040:	080166b2 	.word	0x080166b2

08015044 <_printf_common>:
 8015044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015048:	4616      	mov	r6, r2
 801504a:	4699      	mov	r9, r3
 801504c:	688a      	ldr	r2, [r1, #8]
 801504e:	690b      	ldr	r3, [r1, #16]
 8015050:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015054:	4293      	cmp	r3, r2
 8015056:	bfb8      	it	lt
 8015058:	4613      	movlt	r3, r2
 801505a:	6033      	str	r3, [r6, #0]
 801505c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015060:	4607      	mov	r7, r0
 8015062:	460c      	mov	r4, r1
 8015064:	b10a      	cbz	r2, 801506a <_printf_common+0x26>
 8015066:	3301      	adds	r3, #1
 8015068:	6033      	str	r3, [r6, #0]
 801506a:	6823      	ldr	r3, [r4, #0]
 801506c:	0699      	lsls	r1, r3, #26
 801506e:	bf42      	ittt	mi
 8015070:	6833      	ldrmi	r3, [r6, #0]
 8015072:	3302      	addmi	r3, #2
 8015074:	6033      	strmi	r3, [r6, #0]
 8015076:	6825      	ldr	r5, [r4, #0]
 8015078:	f015 0506 	ands.w	r5, r5, #6
 801507c:	d106      	bne.n	801508c <_printf_common+0x48>
 801507e:	f104 0a19 	add.w	sl, r4, #25
 8015082:	68e3      	ldr	r3, [r4, #12]
 8015084:	6832      	ldr	r2, [r6, #0]
 8015086:	1a9b      	subs	r3, r3, r2
 8015088:	42ab      	cmp	r3, r5
 801508a:	dc26      	bgt.n	80150da <_printf_common+0x96>
 801508c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015090:	1e13      	subs	r3, r2, #0
 8015092:	6822      	ldr	r2, [r4, #0]
 8015094:	bf18      	it	ne
 8015096:	2301      	movne	r3, #1
 8015098:	0692      	lsls	r2, r2, #26
 801509a:	d42b      	bmi.n	80150f4 <_printf_common+0xb0>
 801509c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80150a0:	4649      	mov	r1, r9
 80150a2:	4638      	mov	r0, r7
 80150a4:	47c0      	blx	r8
 80150a6:	3001      	adds	r0, #1
 80150a8:	d01e      	beq.n	80150e8 <_printf_common+0xa4>
 80150aa:	6823      	ldr	r3, [r4, #0]
 80150ac:	6922      	ldr	r2, [r4, #16]
 80150ae:	f003 0306 	and.w	r3, r3, #6
 80150b2:	2b04      	cmp	r3, #4
 80150b4:	bf02      	ittt	eq
 80150b6:	68e5      	ldreq	r5, [r4, #12]
 80150b8:	6833      	ldreq	r3, [r6, #0]
 80150ba:	1aed      	subeq	r5, r5, r3
 80150bc:	68a3      	ldr	r3, [r4, #8]
 80150be:	bf0c      	ite	eq
 80150c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80150c4:	2500      	movne	r5, #0
 80150c6:	4293      	cmp	r3, r2
 80150c8:	bfc4      	itt	gt
 80150ca:	1a9b      	subgt	r3, r3, r2
 80150cc:	18ed      	addgt	r5, r5, r3
 80150ce:	2600      	movs	r6, #0
 80150d0:	341a      	adds	r4, #26
 80150d2:	42b5      	cmp	r5, r6
 80150d4:	d11a      	bne.n	801510c <_printf_common+0xc8>
 80150d6:	2000      	movs	r0, #0
 80150d8:	e008      	b.n	80150ec <_printf_common+0xa8>
 80150da:	2301      	movs	r3, #1
 80150dc:	4652      	mov	r2, sl
 80150de:	4649      	mov	r1, r9
 80150e0:	4638      	mov	r0, r7
 80150e2:	47c0      	blx	r8
 80150e4:	3001      	adds	r0, #1
 80150e6:	d103      	bne.n	80150f0 <_printf_common+0xac>
 80150e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80150ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150f0:	3501      	adds	r5, #1
 80150f2:	e7c6      	b.n	8015082 <_printf_common+0x3e>
 80150f4:	18e1      	adds	r1, r4, r3
 80150f6:	1c5a      	adds	r2, r3, #1
 80150f8:	2030      	movs	r0, #48	; 0x30
 80150fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80150fe:	4422      	add	r2, r4
 8015100:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015104:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015108:	3302      	adds	r3, #2
 801510a:	e7c7      	b.n	801509c <_printf_common+0x58>
 801510c:	2301      	movs	r3, #1
 801510e:	4622      	mov	r2, r4
 8015110:	4649      	mov	r1, r9
 8015112:	4638      	mov	r0, r7
 8015114:	47c0      	blx	r8
 8015116:	3001      	adds	r0, #1
 8015118:	d0e6      	beq.n	80150e8 <_printf_common+0xa4>
 801511a:	3601      	adds	r6, #1
 801511c:	e7d9      	b.n	80150d2 <_printf_common+0x8e>
	...

08015120 <_printf_i>:
 8015120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015124:	7e0f      	ldrb	r7, [r1, #24]
 8015126:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015128:	2f78      	cmp	r7, #120	; 0x78
 801512a:	4691      	mov	r9, r2
 801512c:	4680      	mov	r8, r0
 801512e:	460c      	mov	r4, r1
 8015130:	469a      	mov	sl, r3
 8015132:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015136:	d807      	bhi.n	8015148 <_printf_i+0x28>
 8015138:	2f62      	cmp	r7, #98	; 0x62
 801513a:	d80a      	bhi.n	8015152 <_printf_i+0x32>
 801513c:	2f00      	cmp	r7, #0
 801513e:	f000 80d4 	beq.w	80152ea <_printf_i+0x1ca>
 8015142:	2f58      	cmp	r7, #88	; 0x58
 8015144:	f000 80c0 	beq.w	80152c8 <_printf_i+0x1a8>
 8015148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801514c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015150:	e03a      	b.n	80151c8 <_printf_i+0xa8>
 8015152:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015156:	2b15      	cmp	r3, #21
 8015158:	d8f6      	bhi.n	8015148 <_printf_i+0x28>
 801515a:	a101      	add	r1, pc, #4	; (adr r1, 8015160 <_printf_i+0x40>)
 801515c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015160:	080151b9 	.word	0x080151b9
 8015164:	080151cd 	.word	0x080151cd
 8015168:	08015149 	.word	0x08015149
 801516c:	08015149 	.word	0x08015149
 8015170:	08015149 	.word	0x08015149
 8015174:	08015149 	.word	0x08015149
 8015178:	080151cd 	.word	0x080151cd
 801517c:	08015149 	.word	0x08015149
 8015180:	08015149 	.word	0x08015149
 8015184:	08015149 	.word	0x08015149
 8015188:	08015149 	.word	0x08015149
 801518c:	080152d1 	.word	0x080152d1
 8015190:	080151f9 	.word	0x080151f9
 8015194:	0801528b 	.word	0x0801528b
 8015198:	08015149 	.word	0x08015149
 801519c:	08015149 	.word	0x08015149
 80151a0:	080152f3 	.word	0x080152f3
 80151a4:	08015149 	.word	0x08015149
 80151a8:	080151f9 	.word	0x080151f9
 80151ac:	08015149 	.word	0x08015149
 80151b0:	08015149 	.word	0x08015149
 80151b4:	08015293 	.word	0x08015293
 80151b8:	682b      	ldr	r3, [r5, #0]
 80151ba:	1d1a      	adds	r2, r3, #4
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	602a      	str	r2, [r5, #0]
 80151c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80151c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80151c8:	2301      	movs	r3, #1
 80151ca:	e09f      	b.n	801530c <_printf_i+0x1ec>
 80151cc:	6820      	ldr	r0, [r4, #0]
 80151ce:	682b      	ldr	r3, [r5, #0]
 80151d0:	0607      	lsls	r7, r0, #24
 80151d2:	f103 0104 	add.w	r1, r3, #4
 80151d6:	6029      	str	r1, [r5, #0]
 80151d8:	d501      	bpl.n	80151de <_printf_i+0xbe>
 80151da:	681e      	ldr	r6, [r3, #0]
 80151dc:	e003      	b.n	80151e6 <_printf_i+0xc6>
 80151de:	0646      	lsls	r6, r0, #25
 80151e0:	d5fb      	bpl.n	80151da <_printf_i+0xba>
 80151e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80151e6:	2e00      	cmp	r6, #0
 80151e8:	da03      	bge.n	80151f2 <_printf_i+0xd2>
 80151ea:	232d      	movs	r3, #45	; 0x2d
 80151ec:	4276      	negs	r6, r6
 80151ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80151f2:	485a      	ldr	r0, [pc, #360]	; (801535c <_printf_i+0x23c>)
 80151f4:	230a      	movs	r3, #10
 80151f6:	e012      	b.n	801521e <_printf_i+0xfe>
 80151f8:	682b      	ldr	r3, [r5, #0]
 80151fa:	6820      	ldr	r0, [r4, #0]
 80151fc:	1d19      	adds	r1, r3, #4
 80151fe:	6029      	str	r1, [r5, #0]
 8015200:	0605      	lsls	r5, r0, #24
 8015202:	d501      	bpl.n	8015208 <_printf_i+0xe8>
 8015204:	681e      	ldr	r6, [r3, #0]
 8015206:	e002      	b.n	801520e <_printf_i+0xee>
 8015208:	0641      	lsls	r1, r0, #25
 801520a:	d5fb      	bpl.n	8015204 <_printf_i+0xe4>
 801520c:	881e      	ldrh	r6, [r3, #0]
 801520e:	4853      	ldr	r0, [pc, #332]	; (801535c <_printf_i+0x23c>)
 8015210:	2f6f      	cmp	r7, #111	; 0x6f
 8015212:	bf0c      	ite	eq
 8015214:	2308      	moveq	r3, #8
 8015216:	230a      	movne	r3, #10
 8015218:	2100      	movs	r1, #0
 801521a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801521e:	6865      	ldr	r5, [r4, #4]
 8015220:	60a5      	str	r5, [r4, #8]
 8015222:	2d00      	cmp	r5, #0
 8015224:	bfa2      	ittt	ge
 8015226:	6821      	ldrge	r1, [r4, #0]
 8015228:	f021 0104 	bicge.w	r1, r1, #4
 801522c:	6021      	strge	r1, [r4, #0]
 801522e:	b90e      	cbnz	r6, 8015234 <_printf_i+0x114>
 8015230:	2d00      	cmp	r5, #0
 8015232:	d04b      	beq.n	80152cc <_printf_i+0x1ac>
 8015234:	4615      	mov	r5, r2
 8015236:	fbb6 f1f3 	udiv	r1, r6, r3
 801523a:	fb03 6711 	mls	r7, r3, r1, r6
 801523e:	5dc7      	ldrb	r7, [r0, r7]
 8015240:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015244:	4637      	mov	r7, r6
 8015246:	42bb      	cmp	r3, r7
 8015248:	460e      	mov	r6, r1
 801524a:	d9f4      	bls.n	8015236 <_printf_i+0x116>
 801524c:	2b08      	cmp	r3, #8
 801524e:	d10b      	bne.n	8015268 <_printf_i+0x148>
 8015250:	6823      	ldr	r3, [r4, #0]
 8015252:	07de      	lsls	r6, r3, #31
 8015254:	d508      	bpl.n	8015268 <_printf_i+0x148>
 8015256:	6923      	ldr	r3, [r4, #16]
 8015258:	6861      	ldr	r1, [r4, #4]
 801525a:	4299      	cmp	r1, r3
 801525c:	bfde      	ittt	le
 801525e:	2330      	movle	r3, #48	; 0x30
 8015260:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015264:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015268:	1b52      	subs	r2, r2, r5
 801526a:	6122      	str	r2, [r4, #16]
 801526c:	f8cd a000 	str.w	sl, [sp]
 8015270:	464b      	mov	r3, r9
 8015272:	aa03      	add	r2, sp, #12
 8015274:	4621      	mov	r1, r4
 8015276:	4640      	mov	r0, r8
 8015278:	f7ff fee4 	bl	8015044 <_printf_common>
 801527c:	3001      	adds	r0, #1
 801527e:	d14a      	bne.n	8015316 <_printf_i+0x1f6>
 8015280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015284:	b004      	add	sp, #16
 8015286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801528a:	6823      	ldr	r3, [r4, #0]
 801528c:	f043 0320 	orr.w	r3, r3, #32
 8015290:	6023      	str	r3, [r4, #0]
 8015292:	4833      	ldr	r0, [pc, #204]	; (8015360 <_printf_i+0x240>)
 8015294:	2778      	movs	r7, #120	; 0x78
 8015296:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801529a:	6823      	ldr	r3, [r4, #0]
 801529c:	6829      	ldr	r1, [r5, #0]
 801529e:	061f      	lsls	r7, r3, #24
 80152a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80152a4:	d402      	bmi.n	80152ac <_printf_i+0x18c>
 80152a6:	065f      	lsls	r7, r3, #25
 80152a8:	bf48      	it	mi
 80152aa:	b2b6      	uxthmi	r6, r6
 80152ac:	07df      	lsls	r7, r3, #31
 80152ae:	bf48      	it	mi
 80152b0:	f043 0320 	orrmi.w	r3, r3, #32
 80152b4:	6029      	str	r1, [r5, #0]
 80152b6:	bf48      	it	mi
 80152b8:	6023      	strmi	r3, [r4, #0]
 80152ba:	b91e      	cbnz	r6, 80152c4 <_printf_i+0x1a4>
 80152bc:	6823      	ldr	r3, [r4, #0]
 80152be:	f023 0320 	bic.w	r3, r3, #32
 80152c2:	6023      	str	r3, [r4, #0]
 80152c4:	2310      	movs	r3, #16
 80152c6:	e7a7      	b.n	8015218 <_printf_i+0xf8>
 80152c8:	4824      	ldr	r0, [pc, #144]	; (801535c <_printf_i+0x23c>)
 80152ca:	e7e4      	b.n	8015296 <_printf_i+0x176>
 80152cc:	4615      	mov	r5, r2
 80152ce:	e7bd      	b.n	801524c <_printf_i+0x12c>
 80152d0:	682b      	ldr	r3, [r5, #0]
 80152d2:	6826      	ldr	r6, [r4, #0]
 80152d4:	6961      	ldr	r1, [r4, #20]
 80152d6:	1d18      	adds	r0, r3, #4
 80152d8:	6028      	str	r0, [r5, #0]
 80152da:	0635      	lsls	r5, r6, #24
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	d501      	bpl.n	80152e4 <_printf_i+0x1c4>
 80152e0:	6019      	str	r1, [r3, #0]
 80152e2:	e002      	b.n	80152ea <_printf_i+0x1ca>
 80152e4:	0670      	lsls	r0, r6, #25
 80152e6:	d5fb      	bpl.n	80152e0 <_printf_i+0x1c0>
 80152e8:	8019      	strh	r1, [r3, #0]
 80152ea:	2300      	movs	r3, #0
 80152ec:	6123      	str	r3, [r4, #16]
 80152ee:	4615      	mov	r5, r2
 80152f0:	e7bc      	b.n	801526c <_printf_i+0x14c>
 80152f2:	682b      	ldr	r3, [r5, #0]
 80152f4:	1d1a      	adds	r2, r3, #4
 80152f6:	602a      	str	r2, [r5, #0]
 80152f8:	681d      	ldr	r5, [r3, #0]
 80152fa:	6862      	ldr	r2, [r4, #4]
 80152fc:	2100      	movs	r1, #0
 80152fe:	4628      	mov	r0, r5
 8015300:	f7ea ffb6 	bl	8000270 <memchr>
 8015304:	b108      	cbz	r0, 801530a <_printf_i+0x1ea>
 8015306:	1b40      	subs	r0, r0, r5
 8015308:	6060      	str	r0, [r4, #4]
 801530a:	6863      	ldr	r3, [r4, #4]
 801530c:	6123      	str	r3, [r4, #16]
 801530e:	2300      	movs	r3, #0
 8015310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015314:	e7aa      	b.n	801526c <_printf_i+0x14c>
 8015316:	6923      	ldr	r3, [r4, #16]
 8015318:	462a      	mov	r2, r5
 801531a:	4649      	mov	r1, r9
 801531c:	4640      	mov	r0, r8
 801531e:	47d0      	blx	sl
 8015320:	3001      	adds	r0, #1
 8015322:	d0ad      	beq.n	8015280 <_printf_i+0x160>
 8015324:	6823      	ldr	r3, [r4, #0]
 8015326:	079b      	lsls	r3, r3, #30
 8015328:	d413      	bmi.n	8015352 <_printf_i+0x232>
 801532a:	68e0      	ldr	r0, [r4, #12]
 801532c:	9b03      	ldr	r3, [sp, #12]
 801532e:	4298      	cmp	r0, r3
 8015330:	bfb8      	it	lt
 8015332:	4618      	movlt	r0, r3
 8015334:	e7a6      	b.n	8015284 <_printf_i+0x164>
 8015336:	2301      	movs	r3, #1
 8015338:	4632      	mov	r2, r6
 801533a:	4649      	mov	r1, r9
 801533c:	4640      	mov	r0, r8
 801533e:	47d0      	blx	sl
 8015340:	3001      	adds	r0, #1
 8015342:	d09d      	beq.n	8015280 <_printf_i+0x160>
 8015344:	3501      	adds	r5, #1
 8015346:	68e3      	ldr	r3, [r4, #12]
 8015348:	9903      	ldr	r1, [sp, #12]
 801534a:	1a5b      	subs	r3, r3, r1
 801534c:	42ab      	cmp	r3, r5
 801534e:	dcf2      	bgt.n	8015336 <_printf_i+0x216>
 8015350:	e7eb      	b.n	801532a <_printf_i+0x20a>
 8015352:	2500      	movs	r5, #0
 8015354:	f104 0619 	add.w	r6, r4, #25
 8015358:	e7f5      	b.n	8015346 <_printf_i+0x226>
 801535a:	bf00      	nop
 801535c:	080166bd 	.word	0x080166bd
 8015360:	080166ce 	.word	0x080166ce

08015364 <__sflush_r>:
 8015364:	898a      	ldrh	r2, [r1, #12]
 8015366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801536a:	4605      	mov	r5, r0
 801536c:	0710      	lsls	r0, r2, #28
 801536e:	460c      	mov	r4, r1
 8015370:	d458      	bmi.n	8015424 <__sflush_r+0xc0>
 8015372:	684b      	ldr	r3, [r1, #4]
 8015374:	2b00      	cmp	r3, #0
 8015376:	dc05      	bgt.n	8015384 <__sflush_r+0x20>
 8015378:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801537a:	2b00      	cmp	r3, #0
 801537c:	dc02      	bgt.n	8015384 <__sflush_r+0x20>
 801537e:	2000      	movs	r0, #0
 8015380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015384:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015386:	2e00      	cmp	r6, #0
 8015388:	d0f9      	beq.n	801537e <__sflush_r+0x1a>
 801538a:	2300      	movs	r3, #0
 801538c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015390:	682f      	ldr	r7, [r5, #0]
 8015392:	6a21      	ldr	r1, [r4, #32]
 8015394:	602b      	str	r3, [r5, #0]
 8015396:	d032      	beq.n	80153fe <__sflush_r+0x9a>
 8015398:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801539a:	89a3      	ldrh	r3, [r4, #12]
 801539c:	075a      	lsls	r2, r3, #29
 801539e:	d505      	bpl.n	80153ac <__sflush_r+0x48>
 80153a0:	6863      	ldr	r3, [r4, #4]
 80153a2:	1ac0      	subs	r0, r0, r3
 80153a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80153a6:	b10b      	cbz	r3, 80153ac <__sflush_r+0x48>
 80153a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80153aa:	1ac0      	subs	r0, r0, r3
 80153ac:	2300      	movs	r3, #0
 80153ae:	4602      	mov	r2, r0
 80153b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80153b2:	6a21      	ldr	r1, [r4, #32]
 80153b4:	4628      	mov	r0, r5
 80153b6:	47b0      	blx	r6
 80153b8:	1c43      	adds	r3, r0, #1
 80153ba:	89a3      	ldrh	r3, [r4, #12]
 80153bc:	d106      	bne.n	80153cc <__sflush_r+0x68>
 80153be:	6829      	ldr	r1, [r5, #0]
 80153c0:	291d      	cmp	r1, #29
 80153c2:	d82b      	bhi.n	801541c <__sflush_r+0xb8>
 80153c4:	4a29      	ldr	r2, [pc, #164]	; (801546c <__sflush_r+0x108>)
 80153c6:	410a      	asrs	r2, r1
 80153c8:	07d6      	lsls	r6, r2, #31
 80153ca:	d427      	bmi.n	801541c <__sflush_r+0xb8>
 80153cc:	2200      	movs	r2, #0
 80153ce:	6062      	str	r2, [r4, #4]
 80153d0:	04d9      	lsls	r1, r3, #19
 80153d2:	6922      	ldr	r2, [r4, #16]
 80153d4:	6022      	str	r2, [r4, #0]
 80153d6:	d504      	bpl.n	80153e2 <__sflush_r+0x7e>
 80153d8:	1c42      	adds	r2, r0, #1
 80153da:	d101      	bne.n	80153e0 <__sflush_r+0x7c>
 80153dc:	682b      	ldr	r3, [r5, #0]
 80153de:	b903      	cbnz	r3, 80153e2 <__sflush_r+0x7e>
 80153e0:	6560      	str	r0, [r4, #84]	; 0x54
 80153e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80153e4:	602f      	str	r7, [r5, #0]
 80153e6:	2900      	cmp	r1, #0
 80153e8:	d0c9      	beq.n	801537e <__sflush_r+0x1a>
 80153ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80153ee:	4299      	cmp	r1, r3
 80153f0:	d002      	beq.n	80153f8 <__sflush_r+0x94>
 80153f2:	4628      	mov	r0, r5
 80153f4:	f7ff fb36 	bl	8014a64 <_free_r>
 80153f8:	2000      	movs	r0, #0
 80153fa:	6360      	str	r0, [r4, #52]	; 0x34
 80153fc:	e7c0      	b.n	8015380 <__sflush_r+0x1c>
 80153fe:	2301      	movs	r3, #1
 8015400:	4628      	mov	r0, r5
 8015402:	47b0      	blx	r6
 8015404:	1c41      	adds	r1, r0, #1
 8015406:	d1c8      	bne.n	801539a <__sflush_r+0x36>
 8015408:	682b      	ldr	r3, [r5, #0]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d0c5      	beq.n	801539a <__sflush_r+0x36>
 801540e:	2b1d      	cmp	r3, #29
 8015410:	d001      	beq.n	8015416 <__sflush_r+0xb2>
 8015412:	2b16      	cmp	r3, #22
 8015414:	d101      	bne.n	801541a <__sflush_r+0xb6>
 8015416:	602f      	str	r7, [r5, #0]
 8015418:	e7b1      	b.n	801537e <__sflush_r+0x1a>
 801541a:	89a3      	ldrh	r3, [r4, #12]
 801541c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015420:	81a3      	strh	r3, [r4, #12]
 8015422:	e7ad      	b.n	8015380 <__sflush_r+0x1c>
 8015424:	690f      	ldr	r7, [r1, #16]
 8015426:	2f00      	cmp	r7, #0
 8015428:	d0a9      	beq.n	801537e <__sflush_r+0x1a>
 801542a:	0793      	lsls	r3, r2, #30
 801542c:	680e      	ldr	r6, [r1, #0]
 801542e:	bf08      	it	eq
 8015430:	694b      	ldreq	r3, [r1, #20]
 8015432:	600f      	str	r7, [r1, #0]
 8015434:	bf18      	it	ne
 8015436:	2300      	movne	r3, #0
 8015438:	eba6 0807 	sub.w	r8, r6, r7
 801543c:	608b      	str	r3, [r1, #8]
 801543e:	f1b8 0f00 	cmp.w	r8, #0
 8015442:	dd9c      	ble.n	801537e <__sflush_r+0x1a>
 8015444:	6a21      	ldr	r1, [r4, #32]
 8015446:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015448:	4643      	mov	r3, r8
 801544a:	463a      	mov	r2, r7
 801544c:	4628      	mov	r0, r5
 801544e:	47b0      	blx	r6
 8015450:	2800      	cmp	r0, #0
 8015452:	dc06      	bgt.n	8015462 <__sflush_r+0xfe>
 8015454:	89a3      	ldrh	r3, [r4, #12]
 8015456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801545a:	81a3      	strh	r3, [r4, #12]
 801545c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015460:	e78e      	b.n	8015380 <__sflush_r+0x1c>
 8015462:	4407      	add	r7, r0
 8015464:	eba8 0800 	sub.w	r8, r8, r0
 8015468:	e7e9      	b.n	801543e <__sflush_r+0xda>
 801546a:	bf00      	nop
 801546c:	dfbffffe 	.word	0xdfbffffe

08015470 <_fflush_r>:
 8015470:	b538      	push	{r3, r4, r5, lr}
 8015472:	690b      	ldr	r3, [r1, #16]
 8015474:	4605      	mov	r5, r0
 8015476:	460c      	mov	r4, r1
 8015478:	b913      	cbnz	r3, 8015480 <_fflush_r+0x10>
 801547a:	2500      	movs	r5, #0
 801547c:	4628      	mov	r0, r5
 801547e:	bd38      	pop	{r3, r4, r5, pc}
 8015480:	b118      	cbz	r0, 801548a <_fflush_r+0x1a>
 8015482:	6a03      	ldr	r3, [r0, #32]
 8015484:	b90b      	cbnz	r3, 801548a <_fflush_r+0x1a>
 8015486:	f7fe fed3 	bl	8014230 <__sinit>
 801548a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d0f3      	beq.n	801547a <_fflush_r+0xa>
 8015492:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015494:	07d0      	lsls	r0, r2, #31
 8015496:	d404      	bmi.n	80154a2 <_fflush_r+0x32>
 8015498:	0599      	lsls	r1, r3, #22
 801549a:	d402      	bmi.n	80154a2 <_fflush_r+0x32>
 801549c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801549e:	f7ff fa9e 	bl	80149de <__retarget_lock_acquire_recursive>
 80154a2:	4628      	mov	r0, r5
 80154a4:	4621      	mov	r1, r4
 80154a6:	f7ff ff5d 	bl	8015364 <__sflush_r>
 80154aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80154ac:	07da      	lsls	r2, r3, #31
 80154ae:	4605      	mov	r5, r0
 80154b0:	d4e4      	bmi.n	801547c <_fflush_r+0xc>
 80154b2:	89a3      	ldrh	r3, [r4, #12]
 80154b4:	059b      	lsls	r3, r3, #22
 80154b6:	d4e1      	bmi.n	801547c <_fflush_r+0xc>
 80154b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80154ba:	f7ff fa91 	bl	80149e0 <__retarget_lock_release_recursive>
 80154be:	e7dd      	b.n	801547c <_fflush_r+0xc>

080154c0 <fiprintf>:
 80154c0:	b40e      	push	{r1, r2, r3}
 80154c2:	b503      	push	{r0, r1, lr}
 80154c4:	4601      	mov	r1, r0
 80154c6:	ab03      	add	r3, sp, #12
 80154c8:	4805      	ldr	r0, [pc, #20]	; (80154e0 <fiprintf+0x20>)
 80154ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80154ce:	6800      	ldr	r0, [r0, #0]
 80154d0:	9301      	str	r3, [sp, #4]
 80154d2:	f7ff fc9d 	bl	8014e10 <_vfiprintf_r>
 80154d6:	b002      	add	sp, #8
 80154d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80154dc:	b003      	add	sp, #12
 80154de:	4770      	bx	lr
 80154e0:	20000254 	.word	0x20000254

080154e4 <__swhatbuf_r>:
 80154e4:	b570      	push	{r4, r5, r6, lr}
 80154e6:	460c      	mov	r4, r1
 80154e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154ec:	2900      	cmp	r1, #0
 80154ee:	b096      	sub	sp, #88	; 0x58
 80154f0:	4615      	mov	r5, r2
 80154f2:	461e      	mov	r6, r3
 80154f4:	da0d      	bge.n	8015512 <__swhatbuf_r+0x2e>
 80154f6:	89a3      	ldrh	r3, [r4, #12]
 80154f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80154fc:	f04f 0100 	mov.w	r1, #0
 8015500:	bf0c      	ite	eq
 8015502:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015506:	2340      	movne	r3, #64	; 0x40
 8015508:	2000      	movs	r0, #0
 801550a:	6031      	str	r1, [r6, #0]
 801550c:	602b      	str	r3, [r5, #0]
 801550e:	b016      	add	sp, #88	; 0x58
 8015510:	bd70      	pop	{r4, r5, r6, pc}
 8015512:	466a      	mov	r2, sp
 8015514:	f000 f848 	bl	80155a8 <_fstat_r>
 8015518:	2800      	cmp	r0, #0
 801551a:	dbec      	blt.n	80154f6 <__swhatbuf_r+0x12>
 801551c:	9901      	ldr	r1, [sp, #4]
 801551e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015522:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015526:	4259      	negs	r1, r3
 8015528:	4159      	adcs	r1, r3
 801552a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801552e:	e7eb      	b.n	8015508 <__swhatbuf_r+0x24>

08015530 <__smakebuf_r>:
 8015530:	898b      	ldrh	r3, [r1, #12]
 8015532:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015534:	079d      	lsls	r5, r3, #30
 8015536:	4606      	mov	r6, r0
 8015538:	460c      	mov	r4, r1
 801553a:	d507      	bpl.n	801554c <__smakebuf_r+0x1c>
 801553c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015540:	6023      	str	r3, [r4, #0]
 8015542:	6123      	str	r3, [r4, #16]
 8015544:	2301      	movs	r3, #1
 8015546:	6163      	str	r3, [r4, #20]
 8015548:	b002      	add	sp, #8
 801554a:	bd70      	pop	{r4, r5, r6, pc}
 801554c:	ab01      	add	r3, sp, #4
 801554e:	466a      	mov	r2, sp
 8015550:	f7ff ffc8 	bl	80154e4 <__swhatbuf_r>
 8015554:	9900      	ldr	r1, [sp, #0]
 8015556:	4605      	mov	r5, r0
 8015558:	4630      	mov	r0, r6
 801555a:	f7fe fc31 	bl	8013dc0 <_malloc_r>
 801555e:	b948      	cbnz	r0, 8015574 <__smakebuf_r+0x44>
 8015560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015564:	059a      	lsls	r2, r3, #22
 8015566:	d4ef      	bmi.n	8015548 <__smakebuf_r+0x18>
 8015568:	f023 0303 	bic.w	r3, r3, #3
 801556c:	f043 0302 	orr.w	r3, r3, #2
 8015570:	81a3      	strh	r3, [r4, #12]
 8015572:	e7e3      	b.n	801553c <__smakebuf_r+0xc>
 8015574:	89a3      	ldrh	r3, [r4, #12]
 8015576:	6020      	str	r0, [r4, #0]
 8015578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801557c:	81a3      	strh	r3, [r4, #12]
 801557e:	9b00      	ldr	r3, [sp, #0]
 8015580:	6163      	str	r3, [r4, #20]
 8015582:	9b01      	ldr	r3, [sp, #4]
 8015584:	6120      	str	r0, [r4, #16]
 8015586:	b15b      	cbz	r3, 80155a0 <__smakebuf_r+0x70>
 8015588:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801558c:	4630      	mov	r0, r6
 801558e:	f000 f81d 	bl	80155cc <_isatty_r>
 8015592:	b128      	cbz	r0, 80155a0 <__smakebuf_r+0x70>
 8015594:	89a3      	ldrh	r3, [r4, #12]
 8015596:	f023 0303 	bic.w	r3, r3, #3
 801559a:	f043 0301 	orr.w	r3, r3, #1
 801559e:	81a3      	strh	r3, [r4, #12]
 80155a0:	89a3      	ldrh	r3, [r4, #12]
 80155a2:	431d      	orrs	r5, r3
 80155a4:	81a5      	strh	r5, [r4, #12]
 80155a6:	e7cf      	b.n	8015548 <__smakebuf_r+0x18>

080155a8 <_fstat_r>:
 80155a8:	b538      	push	{r3, r4, r5, lr}
 80155aa:	4d07      	ldr	r5, [pc, #28]	; (80155c8 <_fstat_r+0x20>)
 80155ac:	2300      	movs	r3, #0
 80155ae:	4604      	mov	r4, r0
 80155b0:	4608      	mov	r0, r1
 80155b2:	4611      	mov	r1, r2
 80155b4:	602b      	str	r3, [r5, #0]
 80155b6:	f7ec fa0a 	bl	80019ce <_fstat>
 80155ba:	1c43      	adds	r3, r0, #1
 80155bc:	d102      	bne.n	80155c4 <_fstat_r+0x1c>
 80155be:	682b      	ldr	r3, [r5, #0]
 80155c0:	b103      	cbz	r3, 80155c4 <_fstat_r+0x1c>
 80155c2:	6023      	str	r3, [r4, #0]
 80155c4:	bd38      	pop	{r3, r4, r5, pc}
 80155c6:	bf00      	nop
 80155c8:	20010fa8 	.word	0x20010fa8

080155cc <_isatty_r>:
 80155cc:	b538      	push	{r3, r4, r5, lr}
 80155ce:	4d06      	ldr	r5, [pc, #24]	; (80155e8 <_isatty_r+0x1c>)
 80155d0:	2300      	movs	r3, #0
 80155d2:	4604      	mov	r4, r0
 80155d4:	4608      	mov	r0, r1
 80155d6:	602b      	str	r3, [r5, #0]
 80155d8:	f7ec fa09 	bl	80019ee <_isatty>
 80155dc:	1c43      	adds	r3, r0, #1
 80155de:	d102      	bne.n	80155e6 <_isatty_r+0x1a>
 80155e0:	682b      	ldr	r3, [r5, #0]
 80155e2:	b103      	cbz	r3, 80155e6 <_isatty_r+0x1a>
 80155e4:	6023      	str	r3, [r4, #0]
 80155e6:	bd38      	pop	{r3, r4, r5, pc}
 80155e8:	20010fa8 	.word	0x20010fa8

080155ec <abort>:
 80155ec:	b508      	push	{r3, lr}
 80155ee:	2006      	movs	r0, #6
 80155f0:	f000 f82c 	bl	801564c <raise>
 80155f4:	2001      	movs	r0, #1
 80155f6:	f7ec f99b 	bl	8001930 <_exit>

080155fa <_raise_r>:
 80155fa:	291f      	cmp	r1, #31
 80155fc:	b538      	push	{r3, r4, r5, lr}
 80155fe:	4604      	mov	r4, r0
 8015600:	460d      	mov	r5, r1
 8015602:	d904      	bls.n	801560e <_raise_r+0x14>
 8015604:	2316      	movs	r3, #22
 8015606:	6003      	str	r3, [r0, #0]
 8015608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801560c:	bd38      	pop	{r3, r4, r5, pc}
 801560e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015610:	b112      	cbz	r2, 8015618 <_raise_r+0x1e>
 8015612:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015616:	b94b      	cbnz	r3, 801562c <_raise_r+0x32>
 8015618:	4620      	mov	r0, r4
 801561a:	f000 f831 	bl	8015680 <_getpid_r>
 801561e:	462a      	mov	r2, r5
 8015620:	4601      	mov	r1, r0
 8015622:	4620      	mov	r0, r4
 8015624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015628:	f000 b818 	b.w	801565c <_kill_r>
 801562c:	2b01      	cmp	r3, #1
 801562e:	d00a      	beq.n	8015646 <_raise_r+0x4c>
 8015630:	1c59      	adds	r1, r3, #1
 8015632:	d103      	bne.n	801563c <_raise_r+0x42>
 8015634:	2316      	movs	r3, #22
 8015636:	6003      	str	r3, [r0, #0]
 8015638:	2001      	movs	r0, #1
 801563a:	e7e7      	b.n	801560c <_raise_r+0x12>
 801563c:	2400      	movs	r4, #0
 801563e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015642:	4628      	mov	r0, r5
 8015644:	4798      	blx	r3
 8015646:	2000      	movs	r0, #0
 8015648:	e7e0      	b.n	801560c <_raise_r+0x12>
	...

0801564c <raise>:
 801564c:	4b02      	ldr	r3, [pc, #8]	; (8015658 <raise+0xc>)
 801564e:	4601      	mov	r1, r0
 8015650:	6818      	ldr	r0, [r3, #0]
 8015652:	f7ff bfd2 	b.w	80155fa <_raise_r>
 8015656:	bf00      	nop
 8015658:	20000254 	.word	0x20000254

0801565c <_kill_r>:
 801565c:	b538      	push	{r3, r4, r5, lr}
 801565e:	4d07      	ldr	r5, [pc, #28]	; (801567c <_kill_r+0x20>)
 8015660:	2300      	movs	r3, #0
 8015662:	4604      	mov	r4, r0
 8015664:	4608      	mov	r0, r1
 8015666:	4611      	mov	r1, r2
 8015668:	602b      	str	r3, [r5, #0]
 801566a:	f7ec f951 	bl	8001910 <_kill>
 801566e:	1c43      	adds	r3, r0, #1
 8015670:	d102      	bne.n	8015678 <_kill_r+0x1c>
 8015672:	682b      	ldr	r3, [r5, #0]
 8015674:	b103      	cbz	r3, 8015678 <_kill_r+0x1c>
 8015676:	6023      	str	r3, [r4, #0]
 8015678:	bd38      	pop	{r3, r4, r5, pc}
 801567a:	bf00      	nop
 801567c:	20010fa8 	.word	0x20010fa8

08015680 <_getpid_r>:
 8015680:	f7ec b93e 	b.w	8001900 <_getpid>

08015684 <_init>:
 8015684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015686:	bf00      	nop
 8015688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801568a:	bc08      	pop	{r3}
 801568c:	469e      	mov	lr, r3
 801568e:	4770      	bx	lr

08015690 <_fini>:
 8015690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015692:	bf00      	nop
 8015694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015696:	bc08      	pop	{r3}
 8015698:	469e      	mov	lr, r3
 801569a:	4770      	bx	lr
